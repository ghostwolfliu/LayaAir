{"version":3,"file":"laya.d3.js","sources":["../../../src/layaAir/laya/d3/math/MathUtils3D.ts","../../../src/layaAir/laya/d3/math/Vector2.ts","../../../src/layaAir/laya/d3/math/Vector4.ts","../../../src/layaAir/laya/d3/math/Vector3.ts","../../../src/layaAir/laya/d3/core/material/PBRRenderQuality.ts","../../../src/layaAir/laya/d3/math/Matrix3x3.ts","../../../src/layaAir/ILaya3D.ts","../../../src/layaAir/laya/d3/math/Quaternion.ts","../../../src/layaAir/laya/d3/math/Matrix4x4.ts","../../../src/layaAir/laya/d3/physics/shape/ColliderShape.ts","../../../src/layaAir/laya/d3/physics/shape/StaticPlaneColliderShape.ts","../../../src/layaAir/laya/d3/physics/shape/CompoundColliderShape.ts","../../../src/layaAir/laya/d3/core/Transform3D.ts","../../../src/layaAir/laya/d3/utils/Physics3DUtils.ts","../../../src/layaAir/laya/d3/physics/shape/BoxColliderShape.ts","../../../src/layaAir/laya/d3/physics/shape/CapsuleColliderShape.ts","../../../src/layaAir/laya/d3/physics/shape/ConeColliderShape.ts","../../../src/layaAir/laya/d3/physics/shape/CylinderColliderShape.ts","../../../src/layaAir/laya/d3/physics/shape/MeshColliderShape.ts","../../../src/layaAir/laya/d3/physics/shape/SphereColliderShape.ts","../../../src/layaAir/laya/d3/physics/PhysicsComponent.ts","../../../src/layaAir/laya/d3/component/SingletonList.ts","../../../src/layaAir/laya/d3/physics/PhysicsUpdateList.ts","../../../src/layaAir/laya/d3/physics/ContactPoint.ts","../../../src/layaAir/laya/d3/physics/HitResult.ts","../../../src/layaAir/laya/d3/physics/Collision.ts","../../../src/layaAir/laya/d3/physics/CollisionTool.ts","../../../src/layaAir/laya/d3/physics/PhysicsSimulation.ts","../../../src/layaAir/laya/d3/resource/TextureGenerator.ts","../../../src/layaAir/laya/d3/utils/Utils3D.ts","../../../src/layaAir/laya/d3/physics/CharacterController.ts","../../../src/layaAir/laya/d3/physics/PhysicsTriggerComponent.ts","../../../src/layaAir/laya/d3/physics/Rigidbody3D.ts","../../../src/layaAir/laya/d3/physics/Physics3D.ts","../../../src/layaAir/Config3D.ts","../../../src/layaAir/laya/d3/animation/KeyframeNode.ts","../../../src/layaAir/laya/d3/animation/AnimationEvent.ts","../../../src/layaAir/laya/d3/core/Keyframe.ts","../../../src/layaAir/laya/d3/core/FloatKeyframe.ts","../../../src/layaAir/laya/d3/core/QuaternionKeyframe.ts","../../../src/layaAir/laya/d3/core/Vector3Keyframe.ts","../../../src/layaAir/laya/d3/animation/AnimationClipParser03.ts","../../../src/layaAir/laya/d3/math/HalfFloatUtils.ts","../../../src/layaAir/laya/d3/animation/AnimationClipParser04.ts","../../../src/layaAir/laya/d3/animation/KeyframeNodeList.ts","../../../src/layaAir/laya/d3/animation/AnimationClip.ts","../../../src/layaAir/laya/d3/component/AnimatorPlayState.ts","../../../src/layaAir/laya/d3/component/AnimatorControllerLayer.ts","../../../src/layaAir/laya/d3/math/Native/ConchVector4.ts","../../../src/layaAir/laya/d3/math/Native/ConchVector3.ts","../../../src/layaAir/laya/d3/math/Native/ConchQuaternion.ts","../../../src/layaAir/laya/d3/component/AnimatorState.ts","../../../src/layaAir/laya/d3/component/KeyframeNodeOwner.ts","../../../src/layaAir/laya/d3/component/Animator.ts","../../../src/layaAir/laya/d3/core/render/PostProcessRenderContext.ts","../../../src/layaAir/laya/d3/core/render/RenderContext3D.ts","../../../src/layaAir/laya/d3/resource/RenderTexture.ts","../../../src/layaAir/laya/d3/shader/DefineDatas.ts","../../../src/layaAir/laya/d3/shader/ShaderDefine.ts","../../../src/layaAir/laya/d3/shader/ShaderVariantCollection.ts","../../../src/layaAir/laya/d3/shader/Shader3D.ts","../../../src/layaAir/laya/d3/shader/ShaderData.ts","../../../src/layaAir/laya/d3/component/PostProcess.ts","../../../src/layaAir/laya/d3/animation/AnimationTransform3D.ts","../../../src/layaAir/laya/d3/animation/AnimationNode.ts","../../../src/layaAir/laya/d3/core/Avatar.ts","../../../src/layaAir/laya/d3/core/material/Material.ts","../../../src/layaAir/laya/d3/core/material/BaseMaterial.ts","../../../src/layaAir/laya/d3/core/material/RenderState.ts","../../../src/layaAir/laya/d3/core/material/BlinnPhongMaterial.ts","../../../src/layaAir/laya/d3/core/material/EffectMaterial.ts","../../../src/layaAir/laya/d3/core/material/ExtendTerrainMaterial.ts","../../../src/layaAir/laya/d3/core/material/PBRMaterial.ts","../../../src/layaAir/laya/d3/shader/files/PBRSpecular.fs","../../../src/layaAir/laya/d3/shader/files/PBRSpecular.vs","../../../src/layaAir/laya/d3/shader/files/PBRSpecularShadowCaster.fs","../../../src/layaAir/laya/d3/shader/files/PBRSpecularShadowCaster.vs","../../../src/layaAir/laya/d3/shader/ShaderVariable.ts","../../../src/layaAir/laya/d3/shader/ShaderInstance.ts","../../../src/layaAir/laya/d3/component/SimpleSingletonList.ts","../../../src/layaAir/laya/d3/math/Color.ts","../../../src/layaAir/laya/d3/graphics/FrustumCulling.ts","../../../src/layaAir/laya/d3/graphics/renderPath/Cluster.ts","../../../src/layaAir/laya/d3/graphics/SphericalHarmonicsL2.ts","../../../src/layaAir/laya/d3/MouseTouch.ts","../../../src/layaAir/laya/d3/Touch.ts","../../../src/layaAir/laya/d3/math/Plane.ts","../../../src/layaAir/laya/d3/math/Ray.ts","../../../src/layaAir/laya/d3/math/ContainmentType.ts","../../../src/layaAir/laya/d3/math/CollisionUtils.ts","../../../src/layaAir/laya/d3/math/BoundFrustum.ts","../../../src/layaAir/laya/d3/math/Viewport.ts","../../../src/layaAir/laya/d3/utils/Picker.ts","../../../src/layaAir/laya/d3/core/BufferState.ts","../../../src/layaAir/laya/d3/graphics/IndexFormat.ts","../../../src/layaAir/laya/d3/graphics/IndexBuffer3D.ts","../../../src/layaAir/laya/d3/graphics/VertexElementFormat.ts","../../../src/layaAir/laya/d3/graphics/VertexDeclaration.ts","../../../src/layaAir/laya/d3/graphics/VertexElement.ts","../../../src/layaAir/laya/d3/graphics/Vertex/VertexMesh.ts","../../../src/layaAir/laya/d3/graphics/VertexBuffer3D.ts","../../../src/layaAir/laya/d3/resource/models/SkyMesh.ts","../../../src/layaAir/laya/d3/resource/models/SkyBox.ts","../../../src/layaAir/laya/d3/resource/models/SkyRenderer.ts","../../../src/layaAir/laya/d3/core/Sprite3D.ts","../../../src/layaAir/laya/d3/core/BaseCamera.ts","../../../src/layaAir/laya/d3/core/light/ShadowMode.ts","../../../src/layaAir/laya/d3/core/render/ScreenQuad.ts","../../../src/layaAir/laya/d3/core/render/ScreenTriangle.ts","../../../src/layaAir/laya/d3/core/render/command/Command.ts","../../../src/layaAir/laya/d3/core/render/command/BlitScreenQuadCMD.ts","../../../src/layaAir/laya/d3/core/render/command/SetRenderTargetCMD.ts","../../../src/layaAir/laya/d3/core/render/command/SetShaderDataTextureCMD.ts","../../../src/layaAir/laya/d3/core/render/command/CommandBuffer.ts","../../../src/layaAir/laya/d3/core/scene/Scene3DShaderDeclaration.ts","../../../src/layaAir/laya/d3/core/light/LightSprite.ts","../../../src/layaAir/laya/d3/core/light/ShadowCascadesMode.ts","../../../src/layaAir/laya/d3/core/light/ShadowUtils.ts","../../../src/layaAir/laya/d3/core/Camera.ts","../../../src/layaAir/laya/d3/Input3D.ts","../../../src/layaAir/laya/d3/physics/PhysicsSettings.ts","../../../src/layaAir/laya/d3/graphics/Vertex/VertexPositionTexture0.ts","../../../src/layaAir/laya/d3/resource/models/SkyDome.ts","../../../src/layaAir/laya/d3/resource/TextureCube.ts","../../../src/layaAir/laya/d3/core/light/LightQueue.ts","../../../src/layaAir/laya/d3/core/pixelLine/PixelLineMaterial.ts","../../../src/layaAir/laya/d3/math/BoundBox.ts","../../../src/layaAir/laya/d3/core/Bounds.ts","../../../src/layaAir/laya/d3/core/GeometryElement.ts","../../../src/layaAir/laya/d3/core/pixelLine/PixelLineVertex.ts","../../../src/layaAir/laya/d3/core/pixelLine/PixelLineFilter.ts","../../../src/layaAir/laya/d3/core/RenderableSprite3D.ts","../../../src/layaAir/laya/d3/core/render/BatchMark.ts","../../../src/layaAir/laya/d3/graphics/SubMeshInstanceBatch.ts","../../../src/layaAir/laya/d3/core/render/RenderElement.ts","../../../src/layaAir/laya/d3/core/render/SubMeshRenderElement.ts","../../../src/layaAir/laya/d3/graphics/StaticBatchManager.ts","../../../src/layaAir/laya/d3/graphics/SubMeshStaticBatch.ts","../../../src/layaAir/laya/d3/graphics/MeshRenderStaticBatchManager.ts","../../../src/layaAir/laya/d3/core/reflectionProbe/ReflectionProbe.ts","../../../src/layaAir/laya/d3/core/render/BaseRender.ts","../../../src/layaAir/laya/d3/core/pixelLine/PixelLineRenderer.ts","../../../src/layaAir/laya/d3/core/pixelLine/PixelLineSprite3D.ts","../../../src/layaAir/laya/d3/core/render/RenderQueue.ts","../../../src/layaAir/laya/d3/core/scene/BoundsOctreeNode.ts","../../../src/layaAir/laya/d3/core/scene/OctreeMotionList.ts","../../../src/layaAir/laya/d3/core/scene/BoundsOctree.ts","../../../src/layaAir/laya/d3/core/scene/Lightmap.ts","../../../src/layaAir/laya/d3/math/BoundSphere.ts","../../../src/layaAir/laya/d3/shadowMap/ShadowSliceData.ts","../../../src/layaAir/laya/d3/shadowMap/ShadowCasterPass.ts","../../../src/layaAir/laya/d3/graphics/DynamicBatchManager.ts","../../../src/layaAir/laya/d3/core/reflectionProbe/ReflectionProbeList.ts","../../../src/layaAir/laya/d3/core/reflectionProbe/ReflectionProbeManager.ts","../../../src/layaAir/laya/d3/core/scene/Scene3D.ts","../../../src/layaAir/laya/d3/shader/ShaderPass.ts","../../../src/layaAir/laya/d3/shader/SubShader.ts","../../../src/layaAir/laya/d3/core/material/PBRSpecularMaterial.ts","../../../src/layaAir/laya/d3/shader/files/PBR.fs","../../../src/layaAir/laya/d3/shader/files/PBR.vs","../../../src/layaAir/laya/d3/shader/files/PBRShadowCaster.fs","../../../src/layaAir/laya/d3/shader/files/PBRShadowCaster.vs","../../../src/layaAir/laya/d3/core/material/PBRStandardMaterial.ts","../../../src/layaAir/laya/d3/core/material/SkyBoxMaterial.ts","../../../src/layaAir/laya/d3/core/material/SkyProceduralMaterial.ts","../../../src/layaAir/laya/d3/core/material/UnlitMaterial.ts","../../../src/layaAir/laya/d3/core/material/WaterPrimaryMaterial.ts","../../../src/layaAir/laya/d3/core/MeshSprite3DShaderDeclaration.ts","../../../src/layaAir/laya/d3/core/MeshRenderer.ts","../../../src/layaAir/laya/d3/core/MeshFilter.ts","../../../src/layaAir/laya/d3/graphics/SubMeshDynamicBatch.ts","../../../src/layaAir/laya/d3/graphics/MeshRenderDynamicBatchManager.ts","../../../src/layaAir/laya/d3/core/MeshSprite3D.ts","../../../src/layaAir/laya/d3/core/GradientMode.ts","../../../src/layaAir/laya/d3/core/Gradient.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/Burst.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientColor.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/ColorOverLifetime.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/FrameOverTime.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientAngularVelocity.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientDataInt.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientDataNumber.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientSize.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientVelocity.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/RotationOverLifetime.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/BaseShape.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/ShapeUtils.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/BoxShape.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/CircleShape.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/ConeShape.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/HemisphereShape.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/SphereShape.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/SizeOverLifetime.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/StartFrame.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/TextureSheetAnimation.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/VelocityOverLifetime.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/ShuriKenParticle3DShaderDeclaration.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleMaterial.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleRenderer.ts","../../../src/layaAir/laya/d3/graphics/Vertex/VertexShuriKenParticle.ts","../../../src/layaAir/laya/d3/graphics/Vertex/VertexShurikenParticleBillboard.ts","../../../src/layaAir/laya/d3/graphics/Vertex/VertexShurikenParticleMesh.ts","../../../src/layaAir/laya/d3/math/Rand.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/Emission.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleData.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleSystem.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/ShuriKenParticle3D.ts","../../../src/layaAir/laya/d3/core/SkinnedMeshSprite3DShaderDeclaration.ts","../../../src/layaAir/laya/d3/core/SkinnedMeshRenderer.ts","../../../src/layaAir/laya/d3/core/SkinnedMeshSprite3D.ts","../../../src/layaAir/laya/d3/core/trail/TrailMaterial.ts","../../../src/layaAir/laya/d3/core/TextureMode.ts","../../../src/layaAir/laya/d3/core/trail/TrailAlignment.ts","../../../src/layaAir/laya/d3/core/trail/VertexTrail.ts","../../../src/layaAir/laya/d3/core/trail/TrailGeometry.ts","../../../src/layaAir/laya/d3/core/trail/TrailFilter.ts","../../../src/layaAir/laya/d3/core/trail/TrailRenderer.ts","../../../src/layaAir/laya/d3/core/trail/TrailSprite3D.ts","../../../src/layaAir/laya/d3/graphics/Vertex/VertexPositionTerrain.ts","../../../src/layaAir/laya/d3/physics/BulletInteractive.ts","../../../src/layaAir/laya/d3/physics/PhysicsCollider.ts","../../../src/layaAir/laya/d3/resource/models/SubMesh.ts","../../../src/layaAir/laya/d3/resource/models/Mesh.ts","../../../src/layaAir/laya/d3/resource/models/PrimitiveMesh.ts","../../../src/layaAir/laya/d3/shader/files/BlitScreen.fs","../../../src/layaAir/laya/d3/shader/files/BlitScreen.vs","../../../src/layaAir/laya/d3/shader/files/Effect.fs","../../../src/layaAir/laya/d3/shader/files/Effect.vs","../../../src/layaAir/laya/d3/shader/files/extendTerrain.fs","../../../src/layaAir/laya/d3/shader/files/extendTerrain.vs","../../../src/layaAir/laya/d3/shader/files/GlobalIllumination.glsl","../../../src/layaAir/laya/d3/shader/files/Lighting.glsl","../../../src/layaAir/laya/d3/shader/files/ShadowSampleTent.glsl","../../../src/layaAir/laya/d3/shader/files/line.fs","../../../src/layaAir/laya/d3/shader/files/line.vs","../../../src/layaAir/laya/d3/shader/files/Mesh-BlinnPhong.fs","../../../src/layaAir/laya/d3/shader/files/Mesh-BlinnPhong.vs","../../../src/layaAir/laya/d3/shader/files/Mesh-BlinnPhongShadowCaster.fs","../../../src/layaAir/laya/d3/shader/files/Mesh-BlinnPhongShadowCaster.vs","../../../src/layaAir/laya/d3/shader/files/ParticleShuriKen.fs","../../../src/layaAir/laya/d3/shader/files/ParticleShuriKen.vs","../../../src/layaAir/laya/d3/shader/files/PBRLibs/LayaPBRBRDF.glsl","../../../src/layaAir/laya/d3/shader/files/PBRLibs/PBRCore.glsl","../../../src/layaAir/laya/d3/shader/files/PBRLibs/PBRVSInput.glsl","../../../src/layaAir/laya/d3/shader/files/PBRLibs/PBRFSInput.glsl","../../../src/layaAir/laya/d3/shader/files/PBRLibs/PBRVertex.glsl","../../../src/layaAir/laya/d3/shader/files/postProcess/Bloom.vs","../../../src/layaAir/laya/d3/shader/files/postProcess/BloomDownsample13.fs","../../../src/layaAir/laya/d3/shader/files/postProcess/BloomDownsample4.fs","../../../src/layaAir/laya/d3/shader/files/postProcess/BloomPrefilter13.fs","../../../src/layaAir/laya/d3/shader/files/postProcess/BloomPrefilter4.fs","../../../src/layaAir/laya/d3/shader/files/postProcess/BloomUpsampleBox.fs","../../../src/layaAir/laya/d3/shader/files/postProcess/BloomUpsampleTent.fs","../../../src/layaAir/laya/d3/shader/files/postProcess/Colors.glsl","../../../src/layaAir/laya/d3/shader/files/postProcess/Composite.fs","../../../src/layaAir/laya/d3/shader/files/postProcess/Composite.vs","../../../src/layaAir/laya/d3/shader/files/postProcess/Sampling.glsl","../../../src/layaAir/laya/d3/shader/files/postProcess/StdLib.glsl","../../../src/layaAir/laya/d3/shader/files/Shadow.glsl","../../../src/layaAir/laya/d3/shader/files/ShadowCasterVS.glsl","../../../src/layaAir/laya/d3/shader/files/ShadowCasterFS.glsl","../../../src/layaAir/laya/d3/shader/files/SkyBox.fs","../../../src/layaAir/laya/d3/shader/files/SkyBox.vs","../../../src/layaAir/laya/d3/shader/files/SkyBoxProcedural.fs","../../../src/layaAir/laya/d3/shader/files/SkyBoxProcedural.vs","../../../src/layaAir/laya/d3/shader/files/Trail.fs","../../../src/layaAir/laya/d3/shader/files/Trail.vs","../../../src/layaAir/laya/d3/shader/files/Unlit.fs","../../../src/layaAir/laya/d3/shader/files/Unlit.vs","../../../src/layaAir/laya/d3/shader/files/WaterPrimary.fs","../../../src/layaAir/laya/d3/shader/files/WaterPrimary.vs","../../../src/layaAir/laya/d3/shader/ShaderInit3D.ts","../../../src/layaAir/laya/d3/core/light/DirectionLight.ts","../../../src/layaAir/laya/d3/core/light/PointLight.ts","../../../src/layaAir/laya/d3/core/light/SpotLight.ts","../../../src/layaAir/laya/d3/core/SimpleSkinnedMeshRenderer.ts","../../../src/layaAir/laya/d3/core/SimpleSkinnedMeshSprite3D.ts","../../../src/layaAir/laya/d3/utils/Scene3DUtils.ts","../../../src/layaAir/laya/d3/loaders/LoadModelV04.ts","../../../src/layaAir/laya/d3/loaders/LoadModelV05.ts","../../../src/layaAir/laya/d3/loaders/MeshReader.ts","../../../src/layaAir/laya/d3/shader/files/SkyPanoramic.fs","../../../src/layaAir/laya/d3/shader/files/SkyPanoramic.vs","../../../src/layaAir/laya/d3/core/material/SkyPanoramicMaterial.ts","../../../src/layaAir/laya/d3/physics/constraints/ConstraintComponent.ts","../../../src/layaAir/laya/d3/physics/constraints/FixedConstraint.ts","../../../src/layaAir/laya/d3/physics/constraints/ConfigurableConstraint.ts","../../../src/layaAir/Laya3D.ts","../../../src/layaAir/laya/d3/CastShadowList.ts","../../../src/layaAir/laya/d3/animation/AnimatorStateScript.ts","../../../src/layaAir/laya/d3/component/Script3D.ts","../../../src/layaAir/laya/d3/core/HeightMap.ts","../../../src/layaAir/laya/d3/core/MeshTerrainSprite3D.ts","../../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientDataVector2.ts","../../../src/layaAir/laya/d3/core/pixelLine/PixelLineData.ts","../../../src/layaAir/laya/d3/core/render/PostProcessEffect.ts","../../../src/layaAir/laya/d3/core/render/BloomEffect.ts","../../../src/layaAir/laya/d3/core/scene/SceneManager.ts","../../../src/layaAir/laya/d3/math/RandX.ts","../../../src/layaAir/laya/d3/physics/Constraint3D.ts","../../../src/layaAir/laya/d3/physics/constraints/Point2PointConstraint.ts","../../../src/layaAir/laya/d3/physics/shape/HeightfieldColliderShape.ts","../../../src/layaAir/laya/d3/text/TextMesh.ts","../../../src/layaAir/laya/d3/utils/Size.ts"],"sourcesContent":["/**\r\n * <code>MathUtils3D</code> 类用于创建数学工具。\r\n */\r\nexport class MathUtils3D {\r\n\t/**单精度浮点(float)零的容差*/\r\n\tstatic zeroTolerance: number = 1e-6;\r\n\t/**浮点数默认最大值*/\r\n\tstatic MaxValue: number = 3.40282347e+38;\r\n\t/**浮点数默认最小值*/\r\n\tstatic MinValue: number = -3.40282347e+38;\r\n\t/**角度转弧度系数*/\r\n\tstatic Deg2Rad: number = Math.PI / 180;\r\n\r\n\t/**\r\n\t * 创建一个 <code>MathUtils</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 是否在容差的范围内近似于0\r\n\t * @param  判断值\r\n\t * @return  是否近似于0\r\n\t */\r\n\tstatic isZero(v: number): boolean {\r\n\t\treturn Math.abs(v) < MathUtils3D.zeroTolerance;\r\n\t}\r\n\r\n\t/**\r\n\t * 两个值是否在容差的范围内近似相等Sqr Magnitude\r\n\t * @param  判断值\r\n\t * @return  是否近似于0\r\n\t */\r\n\tstatic nearEqual(n1: number, n2: number): boolean {\r\n\t\tif (MathUtils3D.isZero(n1 - n2))\r\n\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tstatic fastInvSqrt(value: number): number {\r\n\t\tif (MathUtils3D.isZero(value))\r\n\t\t\treturn value;\r\n\t\treturn 1.0 / Math.sqrt(value);\r\n\t}\r\n}\r\n\r\n\r\n","import { IClone } from \"../core/IClone\"\r\n\r\n/**\r\n * <code>Vector2</code> 类用于创建二维向量。\r\n */\r\nexport class Vector2 implements IClone {\r\n\t/**零向量,禁止修改*/\r\n\tstatic ZERO: Vector2 = new Vector2(0.0, 0.0);\r\n\t/**一向量,禁止修改*/\r\n\tstatic ONE: Vector2 = new Vector2(1.0, 1.0);\r\n\r\n\t/**X轴坐标*/\r\n\tx: number;\r\n\t/**Y轴坐标*/\r\n\ty: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Vector2</code> 实例。\r\n\t * @param\tx  X轴坐标。\r\n\t * @param\ty  Y轴坐标。\r\n\t */\r\n\tconstructor(x: number = 0, y: number = 0) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\t/**\r\n\t * 设置xy值。\r\n\t * @param\tx X值。\r\n\t * @param\ty Y值。\r\n\t */\r\n\tsetValue(x: number, y: number): void {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * 缩放二维向量。\r\n\t * @param\ta 源二维向量。\r\n\t * @param\tb 缩放值。\r\n\t * @param\tout 输出二维向量。\r\n\t */\r\n\tstatic scale(a: Vector2, b: number, out: Vector2): void {\r\n\t\tout.x = a.x * b;\r\n\t\tout.y = a.y * b;\r\n\t}\r\n\r\n\t/**\r\n\t * 从Array数组拷贝值。\r\n\t * @param  array 数组。\r\n\t * @param  offset 数组偏移。\r\n\t */\r\n\tfromArray(array: any[], offset: number = 0): void {\r\n\t\tthis.x = array[offset + 0];\r\n\t\tthis.y = array[offset + 1];\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destVector2: Vector2 = (<Vector2>destObject);\r\n\t\tdestVector2.x = this.x;\r\n\t\tdestVector2.y = this.y;\r\n\t}\r\n\r\n\t/**\r\n\t * 求两个二维向量的点积。\r\n\t * @param\ta left向量。\r\n\t * @param\tb right向量。\r\n\t * @return   点积。\r\n\t */\r\n\tstatic dot(a: Vector2, b: Vector2): number {\r\n\t\treturn (a.x * b.x) + (a.y * b.y);\r\n\t}\r\n\r\n\t/**\r\n\t * 归一化二维向量。\r\n\t * @param\ts 源三维向量。\r\n\t * @param\tout 输出三维向量。\r\n\t */\r\n\tstatic normalize(s: Vector2, out: Vector2): void {\r\n\t\tvar x: number = s.x, y: number = s.y;\r\n\t\tvar len: number = x * x + y * y;\r\n\t\tif (len > 0) {\r\n\t\t\tlen = 1 / Math.sqrt(len);\r\n\t\t\tout.x = x * len;\r\n\t\t\tout.y = y * len;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 计算标量长度。\r\n\t * @param\ta 源三维向量。\r\n\t * @return 标量长度。\r\n\t */\r\n\tstatic scalarLength(a: Vector2): number {\r\n\t\tvar x: number = a.x, y: number = a.y;\r\n\t\treturn Math.sqrt(x * x + y * y);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destVector2: Vector2 = new Vector2();\r\n\t\tthis.cloneTo(destVector2);\r\n\t\treturn destVector2;\r\n\t}\r\n\r\n\tforNativeElement(nativeElements: Float32Array = null): void//[NATIVE_TS]\r\n\t{\r\n\t\tif (nativeElements) {\r\n\t\t\t(<any>this).elements = nativeElements;\r\n\t\t\t(<any>this).elements[0] = this.x;\r\n\t\t\t(<any>this).elements[1] = this.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t(<any>this).elements = new Float32Array([this.x, this.y]);\r\n\t\t}\r\n\t\tVector2.rewriteNumProperty(this, \"x\", 0);\r\n\t\tVector2.rewriteNumProperty(this, \"y\", 1);\r\n\t}\r\n\r\n\tstatic rewriteNumProperty(proto: any, name: string, index: number): void {\r\n\t\tObject[\"defineProperty\"](proto, name, {\r\n\t\t\t\"get\": function (): any {\r\n\t\t\t\treturn this.elements[index];\r\n\t\t\t},\r\n\t\t\t\"set\": function (v: any): void {\r\n\t\t\t\tthis.elements[index] = v;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n\r\n","import { Matrix4x4 } from \"./Matrix4x4\";\r\nimport { MathUtils3D } from \"./MathUtils3D\";\r\nimport { Vector2 } from \"./Vector2\";\r\nimport { IClone } from \"../core/IClone\"\r\n\r\n/**\r\n * <code>Vector4</code> 类用于创建四维向量。\r\n */\r\nexport class Vector4 implements IClone {\r\n\r\n\t/**零向量，禁止修改*/\r\n\tstatic ZERO: Vector4 = new Vector4();\r\n\r\n\t/*一向量，禁止修改*/\r\n\tstatic ONE: Vector4 = new Vector4(1.0, 1.0, 1.0, 1.0);\r\n\r\n\t/*X单位向量，禁止修改*/\r\n\tstatic UnitX: Vector4 = new Vector4(1.0, 0.0, 0.0, 0.0);\r\n\r\n\t/*Y单位向量，禁止修改*/\r\n\tstatic UnitY: Vector4 = new Vector4(0.0, 1.0, 0.0, 0.0);\r\n\r\n\t/*Z单位向量，禁止修改*/\r\n\tstatic UnitZ: Vector4 = new Vector4(0.0, 0.0, 1.0, 0.0);\r\n\r\n\t/*W单位向量，禁止修改*/\r\n\tstatic UnitW: Vector4 = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n\t/**X轴坐标*/\r\n\tx: number;\r\n\t/**Y轴坐标*/\r\n\ty: number;\r\n\t/**Z轴坐标*/\r\n\tz: number;\r\n\t/**W轴坐标*/\r\n\tw: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Vector4</code> 实例。\r\n\t * @param\tx  X轴坐标。\r\n\t * @param\ty  Y轴坐标。\r\n\t * @param\tz  Z轴坐标。\r\n\t * @param\tw  W轴坐标。\r\n\t */\r\n\tconstructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置xyzw值。\r\n\t * @param\tx X值。\r\n\t * @param\ty Y值。\r\n\t * @param\tz Z值。\r\n\t * @param\tw W值。\r\n\t */\r\n\tsetValue(x: number, y: number, z: number, w: number): void {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\t}\r\n\r\n\t/**\r\n\t * 从Array数组拷贝值。\r\n\t * @param  array 数组。\r\n\t * @param  offset 数组偏移。\r\n\t */\r\n\tfromArray(array: any[], offset: number = 0): void {\r\n\t\tthis.x = array[offset + 0];\r\n\t\tthis.y = array[offset + 1];\r\n\t\tthis.z = array[offset + 2];\r\n\t\tthis.w = array[offset + 3];\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destVector4: Vector4 = (<Vector4>destObject);\r\n\t\tdestVector4.x = this.x;\r\n\t\tdestVector4.y = this.y;\r\n\t\tdestVector4.z = this.z;\r\n\t\tdestVector4.w = this.w;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destVector4: Vector4 = new Vector4();\r\n\t\tthis.cloneTo(destVector4);\r\n\t\treturn destVector4;\r\n\t}\r\n\r\n\t/**\r\n\t * 插值四维向量。\r\n\t * @param\ta left向量。\r\n\t * @param\tb right向量。\r\n\t * @param\tt 插值比例。\r\n\t * @param\tout 输出向量。\r\n\t */\r\n\tstatic lerp(a: Vector4, b: Vector4, t: number, out: Vector4): void {\r\n\t\tvar ax: number = a.x, ay: number = a.y, az: number = a.z, aw: number = a.w;\r\n\t\tout.x = ax + t * (b.x - ax);\r\n\t\tout.y = ay + t * (b.y - ay);\r\n\t\tout.z = az + t * (b.z - az);\r\n\t\tout.w = aw + t * (b.w - aw);\r\n\t}\r\n\r\n\t/**\r\n\t * 通过4x4矩阵把一个四维向量转换为另一个四维向量\r\n\t * @param\tvector4 带转换四维向量。\r\n\t * @param\tM4x4    4x4矩阵。\r\n\t * @param\tout     转换后四维向量。\r\n\t */\r\n\tstatic transformByM4x4(vector4: Vector4, m4x4: Matrix4x4, out: Vector4): void {\r\n\t\tvar vx: number = vector4.x;\r\n\t\tvar vy: number = vector4.y;\r\n\t\tvar vz: number = vector4.z;\r\n\t\tvar vw: number = vector4.w;\r\n\r\n\t\tvar me: Float32Array = m4x4.elements;\r\n\r\n\t\tout.x = vx * me[0] + vy * me[4] + vz * me[8] + vw * me[12];\r\n\t\tout.y = vx * me[1] + vy * me[5] + vz * me[9] + vw * me[13];\r\n\t\tout.z = vx * me[2] + vy * me[6] + vz * me[10] + vw * me[14];\r\n\t\tout.w = vx * me[3] + vy * me[7] + vz * me[11] + vw * me[15];\r\n\t}\r\n\r\n\t/**\r\n\t * 判断两个四维向量是否相等。\r\n\t * @param\ta 四维向量。\r\n\t * @param\tb 四维向量。\r\n\t * @return  是否相等。\r\n\t */\r\n\tstatic equals(a: Vector4, b: Vector4): boolean {\r\n\t\treturn MathUtils3D.nearEqual(Math.abs(a.x), Math.abs(b.x)) && MathUtils3D.nearEqual(Math.abs(a.y), Math.abs(b.y)) && MathUtils3D.nearEqual(Math.abs(a.z), Math.abs(b.z)) && MathUtils3D.nearEqual(Math.abs(a.w), Math.abs(b.w));\r\n\t}\r\n\r\n\t/**\r\n\t * 求四维向量的长度。\r\n\t * @return  长度。\r\n\t */\r\n\tlength(): number {\r\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\r\n\t}\r\n\r\n\t/**\r\n\t * 求四维向量长度的平方。\r\n\t * @return  长度的平方。\r\n\t */\r\n\tlengthSquared(): number {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\t}\r\n\r\n\t/**\r\n\t * 归一化四维向量。\r\n\t * @param\ts   源四维向量。\r\n\t * @param\tout 输出四维向量。\r\n\t */\r\n\tstatic normalize(s: Vector4, out: Vector4): void {\r\n\t\tvar len: number = s.length();\r\n\t\tif (len > 0) {\r\n\t\t\tvar inverse: number = 1.0 / len;\r\n\t\t\tout.x = s.x * inverse;\r\n\t\t\tout.y = s.y * inverse;\r\n\t\t\tout.z = s.z * inverse;\r\n\t\t\tout.w = s.w * inverse;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 求两个四维向量的和。\r\n\t * @param\ta   四维向量。\r\n\t * @param\tb   四维向量。\r\n\t * @param\tout 输出向量。\r\n\t */\r\n\tstatic add(a: Vector4, b: Vector4, out: Vector4): void {\r\n\t\tout.x = a.x + b.x;\r\n\t\tout.y = a.y + b.y;\r\n\t\tout.z = a.z + b.z;\r\n\t\tout.w = a.w + b.w;\r\n\t}\r\n\r\n\t/**\r\n\t * 求两个四维向量的差。\r\n\t * @param\ta   四维向量。\r\n\t * @param\tb   四维向量。\r\n\t * @param\tout 输出向量。\r\n\t */\r\n\tstatic subtract(a: Vector4, b: Vector4, out: Vector4): void {\r\n\t\tout.x = a.x - b.x;\r\n\t\tout.y = a.y - b.y;\r\n\t\tout.z = a.z - b.z;\r\n\t\tout.w = a.w - b.w;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算两个四维向量的乘积。\r\n\t * @param\ta   四维向量。\r\n\t * @param\tb   四维向量。\r\n\t * @param\tout 输出向量。\r\n\t */\r\n\tstatic multiply(a: Vector4, b: Vector4, out: Vector4): void {\r\n\t\tout.x = a.x * b.x;\r\n\t\tout.y = a.y * b.y;\r\n\t\tout.z = a.z * b.z;\r\n\t\tout.w = a.w * b.w;\r\n\t}\r\n\r\n\t/**\r\n\t * 缩放四维向量。\r\n\t * @param\ta   源四维向量。\r\n\t * @param\tb   缩放值。\r\n\t * @param\tout 输出四维向量。\r\n\t */\r\n\tstatic scale(a: Vector4, b: number, out: Vector4): void {\r\n\t\tout.x = a.x * b;\r\n\t\tout.y = a.y * b;\r\n\t\tout.z = a.z * b;\r\n\t\tout.w = a.w * b;\r\n\t}\r\n\r\n\t/**\r\n\t * 求一个指定范围的四维向量\r\n\t * @param\tvalue clamp向量\r\n\t * @param\tmin   最小\r\n\t * @param\tmax   最大\r\n\t * @param   out   输出向量\r\n\t */\r\n\tstatic Clamp(value: Vector4, min: Vector4, max: Vector4, out: Vector4): void {\r\n\t\tvar x: number = value.x;\r\n\t\tvar y: number = value.y;\r\n\t\tvar z: number = value.z;\r\n\t\tvar w: number = value.w;\r\n\r\n\t\tvar mineX: number = min.x;\r\n\t\tvar mineY: number = min.y;\r\n\t\tvar mineZ: number = min.z;\r\n\t\tvar mineW: number = min.w;\r\n\r\n\t\tvar maxeX: number = max.x;\r\n\t\tvar maxeY: number = max.y;\r\n\t\tvar maxeZ: number = max.z;\r\n\t\tvar maxeW: number = max.w;\r\n\r\n\t\tx = (x > maxeX) ? maxeX : x;\r\n\t\tx = (x < mineX) ? mineX : x;\r\n\r\n\t\ty = (y > maxeY) ? maxeY : y;\r\n\t\ty = (y < mineY) ? mineY : y;\r\n\r\n\t\tz = (z > maxeZ) ? maxeZ : z;\r\n\t\tz = (z < mineZ) ? mineZ : z;\r\n\r\n\t\tw = (w > maxeW) ? maxeW : w;\r\n\t\tw = (w < mineW) ? mineW : w;\r\n\r\n\t\tout.x = x;\r\n\t\tout.y = y;\r\n\t\tout.z = z;\r\n\t\tout.w = w;\r\n\t}\r\n\r\n\t/**\r\n\t * 两个四维向量距离的平方。\r\n\t * @param\tvalue1 向量1。\r\n\t * @param\tvalue2 向量2。\r\n\t * @return\t距离的平方。\r\n\t */\r\n\tstatic distanceSquared(value1: Vector4, value2: Vector4): number {\r\n\t\tvar x: number = value1.x - value2.x;\r\n\t\tvar y: number = value1.y - value2.y;\r\n\t\tvar z: number = value1.z - value2.z;\r\n\t\tvar w: number = value1.w - value2.w;\r\n\r\n\t\treturn (x * x) + (y * y) + (z * z) + (w * w);\r\n\t}\r\n\r\n\t/**\r\n\t * 两个四维向量距离。\r\n\t * @param\tvalue1 向量1。\r\n\t * @param\tvalue2 向量2。\r\n\t * @return\t距离。\r\n\t */\r\n\tstatic distance(value1: Vector4, value2: Vector4): number {\r\n\t\tvar x: number = value1.x - value2.x;\r\n\t\tvar y: number = value1.y - value2.y;\r\n\t\tvar z: number = value1.z - value2.z;\r\n\t\tvar w: number = value1.w - value2.w;\r\n\r\n\t\treturn Math.sqrt((x * x) + (y * y) + (z * z) + (w * w));\r\n\t}\r\n\r\n\t/**\r\n\t * 求两个四维向量的点积。\r\n\t * @param\ta 向量。\r\n\t * @param\tb 向量。\r\n\t * @return  点积。\r\n\t */\r\n\tstatic dot(a: Vector4, b: Vector4): number {\r\n\t\treturn (a.x * b.x) + (a.y * b.y) + (a.z * b.z) + (a.w * b.w);\r\n\t}\r\n\r\n\t/**\r\n\t * 分别取两个四维向量x、y、z的最小值计算新的四维向量。\r\n\t * @param\ta   四维向量。\r\n\t * @param\tb   四维向量。\r\n\t * @param\tout 结果三维向量。\r\n\t */\r\n\tstatic min(a: Vector4, b: Vector4, out: Vector4): void {\r\n\t\tout.x = Math.min(a.x, b.x);\r\n\t\tout.y = Math.min(a.y, b.y);\r\n\t\tout.z = Math.min(a.z, b.z);\r\n\t\tout.w = Math.min(a.w, b.w);\r\n\t}\r\n\r\n\t/**\r\n\t * 分别取两个四维向量x、y、z的最大值计算新的四维向量。\r\n\t * @param\ta   四维向量。\r\n\t * @param\tb   四维向量。\r\n\t * @param\tout 结果三维向量。\r\n\t */\r\n\tstatic max(a: Vector4, b: Vector4, out: Vector4): void {\r\n\t\tout.x = Math.max(a.x, b.x);\r\n\t\tout.y = Math.max(a.y, b.y);\r\n\t\tout.z = Math.max(a.z, b.z);\r\n\t\tout.w = Math.max(a.w, b.w);\r\n\t}\r\n\r\n\tforNativeElement(nativeElements: Float32Array = null): void//[NATIVE_TS]\r\n\t{\r\n\r\n\t\tif (nativeElements) {\r\n\t\t\t(<any>this).elements = nativeElements;\r\n\t\t\t(<any>this).elements[0] = this.x;\r\n\t\t\t(<any>this).elements[1] = this.y;\r\n\t\t\t(<any>this).elements[2] = this.z;\r\n\t\t\t(<any>this).elements[3] = this.w;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t(<any>this).elements = new Float32Array([this.x, this.y, this.z, this.w]);\r\n\t\t}\r\n\t\tVector2.rewriteNumProperty(this, \"x\", 0);\r\n\t\tVector2.rewriteNumProperty(this, \"y\", 1);\r\n\t\tVector2.rewriteNumProperty(this, \"z\", 2);\r\n\t\tVector2.rewriteNumProperty(this, \"w\", 3);\r\n\r\n\t}\r\n\r\n}\r\n\r\n","import { Vector4 } from \"./Vector4\";\r\nimport { Quaternion } from \"./Quaternion\";\r\nimport { Matrix4x4 } from \"./Matrix4x4\";\r\nimport { MathUtils3D } from \"./MathUtils3D\";\r\nimport { Vector2 } from \"./Vector2\";\r\nimport { IClone } from \"../core/IClone\"\r\n/**\r\n * <code>Vector3</code> 类用于创建三维向量。\r\n */\r\nexport class Vector3 implements IClone {\r\n\t/**@internal\t*/\r\n\tstatic _tempVector4: Vector4 = new Vector4();\r\n\r\n\t/**@internal\t*/\r\n\tstatic _ZERO: Vector3 = new Vector3(0.0, 0.0, 0.0);\r\n\t/**@internal\t*/\r\n\tstatic _ONE: Vector3 = new Vector3(1.0, 1.0, 1.0);\r\n\t/**@internal\t*/\r\n\tstatic _NegativeUnitX: Vector3 = new Vector3(-1, 0, 0);\r\n\t/**@internal\t*/\r\n\tstatic _UnitX: Vector3 = new Vector3(1, 0, 0);\r\n\t/**@internal\t*/\r\n\tstatic _UnitY: Vector3 = new Vector3(0, 1, 0);\r\n\t/**@internal\t*/\r\n\tstatic _UnitZ: Vector3 = new Vector3(0, 0, 1);\r\n\t/**@internal\t*/\r\n\tstatic _ForwardRH: Vector3 = new Vector3(0, 0, -1);\r\n\t/**@internal\t*/\r\n\tstatic _ForwardLH: Vector3 = new Vector3(0, 0, 1);\r\n\t/**@internal\t*/\r\n\tstatic _Up: Vector3 = new Vector3(0, 1, 0);\r\n\r\n\t/**\r\n\t * 两个三维向量距离的平方。\r\n\t * @param\tvalue1 向量1。\r\n\t * @param\tvalue2 向量2。\r\n\t * @return\t距离的平方。\r\n\t */\r\n\tstatic distanceSquared(value1: Vector3, value2: Vector3): number {\r\n\t\tvar x: number = value1.x - value2.x;\r\n\t\tvar y: number = value1.y - value2.y;\r\n\t\tvar z: number = value1.z - value2.z;\r\n\t\treturn (x * x) + (y * y) + (z * z);\r\n\t}\r\n\r\n\t/**\r\n\t * 两个三维向量距离。\r\n\t * @param\tvalue1 向量1。\r\n\t * @param\tvalue2 向量2。\r\n\t * @return\t距离。\r\n\t */\r\n\tstatic distance(value1: Vector3, value2: Vector3): number {\r\n\t\tvar x: number = value1.x - value2.x;\r\n\t\tvar y: number = value1.y - value2.y;\r\n\t\tvar z: number = value1.z - value2.z;\r\n\t\treturn Math.sqrt((x * x) + (y * y) + (z * z));\r\n\t}\r\n\r\n\t/**\r\n\t * 分别取两个三维向量x、y、z的最小值计算新的三维向量。\r\n\t * @param\ta。\r\n\t * @param\tb。\r\n\t * @param\tout。\r\n\t */\r\n\tstatic min(a: Vector3, b: Vector3, out: Vector3): void {\r\n\t\tout.x = Math.min(a.x, b.x);\r\n\t\tout.y = Math.min(a.y, b.y);\r\n\t\tout.z = Math.min(a.z, b.z);\r\n\t}\r\n\r\n\t/**\r\n\t * 分别取两个三维向量x、y、z的最大值计算新的三维向量。\r\n\t * @param\ta a三维向量。\r\n\t * @param\tb b三维向量。\r\n\t * @param\tout 结果三维向量。\r\n\t */\r\n\tstatic max(a: Vector3, b: Vector3, out: Vector3): void {\r\n\t\tout.x = Math.max(a.x, b.x);\r\n\t\tout.y = Math.max(a.y, b.y);\r\n\t\tout.z = Math.max(a.z, b.z);\r\n\t}\r\n\r\n\t/**\r\n\t * 根据四元数旋转三维向量。\r\n\t * @param\tsource 源三维向量。\r\n\t * @param\trotation 旋转四元数。\r\n\t * @param\tout 输出三维向量。\r\n\t */\r\n\tstatic transformQuat(source: Vector3, rotation: Quaternion, out: Vector3): void {\r\n\t\tvar x: number = source.x, y: number = source.y, z: number = source.z, qx: number = rotation.x, qy: number = rotation.y, qz: number = rotation.z, qw: number = rotation.w,\r\n\r\n\t\t\tix: number = qw * x + qy * z - qz * y, iy: number = qw * y + qz * x - qx * z, iz: number = qw * z + qx * y - qy * x, iw: number = -qx * x - qy * y - qz * z;\r\n\r\n\t\tout.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n\t\tout.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n\t\tout.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算标量长度。\r\n\t * @param\ta 源三维向量。\r\n\t * @return 标量长度。\r\n\t */\r\n\tstatic scalarLength(a: Vector3): number {\r\n\t\tvar x: number = a.x, y: number = a.y, z: number = a.z;\r\n\t\treturn Math.sqrt(x * x + y * y + z * z);\r\n\t}\r\n\r\n\t/**\r\n\t * 计算标量长度的平方。\r\n\t * @param\ta 源三维向量。\r\n\t * @return 标量长度的平方。\r\n\t */\r\n\tstatic scalarLengthSquared(a: Vector3): number {\r\n\t\tvar x: number = a.x, y: number = a.y, z: number = a.z;\r\n\t\treturn x * x + y * y + z * z;\r\n\t}\r\n\r\n\t/**\r\n\t * 归一化三维向量。\r\n\t * @param\ts 源三维向量。\r\n\t * @param\tout 输出三维向量。\r\n\t */\r\n\tstatic normalize(s: Vector3, out: Vector3): void {\r\n\t\tvar x: number = s.x, y: number = s.y, z: number = s.z;\r\n\t\tvar len: number = x * x + y * y + z * z;\r\n\t\tif (len > 0) {\r\n\t\t\tlen = 1 / Math.sqrt(len);\r\n\t\t\tout.x = x * len;\r\n\t\t\tout.y = y * len;\r\n\t\t\tout.z = z * len;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 计算两个三维向量的乘积。\r\n\t * @param\ta left三维向量。\r\n\t * @param\tb right三维向量。\r\n\t * @param\tout 输出三维向量。\r\n\t */\r\n\tstatic multiply(a: Vector3, b: Vector3, out: Vector3): void {\r\n\t\tout.x = a.x * b.x;\r\n\t\tout.y = a.y * b.y;\r\n\t\tout.z = a.z * b.z;\r\n\t}\r\n\r\n\t/**\r\n\t * 缩放三维向量。\r\n\t * @param\ta 源三维向量。\r\n\t * @param\tb 缩放值。\r\n\t * @param\tout 输出三维向量。\r\n\t */\r\n\tstatic scale(a: Vector3, b: number, out: Vector3): void {\r\n\t\tout.x = a.x * b;\r\n\t\tout.y = a.y * b;\r\n\t\tout.z = a.z * b;\r\n\t}\r\n\r\n\t/**\r\n\t * 插值三维向量。\r\n\t * @param\ta left向量。\r\n\t * @param\tb right向量。\r\n\t * @param\tt 插值比例。\r\n\t * @param\tout 输出向量。\r\n\t */\r\n\tstatic lerp(a: Vector3, b: Vector3, t: number, out: Vector3): void {\r\n\t\tvar ax: number = a.x, ay: number = a.y, az: number = a.z;\r\n\t\tout.x = ax + t * (b.x - ax);\r\n\t\tout.y = ay + t * (b.y - ay);\r\n\t\tout.z = az + t * (b.z - az);\r\n\t}\r\n\r\n\t/**\r\n\t * 通过矩阵转换一个三维向量到另外一个三维向量。\r\n\t * @param\tvector 源三维向量。\r\n\t * @param\ttransform  变换矩阵。\r\n\t * @param\tresult 输出三维向量。\r\n\t */\r\n\tstatic transformV3ToV3(vector: Vector3, transform: Matrix4x4, result: Vector3): void {\r\n\t\tvar intermediate: Vector4 = Vector3._tempVector4;\r\n\t\tVector3.transformV3ToV4(vector, transform, intermediate);\r\n\t\tresult.x = intermediate.x;\r\n\t\tresult.y = intermediate.y;\r\n\t\tresult.z = intermediate.z;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过矩阵转换一个三维向量到另外一个四维向量。\r\n\t * @param\tvector 源三维向量。\r\n\t * @param\ttransform  变换矩阵。\r\n\t * @param\tresult 输出四维向量。\r\n\t */\r\n\tstatic transformV3ToV4(vector: Vector3, transform: Matrix4x4, result: Vector4): void {\r\n\t\tvar vectorX: number = vector.x;\r\n\t\tvar vectorY: number = vector.y;\r\n\t\tvar vectorZ: number = vector.z;\r\n\r\n\t\tvar transformElem: Float32Array = transform.elements;\r\n\t\tresult.x = (vectorX * transformElem[0]) + (vectorY * transformElem[4]) + (vectorZ * transformElem[8]) + transformElem[12];\r\n\t\tresult.y = (vectorX * transformElem[1]) + (vectorY * transformElem[5]) + (vectorZ * transformElem[9]) + transformElem[13];\r\n\t\tresult.z = (vectorX * transformElem[2]) + (vectorY * transformElem[6]) + (vectorZ * transformElem[10]) + transformElem[14];\r\n\t\tresult.w = (vectorX * transformElem[3]) + (vectorY * transformElem[7]) + (vectorZ * transformElem[11]) + transformElem[15];\r\n\t}\r\n\r\n\t/**\r\n\t * 通过法线矩阵转换一个法线三维向量到另外一个三维向量。\r\n\t * @param\tnormal 源法线三维向量。\r\n\t * @param\ttransform  法线变换矩阵。\r\n\t * @param\tresult 输出法线三维向量。\r\n\t */\r\n\tstatic TransformNormal(normal: Vector3, transform: Matrix4x4, result: Vector3): void {\r\n\t\tvar normalX: number = normal.x;\r\n\t\tvar normalY: number = normal.y;\r\n\t\tvar normalZ: number = normal.z;\r\n\r\n\t\tvar transformElem: Float32Array = transform.elements;\r\n\t\tresult.x = (normalX * transformElem[0]) + (normalY * transformElem[4]) + (normalZ * transformElem[8]);\r\n\t\tresult.y = (normalX * transformElem[1]) + (normalY * transformElem[5]) + (normalZ * transformElem[9]);\r\n\t\tresult.z = (normalX * transformElem[2]) + (normalY * transformElem[6]) + (normalZ * transformElem[10]);\r\n\t}\r\n\r\n\t/**\r\n\t * 通过矩阵转换一个三维向量到另外一个归一化的三维向量。\r\n\t * @param\tvector 源三维向量。\r\n\t * @param\ttransform  变换矩阵。\r\n\t * @param\tresult 输出三维向量。\r\n\t */\r\n\tstatic transformCoordinate(coordinate: Vector3, transform: Matrix4x4, result: Vector3): void {\r\n\t\tvar coordinateX: number = coordinate.x;\r\n\t\tvar coordinateY: number = coordinate.y;\r\n\t\tvar coordinateZ: number = coordinate.z;\r\n\r\n\t\tvar transformElem: Float32Array = transform.elements;\r\n\t\tvar w: number = coordinateX * transformElem[3] + coordinateY * transformElem[7] + coordinateZ * transformElem[11] + transformElem[15];\r\n\t\tresult.x = (coordinateX * transformElem[0] + coordinateY * transformElem[4] + coordinateZ * transformElem[8] + transformElem[12]) / w;\r\n\t\tresult.y = (coordinateX * transformElem[1] + coordinateY * transformElem[5] + coordinateZ * transformElem[9] + transformElem[13]) / w;\r\n\t\tresult.z = (coordinateX * transformElem[2] + coordinateY * transformElem[6] + coordinateZ * transformElem[10] + transformElem[14]) / w;\r\n\t}\r\n\r\n\t/**\r\n\t * 求一个指定范围的向量\r\n\t * @param\tvalue clamp向量\r\n\t * @param\tmin  最小\r\n\t * @param\tmax  最大\r\n\t * @param   out 输出向量\r\n\t */\r\n\tstatic Clamp(value: Vector3, min: Vector3, max: Vector3, out: Vector3): void {\r\n\t\tvar x: number = value.x;\r\n\t\tvar y: number = value.y;\r\n\t\tvar z: number = value.z;\r\n\r\n\t\tvar mineX: number = min.x;\r\n\t\tvar mineY: number = min.y;\r\n\t\tvar mineZ: number = min.z;\r\n\r\n\t\tvar maxeX: number = max.x;\r\n\t\tvar maxeY: number = max.y;\r\n\t\tvar maxeZ: number = max.z;\r\n\r\n\t\tx = (x > maxeX) ? maxeX : x;\r\n\t\tx = (x < mineX) ? mineX : x;\r\n\r\n\t\ty = (y > maxeY) ? maxeY : y;\r\n\t\ty = (y < mineY) ? mineY : y;\r\n\r\n\t\tz = (z > maxeZ) ? maxeZ : z;\r\n\t\tz = (z < mineZ) ? mineZ : z;\r\n\r\n\t\tout.x = x;\r\n\t\tout.y = y;\r\n\t\tout.z = z;\r\n\t}\r\n\r\n\t/**\r\n\t * 求两个三维向量的和。\r\n\t * @param\ta left三维向量。\r\n\t * @param\tb right三维向量。\r\n\t * @param\tout 输出向量。\r\n\t */\r\n\tstatic add(a: Vector3, b: Vector3, out: Vector3): void {\r\n\t\tout.x = a.x + b.x;\r\n\t\tout.y = a.y + b.y;\r\n\t\tout.z = a.z + b.z;\r\n\t}\r\n\r\n\t/**\r\n\t * 求两个三维向量的差。\r\n\t * @param\ta  left三维向量。\r\n\t * @param\tb  right三维向量。\r\n\t * @param\to out 输出向量。\r\n\t */\r\n\tstatic subtract(a: Vector3, b: Vector3, o: Vector3): void {\r\n\t\to.x = a.x - b.x;\r\n\t\to.y = a.y - b.y;\r\n\t\to.z = a.z - b.z;\r\n\t}\r\n\r\n\t/**\r\n\t * 求两个三维向量的叉乘。\r\n\t * @param\ta left向量。\r\n\t * @param\tb right向量。\r\n\t * @param\to 输出向量。\r\n\t */\r\n\tstatic cross(a: Vector3, b: Vector3, o: Vector3): void {\r\n\t\tvar ax: number = a.x, ay: number = a.y, az: number = a.z, bx: number = b.x, by: number = b.y, bz: number = b.z;\r\n\t\to.x = ay * bz - az * by;\r\n\t\to.y = az * bx - ax * bz;\r\n\t\to.z = ax * by - ay * bx;\r\n\t}\r\n\r\n\t/**\r\n\t * 求两个三维向量的点积。\r\n\t * @param\ta left向量。\r\n\t * @param\tb right向量。\r\n\t * @return   点积。\r\n\t */\r\n\tstatic dot(a: Vector3, b: Vector3): number {\r\n\t\treturn (a.x * b.x) + (a.y * b.y) + (a.z * b.z);\r\n\t}\r\n\r\n\t/**\r\n\t * 判断两个三维向量是否相等。\r\n\t * @param\ta 三维向量。\r\n\t * @param\tb 三维向量。\r\n\t * @return  是否相等。\r\n\t */\r\n\tstatic equals(a: Vector3, b: Vector3): boolean {\r\n\t\treturn MathUtils3D.nearEqual(a.x, b.x) && MathUtils3D.nearEqual(a.y, b.y) && MathUtils3D.nearEqual(a.z, b.z);\r\n\t}\r\n\r\n\t/**X轴坐标*/\r\n\tx: number;\r\n\t/**Y轴坐标*/\r\n\ty: number;\r\n\t/**Z轴坐标*/\r\n\tz: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Vector3</code> 实例。\r\n\t * @param\tx  X轴坐标。\r\n\t * @param\ty  Y轴坐标。\r\n\t * @param\tz  Z轴坐标。\r\n\t */\r\n\tconstructor(x: number = 0, y: number = 0, z: number = 0, nativeElements: Float32Array = null/*[NATIVE]*/) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置xyz值。\r\n\t * @param\tx X值。\r\n\t * @param\ty Y值。\r\n\t * @param\tz Z值。\r\n\t */\r\n\tsetValue(x: number, y: number, z: number): void {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t}\r\n\r\n\t/**\r\n\t * 从Array数组拷贝值。\r\n\t * @param  array 数组。\r\n\t * @param  offset 数组偏移。\r\n\t */\r\n\tfromArray(array: any[], offset: number = 0): void {\r\n\t\tthis.x = array[offset + 0];\r\n\t\tthis.y = array[offset + 1];\r\n\t\tthis.z = array[offset + 2];\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destVector3: Vector3 = (<Vector3>destObject);\r\n\t\tdestVector3.x = this.x;\r\n\t\tdestVector3.y = this.y;\r\n\t\tdestVector3.z = this.z;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destVector3: Vector3 = new Vector3();\r\n\t\tthis.cloneTo(destVector3);\r\n\t\treturn destVector3;\r\n\t}\r\n\r\n\ttoDefault(): void {\r\n\t\tthis.x = 0;\r\n\t\tthis.y = 0;\r\n\t\tthis.z = 0;\r\n\t}\r\n\r\n\tforNativeElement(nativeElements: Float32Array = null): void {\r\n\t\tif (nativeElements) {\r\n\t\t\t(<any>this).elements = nativeElements;\r\n\t\t\t(<any>this).elements[0] = this.x;\r\n\t\t\t(<any>this).elements[1] = this.y;\r\n\t\t\t(<any>this).elements[2] = this.z;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t(<any>this).elements = new Float32Array([this.x, this.y, this.z]);\r\n\t\t}\r\n\t\tVector2.rewriteNumProperty(this, \"x\", 0);\r\n\t\tVector2.rewriteNumProperty(this, \"y\", 1);\r\n\t\tVector2.rewriteNumProperty(this, \"z\", 2);\r\n\t}\r\n}\r\n\r\n","/**\r\n * PBR材质渲染质量。\r\n */\r\nexport enum PBRRenderQuality {\r\n    /**高质量。*/\r\n    High,\r\n    /**低质量。*/\r\n    Low\r\n}","import { Vector3 } from \"./Vector3\";\r\nimport { Vector2 } from \"./Vector2\";\r\nimport { Matrix4x4 } from \"./Matrix4x4\";\r\nimport { IClone } from \"../core/IClone\"\r\nimport { Quaternion } from \"./Quaternion\";\r\n\r\n/**\r\n * <code>Matrix3x3</code> 类用于创建3x3矩阵。\r\n */\r\nexport class Matrix3x3 implements IClone {\r\n\r\n\t/**默认矩阵,禁止修改*/\r\n\tstatic DEFAULT: Matrix3x3 = new Matrix3x3();\r\n\r\n\t/** @internal */\r\n\tprivate static _tempV30: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV31: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV32: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * 通过四元数创建旋转矩阵。\r\n\t * @param rotation 旋转四元数。\r\n\t * @param out 旋转矩阵。\r\n\t */\r\n\r\n\tstatic createRotationQuaternion(rotation: Quaternion, out: Matrix3x3) {\r\n\t\tvar rotX: number = rotation.x;\r\n\t\tvar rotY: number = rotation.y;\r\n\t\tvar rotZ: number = rotation.z;\r\n\t\tvar rotW: number = rotation.w;\r\n\r\n\t\tvar xx: number = rotX * rotX;\r\n\t\tvar yy: number = rotY * rotY;\r\n\t\tvar zz: number = rotZ * rotZ;\r\n\t\tvar xy: number = rotX * rotY;\r\n\t\tvar zw: number = rotZ * rotW;\r\n\t\tvar zx: number = rotZ * rotX;\r\n\t\tvar yw: number = rotY * rotW;\r\n\t\tvar yz: number = rotY * rotZ;\r\n\t\tvar xw: number = rotX * rotW;\r\n\r\n\t\tvar resultE: Float32Array = out.elements;\r\n\t\tresultE[0] = 1.0 - (2.0 * (yy + zz));\r\n\t\tresultE[1] = 2.0 * (xy + zw);\r\n\t\tresultE[2] = 2.0 * (zx - yw);\r\n\t\tresultE[3] = 2.0 * (xy - zw);\r\n\t\tresultE[4] = 1.0 - (2.0 * (zz + xx));\r\n\t\tresultE[5] = 2.0 * (yz + xw);\r\n\t\tresultE[6] = 2.0 * (zx + yw);\r\n\t\tresultE[7] = 2.0 * (yz - xw);\r\n\t\tresultE[8] = 1.0 - (2.0 * (yy + xx));\r\n\t}\r\n\r\n\t/**\r\n\t * 根据指定平移生成3x3矩阵\r\n\t * @param\ttra 平移\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\tstatic createFromTranslation(trans: Vector2, out: Matrix3x3): void {\r\n\t\tvar e: Float32Array = out.elements;\r\n\t\te[0] = 1;\r\n\t\te[1] = 0;\r\n\t\te[2] = 0;\r\n\t\te[3] = 0;\r\n\t\te[4] = 1;\r\n\t\te[5] = 0;\r\n\t\te[6] = trans.x;\r\n\t\te[7] = trans.y;\r\n\t\te[8] = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 根据指定旋转生成3x3矩阵\r\n\t * @param\trad  旋转值\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\tstatic createFromRotation(rad: number, out: Matrix3x3): void {\r\n\t\tvar e: Float32Array = out.elements;\r\n\r\n\t\tvar s: number = Math.sin(rad), c: number = Math.cos(rad);\r\n\r\n\t\te[0] = c;\r\n\t\te[1] = s;\r\n\t\te[2] = 0;\r\n\r\n\t\te[3] = -s;\r\n\t\te[4] = c;\r\n\t\te[5] = 0;\r\n\r\n\t\te[6] = 0;\r\n\t\te[7] = 0;\r\n\t\te[8] = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 根据制定缩放生成3x3矩阵\r\n\t * @param\tscale 缩放值\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\tstatic createFromScaling(scale: Vector3, out: Matrix3x3): void {\r\n\t\tvar e: Float32Array = out.elements;\r\n\r\n\t\te[0] = scale.x;\r\n\t\te[1] = 0;\r\n\t\te[2] = 0;\r\n\r\n\t\te[3] = 0;\r\n\t\te[4] = scale.y;\r\n\t\te[5] = 0;\r\n\r\n\t\te[6] = 0;\r\n\t\te[7] = 0;\r\n\t\te[8] = scale.z;\r\n\t}\r\n\r\n\t/**\r\n\t * 从4x4矩阵转换为一个3x3的矩阵（原则为upper-left,忽略第四行四列）\r\n\t * @param\tsou 4x4源矩阵\r\n\t * @param\tout 3x3输出矩阵\r\n\t */\r\n\tstatic createFromMatrix4x4(sou: Matrix4x4, out: Matrix3x3): void {\r\n\t\tvar souE: Float32Array = sou.elements;\r\n\t\tvar outE: Float32Array = out.elements;\r\n\t\toutE[0] = souE[0];\r\n\t\toutE[1] = souE[1];\r\n\t\toutE[2] = souE[2];\r\n\t\toutE[3] = souE[4];\r\n\t\toutE[4] = souE[5];\r\n\t\toutE[5] = souE[6];\r\n\t\toutE[6] = souE[8];\r\n\t\toutE[7] = souE[9];\r\n\t\toutE[8] = souE[10];\r\n\t}\r\n\r\n\t/**\r\n\t *  两个3x3矩阵的相乘\r\n\t * @param\tleft 左矩阵\r\n\t * @param\tright  右矩阵\r\n\t * @param\tout  输出矩阵\r\n\t */\r\n\tstatic multiply(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\r\n\t\tvar l: Float32Array = left.elements;\r\n\t\tvar r: Float32Array = right.elements;\r\n\t\tvar e: Float32Array = out.elements;\r\n\r\n\t\tvar l11: number = l[0], l12: number = l[1], l13: number = l[2];\r\n\t\tvar l21: number = l[3], l22: number = l[4], l23: number = l[5];\r\n\t\tvar l31: number = l[6], l32: number = l[7], l33: number = l[8];\r\n\r\n\t\tvar r11: number = r[0], r12: number = r[1], r13: number = r[2];\r\n\t\tvar r21: number = r[3], r22: number = r[4], r23: number = r[5];\r\n\t\tvar r31: number = r[6], r32: number = r[7], r33: number = r[8];\r\n\r\n\t\te[0] = r11 * l11 + r12 * l21 + r13 * l31;\r\n\t\te[1] = r11 * l12 + r12 * l22 + r13 * r32;\r\n\t\te[2] = r11 * l13 + r12 * l23 + r13 * l33;\r\n\r\n\t\te[3] = r21 * l11 + r22 * l21 + r23 * l31;\r\n\t\te[4] = r21 * l12 + r22 * l22 + r23 * l32;\r\n\t\te[5] = r21 * l13 + r22 * l23 + r23 * l33;\r\n\r\n\t\te[6] = r31 * l11 + r32 * l21 + r33 * l31;\r\n\t\te[7] = r31 * l12 + r32 * l22 + r33 * l32;\r\n\t\te[8] = r31 * l13 + r32 * l23 + r33 * l33;\r\n\t}\r\n\r\n\t/**矩阵元素数组*/\r\n\telements: Float32Array;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Matrix3x3</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tvar e: Float32Array = this.elements = new Float32Array(9);\r\n\t\te[0] = 1;\r\n\t\te[1] = 0;\r\n\t\te[2] = 0;\r\n\t\te[3] = 0;\r\n\t\te[4] = 1;\r\n\t\te[5] = 0;\r\n\t\te[6] = 0;\r\n\t\te[7] = 0;\r\n\t\te[8] = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算3x3矩阵的行列式\r\n\t * @return    矩阵的行列式\r\n\t */\r\n\tdeterminant(): number {\r\n\t\tvar f: Float32Array = this.elements;\r\n\r\n\t\tvar a00: number = f[0], a01: number = f[1], a02: number = f[2];\r\n\t\tvar a10: number = f[3], a11: number = f[4], a12: number = f[5];\r\n\t\tvar a20: number = f[6], a21: number = f[7], a22: number = f[8];\r\n\r\n\t\treturn a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n\t}\r\n\r\n\t/**\r\n\t * 通过一个二维向量转换3x3矩阵\r\n\t * @param\ttra 转换向量\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\ttranslate(trans: Vector2, out: Matrix3x3): void {\r\n\t\tvar e: Float32Array = out.elements;\r\n\t\tvar f: Float32Array = this.elements;\r\n\r\n\t\tvar a00: number = f[0], a01: number = f[1], a02: number = f[2];\r\n\t\tvar a10: number = f[3], a11: number = f[4], a12: number = f[5];\r\n\t\tvar a20: number = f[6], a21: number = f[7], a22: number = f[8];\r\n\t\tvar x: number = trans.x, y: number = trans.y;\r\n\r\n\t\te[0] = a00;\r\n\t\te[1] = a01;\r\n\t\te[2] = a02;\r\n\r\n\t\te[3] = a10;\r\n\t\te[4] = a11;\r\n\t\te[5] = a12;\r\n\r\n\t\te[6] = x * a00 + y * a10 + a20;\r\n\t\te[7] = x * a01 + y * a11 + a21;\r\n\t\te[8] = x * a02 + y * a12 + a22;\r\n\t}\r\n\r\n\t/**\r\n\t * 根据指定角度旋转3x3矩阵\r\n\t * @param\trad 旋转角度\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\trotate(rad: number, out: Matrix3x3): void {\r\n\t\tvar e: Float32Array = out.elements;\r\n\t\tvar f: Float32Array = this.elements;\r\n\r\n\t\tvar a00: number = f[0], a01: number = f[1], a02: number = f[2];\r\n\t\tvar a10: number = f[3], a11: number = f[4], a12: number = f[5];\r\n\t\tvar a20: number = f[6], a21: number = f[7], a22: number = f[8];\r\n\r\n\t\tvar s: number = Math.sin(rad);\r\n\t\tvar c: number = Math.cos(rad);\r\n\r\n\t\te[0] = c * a00 + s * a10;\r\n\t\te[1] = c * a01 + s * a11;\r\n\t\te[2] = c * a02 + s * a12;\r\n\r\n\t\te[3] = c * a10 - s * a00;\r\n\t\te[4] = c * a11 - s * a01;\r\n\t\te[5] = c * a12 - s * a02;\r\n\r\n\t\te[6] = a20;\r\n\t\te[7] = a21;\r\n\t\te[8] = a22;\r\n\t}\r\n\r\n\t/**\r\n\t *根据制定缩放3x3矩阵\r\n\t * @param\tscale 缩放值\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\tscale(scale: Vector2, out: Matrix3x3): void {\r\n\t\tvar e: Float32Array = out.elements;\r\n\t\tvar f: Float32Array = this.elements;\r\n\r\n\t\tvar x: number = scale.x, y: number = scale.y;\r\n\r\n\t\te[0] = x * f[0];\r\n\t\te[1] = x * f[1];\r\n\t\te[2] = x * f[2];\r\n\r\n\t\te[3] = y * f[3];\r\n\t\te[4] = y * f[4];\r\n\t\te[5] = y * f[5];\r\n\r\n\t\te[6] = f[6];\r\n\t\te[7] = f[7];\r\n\t\te[8] = f[8];\r\n\t}\r\n\r\n\t/**\r\n\t * 计算3x3矩阵的逆矩阵\r\n\t * @param\tout 输出的逆矩阵\r\n\t */\r\n\tinvert(out: Matrix3x3): void {\r\n\t\tvar e: Float32Array = out.elements;\r\n\t\tvar f: Float32Array = this.elements;\r\n\r\n\t\tvar a00: number = f[0], a01: number = f[1], a02: number = f[2];\r\n\t\tvar a10: number = f[3], a11: number = f[4], a12: number = f[5];\r\n\t\tvar a20: number = f[6], a21: number = f[7], a22: number = f[8];\r\n\r\n\t\tvar b01: number = a22 * a11 - a12 * a21;\r\n\t\tvar b11: number = -a22 * a10 + a12 * a20;\r\n\t\tvar b21: number = a21 * a10 - a11 * a20;\r\n\r\n\t\t// Calculate the determinant\r\n\t\tvar det: number = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n\t\tif (!det) {\r\n\t\t\tout = null;\r\n\t\t}\r\n\t\tdet = 1.0 / det;\r\n\r\n\t\te[0] = b01 * det;\r\n\t\te[1] = (-a22 * a01 + a02 * a21) * det;\r\n\t\te[2] = (a12 * a01 - a02 * a11) * det;\r\n\t\te[3] = b11 * det;\r\n\t\te[4] = (a22 * a00 - a02 * a20) * det;\r\n\t\te[5] = (-a12 * a00 + a02 * a10) * det;\r\n\t\te[6] = b21 * det;\r\n\t\te[7] = (-a21 * a00 + a01 * a20) * det;\r\n\t\te[8] = (a11 * a00 - a01 * a10) * det;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算3x3矩阵的转置矩阵\r\n\t * @param \tout 输出矩阵\r\n\t */\r\n\ttranspose(out: Matrix3x3): void {\r\n\t\tvar e: Float32Array = out.elements;\r\n\t\tvar f: Float32Array = this.elements;\r\n\r\n\t\tif (out === this) {\r\n\t\t\tvar a01: number = f[1], a02: number = f[2], a12: number = f[5];\r\n\t\t\te[1] = f[3];\r\n\t\t\te[2] = f[6];\r\n\t\t\te[3] = a01;\r\n\t\t\te[5] = f[7];\r\n\t\t\te[6] = a02;\r\n\t\t\te[7] = a12;\r\n\t\t} else {\r\n\t\t\te[0] = f[0];\r\n\t\t\te[1] = f[3];\r\n\t\t\te[2] = f[6];\r\n\t\t\te[3] = f[1];\r\n\t\t\te[4] = f[4];\r\n\t\t\te[5] = f[7];\r\n\t\t\te[6] = f[2];\r\n\t\t\te[7] = f[5];\r\n\t\t\te[8] = f[8];\r\n\t\t}\r\n\t}\r\n\r\n\t/** 设置已有的矩阵为单位矩阵*/\r\n\tidentity(): void {\r\n\t\tvar e: Float32Array = this.elements;\r\n\t\te[0] = 1;\r\n\t\te[1] = 0;\r\n\t\te[2] = 0;\r\n\t\te[3] = 0;\r\n\t\te[4] = 1;\r\n\t\te[5] = 0;\r\n\t\te[6] = 0;\r\n\t\te[7] = 0;\r\n\t\te[8] = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar i: number, s: Float32Array, d: Float32Array;\r\n\t\ts = this.elements;\r\n\t\td = destObject.elements;\r\n\t\tif (s === d) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (i = 0; i < 9; ++i) {\r\n\t\t\td[i] = s[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: Matrix3x3 = new Matrix3x3();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算观察3x3矩阵\r\n\t * @param\teye    观察者位置\r\n\t * @param\ttarget 目标位置\r\n\t * @param\tup     上向量\r\n\t * @param\tout    输出3x3矩阵\r\n\t */\r\n\tstatic lookAt(eye: Vector3, target: Vector3, up: Vector3, out: Matrix3x3): void {\r\n\t\tVector3.subtract(eye, target, Matrix3x3._tempV30);//WebGL为右手坐标系统\r\n\t\tVector3.normalize(Matrix3x3._tempV30, Matrix3x3._tempV30);\r\n\r\n\t\tVector3.cross(up, Matrix3x3._tempV30, Matrix3x3._tempV31);\r\n\t\tVector3.normalize(Matrix3x3._tempV31, Matrix3x3._tempV31);\r\n\r\n\t\tVector3.cross(Matrix3x3._tempV30, Matrix3x3._tempV31, Matrix3x3._tempV32);\r\n\r\n\t\tvar v0: Vector3 = Matrix3x3._tempV30;\r\n\t\tvar v1: Vector3 = Matrix3x3._tempV31;\r\n\t\tvar v2: Vector3 = Matrix3x3._tempV32;\r\n\r\n\t\tvar me: Float32Array = out.elements;\r\n\t\tme[0] = v1.x;\r\n\t\tme[3] = v1.y;\r\n\t\tme[6] = v1.z;\r\n\r\n\t\tme[1] = v2.x;\r\n\t\tme[4] = v2.y;\r\n\t\tme[7] = v2.z;\r\n\r\n\t\tme[2] = v0.x;\r\n\t\tme[5] = v0.y;\r\n\t\tme[8] = v0.z;\r\n\t}\r\n}\r\n\r\n","import { Scene3D } from \"./laya/d3/core/scene/Scene3D\";\r\nimport { MeshRenderDynamicBatchManager } from \"./laya/d3/graphics/MeshRenderDynamicBatchManager\";\r\nimport { MeshRenderStaticBatchManager } from \"./laya/d3/graphics/MeshRenderStaticBatchManager\";\r\nimport { SubMeshDynamicBatch } from \"./laya/d3/graphics/SubMeshDynamicBatch\";\r\nimport { Matrix4x4 } from \"./laya/d3/math/Matrix4x4\";\r\nimport { Shader3D } from \"./laya/d3/shader/Shader3D\";\r\nimport { Laya3D } from \"./Laya3D\";\r\nimport { Physics3D } from \"./laya/d3/physics/Physics3D\";\r\nimport { ShadowLightType } from \"./laya/d3/shadowMap/ShadowCasterPass\";\r\n\r\n/**\r\n * @internal\r\n * 使用全局类的时候，避免引用其他模块\r\n */\r\nexport class ILaya3D {\r\n    static Shader3D: typeof Shader3D = null;\r\n    static Scene3D: typeof Scene3D = null;\r\n    static MeshRenderStaticBatchManager: typeof MeshRenderStaticBatchManager = null;\r\n    static MeshRenderDynamicBatchManager: typeof MeshRenderDynamicBatchManager = null;\r\n    static SubMeshDynamicBatch: typeof SubMeshDynamicBatch = null;\r\n    static Laya3D: typeof Laya3D = null;\r\n    static Matrix4x4: typeof Matrix4x4 = null;\r\n    static Physics3D: typeof Physics3D = null;\r\n    static ShadowLightType: typeof ShadowLightType = null;\r\n}\r\n","import { Vector3 } from \"./Vector3\";\r\nimport { Matrix4x4 } from \"./Matrix4x4\";\r\nimport { Matrix3x3 } from \"./Matrix3x3\";\r\nimport { MathUtils3D } from \"./MathUtils3D\";\r\nimport { Vector2 } from \"./Vector2\";\r\nimport { IClone } from \"../core/IClone\"\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\n\r\n/**\r\n * <code>Quaternion</code> 类用于创建四元数。\r\n */\r\nexport class Quaternion implements IClone {\r\n\t/**@internal */\r\n\tstatic TEMPVector30: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tstatic TEMPVector31: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tstatic TEMPVector32: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tstatic TEMPVector33: Vector3 = new Vector3();\r\n\r\n\t/**@internal */\r\n\tstatic _tempMatrix3x3: Matrix3x3 = new Matrix3x3();\r\n\r\n\t/**默认矩阵,禁止修改*/\r\n\tstatic DEFAULT: Quaternion =/*[STATIC SAFE]*/ new Quaternion();\r\n\t/**无效矩阵,禁止修改*/\r\n\tstatic NAN: Quaternion = new Quaternion(NaN, NaN, NaN, NaN);\r\n\r\n\r\n\t/**\r\n\t *  从欧拉角生成四元数（顺序为Yaw、Pitch、Roll）\r\n\t * @param\tyaw yaw值\r\n\t * @param\tpitch pitch值\r\n\t * @param\troll roll值\r\n\t * @param\tout 输出四元数\r\n\t */\r\n\tstatic createFromYawPitchRoll(yaw: number, pitch: number, roll: number, out: Quaternion): void {\r\n\t\tvar halfRoll: number = roll * 0.5;\r\n\t\tvar halfPitch: number = pitch * 0.5;\r\n\t\tvar halfYaw: number = yaw * 0.5;\r\n\r\n\t\tvar sinRoll: number = Math.sin(halfRoll);\r\n\t\tvar cosRoll: number = Math.cos(halfRoll);\r\n\t\tvar sinPitch: number = Math.sin(halfPitch);\r\n\t\tvar cosPitch: number = Math.cos(halfPitch);\r\n\t\tvar sinYaw: number = Math.sin(halfYaw);\r\n\t\tvar cosYaw: number = Math.cos(halfYaw);\r\n\r\n\r\n\t\tout.x = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\r\n\t\tout.y = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\r\n\t\tout.z = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\r\n\t\tout.w = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\r\n\t}\r\n\r\n\t/**\r\n\t * 计算两个四元数相乘\r\n\t * @param\tleft left四元数\r\n\t * @param\tright  right四元数\r\n\t * @param\tout 输出四元数\r\n\t */\r\n\tstatic multiply(left: Quaternion, right: Quaternion, out: Quaternion): void {\r\n\t\tvar lx: number = left.x;\r\n\t\tvar ly: number = left.y;\r\n\t\tvar lz: number = left.z;\r\n\t\tvar lw: number = left.w;\r\n\t\tvar rx: number = right.x;\r\n\t\tvar ry: number = right.y;\r\n\t\tvar rz: number = right.z;\r\n\t\tvar rw: number = right.w;\r\n\t\tvar a: number = (ly * rz - lz * ry);\r\n\t\tvar b: number = (lz * rx - lx * rz);\r\n\t\tvar c: number = (lx * ry - ly * rx);\r\n\t\tvar d: number = (lx * rx + ly * ry + lz * rz);\r\n\t\tout.x = (lx * rw + rx * lw) + a;\r\n\t\tout.y = (ly * rw + ry * lw) + b;\r\n\t\tout.z = (lz * rw + rz * lw) + c;\r\n\t\tout.w = lw * rw - d;\r\n\t}\r\n\r\n\tprivate static arcTanAngle(x: number, y: number): number {\r\n\t\tif (x == 0) {\r\n\t\t\tif (y == 1)\r\n\t\t\t\treturn Math.PI / 2;\r\n\t\t\treturn -Math.PI / 2;\r\n\t\t}\r\n\t\tif (x > 0)\r\n\t\t\treturn Math.atan(y / x);\r\n\t\tif (x < 0) {\r\n\t\t\tif (y > 0)\r\n\t\t\t\treturn Math.atan(y / x) + Math.PI;\r\n\t\t\treturn Math.atan(y / x) - Math.PI;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tprivate static angleTo(from: Vector3, location: Vector3, angle: Vector3): void {\r\n\t\tVector3.subtract(location, from, Quaternion.TEMPVector30);\r\n\t\tVector3.normalize(Quaternion.TEMPVector30, Quaternion.TEMPVector30);\r\n\r\n\t\tangle.x = Math.asin(Quaternion.TEMPVector30.y);\r\n\t\tangle.y = Quaternion.arcTanAngle(-Quaternion.TEMPVector30.z, -Quaternion.TEMPVector30.x);\r\n\t}\r\n\r\n\t/**\r\n\t * 从指定的轴和角度计算四元数\r\n\t * @param\taxis  轴\r\n\t * @param\trad  角度\r\n\t * @param\tout  输出四元数\r\n\t */\r\n\tstatic createFromAxisAngle(axis: Vector3, rad: number, out: Quaternion): void {\r\n\t\trad = rad * 0.5;\r\n\t\tvar s: number = Math.sin(rad);\r\n\t\tout.x = s * axis.x;\r\n\t\tout.y = s * axis.y;\r\n\t\tout.z = s * axis.z;\r\n\t\tout.w = Math.cos(rad);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *  从旋转矩阵计算四元数\r\n\t * @param\tmat 旋转矩阵\r\n\t * @param\tout  输出四元数\r\n\t */\r\n\tstatic createFromMatrix4x4(mat: Matrix4x4, out: Quaternion): void {\r\n\t\tvar me: Float32Array = mat.elements;\r\n\r\n\t\tvar sqrt: number;\r\n\t\tvar half: number;\r\n\t\tvar scale: number = me[0] + me[5] + me[10];\r\n\r\n\t\tif (scale > 0.0) {\r\n\t\t\tsqrt = Math.sqrt(scale + 1.0);\r\n\t\t\tout.w = sqrt * 0.5;\r\n\t\t\tsqrt = 0.5 / sqrt;\r\n\r\n\t\t\tout.x = (me[6] - me[9]) * sqrt;\r\n\t\t\tout.y = (me[8] - me[2]) * sqrt;\r\n\t\t\tout.z = (me[1] - me[4]) * sqrt;\r\n\t\t} else if ((me[0] >= me[5]) && (me[0] >= me[10])) {\r\n\t\t\tsqrt = Math.sqrt(1.0 + me[0] - me[5] - me[10]);\r\n\t\t\thalf = 0.5 / sqrt;\r\n\r\n\t\t\tout.x = 0.5 * sqrt;\r\n\t\t\tout.y = (me[1] + me[4]) * half;\r\n\t\t\tout.z = (me[2] + me[8]) * half;\r\n\t\t\tout.w = (me[6] - me[9]) * half;\r\n\t\t} else if (me[5] > me[10]) {\r\n\t\t\tsqrt = Math.sqrt(1.0 + me[5] - me[0] - me[10]);\r\n\t\t\thalf = 0.5 / sqrt;\r\n\r\n\t\t\tout.x = (me[4] + me[1]) * half;\r\n\t\t\tout.y = 0.5 * sqrt;\r\n\t\t\tout.z = (me[9] + me[6]) * half;\r\n\t\t\tout.w = (me[8] - me[2]) * half;\r\n\t\t} else {\r\n\t\t\tsqrt = Math.sqrt(1.0 + me[10] - me[0] - me[5]);\r\n\t\t\thalf = 0.5 / sqrt;\r\n\r\n\t\t\tout.x = (me[8] + me[2]) * half;\r\n\t\t\tout.y = (me[9] + me[6]) * half;\r\n\t\t\tout.z = 0.5 * sqrt;\r\n\t\t\tout.w = (me[1] - me[4]) * half;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 球面插值\r\n\t * @param\tleft left四元数\r\n\t * @param\tright  right四元数\r\n\t * @param\tt 插值比例\r\n\t * @param\tout 输出四元数\r\n\t * @returns 输出Float32Array\r\n\t */\r\n\tstatic slerp(left: Quaternion, right: Quaternion, t: number, out: Quaternion): Quaternion {\r\n\t\tvar ax: number = left.x, ay: number = left.y, az: number = left.z, aw: number = left.w, bx: number = right.x, by: number = right.y, bz: number = right.z, bw: number = right.w;\r\n\r\n\t\tvar omega: number, cosom: number, sinom: number, scale0: number, scale1: number;\r\n\r\n\t\t// calc cosine \r\n\t\tcosom = ax * bx + ay * by + az * bz + aw * bw;\r\n\t\t// adjust signs (if necessary) \r\n\t\tif (cosom < 0.0) {\r\n\t\t\tcosom = -cosom;\r\n\t\t\tbx = -bx;\r\n\t\t\tby = -by;\r\n\t\t\tbz = -bz;\r\n\t\t\tbw = -bw;\r\n\t\t}\r\n\t\t// calculate coefficients \r\n\t\tif ((1.0 - cosom) > 0.000001) {\r\n\t\t\t// standard case (slerp) \r\n\t\t\tomega = Math.acos(cosom);\r\n\t\t\tsinom = Math.sin(omega);\r\n\t\t\tscale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n\t\t\tscale1 = Math.sin(t * omega) / sinom;\r\n\t\t} else {\r\n\t\t\t// \"from\" and \"to\" quaternions are very close  \r\n\t\t\t//  ... so we can do a linear interpolation \r\n\t\t\tscale0 = 1.0 - t;\r\n\t\t\tscale1 = t;\r\n\t\t}\r\n\t\t// calculate final values \r\n\t\tout.x = scale0 * ax + scale1 * bx;\r\n\t\tout.y = scale0 * ay + scale1 * by;\r\n\t\tout.z = scale0 * az + scale1 * bz;\r\n\t\tout.w = scale0 * aw + scale1 * bw;\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算两个四元数的线性插值\r\n\t * @param\tleft left四元数\r\n\t * @param\tright right四元数b\r\n\t * @param\tt 插值比例\r\n\t * @param\tout 输出四元数\r\n\t */\r\n\tstatic lerp(left: Quaternion, right: Quaternion, amount: number, out: Quaternion): void {\r\n\t\tvar inverse: number = 1.0 - amount;\r\n\t\tif (Quaternion.dot(left, right) >= 0) {\r\n\t\t\tout.x = (inverse * left.x) + (amount * right.x);\r\n\t\t\tout.y = (inverse * left.y) + (amount * right.y);\r\n\t\t\tout.z = (inverse * left.z) + (amount * right.z);\r\n\t\t\tout.w = (inverse * left.w) + (amount * right.w);\r\n\t\t} else {\r\n\t\t\tout.x = (inverse * left.x) - (amount * right.x);\r\n\t\t\tout.y = (inverse * left.y) - (amount * right.y);\r\n\t\t\tout.z = (inverse * left.z) - (amount * right.z);\r\n\t\t\tout.w = (inverse * left.w) - (amount * right.w);\r\n\t\t}\r\n\t\tout.normalize(out);\r\n\t}\r\n\r\n\t/**\r\n\t * 计算两个四元数的和\r\n\t * @param\tleft  left四元数\r\n\t * @param\tright right 四元数\r\n\t * @param\tout 输出四元数\r\n\t */\r\n\tstatic add(left: Quaternion, right: Quaternion, out: Quaternion): void {\r\n\t\tout.x = left.x + right.x;\r\n\t\tout.y = left.y + right.y;\r\n\t\tout.z = left.z + right.z;\r\n\t\tout.w = left.w + right.w;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算两个四元数的点积\r\n\t * @param\tleft left四元数\r\n\t * @param\tright right四元数\r\n\t * @return  点积\r\n\t */\r\n\tstatic dot(left: Quaternion, right: Quaternion): number {\r\n\t\treturn left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\r\n\t}\r\n\r\n\t/**X轴坐标*/\r\n\tx: number;\r\n\t/**Y轴坐标*/\r\n\ty: number;\r\n\t/**Z轴坐标*/\r\n\tz: number;\r\n\t/**W轴坐标*/\r\n\tw: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Quaternion</code> 实例。\r\n\t * @param\tx 四元数的x值\r\n\t * @param\ty 四元数的y值\r\n\t * @param\tz 四元数的z值\r\n\t * @param\tw 四元数的w值\r\n\t */\r\n\tconstructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1, nativeElements: Float32Array = null/*[NATIVE]*/) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\t}\r\n\r\n\t/**\r\n\t * 根据缩放值缩放四元数\r\n\t * @param\tscale 缩放值\r\n\t * @param\tout 输出四元数\r\n\t */\r\n\tscaling(scaling: number, out: Quaternion): void {\r\n\t\tout.x = this.x * scaling;\r\n\t\tout.y = this.y * scaling;\r\n\t\tout.z = this.z * scaling;\r\n\t\tout.w = this.w * scaling;\r\n\t}\r\n\r\n\t/**\r\n\t * 归一化四元数\r\n\t * @param\tout 输出四元数\r\n\t */\r\n\tnormalize(out: Quaternion): void {\r\n\t\tvar len: number = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\t\tif (len > 0) {\r\n\t\t\tlen = 1 / Math.sqrt(len);\r\n\t\t\tout.x = this.x * len;\r\n\t\t\tout.y = this.y * len;\r\n\t\t\tout.z = this.z * len;\r\n\t\t\tout.w = this.w * len;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 计算四元数的长度\r\n\t * @return  长度\r\n\t */\r\n\tlength(): number {\r\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\r\n\t}\r\n\r\n\t/**\r\n\t * 根据绕X轴的角度旋转四元数\r\n\t * @param\trad 角度\r\n\t * @param\tout 输出四元数\r\n\t */\r\n\trotateX(rad: number, out: Quaternion): void {\r\n\t\trad *= 0.5;\r\n\r\n\t\tvar bx: number = Math.sin(rad), bw: number = Math.cos(rad);\r\n\r\n\t\tout.x = this.x * bw + this.w * bx;\r\n\t\tout.y = this.y * bw + this.z * bx;\r\n\t\tout.z = this.z * bw - this.y * bx;\r\n\t\tout.w = this.w * bw - this.x * bx;\r\n\t}\r\n\r\n\t/**\r\n\t * 根据绕Y轴的制定角度旋转四元数\r\n\t * @param\trad 角度\r\n\t * @param\tout 输出四元数\r\n\t */\r\n\trotateY(rad: number, out: Quaternion): void {\r\n\t\trad *= 0.5;\r\n\r\n\t\tvar by: number = Math.sin(rad), bw: number = Math.cos(rad);\r\n\r\n\t\tout.x = this.x * bw - this.z * by;\r\n\t\tout.y = this.y * bw + this.w * by;\r\n\t\tout.z = this.z * bw + this.x * by;\r\n\t\tout.w = this.w * bw - this.y * by;\r\n\t}\r\n\r\n\t/**\r\n\t * 根据绕Z轴的制定角度旋转四元数\r\n\t * @param\trad 角度\r\n\t * @param\tout 输出四元数\r\n\t */\r\n\trotateZ(rad: number, out: Quaternion): void {\r\n\t\trad *= 0.5;\r\n\t\tvar bz: number = Math.sin(rad), bw: number = Math.cos(rad);\r\n\r\n\t\tout.x = this.x * bw + this.y * bz;\r\n\t\tout.y = this.y * bw - this.x * bz;\r\n\t\tout.z = this.z * bw + this.w * bz;\r\n\t\tout.w = this.w * bw - this.z * bz;\r\n\t}\r\n\r\n\t/**\r\n\t * 分解四元数到欧拉角（顺序为Yaw、Pitch、Roll），参考自http://xboxforums.create.msdn.com/forums/p/4574/23988.aspx#23988,问题绕X轴翻转超过±90度时有，会产生瞬间反转\r\n\t * @param\tquaternion 源四元数\r\n\t * @param\tout 欧拉角值\r\n\t */\r\n\tgetYawPitchRoll(out: Vector3): void {\r\n\r\n\t\tVector3.transformQuat(Vector3._ForwardRH, this, Quaternion.TEMPVector31/*forwarldRH*/);\r\n\r\n\t\tVector3.transformQuat(Vector3._Up, this, Quaternion.TEMPVector32/*up*/);\r\n\t\tvar upe: Vector3 = Quaternion.TEMPVector32;\r\n\r\n\t\tQuaternion.angleTo(Vector3._ZERO, Quaternion.TEMPVector31, Quaternion.TEMPVector33/*angle*/);\r\n\t\tvar angle: Vector3 = Quaternion.TEMPVector33;\r\n\r\n\t\tif (angle.x == Math.PI / 2) {\r\n\t\t\tangle.y = Quaternion.arcTanAngle(upe.z, upe.x);\r\n\t\t\tangle.z = 0;\r\n\t\t} else if (angle.x == -Math.PI / 2) {\r\n\t\t\tangle.y = Quaternion.arcTanAngle(-upe.z, -upe.x);\r\n\t\t\tangle.z = 0;\r\n\t\t} else {\r\n\t\t\tILaya3D.Matrix4x4.createRotationY(-angle.y, ILaya3D.Matrix4x4.TEMPMatrix0);\r\n\t\t\tILaya3D.Matrix4x4.createRotationX(-angle.x, ILaya3D.Matrix4x4.TEMPMatrix1);\r\n\r\n\t\t\tVector3.transformCoordinate(Quaternion.TEMPVector32, ILaya3D.Matrix4x4.TEMPMatrix0, Quaternion.TEMPVector32);\r\n\t\t\tVector3.transformCoordinate(Quaternion.TEMPVector32, ILaya3D.Matrix4x4.TEMPMatrix1, Quaternion.TEMPVector32);\r\n\t\t\tangle.z = Quaternion.arcTanAngle(upe.y, -upe.x);\r\n\t\t}\r\n\r\n\t\t// Special cases.\r\n\t\tif (angle.y <= -Math.PI)\r\n\t\t\tangle.y = Math.PI;\r\n\t\tif (angle.z <= -Math.PI)\r\n\t\t\tangle.z = Math.PI;\r\n\r\n\t\tif (angle.y >= Math.PI && angle.z >= Math.PI) {\r\n\t\t\tangle.y = 0;\r\n\t\t\tangle.z = 0;\r\n\t\t\tangle.x = Math.PI - angle.x;\r\n\t\t}\r\n\r\n\t\tvar oe: Vector3 = out;\r\n\t\toe.x = angle.y;\r\n\t\toe.y = angle.x;\r\n\t\toe.z = angle.z;\r\n\t}\r\n\r\n\t/**\r\n\t * 求四元数的逆\r\n\t * @param\tout  输出四元数\r\n\t */\r\n\tinvert(out: Quaternion): void {\r\n\t\tvar a0: number = this.x, a1: number = this.y, a2: number = this.z, a3: number = this.w;\r\n\t\tvar dot: number = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n\t\tvar invDot: number = dot ? 1.0 / dot : 0;\r\n\r\n\t\t// TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\t\tout.x = -a0 * invDot;\r\n\t\tout.y = -a1 * invDot;\r\n\t\tout.z = -a2 * invDot;\r\n\t\tout.w = a3 * invDot;\r\n\t}\r\n\r\n\t/**\r\n\t *设置四元数为单位算数\r\n\t * @param out  输出四元数\r\n\t */\r\n\tidentity(): void {\r\n\t\tthis.x = 0;\r\n\t\tthis.y = 0;\r\n\t\tthis.z = 0;\r\n\t\tthis.w = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 从Array数组拷贝值。\r\n\t * @param  array 数组。\r\n\t * @param  offset 数组偏移。\r\n\t */\r\n\tfromArray(array: any[], offset: number = 0): void {\r\n\t\tthis.x = array[offset + 0];\r\n\t\tthis.y = array[offset + 1];\r\n\t\tthis.z = array[offset + 2];\r\n\t\tthis.w = array[offset + 3];\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tif (this === destObject) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tdestObject.x = this.x;\r\n\t\tdestObject.y = this.y;\r\n\t\tdestObject.z = this.z;\r\n\t\tdestObject.w = this.w;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: Quaternion = new Quaternion();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\tequals(b: Quaternion): boolean {\r\n\t\treturn MathUtils3D.nearEqual(this.x, b.x) && MathUtils3D.nearEqual(this.y, b.y) && MathUtils3D.nearEqual(this.z, b.z) && MathUtils3D.nearEqual(this.w, b.w);\r\n\t}\r\n\r\n\t/**\r\n\t * 计算旋转观察四元数\r\n\t * @param\tforward 方向\r\n\t * @param\tup     上向量\r\n\t * @param\tout    输出四元数\r\n\t */\r\n\tstatic rotationLookAt(forward: Vector3, up: Vector3, out: Quaternion): void {\r\n\t\tQuaternion.lookAt(Vector3._ZERO, forward, up, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 计算观察四元数\r\n\t * @param\teye    观察者位置\r\n\t * @param\ttarget 目标位置\r\n\t * @param\tup     上向量\r\n\t * @param\tout    输出四元数\r\n\t */\r\n\tstatic lookAt(eye: Vector3, target: Vector3, up: Vector3, out: Quaternion): void {\r\n\t\tMatrix3x3.lookAt(eye, target, up, Quaternion._tempMatrix3x3);\r\n\t\tQuaternion.rotationMatrix(Quaternion._tempMatrix3x3, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 计算长度的平方。\r\n\t * @return 长度的平方。\r\n\t */\r\n\tlengthSquared(): number {\r\n\t\treturn (this.x * this.x) + (this.y * this.y) + (this.z * this.z) + (this.w * this.w);\r\n\t}\r\n\r\n\t/**\r\n\t * 计算四元数的逆四元数。\r\n\t * @param\tvalue 四元数。\r\n\t * @param\tout 逆四元数。\r\n\t */\r\n\tstatic invert(value: Quaternion, out: Quaternion): void {\r\n\t\tvar lengthSq: number = value.lengthSquared();\r\n\t\tif (!MathUtils3D.isZero(lengthSq)) {\r\n\t\t\tlengthSq = 1.0 / lengthSq;\r\n\r\n\t\t\tout.x = -value.x * lengthSq;\r\n\t\t\tout.y = -value.y * lengthSq;\r\n\t\t\tout.z = -value.z * lengthSq;\r\n\t\t\tout.w = value.w * lengthSq;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 通过一个3x3矩阵创建一个四元数\r\n\t * @param\tmatrix3x3  3x3矩阵\r\n\t * @param\tout        四元数\r\n\t */\r\n\tstatic rotationMatrix(matrix3x3: Matrix3x3, out: Quaternion): void {\r\n\t\tvar me: Float32Array = matrix3x3.elements;\r\n\t\tvar m11: number = me[0];\r\n\t\tvar m12: number = me[1];\r\n\t\tvar m13: number = me[2];\r\n\t\tvar m21: number = me[3];\r\n\t\tvar m22: number = me[4];\r\n\t\tvar m23: number = me[5];\r\n\t\tvar m31: number = me[6];\r\n\t\tvar m32: number = me[7];\r\n\t\tvar m33: number = me[8];\r\n\r\n\t\tvar sqrt: number, half: number;\r\n\t\tvar scale: number = m11 + m22 + m33;\r\n\r\n\t\tif (scale > 0) {\r\n\r\n\t\t\tsqrt = Math.sqrt(scale + 1);\r\n\t\t\tout.w = sqrt * 0.5;\r\n\t\t\tsqrt = 0.5 / sqrt;\r\n\r\n\t\t\tout.x = (m23 - m32) * sqrt;\r\n\t\t\tout.y = (m31 - m13) * sqrt;\r\n\t\t\tout.z = (m12 - m21) * sqrt;\r\n\r\n\t\t} else if ((m11 >= m22) && (m11 >= m33)) {\r\n\r\n\t\t\tsqrt = Math.sqrt(1 + m11 - m22 - m33);\r\n\t\t\thalf = 0.5 / sqrt;\r\n\r\n\t\t\tout.x = 0.5 * sqrt;\r\n\t\t\tout.y = (m12 + m21) * half;\r\n\t\t\tout.z = (m13 + m31) * half;\r\n\t\t\tout.w = (m23 - m32) * half;\r\n\t\t} else if (m22 > m33) {\r\n\r\n\t\t\tsqrt = Math.sqrt(1 + m22 - m11 - m33);\r\n\t\t\thalf = 0.5 / sqrt;\r\n\r\n\t\t\tout.x = (m21 + m12) * half;\r\n\t\t\tout.y = 0.5 * sqrt;\r\n\t\t\tout.z = (m32 + m23) * half;\r\n\t\t\tout.w = (m31 - m13) * half;\r\n\t\t} else {\r\n\r\n\t\t\tsqrt = Math.sqrt(1 + m33 - m11 - m22);\r\n\t\t\thalf = 0.5 / sqrt;\r\n\r\n\t\t\tout.x = (m31 + m13) * half;\r\n\t\t\tout.y = (m32 + m23) * half;\r\n\t\t\tout.z = 0.5 * sqrt;\r\n\t\t\tout.w = (m12 - m21) * half;\r\n\t\t}\r\n\t}\r\n\r\n\tforNativeElement(nativeElements: Float32Array = null): void//[NATIVE_TS]\r\n\t{\r\n\r\n\t\tif (nativeElements) {\r\n\t\t\t(<any>this).elements = nativeElements;\r\n\t\t\t(<any>this).elements[0] = this.x;\r\n\t\t\t(<any>this).elements[1] = this.y;\r\n\t\t\t(<any>this).elements[2] = this.z;\r\n\t\t\t(<any>this).elements[3] = this.w;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t(<any>this).elements = new Float32Array([this.x, this.y, this.z, this.w]);\r\n\t\t}\r\n\t\tVector2.rewriteNumProperty(this, \"x\", 0);\r\n\t\tVector2.rewriteNumProperty(this, \"y\", 1);\r\n\t\tVector2.rewriteNumProperty(this, \"z\", 2);\r\n\t\tVector2.rewriteNumProperty(this, \"w\", 3);\r\n\r\n\t}\r\n}\r\n\r\n\r\n","import { Vector3 } from \"./Vector3\";\r\nimport { Quaternion } from \"./Quaternion\";\r\nimport { MathUtils3D } from \"./MathUtils3D\";\r\nimport { IClone } from \"../core/IClone\"\r\nimport { LayaGL } from \"../../layagl/LayaGL\"\r\n\r\n/**\r\n * <code>Matrix4x4</code> 类用于创建4x4矩阵。\r\n */\r\nexport class Matrix4x4 implements IClone {\r\n\t/**@internal */\r\n\tprivate static _tempMatrix4x4: Matrix4x4 = new Matrix4x4();\r\n\t/**@internal */\r\n\tstatic TEMPMatrix0: Matrix4x4 = new Matrix4x4();\r\n\t/**@internal */\r\n\tstatic TEMPMatrix1: Matrix4x4 = new Matrix4x4();\r\n\t/**@internal */\r\n\tprivate static _tempVector0: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector1: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector2: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector3: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempQuaternion: Quaternion = new Quaternion();\r\n\r\n\t/**默认矩阵,禁止修改*/\r\n\tstatic DEFAULT: Matrix4x4 = new Matrix4x4();\r\n\t/**默认矩阵,禁止修改*/\r\n\tstatic ZERO: Matrix4x4 = new Matrix4x4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n\r\n\t/**\r\n\t * 绕X轴旋转\r\n\t * @param\trad  旋转角度\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\tstatic createRotationX(rad: number, out: Matrix4x4): void {\r\n\t\tvar oe: Float32Array = out.elements;\r\n\t\tvar s: number = Math.sin(rad), c: number = Math.cos(rad);\r\n\r\n\t\toe[1] = oe[2] = oe[3] = oe[4] = oe[7] = oe[8] = oe[11] = oe[12] = oe[13] = oe[14] = 0;\r\n\t\toe[0] = oe[15] = 1;\r\n\t\toe[5] = oe[10] = c;\r\n\t\toe[6] = s;\r\n\t\toe[9] = -s;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * 绕Y轴旋转\r\n\t * @param\trad  旋转角度\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\tstatic createRotationY(rad: number, out: Matrix4x4): void {\r\n\r\n\t\tvar oe: Float32Array = out.elements;\r\n\t\tvar s: number = Math.sin(rad), c: number = Math.cos(rad);\r\n\r\n\t\toe[1] = oe[3] = oe[4] = oe[6] = oe[7] = oe[9] = oe[11] = oe[12] = oe[13] = oe[14] = 0;\r\n\t\toe[5] = oe[15] = 1;\r\n\t\toe[0] = oe[10] = c;\r\n\t\toe[2] = -s;\r\n\t\toe[8] = s;\r\n\t}\r\n\r\n\t/**\r\n\t * 绕Z轴旋转\r\n\t * @param\trad  旋转角度\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\tstatic createRotationZ(rad: number, out: Matrix4x4): void {\r\n\r\n\t\tvar oe: Float32Array = out.elements;\r\n\t\tvar s: number = Math.sin(rad), c: number = Math.cos(rad);\r\n\r\n\t\toe[2] = oe[3] = oe[6] = oe[7] = oe[8] = oe[9] = oe[11] = oe[12] = oe[13] = oe[14] = 0;\r\n\t\toe[10] = oe[15] = 1;\r\n\t\toe[0] = oe[5] = c;\r\n\t\toe[1] = s;\r\n\t\toe[4] = -s;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过yaw pitch roll旋转创建旋转矩阵。\r\n\t * @param\tyaw\r\n\t * @param\tpitch\r\n\t * @param\troll\r\n\t * @param\tresult\r\n\t */\r\n\tstatic createRotationYawPitchRoll(yaw: number, pitch: number, roll: number, result: Matrix4x4): void {\r\n\t\tQuaternion.createFromYawPitchRoll(yaw, pitch, roll, Matrix4x4._tempQuaternion);\r\n\t\tMatrix4x4.createRotationQuaternion(Matrix4x4._tempQuaternion, result);\r\n\t}\r\n\r\n\t/**\r\n\t * 通过旋转轴axis和旋转角度angle计算旋转矩阵。\r\n\t * @param\taxis 旋转轴,假定已经归一化。\r\n\t * @param\tangle 旋转角度。\r\n\t * @param\tresult 结果矩阵。\r\n\t */\r\n\tstatic createRotationAxis(axis: Vector3, angle: number, result: Matrix4x4): void {\r\n\t\tvar x: number = axis.x;\r\n\t\tvar y: number = axis.y;\r\n\t\tvar z: number = axis.z;\r\n\t\tvar cos: number = Math.cos(angle);\r\n\t\tvar sin: number = Math.sin(angle);\r\n\t\tvar xx: number = x * x;\r\n\t\tvar yy: number = y * y;\r\n\t\tvar zz: number = z * z;\r\n\t\tvar xy: number = x * y;\r\n\t\tvar xz: number = x * z;\r\n\t\tvar yz: number = y * z;\r\n\r\n\t\tvar resultE: Float32Array = result.elements;\r\n\t\tresultE[3] = resultE[7] = resultE[11] = resultE[12] = resultE[13] = resultE[14] = 0;\r\n\t\tresultE[15] = 1.0;\r\n\t\tresultE[0] = xx + (cos * (1.0 - xx));\r\n\t\tresultE[1] = (xy - (cos * xy)) + (sin * z);\r\n\t\tresultE[2] = (xz - (cos * xz)) - (sin * y);\r\n\t\tresultE[4] = (xy - (cos * xy)) - (sin * z);\r\n\t\tresultE[5] = yy + (cos * (1.0 - yy));\r\n\t\tresultE[6] = (yz - (cos * yz)) + (sin * x);\r\n\t\tresultE[8] = (xz - (cos * xz)) + (sin * y);\r\n\t\tresultE[9] = (yz - (cos * yz)) - (sin * x);\r\n\t\tresultE[10] = zz + (cos * (1.0 - zz));\r\n\t}\r\n\r\n\tsetRotation(rotation: Quaternion): void {\r\n\t\tvar rotationX: number = rotation.x;\r\n\t\tvar rotationY: number = rotation.y;\r\n\t\tvar rotationZ: number = rotation.z;\r\n\t\tvar rotationW: number = rotation.w;\r\n\r\n\t\tvar xx: number = rotationX * rotationX;\r\n\t\tvar yy: number = rotationY * rotationY;\r\n\t\tvar zz: number = rotationZ * rotationZ;\r\n\t\tvar xy: number = rotationX * rotationY;\r\n\t\tvar zw: number = rotationZ * rotationW;\r\n\t\tvar zx: number = rotationZ * rotationX;\r\n\t\tvar yw: number = rotationY * rotationW;\r\n\t\tvar yz: number = rotationY * rotationZ;\r\n\t\tvar xw: number = rotationX * rotationW;\r\n\r\n\t\tvar e: Float32Array = this.elements;\r\n\t\te[0] = 1.0 - (2.0 * (yy + zz));\r\n\t\te[1] = 2.0 * (xy + zw);\r\n\t\te[2] = 2.0 * (zx - yw);\r\n\t\te[4] = 2.0 * (xy - zw);\r\n\t\te[5] = 1.0 - (2.0 * (zz + xx));\r\n\t\te[6] = 2.0 * (yz + xw);\r\n\t\te[8] = 2.0 * (zx + yw);\r\n\t\te[9] = 2.0 * (yz - xw);\r\n\t\te[10] = 1.0 - (2.0 * (yy + xx));\r\n\t}\r\n\r\n\tsetPosition(position: Vector3): void {\r\n\t\tvar e: Float32Array = this.elements;\r\n\t\te[12] = position.x;\r\n\t\te[13] = position.y;\r\n\t\te[14] = position.z;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过四元数创建旋转矩阵。\r\n\t * @param\trotation 旋转四元数。\r\n\t * @param\tresult 输出旋转矩阵\r\n\t */\r\n\tstatic createRotationQuaternion(rotation: Quaternion, result: Matrix4x4): void {\r\n\t\tvar resultE: Float32Array = result.elements;\r\n\t\tvar rotationX: number = rotation.x;\r\n\t\tvar rotationY: number = rotation.y;\r\n\t\tvar rotationZ: number = rotation.z;\r\n\t\tvar rotationW: number = rotation.w;\r\n\r\n\t\tvar xx: number = rotationX * rotationX;\r\n\t\tvar yy: number = rotationY * rotationY;\r\n\t\tvar zz: number = rotationZ * rotationZ;\r\n\t\tvar xy: number = rotationX * rotationY;\r\n\t\tvar zw: number = rotationZ * rotationW;\r\n\t\tvar zx: number = rotationZ * rotationX;\r\n\t\tvar yw: number = rotationY * rotationW;\r\n\t\tvar yz: number = rotationY * rotationZ;\r\n\t\tvar xw: number = rotationX * rotationW;\r\n\r\n\t\tresultE[3] = resultE[7] = resultE[11] = resultE[12] = resultE[13] = resultE[14] = 0;\r\n\t\tresultE[15] = 1.0;\r\n\t\tresultE[0] = 1.0 - (2.0 * (yy + zz));\r\n\t\tresultE[1] = 2.0 * (xy + zw);\r\n\t\tresultE[2] = 2.0 * (zx - yw);\r\n\t\tresultE[4] = 2.0 * (xy - zw);\r\n\t\tresultE[5] = 1.0 - (2.0 * (zz + xx));\r\n\t\tresultE[6] = 2.0 * (yz + xw);\r\n\t\tresultE[8] = 2.0 * (zx + yw);\r\n\t\tresultE[9] = 2.0 * (yz - xw);\r\n\t\tresultE[10] = 1.0 - (2.0 * (yy + xx));\r\n\t}\r\n\r\n\t/**\r\n\t * 根据平移计算输出矩阵\r\n\t * @param\ttrans  平移向量\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\tstatic createTranslate(trans: Vector3, out: Matrix4x4): void {\r\n\r\n\t\tvar oe: Float32Array = out.elements;\r\n\t\toe[4] = oe[8] = oe[1] = oe[9] = oe[2] = oe[6] = oe[3] = oe[7] = oe[11] = 0;\r\n\t\toe[0] = oe[5] = oe[10] = oe[15] = 1;\r\n\t\toe[12] = trans.x;\r\n\t\toe[13] = trans.y;\r\n\t\toe[14] = trans.z;\r\n\t}\r\n\r\n\t/**\r\n\t * 根据缩放计算输出矩阵\r\n\t * @param\tscale  缩放值\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\tstatic createScaling(scale: Vector3, out: Matrix4x4): void {\r\n\r\n\t\tvar oe: Float32Array = out.elements;\r\n\t\toe[0] = scale.x;\r\n\t\toe[5] = scale.y;\r\n\t\toe[10] = scale.z;\r\n\t\toe[1] = oe[4] = oe[8] = oe[12] = oe[9] = oe[13] = oe[2] = oe[6] = oe[14] = oe[3] = oe[7] = oe[11] = 0;\r\n\t\toe[15] = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算两个矩阵的乘法\r\n\t * @param\tleft left矩阵\r\n\t * @param\tright  right矩阵\r\n\t * @param\tout  输出矩阵\r\n\t */\r\n\tstatic multiply(left: Matrix4x4, right: Matrix4x4, out: Matrix4x4): void {\r\n\t\tvar l: Float32Array = right.elements;\r\n\t\tvar r: Float32Array = left.elements;\r\n\t\tvar e: Float32Array = out.elements;\r\n\r\n\t\tvar l11: number = l[0], l12: number = l[1], l13: number = l[2], l14: number = l[3];\r\n\t\tvar l21: number = l[4], l22: number = l[5], l23: number = l[6], l24: number = l[7];\r\n\t\tvar l31: number = l[8], l32: number = l[9], l33: number = l[10], l34: number = l[11];\r\n\t\tvar l41: number = l[12], l42: number = l[13], l43: number = l[14], l44: number = l[15];\r\n\r\n\t\tvar r11: number = r[0], r12: number = r[1], r13: number = r[2], r14: number = r[3];\r\n\t\tvar r21: number = r[4], r22: number = r[5], r23: number = r[6], r24: number = r[7];\r\n\t\tvar r31: number = r[8], r32: number = r[9], r33: number = r[10], r34: number = r[11];\r\n\t\tvar r41: number = r[12], r42: number = r[13], r43: number = r[14], r44: number = r[15];\r\n\r\n\t\te[0] = (l11 * r11) + (l12 * r21) + (l13 * r31) + (l14 * r41);\r\n\t\te[1] = (l11 * r12) + (l12 * r22) + (l13 * r32) + (l14 * r42);\r\n\t\te[2] = (l11 * r13) + (l12 * r23) + (l13 * r33) + (l14 * r43);\r\n\t\te[3] = (l11 * r14) + (l12 * r24) + (l13 * r34) + (l14 * r44);\r\n\t\te[4] = (l21 * r11) + (l22 * r21) + (l23 * r31) + (l24 * r41);\r\n\t\te[5] = (l21 * r12) + (l22 * r22) + (l23 * r32) + (l24 * r42);\r\n\t\te[6] = (l21 * r13) + (l22 * r23) + (l23 * r33) + (l24 * r43);\r\n\t\te[7] = (l21 * r14) + (l22 * r24) + (l23 * r34) + (l24 * r44);\r\n\t\te[8] = (l31 * r11) + (l32 * r21) + (l33 * r31) + (l34 * r41);\r\n\t\te[9] = (l31 * r12) + (l32 * r22) + (l33 * r32) + (l34 * r42);\r\n\t\te[10] = (l31 * r13) + (l32 * r23) + (l33 * r33) + (l34 * r43);\r\n\t\te[11] = (l31 * r14) + (l32 * r24) + (l33 * r34) + (l34 * r44);\r\n\t\te[12] = (l41 * r11) + (l42 * r21) + (l43 * r31) + (l44 * r41);\r\n\t\te[13] = (l41 * r12) + (l42 * r22) + (l43 * r32) + (l44 * r42);\r\n\t\te[14] = (l41 * r13) + (l42 * r23) + (l43 * r33) + (l44 * r43);\r\n\t\te[15] = (l41 * r14) + (l42 * r24) + (l43 * r34) + (l44 * r44);\r\n\t}\r\n\r\n\tstatic multiplyForNative(left: Matrix4x4, right: Matrix4x4, out: Matrix4x4): void {\r\n\t\t(<any>LayaGL.instance).matrix4x4Multiply(left.elements, right.elements, out.elements);\r\n\t}\r\n\r\n\t/**\r\n\t * 从四元数计算旋转矩阵\r\n\t * @param\trotation 四元数\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\tstatic createFromQuaternion(rotation: Quaternion, out: Matrix4x4): void {\r\n\t\tvar e: Float32Array = out.elements;\r\n\t\tvar x: number = rotation.x, y: number = rotation.y, z: number = rotation.z, w: number = rotation.w;\r\n\t\tvar x2: number = x + x;\r\n\t\tvar y2: number = y + y;\r\n\t\tvar z2: number = z + z;\r\n\r\n\t\tvar xx: number = x * x2;\r\n\t\tvar yx: number = y * x2;\r\n\t\tvar yy: number = y * y2;\r\n\t\tvar zx: number = z * x2;\r\n\t\tvar zy: number = z * y2;\r\n\t\tvar zz: number = z * z2;\r\n\t\tvar wx: number = w * x2;\r\n\t\tvar wy: number = w * y2;\r\n\t\tvar wz: number = w * z2;\r\n\r\n\t\te[0] = 1 - yy - zz;\r\n\t\te[1] = yx + wz;\r\n\t\te[2] = zx - wy;\r\n\t\te[3] = 0;\r\n\r\n\t\te[4] = yx - wz;\r\n\t\te[5] = 1 - xx - zz;\r\n\t\te[6] = zy + wx;\r\n\t\te[7] = 0;\r\n\r\n\t\te[8] = zx + wy;\r\n\t\te[9] = zy - wx;\r\n\t\te[10] = 1 - xx - yy;\r\n\t\te[11] = 0;\r\n\r\n\t\te[12] = 0;\r\n\t\te[13] = 0;\r\n\t\te[14] = 0;\r\n\t\te[15] = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算仿射矩阵\r\n\t * @param\ttrans 平移\r\n\t * @param\trot 旋转\r\n\t * @param\tscale 缩放\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\tstatic createAffineTransformation(trans: Vector3, rot: Quaternion, scale: Vector3, out: Matrix4x4): void {\r\n\t\tvar oe: Float32Array = out.elements;\r\n\r\n\t\tvar x: number = rot.x, y: number = rot.y, z: number = rot.z, w: number = rot.w, x2: number = x + x, y2: number = y + y, z2: number = z + z;\r\n\t\tvar xx: number = x * x2, xy: number = x * y2, xz: number = x * z2, yy: number = y * y2, yz: number = y * z2, zz: number = z * z2;\r\n\t\tvar wx: number = w * x2, wy: number = w * y2, wz: number = w * z2, sx: number = scale.x, sy: number = scale.y, sz: number = scale.z;\r\n\r\n\t\toe[0] = (1 - (yy + zz)) * sx;\r\n\t\toe[1] = (xy + wz) * sx;\r\n\t\toe[2] = (xz - wy) * sx;\r\n\t\toe[3] = 0;\r\n\t\toe[4] = (xy - wz) * sy;\r\n\t\toe[5] = (1 - (xx + zz)) * sy;\r\n\t\toe[6] = (yz + wx) * sy;\r\n\t\toe[7] = 0;\r\n\t\toe[8] = (xz + wy) * sz;\r\n\t\toe[9] = (yz - wx) * sz;\r\n\t\toe[10] = (1 - (xx + yy)) * sz;\r\n\t\toe[11] = 0;\r\n\t\toe[12] = trans.x;\r\n\t\toe[13] = trans.y;\r\n\t\toe[14] = trans.z;\r\n\t\toe[15] = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算观察矩阵\r\n\t * @param\teye 视点位置\r\n\t * @param\ttarget 视点目标\r\n\t * @param\tup 向上向量\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\tstatic createLookAt(eye: Vector3, target: Vector3, up: Vector3, out: Matrix4x4): void {\r\n\t\tvar oE: Float32Array = out.elements;\r\n\t\tvar xaxis: Vector3 = Matrix4x4._tempVector0;\r\n\t\tvar yaxis: Vector3 = Matrix4x4._tempVector1;\r\n\t\tvar zaxis: Vector3 = Matrix4x4._tempVector2;\r\n\t\tVector3.subtract(eye, target, zaxis);\r\n\t\tVector3.normalize(zaxis, zaxis);\r\n\t\tVector3.cross(up, zaxis, xaxis);\r\n\t\tVector3.normalize(xaxis, xaxis);\r\n\t\tVector3.cross(zaxis, xaxis, yaxis);\r\n\r\n\t\toE[3] = oE[7] = oE[11] = 0;\r\n\t\toE[15] = 1;\r\n\t\toE[0] = xaxis.x;\r\n\t\toE[4] = xaxis.y;\r\n\t\toE[8] = xaxis.z;\r\n\t\toE[1] = yaxis.x;\r\n\t\toE[5] = yaxis.y;\r\n\t\toE[9] = yaxis.z;\r\n\t\toE[2] = zaxis.x;\r\n\t\toE[6] = zaxis.y;\r\n\t\toE[10] = zaxis.z;\r\n\r\n\t\toE[12] = -Vector3.dot(xaxis, eye);\r\n\t\toE[13] = -Vector3.dot(yaxis, eye);\r\n\t\toE[14] = -Vector3.dot(zaxis, eye);\r\n\t}\r\n\r\n\t/**\r\n\t * 通过FOV创建透视投影矩阵。\r\n\t * @param\tfov  视角。\r\n\t * @param\taspect 横纵比。\r\n\t * @param\tnear 近裁面。\r\n\t * @param\tfar 远裁面。\r\n\t * @param\tout 输出矩阵。\r\n\t */\r\n\tstatic createPerspective(fov: number, aspect: number, znear: number, zfar: number, out: Matrix4x4): void {\r\n\t\tvar yScale: number = 1.0 / Math.tan(fov * 0.5);\r\n\t\tvar xScale: number = yScale / aspect;\r\n\r\n\t\tvar halfWidth: number = znear / xScale;\r\n\t\tvar halfHeight: number = znear / yScale;\r\n\t\tMatrix4x4.createPerspectiveOffCenter(-halfWidth, halfWidth, -halfHeight, halfHeight, znear, zfar, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建透视投影矩阵。\r\n\t * @param\tleft 视椎左边界。\r\n\t * @param\tright 视椎右边界。\r\n\t * @param\tbottom 视椎底边界。\r\n\t * @param\ttop 视椎顶边界。\r\n\t * @param\tznear 视椎近边界。\r\n\t * @param\tzfar 视椎远边界。\r\n\t * @param\tout 输出矩阵。\r\n\t */\r\n\tstatic createPerspectiveOffCenter(left: number, right: number, bottom: number, top: number, znear: number, zfar: number, out: Matrix4x4): void {\r\n\t\tvar oe: Float32Array = out.elements;\r\n\t\tvar zRange: number = zfar / (zfar - znear);\r\n\t\toe[1] = oe[2] = oe[3] = oe[4] = oe[6] = oe[7] = oe[12] = oe[13] = oe[15] = 0;\r\n\t\toe[0] = 2.0 * znear / (right - left);\r\n\t\toe[5] = 2.0 * znear / (top - bottom);\r\n\t\toe[8] = (left + right) / (right - left);\r\n\t\toe[9] = (top + bottom) / (top - bottom);\r\n\t\toe[10] = -zRange;\r\n\t\toe[11] = -1.0;\r\n\t\toe[14] = -znear * zRange;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算正交投影矩阵。\r\n\t * @param\tleft 视椎左边界。\r\n\t * @param\tright 视椎右边界。\r\n\t * @param\tbottom 视椎底边界。\r\n\t * @param\ttop 视椎顶边界。\r\n\t * @param\tnear 视椎近边界。\r\n\t * @param\tfar 视椎远边界。\r\n\t * @param\tout 输出矩阵。\r\n\t */\r\n\tstatic createOrthoOffCenter(left: number, right: number, bottom: number, top: number, znear: number, zfar: number, out: Matrix4x4): void {\r\n\r\n\t\tvar oe: Float32Array = out.elements;\r\n\t\tvar zRange: number = 1.0 / (zfar - znear);\r\n\t\toe[1] = oe[2] = oe[3] = oe[4] = oe[6] = oe[8] = oe[7] = oe[9] = oe[11] = 0;\r\n\t\toe[15] = 1;\r\n\t\toe[0] = 2.0 / (right - left);\r\n\t\toe[5] = 2.0 / (top - bottom);\r\n\t\toe[10] = -zRange;\r\n\t\toe[12] = (left + right) / (left - right);\r\n\t\toe[13] = (top + bottom) / (bottom - top);\r\n\t\toe[14] = -znear * zRange;\r\n\t}\r\n\r\n\t/**矩阵元素数组*/\r\n\telements: Float32Array;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Matrix4x4</code> 实例。\r\n\t * @param\t4x4矩阵的各元素\r\n\t */\r\n\tconstructor(m11: number = 1, m12: number = 0, m13: number = 0, m14: number = 0, m21: number = 0, m22: number = 1, m23: number = 0, m24: number = 0, m31: number = 0, m32: number = 0, m33: number = 1, m34: number = 0, m41: number = 0, m42: number = 0, m43: number = 0, m44: number = 1, elements: Float32Array = null) {\r\n\t\tvar e: Float32Array = elements ? this.elements = elements : this.elements = new Float32Array(16);//TODO:[NATIVE]临时\r\n\t\te[0] = m11;\r\n\t\te[1] = m12;\r\n\t\te[2] = m13;\r\n\t\te[3] = m14;\r\n\t\te[4] = m21;\r\n\t\te[5] = m22;\r\n\t\te[6] = m23;\r\n\t\te[7] = m24;\r\n\t\te[8] = m31;\r\n\t\te[9] = m32;\r\n\t\te[10] = m33;\r\n\t\te[11] = m34;\r\n\t\te[12] = m41;\r\n\t\te[13] = m42;\r\n\t\te[14] = m43;\r\n\t\te[15] = m44;\r\n\t}\r\n\r\n\tgetElementByRowColumn(row: number, column: number): number {\r\n\t\tif (row < 0 || row > 3)\r\n\t\t\tthrow new Error(\"row Rows and columns for matrices run from 0 to 3, inclusive.\");\r\n\t\tif (column < 0 || column > 3)\r\n\t\t\tthrow new Error(\"column Rows and columns for matrices run from 0 to 3, inclusive.\");\r\n\r\n\t\treturn this.elements[(row * 4) + column];\r\n\t}\r\n\r\n\tsetElementByRowColumn(row: number, column: number, value: number): void {\r\n\t\tif (row < 0 || row > 3)\r\n\t\t\tthrow new Error(\"row Rows and columns for matrices run from 0 to 3, inclusive.\");\r\n\t\tif (column < 0 || column > 3)\r\n\t\t\tthrow new Error(\"column Rows and columns for matrices run from 0 to 3, inclusive.\");\r\n\r\n\t\tthis.elements[(row * 4) + column] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 判断两个4x4矩阵的值是否相等。\r\n\t * @param\tother 4x4矩阵\r\n\t */\r\n\tequalsOtherMatrix(other: Matrix4x4): boolean {\r\n\t\tvar e: Float32Array = this.elements;\r\n\t\tvar oe: Float32Array = other.elements;\r\n\r\n\t\treturn (MathUtils3D.nearEqual(e[0], oe[0]) && MathUtils3D.nearEqual(e[1], oe[1]) && MathUtils3D.nearEqual(e[2], oe[2]) && MathUtils3D.nearEqual(e[3], oe[3]) && MathUtils3D.nearEqual(e[4], oe[4]) && MathUtils3D.nearEqual(e[5], oe[5]) && MathUtils3D.nearEqual(e[6], oe[6]) && MathUtils3D.nearEqual(e[7], oe[7]) && MathUtils3D.nearEqual(e[8], oe[8]) && MathUtils3D.nearEqual(e[9], oe[9]) && MathUtils3D.nearEqual(e[10], oe[10]) && MathUtils3D.nearEqual(e[11], oe[11]) && MathUtils3D.nearEqual(e[12], oe[12]) && MathUtils3D.nearEqual(e[13], oe[13]) && MathUtils3D.nearEqual(e[14], oe[14]) && MathUtils3D.nearEqual(e[15], oe[15]));\r\n\t}\r\n\r\n\t/**\r\n\t * 分解矩阵为平移向量、旋转四元数、缩放向量。\r\n\t * @param\ttranslation 平移向量。\r\n\t * @param\trotation 旋转四元数。\r\n\t * @param\tscale 缩放向量。\r\n\t * @return 是否分解成功。\r\n\t */\r\n\tdecomposeTransRotScale(translation: Vector3, rotation: Quaternion, scale: Vector3): boolean {\r\n\t\tvar rotationMatrix: Matrix4x4 = Matrix4x4._tempMatrix4x4;\r\n\t\tif (this.decomposeTransRotMatScale(translation, rotationMatrix, scale)) {\r\n\t\t\tQuaternion.createFromMatrix4x4(rotationMatrix, rotation);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\trotation.identity();\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 分解矩阵为平移向量、旋转矩阵、缩放向量。\r\n\t * @param\ttranslation 平移向量。\r\n\t * @param\trotationMatrix 旋转矩阵。\r\n\t * @param\tscale 缩放向量。\r\n\t * @return 是否分解成功。\r\n\t */\r\n\tdecomposeTransRotMatScale(translation: Vector3, rotationMatrix: Matrix4x4, scale: Vector3): boolean {\r\n\t\tvar e: Float32Array = this.elements;\r\n\t\tvar te: Vector3 = translation;\r\n\t\tvar re: Float32Array = rotationMatrix.elements;\r\n\t\tvar se: Vector3 = scale;\r\n\r\n\t\t//Get the translation. \r\n\t\tte.x = e[12];\r\n\t\tte.y = e[13];\r\n\t\tte.z = e[14];\r\n\r\n\t\t//Scaling is the length of the rows. \r\n\t\tvar m11: number = e[0], m12: number = e[1], m13: number = e[2];\r\n\t\tvar m21: number = e[4], m22: number = e[5], m23: number = e[6];\r\n\t\tvar m31: number = e[8], m32: number = e[9], m33: number = e[10];\r\n\r\n\t\tvar sX: number = se.x = Math.sqrt((m11 * m11) + (m12 * m12) + (m13 * m13));\r\n\t\tvar sY: number = se.y = Math.sqrt((m21 * m21) + (m22 * m22) + (m23 * m23));\r\n\t\tvar sZ: number = se.z = Math.sqrt((m31 * m31) + (m32 * m32) + (m33 * m33));\r\n\r\n\t\t//If any of the scaling factors are zero, than the rotation matrix can not exist. \r\n\t\tif (MathUtils3D.isZero(sX) || MathUtils3D.isZero(sY) || MathUtils3D.isZero(sZ)) {\r\n\t\t\tre[1] = re[2] = re[3] = re[4] = re[6] = re[7] = re[8] = re[9] = re[11] = re[12] = re[13] = re[14] = 0;\r\n\t\t\tre[0] = re[5] = re[10] = re[15] = 1;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Calculate an perfect orthonormal matrix (no reflections)\r\n\t\tvar at: Vector3 = Matrix4x4._tempVector0;\r\n\t\tat.x = m31 / sZ;\r\n\t\tat.y = m32 / sZ;\r\n\t\tat.z = m33 / sZ;\r\n\t\tvar tempRight: Vector3 = Matrix4x4._tempVector1;\r\n\t\ttempRight.x = m11 / sX;\r\n\t\ttempRight.y = m12 / sX;\r\n\t\ttempRight.z = m13 / sX;\r\n\t\tvar up: Vector3 = Matrix4x4._tempVector2;\r\n\t\tVector3.cross(at, tempRight, up);\r\n\t\tvar right: Vector3 = Matrix4x4._tempVector1;\r\n\t\tVector3.cross(up, at, right);\r\n\r\n\t\tre[3] = re[7] = re[11] = re[12] = re[13] = re[14] = 0;\r\n\t\tre[15] = 1;\r\n\t\tre[0] = right.x;\r\n\t\tre[1] = right.y;\r\n\t\tre[2] = right.z;\r\n\r\n\t\tre[4] = up.x;\r\n\t\tre[5] = up.y;\r\n\t\tre[6] = up.z;\r\n\r\n\t\tre[8] = at.x;\r\n\t\tre[9] = at.y;\r\n\t\tre[10] = at.z;\r\n\r\n\t\t// In case of reflexions//TODO:是否不用计算dot后的值即为结果\r\n\t\t((re[0] * m11 + re[1] * m12 + re[2] * m13)/*Vector3.dot(right,Right)*/ < 0.0) && (se.x = -sX);\r\n\t\t((re[4] * m21 + re[5] * m22 + re[6] * m23)/* Vector3.dot(up, Up)*/ < 0.0) && (se.y = -sY);\r\n\t\t((re[8] * m31 + re[9] * m32 + re[10] * m33)/*Vector3.dot(at, Backward)*/ < 0.0) && (se.z = -sZ);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 分解旋转矩阵的旋转为YawPitchRoll欧拉角。\r\n\t * @param\tout float yaw\r\n\t * @param\tout float pitch\r\n\t * @param\tout float roll\r\n\t * @return\r\n\t */\r\n\tdecomposeYawPitchRoll(yawPitchRoll: Vector3): void {//TODO:经飞仙测试,好像有BUG。\r\n\t\tvar pitch: number = Math.asin(-this.elements[9]);\r\n\t\tyawPitchRoll.y = pitch;\r\n\t\t// Hardcoded constant - burn him, he's a witch\r\n\t\t// double threshold = 0.001; \r\n\t\tvar test: number = Math.cos(pitch);\r\n\t\tif (test > MathUtils3D.zeroTolerance) {\r\n\t\t\tyawPitchRoll.z = Math.atan2(this.elements[1], this.elements[5]);\r\n\t\t\tyawPitchRoll.x = Math.atan2(this.elements[8], this.elements[10]);\r\n\t\t} else {\r\n\t\t\tyawPitchRoll.z = Math.atan2(-this.elements[4], this.elements[0]);\r\n\t\t\tyawPitchRoll.x = 0.0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 归一化矩阵 \r\n\t */\r\n\tnormalize(): void {\r\n\t\tvar v: Float32Array = this.elements;\r\n\t\tvar c: number = v[0], d: number = v[1], e: number = v[2], g: number = Math.sqrt(c * c + d * d + e * e);\r\n\t\tif (g) {\r\n\t\t\tif (g == 1)\r\n\t\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tv[0] = 0;\r\n\t\t\tv[1] = 0;\r\n\t\t\tv[2] = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tg = 1 / g;\r\n\t\tv[0] = c * g;\r\n\t\tv[1] = d * g;\r\n\t\tv[2] = e * g;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算矩阵的转置矩阵\r\n\t */\r\n\ttranspose(): Matrix4x4 {\r\n\t\tvar e: Float32Array, t: number;\r\n\t\te = this.elements;\r\n\t\tt = e[1];\r\n\t\te[1] = e[4];\r\n\t\te[4] = t;\r\n\t\tt = e[2];\r\n\t\te[2] = e[8];\r\n\t\te[8] = t;\r\n\t\tt = e[3];\r\n\t\te[3] = e[12];\r\n\t\te[12] = t;\r\n\t\tt = e[6];\r\n\t\te[6] = e[9];\r\n\t\te[9] = t;\r\n\t\tt = e[7];\r\n\t\te[7] = e[13];\r\n\t\te[13] = t;\r\n\t\tt = e[11];\r\n\t\te[11] = e[14];\r\n\t\te[14] = t;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算一个矩阵的逆矩阵\r\n\t * @param\tout 输出矩阵\r\n\t */\r\n\tinvert(out: Matrix4x4): void {\r\n\r\n\t\tvar ae: Float32Array = this.elements;\r\n\t\tvar oe: Float32Array = out.elements;\r\n\t\tvar a00: number = ae[0], a01: number = ae[1], a02: number = ae[2], a03: number = ae[3], a10: number = ae[4], a11: number = ae[5], a12: number = ae[6], a13: number = ae[7], a20: number = ae[8], a21: number = ae[9], a22: number = ae[10], a23: number = ae[11], a30: number = ae[12], a31: number = ae[13], a32: number = ae[14], a33: number = ae[15],\r\n\r\n\t\t\tb00: number = a00 * a11 - a01 * a10, b01: number = a00 * a12 - a02 * a10, b02: number = a00 * a13 - a03 * a10, b03: number = a01 * a12 - a02 * a11, b04: number = a01 * a13 - a03 * a11, b05: number = a02 * a13 - a03 * a12, b06: number = a20 * a31 - a21 * a30, b07: number = a20 * a32 - a22 * a30, b08: number = a20 * a33 - a23 * a30, b09: number = a21 * a32 - a22 * a31, b10: number = a21 * a33 - a23 * a31, b11: number = a22 * a33 - a23 * a32,\r\n\r\n\t\t\t// Calculate the determinant \r\n\t\t\tdet: number = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n\t\tif (Math.abs(det) === 0.0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tdet = 1.0 / det;\r\n\r\n\t\toe[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n\t\toe[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n\t\toe[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n\t\toe[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n\t\toe[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n\t\toe[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n\t\toe[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n\t\toe[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n\t\toe[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\t\toe[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\t\toe[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\t\toe[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n\t\toe[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n\t\toe[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n\t\toe[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n\t\toe[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算BlillBoard矩阵\r\n\t * @param\tobjectPosition 物体位置\r\n\t * @param\tcameraPosition 相机位置\r\n\t * @param\tcameraUp       相机上向量\r\n\t * @param\tcameraForward  相机前向量\r\n\t * @param\tmat            变换矩阵\r\n\t */\r\n\tstatic billboard(objectPosition: Vector3, cameraPosition: Vector3, cameraRight: Vector3, cameraUp: Vector3, cameraForward: Vector3, mat: Matrix4x4): void {\r\n\r\n\t\tVector3.subtract(objectPosition, cameraPosition, Matrix4x4._tempVector0);\r\n\r\n\t\tvar lengthSq: number = Vector3.scalarLengthSquared(Matrix4x4._tempVector0);\r\n\r\n\t\tif (MathUtils3D.isZero(lengthSq)) {\r\n\t\t\tVector3.scale(cameraForward, -1, Matrix4x4._tempVector1);\r\n\t\t\tMatrix4x4._tempVector1.cloneTo(Matrix4x4._tempVector0);\r\n\t\t} else {\r\n\t\t\tVector3.scale(Matrix4x4._tempVector0, 1 / Math.sqrt(lengthSq), Matrix4x4._tempVector0);\r\n\t\t}\r\n\r\n\t\tVector3.cross(cameraUp, Matrix4x4._tempVector0, Matrix4x4._tempVector2);\r\n\t\tVector3.normalize(Matrix4x4._tempVector2, Matrix4x4._tempVector2);\r\n\t\tVector3.cross(Matrix4x4._tempVector0, Matrix4x4._tempVector2, Matrix4x4._tempVector3);\r\n\r\n\t\tvar crosse: Vector3 = Matrix4x4._tempVector2;\r\n\t\tvar finale: Vector3 = Matrix4x4._tempVector3;\r\n\t\tvar diffee: Vector3 = Matrix4x4._tempVector0;\r\n\t\tvar obpose: Vector3 = objectPosition;\r\n\r\n\t\tvar mate: Float32Array = mat.elements;\r\n\t\tmate[0] = crosse.x;\r\n\t\tmate[1] = crosse.y;\r\n\t\tmate[2] = crosse.z;\r\n\t\tmate[3] = 0.0;\r\n\t\tmate[4] = finale.x;\r\n\t\tmate[5] = finale.y;\r\n\t\tmate[6] = finale.z;\r\n\t\tmate[7] = 0.0;\r\n\t\tmate[8] = diffee.x;\r\n\t\tmate[9] = diffee.y;\r\n\t\tmate[10] = diffee.z;\r\n\t\tmate[11] = 0.0;\r\n\t\tmate[12] = obpose.x;\r\n\t\tmate[13] = obpose.y;\r\n\t\tmate[14] = obpose.z;\r\n\t\tmate[15] = 1.0;\r\n\t}\r\n\r\n\t/**设置矩阵为单位矩阵*/\r\n\tidentity(): void {\r\n\t\tvar e: Float32Array = this.elements;\r\n\t\te[1] = e[2] = e[3] = e[4] = e[6] = e[7] = e[8] = e[9] = e[11] = e[12] = e[13] = e[14] = 0;\r\n\t\te[0] = e[5] = e[10] = e[15] = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\r\n\t\tvar i: number, s: Float32Array, d: Float32Array;\r\n\t\ts = this.elements;\r\n\t\td = destObject.elements;\r\n\t\tif (s === d) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (i = 0; i < 16; ++i) {\r\n\t\t\td[i] = s[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: Matrix4x4 = new Matrix4x4();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\tstatic translation(v3: Vector3, out: Matrix4x4): void {\r\n\t\tvar oe: Float32Array = out.elements;\r\n\t\toe[0] = oe[5] = oe[10] = oe[15] = 1;\r\n\t\toe[12] = v3.x;\r\n\t\toe[13] = v3.y;\r\n\t\toe[14] = v3.z;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取平移向量。\r\n\t * @param\tout 平移向量。\r\n\t */\r\n\tgetTranslationVector(out: Vector3): void {\r\n\t\tvar me: Float32Array = this.elements;\r\n\t\tout.x = me[12];\r\n\t\tout.y = me[13];\r\n\t\tout.z = me[14];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置平移向量。\r\n\t * @param\ttranslate 平移向量。\r\n\t */\r\n\tsetTranslationVector(translate: Vector3): void {\r\n\t\tvar me: Float32Array = this.elements;\r\n\t\tvar ve: Vector3 = translate;\r\n\t\tme[12] = ve.x;\r\n\t\tme[13] = ve.y;\r\n\t\tme[14] = ve.z;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取前向量。\r\n\t * @param\tout 前向量。\r\n\t */\r\n\tgetForward(out: Vector3): void {\r\n\t\tvar me: Float32Array = this.elements;\r\n\t\tout.x = -me[8];\r\n\t\tout.y = -me[9];\r\n\t\tout.z = -me[10];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置前向量。\r\n\t * @param\tforward 前向量。\r\n\t */\r\n\tsetForward(forward: Vector3): void {\r\n\t\tvar me: Float32Array = this.elements;\r\n\t\tme[8] = -forward.x;\r\n\t\tme[9] = -forward.y;\r\n\t\tme[10] = -forward.z;\r\n\t}\r\n\r\n}\r\n\r\n","import { IClone } from \"../../core/IClone\";\r\nimport { Matrix4x4 } from \"../../math/Matrix4x4\";\r\nimport { Quaternion } from \"../../math/Quaternion\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { PhysicsComponent } from \"../PhysicsComponent\";\r\nimport { CompoundColliderShape } from \"./CompoundColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\n\r\n/**\r\n * <code>ColliderShape</code> 类用于创建形状碰撞器的父类，该类为抽象类。\r\n */\r\nexport class ColliderShape implements IClone {\r\n\t/** 形状方向_X轴正向 */\r\n\tstatic SHAPEORIENTATION_UPX: number = 0;\r\n\t/** 形状方向_Y轴正向 */\r\n\tstatic SHAPEORIENTATION_UPY: number = 1;\r\n\t/** 形状方向_Z轴正向 */\r\n\tstatic SHAPEORIENTATION_UPZ: number = 2;\r\n\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_BOX: number = 0;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_SPHERE: number = 1;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_CYLINDER: number = 2;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_CAPSULE: number = 3;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_CONVEXHULL: number = 4;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_COMPOUND: number = 5;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_STATICPLANE: number = 6;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_CONE: number = 7;\r\n\r\n\t/** @internal */\r\n\tstatic _tempVector30: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprotected static _btScale: number;\r\n\t/**@internal */\r\n\tprotected static _btVector30: number;\r\n\t/**@internal */\r\n\tprotected static _btQuaternion0: number;\r\n\t/**@internal */\r\n\tprotected static _btTransform0: number;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tvar bt: any =ILaya3D.Physics3D._bullet;\r\n\t\tColliderShape._btScale = bt.btVector3_create(1, 1, 1);\r\n\t\tColliderShape._btVector30 = bt.btVector3_create(0, 0, 0);\r\n\t\tColliderShape._btQuaternion0 = bt.btQuaternion_create(0, 0, 0, 1);\r\n\t\tColliderShape._btTransform0 = bt.btTransform_create();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _createAffineTransformation(trans: Vector3, rot: Quaternion, outE: Float32Array): void {\r\n\r\n\t\tvar x: number = rot.x, y: number = rot.y, z: number = rot.z, w: number = rot.w, x2: number = x + x, y2: number = y + y, z2: number = z + z;\r\n\t\tvar xx: number = x * x2, xy: number = x * y2, xz: number = x * z2, yy: number = y * y2, yz: number = y * z2, zz: number = z * z2;\r\n\t\tvar wx: number = w * x2, wy: number = w * y2, wz: number = w * z2;\r\n\r\n\t\toutE[0] = (1 - (yy + zz));\r\n\t\toutE[1] = (xy + wz);\r\n\t\toutE[2] = (xz - wy);\r\n\t\toutE[3] = 0;\r\n\t\toutE[4] = (xy - wz);\r\n\t\toutE[5] = (1 - (xx + zz));\r\n\t\toutE[6] = (yz + wx);\r\n\t\toutE[7] = 0;\r\n\t\toutE[8] = (xz + wy);\r\n\t\toutE[9] = (yz - wx);\r\n\t\toutE[10] = (1 - (xx + yy));\r\n\t\toutE[11] = 0;\r\n\t\toutE[12] = trans.x;\r\n\t\toutE[13] = trans.y;\r\n\t\toutE[14] = trans.z;\r\n\t\toutE[15] = 1;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprotected _scale: Vector3 = new Vector3(1, 1, 1);\r\n\r\n\t/**@internal */\r\n\t_btShape: number;\r\n\t/**@internal */\r\n\t_type: number;//TODO:可以删掉\r\n\t/**@internal */\r\n\t_centerMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/**@internal */\r\n\t_attatched: boolean = false;\r\n\t/**@internal */\r\n\t_indexInCompound: number = -1;\r\n\t/**@internal */\r\n\t_compoundParent: CompoundColliderShape = null;\r\n\t/**@internal */\r\n\t_attatchedCollisionObject: PhysicsComponent = null;\r\n\r\n\t/**@internal */\r\n\t_referenceCount: number = 0;\r\n\r\n\t/**@internal */\r\n\tprivate _localOffset: Vector3 = new Vector3(0, 0, 0);\r\n\t/**@internal */\r\n\tprivate _localRotation: Quaternion = new Quaternion(0, 0, 0, 1);\r\n\r\n\tneedsCustomCollisionCallback: boolean = false;//TODO:默认值,TODO:::::::::::::::::::::::::::::::\r\n\r\n\t/**\r\n\t * 碰撞类型。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t * Shape的本地偏移。\r\n\t */\r\n\tget localOffset(): Vector3 {\r\n\t\treturn this._localOffset;\r\n\t}\r\n\r\n\tset localOffset(value: Vector3) {\r\n\t\tthis._localOffset = value;\r\n\t\tif (this._compoundParent)\r\n\t\t\tthis._compoundParent._updateChildTransform(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Shape的本地旋转。\r\n\t */\r\n\tget localRotation(): Quaternion {\r\n\t\treturn this._localRotation;\r\n\t}\r\n\r\n\tset localRotation(value: Quaternion) {\r\n\t\tthis._localRotation = value;\r\n\t\tif (this._compoundParent)\r\n\t\t\tthis._compoundParent._updateChildTransform(this);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>ColliderShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setScale(value: Vector3): void {\r\n\t\tif (this._compoundParent) {//TODO:待查,这里有问题\r\n\t\t\tthis.updateLocalTransformations();\r\n\t\t} else {\r\n\t\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t\tbt.btVector3_setValue(ColliderShape._btScale, value.x, value.y, value.z);\r\n\t\t\tbt.btCollisionShape_setLocalScaling(this._btShape, ColliderShape._btScale);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addReference(): void {\r\n\t\tthis._referenceCount++;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removeReference(): void {\r\n\t\tthis._referenceCount--;\r\n\t}\r\n\r\n\t/**\r\n\t * 更新本地偏移,如果修改LocalOffset或LocalRotation需要调用。\r\n\t */\r\n\tupdateLocalTransformations(): void {//TODO:是否需要优化\r\n\t\tif (this._compoundParent) {\r\n\t\t\tvar offset: Vector3 = ColliderShape._tempVector30;\r\n\t\t\tVector3.multiply(this.localOffset, this._scale, offset);\r\n\t\t\tColliderShape._createAffineTransformation(offset, this.localRotation, this._centerMatrix.elements);\r\n\t\t} else {\r\n\t\t\tColliderShape._createAffineTransformation(this.localOffset, this.localRotation, this._centerMatrix.elements);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destColliderShape: ColliderShape = (<ColliderShape>destObject);\r\n\t\tthis._localOffset.cloneTo(destColliderShape.localOffset);\r\n\t\tthis._localRotation.cloneTo(destColliderShape.localRotation);\r\n\t\tdestColliderShape.localOffset = destColliderShape.localOffset;\r\n\t\tdestColliderShape.localRotation = destColliderShape.localRotation;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * 销毁。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._btShape) {\r\n\t\t\tILaya3D.Physics3D._bullet.btCollisionShape_destroy(this._btShape);\r\n\t\t\tthis._btShape = null;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ColliderShape } from \"./ColliderShape\";\r\nimport { Vector3 } from \"../../math/Vector3\"\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\n\r\n/**\r\n * <code>StaticPlaneColliderShape</code> 类用于创建静态平面碰撞器。\r\n */\r\nexport class StaticPlaneColliderShape extends ColliderShape {\r\n\t/** @internal */\r\n\tprivate static _btNormal: number;\r\n\r\n\t/**@internal */\r\n\t_offset: number;\r\n\t/**@internal */\r\n\t_normal: Vector3;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tStaticPlaneColliderShape._btNormal = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>StaticPlaneColliderShape</code> 实例。\r\n\t */\r\n\tconstructor(normal: Vector3, offset: number) {\r\n\t\tsuper();\r\n\t\tthis._normal = normal;\r\n\t\tthis._offset = offset;\r\n\t\tthis._type = ColliderShape.SHAPETYPES_STATICPLANE;\r\n\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btVector3_setValue(StaticPlaneColliderShape._btNormal, -normal.x, normal.y, normal.z);\r\n\t\tthis._btShape = bt.btStaticPlaneShape_create(StaticPlaneColliderShape._btNormal, offset);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: StaticPlaneColliderShape = new StaticPlaneColliderShape(this._normal, this._offset);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Quaternion } from \"../../math/Quaternion\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\n\r\n/**\r\n * <code>CompoundColliderShape</code> 类用于创建盒子形状碰撞器。\r\n */\r\nexport class CompoundColliderShape extends ColliderShape {\r\n\t/**@internal */\r\n\tprivate static _btVector3One: number;\r\n\t/**@internal */\r\n\tprivate static _btTransform: number;\r\n\t/**@internal */\r\n\tprivate static _btOffset: number;\r\n\t/**@internal */\r\n\tprivate static _btRotation: number;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tCompoundColliderShape._btVector3One = bt.btVector3_create(1, 1, 1);\r\n\t\tCompoundColliderShape._btTransform = bt.btTransform_create();\r\n\t\tCompoundColliderShape._btOffset = bt.btVector3_create(0, 0, 0);\r\n\t\tCompoundColliderShape._btRotation = bt.btQuaternion_create(0, 0, 0, 1);\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _childColliderShapes: ColliderShape[] = [];\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>CompoundColliderShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._type = ColliderShape.SHAPETYPES_COMPOUND;\r\n\t\tthis._btShape = ILaya3D.Physics3D._bullet.btCompoundShape_create();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _clearChildShape(shape: ColliderShape): void {\r\n\t\tshape._attatched = false;\r\n\t\tshape._compoundParent = null;\r\n\t\tshape._indexInCompound = -1;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_addReference(): void {\r\n\t\t//TODO:\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_removeReference(): void {\r\n\t\t//TODO:\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateChildTransform(shape: ColliderShape): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar offset: Vector3 = shape.localOffset;\r\n\t\tvar rotation: Quaternion = shape.localRotation;\r\n\t\tvar btOffset: number = ColliderShape._btVector30;\r\n\t\tvar btQuaternion: number = ColliderShape._btQuaternion0;\r\n\t\tvar btTransform: number = ColliderShape._btTransform0;\r\n\t\tbt.btVector3_setValue(btOffset, -offset.x, offset.y, offset.z);\r\n\t\tbt.btQuaternion_setValue(btQuaternion, -rotation.x, rotation.y, rotation.z, -rotation.w);\r\n\t\tbt.btTransform_setOrigin(btTransform, btOffset);\r\n\t\tbt.btTransform_setRotation(btTransform, btQuaternion);\r\n\t\tbt.btCompoundShape_updateChildTransform(this._btShape, shape._indexInCompound, btTransform, true);\r\n\t}\r\n\r\n\t/**\r\n\t * 添加子碰撞器形状。\r\n\t * @param\tshape 子碰撞器形状。\r\n\t */\r\n\taddChildShape(shape: ColliderShape): void {\r\n\t\tif (shape._attatched)\r\n\t\t\tthrow \"CompoundColliderShape: this shape has attatched to other entity.\";\r\n\r\n\t\tshape._attatched = true;\r\n\t\tshape._compoundParent = this;\r\n\t\tshape._indexInCompound = this._childColliderShapes.length;\r\n\t\tthis._childColliderShapes.push(shape);\r\n\t\tvar offset: Vector3 = shape.localOffset;\r\n\t\tvar rotation: Quaternion = shape.localRotation;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btVector3_setValue(CompoundColliderShape._btOffset, -offset.x, offset.y, offset.z);\r\n\t\tbt.btQuaternion_setValue(CompoundColliderShape._btRotation, -rotation.x, rotation.y, rotation.z, -rotation.w);\r\n\t\tbt.btTransform_setOrigin(CompoundColliderShape._btTransform, CompoundColliderShape._btOffset);\r\n\t\tbt.btTransform_setRotation(CompoundColliderShape._btTransform, CompoundColliderShape._btRotation);\r\n\r\n\t\tvar btScale: number = bt.btCollisionShape_getLocalScaling(this._btShape);\r\n\t\tbt.btCollisionShape_setLocalScaling(this._btShape, CompoundColliderShape._btVector3One);\r\n\t\tbt.btCompoundShape_addChildShape(this._btShape, CompoundColliderShape._btTransform, shape._btShape);\r\n\t\tbt.btCollisionShape_setLocalScaling(this._btShape, btScale);\r\n\r\n\t\t(this._attatchedCollisionObject) && (this._attatchedCollisionObject.colliderShape = this);//修改子Shape需要重新赋值父Shape以及将物理精灵重新加入物理世界等操作\r\n\t}\r\n\r\n\t/**\r\n\t * 移除子碰撞器形状。\r\n\t * @param\tshape 子碰撞器形状。\r\n\t */\r\n\tremoveChildShape(shape: ColliderShape): void {\r\n\t\tif (shape._compoundParent === this) {\r\n\t\t\tvar index: number = shape._indexInCompound;\r\n\t\t\tthis._clearChildShape(shape);\r\n\t\t\tvar endShape: ColliderShape = this._childColliderShapes[this._childColliderShapes.length - 1];\r\n\t\t\tendShape._indexInCompound = index;\r\n\t\t\tthis._childColliderShapes[index] = endShape;\r\n\t\t\tthis._childColliderShapes.pop();\r\n\t\t\tILaya3D.Physics3D._bullet.btCompoundShape_removeChildShapeByIndex(this._btShape, index);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 清空子碰撞器形状。\r\n\t */\r\n\tclearChildShape(): void {\r\n\t\tfor (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++) {\r\n\t\t\tthis._clearChildShape(this._childColliderShapes[i]);\r\n\t\t\tILaya3D.Physics3D._bullet.btCompoundShape_removeChildShapeByIndex(this._btShape, 0);\r\n\t\t}\r\n\t\tthis._childColliderShapes.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取子形状数量。\r\n\t * @return\r\n\t */\r\n\tgetChildShapeCount(): number {\r\n\t\treturn this._childColliderShapes.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destCompoundColliderShape: CompoundColliderShape = (<CompoundColliderShape>destObject);\r\n\t\tdestCompoundColliderShape.clearChildShape();\r\n\t\tfor (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++)\r\n\t\t\tdestCompoundColliderShape.addChildShape(this._childColliderShapes[i].clone());\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: CompoundColliderShape = new CompoundColliderShape();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tfor (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++) {\r\n\t\t\tvar childShape: ColliderShape = this._childColliderShapes[i];\r\n\t\t\tif (childShape._referenceCount === 0)\r\n\t\t\t\tchildShape.destroy();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Event } from \"../../events/Event\";\r\nimport { EventDispatcher } from \"../../events/EventDispatcher\";\r\nimport { AnimationTransform3D } from \"../animation/AnimationTransform3D\";\r\nimport { MathUtils3D } from \"../math/MathUtils3D\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Quaternion } from \"../math/Quaternion\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { Matrix3x3 } from \"../math/Matrix3x3\";\r\n\r\n/**\r\n * <code>Transform3D</code> 类用于实现3D变换。\r\n */\r\nexport class Transform3D extends EventDispatcher {\r\n\t/** @internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempQuaternion0: Quaternion = new Quaternion();\r\n\t/** @internal */\r\n\tprivate static _tempMatrix0: Matrix4x4 = new Matrix4x4();\r\n\t/** @internal */\r\n\tprivate static _tempMatrix3x30: Matrix3x3 = new Matrix3x3();\r\n\t/** @internal */\r\n\tprivate static _tempMatrix3x31: Matrix3x3 = new Matrix3x3();\r\n\t/** @internal */\r\n\tprivate static _tempMatrix3x32: Matrix3x3 = new Matrix3x3();\r\n\t/** @internal */\r\n\tprivate static _tempMatrix3x33: Matrix3x3 = new Matrix3x3();\r\n\r\n\t/**@internal */\r\n\tstatic TRANSFORM_LOCALQUATERNION: number = 0x01;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_LOCALEULER: number = 0x02;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_LOCALMATRIX: number = 0x04;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDPOSITION: number = 0x08;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDQUATERNION: number = 0x10;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDSCALE: number = 0x20;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDMATRIX: number = 0x40;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDEULER: number = 0x80;\r\n\r\n\t/**@internal */\r\n\tprivate static _angleToRandin: number = 180 / Math.PI;\r\n\r\n\t/** @internal */\r\n\tprivate _owner: Sprite3D;\r\n\t/** @internal */\r\n\tprivate _localPosition: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprivate _localRotation: Quaternion = new Quaternion(0, 0, 0, 1);\r\n\t/** @internal */\r\n\tprivate _localScale: Vector3 = new Vector3(1, 1, 1);\r\n\t/**@internal */\r\n\tprivate _localRotationEuler: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprivate _localMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/** @internal */\r\n\tprivate _position: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprivate _rotation: Quaternion = new Quaternion(0, 0, 0, 1);\r\n\t/** @internal */\r\n\tprivate _scale: Vector3 = new Vector3(1, 1, 1);\r\n\t/**@internal */\r\n\tprivate _rotationEuler: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprivate _worldMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/** @internal */\r\n\tprivate _children: Transform3D[] = null;\r\n\r\n\t/** @internal */\r\n\t_parent: Transform3D = null;\r\n\t/**@internal */\r\n\t_dummy: AnimationTransform3D = null;\r\n\t/**@internal */\r\n\t_transformFlag: number = 0;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _isFrontFaceInvert(): boolean {\r\n\t\tvar scale: Vector3 = this.getWorldLossyScale();\r\n\t\tvar isInvert: boolean = scale.x < 0;\r\n\t\t(scale.y < 0) && (isInvert = !isInvert);\r\n\t\t(scale.z < 0) && (isInvert = !isInvert);\r\n\t\treturn isInvert;\r\n\t}\r\n\r\n\t/**\r\n\t * 所属精灵。\r\n\t */\r\n\tget owner(): Sprite3D {\r\n\t\treturn this._owner;\r\n\t}\r\n\r\n\t/**\r\n\t * 世界矩阵是否需要更新。\r\n\t */\r\n\tget worldNeedUpdate(): boolean {\r\n\t\treturn this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX);\r\n\t}\r\n\r\n\t/**\r\n\t * 局部位置X轴分量。\r\n\t */\r\n\tget localPositionX(): number {\r\n\t\treturn this._localPosition.x;\r\n\t}\r\n\r\n\tset localPositionX(x: number) {\r\n\t\tthis._localPosition.x = x;\r\n\t\tthis.localPosition = this._localPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部位置Y轴分量。\r\n\t */\r\n\tget localPositionY(): number {\r\n\t\treturn this._localPosition.y;\r\n\t}\r\n\r\n\tset localPositionY(y: number) {\r\n\t\tthis._localPosition.y = y;\r\n\t\tthis.localPosition = this._localPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部位置Z轴分量。\r\n\t */\r\n\tget localPositionZ(): number {\r\n\t\treturn this._localPosition.z;\r\n\t}\r\n\r\n\tset localPositionZ(z: number) {\r\n\t\tthis._localPosition.z = z;\r\n\t\tthis.localPosition = this._localPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部位置。\r\n\t */\r\n\tget localPosition(): Vector3 {\r\n\t\treturn this._localPosition;\r\n\t}\r\n\r\n\tset localPosition(value: Vector3) {\r\n\t\tif (this._localPosition !== value)\r\n\t\t\tvalue.cloneTo(this._localPosition);\r\n\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, true);\r\n\t\tthis._onWorldPositionTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转四元数X分量。\r\n\t */\r\n\tget localRotationX(): number {\r\n\t\treturn this.localRotation.x;\r\n\t}\r\n\r\n\tset localRotationX(x: number) {\r\n\t\tthis._localRotation.x = x;\r\n\t\tthis.localRotation = this._localRotation;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转四元数Y分量。\r\n\t */\r\n\tget localRotationY(): number {\r\n\t\treturn this.localRotation.y;\r\n\t}\r\n\r\n\tset localRotationY(y: number) {\r\n\t\tthis._localRotation.y = y;\r\n\t\tthis.localRotation = this._localRotation;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转四元数Z分量。\r\n\t */\r\n\tget localRotationZ(): number {\r\n\t\treturn this.localRotation.z;\r\n\t}\r\n\r\n\tset localRotationZ(z: number) {\r\n\t\tthis._localRotation.z = z;\r\n\t\tthis.localRotation = this._localRotation;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转四元数W分量。\r\n\t */\r\n\tget localRotationW(): number {\r\n\t\treturn this.localRotation.w;\r\n\t}\r\n\r\n\tset localRotationW(w: number) {\r\n\t\tthis._localRotation.w = w;\r\n\t\tthis.localRotation = this._localRotation;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转。\r\n\t */\r\n\tget localRotation(): Quaternion {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION)) {\r\n\t\t\tvar eulerE: Vector3 = this._localRotationEuler;\r\n\t\t\tQuaternion.createFromYawPitchRoll(eulerE.y / Transform3D._angleToRandin, eulerE.x / Transform3D._angleToRandin, eulerE.z / Transform3D._angleToRandin, this._localRotation);\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION, false);\r\n\t\t}\r\n\t\treturn this._localRotation;\r\n\t}\r\n\r\n\tset localRotation(value: Quaternion) {\r\n\t\tif (this._localRotation !== value)\r\n\t\t\tvalue.cloneTo(this._localRotation);\r\n\t\tthis._localRotation.normalize(this._localRotation);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER | Transform3D.TRANSFORM_LOCALMATRIX, true);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION, false);\r\n\t\tthis._onWorldRotationTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * 局部缩放X。\r\n\t */\r\n\tget localScaleX(): number {\r\n\t\treturn this._localScale.x;\r\n\t}\r\n\r\n\tset localScaleX(value: number) {\r\n\t\tthis._localScale.x = value;\r\n\t\tthis.localScale = this._localScale;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部缩放Y。\r\n\t */\r\n\tget localScaleY(): number {\r\n\t\treturn this._localScale.y;\r\n\t}\r\n\r\n\tset localScaleY(value: number) {\r\n\t\tthis._localScale.y = value;\r\n\t\tthis.localScale = this._localScale;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部缩放Z。\r\n\t */\r\n\tget localScaleZ(): number {\r\n\t\treturn this._localScale.z;\r\n\t}\r\n\r\n\tset localScaleZ(value: number) {\r\n\t\tthis._localScale.z = value;\r\n\t\tthis.localScale = this._localScale;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部缩放。\r\n\t */\r\n\tget localScale(): Vector3 {\r\n\t\treturn this._localScale;\r\n\t}\r\n\r\n\tset localScale(value: Vector3) {\r\n\t\tif (this._localScale !== value)\r\n\t\t\tvalue.cloneTo(this._localScale);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, true);\r\n\t\tthis._onWorldScaleTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * 局部空间的X轴欧拉角。\r\n\t */\r\n\tget localRotationEulerX(): number {\r\n\t\treturn this.localRotationEuler.x;\r\n\t}\r\n\r\n\tset localRotationEulerX(value: number) {\r\n\t\tthis._localRotationEuler.x = value;\r\n\t\tthis.localRotationEuler = this._localRotationEuler;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部空间的Y轴欧拉角。\r\n\t */\r\n\tget localRotationEulerY(): number {\r\n\t\treturn this.localRotationEuler.y;\r\n\t}\r\n\r\n\tset localRotationEulerY(value: number) {\r\n\t\tthis._localRotationEuler.y = value;\r\n\t\tthis.localRotationEuler = this._localRotationEuler;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部空间的Z轴欧拉角。\r\n\t */\r\n\tget localRotationEulerZ(): number {\r\n\t\treturn this.localRotationEuler.z;\r\n\t}\r\n\r\n\tset localRotationEulerZ(value: number) {\r\n\t\tthis._localRotationEuler.z = value;\r\n\t\tthis.localRotationEuler = this._localRotationEuler;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部空间欧拉角。\r\n\t */\r\n\tget localRotationEuler(): Vector3 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALEULER)) {\r\n\t\t\tthis._localRotation.getYawPitchRoll(Transform3D._tempVector30);\r\n\t\t\tvar euler: Vector3 = Transform3D._tempVector30;\r\n\t\t\tvar localRotationEuler: Vector3 = this._localRotationEuler;\r\n\t\t\tlocalRotationEuler.x = euler.y * Transform3D._angleToRandin;\r\n\t\t\tlocalRotationEuler.y = euler.x * Transform3D._angleToRandin;\r\n\t\t\tlocalRotationEuler.z = euler.z * Transform3D._angleToRandin;\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER, false);\r\n\t\t}\r\n\t\treturn this._localRotationEuler;\r\n\t}\r\n\r\n\tset localRotationEuler(value: Vector3) {\r\n\t\tif (this._localRotationEuler !== value)\r\n\t\t\tvalue.cloneTo(this._localRotationEuler);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER, false);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION | Transform3D.TRANSFORM_LOCALMATRIX, true);\r\n\t\tthis._onWorldRotationTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * 局部矩阵。\r\n\t */\r\n\tget localMatrix(): Matrix4x4 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX)) {\r\n\t\t\tMatrix4x4.createAffineTransformation(this._localPosition, this.localRotation, this._localScale, this._localMatrix);\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, false);\r\n\t\t}\r\n\t\treturn this._localMatrix;\r\n\t}\r\n\r\n\tset localMatrix(value: Matrix4x4) {\r\n\t\tif (this._localMatrix !== value)\r\n\t\t\tvalue.cloneTo(this._localMatrix);\r\n\t\tthis._localMatrix.decomposeTransRotScale(this._localPosition, this._localRotation, this._localScale);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER, true);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, false);\r\n\t\tthis._onWorldTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * 世界位置。\r\n\t */\r\n\tget position(): Vector3 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)) {\r\n\t\t\tif (this._parent != null) {\r\n\t\t\t\tvar worldMatE = this.worldMatrix.elements;\r\n\t\t\t\tthis._position.x = worldMatE[12];\r\n\t\t\t\tthis._position.y = worldMatE[13];\r\n\t\t\t\tthis._position.z = worldMatE[14];\r\n\t\t\t} else {\r\n\t\t\t\tthis._localPosition.cloneTo(this._position);\r\n\t\t\t}\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION, false);\r\n\t\t}\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tset position(value: Vector3) {\r\n\t\tif (this._parent != null) {\r\n\t\t\tvar parentInvMat: Matrix4x4 = Transform3D._tempMatrix0;\r\n\t\t\tthis._parent.worldMatrix.invert(parentInvMat);\r\n\t\t\tVector3.transformCoordinate(value, parentInvMat, this._localPosition);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalue.cloneTo(this._localPosition);\r\n\t\t}\r\n\t\tthis.localPosition = this._localPosition;\r\n\t\tif (this._position !== value)\r\n\t\t\tvalue.cloneTo(this._position);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION, false);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 世界旋转。\r\n\t */\r\n\tget rotation(): Quaternion {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION)) {\r\n\t\t\tif (this._parent != null)\r\n\t\t\t\tQuaternion.multiply(this._parent.rotation, this.localRotation, this._rotation);//使用localRotation不使用_localRotation,内部需要计算\r\n\t\t\telse\r\n\t\t\t\tthis.localRotation.cloneTo(this._rotation);\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION, false);\r\n\t\t}\r\n\t\treturn this._rotation;\r\n\t}\r\n\r\n\tset rotation(value: Quaternion) {\r\n\t\tif (this._parent != null) {\r\n\t\t\tthis._parent.rotation.invert(Transform3D._tempQuaternion0);\r\n\t\t\tQuaternion.multiply(Transform3D._tempQuaternion0, value, this._localRotation);\r\n\t\t} else {\r\n\t\t\tvalue.cloneTo(this._localRotation);\r\n\t\t}\r\n\t\tthis.localRotation = this._localRotation;\r\n\t\tif (value !== this._rotation)\r\n\t\t\tvalue.cloneTo(this._rotation);\r\n\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 世界空间的旋转角度，顺序为x、y、z。\r\n\t */\r\n\tget rotationEuler(): Vector3 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)) {\r\n\t\t\tthis.rotation.getYawPitchRoll(Transform3D._tempVector30);//使用rotation属性,可能需要更新\r\n\t\t\tvar eulerE: Vector3 = Transform3D._tempVector30;\r\n\t\t\tvar rotationEulerE: Vector3 = this._rotationEuler;\r\n\t\t\trotationEulerE.x = eulerE.y * Transform3D._angleToRandin;\r\n\t\t\trotationEulerE.y = eulerE.x * Transform3D._angleToRandin;\r\n\t\t\trotationEulerE.z = eulerE.z * Transform3D._angleToRandin;\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDEULER, false);\r\n\t\t}\r\n\t\treturn this._rotationEuler;\r\n\t}\r\n\r\n\tset rotationEuler(value: Vector3) {\r\n\t\tQuaternion.createFromYawPitchRoll(value.y / Transform3D._angleToRandin, value.x / Transform3D._angleToRandin, value.z / Transform3D._angleToRandin, this._rotation);\r\n\t\tthis.rotation = this._rotation;\r\n\t\tif (this._rotationEuler !== value)\r\n\t\t\tvalue.cloneTo(this._rotationEuler);\r\n\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDEULER, false);\r\n\t}\r\n\r\n\t/**\r\n\t * 世界矩阵。\r\n\t */\r\n\tget worldMatrix(): Matrix4x4 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX)) {\r\n\t\t\tif (this._parent != null)\r\n\t\t\t\tMatrix4x4.multiply(this._parent.worldMatrix, this.localMatrix, this._worldMatrix);\r\n\t\t\telse\r\n\t\t\t\tthis.localMatrix.cloneTo(this._worldMatrix);\r\n\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX, false);\r\n\t\t}\r\n\t\treturn this._worldMatrix;\r\n\t}\r\n\r\n\tset worldMatrix(value: Matrix4x4) {\r\n\t\tif (this._parent === null) {\r\n\t\t\tvalue.cloneTo(this._localMatrix);\r\n\t\t} else {\r\n\t\t\tthis._parent.worldMatrix.invert(this._localMatrix);\r\n\t\t\tMatrix4x4.multiply(this._localMatrix, value, this._localMatrix);\r\n\t\t}\r\n\t\tthis.localMatrix = this._localMatrix;\r\n\t\tif (this._worldMatrix !== value)\r\n\t\t\tvalue.cloneTo(this._worldMatrix);\r\n\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX, false);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Transform3D</code> 实例。\r\n\t * @param owner 所属精灵。\r\n\t */\r\n\tconstructor(owner: Sprite3D) {\r\n\t\tsuper();\r\n\t\tthis._owner = owner;\r\n\t\tthis._children = [];\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION | Transform3D.TRANSFORM_LOCALEULER | Transform3D.TRANSFORM_LOCALMATRIX, false);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER | Transform3D.TRANSFORM_WORLDSCALE | Transform3D.TRANSFORM_WORLDMATRIX, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getScaleMatrix(): Matrix3x3 {\r\n\t\tvar invRotation: Quaternion = Transform3D._tempQuaternion0;\r\n\t\tvar invRotationMat: Matrix3x3 = Transform3D._tempMatrix3x30;\r\n\t\tvar worldRotScaMat: Matrix3x3 = Transform3D._tempMatrix3x31;\r\n\t\tvar scaMat: Matrix3x3 = Transform3D._tempMatrix3x32;\r\n\t\tMatrix3x3.createFromMatrix4x4(this.worldMatrix, worldRotScaMat)\r\n\t\tthis.rotation.invert(invRotation);\r\n\t\tMatrix3x3.createRotationQuaternion(invRotation, invRotationMat);\r\n\t\tMatrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);\r\n\t\treturn scaMat;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setTransformFlag(type: number, value: boolean): void {\r\n\t\tif (value)\r\n\t\t\tthis._transformFlag |= type;\r\n\t\telse\r\n\t\t\tthis._transformFlag &= ~type;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getTransformFlag(type: number): boolean {\r\n\t\treturn (this._transformFlag & type) != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setParent(value: Transform3D): void {\r\n\t\tif (this._parent !== value) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tvar parentChilds: Transform3D[] = this._parent._children;\r\n\t\t\t\tvar index: number = parentChilds.indexOf(this);\r\n\t\t\t\tparentChilds.splice(index, 1);\r\n\t\t\t}\r\n\t\t\tif (value) {\r\n\t\t\t\tvalue._children.push(this);\r\n\t\t\t\t(value) && (this._onWorldTransform());\r\n\t\t\t}\r\n\t\t\tthis._parent = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _onWorldPositionRotationTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++)\r\n\t\t\t\tthis._children[i]._onWorldPositionRotationTransform();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _onWorldPositionScaleTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDSCALE, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++)\r\n\t\t\t\tthis._children[i]._onWorldPositionScaleTransform();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _onWorldPositionTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++)\r\n\t\t\t\tthis._children[i]._onWorldPositionTransform();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _onWorldRotationTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++)\r\n\t\t\t\tthis._children[i]._onWorldPositionRotationTransform();//父节点旋转发生变化，子节点的世界位置和旋转都需要更新\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _onWorldScaleTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDSCALE, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++)\r\n\t\t\t\tthis._children[i]._onWorldPositionScaleTransform();//父节点缩放发生变化，子节点的世界位置和缩放都需要更新\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_onWorldTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER | Transform3D.TRANSFORM_WORLDSCALE, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++)\r\n\t\t\t\tthis._children[i]._onWorldTransform();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 平移变换。\r\n\t * @param \ttranslation 移动距离。\r\n\t * @param \tisLocal 是否局部空间。\r\n\t */\r\n\ttranslate(translation: Vector3, isLocal: boolean = true): void {\r\n\t\tif (isLocal) {\r\n\t\t\tMatrix4x4.createFromQuaternion(this.localRotation, Transform3D._tempMatrix0);\r\n\t\t\tVector3.transformCoordinate(translation, Transform3D._tempMatrix0, Transform3D._tempVector30);\r\n\t\t\tVector3.add(this.localPosition, Transform3D._tempVector30, this._localPosition);\r\n\t\t\tthis.localPosition = this._localPosition;\r\n\t\t} else {\r\n\t\t\tVector3.add(this.position, translation, this._position);\r\n\t\t\tthis.position = this._position;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 旋转变换。\r\n\t * @param \trotations 旋转幅度。\r\n\t * @param \tisLocal 是否局部空间。\r\n\t * @param \tisRadian 是否弧度制。\r\n\t */\r\n\trotate(rotation: Vector3, isLocal: boolean = true, isRadian: boolean = true): void {\r\n\t\tvar rot: Vector3;\r\n\t\tif (isRadian) {\r\n\t\t\trot = rotation;\r\n\t\t} else {\r\n\t\t\tVector3.scale(rotation, Math.PI / 180.0, Transform3D._tempVector30);\r\n\t\t\trot = Transform3D._tempVector30;\r\n\t\t}\r\n\r\n\t\tQuaternion.createFromYawPitchRoll(rot.y, rot.x, rot.z, Transform3D._tempQuaternion0);\r\n\t\tif (isLocal) {\r\n\t\t\tQuaternion.multiply(this._localRotation, Transform3D._tempQuaternion0, this._localRotation);\r\n\t\t\tthis.localRotation = this._localRotation;\r\n\t\t} else {\r\n\t\t\tQuaternion.multiply(Transform3D._tempQuaternion0, this.rotation, this._rotation);\r\n\t\t\tthis.rotation = this._rotation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取向前方向。\r\n\t * @param 前方向。\r\n\t */\r\n\tgetForward(forward: Vector3): void {\r\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\r\n\t\tforward.x = -worldMatElem[8];\r\n\t\tforward.y = -worldMatElem[9];\r\n\t\tforward.z = -worldMatElem[10];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取向上方向。\r\n\t * @param 上方向。\r\n\t */\r\n\tgetUp(up: Vector3): void {\r\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\r\n\t\tup.x = worldMatElem[4];\r\n\t\tup.y = worldMatElem[5];\r\n\t\tup.z = worldMatElem[6];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取向右方向。\r\n\t * @param 右方向。\r\n\t */\r\n\tgetRight(right: Vector3): void {\r\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\r\n\t\tright.x = worldMatElem[0];\r\n\t\tright.y = worldMatElem[1];\r\n\t\tright.z = worldMatElem[2];\r\n\t}\r\n\r\n\t/**\r\n\t * 观察目标位置。\r\n\t * @param\ttarget 观察目标。\r\n\t * @param\tup 向上向量。\r\n\t * @param\tisLocal 是否局部空间。\r\n\t */\r\n\tlookAt(target: Vector3, up: Vector3, isLocal: boolean = false): void {\r\n\t\tvar eye: Vector3;\r\n\t\tif (isLocal) {\r\n\t\t\teye = this._localPosition;\r\n\t\t\tif (Math.abs(eye.x - target.x) < MathUtils3D.zeroTolerance && Math.abs(eye.y - target.y) < MathUtils3D.zeroTolerance && Math.abs(eye.z - target.z) < MathUtils3D.zeroTolerance)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tQuaternion.lookAt(this._localPosition, target, up, this._localRotation);\r\n\t\t\tthis._localRotation.invert(this._localRotation);\r\n\t\t\tthis.localRotation = this._localRotation;\r\n\t\t} else {\r\n\t\t\tvar worldPosition: Vector3 = this.position;\r\n\t\t\teye = worldPosition;\r\n\t\t\tif (Math.abs(eye.x - target.x) < MathUtils3D.zeroTolerance && Math.abs(eye.y - target.y) < MathUtils3D.zeroTolerance && Math.abs(eye.z - target.z) < MathUtils3D.zeroTolerance)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tQuaternion.lookAt(worldPosition, target, up, this._rotation);\r\n\t\t\tthis._rotation.invert(this._rotation);\r\n\t\t\tthis.rotation = this._rotation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 世界缩放。\r\n\t * 某种条件下获取该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用Vector3正确表示,必须使用Matrix3x3矩阵才能正确表示。\r\n\t * @return\t世界缩放。\r\n\t */\r\n\tgetWorldLossyScale(): Vector3 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tif (this._parent !== null) {\r\n\t\t\t\tvar scaMatE = this._getScaleMatrix().elements;\r\n\t\t\t\tthis._scale.x = scaMatE[0];\r\n\t\t\t\tthis._scale.y = scaMatE[4];\r\n\t\t\t\tthis._scale.z = scaMatE[8];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._localScale.cloneTo(this._scale);\r\n\t\t\t}\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE, false);\r\n\t\t}\r\n\t\treturn this._scale;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置世界缩放。\r\n\t * 某种条件下设置该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用Vector3正确表示,必须使用Matrix3x3矩阵才能正确表示。\r\n\t * @return\t世界缩放。\r\n\t */\r\n\tsetWorldLossyScale(value: Vector3) {\r\n\t\tif (this._parent !== null) {\r\n\t\t\tvar scaleMat: Matrix3x3 = Transform3D._tempMatrix3x33;\r\n\t\t\tvar localScaleMat: Matrix3x3 = Transform3D._tempMatrix3x33;\r\n\t\t\tvar localScaleMatE: Float32Array = localScaleMat.elements;\r\n\t\t\tvar parInvScaleMat: Matrix3x3 = this._parent._getScaleMatrix();\r\n\t\t\tparInvScaleMat.invert(parInvScaleMat);\r\n\t\t\tMatrix3x3.createFromScaling(value, scaleMat);\r\n\t\t\tMatrix3x3.multiply(parInvScaleMat, scaleMat, localScaleMat);\r\n\t\t\tthis._localScale.x = localScaleMatE[0];\r\n\t\t\tthis._localScale.y = localScaleMatE[4];\r\n\t\t\tthis._localScale.z = localScaleMatE[8];\r\n\t\t} else {\r\n\t\t\tvalue.cloneTo(this._localScale);\r\n\t\t}\r\n\t\tthis.localScale = this._localScale;\r\n\t\tif (this._scale !== value)\r\n\t\t\tvalue.cloneTo(this._scale);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE, false);\r\n\t}\r\n\r\n\t//----------------------------------------Discard-------------------------------------------------\r\n\t/**\r\n\t * @deprecated\r\n\t */\r\n\tget scale(): Vector3 {\r\n\t\tconsole.warn(\"Transfrm3D: discard function,please use getWorldLossyScale instead.\");\r\n\t\treturn this.getWorldLossyScale();\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t */\r\n\tset scale(value: Vector3) {\r\n\t\tconsole.warn(\"Transfrm3D: discard function,please use setWorldLossyScale instead.\");\r\n\t\tthis.setWorldLossyScale(value);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Vector3 } from \"../math/Vector3\"\r\nimport { PhysicsComponent } from \"../physics/PhysicsComponent\"\r\n\r\n\t\r\n\t/**\r\n\t * <code>Physics</code> 类用于简单物理检测。\r\n\t */\r\n\texport class Physics3DUtils {\r\n\t\t static COLLISIONFILTERGROUP_DEFAULTFILTER:number = 0x1;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_STATICFILTER:number = 0x2;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_KINEMATICFILTER:number = 0x4;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_DEBRISFILTER:number = 0x8;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_SENSORTRIGGER:number = 0x10;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_CHARACTERFILTER:number = 0x20;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER1:number = 0x40;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER2:number = 0x80;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER3:number = 0x100;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER4:number = 0x200;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER5:number = 0x400;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER6:number = 0x800;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER7:number = 0x1000;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER8:number = 0x2000;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER9:number = 0x4000;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER10:number = 0x8000;\r\n\t\t\r\n\t\t static COLLISIONFILTERGROUP_ALLFILTER:number = -1;\r\n\t\t\r\n\t\t/**重力值。*/\r\n\t\t static gravity:Vector3 = new Vector3(0, -9.81, 0);\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个 <code>Physics</code> 实例。\r\n\t\t */\r\n\t\tconstructor(){\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 是否忽略两个碰撞器的碰撞检测。\r\n\t\t * @param\tcollider1 碰撞器一。\r\n\t\t * @param\tcollider2 碰撞器二。\r\n\t\t * @param\tignore 是否忽略。\r\n\t\t */\r\n\t\t static setColliderCollision(collider1:PhysicsComponent, collider2:PhysicsComponent, collsion:boolean):void {\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取是否忽略两个碰撞器的碰撞检测。\r\n\t\t * @param\tcollider1 碰撞器一。\r\n\t\t * @param\tcollider2 碰撞器二。\r\n\t\t * @return\t是否忽略。\r\n\t\t */\r\n\t\t static getIColliderCollision(collider1:PhysicsComponent, collider2:PhysicsComponent):boolean {\r\n\t\t\t//return collider1._ignoreCollisonMap[collider2.id] ? true : false;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","import { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\n\r\n/**\r\n * <code>BoxColliderShape</code> 类用于创建盒子形状碰撞器。\r\n */\r\nexport class BoxColliderShape extends ColliderShape {\r\n\t/** @internal */\r\n\tprivate static _btSize: number;\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __init__(): void {\r\n\t\tBoxColliderShape._btSize = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _sizeX: number;\r\n\t/**@internal */\r\n\tprivate _sizeY: number;\r\n\t/**@internal */\r\n\tprivate _sizeZ: number;\r\n\r\n\t/**\r\n\t * X轴尺寸。\r\n\t */\r\n\tget sizeX(): number {\r\n\t\treturn this._sizeX;\r\n\t}\r\n\r\n\t/**\r\n\t * Y轴尺寸。\r\n\t */\r\n\tget sizeY(): number {\r\n\t\treturn this._sizeY;\r\n\t}\r\n\r\n\t/**\r\n\t * Z轴尺寸。\r\n\t */\r\n\tget sizeZ(): number {\r\n\t\treturn this._sizeZ;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>BoxColliderShape</code> 实例。\r\n\t * @param sizeX 盒子X轴尺寸。\r\n\t * @param sizeY 盒子Y轴尺寸。\r\n\t * @param sizeZ 盒子Z轴尺寸。\r\n\t */\r\n\tconstructor(sizeX: number = 1.0, sizeY: number = 1.0, sizeZ: number = 1.0) {\r\n\r\n\t\tsuper();\r\n\t\tthis._sizeX = sizeX;\r\n\t\tthis._sizeY = sizeY;\r\n\t\tthis._sizeZ = sizeZ;\r\n\t\tthis._type = ColliderShape.SHAPETYPES_BOX;\r\n\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btVector3_setValue(BoxColliderShape._btSize, sizeX / 2, sizeY / 2, sizeZ / 2);\r\n\t\tthis._btShape = bt.btBoxShape_create(BoxColliderShape._btSize);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: BoxColliderShape = new BoxColliderShape(this._sizeX, this._sizeY, this._sizeZ);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n\r\n","import { Vector3 } from \"../../math/Vector3\";\r\nimport { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\n\r\n/**\r\n * <code>CapsuleColliderShape</code> 类用于创建胶囊形状碰撞器。\r\n */\r\nexport class CapsuleColliderShape extends ColliderShape {\r\n\t/** @internal */\r\n\tpublic static _tempVector30: Vector3 = new Vector3();\r\n\r\n\t/**@internal */\r\n\tprivate _radius: number;\r\n\t/**@internal */\r\n\tprivate _length: number;\r\n\t/**@internal */\r\n\tprivate _orientation: number;\r\n\r\n\t/**\r\n\t * 半径。\r\n\t */\r\n\tget radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\t/**\r\n\t * 长度。\r\n\t */\r\n\tget length(): number {\r\n\t\treturn this._length;\r\n\t}\r\n\r\n\t/**\r\n\t * 方向。\r\n\t */\r\n\tget orientation(): number {\r\n\t\treturn this._orientation;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>CapsuleColliderShape</code> 实例。\r\n\t * @param 半径。\r\n\t * @param 高(包含半径)。\r\n\t * @param orientation 胶囊体方向。\r\n\t */\r\n\tconstructor(radius: number = 0.5, length: number = 1.25, orientation: number = ColliderShape.SHAPEORIENTATION_UPY) {\r\n\r\n\t\tsuper();\r\n\t\tthis._radius = radius;\r\n\t\tthis._length = length;\r\n\t\tthis._orientation = orientation;\r\n\t\tthis._type = ColliderShape.SHAPETYPES_CAPSULE;\r\n\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tswitch (orientation) {\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\r\n\t\t\t\tthis._btShape = bt.btCapsuleShapeX_create(radius, length - radius * 2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\r\n\t\t\t\tthis._btShape = bt.btCapsuleShape_create(radius, length - radius * 2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\r\n\t\t\t\tthis._btShape = bt.btCapsuleShapeZ_create(radius, length - radius * 2);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"CapsuleColliderShape:unknown orientation.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_setScale(value: Vector3): void {\r\n\t\tvar fixScale: Vector3 = CapsuleColliderShape._tempVector30;\r\n\t\tswitch (this.orientation) {\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\r\n\t\t\t\tfixScale.x = value.x;\r\n\t\t\t\tfixScale.y = fixScale.z = Math.max(value.y, value.z);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\r\n\t\t\t\tfixScale.y = value.y;\r\n\t\t\t\tfixScale.x = fixScale.z = Math.max(value.x, value.z);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\r\n\t\t\t\tfixScale.z = value.z;\r\n\t\t\t\tfixScale.x = fixScale.y = Math.max(value.x, value.y);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"CapsuleColliderShape:unknown orientation.\";\r\n\t\t}\r\n\t\tsuper._setScale(fixScale);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: CapsuleColliderShape = new CapsuleColliderShape(this._radius, this._length, this._orientation);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\n\r\n/**\r\n * <code>ConeColliderShape</code> 类用于创建圆柱碰撞器。\r\n */\r\nexport class ConeColliderShape extends ColliderShape {\r\n\tprivate _orientation: number;\r\n\tprivate _radius: number = 1;\r\n\tprivate _height: number = 0.5;\r\n\r\n\t/**\r\n\t * 半径。\r\n\t */\r\n\tget radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\t/**\r\n\t * 高度。\r\n\t */\r\n\tget height(): number {\r\n\t\treturn this._height;\r\n\t}\r\n\r\n\t/**\r\n\t * 方向。\r\n\t */\r\n\tget orientation(): number {\r\n\t\treturn this._orientation;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>ConeColliderShape</code> 实例。\r\n\t * @param height 高。\r\n\t * @param radius 半径。\r\n\t */\r\n\tconstructor(radius: number = 0.5, height: number = 1.0, orientation: number = ColliderShape.SHAPEORIENTATION_UPY) {\r\n\t\tsuper();\r\n\t\tthis._radius = radius;\r\n\t\tthis._height = height;\r\n\t\tthis._orientation = orientation;\r\n\t\tthis._type = ColliderShape.SHAPETYPES_CYLINDER;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tswitch (orientation) {\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\r\n\t\t\t\tthis._btShape = bt.btConeShapeX_create(radius, height);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\r\n\t\t\t\tthis._btShape = bt.btConeShape_create(radius, height);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\r\n\t\t\t\tthis._btShape = bt.btConeShapeZ_create(radius, height);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"ConeColliderShape:unknown orientation.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: ConeColliderShape = new ConeColliderShape(this._radius, this._height, this._orientation);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\n\r\n/**\r\n * <code>CylinderColliderShape</code> 类用于创建圆柱碰撞器。\r\n */\r\nexport class CylinderColliderShape extends ColliderShape {\r\n\t/** @internal */\r\n\tprivate static _btSize: number;\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __init__(): void {\r\n\t\tCylinderColliderShape._btSize = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\r\n\t}\r\n\r\n\tprivate _orientation: number;\r\n\tprivate _radius: number = 1;\r\n\tprivate _height: number = 0.5;\r\n\r\n\t/**\r\n\t * 半径。\r\n\t */\r\n\tget radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\t/**\r\n\t * 高度。\r\n\t */\r\n\tget height(): number {\r\n\t\treturn this._height;\r\n\t}\r\n\r\n\t/**\r\n\t * 方向。\r\n\t */\r\n\tget orientation(): number {\r\n\t\treturn this._orientation;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>CylinderColliderShape</code> 实例。\r\n\t * @param height 高。\r\n\t * @param radius 半径。\r\n\t */\r\n\tconstructor(radius: number = 0.5, height: number = 1.0, orientation: number = ColliderShape.SHAPEORIENTATION_UPY) {\r\n\t\tsuper();\r\n\t\tthis._radius = radius;\r\n\t\tthis._height = height;\r\n\t\tthis._orientation = orientation;\r\n\t\tthis._type = ColliderShape.SHAPETYPES_CYLINDER;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tswitch (orientation) {\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\r\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, height / 2, radius, radius);\r\n\t\t\t\tthis._btShape = bt.btCylinderShapeX_create(CylinderColliderShape._btSize);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\r\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, radius, height / 2, radius);\r\n\t\t\t\tthis._btShape = bt.btCylinderShape_create(CylinderColliderShape._btSize);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\r\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, radius, radius, height / 2);\r\n\t\t\t\tthis._btShape = bt.btCylinderShapeZ_create(CylinderColliderShape._btSize);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"CapsuleColliderShape:unknown orientation.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: CylinderColliderShape = new CylinderColliderShape(this._radius, this._height, this._orientation);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Vector3 } from \"../../math/Vector3\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\n\r\n/**\r\n * <code>MeshColliderShape</code> 类用于创建网格碰撞器。\r\n */\r\nexport class MeshColliderShape extends ColliderShape {\r\n\t/** @internal */\r\n\tprivate _mesh: Mesh = null;\r\n\t/** @internal */\r\n\tprivate _convex: boolean = false;\r\n\r\n\t/**\r\n\t * 网格。\r\n\t */\r\n\tget mesh(): Mesh {\r\n\t\treturn this._mesh;\r\n\t}\r\n\r\n\tset mesh(value: Mesh) {\r\n\t\tif (this._mesh !== value) {\r\n\t\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t\tif (this._mesh) {\r\n\t\t\t\tbt.btCollisionShape_destroy(this._btShape);\r\n\t\t\t}\r\n\t\t\tif (value) {\r\n\t\t\t\tthis._btShape = bt.btGImpactMeshShape_create(value._getPhysicMesh());\r\n\t\t\t\tbt.btGImpactShapeInterface_updateBound(this._btShape);\r\n\t\t\t}\r\n\t\t\tthis._mesh = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 是否使用凸多边形。\r\n\t */\r\n\tget convex(): boolean {\r\n\t\treturn this._convex;\r\n\t}\r\n\r\n\tset convex(value: boolean) {\r\n\t\tthis._convex = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>MeshColliderShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_setScale(value: Vector3): void {\r\n\t\tif (this._compoundParent) {//TODO:待查,这里有问题\r\n\t\t\tthis.updateLocalTransformations();//TODO:\r\n\t\t} else {\r\n\t\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t\tbt.btVector3_setValue(ColliderShape._btScale, value.x, value.y, value.z);\r\n\t\t\tbt.btCollisionShape_setLocalScaling(this._btShape, ColliderShape._btScale);\r\n\t\t\tbt.btGImpactShapeInterface_updateBound(this._btShape);//更新缩放后需要更新包围体,有性能损耗\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destMeshCollider: MeshColliderShape = (<MeshColliderShape>destObject);\r\n\t\tdestMeshCollider.convex = this._convex;\r\n\t\tdestMeshCollider.mesh = this._mesh;\r\n\t\tsuper.cloneTo(destObject);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: MeshColliderShape = new MeshColliderShape();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._btShape) {\r\n\t\t\tILaya3D.Physics3D._bullet.btCollisionShape_destroy(this._btShape);\r\n\t\t\tthis._btShape = null;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\n\r\n/**\r\n * <code>SphereColliderShape</code> 类用于创建球形碰撞器。\r\n */\r\nexport class SphereColliderShape extends ColliderShape {\r\n\t/** @internal */\r\n\tprivate _radius: number;\r\n\r\n\t/**\r\n\t * 半径。\r\n\t */\r\n\tget radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>SphereColliderShape</code> 实例。\r\n\t * @param radius 半径。\r\n\t */\r\n\tconstructor(radius: number = 0.5) {//TODO:球形旋转无效，需要优化\r\n\r\n\t\tsuper();\r\n\t\tthis._radius = radius;\r\n\t\tthis._type = ColliderShape.SHAPETYPES_SPHERE;\r\n\r\n\t\tthis._btShape = ILaya3D.Physics3D._bullet.btSphereShape_create(radius);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: SphereColliderShape = new SphereColliderShape(this._radius);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","\r\nimport { Component } from \"../../components/Component\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\nimport { Transform3D } from \"../core/Transform3D\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Quaternion } from \"../math/Quaternion\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Physics3DUtils } from \"../utils/Physics3DUtils\";\r\nimport { PhysicsSimulation } from \"./PhysicsSimulation\";\r\nimport { BoxColliderShape } from \"./shape/BoxColliderShape\";\r\nimport { CapsuleColliderShape } from \"./shape/CapsuleColliderShape\";\r\nimport { ColliderShape } from \"./shape/ColliderShape\";\r\nimport { CompoundColliderShape } from \"./shape/CompoundColliderShape\";\r\nimport { ConeColliderShape } from \"./shape/ConeColliderShape\";\r\nimport { CylinderColliderShape } from \"./shape/CylinderColliderShape\";\r\nimport { MeshColliderShape } from \"./shape/MeshColliderShape\";\r\nimport { SphereColliderShape } from \"./shape/SphereColliderShape\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\n\r\n/**\r\n * <code>PhysicsComponent</code> 类用于创建物理组件的父类。\r\n */\r\nexport class PhysicsComponent extends Component {\r\n\t/** @internal */\r\n\tstatic ACTIVATIONSTATE_ACTIVE_TAG: number = 1;\r\n\t/** @internal */\r\n\tstatic ACTIVATIONSTATE_ISLAND_SLEEPING: number = 2;\r\n\t/** @internal */\r\n\tstatic ACTIVATIONSTATE_WANTS_DEACTIVATION: number = 3;\r\n\t/** @internal */\r\n\tstatic ACTIVATIONSTATE_DISABLE_DEACTIVATION: number = 4;\r\n\t/** @internal */\r\n\tstatic ACTIVATIONSTATE_DISABLE_SIMULATION: number = 5;\r\n\r\n\t/** @internal */\r\n\tstatic COLLISIONFLAGS_STATIC_OBJECT: number = 1;\r\n\t/** @internal */\r\n\tstatic COLLISIONFLAGS_KINEMATIC_OBJECT: number = 2;\r\n\t/** @internal */\r\n\tstatic COLLISIONFLAGS_NO_CONTACT_RESPONSE: number = 4;\r\n\t/** @internal */\r\n\tstatic COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK: number = 8;//this allows per-triangle material (friction/restitution)\r\n\t/** @internal */\r\n\tstatic COLLISIONFLAGS_CHARACTER_OBJECT: number = 16;\r\n\t/** @internal */\r\n\tstatic COLLISIONFLAGS_DISABLE_VISUALIZE_OBJECT: number = 32;//disable debug drawing\r\n\t/** @internal */\r\n\tstatic COLLISIONFLAGS_DISABLE_SPU_COLLISION_PROCESSING: number = 64;//disable parallel/SPU processing\r\n\r\n\t/** @internal */\r\n\tprotected static _tempVector30: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprotected static _tempQuaternion0: Quaternion = new Quaternion();\r\n\t/** @internal */\r\n\tprotected static _tempQuaternion1: Quaternion = new Quaternion();\r\n\t/** @internal */\r\n\tprotected static _tempMatrix4x40: Matrix4x4 = new Matrix4x4();\r\n\t/** @internal */\r\n\tprotected static _btVector30: number;\r\n\t/** @internal */\r\n\tprotected static _btQuaternion0: number;\r\n\r\n\t/** @internal */\r\n\tstatic _physicObjectsMap: any = {};\r\n\t/** @internal */\r\n\tstatic _addUpdateList: boolean = true;\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __init__(): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tPhysicsComponent._btVector30 = bt.btVector3_create(0, 0, 0);\r\n\t\tPhysicsComponent._btQuaternion0 = bt.btQuaternion_create(0, 0, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _createAffineTransformationArray(tranX: number, tranY: number, tranZ: number, rotX: number, rotY: number, rotZ: number, rotW: number, scale: Float32Array, outE: Float32Array): void {\r\n\r\n\t\tvar x2: number = rotX + rotX, y2: number = rotY + rotY, z2: number = rotZ + rotZ;\r\n\t\tvar xx: number = rotX * x2, xy: number = rotX * y2, xz: number = rotX * z2, yy: number = rotY * y2, yz: number = rotY * z2, zz: number = rotZ * z2;\r\n\t\tvar wx: number = rotW * x2, wy: number = rotW * y2, wz: number = rotW * z2, sx: number = scale[0], sy: number = scale[1], sz: number = scale[2];\r\n\r\n\t\toutE[0] = (1 - (yy + zz)) * sx;\r\n\t\toutE[1] = (xy + wz) * sx;\r\n\t\toutE[2] = (xz - wy) * sx;\r\n\t\toutE[3] = 0;\r\n\t\toutE[4] = (xy - wz) * sy;\r\n\t\toutE[5] = (1 - (xx + zz)) * sy;\r\n\t\toutE[6] = (yz + wx) * sy;\r\n\t\toutE[7] = 0;\r\n\t\toutE[8] = (xz + wy) * sz;\r\n\t\toutE[9] = (yz - wx) * sz;\r\n\t\toutE[10] = (1 - (xx + yy)) * sz;\r\n\t\toutE[11] = 0;\r\n\t\toutE[12] = tranX;\r\n\t\toutE[13] = tranY;\r\n\t\toutE[14] = tranZ;\r\n\t\toutE[15] = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _creatShape(shapeData: any): ColliderShape {\r\n\t\tvar colliderShape: ColliderShape;\r\n\t\tswitch (shapeData.type) {\r\n\t\t\tcase \"BoxColliderShape\":\r\n\t\t\t\tvar sizeData: any[] = shapeData.size;\r\n\t\t\t\tcolliderShape = sizeData ? new BoxColliderShape(sizeData[0], sizeData[1], sizeData[2]) : new BoxColliderShape();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SphereColliderShape\":\r\n\t\t\t\tcolliderShape = new SphereColliderShape(shapeData.radius);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"CapsuleColliderShape\":\r\n\t\t\t\tcolliderShape = new CapsuleColliderShape(shapeData.radius, shapeData.height, shapeData.orientation);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"MeshColliderShape\":\r\n\t\t\t\tvar meshCollider: MeshColliderShape = new MeshColliderShape();\r\n\t\t\t\tshapeData.mesh && (meshCollider.mesh = Loader.getRes(shapeData.mesh));\r\n\t\t\t\tcolliderShape = meshCollider;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ConeColliderShape\":\r\n\t\t\t\tcolliderShape = new ConeColliderShape(shapeData.radius, shapeData.height, shapeData.orientation);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"CylinderColliderShape\":\r\n\t\t\t\tcolliderShape = new CylinderColliderShape(shapeData.radius, shapeData.height, shapeData.orientation);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"unknown shape type.\";\r\n\t\t}\r\n\r\n\t\tif (shapeData.center) {\r\n\t\t\tvar localOffset: Vector3 = colliderShape.localOffset;\r\n\t\t\tlocalOffset.fromArray(shapeData.center);\r\n\t\t\tcolliderShape.localOffset = localOffset;\r\n\t\t}\r\n\t\treturn colliderShape;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static physicVector3TransformQuat(source: Vector3, qx: number, qy: number, qz: number, qw: number, out: Vector3): void {\r\n\t\tvar x: number = source.x, y: number = source.y, z: number = source.z, ix: number = qw * x + qy * z - qz * y, iy: number = qw * y + qz * x - qx * z, iz: number = qw * z + qx * y - qy * x, iw: number = -qx * x - qy * y - qz * z;\r\n\t\tout.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n\t\tout.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n\t\tout.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static physicQuaternionMultiply(lx: number, ly: number, lz: number, lw: number, right: Quaternion, out: Quaternion): void {\r\n\t\tvar rx: number = right.x;\r\n\t\tvar ry: number = right.y;\r\n\t\tvar rz: number = right.z;\r\n\t\tvar rw: number = right.w;\r\n\t\tvar a: number = (ly * rz - lz * ry);\r\n\t\tvar b: number = (lz * rx - lx * rz);\r\n\t\tvar c: number = (lx * ry - ly * rx);\r\n\t\tvar d: number = (lx * rx + ly * ry + lz * rz);\r\n\t\tout.x = (lx * rw + rx * lw) + a;\r\n\t\tout.y = (ly * rw + ry * lw) + b;\r\n\t\tout.z = (lz * rw + rz * lw) + c;\r\n\t\tout.w = lw * rw - d;\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _restitution: number = 0.0;\r\n\t/** @internal */\r\n\tprivate _friction: number = 0.5;\r\n\t/** @internal */\r\n\tprivate _rollingFriction: number = 0.0;\r\n\t/** @internal */\r\n\tprivate _ccdMotionThreshold: number = 0.0;\r\n\t/** @internal */\r\n\tprivate _ccdSweptSphereRadius: number = 0.0;\r\n\r\n\t/** @internal */\r\n\tprotected _collisionGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER;\r\n\t/** @internal */\r\n\tprotected _canCollideWith: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;\r\n\t/** @internal */\r\n\tprotected _colliderShape: ColliderShape = null;\r\n\t/** @internal */\r\n\tprotected _transformFlag: number = 2147483647 /*int.MAX_VALUE*/;\r\n\t/** @internal */\r\n\tprotected _controlBySimulation: boolean = false;\r\n\r\n\t/** @internal */\r\n\t_btColliderObject: number;//TODO:不用声明,TODO:删除相关判断\r\n\t/** @internal */\r\n\t_simulation: PhysicsSimulation;\r\n\t/** @internal */\r\n\t_enableProcessCollisions: boolean = true;\r\n\t/** @internal */\r\n\t_inPhysicUpdateListIndex: number = -1;\r\n\r\n\t/** 是否可以缩放Shape。 */\r\n\tcanScaleShape: boolean = true;\r\n\r\n\t/**\r\n\t * 弹力。\r\n\t */\r\n\tget restitution(): number {\r\n\t\treturn this._restitution;\r\n\t}\r\n\r\n\tset restitution(value: number) {\r\n\t\tthis._restitution = value;\r\n\t\tthis._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setRestitution(this._btColliderObject, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 摩擦力。\r\n\t */\r\n\tget friction(): number {\r\n\t\treturn this._friction;\r\n\t}\r\n\r\n\tset friction(value: number) {\r\n\t\tthis._friction = value;\r\n\t\tthis._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setFriction(this._btColliderObject, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 滚动摩擦力。\r\n\t */\r\n\tget rollingFriction(): number {\r\n\t\treturn this._rollingFriction;\r\n\t}\r\n\r\n\tset rollingFriction(value: number) {\r\n\t\tthis._rollingFriction = value;\r\n\t\tthis._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setRollingFriction(this._btColliderObject, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 用于连续碰撞检测(CCD)的速度阈值,当物体移动速度小于该值时不进行CCD检测,防止快速移动物体(例如:子弹)错误的穿过其它物体,0表示禁止。\r\n\t */\r\n\tget ccdMotionThreshold(): number {\r\n\t\treturn this._ccdMotionThreshold;\r\n\t}\r\n\r\n\tset ccdMotionThreshold(value: number) {\r\n\t\tthis._ccdMotionThreshold = value;\r\n\t\tthis._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setCcdMotionThreshold(this._btColliderObject, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取用于进入连续碰撞检测(CCD)范围的球半径。\r\n\t */\r\n\tget ccdSweptSphereRadius(): number {\r\n\t\treturn this._ccdSweptSphereRadius;\r\n\t}\r\n\r\n\tset ccdSweptSphereRadius(value: number) {\r\n\t\tthis._ccdSweptSphereRadius = value;\r\n\t\tthis._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setCcdSweptSphereRadius(this._btColliderObject, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取是否激活。\r\n\t */\r\n\tget isActive(): boolean {\r\n\t\treturn this._btColliderObject ? ILaya3D.Physics3D._bullet.btCollisionObject_isActive(this._btColliderObject) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * 碰撞形状。\r\n\t */\r\n\tget colliderShape(): ColliderShape {\r\n\t\treturn this._colliderShape;\r\n\t}\r\n\r\n\tset colliderShape(value: ColliderShape) {\r\n\t\tvar lastColliderShape: ColliderShape = this._colliderShape;\r\n\t\tif (lastColliderShape) {\r\n\t\t\tlastColliderShape._attatched = false;\r\n\t\t\tlastColliderShape._attatchedCollisionObject = null;\r\n\t\t}\r\n\r\n\t\tthis._colliderShape = value;\r\n\t\tif (value) {\r\n\t\t\tif (value._attatched) {\r\n\t\t\t\tthrow \"PhysicsComponent: this shape has attatched to other entity.\";\r\n\t\t\t} else {\r\n\t\t\t\tvalue._attatched = true;\r\n\t\t\t\tvalue._attatchedCollisionObject = this;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._btColliderObject) {\r\n\t\t\t\tILaya3D.Physics3D._bullet.btCollisionObject_setCollisionShape(this._btColliderObject, value._btShape);\r\n\t\t\t\tvar canInSimulation: boolean = this._simulation && this._enabled;\r\n\t\t\t\t(canInSimulation && lastColliderShape) && (this._removeFromSimulation());//修改shape必须把Collison从物理世界中移除再重新添加\r\n\t\t\t\tthis._onShapeChange(value);//修改shape会计算惯性\r\n\t\t\t\tif (canInSimulation) {\r\n\t\t\t\t\tthis._derivePhysicsTransformation(true);\r\n\t\t\t\t\tthis._addToSimulation();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this._simulation && this._enabled)\r\n\t\t\t\tlastColliderShape && this._removeFromSimulation();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 模拟器。\r\n\t */\r\n\tget simulation(): PhysicsSimulation {\r\n\t\treturn this._simulation;\r\n\t}\r\n\r\n\t/**\r\n\t * 所属碰撞组。\r\n\t */\r\n\tget collisionGroup(): number {\r\n\t\treturn this._collisionGroup;\r\n\t}\r\n\r\n\tset collisionGroup(value: number) {\r\n\t\tif (this._collisionGroup !== value) {\r\n\t\t\tthis._collisionGroup = value;\r\n\t\t\tif (this._simulation && this._colliderShape && this._enabled) {\r\n\t\t\t\tthis._removeFromSimulation();\r\n\t\t\t\tthis._addToSimulation();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 可碰撞的碰撞组,基于位运算。\r\n\t */\r\n\tget canCollideWith(): number {\r\n\t\treturn this._canCollideWith;\r\n\t}\r\n\r\n\tset canCollideWith(value: number) {\r\n\t\tif (this._canCollideWith !== value) {\r\n\t\t\tthis._canCollideWith = value;\r\n\t\t\tif (this._simulation && this._colliderShape && this._enabled) {\r\n\t\t\t\tthis._removeFromSimulation();\r\n\t\t\t\tthis._addToSimulation();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>PhysicsComponent</code> 实例。\r\n\t * @param collisionGroup 所属碰撞组。\r\n\t * @param canCollideWith 可产生碰撞的碰撞组。\r\n\t */\r\n\tconstructor(collisionGroup: number, canCollideWith: number) {\r\n\t\tsuper();\r\n\t\tthis._collisionGroup = collisionGroup;\r\n\t\tthis._canCollideWith = canCollideWith;\r\n\t\tPhysicsComponent._physicObjectsMap[this.id] = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _parseShape(shapesData: any[]): void {\r\n\t\tvar shapeCount: number = shapesData.length;\r\n\t\tif (shapeCount === 1) {\r\n\t\t\tvar shape: ColliderShape = PhysicsComponent._creatShape(shapesData[0]);\r\n\t\t\tthis.colliderShape = shape;\r\n\t\t} else {\r\n\t\t\tvar compoundShape: CompoundColliderShape = new CompoundColliderShape();\r\n\t\t\tfor (var i: number = 0; i < shapeCount; i++) {\r\n\t\t\t\tshape = PhysicsComponent._creatShape(shapesData[i]);\r\n\t\t\t\tcompoundShape.addChildShape(shape);\r\n\t\t\t}\r\n\t\t\tthis.colliderShape = compoundShape;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _onScaleChange(scale: Vector3): void {\r\n\t\tthis._colliderShape._setScale(scale);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_onEnable(): void {\r\n\t\tthis._simulation = ((<Scene3D>this.owner._scene)).physicsSimulation;\r\n\t\tILaya3D.Physics3D._bullet.btCollisionObject_setContactProcessingThreshold(this._btColliderObject, 1e30);\r\n\t\tif (this._colliderShape) {\r\n\t\t\tthis._derivePhysicsTransformation(true);\r\n\t\t\tthis._addToSimulation();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _onDisable(): void {\r\n\t\tif (this._colliderShape) {\r\n\t\t\tthis._removeFromSimulation();\r\n\t\t\t(this._inPhysicUpdateListIndex !== -1) && (this._simulation._physicsUpdateList.remove(this));//销毁前一定会调用 _onDisable()\r\n\t\t}\r\n\t\tthis._simulation = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _onDestroy(): void {\r\n\t\tdelete PhysicsComponent._physicObjectsMap[this.id];\r\n\t\tILaya3D.Physics3D._bullet.btCollisionObject_destroy(this._btColliderObject);\r\n\t\tthis._colliderShape.destroy();\r\n\t\tsuper._onDestroy();\r\n\t\tthis._btColliderObject = null;\r\n\t\tthis._colliderShape = null;\r\n\t\tthis._simulation = null;\r\n\t\t(<Sprite3D>this.owner).transform.off(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_isValid(): boolean {\r\n\t\treturn this._simulation && this._colliderShape && this._enabled;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any): void {\r\n\t\t(data.collisionGroup != null) && (this.collisionGroup = data.collisionGroup);\r\n\t\t(data.canCollideWith != null) && (this.canCollideWith = data.canCollideWith);\r\n\t\t(data.ccdMotionThreshold != null) && (this.ccdMotionThreshold = data.ccdMotionThreshold);\r\n\t\t(data.ccdSweptSphereRadius != null) && (this.ccdSweptSphereRadius = data.ccdSweptSphereRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setTransformFlag(type: number, value: boolean): void {\r\n\t\tif (value)\r\n\t\t\tthis._transformFlag |= type;\r\n\t\telse\r\n\t\t\tthis._transformFlag &= ~type;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getTransformFlag(type: number): boolean {\r\n\t\treturn (this._transformFlag & type) != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addToSimulation(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removeFromSimulation(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * \t@internal\r\n\t */\r\n\t_derivePhysicsTransformation(force: boolean): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar btColliderObject: number = this._btColliderObject;\r\n\t\tvar btTransform: number = bt.btCollisionObject_getWorldTransform(btColliderObject);\r\n\t\tthis._innerDerivePhysicsTransformation(btTransform, force);\r\n\t\tbt.btCollisionObject_setWorldTransform(btColliderObject, btTransform);\r\n\t}\r\n\r\n\t/**\r\n\t * \t@internal\r\n\t *\t通过渲染矩阵更新物理矩阵。\r\n\t */\r\n\t_innerDerivePhysicsTransformation(physicTransformOut: number, force: boolean): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar transform: Transform3D = ((<Sprite3D>this.owner))._transform;\r\n\r\n\t\tif (force || this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)) {\r\n\t\t\tvar shapeOffset: Vector3 = this._colliderShape.localOffset;\r\n\t\t\tvar position: Vector3 = transform.position;\r\n\t\t\tvar btPosition: any = PhysicsComponent._btVector30;\r\n\t\t\tif (shapeOffset.x !== 0 || shapeOffset.y !== 0 || shapeOffset.z !== 0) {\r\n\t\t\t\tvar physicPosition: Vector3 = PhysicsComponent._tempVector30;\r\n\t\t\t\tvar worldMat: Matrix4x4 = transform.worldMatrix;\r\n\t\t\t\tVector3.transformCoordinate(shapeOffset, worldMat, physicPosition);\r\n\t\t\t\tbt.btVector3_setValue(btPosition, -physicPosition.x, physicPosition.y, physicPosition.z);\r\n\t\t\t} else {\r\n\t\t\t\tbt.btVector3_setValue(btPosition, -position.x, position.y, position.z);\r\n\t\t\t}\r\n\t\t\tbt.btTransform_setOrigin(physicTransformOut, btPosition);\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION, false);\r\n\t\t}\r\n\r\n\t\tif (force || this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION)) {\r\n\t\t\tvar shapeRotation: Quaternion = this._colliderShape.localRotation;\r\n\t\t\tvar btRotation: any = PhysicsComponent._btQuaternion0;\r\n\t\t\tvar rotation: Quaternion = transform.rotation;\r\n\t\t\tif (shapeRotation.x !== 0 || shapeRotation.y !== 0 || shapeRotation.z !== 0 || shapeRotation.w !== 1) {\r\n\t\t\t\tvar physicRotation: Quaternion = PhysicsComponent._tempQuaternion0;\r\n\t\t\t\tPhysicsComponent.physicQuaternionMultiply(rotation.x, rotation.y, rotation.z, rotation.w, shapeRotation, physicRotation);\r\n\t\t\t\tbt.btQuaternion_setValue(btRotation, -physicRotation.x, physicRotation.y, physicRotation.z, -physicRotation.w);\r\n\t\t\t} else {\r\n\t\t\t\tbt.btQuaternion_setValue(btRotation, -rotation.x, rotation.y, rotation.z, -rotation.w);\r\n\t\t\t}\r\n\t\t\tbt.btTransform_setRotation(physicTransformOut, btRotation);\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION, false);\r\n\t\t}\r\n\r\n\t\tif (force || this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tthis._onScaleChange(transform.getWorldLossyScale());\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 通过物理矩阵更新渲染矩阵。\r\n\t */\r\n\t_updateTransformComponent(physicsTransform: number): void {\r\n\t\t//TODO:Need Test!!! because _innerDerivePhysicsTransformation update position use worldMatrix,not(position rotation WorldLossyScale),maybe the center is no different.\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar colliderShape: ColliderShape = this._colliderShape;\r\n\t\tvar localOffset: Vector3 = colliderShape.localOffset;\r\n\t\tvar localRotation: Quaternion = colliderShape.localRotation;\r\n\r\n\t\tvar transform: Transform3D = (<Sprite3D>this.owner)._transform;\r\n\t\tvar position: Vector3 = transform.position;\r\n\t\tvar rotation: Quaternion = transform.rotation;\r\n\r\n\t\tvar btPosition: number = bt.btTransform_getOrigin(physicsTransform);\r\n\t\tvar btRotation: number = bt.btTransform_getRotation(physicsTransform);\r\n\r\n\t\tvar btRotX: number = -bt.btQuaternion_x(btRotation);\r\n\t\tvar btRotY: number = bt.btQuaternion_y(btRotation);\r\n\t\tvar btRotZ: number = bt.btQuaternion_z(btRotation);\r\n\t\tvar btRotW: number = -bt.btQuaternion_w(btRotation);\r\n\r\n\t\tif (localRotation.x !== 0 || localRotation.y !== 0 || localRotation.z !== 0 || localRotation.w !== 1) {\r\n\t\t\tvar invertShapeRotaion: Quaternion = PhysicsComponent._tempQuaternion0;\r\n\t\t\tlocalRotation.invert(invertShapeRotaion);\r\n\t\t\tPhysicsComponent.physicQuaternionMultiply(btRotX, btRotY, btRotZ, btRotW, invertShapeRotaion, rotation);\r\n\t\t} else {\r\n\t\t\trotation.x = btRotX;\r\n\t\t\trotation.y = btRotY;\r\n\t\t\trotation.z = btRotZ;\r\n\t\t\trotation.w = btRotW;\r\n\t\t}\r\n\t\ttransform.rotation = rotation;\r\n\r\n\t\tif (localOffset.x !== 0 || localOffset.y !== 0 || localOffset.z !== 0) {\r\n\t\t\tvar btScale: number = bt.btCollisionShape_getLocalScaling(colliderShape._btShape);\r\n\t\t\tvar rotShapePosition: Vector3 = PhysicsComponent._tempVector30;\r\n\t\t\trotShapePosition.x = localOffset.x * bt.btVector3_x(btScale);\r\n\t\t\trotShapePosition.y = localOffset.y * bt.btVector3_y(btScale);\r\n\t\t\trotShapePosition.z = localOffset.z * bt.btVector3_z(btScale);\r\n\t\t\tVector3.transformQuat(rotShapePosition, rotation, rotShapePosition);\r\n\t\t\tposition.x = -bt.btVector3_x(btPosition) - rotShapePosition.x;\r\n\t\t\tposition.y = bt.btVector3_y(btPosition) - rotShapePosition.y;\r\n\t\t\tposition.z = bt.btVector3_z(btPosition) - rotShapePosition.z;\r\n\t\t} else {\r\n\t\t\tposition.x = -bt.btVector3_x(btPosition);\r\n\t\t\tposition.y = bt.btVector3_y(btPosition);\r\n\t\t\tposition.z = bt.btVector3_z(btPosition);\r\n\t\t}\r\n\t\ttransform.position = position;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_onShapeChange(colShape: ColliderShape): void {\r\n\t\tvar btColObj: any = this._btColliderObject;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar flags: number = bt.btCollisionObject_getCollisionFlags(btColObj);\r\n\t\tif (colShape.needsCustomCollisionCallback) {\r\n\t\t\tif ((flags & PhysicsComponent.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK) === 0)\r\n\t\t\t\tbt.btCollisionObject_setCollisionFlags(btColObj, flags | PhysicsComponent.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK);\r\n\t\t} else {\r\n\t\t\tif ((flags & PhysicsComponent.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK) > 0)\r\n\t\t\t\tbt.btCollisionObject_setCollisionFlags(btColObj, flags ^ PhysicsComponent.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_onAdded(): void {\r\n\t\tthis.enabled = this._enabled;\r\n\t\tthis.restitution = this._restitution;\r\n\t\tthis.friction = this._friction;\r\n\t\tthis.rollingFriction = this._rollingFriction;\r\n\t\tthis.ccdMotionThreshold = this._ccdMotionThreshold;\r\n\t\tthis.ccdSweptSphereRadius = this._ccdSweptSphereRadius;\r\n\t\t(<Sprite3D>this.owner).transform.on(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_onTransformChanged(flag: number): void {\r\n\t\tif (PhysicsComponent._addUpdateList || !this._controlBySimulation) {//PhysicsComponent._addUpdateList = false is the stage of physic simulation.\r\n\t\t\tflag &= Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDSCALE;//过滤有用TRANSFORM标记\r\n\t\t\tif (flag) {\r\n\t\t\t\tthis._transformFlag |= flag;\r\n\t\t\t\tif (this._isValid() && this._inPhysicUpdateListIndex === -1)//_isValid()表示可使用\r\n\t\t\t\t\tthis._simulation._physicsUpdateList.add(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(dest: Component): void {\r\n\t\tvar destPhysicsComponent: PhysicsComponent = <PhysicsComponent>dest;\r\n\t\tdestPhysicsComponent.restitution = this._restitution;\r\n\t\tdestPhysicsComponent.friction = this._friction;\r\n\t\tdestPhysicsComponent.rollingFriction = this._rollingFriction;\r\n\t\tdestPhysicsComponent.ccdMotionThreshold = this._ccdMotionThreshold;\r\n\t\tdestPhysicsComponent.ccdSweptSphereRadius = this._ccdSweptSphereRadius;\r\n\t\tdestPhysicsComponent.collisionGroup = this._collisionGroup;\r\n\t\tdestPhysicsComponent.canCollideWith = this._canCollideWith;\r\n\t\tdestPhysicsComponent.canScaleShape = this.canScaleShape;\r\n\t\t(this._colliderShape) && (destPhysicsComponent.colliderShape = this._colliderShape.clone());\r\n\t}\r\n}\r\n\r\n","\r\n/**\r\n * <code>SingletonList</code> 类用于实现单例队列。\r\n */\r\nexport class SingletonList<T> {\r\n\t/**@internal [只读]*/\r\n\telements: Array<T> = [];\r\n\t/** @internal [只读]*/\r\n\tlength: number = 0;\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>SingletonList</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _add(element: T): void {\r\n\t\tif (this.length === this.elements.length)\r\n\t\t\tthis.elements.push(element);\r\n\t\telse\r\n\t\t\tthis.elements[this.length] = element;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tpublic add(element: T): void {\r\n\t\tif (this.length === this.elements.length)\r\n\t\t\tthis.elements.push(element);\r\n\t\telse\r\n\t\t\tthis.elements[this.length] = element;\r\n\t\tthis.length++;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { PhysicsComponent } from \"./PhysicsComponent\";\r\nimport { SingletonList } from \"../component/SingletonList\"\r\nimport { ISingletonElement } from \"../../resource/ISingletonElement\";\r\n\t\r\n\t/**\r\n\t * <code>PhysicsUpdateList</code> 类用于实现物理更新队列。\r\n\t */\r\n\texport class PhysicsUpdateList extends SingletonList<ISingletonElement> {\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个新的 <code>PhysicsUpdateList</code> 实例。\r\n\t\t */\r\n\t\tconstructor(){super();\r\n\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @internal\r\n\t\t */\r\n\t\t add(element:PhysicsComponent):void {\r\n\t\t\tvar index:number = element._inPhysicUpdateListIndex;\r\n\t\t\tif (index !== -1)\r\n\t\t\t\tthrow \"PhysicsUpdateList:element has  in  PhysicsUpdateList.\";\r\n\t\t\tthis._add(element);\r\n\t\t\telement._inPhysicUpdateListIndex = this.length++;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @internal\r\n\t\t */\r\n\t\t remove(element:PhysicsComponent):void {\r\n\t\t\tvar index:number = element._inPhysicUpdateListIndex;\r\n\t\t\tthis.length--;\r\n\t\t\tif (index !== this.length) {\r\n\t\t\t\tvar end:any = this.elements[this.length];\r\n\t\t\t\tthis.elements[index] = end;\r\n\t\t\t\tend._inPhysicUpdateListIndex = index;\r\n\t\t\t}\r\n\t\t\telement._inPhysicUpdateListIndex = -1;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","import { PhysicsComponent } from \"./PhysicsComponent\"\r\nimport { Vector3 } from \"../math/Vector3\"\r\n\r\n/**\r\n * <code>ContactPoint</code> 类用于创建物理碰撞信息。\r\n */\r\nexport class ContactPoint {\r\n\t/**@internal */\r\n\t_idCounter: number = 0;\r\n\r\n\t/**@internal */\r\n\t_id: number;\r\n\r\n\t/**碰撞器A。*/\r\n\tcolliderA: PhysicsComponent = null;\r\n\t/**碰撞器B。*/\r\n\tcolliderB: PhysicsComponent = null;\r\n\t/**距离。*/\r\n\tdistance: number = 0;\r\n\t/**法线。*/\r\n\tnormal: Vector3 = new Vector3();\r\n\t/**碰撞器A的碰撞点。*/\r\n\tpositionOnA: Vector3 = new Vector3();\r\n\t/**碰撞器B的碰撞点。*/\r\n\tpositionOnB: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * 创建一个 <code>ContactPoint</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._id = ++this._idCounter;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { PhysicsComponent } from \"./PhysicsComponent\"\r\n\timport { Vector3 } from \"../math/Vector3\"\r\n\t\r\n\t/**\r\n\t * <code>HitResult</code> 类用于实现射线检测或形状扫描的结果。\r\n\t */\r\n\texport class HitResult {\r\n\t\t/** 是否成功。 */\r\n\t\t succeeded:boolean = false;\r\n\t\t/** 发生碰撞的碰撞组件。*/\r\n\t\t collider:PhysicsComponent = null;\r\n\t\t/** 碰撞点。*/\r\n\t\t point:Vector3 = new Vector3();\r\n\t\t/** 碰撞法线。*/\r\n\t\t normal:Vector3 = new Vector3();\r\n\t\t/** 碰撞分数。 */\r\n\t\t hitFraction:number = 0;\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个 <code>HitResult</code> 实例。\r\n\t\t */\r\n\t\tconstructor(){\r\n\t\t\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","import { ContactPoint } from \"./ContactPoint\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\"\r\n\t\r\n\t/**\r\n\t * <code>Collision</code> 类用于创建物理碰撞信息。\r\n\t */\r\n\texport class Collision {\r\n\t\t/**@internal */\r\n\t\t _lastUpdateFrame:number = -2147483648/*int.MIN_VALUE*/;\r\n\t\t/**@internal */\r\n\t\t _updateFrame:number = -2147483648/*int.MIN_VALUE*/;\r\n\t\t/**@internal */\r\n\t\t _isTrigger:boolean = false;\r\n\t\t\r\n\t\t/**@internal */\r\n\t\t _colliderA:PhysicsComponent;\r\n\t\t/**@internal */\r\n\t\t _colliderB:PhysicsComponent;\r\n\t\t\r\n\t\t/**@readonly*/\r\n\t\t contacts:ContactPoint[] = [];\r\n\t\t/**@readonly*/\r\n\t\t other:PhysicsComponent;\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个 <code>Collision</code> 实例。\r\n\t\t */\r\n\t\tconstructor(){\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @internal\r\n\t\t */\r\n\t\t _setUpdateFrame(farme:number):void {\r\n\t\t\tthis._lastUpdateFrame = this._updateFrame;//TODO:为啥整两个\r\n\t\t\tthis._updateFrame = farme;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","import { ContactPoint } from \"./ContactPoint\";\r\nimport { HitResult } from \"./HitResult\";\r\nimport { Collision } from \"./Collision\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\";\r\n\r\n/**\r\n * <code>CollisionMap</code> 类用于实现碰撞组合实例图。\r\n */\r\nexport class CollisionTool {\r\n\t/**@internal\t*/\r\n\tprivate _hitResultsPoolIndex: number = 0;\r\n\t/**@internal\t*/\r\n\tprivate _hitResultsPool: HitResult[] = [];\r\n\t/**@internal\t*/\r\n\tprivate _contactPonintsPoolIndex: number = 0;\r\n\t/**@internal\t*/\r\n\tprivate _contactPointsPool: ContactPoint[] = [];\r\n\t/**@internal */\r\n\tprivate _collisionsPool: Collision[] = [];\r\n\r\n\t/**@internal */\r\n\tprivate _collisions: any = {};\r\n\r\n\t/**\r\n\t * 创建一个 <code>CollisionMap</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetHitResult(): HitResult {\r\n\t\tvar hitResult: HitResult = this._hitResultsPool[this._hitResultsPoolIndex++];\r\n\t\tif (!hitResult) {\r\n\t\t\thitResult = new HitResult();\r\n\t\t\tthis._hitResultsPool.push(hitResult);\r\n\t\t}\r\n\t\treturn hitResult;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trecoverAllHitResultsPool(): void {\r\n\t\tthis._hitResultsPoolIndex = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetContactPoints(): ContactPoint {\r\n\t\tvar contactPoint: ContactPoint = this._contactPointsPool[this._contactPonintsPoolIndex++];\r\n\t\tif (!contactPoint) {\r\n\t\t\tcontactPoint = new ContactPoint();\r\n\t\t\tthis._contactPointsPool.push(contactPoint);\r\n\t\t}\r\n\t\treturn contactPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trecoverAllContactPointsPool(): void {\r\n\t\tthis._contactPonintsPoolIndex = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetCollision(physicComponentA: PhysicsComponent, physicComponentB: PhysicsComponent): Collision {\r\n\t\tvar collision: Collision;\r\n\t\tvar idA: number = physicComponentA.id;\r\n\t\tvar idB: number = physicComponentB.id;\r\n\t\tvar subCollisionFirst: any = this._collisions[idA];\r\n\t\tif (subCollisionFirst)\r\n\t\t\tcollision = subCollisionFirst[idB];\r\n\t\tif (!collision) {\r\n\t\t\tif (!subCollisionFirst) {\r\n\t\t\t\tsubCollisionFirst = {};\r\n\t\t\t\tthis._collisions[idA] = subCollisionFirst;\r\n\t\t\t}\r\n\t\t\tcollision = this._collisionsPool.length === 0 ? new Collision() : this._collisionsPool.pop();\r\n\t\t\tcollision._colliderA = physicComponentA;\r\n\t\t\tcollision._colliderB = physicComponentB;\r\n\t\t\tsubCollisionFirst[idB] = collision;\r\n\t\t}\r\n\t\treturn collision;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trecoverCollision(collision: Collision): void {\r\n\t\tvar idA: number = collision._colliderA.id;\r\n\t\tvar idB: number = collision._colliderB.id;\r\n\t\tthis._collisions[idA][idB] = null;\r\n\t\tthis._collisionsPool.push(collision);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgarbageCollection(): void {//TODO:哪里调用\r\n\t\tthis._hitResultsPoolIndex = 0;\r\n\t\tthis._hitResultsPool.length = 0;\r\n\r\n\t\tthis._contactPonintsPoolIndex = 0;\r\n\t\tthis._contactPointsPool.length = 0;\r\n\r\n\t\tthis._collisionsPool.length = 0;\r\n\t\tfor (var subCollisionsKey in this._collisionsPool) {\r\n\t\t\tvar subCollisions: any = this._collisionsPool[subCollisionsKey];\r\n\t\t\tvar wholeDelete: boolean = true;\r\n\t\t\tfor (var collisionKey in subCollisions) {\r\n\t\t\t\tif (subCollisions[collisionKey])\r\n\t\t\t\t\twholeDelete = false;\r\n\t\t\t\telse\r\n\t\t\t\t\tdelete subCollisions[collisionKey];\r\n\t\t\t}\r\n\t\t\tif (wholeDelete)\r\n\t\t\t\tdelete this._collisionsPool[subCollisionsKey];\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n","import { Stat } from \"../../utils/Stat\";\r\nimport { Script3D } from \"../component/Script3D\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\nimport { Quaternion } from \"../math/Quaternion\";\r\nimport { Ray } from \"../math/Ray\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Physics3DUtils } from \"../utils/Physics3DUtils\";\r\nimport { CharacterController } from \"./CharacterController\";\r\nimport { PhysicsUpdateList } from \"./PhysicsUpdateList\";\r\nimport { Collision } from \"./Collision\";\r\nimport { CollisionTool } from \"./CollisionTool\";\r\nimport { ContactPoint } from \"./ContactPoint\";\r\nimport { HitResult } from \"./HitResult\";\r\nimport { PhysicsCollider } from \"./PhysicsCollider\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\";\r\nimport { PhysicsSettings } from \"./PhysicsSettings\";\r\nimport { PhysicsTriggerComponent } from \"./PhysicsTriggerComponent\";\r\nimport { Rigidbody3D } from \"./Rigidbody3D\";\r\nimport { ColliderShape } from \"./shape/ColliderShape\";\r\nimport { ConstraintComponent } from \"./constraints/ConstraintComponent\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\n\r\n/**\r\n * <code>Simulation</code> 类用于创建物理模拟器。\r\n */\r\nexport class PhysicsSimulation {\r\n\t/** @internal */\r\n\tstatic PHYSICSENGINEFLAGS_NONE: number = 0x0;\r\n\t/** @internal */\r\n\tstatic PHYSICSENGINEFLAGS_COLLISIONSONLY: number = 0x1;\r\n\t/** @internal */\r\n\tstatic PHYSICSENGINEFLAGS_SOFTBODYSUPPORT: number = 0x2;\r\n\t/** @internal */\r\n\tstatic PHYSICSENGINEFLAGS_MULTITHREADED: number = 0x4;\r\n\t/** @internal */\r\n\tstatic PHYSICSENGINEFLAGS_USEHARDWAREWHENPOSSIBLE: number = 0x8;\r\n\r\n\t/** @internal */\r\n\tstatic SOLVERMODE_RANDMIZE_ORDER: number = 1;\r\n\t/** @internal */\r\n\tstatic SOLVERMODE_FRICTION_SEPARATE: number = 2;\r\n\t/** @internal */\r\n\tstatic SOLVERMODE_USE_WARMSTARTING: number = 4;\r\n\t/** @internal */\r\n\tstatic SOLVERMODE_USE_2_FRICTION_DIRECTIONS: number = 16;\r\n\t/** @internal */\r\n\tstatic SOLVERMODE_ENABLE_FRICTION_DIRECTION_CACHING: number = 32;\r\n\t/** @internal */\r\n\tstatic SOLVERMODE_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION: number = 64;\r\n\t/** @internal */\r\n\tstatic SOLVERMODE_CACHE_FRIENDLY: number = 128;\r\n\t/** @internal */\r\n\tstatic SOLVERMODE_SIMD: number = 256;\r\n\t/** @internal */\r\n\tstatic SOLVERMODE_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS: number = 512;\r\n\t/** @internal */\r\n\tstatic SOLVERMODE_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS: number = 1024;\r\n\t/** @internal 射线回调模式*/\r\n\tstatic HITSRAYRESULTCALLBACK_FLAG_NONE = 0;\r\n\t/** @internal 射线回调模式 忽略反面,射线检测时，会忽略掉反面的三角形*/\r\n\tstatic HITSRAYRESULTCALLBACK_FLAG_FILTERBACKFACESS = 1;\r\n\t/** @internal 射线回调模式*/\r\n\tstatic HITSRAYRESULTCALLBACK_FLAG_KEEPUNFILIPPEDNORMAL = 2;\r\n\t/** @internal 射线回调模式*/\r\n\tstatic HITSRAYRESULTCALLBACK_FLAG_USESUBSIMPLEXCONVEXCASTRAYTEST = 4;\r\n\t/** @internal 射线回调模式*/\r\n\tstatic HITSRAYRESULTCALLBACK_FLAG_USEGJKCONVEXCASTRAYTEST = 8;\r\n\t/** @internal 射线回调模式*/\r\n\tstatic HITSRAYRESULTCALLBACK_FLAG_TERMINATOR = 0xffffffff;\r\n\t/** @internal */\r\n\tprivate static _btTempVector30: number;\r\n\t/** @internal */\r\n\tprivate static _btTempVector31: number;\r\n\t/** @internal */\r\n\tprivate static _btTempQuaternion0: number;\r\n\t/** @internal */\r\n\tprivate static _btTempQuaternion1: number;\r\n\t/** @internal */\r\n\tprivate static _btTempTransform0: number;\r\n\t/** @internal */\r\n\tprivate static _btTempTransform1: number;\r\n\t/** @internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\r\n\t/*是否禁用所有模拟器。*/\r\n\tstatic disableSimulation: boolean = false;\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __init__(): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tPhysicsSimulation._btTempVector30 = bt.btVector3_create(0, 0, 0);\r\n\t\tPhysicsSimulation._btTempVector31 = bt.btVector3_create(0, 0, 0);\r\n\t\tPhysicsSimulation._btTempQuaternion0 = bt.btQuaternion_create(0, 0, 0, 1);\r\n\t\tPhysicsSimulation._btTempQuaternion1 = bt.btQuaternion_create(0, 0, 0, 1);\r\n\t\tPhysicsSimulation._btTempTransform0 = bt.btTransform_create();\r\n\t\tPhysicsSimulation._btTempTransform1 = bt.btTransform_create();\r\n\t}\r\n\r\n\t/**\r\n\t * 创建限制刚体运动的约束条件。\r\n\t */\r\n\tstatic createConstraint(): void {//TODO: 两种重载函数\r\n\t\t//TODO:\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _btDiscreteDynamicsWorld: number;\r\n\t/** @internal */\r\n\tprivate _btCollisionWorld: number;\r\n\t/** @internal */\r\n\tprivate _btDispatcher: number;\r\n\t/** @internal */\r\n\tprivate _btCollisionConfiguration: number;\r\n\t/** @internal */\r\n\tprivate _btBroadphase: number;\r\n\t/** @internal */\r\n\tprivate _btSolverInfo: number;\r\n\t/** @internal */\r\n\tprivate _btDispatchInfo: number;\r\n\t/** @internal */\r\n\tprivate _gravity: Vector3 = new Vector3(0, -10, 0);\r\n\r\n\t/** @internal */\r\n\tprivate _btVector3Zero: number = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\r\n\t/** @internal */\r\n\tprivate _btDefaultQuaternion: number = ILaya3D.Physics3D._bullet.btQuaternion_create(0, 0, 0, -1);\r\n\t/** @internal */\r\n\tprivate _btClosestRayResultCallback: number;\r\n\t/** @internal */\r\n\tprivate _btAllHitsRayResultCallback: number;\r\n\t/** @internal */\r\n\tprivate _btClosestConvexResultCallback: number;\r\n\t/** @internal */\r\n\tprivate _btAllConvexResultCallback: number;\r\n\r\n\t/** @internal */\r\n\tprivate _collisionsUtils: CollisionTool = new CollisionTool();\r\n\t/** @internal */\r\n\tprivate _previousFrameCollisions: Collision[] = [];\r\n\t/** @internal */\r\n\tprivate _currentFrameCollisions: Collision[] = [];\r\n\t/** @internal */\r\n\tprivate _currentConstraint:any = {};\r\n\t/** @internal */\r\n\t_physicsUpdateList: PhysicsUpdateList = new PhysicsUpdateList();\r\n\t/**@internal\t*/\r\n\t_characters: CharacterController[] = [];\r\n\t/**@internal\t*/\r\n\t_updatedRigidbodies: number = 0;\r\n\r\n\t/**物理引擎在一帧中用于补偿减速的最大次数：模拟器每帧允许的最大模拟次数，如果引擎运行缓慢,可能需要增加该次数，否则模拟器会丢失“时间\",引擎间隔时间小于maxSubSteps*fixedTimeStep非常重要。*/\r\n\tmaxSubSteps: number = 1;\r\n\t/**物理模拟器帧的间隔时间:通过减少fixedTimeStep可增加模拟精度，默认是1.0 / 60.0。*/\r\n\tfixedTimeStep: number = 1.0 / 60.0;\r\n\r\n\t/**\r\n\t * 是否进行连续碰撞检测。\r\n\t */\r\n\tget continuousCollisionDetection(): boolean {\r\n\t\treturn ILaya3D.Physics3D._bullet.btCollisionWorld_get_m_useContinuous(this._btDispatchInfo);\r\n\t}\r\n\r\n\tset continuousCollisionDetection(value: boolean) {\r\n\t\tILaya3D.Physics3D._bullet.btCollisionWorld_set_m_useContinuous(this._btDispatchInfo, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取重力。\r\n\t */\r\n\tget gravity(): Vector3 {\r\n\t\tif (!this._btDiscreteDynamicsWorld)\r\n\t\t\tthrow \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n\t\treturn this._gravity;\r\n\t}\r\n\r\n\tset gravity(value: Vector3) {\r\n\t\tif (!this._btDiscreteDynamicsWorld)\r\n\t\t\tthrow \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n\r\n\t\tthis._gravity = value;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar btGravity: number = PhysicsSimulation._btTempVector30;\r\n\t\tbt.btVector3_setValue(btGravity, -value.x, value.y, value.z);//TODO:是否先get省一个变量\r\n\t\tbt.btDiscreteDynamicsWorld_setGravity(this._btDiscreteDynamicsWorld, btGravity);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget speculativeContactRestitution(): boolean {\r\n\t\tif (!this._btDiscreteDynamicsWorld)\r\n\t\t\tthrow \"Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n\t\treturn ILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution(this._btDiscreteDynamicsWorld);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset speculativeContactRestitution(value: boolean) {\r\n\t\tif (!this._btDiscreteDynamicsWorld)\r\n\t\t\tthrow \"Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n\t\tILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution(this._btDiscreteDynamicsWorld, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 创建一个 <code>Simulation</code> 实例。\r\n\t */\r\n\tconstructor(configuration: PhysicsSettings, flags: number = 0) {\r\n\t\tthis.maxSubSteps = configuration.maxSubSteps;\r\n\t\tthis.fixedTimeStep = configuration.fixedTimeStep;\r\n\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tthis._btCollisionConfiguration = bt.btDefaultCollisionConfiguration_create();\r\n\t\tthis._btDispatcher = bt.btCollisionDispatcher_create(this._btCollisionConfiguration);\r\n\t\tthis._btBroadphase = bt.btDbvtBroadphase_create();\r\n\t\tbt.btOverlappingPairCache_setInternalGhostPairCallback(bt.btDbvtBroadphase_getOverlappingPairCache(this._btBroadphase), bt.btGhostPairCallback_create());//this allows characters to have proper physics behavior\r\n\r\n\t\tvar conFlags: number = configuration.flags;\r\n\t\tif (conFlags & PhysicsSimulation.PHYSICSENGINEFLAGS_COLLISIONSONLY) {\r\n\t\t\tthis._btCollisionWorld = new bt.btCollisionWorld(this._btDispatcher, this._btBroadphase, this._btCollisionConfiguration);\r\n\t\t} else if (conFlags & PhysicsSimulation.PHYSICSENGINEFLAGS_SOFTBODYSUPPORT) {\r\n\t\t\tthrow \"PhysicsSimulation:SoftBody processing is not yet available\";\r\n\t\t} else {\r\n\t\t\tvar solver: number = bt.btSequentialImpulseConstraintSolver_create();\r\n\t\t\tthis._btDiscreteDynamicsWorld = bt.btDiscreteDynamicsWorld_create(this._btDispatcher, this._btBroadphase, solver, this._btCollisionConfiguration);\r\n\t\t\tthis._btCollisionWorld = this._btDiscreteDynamicsWorld;\r\n\t\t}\r\n\r\n\t\tif (this._btDiscreteDynamicsWorld) {\r\n\t\t\tthis._btSolverInfo = bt.btDynamicsWorld_getSolverInfo(this._btDiscreteDynamicsWorld); //we are required to keep this reference, or the GC will mess up\r\n\t\t\tthis._btDispatchInfo = bt.btCollisionWorld_getDispatchInfo(this._btDiscreteDynamicsWorld);\r\n\t\t}\r\n\r\n\t\tthis._btClosestRayResultCallback = bt.ClosestRayResultCallback_create(this._btVector3Zero, this._btVector3Zero);\r\n\t\tthis._btAllHitsRayResultCallback = bt.AllHitsRayResultCallback_create(this._btVector3Zero, this._btVector3Zero);\r\n\t\tthis._btClosestConvexResultCallback = bt.ClosestConvexResultCallback_create(this._btVector3Zero, this._btVector3Zero);\r\n\t\tthis._btAllConvexResultCallback = bt.AllConvexResultCallback_create(this._btVector3Zero, this._btVector3Zero);//TODO:是否优化C++\r\n\t\tthis.setHitsRayResultCallbackFlay();\r\n\t\tbt.btGImpactCollisionAlgorithm_RegisterAlgorithm(this._btDispatcher);//注册算法\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_simulate(deltaTime: number): void {\r\n\t\tthis._updatedRigidbodies = 0;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tif (this._btDiscreteDynamicsWorld)\r\n\t\t\tbt.btDiscreteDynamicsWorld_stepSimulation(this._btDiscreteDynamicsWorld, deltaTime, this.maxSubSteps, this.fixedTimeStep);\r\n\t\telse\r\n\t\t\tbt.PerformDiscreteCollisionDetection(this._btCollisionWorld);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_destroy(): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tif (this._btDiscreteDynamicsWorld) {\r\n\t\t\tbt.btCollisionWorld_destroy(this._btDiscreteDynamicsWorld);\r\n\t\t\tthis._btDiscreteDynamicsWorld = null;\r\n\t\t} else {\r\n\t\t\tbt.btCollisionWorld_destroy(this._btCollisionWorld);\r\n\t\t\tthis._btCollisionWorld = null;\r\n\t\t}\r\n\r\n\t\tbt.btDbvtBroadphase_destroy(this._btBroadphase);\r\n\t\tthis._btBroadphase = null;\r\n\t\tbt.btCollisionDispatcher_destroy(this._btDispatcher);\r\n\t\tthis._btDispatcher = null;\r\n\t\tbt.btDefaultCollisionConfiguration_destroy(this._btCollisionConfiguration);\r\n\t\tthis._btCollisionConfiguration = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addPhysicsCollider(component: PhysicsCollider, group: number, mask: number): void {\r\n\t\tILaya3D.Physics3D._bullet.btCollisionWorld_addCollisionObject(this._btCollisionWorld, component._btColliderObject, group, mask);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removePhysicsCollider(component: PhysicsCollider): void {\r\n\t\tILaya3D.Physics3D._bullet.btCollisionWorld_removeCollisionObject(this._btCollisionWorld, component._btColliderObject);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addRigidBody(rigidBody: Rigidbody3D, group: number, mask: number): void {\r\n\t\tif (!this._btDiscreteDynamicsWorld)\r\n\t\t\tthrow \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n\t\tILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_addRigidBody(this._btCollisionWorld, rigidBody._btColliderObject, group, mask);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removeRigidBody(rigidBody: Rigidbody3D): void {\r\n\t\tif (!this._btDiscreteDynamicsWorld)\r\n\t\t\tthrow \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n\t\tILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_removeRigidBody(this._btCollisionWorld, rigidBody._btColliderObject);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addCharacter(character: CharacterController, group: number, mask: number): void {\r\n\t\tif (!this._btDiscreteDynamicsWorld)\r\n\t\t\tthrow \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btCollisionWorld_addCollisionObject(this._btCollisionWorld, character._btColliderObject, group, mask);\r\n\t\tbt.btDynamicsWorld_addAction(this._btCollisionWorld, character._btKinematicCharacter);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removeCharacter(character: CharacterController): void {\r\n\t\tif (!this._btDiscreteDynamicsWorld)\r\n\t\t\tthrow \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btCollisionWorld_removeCollisionObject(this._btCollisionWorld, character._btColliderObject);\r\n\t\tbt.btDynamicsWorld_removeAction(this._btCollisionWorld, character._btKinematicCharacter);\r\n\t}\r\n\r\n\t/**\r\n\t * 射线检测第一个碰撞物体。\r\n\t * @param\tfrom 起始位置。\r\n\t * @param\tto 结束位置。\r\n\t * @param\tout 碰撞结果。\r\n\t * @param   collisonGroup 射线所属碰撞组。\r\n\t * @param   collisionMask 与射线可产生碰撞的组。\r\n\t * @return \t是否成功。\r\n\t */\r\n\traycastFromTo(from: Vector3, to: Vector3, out: HitResult = null, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar rayResultCall: number = this._btClosestRayResultCallback;\r\n\t\tvar rayFrom: number = PhysicsSimulation._btTempVector30;\r\n\t\tvar rayTo: number = PhysicsSimulation._btTempVector31;\r\n\t\tbt.btVector3_setValue(rayFrom, -from.x, from.y, from.z);\r\n\t\tbt.btVector3_setValue(rayTo, -to.x, to.y, to.z);\r\n\t\tbt.ClosestRayResultCallback_set_m_rayFromWorld(rayResultCall, rayFrom);\r\n\t\tbt.ClosestRayResultCallback_set_m_rayToWorld(rayResultCall, rayTo);\r\n\t\tbt.RayResultCallback_set_m_collisionFilterGroup(rayResultCall, collisonGroup);\r\n\t\tbt.RayResultCallback_set_m_collisionFilterMask(rayResultCall, collisionMask);\r\n\r\n\t\tbt.RayResultCallback_set_m_collisionObject(rayResultCall, null);//还原默认值\r\n\t\tbt.RayResultCallback_set_m_closestHitFraction(rayResultCall, 1);//还原默认值\r\n\t\tbt.btCollisionWorld_rayTest(this._btCollisionWorld, rayFrom, rayTo, rayResultCall);//TODO:out为空可优化,bullet内\r\n\t\tif (bt.RayResultCallback_hasHit(rayResultCall)) {\r\n\t\t\tif (out) {\r\n\t\t\t\tout.succeeded = true;\r\n\t\t\t\tout.collider = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.RayResultCallback_get_m_collisionObject(rayResultCall))];\r\n\t\t\t\tout.hitFraction = bt.RayResultCallback_get_m_closestHitFraction(rayResultCall);\r\n\t\t\t\tvar btPoint: number = bt.ClosestRayResultCallback_get_m_hitPointWorld(rayResultCall);\r\n\t\t\t\tvar point: Vector3 = out.point;\r\n\t\t\t\tpoint.x = -bt.btVector3_x(btPoint);\r\n\t\t\t\tpoint.y = bt.btVector3_y(btPoint);\r\n\t\t\t\tpoint.z = bt.btVector3_z(btPoint);\r\n\t\t\t\tvar btNormal: number = bt.ClosestRayResultCallback_get_m_hitNormalWorld(rayResultCall);\r\n\t\t\t\tvar normal: Vector3 = out.normal;\r\n\t\t\t\tnormal.x = -bt.btVector3_x(btNormal);\r\n\t\t\t\tnormal.y = bt.btVector3_y(btNormal);\r\n\t\t\t\tnormal.z = bt.btVector3_z(btNormal);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tif (out)\r\n\t\t\t\tout.succeeded = false;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 射线检测所有碰撞的物体。\r\n\t * @param\tfrom 起始位置。\r\n\t * @param\tto 结束位置。\r\n\t * @param\tout 碰撞结果[数组元素会被回收]。\r\n\t * @param   collisonGroup 射线所属碰撞组。\r\n\t * @param   collisionMask 与射线可产生碰撞的组。\r\n\t * @return \t是否成功。\r\n\t */\r\n\traycastAllFromTo(from: Vector3, to: Vector3, out: HitResult[], collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar rayResultCall: number = this._btAllHitsRayResultCallback;\r\n\t\tvar rayFrom: number = PhysicsSimulation._btTempVector30;\r\n\t\tvar rayTo: number = PhysicsSimulation._btTempVector31;\r\n\r\n\t\tout.length = 0;\r\n\t\tbt.btVector3_setValue(rayFrom, -from.x, from.y, from.z);\r\n\t\tbt.btVector3_setValue(rayTo, -to.x, to.y, to.z);\r\n\t\tbt.AllHitsRayResultCallback_set_m_rayFromWorld(rayResultCall, rayFrom);\r\n\t\tbt.AllHitsRayResultCallback_set_m_rayToWorld(rayResultCall, rayTo);\r\n\t\tbt.RayResultCallback_set_m_collisionFilterGroup(rayResultCall, collisonGroup);\r\n\t\tbt.RayResultCallback_set_m_collisionFilterMask(rayResultCall, collisionMask);\r\n\r\n\t\t//rayResultCall.set_m_collisionObject(null);//还原默认值\r\n\t\t//rayResultCall.set_m_closestHitFraction(1);//还原默认值\r\n\t\tvar collisionObjects: number = bt.AllHitsRayResultCallback_get_m_collisionObjects(rayResultCall);\r\n\t\tvar btPoints: number = bt.AllHitsRayResultCallback_get_m_hitPointWorld(rayResultCall);\r\n\t\tvar btNormals: number = bt.AllHitsRayResultCallback_get_m_hitNormalWorld(rayResultCall);\r\n\t\tvar btFractions: number = bt.AllHitsRayResultCallback_get_m_hitFractions(rayResultCall);\r\n\t\tbt.tBtCollisionObjectArray_clear(collisionObjects);//清空检测队列\r\n\t\tbt.tVector3Array_clear(btPoints);\r\n\t\tbt.tVector3Array_clear(btNormals);\r\n\t\tbt.tScalarArray_clear(btFractions);\r\n\t\tbt.btCollisionWorld_rayTest(this._btCollisionWorld, rayFrom, rayTo, rayResultCall);\r\n\t\tvar count: number = bt.tBtCollisionObjectArray_size(collisionObjects);\r\n\t\tif (count > 0) {\r\n\t\t\tthis._collisionsUtils.recoverAllHitResultsPool();\r\n\t\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\t\tvar hitResult: HitResult = this._collisionsUtils.getHitResult();\r\n\t\t\t\tout.push(hitResult);\r\n\t\t\t\thitResult.succeeded = true;\r\n\t\t\t\thitResult.collider = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.tBtCollisionObjectArray_at(collisionObjects, i))];\r\n\t\t\t\thitResult.hitFraction = bt.tScalarArray_at(btFractions, i);\r\n\t\t\t\tvar btPoint: number = bt.tVector3Array_at(btPoints, i);//取出后需要立即赋值,防止取出法线时被覆盖\r\n\t\t\t\tvar pointE: Vector3 = hitResult.point;\r\n\t\t\t\tpointE.x = -bt.btVector3_x(btPoint);\r\n\t\t\t\tpointE.y = bt.btVector3_y(btPoint);\r\n\t\t\t\tpointE.z = bt.btVector3_z(btPoint);\r\n\t\t\t\tvar btNormal: number = bt.tVector3Array_at(btNormals, i);\r\n\t\t\t\tvar normal: Vector3 = hitResult.normal;\r\n\t\t\t\tnormal.x = -bt.btVector3_x(btNormal);\r\n\t\t\t\tnormal.y = bt.btVector3_y(btNormal);\r\n\t\t\t\tnormal.z = bt.btVector3_z(btNormal);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *  射线检测第一个碰撞物体。\r\n\t * @param  \tray        射线\r\n\t * @param  \toutHitInfo 与该射线发生碰撞的第一个碰撞器的碰撞信息\r\n\t * @param  \tdistance   射线长度,默认为最大值\r\n\t * @param   collisonGroup 射线所属碰撞组。\r\n\t * @param   collisionMask 与射线可产生碰撞的组。\r\n\t * @return \t是否检测成功。\r\n\t */\r\n\trayCast(ray: Ray, outHitResult: HitResult = null, distance: number = 2147483647/*Int.MAX_VALUE*/, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\r\n\t\tvar from: Vector3 = ray.origin;\r\n\t\tvar to: Vector3 = PhysicsSimulation._tempVector30;\r\n\t\tVector3.normalize(ray.direction, to);\r\n\t\tVector3.scale(to, distance, to);\r\n\t\tVector3.add(from, to, to);\r\n\t\treturn this.raycastFromTo(from, to, outHitResult, collisonGroup, collisionMask);\r\n\t}\r\n\r\n\t/**\r\n\t * 射线检测所有碰撞的物体。\r\n\t * @param  \tray        射线\r\n\t * @param  \tout 碰撞结果[数组元素会被回收]。\r\n\t * @param  \tdistance   射线长度,默认为最大值\r\n\t * @param   collisonGroup 射线所属碰撞组。\r\n\t * @param   collisionMask 与射线可产生碰撞的组。\r\n\t * @return \t是否检测成功。\r\n\t */\r\n\trayCastAll(ray: Ray, out: HitResult[], distance: number = 2147483647/*Int.MAX_VALUE*/, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\r\n\t\tvar from: Vector3 = ray.origin;\r\n\t\tvar to: Vector3 = PhysicsSimulation._tempVector30;\r\n\t\tVector3.normalize(ray.direction, to);\r\n\t\tVector3.scale(to, distance, to);\r\n\t\tVector3.add(from, to, to);\r\n\t\treturn this.raycastAllFromTo(from, to, out, collisonGroup, collisionMask);\r\n\t}\r\n\r\n\t/**\r\n\t * 形状检测第一个碰撞的物体。\r\n\t * @param   shape 形状。\r\n\t * @param\tfromPosition 世界空间起始位置。\r\n\t * @param\ttoPosition 世界空间结束位置。\r\n\t * @param\tout 碰撞结果。\r\n\t * @param\tfromRotation 起始旋转。\r\n\t * @param\ttoRotation 结束旋转。\r\n\t * @param   collisonGroup 射线所属碰撞组。\r\n\t * @param   collisionMask 与射线可产生碰撞的组。\r\n\t * @return \t是否成功。\r\n\t */\r\n\tshapeCast(shape: ColliderShape, fromPosition: Vector3, toPosition: Vector3, out: HitResult = null, fromRotation: Quaternion = null, toRotation: Quaternion = null, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, allowedCcdPenetration: number = 0.0): boolean {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar convexResultCall: number = this._btClosestConvexResultCallback;\r\n\t\tvar convexPosFrom: number = PhysicsSimulation._btTempVector30;\r\n\t\tvar convexPosTo: number = PhysicsSimulation._btTempVector31;\r\n\t\tvar convexRotFrom: number = PhysicsSimulation._btTempQuaternion0;\r\n\t\tvar convexRotTo: number = PhysicsSimulation._btTempQuaternion1;\r\n\t\tvar convexTransform: number = PhysicsSimulation._btTempTransform0;\r\n\t\tvar convexTransTo: number = PhysicsSimulation._btTempTransform1;\r\n\r\n\t\tvar sweepShape: number = shape._btShape;\r\n\r\n\t\tbt.btVector3_setValue(convexPosFrom, -fromPosition.x, fromPosition.y, fromPosition.z);\r\n\t\tbt.btVector3_setValue(convexPosTo, -toPosition.x, toPosition.y, toPosition.z);\r\n\t\t//convexResultCall.set_m_convexFromWorld(convexPosFrom);\r\n\t\t//convexResultCall.set_m_convexToWorld(convexPosTo);\r\n\t\tbt.ConvexResultCallback_set_m_collisionFilterGroup(convexResultCall, collisonGroup);\r\n\t\tbt.ConvexResultCallback_set_m_collisionFilterMask(convexResultCall, collisionMask);\r\n\r\n\t\tbt.btTransform_setOrigin(convexTransform, convexPosFrom);\r\n\t\tbt.btTransform_setOrigin(convexTransTo, convexPosTo);\r\n\r\n\t\tif (fromRotation) {\r\n\t\t\tbt.btQuaternion_setValue(convexRotFrom, -fromRotation.x, fromRotation.y, fromRotation.z, -fromRotation.w);\r\n\t\t\tbt.btTransform_setRotation(convexTransform, convexRotFrom);\r\n\t\t} else {\r\n\t\t\tbt.btTransform_setRotation(convexTransform, this._btDefaultQuaternion);\r\n\t\t}\r\n\t\tif (toRotation) {\r\n\t\t\tbt.btQuaternion_setValue(convexRotTo, -toRotation.x, toRotation.y, toRotation.z, -toRotation.w);\r\n\t\t\tbt.btTransform_setRotation(convexTransTo, convexRotTo);\r\n\t\t} else {\r\n\t\t\tbt.btTransform_setRotation(convexTransTo, this._btDefaultQuaternion);\r\n\t\t}\r\n\r\n\t\tbt.ClosestConvexResultCallback_set_m_hitCollisionObject(convexResultCall, null);//还原默认值\r\n\t\tbt.ConvexResultCallback_set_m_closestHitFraction(convexResultCall, 1);//还原默认值\r\n\t\tbt.btCollisionWorld_convexSweepTest(this._btCollisionWorld, sweepShape, convexTransform, convexTransTo, convexResultCall, allowedCcdPenetration);\r\n\t\tif (bt.ConvexResultCallback_hasHit(convexResultCall)) {\r\n\t\t\tif (out) {\r\n\t\t\t\tout.succeeded = true;\r\n\t\t\t\tout.collider = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.ClosestConvexResultCallback_get_m_hitCollisionObject(convexResultCall))];\r\n\t\t\t\tout.hitFraction = bt.ConvexResultCallback_get_m_closestHitFraction(convexResultCall);\r\n\t\t\t\tvar btPoint: number = bt.ClosestConvexResultCallback_get_m_hitPointWorld(convexResultCall);\r\n\t\t\t\tvar btNormal: number = bt.ClosestConvexResultCallback_get_m_hitNormalWorld(convexResultCall);\r\n\t\t\t\tvar point: Vector3 = out.point;\r\n\t\t\t\tvar normal: Vector3 = out.normal;\r\n\t\t\t\tpoint.x = -bt.btVector3_x(btPoint);\r\n\t\t\t\tpoint.y = bt.btVector3_y(btPoint);\r\n\t\t\t\tpoint.z = bt.btVector3_z(btPoint);\r\n\t\t\t\tnormal.x = -bt.btVector3_x(btNormal);\r\n\t\t\t\tnormal.y = bt.btVector3_y(btNormal);\r\n\t\t\t\tnormal.z = bt.btVector3_z(btNormal);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tif (out)\r\n\t\t\t\tout.succeeded = false;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 形状检测所有碰撞的物体。\r\n\t * @param   shape 形状。\r\n\t * @param\tfromPosition 世界空间起始位置。\r\n\t * @param\ttoPosition 世界空间结束位置。\r\n\t * @param\tout 碰撞结果[数组元素会被回收]。\r\n\t * @param\tfromRotation 起始旋转。\r\n\t * @param\ttoRotation 结束旋转。\r\n\t * @param   collisonGroup 射线所属碰撞组。\r\n\t * @param   collisionMask 与射线可产生碰撞的组。\r\n\t * @return \t是否成功。\r\n\t */\r\n\tshapeCastAll(shape: ColliderShape, fromPosition: Vector3, toPosition: Vector3, out: HitResult[], fromRotation: Quaternion = null, toRotation: Quaternion = null, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, allowedCcdPenetration: number = 0.0): boolean {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar convexResultCall: number = this._btAllConvexResultCallback;\r\n\t\tvar convexPosFrom: number = PhysicsSimulation._btTempVector30;\r\n\t\tvar convexPosTo: number = PhysicsSimulation._btTempVector31;\r\n\t\tvar convexRotFrom: number = PhysicsSimulation._btTempQuaternion0;\r\n\t\tvar convexRotTo: number = PhysicsSimulation._btTempQuaternion1;\r\n\t\tvar convexTransform: number = PhysicsSimulation._btTempTransform0;\r\n\t\tvar convexTransTo: number = PhysicsSimulation._btTempTransform1;\r\n\r\n\t\tvar sweepShape: number = shape._btShape;\r\n\r\n\t\tout.length = 0;\r\n\t\tbt.btVector3_setValue(convexPosFrom, -fromPosition.x, fromPosition.y, fromPosition.z);\r\n\t\tbt.btVector3_setValue(convexPosTo, -toPosition.x, toPosition.y, toPosition.z);\r\n\r\n\t\t//convexResultCall.set_m_convexFromWorld(convexPosFrom);\r\n\t\t//convexResultCall.set_m_convexToWorld(convexPosTo);\r\n\r\n\t\tbt.ConvexResultCallback_set_m_collisionFilterGroup(convexResultCall, collisonGroup);\r\n\t\tbt.ConvexResultCallback_set_m_collisionFilterMask(convexResultCall, collisionMask);\r\n\r\n\t\tbt.btTransform_setOrigin(convexTransform, convexPosFrom);\r\n\t\tbt.btTransform_setOrigin(convexTransTo, convexPosTo);\r\n\t\tif (fromRotation) {\r\n\t\t\tbt.btQuaternion_setValue(convexRotFrom, -fromRotation.x, fromRotation.y, fromRotation.z, -fromRotation.w);\r\n\t\t\tbt.btTransform_setRotation(convexTransform, convexRotFrom);\r\n\t\t} else {\r\n\t\t\tbt.btTransform_setRotation(convexTransform, this._btDefaultQuaternion);\r\n\t\t}\r\n\t\tif (toRotation) {\r\n\t\t\tbt.btQuaternion_setValue(convexRotTo, -toRotation.x, toRotation.y, toRotation.z, -toRotation.w);\r\n\t\t\tbt.btTransform_setRotation(convexTransTo, convexRotTo);\r\n\t\t} else {\r\n\t\t\tbt.btTransform_setRotation(convexTransTo, this._btDefaultQuaternion);\r\n\t\t}\r\n\r\n\t\tvar collisionObjects: number = bt.AllConvexResultCallback_get_m_collisionObjects(convexResultCall);\r\n\t\tbt.tBtCollisionObjectArray_clear(collisionObjects);//清空检测队列\r\n\t\tbt.btCollisionWorld_convexSweepTest(this._btCollisionWorld, sweepShape, convexTransform, convexTransTo, convexResultCall, allowedCcdPenetration);\r\n\t\tvar count: number = bt.tBtCollisionObjectArray_size(collisionObjects);\r\n\t\tif (count > 0) {\r\n\t\t\tthis._collisionsUtils.recoverAllHitResultsPool();\r\n\t\t\tvar btPoints: number = bt.AllConvexResultCallback_get_m_hitPointWorld(convexResultCall);\r\n\t\t\tvar btNormals: number = bt.AllConvexResultCallback_get_m_hitNormalWorld(convexResultCall);\r\n\t\t\tvar btFractions: number = bt.AllConvexResultCallback_get_m_hitFractions(convexResultCall);\r\n\t\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\t\tvar hitResult: HitResult = this._collisionsUtils.getHitResult();\r\n\t\t\t\tout.push(hitResult);\r\n\t\t\t\thitResult.succeeded = true;\r\n\t\t\t\thitResult.collider = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.tBtCollisionObjectArray_at(collisionObjects, i))];\r\n\t\t\t\thitResult.hitFraction = bt.tScalarArray_at(btFractions, i);\r\n\t\t\t\tvar btPoint: number = bt.tVector3Array_at(btPoints, i);\r\n\t\t\t\tvar point: Vector3 = hitResult.point;\r\n\t\t\t\tpoint.x = -bt.btVector3_x(btPoint);\r\n\t\t\t\tpoint.y = bt.btVector3_y(btPoint);\r\n\t\t\t\tpoint.z = bt.btVector3_z(btPoint);\r\n\t\t\t\tvar btNormal: number = bt.tVector3Array_at(btNormals, i);\r\n\t\t\t\tvar normal: Vector3 = hitResult.normal;\r\n\t\t\t\tnormal.x = -bt.btVector3_x(btNormal);\r\n\t\t\t\tnormal.y = bt.btVector3_y(btNormal);\r\n\t\t\t\tnormal.z = bt.btVector3_z(btNormal);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 添加刚体运动的约束条件。\r\n\t * @param constraint 约束。\r\n\t * @param disableCollisionsBetweenLinkedBodies 是否禁用\r\n\t */\r\n\taddConstraint(constraint: ConstraintComponent, disableCollisionsBetweenLinkedBodies: boolean = false): void {\r\n\t\tif (!this._btDiscreteDynamicsWorld)\r\n\t\t\tthrow \"Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n\t\t// this._nativeDiscreteDynamicsWorld.addConstraint(constraint._nativeConstraint, disableCollisionsBetweenLinkedBodies);\r\n\t\tILaya3D.Physics3D._bullet.btCollisionWorld_addConstraint(this._btDiscreteDynamicsWorld,constraint._btConstraint,disableCollisionsBetweenLinkedBodies);\r\n\t\tthis._currentConstraint[constraint.id] = constraint;\r\n\t}\r\n\r\n\t/**\r\n\t * 移除刚体运动的约束条件。\r\n\t */\r\n\tremoveConstraint(constraint: ConstraintComponent): void {\r\n\t\tif (!this._btDiscreteDynamicsWorld)\r\n\t\t\tthrow \"Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n\t\t// this._nativeDiscreteDynamicsWorld.removeConstraint(constraint._nativeConstraint);\r\n\t\tILaya3D.Physics3D._bullet.btCollisionWorld_removeConstraint(this._btDiscreteDynamicsWorld, constraint._btConstraint);\r\n\t\tdelete this._currentConstraint[constraint.id];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置射线检测回调\r\n\t * @param HITSRAYRESULTCALLBACK_FLAG值\r\n\t */\r\n\tsetHitsRayResultCallbackFlay(flag:number = 1){\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.RayResultCallback_set_m_flags(this._btAllHitsRayResultCallback);\r\n\t\tbt.RayResultCallback_set_m_flags(this._btClosestRayResultCallback);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updatePhysicsTransformFromRender(): void {\r\n\t\tvar elements: any = this._physicsUpdateList.elements;\r\n\t\tfor (var i: number = 0, n: number = this._physicsUpdateList.length; i < n; i++) {\r\n\t\t\tvar physicCollider: PhysicsComponent = elements[i];\r\n\t\t\tphysicCollider._derivePhysicsTransformation(false);\r\n\t\t\tphysicCollider._inPhysicUpdateListIndex = -1;//置空索引\r\n\t\t}\r\n\t\tthis._physicsUpdateList.length = 0;//清空物理更新队列\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateCharacters(): void {\r\n\t\tfor (var i: number = 0, n: number = this._characters.length; i < n; i++) {\r\n\t\t\tvar character: PhysicsComponent = this._characters[i];\r\n\t\t\tcharacter._updateTransformComponent(ILaya3D.Physics3D._bullet.btCollisionObject_getWorldTransform(character._btColliderObject));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateCollisions(): void {\r\n\t\tthis._collisionsUtils.recoverAllContactPointsPool();\r\n\t\tvar previous: Collision[] = this._currentFrameCollisions;\r\n\t\tthis._currentFrameCollisions = this._previousFrameCollisions;\r\n\t\tthis._currentFrameCollisions.length = 0;\r\n\t\tthis._previousFrameCollisions = previous;\r\n\t\tvar loopCount: number = Stat.loopCount;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar numManifolds: number = bt.btDispatcher_getNumManifolds(this._btDispatcher);\r\n\t\tfor (var i: number = 0; i < numManifolds; i++) {\r\n\t\t\tvar contactManifold: number = bt.btDispatcher_getManifoldByIndexInternal(this._btDispatcher, i);//1.可能同时返回A和B、B和A 2.可能同时返回A和B多次(可能和CCD有关)\r\n\t\t\tvar componentA: PhysicsTriggerComponent = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.btPersistentManifold_getBody0(contactManifold))];\r\n\t\t\tvar componentB: PhysicsTriggerComponent = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.btPersistentManifold_getBody1(contactManifold))];\r\n\t\t\tvar collision: Collision = null;\r\n\t\t\tvar isFirstCollision: boolean;//可能同时返回A和B多次,需要过滤\r\n\t\t\tvar contacts: ContactPoint[] = null;\r\n\t\t\tvar isTrigger: boolean = componentA.isTrigger || componentB.isTrigger;\r\n\t\t\tif (isTrigger && (((<Sprite3D>componentA.owner))._needProcessTriggers || ((<Sprite3D>componentB.owner))._needProcessTriggers)) {\r\n\t\t\t\tvar numContacts: number = bt.btPersistentManifold_getNumContacts(contactManifold);\r\n\t\t\t\tfor (var j: number = 0; j < numContacts; j++) {\r\n\t\t\t\t\tvar pt: number = bt.btPersistentManifold_getContactPoint(contactManifold, j);\r\n\t\t\t\t\tvar distance: number = bt.btManifoldPoint_getDistance(pt);\r\n\t\t\t\t\tif (distance <= 0) {\r\n\t\t\t\t\t\tcollision = this._collisionsUtils.getCollision(componentA, componentB);\r\n\t\t\t\t\t\tcontacts = collision.contacts;\r\n\t\t\t\t\t\tisFirstCollision = collision._updateFrame !== loopCount;\r\n\t\t\t\t\t\tif (isFirstCollision) {\r\n\t\t\t\t\t\t\tcollision._isTrigger = true;\r\n\t\t\t\t\t\t\tcontacts.length = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (((<Sprite3D>componentA.owner))._needProcessCollisions || ((<Sprite3D>componentB.owner))._needProcessCollisions) {\r\n\t\t\t\tif (componentA._enableProcessCollisions || componentB._enableProcessCollisions) {//例：A和B均为运动刚体或PhysicCollider\r\n\t\t\t\t\tnumContacts = bt.btPersistentManifold_getNumContacts(contactManifold);\r\n\t\t\t\t\tfor (j = 0; j < numContacts; j++) {\r\n\t\t\t\t\t\tpt = bt.btPersistentManifold_getContactPoint(contactManifold, j);\r\n\t\t\t\t\t\tdistance = bt.btManifoldPoint_getDistance(pt)\r\n\t\t\t\t\t\tif (distance <= 0) {\r\n\t\t\t\t\t\t\tvar contactPoint: ContactPoint = this._collisionsUtils.getContactPoints();\r\n\t\t\t\t\t\t\tcontactPoint.colliderA = componentA;\r\n\t\t\t\t\t\t\tcontactPoint.colliderB = componentB;\r\n\t\t\t\t\t\t\tcontactPoint.distance = distance;\r\n\t\t\t\t\t\t\tvar btNormal: number = bt.btManifoldPoint_get_m_normalWorldOnB(pt);\r\n\t\t\t\t\t\t\tvar normal: Vector3 = contactPoint.normal;\r\n\t\t\t\t\t\t\tnormal.x = -bt.btVector3_x(btNormal);\r\n\t\t\t\t\t\t\tnormal.y = bt.btVector3_y(btNormal);\r\n\t\t\t\t\t\t\tnormal.z = bt.btVector3_z(btNormal);\r\n\t\t\t\t\t\t\tvar btPostionA: number = bt.btManifoldPoint_get_m_positionWorldOnA(pt);\r\n\t\t\t\t\t\t\tvar positionOnA: Vector3 = contactPoint.positionOnA;\r\n\t\t\t\t\t\t\tpositionOnA.x = -bt.btVector3_x(btPostionA);\r\n\t\t\t\t\t\t\tpositionOnA.y = bt.btVector3_y(btPostionA);\r\n\t\t\t\t\t\t\tpositionOnA.z = bt.btVector3_z(btPostionA);\r\n\t\t\t\t\t\t\tvar btPostionB: number = bt.btManifoldPoint_get_m_positionWorldOnB(pt);\r\n\t\t\t\t\t\t\tvar positionOnB: Vector3 = contactPoint.positionOnB;\r\n\t\t\t\t\t\t\tpositionOnB.x = -bt.btVector3_x(btPostionB);\r\n\t\t\t\t\t\t\tpositionOnB.y = bt.btVector3_y(btPostionB);\r\n\t\t\t\t\t\t\tpositionOnB.z = bt.btVector3_z(btPostionB);\r\n\r\n\t\t\t\t\t\t\tif (!collision) {\r\n\t\t\t\t\t\t\t\tcollision = this._collisionsUtils.getCollision(componentA, componentB);\r\n\t\t\t\t\t\t\t\tcontacts = collision.contacts;\r\n\t\t\t\t\t\t\t\tisFirstCollision = collision._updateFrame !== loopCount;\r\n\t\t\t\t\t\t\t\tif (isFirstCollision) {\r\n\t\t\t\t\t\t\t\t\tcollision._isTrigger = false;\r\n\t\t\t\t\t\t\t\t\tcontacts.length = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcontacts.push(contactPoint);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (collision && isFirstCollision) {\r\n\t\t\t\tthis._currentFrameCollisions.push(collision);\r\n\t\t\t\tcollision._setUpdateFrame(loopCount);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_eventScripts(): void {\r\n\t\tvar loopCount: number = Stat.loopCount;\r\n\t\tfor (var i: number = 0, n: number = this._currentFrameCollisions.length; i < n; i++) {\r\n\t\t\tvar curFrameCol: Collision = this._currentFrameCollisions[i];\r\n\t\t\tvar colliderA: PhysicsComponent = curFrameCol._colliderA;\r\n\t\t\tvar colliderB: PhysicsComponent = curFrameCol._colliderB;\r\n\t\t\tif (colliderA.destroyed || colliderB.destroyed)//前一个循环可能会销毁后面循环的同一物理组件\r\n\t\t\t\tcontinue;\r\n\t\t\tif (loopCount - curFrameCol._lastUpdateFrame === 1) {\r\n\t\t\t\tvar ownerA: Sprite3D = (<Sprite3D>colliderA.owner);\r\n\t\t\t\tvar scriptsA: Script3D[] = ownerA._scripts;\r\n\t\t\t\tif (scriptsA) {\r\n\t\t\t\t\tif (curFrameCol._isTrigger) {\r\n\t\t\t\t\t\tif (ownerA._needProcessTriggers) {\r\n\t\t\t\t\t\t\tfor (var j: number = 0, m: number = scriptsA.length; j < m; j++)\r\n\t\t\t\t\t\t\t\tscriptsA[j].onTriggerStay(colliderB);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (ownerA._needProcessCollisions) {\r\n\t\t\t\t\t\t\tfor (j = 0, m = scriptsA.length; j < m; j++) {\r\n\t\t\t\t\t\t\t\tcurFrameCol.other = colliderB;\r\n\t\t\t\t\t\t\t\tscriptsA[j].onCollisionStay(curFrameCol);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tvar ownerB: Sprite3D = (<Sprite3D>colliderB.owner);\r\n\t\t\t\tvar scriptsB: Script3D[] = ownerB._scripts;\r\n\t\t\t\tif (scriptsB) {\r\n\t\t\t\t\tif (curFrameCol._isTrigger) {\r\n\t\t\t\t\t\tif (ownerB._needProcessTriggers) {\r\n\t\t\t\t\t\t\tfor (j = 0, m = scriptsB.length; j < m; j++)\r\n\t\t\t\t\t\t\t\tscriptsB[j].onTriggerStay(colliderA);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (ownerB._needProcessCollisions) {\r\n\t\t\t\t\t\t\tfor (j = 0, m = scriptsB.length; j < m; j++) {\r\n\t\t\t\t\t\t\t\tcurFrameCol.other = colliderA;\r\n\t\t\t\t\t\t\t\tscriptsB[j].onCollisionStay(curFrameCol);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\townerA = (<Sprite3D>colliderA.owner);\r\n\t\t\t\tscriptsA = ownerA._scripts;\r\n\t\t\t\tif (scriptsA) {\r\n\t\t\t\t\tif (curFrameCol._isTrigger) {\r\n\t\t\t\t\t\tif (ownerA._needProcessTriggers) {\r\n\t\t\t\t\t\t\tfor (j = 0, m = scriptsA.length; j < m; j++)\r\n\t\t\t\t\t\t\t\tscriptsA[j].onTriggerEnter(colliderB);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (ownerA._needProcessCollisions) {\r\n\t\t\t\t\t\t\tfor (j = 0, m = scriptsA.length; j < m; j++) {\r\n\t\t\t\t\t\t\t\tcurFrameCol.other = colliderB;\r\n\t\t\t\t\t\t\t\tscriptsA[j].onCollisionEnter(curFrameCol);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\townerB = (<Sprite3D>colliderB.owner);\r\n\t\t\t\tscriptsB = ownerB._scripts;\r\n\t\t\t\tif (scriptsB) {\r\n\t\t\t\t\tif (curFrameCol._isTrigger) {\r\n\t\t\t\t\t\tif (ownerB._needProcessTriggers) {\r\n\t\t\t\t\t\t\tfor (j = 0, m = scriptsB.length; j < m; j++)\r\n\t\t\t\t\t\t\t\tscriptsB[j].onTriggerEnter(colliderA);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (ownerB._needProcessCollisions) {\r\n\t\t\t\t\t\t\tfor (j = 0, m = scriptsB.length; j < m; j++) {\r\n\t\t\t\t\t\t\t\tcurFrameCol.other = colliderA;\r\n\t\t\t\t\t\t\t\tscriptsB[j].onCollisionEnter(curFrameCol);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (i = 0, n = this._previousFrameCollisions.length; i < n; i++) {\r\n\t\t\tvar preFrameCol: Collision = this._previousFrameCollisions[i];\r\n\t\t\tvar preColliderA: PhysicsComponent = preFrameCol._colliderA;\r\n\t\t\tvar preColliderB: PhysicsComponent = preFrameCol._colliderB;\r\n\t\t\tif (preColliderA.destroyed || preColliderB.destroyed)\r\n\t\t\t\tcontinue;\r\n\t\t\tif (loopCount - preFrameCol._updateFrame === 1) {\r\n\t\t\t\tthis._collisionsUtils.recoverCollision(preFrameCol);//回收collision对象\r\n\t\t\t\townerA = (<Sprite3D>preColliderA.owner);\r\n\t\t\t\tscriptsA = ownerA._scripts;\r\n\t\t\t\tif (scriptsA) {\r\n\t\t\t\t\tif (preFrameCol._isTrigger) {\r\n\t\t\t\t\t\tif (ownerA._needProcessTriggers) {\r\n\t\t\t\t\t\t\tfor (j = 0, m = scriptsA.length; j < m; j++)\r\n\t\t\t\t\t\t\t\tscriptsA[j].onTriggerExit(preColliderB);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (ownerA._needProcessCollisions) {\r\n\t\t\t\t\t\t\tfor (j = 0, m = scriptsA.length; j < m; j++) {\r\n\t\t\t\t\t\t\t\tpreFrameCol.other = preColliderB;\r\n\t\t\t\t\t\t\t\tscriptsA[j].onCollisionExit(preFrameCol);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\townerB = (<Sprite3D>preColliderB.owner);\r\n\t\t\t\tscriptsB = ownerB._scripts;\r\n\t\t\t\tif (scriptsB) {\r\n\t\t\t\t\tif (preFrameCol._isTrigger) {\r\n\t\t\t\t\t\tif (ownerB._needProcessTriggers) {\r\n\t\t\t\t\t\t\tfor (j = 0, m = scriptsB.length; j < m; j++)\r\n\t\t\t\t\t\t\t\tscriptsB[j].onTriggerExit(preColliderA);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (ownerB._needProcessCollisions) {\r\n\t\t\t\t\t\t\tfor (j = 0, m = scriptsB.length; j < m; j++) {\r\n\t\t\t\t\t\t\t\tpreFrameCol.other = preColliderA;\r\n\t\t\t\t\t\t\t\tscriptsB[j].onCollisionExit(preFrameCol);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var id in this._currentConstraint){\r\n\t\t\tvar constraintObj:ConstraintComponent = this._currentConstraint[id];\r\n\t\t\tvar scripts: Script3D[] = (<Sprite3D>constraintObj.owner)._scripts; \r\n\t\t\tif(constraintObj.enabled && constraintObj._isBreakConstrained() && (!!scripts)){\r\n\t\t\t\tif(scripts.length!=0){\r\n\t\t\t\t\tfor(i = 0,n = scripts.length;i<n;i++){\r\n\t\t\t\t\t\tscripts[i].onJointBreak();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t }\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 清除力。\r\n\t */\r\n\tclearForces(): void {\r\n\t\tif (!this._btDiscreteDynamicsWorld)\r\n\t\t\tthrow \"Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n\t\tILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_clearForces(this._btDiscreteDynamicsWorld);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseTexture } from \"../../resource/BaseTexture\"\r\nimport { Texture2D } from \"../../resource/Texture2D\"\r\nimport { TextureFormat } from \"../../resource/TextureFormat\";\r\n\r\n\t\r\n\t/**\r\n\t * ...\r\n\t * @author\r\n\t */\r\n\texport class TextureGenerator {\r\n\t\t\r\n\t\tconstructor(){\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\t static lightAttenTexture(x:number, y:number, maxX:number, maxY:number, index:number, data:Uint8Array):void {\r\n\t\t\t\r\n\t\t\tvar sqrRange:number = x / maxX;\r\n\t\t\tvar atten:number = 1.0 / (1.0 + 25.0 * sqrRange);\r\n\t\t\tif (sqrRange >= 0.64) {\r\n\t\t\t\tif (sqrRange > 1.0) {\r\n\t\t\t\t\tatten = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tatten *= 1 - (sqrRange - 0.64) / (1 - 0.64);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdata[index] = Math.floor(atten * 255.0 + 0.5);\r\n\t\t}\r\n\t\t\r\n\t\t static haloTexture(x:number, y:number, maxX:number, maxY:number, index:number, data:Uint8Array):void {\r\n\t\t\t\r\n\t\t\tmaxX >>= 1;\r\n\t\t\tmaxY >>= 1;\r\n\t\t\tvar xFac:number = (x - maxX) / maxX;\r\n\t\t\tvar yFac:number = (y - maxY) / maxY;\r\n\t\t\tvar sqrRange:number = xFac * xFac + yFac * yFac;\r\n\t\t\tif (sqrRange > 1.0) {\r\n\t\t\t\tsqrRange = 1.0;\r\n\t\t\t}\r\n\t\t\tdata[index] = Math.floor((1.0 - sqrRange) * 255.0 + 0.5);\r\n\t\t}\r\n\t\t\r\n\t\t static _generateTexture2D(texture:Texture2D, textureWidth:number, textureHeight:number, func:Function):void {\r\n\t\t\tvar index:number = 0;\r\n\t\t\tvar size:number = 0;\r\n\t\t\tswitch (texture.format) {\r\n\t\t\tcase TextureFormat.R8G8B8: \r\n\t\t\t\tsize = 3;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TextureFormat.R8G8B8A8: \r\n\t\t\t\tsize = 4;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TextureFormat.Alpha8: \r\n\t\t\t\tsize = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault: \r\n\t\t\t\tthrow \"GeneratedTexture._generateTexture: unkonw texture format.\";\r\n\t\t\t}\r\n\r\n\t\t\tvar data:Uint8Array = new Uint8Array(textureWidth * textureHeight * size);\r\n\t\t\tfor (var y:number = 0; y < textureHeight; y++) {\r\n\t\t\t\tfor (var x:number = 0; x < textureWidth; x++) {\r\n\t\t\t\t\tfunc(x, y, textureWidth, textureHeight, index, data);\r\n\t\t\t\t\tindex += size;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttexture.setPixels(data);\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","import { Node } from \"../../display/Node\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { FilterMode } from \"../../resource/FilterMode\";\r\nimport { Texture2D } from \"../../resource/Texture2D\";\r\nimport { TextureFormat } from \"../../resource/TextureFormat\";\r\nimport { WarpMode } from \"../../resource/WrapMode\";\r\nimport { PixelLineSprite3D } from \"../core/pixelLine/PixelLineSprite3D\";\r\nimport { BoundBox } from \"../math/BoundBox\";\r\nimport { Color } from \"../math/Color\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Quaternion } from \"../math/Quaternion\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Vector4 } from \"../math/Vector4\";\r\nimport { TextureGenerator } from \"../resource/TextureGenerator\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\n\r\n/**\r\n * <code>Utils3D</code> 类用于创建3D工具。\r\n */\r\nexport class Utils3D {\r\n\tprivate static _tempVector3_0: Vector3 = new Vector3();\r\n\tprivate static _tempVector3_1: Vector3 = new Vector3();\r\n\r\n\tprivate static _tempArray16_0: Float32Array = new Float32Array(16);\r\n\tprivate static _tempArray16_1: Float32Array = new Float32Array(16);\r\n\tprivate static _tempArray16_2: Float32Array = new Float32Array(16);\r\n\tprivate static _tempArray16_3: Float32Array = new Float32Array(16);\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _createFloatTextureBuffer(width: number, height: number): Texture2D {\r\n\t\tvar floatTex: Texture2D = new Texture2D(width, height, TextureFormat.R32G32B32A32, false, false);\r\n\t\tfloatTex.filterMode = FilterMode.Point;\r\n\t\tfloatTex.wrapModeU = WarpMode.Clamp;\r\n\t\tfloatTex.wrapModeV = WarpMode.Clamp;\r\n\t\tfloatTex.anisoLevel = 0;\r\n\t\treturn floatTex;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _convertToLayaVec3(bVector: number, out: Vector3, inverseX: boolean): void {\r\n\t\tvar bullet: any = ILaya3D.Physics3D._bullet;\r\n\t\tout.x = inverseX ? - bullet.btVector3_x(bVector) : bullet.btVector3_x(bVector);\r\n\t\tout.y = bullet.btVector3_y(bVector);\r\n\t\tout.z = bullet.btVector3_z(bVector);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _convertToBulletVec3(lVector: Vector3, out: number, inverseX: boolean): void {\r\n\t\tILaya3D.Physics3D._bullet.btVector3_setValue(out, inverseX ? -lVector.x : lVector.x, lVector.y, lVector.z);\r\n\t}\r\n\r\n\t/**\r\n\t *通过数平移、旋转、缩放值计算到结果矩阵数组,骨骼动画专用。\r\n\t * @param tx left矩阵数组。\r\n\t * @param ty left矩阵数组的偏移。\r\n\t * @param tz right矩阵数组。\r\n\t * @param qx right矩阵数组的偏移。\r\n\t * @param qy 输出矩阵数组。\r\n\t * @param qz 输出矩阵数组的偏移。\r\n\t * @param qw 输出矩阵数组的偏移。\r\n\t * @param sx 输出矩阵数组的偏移。\r\n\t * @param sy 输出矩阵数组的偏移。\r\n\t * @param sz 输出矩阵数组的偏移。\r\n\t * @param outArray 结果矩阵数组。\r\n\t * @param outOffset 结果矩阵数组的偏移。\r\n\t */\r\n\tprivate static _rotationTransformScaleSkinAnimation(tx: number, ty: number, tz: number, qx: number, qy: number, qz: number, qw: number, sx: number, sy: number, sz: number, outArray: Float32Array, outOffset: number): void {\r\n\r\n\t\tvar re: Float32Array = Utils3D._tempArray16_0;\r\n\t\tvar se: Float32Array = Utils3D._tempArray16_1;\r\n\t\tvar tse: Float32Array = Utils3D._tempArray16_2;\r\n\r\n\t\t//平移\r\n\r\n\t\t//旋转\r\n\t\tvar x2: number = qx + qx;\r\n\t\tvar y2: number = qy + qy;\r\n\t\tvar z2: number = qz + qz;\r\n\r\n\t\tvar xx: number = qx * x2;\r\n\t\tvar yx: number = qy * x2;\r\n\t\tvar yy: number = qy * y2;\r\n\t\tvar zx: number = qz * x2;\r\n\t\tvar zy: number = qz * y2;\r\n\t\tvar zz: number = qz * z2;\r\n\t\tvar wx: number = qw * x2;\r\n\t\tvar wy: number = qw * y2;\r\n\t\tvar wz: number = qw * z2;\r\n\r\n\t\t//re[3] = re[7] = re[11] = re[12] = re[13] = re[14] = 0;\r\n\t\tre[15] = 1;\r\n\t\tre[0] = 1 - yy - zz;\r\n\t\tre[1] = yx + wz;\r\n\t\tre[2] = zx - wy;\r\n\r\n\t\tre[4] = yx - wz;\r\n\t\tre[5] = 1 - xx - zz;\r\n\t\tre[6] = zy + wx;\r\n\r\n\t\tre[8] = zx + wy;\r\n\t\tre[9] = zy - wx;\r\n\t\tre[10] = 1 - xx - yy;\r\n\r\n\t\t//缩放\r\n\t\t//se[4] = se[8] = se[12] = se[1] = se[9] = se[13] = se[2] = se[6] = se[14] = se[3] = se[7] = se[11] = 0;\r\n\t\tse[15] = 1;\r\n\t\tse[0] = sx;\r\n\t\tse[5] = sy;\r\n\t\tse[10] = sz;\r\n\r\n\t\tvar i: number, a: Float32Array, b: Float32Array, e: Float32Array, ai0: number, ai1: number, ai2: number, ai3: number;\r\n\t\t//mul(rMat, tMat, tsMat)......................................\r\n\t\tfor (i = 0; i < 4; i++) {\r\n\t\t\tai0 = re[i];\r\n\t\t\tai1 = re[i + 4];\r\n\t\t\tai2 = re[i + 8];\r\n\t\t\tai3 = re[i + 12];\r\n\t\t\ttse[i] = ai0;\r\n\t\t\ttse[i + 4] = ai1;\r\n\t\t\ttse[i + 8] = ai2;\r\n\t\t\ttse[i + 12] = ai0 * tx + ai1 * ty + ai2 * tz + ai3;\r\n\t\t}\r\n\r\n\t\t//mul(tsMat, sMat, out)..............................................\r\n\t\tfor (i = 0; i < 4; i++) {\r\n\t\t\tai0 = tse[i];\r\n\t\t\tai1 = tse[i + 4];\r\n\t\t\tai2 = tse[i + 8];\r\n\t\t\tai3 = tse[i + 12];\r\n\t\t\toutArray[i + outOffset] = ai0 * se[0] + ai1 * se[1] + ai2 * se[2] + ai3 * se[3];\r\n\t\t\toutArray[i + outOffset + 4] = ai0 * se[4] + ai1 * se[5] + ai2 * se[6] + ai3 * se[7];\r\n\t\t\toutArray[i + outOffset + 8] = ai0 * se[8] + ai1 * se[9] + ai2 * se[10] + ai3 * se[11];\r\n\t\t\toutArray[i + outOffset + 12] = ai0 * se[12] + ai1 * se[13] + ai2 * se[14] + ai3 * se[15];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _compIdToNode: any = new Object();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/** @internal */\r\n\tstatic _computeBoneAndAnimationDatasByBindPoseMatrxix(bones: any, curData: Float32Array, inverGlobalBindPose: Matrix4x4[], outBonesDatas: Float32Array, outAnimationDatas: Float32Array, boneIndexToMesh: number[]): void {\r\n\r\n\t\tvar offset: number = 0;\r\n\t\tvar matOffset: number = 0;\r\n\r\n\t\tvar i: number;\r\n\t\tvar parentOffset: number;\r\n\t\tvar boneLength: number = bones.length;\r\n\t\tfor (i = 0; i < boneLength; offset += bones[i].keyframeWidth, matOffset += 16, i++) {\r\n\t\t\t//将旋转平移缩放合成矩阵...........................................\r\n\t\t\tUtils3D._rotationTransformScaleSkinAnimation(curData[offset + 0], curData[offset + 1], curData[offset + 2], curData[offset + 3], curData[offset + 4], curData[offset + 5], curData[offset + 6], curData[offset + 7], curData[offset + 8], curData[offset + 9], outBonesDatas, matOffset);\r\n\r\n\t\t\tif (i != 0) {\r\n\t\t\t\tparentOffset = bones[i].parentIndex * 16;\r\n\t\t\t\tUtils3D.mulMatrixByArray(outBonesDatas, parentOffset, outBonesDatas, matOffset, outBonesDatas, matOffset);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar n: number = inverGlobalBindPose.length;\r\n\t\tfor (i = 0; i < n; i++)//将绝对矩阵乘以反置矩阵................................................\r\n\t\t{\r\n\t\t\tUtils3D.mulMatrixByArrayAndMatrixFast(outBonesDatas, boneIndexToMesh[i] * 16, inverGlobalBindPose[i], outAnimationDatas, i * 16);//TODO:-1处理\r\n\t\t}\r\n\t}\r\n\r\n\t/** @internal */\r\n\tstatic _computeAnimationDatasByArrayAndMatrixFast(inverGlobalBindPose: Matrix4x4[], bonesDatas: Float32Array, outAnimationDatas: Float32Array, boneIndexToMesh: number[]): void {\r\n\t\tfor (var i: number = 0, n: number = inverGlobalBindPose.length; i < n; i++)//将绝对矩阵乘以反置矩阵\r\n\t\t\tUtils3D.mulMatrixByArrayAndMatrixFast(bonesDatas, boneIndexToMesh[i] * 16, inverGlobalBindPose[i], outAnimationDatas, i * 16);//TODO:-1处理\r\n\t}\r\n\r\n\t/** @internal */\r\n\tstatic _computeBoneAndAnimationDatasByBindPoseMatrxixOld(bones: any, curData: Float32Array, inverGlobalBindPose: Matrix4x4[], outBonesDatas: Float32Array, outAnimationDatas: Float32Array): void {\r\n\r\n\t\tvar offset: number = 0;\r\n\t\tvar matOffset: number = 0;\r\n\r\n\t\tvar i: number;\r\n\t\tvar parentOffset: number;\r\n\t\tvar boneLength: number = bones.length;\r\n\t\tfor (i = 0; i < boneLength; offset += bones[i].keyframeWidth, matOffset += 16, i++) {\r\n\t\t\t//将旋转平移缩放合成矩阵...........................................\r\n\t\t\tUtils3D._rotationTransformScaleSkinAnimation(curData[offset + 7], curData[offset + 8], curData[offset + 9], curData[offset + 3], curData[offset + 4], curData[offset + 5], curData[offset + 6], curData[offset + 0], curData[offset + 1], curData[offset + 2], outBonesDatas, matOffset);\r\n\r\n\t\t\tif (i != 0) {\r\n\t\t\t\tparentOffset = bones[i].parentIndex * 16;\r\n\t\t\t\tUtils3D.mulMatrixByArray(outBonesDatas, parentOffset, outBonesDatas, matOffset, outBonesDatas, matOffset);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar n: number = inverGlobalBindPose.length;\r\n\t\tfor (i = 0; i < n; i++)//将绝对矩阵乘以反置矩阵................................................\r\n\t\t{\r\n\t\t\tvar arrayOffset: number = i * 16;\r\n\t\t\tUtils3D.mulMatrixByArrayAndMatrixFast(outBonesDatas, arrayOffset, inverGlobalBindPose[i], outAnimationDatas, arrayOffset);\r\n\t\t}\r\n\t}\r\n\r\n\t/** @internal */\r\n\tstatic _computeAnimationDatasByArrayAndMatrixFastOld(inverGlobalBindPose: Matrix4x4[], bonesDatas: Float32Array, outAnimationDatas: Float32Array): void {\r\n\t\tvar n: number = inverGlobalBindPose.length;\r\n\t\tfor (var i: number = 0; i < n; i++)//将绝对矩阵乘以反置矩阵................................................\r\n\t\t{\r\n\t\t\tvar arrayOffset: number = i * 16;\r\n\t\t\tUtils3D.mulMatrixByArrayAndMatrixFast(bonesDatas, arrayOffset, inverGlobalBindPose[i], outAnimationDatas, arrayOffset);\r\n\t\t}\r\n\t}\r\n\r\n\t/** @internal */\r\n\tstatic _computeRootAnimationData(bones: any, curData: Float32Array, animationDatas: Float32Array): void {\r\n\r\n\t\tfor (var i: number = 0, offset: number = 0, matOffset: number = 0, boneLength: number = bones.length; i < boneLength; offset += bones[i].keyframeWidth, matOffset += 16, i++)\r\n\t\t\tUtils3D.createAffineTransformationArray(curData[offset + 0], curData[offset + 1], curData[offset + 2], curData[offset + 3], curData[offset + 4], curData[offset + 5], curData[offset + 6], curData[offset + 7], curData[offset + 8], curData[offset + 9], animationDatas, matOffset);\r\n\t}\r\n\r\n\t/**\r\n\t * 根据四元数旋转三维向量。\r\n\t * @param\tsource 源三维向量。\r\n\t * @param\trotation 旋转四元数。\r\n\t * @param\tout 输出三维向量。\r\n\t */\r\n\tstatic transformVector3ArrayByQuat(sourceArray: Float32Array, sourceOffset: number, rotation: Quaternion, outArray: Float32Array, outOffset: number): void {\r\n\t\tvar x: number = sourceArray[sourceOffset], y: number = sourceArray[sourceOffset + 1], z: number = sourceArray[sourceOffset + 2], qx: number = rotation.x, qy: number = rotation.y, qz: number = rotation.z, qw: number = rotation.w, ix: number = qw * x + qy * z - qz * y, iy: number = qw * y + qz * x - qx * z, iz: number = qw * z + qx * y - qy * x, iw: number = -qx * x - qy * y - qz * z;\r\n\t\toutArray[outOffset] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n\t\toutArray[outOffset + 1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n\t\toutArray[outOffset + 2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\t}\r\n\r\n\t/**\r\n\t *通过数组数据计算矩阵乘法。\r\n\t * @param leftArray left矩阵数组。\r\n\t * @param leftOffset left矩阵数组的偏移。\r\n\t * @param rightArray right矩阵数组。\r\n\t * @param rightOffset right矩阵数组的偏移。\r\n\t * @param outArray 输出矩阵数组。\r\n\t * @param outOffset 输出矩阵数组的偏移。\r\n\t */\r\n\tstatic mulMatrixByArray(leftArray: Float32Array, leftOffset: number, rightArray: Float32Array, rightOffset: number, outArray: Float32Array, outOffset: number): void {\r\n\r\n\t\tvar i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n\r\n\t\tif (outArray === rightArray) {\r\n\t\t\trightArray = Utils3D._tempArray16_3;\r\n\t\t\tfor (i = 0; i < 16; ++i) {\r\n\t\t\t\trightArray[i] = outArray[outOffset + i];\r\n\t\t\t}\r\n\t\t\trightOffset = 0;\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < 4; i++) {\r\n\t\t\tai0 = leftArray[leftOffset + i];\r\n\t\t\tai1 = leftArray[leftOffset + i + 4];\r\n\t\t\tai2 = leftArray[leftOffset + i + 8];\r\n\t\t\tai3 = leftArray[leftOffset + i + 12];\r\n\t\t\toutArray[outOffset + i] = ai0 * rightArray[rightOffset + 0] + ai1 * rightArray[rightOffset + 1] + ai2 * rightArray[rightOffset + 2] + ai3 * rightArray[rightOffset + 3];\r\n\t\t\toutArray[outOffset + i + 4] = ai0 * rightArray[rightOffset + 4] + ai1 * rightArray[rightOffset + 5] + ai2 * rightArray[rightOffset + 6] + ai3 * rightArray[rightOffset + 7];\r\n\t\t\toutArray[outOffset + i + 8] = ai0 * rightArray[rightOffset + 8] + ai1 * rightArray[rightOffset + 9] + ai2 * rightArray[rightOffset + 10] + ai3 * rightArray[rightOffset + 11];\r\n\t\t\toutArray[outOffset + i + 12] = ai0 * rightArray[rightOffset + 12] + ai1 * rightArray[rightOffset + 13] + ai2 * rightArray[rightOffset + 14] + ai3 * rightArray[rightOffset + 15];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *通过数组数据计算矩阵乘法,rightArray和outArray不能为同一数组引用。\r\n\t * @param leftArray left矩阵数组。\r\n\t * @param leftOffset left矩阵数组的偏移。\r\n\t * @param rightArray right矩阵数组。\r\n\t * @param rightOffset right矩阵数组的偏移。\r\n\t * @param outArray 结果矩阵数组。\r\n\t * @param outOffset 结果矩阵数组的偏移。\r\n\t */\r\n\tstatic mulMatrixByArrayFast(leftArray: Float32Array, leftOffset: number, rightArray: Float32Array, rightOffset: number, outArray: Float32Array, outOffset: number): void {\r\n\r\n\t\tvar i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n\t\tfor (i = 0; i < 4; i++) {\r\n\t\t\tai0 = leftArray[leftOffset + i];\r\n\t\t\tai1 = leftArray[leftOffset + i + 4];\r\n\t\t\tai2 = leftArray[leftOffset + i + 8];\r\n\t\t\tai3 = leftArray[leftOffset + i + 12];\r\n\t\t\toutArray[outOffset + i] = ai0 * rightArray[rightOffset + 0] + ai1 * rightArray[rightOffset + 1] + ai2 * rightArray[rightOffset + 2] + ai3 * rightArray[rightOffset + 3];\r\n\t\t\toutArray[outOffset + i + 4] = ai0 * rightArray[rightOffset + 4] + ai1 * rightArray[rightOffset + 5] + ai2 * rightArray[rightOffset + 6] + ai3 * rightArray[rightOffset + 7];\r\n\t\t\toutArray[outOffset + i + 8] = ai0 * rightArray[rightOffset + 8] + ai1 * rightArray[rightOffset + 9] + ai2 * rightArray[rightOffset + 10] + ai3 * rightArray[rightOffset + 11];\r\n\t\t\toutArray[outOffset + i + 12] = ai0 * rightArray[rightOffset + 12] + ai1 * rightArray[rightOffset + 13] + ai2 * rightArray[rightOffset + 14] + ai3 * rightArray[rightOffset + 15];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *通过数组数据计算矩阵乘法,rightArray和outArray不能为同一数组引用。\r\n\t * @param leftArray left矩阵数组。\r\n\t * @param leftOffset left矩阵数组的偏移。\r\n\t * @param rightMatrix right矩阵。\r\n\t * @param outArray 结果矩阵数组。\r\n\t * @param outOffset 结果矩阵数组的偏移。\r\n\t */\r\n\tstatic mulMatrixByArrayAndMatrixFast(leftArray: Float32Array, leftOffset: number, rightMatrix: Matrix4x4, outArray: Float32Array, outOffset: number): void {\r\n\r\n\t\tvar i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n\t\tvar rightMatrixE: Float32Array = rightMatrix.elements;\r\n\t\tvar m11: number = rightMatrixE[0], m12: number = rightMatrixE[1], m13: number = rightMatrixE[2], m14: number = rightMatrixE[3];\r\n\t\tvar m21: number = rightMatrixE[4], m22: number = rightMatrixE[5], m23: number = rightMatrixE[6], m24: number = rightMatrixE[7];\r\n\t\tvar m31: number = rightMatrixE[8], m32: number = rightMatrixE[9], m33: number = rightMatrixE[10], m34: number = rightMatrixE[11];\r\n\t\tvar m41: number = rightMatrixE[12], m42: number = rightMatrixE[13], m43: number = rightMatrixE[14], m44: number = rightMatrixE[15];\r\n\t\tvar ai0LeftOffset: number = leftOffset;\r\n\t\tvar ai1LeftOffset: number = leftOffset + 4;\r\n\t\tvar ai2LeftOffset: number = leftOffset + 8;\r\n\t\tvar ai3LeftOffset: number = leftOffset + 12;\r\n\t\tvar ai0OutOffset: number = outOffset;\r\n\t\tvar ai1OutOffset: number = outOffset + 4;\r\n\t\tvar ai2OutOffset: number = outOffset + 8;\r\n\t\tvar ai3OutOffset: number = outOffset + 12;\r\n\r\n\t\tfor (i = 0; i < 4; i++) {\r\n\t\t\tai0 = leftArray[ai0LeftOffset + i];\r\n\t\t\tai1 = leftArray[ai1LeftOffset + i];\r\n\t\t\tai2 = leftArray[ai2LeftOffset + i];\r\n\t\t\tai3 = leftArray[ai3LeftOffset + i];\r\n\t\t\toutArray[ai0OutOffset + i] = ai0 * m11 + ai1 * m12 + ai2 * m13 + ai3 * m14;\r\n\t\t\toutArray[ai1OutOffset + i] = ai0 * m21 + ai1 * m22 + ai2 * m23 + ai3 * m24;\r\n\t\t\toutArray[ai2OutOffset + i] = ai0 * m31 + ai1 * m32 + ai2 * m33 + ai3 * m34;\r\n\t\t\toutArray[ai3OutOffset + i] = ai0 * m41 + ai1 * m42 + ai2 * m43 + ai3 * m44;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *通过数平移、旋转、缩放值计算到结果矩阵数组。\r\n\t * @param tX left矩阵数组。\r\n\t * @param tY left矩阵数组的偏移。\r\n\t * @param tZ right矩阵数组。\r\n\t * @param qX right矩阵数组的偏移。\r\n\t * @param qY 输出矩阵数组。\r\n\t * @param qZ 输出矩阵数组的偏移。\r\n\t * @param qW 输出矩阵数组的偏移。\r\n\t * @param sX 输出矩阵数组的偏移。\r\n\t * @param sY 输出矩阵数组的偏移。\r\n\t * @param sZ 输出矩阵数组的偏移。\r\n\t * @param outArray 结果矩阵数组。\r\n\t * @param outOffset 结果矩阵数组的偏移。\r\n\t */\r\n\tstatic createAffineTransformationArray(tX: number, tY: number, tZ: number, rX: number, rY: number, rZ: number, rW: number, sX: number, sY: number, sZ: number, outArray: Float32Array, outOffset: number): void {\r\n\r\n\t\tvar x2: number = rX + rX, y2: number = rY + rY, z2: number = rZ + rZ;\r\n\t\tvar xx: number = rX * x2, xy: number = rX * y2, xz: number = rX * z2, yy: number = rY * y2, yz: number = rY * z2, zz: number = rZ * z2;\r\n\t\tvar wx: number = rW * x2, wy: number = rW * y2, wz: number = rW * z2;\r\n\r\n\t\toutArray[outOffset + 0] = (1 - (yy + zz)) * sX;\r\n\t\toutArray[outOffset + 1] = (xy + wz) * sX;\r\n\t\toutArray[outOffset + 2] = (xz - wy) * sX;\r\n\t\toutArray[outOffset + 3] = 0;\r\n\t\toutArray[outOffset + 4] = (xy - wz) * sY;\r\n\t\toutArray[outOffset + 5] = (1 - (xx + zz)) * sY;\r\n\t\toutArray[outOffset + 6] = (yz + wx) * sY;\r\n\t\toutArray[outOffset + 7] = 0;\r\n\t\toutArray[outOffset + 8] = (xz + wy) * sZ;\r\n\t\toutArray[outOffset + 9] = (yz - wx) * sZ;\r\n\t\toutArray[outOffset + 10] = (1 - (xx + yy)) * sZ;\r\n\t\toutArray[outOffset + 11] = 0;\r\n\t\toutArray[outOffset + 12] = tX;\r\n\t\toutArray[outOffset + 13] = tY;\r\n\t\toutArray[outOffset + 14] = tZ;\r\n\t\toutArray[outOffset + 15] = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过矩阵转换一个三维向量数组到另外一个归一化的三维向量数组。\r\n\t * @param\tsource 源三维向量所在数组。\r\n\t * @param\tsourceOffset 源三维向量数组偏移。\r\n\t * @param\ttransform  变换矩阵。\r\n\t * @param\tresult 输出三维向量所在数组。\r\n\t * @param\tresultOffset 输出三维向量数组偏移。\r\n\t */\r\n\tstatic transformVector3ArrayToVector3ArrayCoordinate(source: Float32Array, sourceOffset: number, transform: Matrix4x4, result: Float32Array, resultOffset: number): void {\r\n\t\tvar coordinateX: number = source[sourceOffset + 0];\r\n\t\tvar coordinateY: number = source[sourceOffset + 1];\r\n\t\tvar coordinateZ: number = source[sourceOffset + 2];\r\n\r\n\t\tvar transformElem: Float32Array = transform.elements;\r\n\t\tvar w: number = ((coordinateX * transformElem[3]) + (coordinateY * transformElem[7]) + (coordinateZ * transformElem[11]) + transformElem[15]);\r\n\t\tresult[resultOffset] = (coordinateX * transformElem[0]) + (coordinateY * transformElem[4]) + (coordinateZ * transformElem[8]) + transformElem[12] / w;\r\n\t\tresult[resultOffset + 1] = (coordinateX * transformElem[1]) + (coordinateY * transformElem[5]) + (coordinateZ * transformElem[9]) + transformElem[13] / w;\r\n\t\tresult[resultOffset + 2] = (coordinateX * transformElem[2]) + (coordinateY * transformElem[6]) + (coordinateZ * transformElem[10]) + transformElem[14] / w;\r\n\t}\r\n\r\n\tstatic transformVector3ArrayToVector3ArrayNormal(source: Float32Array, sourceOffset: number, transform: Matrix4x4, result: Float32Array, resultOffset: number): void {\r\n\t\tvar coordinateX: number = source[sourceOffset + 0];\r\n\t\tvar coordinateY: number = source[sourceOffset + 1];\r\n\t\tvar coordinateZ: number = source[sourceOffset + 2];\r\n\r\n\t\tvar transformElem: Float32Array = transform.elements;\r\n\t\tresult[resultOffset] = coordinateX * transformElem[0] + coordinateY * transformElem[4] + coordinateZ * transformElem[8];\r\n\t\tresult[resultOffset + 1] = coordinateX * transformElem[1] + coordinateY * transformElem[5] + coordinateZ * transformElem[9];\r\n\t\tresult[resultOffset + 2] = coordinateX * transformElem[2] + coordinateY * transformElem[6] + coordinateZ * transformElem[10];\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic transformLightingMapTexcoordArray(source: Float32Array, sourceOffset: number, lightingMapScaleOffset: Vector4, result: Float32Array, resultOffset: number): void {\r\n\t\tresult[resultOffset + 0] = source[sourceOffset + 0] * lightingMapScaleOffset.x + lightingMapScaleOffset.z;\r\n\t\tresult[resultOffset + 1] = 1.0 - ((1.0 - source[sourceOffset + 1]) * lightingMapScaleOffset.y + lightingMapScaleOffset.w);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取URL版本字符。\r\n\t * @param\turl\r\n\t * @return\r\n\t */\r\n\tstatic getURLVerion(url: string): string {\r\n\t\tvar index: number = url.indexOf(\"?\");\r\n\t\treturn index >= 0 ? url.substr(index) : null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _createAffineTransformationArray(trans: Vector3, rot: Quaternion, scale: Vector3, outE: Float32Array): void {\r\n\r\n\t\tvar x: number = rot.x, y: number = rot.y, z: number = rot.z, w: number = rot.w, x2: number = x + x, y2: number = y + y, z2: number = z + z;\r\n\t\tvar xx: number = x * x2, xy: number = x * y2, xz: number = x * z2, yy: number = y * y2, yz: number = y * z2, zz: number = z * z2;\r\n\t\tvar wx: number = w * x2, wy: number = w * y2, wz: number = w * z2, sx: number = scale.x, sy: number = scale.y, sz: number = scale.z;\r\n\r\n\t\toutE[0] = (1 - (yy + zz)) * sx;\r\n\t\toutE[1] = (xy + wz) * sx;\r\n\t\toutE[2] = (xz - wy) * sx;\r\n\t\toutE[3] = 0;\r\n\t\toutE[4] = (xy - wz) * sy;\r\n\t\toutE[5] = (1 - (xx + zz)) * sy;\r\n\t\toutE[6] = (yz + wx) * sy;\r\n\t\toutE[7] = 0;\r\n\t\toutE[8] = (xz + wy) * sz;\r\n\t\toutE[9] = (yz - wx) * sz;\r\n\t\toutE[10] = (1 - (xx + yy)) * sz;\r\n\t\toutE[11] = 0;\r\n\t\toutE[12] = trans.x;\r\n\t\toutE[13] = trans.y;\r\n\t\toutE[14] = trans.z;\r\n\t\toutE[15] = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _mulMatrixArray(left: Float32Array, right: Float32Array, rightOffset: number, outArray: Float32Array, outOffset: number): void {\r\n\t\tvar l: Float32Array = right;\r\n\t\tvar r: Float32Array = left;\r\n\t\tvar e: Float32Array = outArray;\r\n\r\n\t\tvar l11: number = l[rightOffset], l12: number = l[rightOffset + 1], l13: number = l[rightOffset + 2], l14: number = l[rightOffset + 3];\r\n\t\tvar l21: number = l[rightOffset + 4], l22: number = l[rightOffset + 5], l23: number = l[rightOffset + 6], l24: number = l[rightOffset + 7];\r\n\t\tvar l31: number = l[rightOffset + 8], l32: number = l[rightOffset + 9], l33: number = l[rightOffset + 10], l34: number = l[rightOffset + 11];\r\n\t\tvar l41: number = l[rightOffset + 12], l42: number = l[rightOffset + 13], l43: number = l[rightOffset + 14], l44: number = l[rightOffset + 15];\r\n\r\n\t\tvar r11: number = r[0], r12: number = r[1], r13: number = r[2], r14: number = r[3];\r\n\t\tvar r21: number = r[4], r22: number = r[5], r23: number = r[6], r24: number = r[7];\r\n\t\tvar r31: number = r[8], r32: number = r[9], r33: number = r[10], r34: number = r[11];\r\n\t\tvar r41: number = r[12], r42: number = r[13], r43: number = r[14], r44: number = r[15];\r\n\r\n\t\te[outOffset] = (l11 * r11) + (l12 * r21) + (l13 * r31) + (l14 * r41);\r\n\t\te[outOffset + 1] = (l11 * r12) + (l12 * r22) + (l13 * r32) + (l14 * r42);\r\n\t\te[outOffset + 2] = (l11 * r13) + (l12 * r23) + (l13 * r33) + (l14 * r43);\r\n\t\te[outOffset + 3] = (l11 * r14) + (l12 * r24) + (l13 * r34) + (l14 * r44);\r\n\t\te[outOffset + 4] = (l21 * r11) + (l22 * r21) + (l23 * r31) + (l24 * r41);\r\n\t\te[outOffset + 5] = (l21 * r12) + (l22 * r22) + (l23 * r32) + (l24 * r42);\r\n\t\te[outOffset + 6] = (l21 * r13) + (l22 * r23) + (l23 * r33) + (l24 * r43);\r\n\t\te[outOffset + 7] = (l21 * r14) + (l22 * r24) + (l23 * r34) + (l24 * r44);\r\n\t\te[outOffset + 8] = (l31 * r11) + (l32 * r21) + (l33 * r31) + (l34 * r41);\r\n\t\te[outOffset + 9] = (l31 * r12) + (l32 * r22) + (l33 * r32) + (l34 * r42);\r\n\t\te[outOffset + 10] = (l31 * r13) + (l32 * r23) + (l33 * r33) + (l34 * r43);\r\n\t\te[outOffset + 11] = (l31 * r14) + (l32 * r24) + (l33 * r34) + (l34 * r44);\r\n\t\te[outOffset + 12] = (l41 * r11) + (l42 * r21) + (l43 * r31) + (l44 * r41);\r\n\t\te[outOffset + 13] = (l41 * r12) + (l42 * r22) + (l43 * r32) + (l44 * r42);\r\n\t\te[outOffset + 14] = (l41 * r13) + (l42 * r23) + (l43 * r33) + (l44 * r43);\r\n\t\te[outOffset + 15] = (l41 * r14) + (l42 * r24) + (l43 * r34) + (l44 * r44);\r\n\t}\r\n\r\n\tprivate static arcTanAngle(x: number, y: number): number {\r\n\r\n\t\tif (x == 0) {\r\n\t\t\tif (y == 1)\r\n\t\t\t\treturn Math.PI / 2;\r\n\t\t\treturn -Math.PI / 2;\r\n\t\t}\r\n\t\tif (x > 0)\r\n\t\t\treturn Math.atan(y / x);\r\n\t\tif (x < 0) {\r\n\t\t\tif (y > 0)\r\n\t\t\t\treturn Math.atan(y / x) + Math.PI;\r\n\t\t\treturn Math.atan(y / x) - Math.PI;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tprivate static angleTo(from: Vector3, location: Vector3, angle: Vector3): void {\r\n\r\n\t\tVector3.subtract(location, from, Quaternion.TEMPVector30);\r\n\t\tVector3.normalize(Quaternion.TEMPVector30, Quaternion.TEMPVector30);\r\n\r\n\t\tangle.x = Math.asin(Quaternion.TEMPVector30.y);\r\n\t\tangle.y = Utils3D.arcTanAngle(-Quaternion.TEMPVector30.z, -Quaternion.TEMPVector30.x);\r\n\t}\r\n\r\n\tstatic transformQuat(source: Vector3, rotation: Float32Array, out: Vector3): void {\r\n\t\tvar re: Float32Array = rotation;\r\n\r\n\t\tvar x: number = source.x, y: number = source.y, z: number = source.z, qx: number = re[0], qy: number = re[1], qz: number = re[2], qw: number = re[3],\r\n\r\n\t\t\tix: number = qw * x + qy * z - qz * y, iy: number = qw * y + qz * x - qx * z, iz: number = qw * z + qx * y - qy * x, iw: number = -qx * x - qy * y - qz * z;\r\n\r\n\t\tout.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n\t\tout.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n\t\tout.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\t}\r\n\r\n\tstatic quaternionWeight(f: Quaternion, weight: number, e: Quaternion): void {\r\n\t\te.x = f.x * weight;\r\n\t\te.y = f.y * weight;\r\n\t\te.z = f.z * weight;\r\n\t\te.w = f.w;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic quaternionConjugate(value: Quaternion, result: Quaternion): void {\r\n\t\tresult.x = -value.x;\r\n\t\tresult.y = -value.y;\r\n\t\tresult.z = -value.z;\r\n\t\tresult.w = value.w;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic scaleWeight(s: Vector3, w: number, out: Vector3): void {\r\n\t\tvar sX: number = s.x, sY: number = s.y, sZ: number = s.z;\r\n\t\tout.x = sX > 0 ? Math.pow(Math.abs(sX), w) : -Math.pow(Math.abs(sX), w);\r\n\t\tout.y = sY > 0 ? Math.pow(Math.abs(sY), w) : -Math.pow(Math.abs(sY), w);\r\n\t\tout.z = sZ > 0 ? Math.pow(Math.abs(sZ), w) : -Math.pow(Math.abs(sZ), w);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic scaleBlend(sa: Vector3, sb: Vector3, w: number, out: Vector3): void {\r\n\t\tvar saw: Vector3 = Utils3D._tempVector3_0;\r\n\t\tvar sbw: Vector3 = Utils3D._tempVector3_1;\r\n\t\tUtils3D.scaleWeight(sa, 1.0 - w, saw);\r\n\t\tUtils3D.scaleWeight(sb, w, sbw);\r\n\t\tvar sng: Vector3 = w > 0.5 ? sb : sa;\r\n\t\tout.x = sng.x > 0 ? Math.abs(saw.x * sbw.x) : -Math.abs(saw.x * sbw.x);\r\n\t\tout.y = sng.y > 0 ? Math.abs(saw.y * sbw.y) : -Math.abs(saw.y * sbw.y);\r\n\t\tout.z = sng.z > 0 ? Math.abs(saw.z * sbw.z) : -Math.abs(saw.z * sbw.z);\r\n\t}\r\n\r\n\r\n\r\n\tstatic matrix4x4MultiplyFFF(a: Float32Array, b: Float32Array, e: Float32Array): void {\r\n\r\n\t\tvar i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n\t\tif (e === b) {\r\n\t\t\tb = new Float32Array(16);\r\n\t\t\tfor (i = 0; i < 16; ++i) {\r\n\t\t\t\tb[i] = e[i];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar b0: number = b[0], b1: number = b[1], b2: number = b[2], b3: number = b[3];\r\n\t\tvar b4: number = b[4], b5: number = b[5], b6: number = b[6], b7: number = b[7];\r\n\t\tvar b8: number = b[8], b9: number = b[9], b10: number = b[10], b11: number = b[11];\r\n\t\tvar b12: number = b[12], b13: number = b[13], b14: number = b[14], b15: number = b[15];\r\n\r\n\t\tfor (i = 0; i < 4; i++) {\r\n\t\t\tai0 = a[i];\r\n\t\t\tai1 = a[i + 4];\r\n\t\t\tai2 = a[i + 8];\r\n\t\t\tai3 = a[i + 12];\r\n\t\t\te[i] = ai0 * b0 + ai1 * b1 + ai2 * b2 + ai3 * b3;\r\n\t\t\te[i + 4] = ai0 * b4 + ai1 * b5 + ai2 * b6 + ai3 * b7;\r\n\t\t\te[i + 8] = ai0 * b8 + ai1 * b9 + ai2 * b10 + ai3 * b11;\r\n\t\t\te[i + 12] = ai0 * b12 + ai1 * b13 + ai2 * b14 + ai3 * b15;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic matrix4x4MultiplyFFFForNative(a: Float32Array, b: Float32Array, e: Float32Array): void {\r\n\t\t(<any>LayaGL.instance).matrix4x4Multiply(a, b, e);\r\n\t}\r\n\r\n\tstatic matrix4x4MultiplyMFM(left: Matrix4x4, right: Float32Array, out: Matrix4x4): void {\r\n\t\tUtils3D.matrix4x4MultiplyFFF(left.elements, right, out.elements);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _buildTexture2D(width: number, height: number, format: number, colorFunc: Function, mipmaps: boolean = false): Texture2D {\r\n\t\tvar texture: Texture2D = new Texture2D(width, height, format, mipmaps, true);\r\n\t\ttexture.anisoLevel = 1;\r\n\t\ttexture.filterMode = FilterMode.Point;\r\n\t\tTextureGenerator._generateTexture2D(texture, width, height, colorFunc);\r\n\t\treturn texture;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _drawBound(debugLine: PixelLineSprite3D, boundBox: BoundBox, color: Color): void {\r\n\t\tif (debugLine.lineCount + 12 > debugLine.maxLineCount)\r\n\t\t\tdebugLine.maxLineCount += 12;\r\n\r\n\t\tvar start: Vector3 = Utils3D._tempVector3_0;\r\n\t\tvar end: Vector3 = Utils3D._tempVector3_1;\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\r\n\t\tstart.setValue(min.x, min.y, min.z);\r\n\t\tend.setValue(max.x, min.y, min.z);\r\n\t\tdebugLine.addLine(start, end, color, color);\r\n\r\n\t\tstart.setValue(min.x, min.y, min.z);\r\n\t\tend.setValue(min.x, min.y, max.z);\r\n\t\tdebugLine.addLine(start, end, color, color);\r\n\r\n\t\tstart.setValue(max.x, min.y, min.z);\r\n\t\tend.setValue(max.x, min.y, max.z);\r\n\t\tdebugLine.addLine(start, end, color, color);\r\n\r\n\t\tstart.setValue(min.x, min.y, max.z);\r\n\t\tend.setValue(max.x, min.y, max.z);\r\n\t\tdebugLine.addLine(start, end, color, color);\r\n\r\n\t\tstart.setValue(min.x, min.y, min.z);\r\n\t\tend.setValue(min.x, max.y, min.z);\r\n\t\tdebugLine.addLine(start, end, color, color);\r\n\r\n\t\tstart.setValue(min.x, min.y, max.z);\r\n\t\tend.setValue(min.x, max.y, max.z);\r\n\t\tdebugLine.addLine(start, end, color, color);\r\n\r\n\t\tstart.setValue(max.x, min.y, min.z);\r\n\t\tend.setValue(max.x, max.y, min.z);\r\n\t\tdebugLine.addLine(start, end, color, color);\r\n\r\n\t\tstart.setValue(max.x, min.y, max.z);\r\n\t\tend.setValue(max.x, max.y, max.z);\r\n\t\tdebugLine.addLine(start, end, color, color);\r\n\r\n\t\tstart.setValue(min.x, max.y, min.z);\r\n\t\tend.setValue(max.x, max.y, min.z);\r\n\t\tdebugLine.addLine(start, end, color, color);\r\n\r\n\t\tstart.setValue(min.x, max.y, min.z);\r\n\t\tend.setValue(min.x, max.y, max.z);\r\n\t\tdebugLine.addLine(start, end, color, color);\r\n\r\n\t\tstart.setValue(max.x, max.y, min.z);\r\n\t\tend.setValue(max.x, max.y, max.z);\r\n\t\tdebugLine.addLine(start, end, color, color);\r\n\r\n\t\tstart.setValue(min.x, max.y, max.z);\r\n\t\tend.setValue(max.x, max.y, max.z);\r\n\t\tdebugLine.addLine(start, end, color, color);\r\n\t}\r\n\r\n\t///**@internal */\r\n\t//private static var _tempHierarchyID:int = 0;\r\n\t//\r\n\t///**\r\n\t//* @internal\r\n\t//*/\r\n\t//public static function _getSpritesHierarchyID(sprite:Sprite3D, checkSprites:Array, outIDs:Array):void {\r\n\t//var index:int = checkSprites.indexOf(sprite);\r\n\t//if (index !== -1)\r\n\t//outIDs[index] = _tempHierarchyID;\r\n\t//_tempHierarchyID++;\r\n\t//var children:Array = sprite._children;\r\n\t//for (var i:int = 0, n:int = children.length; i < n; i++)\r\n\t//_getSpritesHierarchyID(children[i], checkSprites, outIDs);\r\n\t//}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _getHierarchyPath(rootSprite: Node, checkSprite: Node, path: any[]): any[] {\r\n\t\tpath.length = 0;\r\n\t\tvar sprite: Node = checkSprite;\r\n\t\twhile (sprite !== rootSprite) {\r\n\t\t\tvar parent: Node = sprite._parent;\r\n\t\t\tif (parent)\r\n\t\t\t\tpath.push(parent.getChildIndex(sprite));\r\n\t\t\telse\r\n\t\t\t\treturn null;\r\n\t\t\tsprite = parent;\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _getNodeByHierarchyPath(rootSprite: Node, invPath: any[]): Node {\r\n\t\tvar sprite: Node = rootSprite;\r\n\t\tfor (var i: number = invPath.length - 1; i >= 0; i--) {\r\n\t\t\tsprite = sprite.getChildAt(invPath[i]);\r\n\t\t}\r\n\t\treturn sprite;\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n","import { Vector3 } from \"../math/Vector3\";\r\nimport { Physics3DUtils } from \"../utils/Physics3DUtils\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\";\r\nimport { ColliderShape } from \"./shape/ColliderShape\";\r\nimport { Component } from \"../../components/Component\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\n\r\n/**\r\n * <code>CharacterController</code> 类用于创建角色控制器。\r\n */\r\nexport class CharacterController extends PhysicsComponent {\r\n\t/** @internal */\r\n\tprivate static _btTempVector30: number;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tCharacterController._btTempVector30 = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\r\n\t}\r\n\r\n\t/* UP轴_X轴。*/\r\n\tstatic UPAXIS_X: number = 0;\r\n\t/* UP轴_Y轴。*/\r\n\tstatic UPAXIS_Y: number = 1;\r\n\t/* UP轴_Z轴。*/\r\n\tstatic UPAXIS_Z: number = 2;\r\n\r\n\t/** @internal */\r\n\tprivate _stepHeight: number;\r\n\t/** @internal */\r\n\tprivate _upAxis: Vector3 = new Vector3(0, 1, 0);\r\n\t/**@internal */\r\n\tprivate _maxSlope: number = 45.0;\r\n\t/**@internal */\r\n\tprivate _jumpSpeed: number = 10.0;\r\n\t/**@internal */\r\n\tprivate _fallSpeed: number = 55.0;\r\n\t/** @internal */\r\n\tprivate _gravity: Vector3 = new Vector3(0, -9.8 * 3, 0);\r\n\r\n\t/**@internal */\r\n\t_btKinematicCharacter: number = null;\r\n\r\n\t/**\r\n\t * 角色降落速度。\r\n\t */\r\n\tget fallSpeed(): number {\r\n\t\treturn this._fallSpeed;\r\n\t}\r\n\r\n\tset fallSpeed(value: number) {\r\n\t\tthis._fallSpeed = value;\r\n\t\tILaya3D.Physics3D._bullet.btKinematicCharacterController_setFallSpeed(this._btKinematicCharacter, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 角色跳跃速度。\r\n\t */\r\n\tget jumpSpeed(): number {\r\n\t\treturn this._jumpSpeed;\r\n\t}\r\n\r\n\tset jumpSpeed(value: number) {\r\n\t\tthis._jumpSpeed = value;\r\n\t\tILaya3D.Physics3D._bullet.btKinematicCharacterController_setJumpSpeed(this._btKinematicCharacter, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 重力。\r\n\t */\r\n\tget gravity(): Vector3 {\r\n\t\treturn this._gravity;\r\n\t}\r\n\r\n\tset gravity(value: Vector3) {\r\n\t\tthis._gravity = value;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar btGravity: number = CharacterController._btTempVector30;\r\n\t\tbt.btVector3_setValue(btGravity, -value.x, value.y, value.z);\r\n\t\tbt.btKinematicCharacterController_setGravity(this._btKinematicCharacter, btGravity);\r\n\t}\r\n\r\n\t/**\r\n\t * 最大坡度。\r\n\t */\r\n\tget maxSlope(): number {\r\n\t\treturn this._maxSlope;\r\n\t}\r\n\r\n\tset maxSlope(value: number) {\r\n\t\tthis._maxSlope = value;\r\n\t\tILaya3D.Physics3D._bullet.btKinematicCharacterController_setMaxSlope(this._btKinematicCharacter, (value / 180) * Math.PI);\r\n\t}\r\n\r\n\t/**\r\n\t * 角色是否在地表。\r\n\t */\r\n\tget isGrounded(): boolean {\r\n\t\treturn ILaya3D.Physics3D._bullet.btKinematicCharacterController_onGround(this._btKinematicCharacter);\r\n\t}\r\n\r\n\t/**\r\n\t * 角色行走的脚步高度，表示可跨越的最大高度。\r\n\t */\r\n\tget stepHeight(): number {\r\n\t\treturn this._stepHeight;\r\n\t}\r\n\r\n\tset stepHeight(value: number) {\r\n\t\tthis._stepHeight = value;\r\n\t\tILaya3D.Physics3D._bullet.btKinematicCharacterController_setStepHeight(this._btKinematicCharacter, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 角色的Up轴。\r\n\t */\r\n\tget upAxis(): Vector3 {\r\n\t\treturn this._upAxis;\r\n\t}\r\n\r\n\tset upAxis(value: Vector3) {\r\n\t\tthis._upAxis = value;\r\n\t\tvar btUpAxis: number = CharacterController._btTempVector30;\r\n\t\tUtils3D._convertToBulletVec3(value, btUpAxis, false);\r\n\t\tILaya3D.Physics3D._bullet.btKinematicCharacterController_setUp(this._btKinematicCharacter, btUpAxis);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>CharacterController</code> 实例。\r\n\t * @param stepheight 角色脚步高度。\r\n\t * @param upAxis 角色Up轴\r\n\t * @param collisionGroup 所属碰撞组。\r\n\t * @param canCollideWith 可产生碰撞的碰撞组。\r\n\t */\r\n\tconstructor(stepheight: number = 0.1, upAxis: Vector3 = null, collisionGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER, canCollideWith: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER) {\r\n\t\tsuper(collisionGroup, canCollideWith);\r\n\t\tthis._stepHeight = stepheight;\r\n\t\t(upAxis) && (this._upAxis = upAxis);\r\n\t\tthis._controlBySimulation = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _constructCharacter(): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tif (this._btKinematicCharacter)\r\n\t\t\tbt.btKinematicCharacterController_destroy(this._btKinematicCharacter);\r\n\r\n\t\tvar btUpAxis: number = CharacterController._btTempVector30;\r\n\t\tbt.btVector3_setValue(btUpAxis, this._upAxis.x, this._upAxis.y, this._upAxis.z);\r\n\t\tthis._btKinematicCharacter = bt.btKinematicCharacterController_create(this._btColliderObject, this._colliderShape._btShape, this._stepHeight, btUpAxis);\r\n\t\tthis.fallSpeed = this._fallSpeed;\r\n\t\tthis.maxSlope = this._maxSlope;\r\n\t\tthis.jumpSpeed = this._jumpSpeed;\r\n\t\tthis.gravity = this._gravity;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_onShapeChange(colShape: ColliderShape): void {\r\n\t\tsuper._onShapeChange(colShape);\r\n\t\tthis._constructCharacter();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_onAdded(): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar ghostObject: number = bt.btPairCachingGhostObject_create();\r\n\t\tbt.btCollisionObject_setUserIndex(ghostObject, this.id);\r\n\t\tbt.btCollisionObject_setCollisionFlags(ghostObject, PhysicsComponent.COLLISIONFLAGS_CHARACTER_OBJECT);\r\n\t\tthis._btColliderObject = ghostObject;\r\n\t\t(this._colliderShape) && (this._constructCharacter());\r\n\t\tsuper._onAdded();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_addToSimulation(): void {\r\n\t\tthis._simulation._characters.push(this);\r\n\t\tthis._simulation._addCharacter(this, this._collisionGroup, this._canCollideWith);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_removeFromSimulation(): void {\r\n\t\tthis._simulation._removeCharacter(this);\r\n\t\tvar characters: CharacterController[] = this._simulation._characters;\r\n\t\tcharacters.splice(characters.indexOf(this), 1);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(dest: Component): void {\r\n\t\tsuper._cloneTo(dest);\r\n\t\tvar destCharacterController: CharacterController = <CharacterController>dest;\r\n\t\tdestCharacterController.stepHeight = this._stepHeight;\r\n\t\tdestCharacterController.upAxis = this._upAxis;\r\n\t\tdestCharacterController.maxSlope = this._maxSlope;\r\n\t\tdestCharacterController.jumpSpeed = this._jumpSpeed;\r\n\t\tdestCharacterController.fallSpeed = this._fallSpeed;\r\n\t\tdestCharacterController.gravity = this._gravity;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _onDestroy(): void {\r\n\t\tILaya3D.Physics3D._bullet.btKinematicCharacterController_destroy(this._btKinematicCharacter);\r\n\t\tsuper._onDestroy();\r\n\t\tthis._btKinematicCharacter = null;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过指定移动向量移动角色。\r\n\t * @param\tmovement 移动向量。\r\n\t */\r\n\tmove(movement: Vector3): void {\r\n\t\tvar btMovement: number = CharacterController._btVector30;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btVector3_setValue(btMovement, -movement.x, movement.y, movement.z);\r\n\t\tbt.btKinematicCharacterController_setWalkDirection(this._btKinematicCharacter, btMovement);\r\n\t}\r\n\r\n\t/**\r\n\t * 跳跃。\r\n\t * @param velocity 跳跃速度。\r\n\t */\r\n\tjump(velocity: Vector3 = null): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar btVelocity: number = CharacterController._btVector30;\r\n\t\tif (velocity) {\r\n\t\t\tUtils3D._convertToBulletVec3(velocity, btVelocity, true);\r\n\t\t\tbt.btKinematicCharacterController_jump(this._btKinematicCharacter, btVelocity);\r\n\t\t} else {\r\n\t\t\tbt.btVector3_setValue(btVelocity, 0, 0, 0);\r\n\t\t\tbt.btKinematicCharacterController_jump(this._btKinematicCharacter, btVelocity);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { Component } from \"../../components/Component\"\r\nimport { PhysicsComponent } from \"./PhysicsComponent\"\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\n\r\n/**\r\n * <code>PhysicsTriggerComponent</code> 类用于创建物理触发器组件。\r\n */\r\nexport class PhysicsTriggerComponent extends PhysicsComponent {\r\n\t/** @internal */\r\n\tprivate _isTrigger: boolean = false;\r\n\r\n\t/**\r\n\t * 是否为触发器。\r\n\t */\r\n\tget isTrigger(): boolean {\r\n\t\treturn this._isTrigger;\r\n\t}\r\n\r\n\tset isTrigger(value: boolean) {\r\n\t\tthis._isTrigger = value;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tif (this._btColliderObject) {\r\n\t\t\tvar flags: number = bt.btCollisionObject_getCollisionFlags(this._btColliderObject);\r\n\t\t\tif (value) {\r\n\t\t\t\tif ((flags & PhysicsComponent.COLLISIONFLAGS_NO_CONTACT_RESPONSE) === 0)\r\n\t\t\t\t\tbt.btCollisionObject_setCollisionFlags(this._btColliderObject, flags | PhysicsComponent.COLLISIONFLAGS_NO_CONTACT_RESPONSE);\r\n\t\t\t} else {\r\n\t\t\t\tif ((flags & PhysicsComponent.COLLISIONFLAGS_NO_CONTACT_RESPONSE) !== 0)\r\n\t\t\t\t\tbt.btCollisionObject_setCollisionFlags(this._btColliderObject, flags ^ PhysicsComponent.COLLISIONFLAGS_NO_CONTACT_RESPONSE);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>PhysicsTriggerComponent</code> 实例。\r\n\t * @param collisionGroup 所属碰撞组。\r\n\t * @param canCollideWith 可产生碰撞的碰撞组。\r\n\t */\r\n\tconstructor(collisionGroup: number, canCollideWith: number) {\r\n\t\tsuper(collisionGroup, canCollideWith);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_onAdded(): void {\r\n\t\tsuper._onAdded();\r\n\t\tthis.isTrigger = this._isTrigger;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(dest: Component): void {\r\n\t\tsuper._cloneTo(dest);\r\n\t\t(<PhysicsTriggerComponent>dest).isTrigger = this._isTrigger;\r\n\t}\r\n}\r\n\r\n","import { Component } from \"../../components/Component\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Physics3DUtils } from \"../utils/Physics3DUtils\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\";\r\nimport { PhysicsTriggerComponent } from \"./PhysicsTriggerComponent\";\r\nimport { ColliderShape } from \"./shape/ColliderShape\";\r\nimport { ConstraintComponent } from \"./constraints/ConstraintComponent\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\n\r\n/**\r\n * <code>Rigidbody3D</code> 类用于创建刚体碰撞器。\r\n */\r\nexport class Rigidbody3D extends PhysicsTriggerComponent {\r\n\t/*\r\n\r\n\t * 刚体类型_静态。\r\n\t * 设定为永远不会移动刚体,引擎也不会自动更新。\r\n\t * 如果你打算移动物理,建议使用TYPE_KINEMATIC。\r\n\t */\r\n\tstatic TYPE_STATIC: number = 0;\r\n\t/*\r\n\t * 刚体类型_动态。\r\n\t * 可以通过forces和impulsesy移动刚体,并且不需要修改移动转换。\r\n\t */\r\n\tstatic TYPE_DYNAMIC: number = 1;\r\n\t/*\r\n\t * 刚体类型_运动。\r\n\t * 可以移动刚体,物理引擎会自动处理动态交互。\r\n\t * 注意：和静态或其他类型刚体不会产生动态交互。\r\n\t */\r\n\tstatic TYPE_KINEMATIC: number = 2;\r\n\r\n\t/** @internal */\r\n\tstatic _BT_DISABLE_WORLD_GRAVITY: number = 1;\r\n\t/** @internal */\r\n\tstatic _BT_ENABLE_GYROPSCOPIC_FORCE: number = 2;\r\n\r\n\t/** @internal */\r\n\tprivate static _btTempVector30: number;\r\n\t/** @internal */\r\n\tprivate static _btTempVector31: number;\r\n\t/** @internal */\r\n\tprivate static _btVector3Zero: number;\r\n\t/**@internal */\r\n\tprivate static _btTransform0: number;\r\n\t/** @internal */\r\n\tprivate static _btInertia: number;\r\n\t/** @internal */\r\n\tprivate static _btImpulse: number;\r\n\t/** @internal */\r\n\tprivate static _btImpulseOffset: number;\r\n\t/** @internal */\r\n\tprivate static _btGravity: number;\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tRigidbody3D._btTempVector30 = bt.btVector3_create(0, 0, 0);\r\n\t\tRigidbody3D._btTempVector31 = bt.btVector3_create(0, 0, 0);\r\n\t\tRigidbody3D._btVector3Zero = bt.btVector3_create(0, 0, 0);\r\n\t\tRigidbody3D._btInertia = bt.btVector3_create(0, 0, 0);\r\n\t\tRigidbody3D._btImpulse = bt.btVector3_create(0, 0, 0);\r\n\t\tRigidbody3D._btImpulseOffset = bt.btVector3_create(0, 0, 0);\r\n\t\tRigidbody3D._btGravity = bt.btVector3_create(0, 0, 0);\r\n\t\tRigidbody3D._btTransform0 = bt.btTransform_create();\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _btLayaMotionState: number;\r\n\t/** @internal */\r\n\tprivate _isKinematic: boolean = false;\r\n\t/** @internal */\r\n\tprivate _mass: number = 1.0;\r\n\t/** @internal */\r\n\tprivate _gravity: Vector3 = new Vector3(0, -10, 0);\r\n\t/** @internal */\r\n\tprivate _angularDamping: number = 0.0;\r\n\t/** @internal */\r\n\tprivate _linearDamping: number = 0.0;\r\n\t/** @internal */\r\n\tprivate _overrideGravity: boolean = false;\r\n\t/** @internal */\r\n\tprivate _totalTorque: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprivate _totalForce: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprivate _linearVelocity: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _angularVelocity: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _linearFactor: Vector3 = new Vector3(1, 1, 1);\r\n\t/** @internal */\r\n\tprivate _angularFactor: Vector3 = new Vector3(1, 1, 1);\r\n\t/** @internal */\r\n\tprivate _detectCollisions: boolean = true;\r\n\t//private var _linkedConstraints:Array;//TODO:\r\n\t/** @internal */\r\n\tprivate _constaintRigidbodyA:ConstraintComponent;\r\n\t/** @internal */\r\n\tprivate _constaintRigidbodyB:ConstraintComponent;\r\n\t/**\r\n\t * 质量。\r\n\t */\r\n\tget mass(): number {\r\n\t\treturn this._mass;\r\n\t}\r\n\r\n\tset mass(value: number) {\r\n\t\tvalue = Math.max(value, 1e-07);//质量最小为1e-07\r\n\t\tthis._mass = value;\r\n\t\t(this._isKinematic) || (this._updateMass(value));\r\n\t}\r\n\r\n\t/**\r\n\t * 是否为运动物体，如果为true仅可通过transform属性移动物体,而非其他力相关属性。\r\n\t */\r\n\tget isKinematic(): boolean {\r\n\t\treturn this._isKinematic;\r\n\t}\r\n\r\n\tset isKinematic(value: boolean) {\r\n\t\tthis._isKinematic = value;\r\n\t\tthis._controlBySimulation = !value;//isKinematic not controll by Simulation\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar canInSimulation: boolean = !!(this._simulation && this._enabled && this._colliderShape);\r\n\t\tcanInSimulation && this._removeFromSimulation();\r\n\t\tvar natColObj: any = this._btColliderObject;\r\n\t\tvar flags: number = bt.btCollisionObject_getCollisionFlags(natColObj);\r\n\t\tif (value) {\r\n\t\t\tflags = flags | PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT;\r\n\t\t\tbt.btCollisionObject_setCollisionFlags(natColObj, flags);//加入场景前必须配置flag,加入后无效\r\n\t\t\tbt.btCollisionObject_forceActivationState(this._btColliderObject, PhysicsComponent.ACTIVATIONSTATE_DISABLE_DEACTIVATION);//触发器开启主动检测,并防止睡眠\r\n\t\t\tthis._enableProcessCollisions = false;\r\n\t\t\tthis._updateMass(0);//必须设置Mass为0来保证InverMass为0\r\n\t\t} else {\r\n\t\t\tif ((flags & PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT) > 0)\r\n\t\t\t\tflags = flags ^ PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT;\r\n\t\t\tbt.btCollisionObject_setCollisionFlags(natColObj, flags);//加入场景前必须配置flag,加入后无效\r\n\t\t\tbt.btCollisionObject_setActivationState(this._btColliderObject, PhysicsComponent.ACTIVATIONSTATE_ACTIVE_TAG);\r\n\t\t\tthis._enableProcessCollisions = true;\r\n\t\t\tthis._updateMass(this._mass);\r\n\t\t}\r\n\r\n\t\tvar btZero: number = Rigidbody3D._btVector3Zero;\r\n\t\tbt.btCollisionObject_setInterpolationLinearVelocity(natColObj, btZero);\r\n\t\tbt.btRigidBody_setLinearVelocity(natColObj, btZero);\r\n\t\tbt.btCollisionObject_setInterpolationAngularVelocity(natColObj, btZero);\r\n\t\tbt.btRigidBody_setAngularVelocity(natColObj, btZero);\r\n\r\n\t\tcanInSimulation && this._addToSimulation();\r\n\t}\r\n\r\n\t/**\r\n\t * 刚体的线阻力。\r\n\t */\r\n\tget linearDamping(): number {\r\n\t\treturn this._linearDamping;\r\n\t}\r\n\r\n\tset linearDamping(value: number) {\r\n\t\tthis._linearDamping = value;\r\n\t\tif (this._btColliderObject)\r\n\t\t\tILaya3D.Physics3D._bullet.btRigidBody_setDamping(this._btColliderObject, value, this._angularDamping);\r\n\t}\r\n\r\n\t/**\r\n\t * 刚体的角阻力。\r\n\t */\r\n\tget angularDamping(): number {\r\n\t\treturn this._angularDamping;\r\n\t}\r\n\r\n\tset angularDamping(value: number) {\r\n\t\tthis._angularDamping = value;\r\n\t\tif (this._btColliderObject)\r\n\t\t\tILaya3D.Physics3D._bullet.btRigidBody_setDamping(this._btColliderObject, this._linearDamping, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否重载重力。\r\n\t */\r\n\tget overrideGravity(): boolean {\r\n\t\treturn this._overrideGravity;\r\n\t}\r\n\r\n\tset overrideGravity(value: boolean) {\r\n\t\tthis._overrideGravity = value;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tif (this._btColliderObject) {\r\n\t\t\tvar flag: number = bt.btRigidBody_getFlags(this._btColliderObject);\r\n\t\t\tif (value) {\r\n\t\t\t\tif ((flag & Rigidbody3D._BT_DISABLE_WORLD_GRAVITY) === 0)\r\n\t\t\t\t\tbt.btRigidBody_setFlags(this._btColliderObject, flag | Rigidbody3D._BT_DISABLE_WORLD_GRAVITY);\r\n\t\t\t} else {\r\n\t\t\t\tif ((flag & Rigidbody3D._BT_DISABLE_WORLD_GRAVITY) > 0)\r\n\t\t\t\t\tbt.btRigidBody_setFlags(this._btColliderObject, flag ^ Rigidbody3D._BT_DISABLE_WORLD_GRAVITY);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 重力。\r\n\t */\r\n\tget gravity(): Vector3 {\r\n\t\treturn this._gravity;\r\n\t}\r\n\r\n\tset gravity(value: Vector3) {\r\n\t\tthis._gravity = value;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btVector3_setValue(Rigidbody3D._btGravity, -value.x, value.y, value.z);\r\n\t\tbt.btRigidBody_setGravity(this._btColliderObject, Rigidbody3D._btGravity);\r\n\t}\r\n\r\n\t/**\r\n\t * 总力。\r\n\t */\r\n\tget totalForce(): Vector3 {\r\n\t\tif (this._btColliderObject) {\r\n\t\t\tvar btTotalForce: number = ILaya3D.Physics3D._bullet.btRigidBody_getTotalForce(this._btColliderObject);\r\n\t\t\tUtils3D._convertToLayaVec3(btTotalForce, this._totalForce, true);\r\n\t\t\treturn this._totalForce;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * 每个轴的线性运动缩放因子,如果某一轴的值为0表示冻结在该轴的线性运动。\r\n\t */\r\n\tget linearFactor(): Vector3 {\r\n\t\treturn this._linearFactor;\r\n\t}\r\n\r\n\tset linearFactor(value: Vector3) {\r\n\t\tthis._linearFactor = value;\r\n\t\tvar btValue: number = Rigidbody3D._btTempVector30;\r\n\t\tUtils3D._convertToBulletVec3(value, btValue, false);\r\n\t\tILaya3D.Physics3D._bullet.btRigidBody_setLinearFactor(this._btColliderObject, btValue);\r\n\t}\r\n\r\n\t/**\r\n\t * 线速度\r\n\t */\r\n\tget linearVelocity(): Vector3 {\r\n\t\tif (this._btColliderObject)\r\n\t\t\tUtils3D._convertToLayaVec3(ILaya3D.Physics3D._bullet.btRigidBody_getLinearVelocity(this._btColliderObject), this._linearVelocity, true);\r\n\t\treturn this._linearVelocity;\r\n\t}\r\n\r\n\tset linearVelocity(value: Vector3) {\r\n\t\tthis._linearVelocity = value;\r\n\t\tif (this._btColliderObject) {\r\n\t\t\tvar btValue: number = Rigidbody3D._btTempVector30;\r\n\t\t\tUtils3D._convertToBulletVec3(value, btValue, true);\r\n\t\t\t(this.isSleeping) && (this.wakeUp());//可能会因睡眠导致设置线速度无效\r\n\t\t\tILaya3D.Physics3D._bullet.btRigidBody_setLinearVelocity(this._btColliderObject, btValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 每个轴的角度运动缩放因子,如果某一轴的值为0表示冻结在该轴的角度运动。\r\n\t */\r\n\tget angularFactor(): Vector3 {\r\n\t\treturn this._angularFactor;\r\n\t}\r\n\r\n\tset angularFactor(value: Vector3) {\r\n\t\tthis._angularFactor = value;\r\n\t\tvar btValue: number = Rigidbody3D._btTempVector30;\r\n\t\tUtils3D._convertToBulletVec3(value, btValue, false);\r\n\t\tILaya3D.Physics3D._bullet.btRigidBody_setAngularFactor(this._btColliderObject, btValue);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 角速度。\r\n\t */\r\n\tget angularVelocity(): Vector3 {\r\n\t\tif (this._btColliderObject)\r\n\t\t\tUtils3D._convertToLayaVec3(ILaya3D.Physics3D._bullet.btRigidBody_getAngularVelocity(this._btColliderObject), this._angularVelocity, true);\r\n\t\treturn this._angularVelocity;\r\n\t}\r\n\r\n\tset angularVelocity(value: Vector3) {\r\n\t\tthis._angularVelocity = value;\r\n\t\tif (this._btColliderObject) {\r\n\t\t\tvar btValue: number = Rigidbody3D._btTempVector30;\r\n\t\t\tUtils3D._convertToBulletVec3(value, btValue, true);\r\n\t\t\t(this.isSleeping) && (this.wakeUp());//可能会因睡眠导致设置角速度无效\r\n\t\t\tILaya3D.Physics3D._bullet.btRigidBody_setAngularVelocity(this._btColliderObject, btValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 刚体所有扭力。\r\n\t */\r\n\tget totalTorque(): Vector3 {\r\n\t\tif (this._btColliderObject) {\r\n\t\t\tvar btTotalTorque: number = ILaya3D.Physics3D._bullet.btRigidBody_getTotalTorque(this._btColliderObject);\r\n\t\t\tUtils3D._convertToLayaVec3(btTotalTorque, this._totalTorque, true);\r\n\t\t\treturn this._totalTorque;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否进行碰撞检测。\r\n\t */\r\n\tget detectCollisions(): boolean {\r\n\t\treturn this._detectCollisions;\r\n\t}\r\n\r\n\tset detectCollisions(value: boolean) {\r\n\t\tif (this._detectCollisions !== value) {\r\n\t\t\tthis._detectCollisions = value;\r\n\r\n\t\t\tif (this._colliderShape && this._enabled && this._simulation) {\r\n\t\t\t\tthis._simulation._removeRigidBody(this);\r\n\t\t\t\tthis._simulation._addRigidBody(this, this._collisionGroup, value ? this._canCollideWith : 0);\r\n\t\t\t\t//_nativeColliderObject.getBroadphaseHandle().set_m_collisionFilterMask(value ? _canCollideWith : 0);//有延迟问题\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 是否处于睡眠状态。\r\n\t */\r\n\tget isSleeping(): boolean {\r\n\t\tif (this._btColliderObject)\r\n\t\t\treturn ILaya3D.Physics3D._bullet.btCollisionObject_getActivationState(this._btColliderObject) === PhysicsComponent.ACTIVATIONSTATE_ISLAND_SLEEPING;\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * 刚体睡眠的线速度阈值。\r\n\t */\r\n\tget sleepLinearVelocity(): number {\r\n\t\treturn ILaya3D.Physics3D._bullet.btRigidBody_getLinearSleepingThreshold(this._btColliderObject);\r\n\t}\r\n\r\n\tset sleepLinearVelocity(value: number) {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btRigidBody_setSleepingThresholds(this._btColliderObject, value, bt.btRigidBody_getAngularSleepingThreshold(this._btColliderObject));\r\n\t}\r\n\r\n\t/**\r\n\t * 刚体睡眠的角速度阈值。\r\n\t */\r\n\tget sleepAngularVelocity(): number {\r\n\t\treturn ILaya3D.Physics3D._bullet.btRigidBody_getAngularSleepingThreshold(this._btColliderObject);\r\n\t}\r\n\r\n\tset sleepAngularVelocity(value: number) {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btRigidBody_setSleepingThresholds(this._btColliderObject, bt.btRigidBody_getLinearSleepingThreshold(this._btColliderObject), value);\r\n\t}\r\n\r\n\tget btColliderObject():number{\r\n\t\treturn this._btColliderObject;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\t\r\n\tset constaintRigidbodyA(value:ConstraintComponent){\r\n\t\tthis._constaintRigidbodyA = value;\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\t\r\n\tget constaintRigidbodyA():ConstraintComponent{\r\n\t\treturn this._constaintRigidbodyA;\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\t\r\n\tset constaintRigidbodyB(value:ConstraintComponent){\r\n\t\tthis._constaintRigidbodyB = value;\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\t\r\n\tget constaintRigidbodyB():ConstraintComponent{\r\n\t\treturn this._constaintRigidbodyB;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>RigidBody3D</code> 实例。\r\n\t * @param collisionGroup 所属碰撞组。\r\n\t * @param canCollideWith 可产生碰撞的碰撞组。\r\n\t */\r\n\tconstructor(collisionGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER, canCollideWith: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER) {\r\n\t\t//LinkedConstraints = new List<Constraint>();\r\n\t\tsuper(collisionGroup, canCollideWith);\r\n\t\tthis._controlBySimulation = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _updateMass(mass: number): void {\r\n\t\tif (this._btColliderObject && this._colliderShape) {\r\n\t\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t\tbt.btCollisionShape_calculateLocalInertia(this._colliderShape._btShape, mass, Rigidbody3D._btInertia);\r\n\t\t\tbt.btRigidBody_setMassProps(this._btColliderObject, mass, Rigidbody3D._btInertia);\r\n\t\t\tbt.btRigidBody_updateInertiaTensor(this._btColliderObject); //this was the major headache when I had to debug Slider and Hinge constraint\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _onScaleChange(scale: Vector3): void {\r\n\t\tsuper._onScaleChange(scale);\r\n\t\tthis._updateMass(this._isKinematic ? 0 : this._mass);//修改缩放需要更新惯性\r\n\t}\r\n\r\n\t/**\r\n\t * \t@internal\r\n\t */\r\n\t_derivePhysicsTransformation(force: boolean): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar btColliderObject: number = this._btColliderObject;\r\n\t\tvar oriTransform: number = bt.btCollisionObject_getWorldTransform(btColliderObject);\r\n\t\tvar transform: number =Rigidbody3D._btTransform0;//must use another transform\r\n\t\tbt.btTransform_equal(transform,oriTransform);\r\n\t\tthis._innerDerivePhysicsTransformation(transform, force);\r\n\t\tbt.btRigidBody_setCenterOfMassTransform(btColliderObject, transform);//RigidBody use 'setCenterOfMassTransform' instead(influence interpolationWorldTransform and so on) ,or stepSimulation may return old transform because interpolation.\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_onAdded(): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar motionState: number = bt.layaMotionState_create();\r\n\t\tbt.layaMotionState_set_rigidBodyID(motionState, this._id);\r\n\t\tthis._btLayaMotionState = motionState;\r\n\t\tvar constructInfo: number = bt.btRigidBodyConstructionInfo_create(0.0, motionState, null, Rigidbody3D._btVector3Zero);\r\n\t\tvar btRigid: number = bt.btRigidBody_create(constructInfo);\r\n\t\tbt.btCollisionObject_setUserIndex(btRigid, this.id);\r\n\t\tthis._btColliderObject = btRigid;\r\n\t\tsuper._onAdded();\r\n\t\tthis.mass = this._mass;\r\n\t\tthis.linearFactor = this._linearFactor;\r\n\t\tthis.angularFactor = this._angularFactor;\r\n\t\tthis.linearDamping = this._linearDamping;\r\n\t\tthis.angularDamping = this._angularDamping;\r\n\t\tthis.overrideGravity = this._overrideGravity;\r\n\t\tthis.gravity = this._gravity;\r\n\t\tthis.isKinematic = this._isKinematic;\r\n\t\tbt.btRigidBodyConstructionInfo_destroy(constructInfo);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_onEnable(){\r\n\t\tsuper._onEnable();\r\n\t\tif(this._constaintRigidbodyA){\r\n\t\t\tif(this._constaintRigidbodyA.connectedBody._simulation){\r\n\t\t\t\tthis._constaintRigidbodyA._createConstraint();\r\n\t\t\t\tthis._constaintRigidbodyA._onEnable();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this._constaintRigidbodyB){\r\n\t\t\tif(this._constaintRigidbodyB.ownBody._simulation){\r\n\t\t\t\tthis._constaintRigidbodyB._createConstraint();\r\n\t\t\t\tthis._constaintRigidbodyB._onEnable();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_onShapeChange(colShape: ColliderShape): void {\r\n\t\tsuper._onShapeChange(colShape);\r\n\t\t//TODO:此时已经加入场景,只影响mass为0,函数内部设置的flas是否为static无效\t\t\t\r\n\t\tif (this._isKinematic) {\r\n\t\t\tthis._updateMass(0);\r\n\t\t} else {\r\n\t\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t\tbt.btRigidBody_setCenterOfMassTransform(this._btColliderObject, bt.btCollisionObject_getWorldTransform(this._btColliderObject));//修改Shape会影响坐标,需要更新插值坐标,否则物理引擎motionState.setWorldTrans数据为旧数据\r\n\t\t\tthis._updateMass(this._mass);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any): void {\r\n\t\t(data.friction != null) && (this.friction = data.friction);\r\n\t\t(data.rollingFriction != null) && (this.rollingFriction = data.rollingFriction);\r\n\t\t(data.restitution != null) && (this.restitution = data.restitution);\r\n\t\t(data.isTrigger != null) && (this.isTrigger = data.isTrigger);\r\n\t\t(data.mass != null) && (this.mass = data.mass);\r\n\t\t(data.linearDamping != null) && (this.linearDamping = data.linearDamping);\r\n\t\t(data.angularDamping != null) && (this.angularDamping = data.angularDamping);\r\n\t\t(data.overrideGravity != null) && (this.overrideGravity = data.overrideGravity);\r\n\r\n\t\tif (data.linearFactor != null) {\r\n\t\t\tvar linFac = this.linearFactor;\r\n\t\t\tlinFac.fromArray(data.linearFactor);\r\n\t\t\tthis.linearFactor = linFac;\r\n\t\t}\r\n\t\tif (data.angularFactor != null) {\r\n\t\t\tvar angFac = this.angularFactor;\r\n\t\t\tangFac.fromArray(data.angularFactor);\r\n\t\t\tthis.angularFactor = angFac;\r\n\t\t}\r\n\r\n\t\tif (data.gravity) {\r\n\t\t\tthis.gravity.fromArray(data.gravity);\r\n\t\t\tthis.gravity = this.gravity;\r\n\t\t}\r\n\t\tsuper._parse(data);\r\n\t\tthis._parseShape(data.shapes);\r\n\t\t(data.isKinematic != null) && (this.isKinematic = data.isKinematic);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _onDestroy(): void {\r\n\t\tILaya3D.Physics3D._bullet.btMotionState_destroy(this._btLayaMotionState);\r\n\r\n\t\t////Remove constraints safely\r\n\t\t//var toremove = new FastList<Constraint>();\r\n\t\t//foreach (var c in LinkedConstraints)\r\n\t\t//{\r\n\t\t//toremove.Add(c);\r\n\t\t//}\r\n\r\n\t\t//foreach (var disposable in toremove)\r\n\t\t//{\r\n\t\t//disposable.Dispose();\r\n\t\t//}\r\n\r\n\t\t//LinkedConstraints.Clear();\r\n\t\t////~Remove constraints\r\n\r\n\t\tsuper._onDestroy();\r\n\t\tthis._btLayaMotionState = null;\r\n\t\tthis._gravity = null;\r\n\t\tthis._totalTorque = null;\r\n\t\tthis._linearVelocity = null;\r\n\t\tthis._angularVelocity = null;\r\n\t\tthis._linearFactor = null;\r\n\t\tthis._angularFactor = null;\r\n\t\tif(this.constaintRigidbodyA)\r\n\t\t\tthis.constaintRigidbodyA._breakConstrained();\t\r\n\t\tif(this.constaintRigidbodyB){\r\n\t\t\tthis.constaintRigidbodyB.connectedBody = null;\r\n\t\t\tthis.constaintRigidbodyB._onDisable();\r\n\t\t}\r\n\t\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_addToSimulation(): void {\r\n\t\tthis._simulation._addRigidBody(this, this._collisionGroup, this._detectCollisions ? this._canCollideWith : 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_removeFromSimulation(): void {\r\n\t\tthis._simulation._removeRigidBody(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(dest: Component): void {\r\n\t\tsuper._cloneTo(dest);\r\n\t\tvar destRigidbody3D: Rigidbody3D = (<Rigidbody3D>dest);\r\n\t\tdestRigidbody3D.isKinematic = this._isKinematic;\r\n\t\tdestRigidbody3D.mass = this._mass;\r\n\t\tdestRigidbody3D.gravity = this._gravity;\r\n\t\tdestRigidbody3D.angularDamping = this._angularDamping;\r\n\t\tdestRigidbody3D.linearDamping = this._linearDamping;\r\n\t\tdestRigidbody3D.overrideGravity = this._overrideGravity;\r\n\t\t//destRigidbody3D.totalTorque = _totalTorque;\r\n\t\tdestRigidbody3D.linearVelocity = this._linearVelocity;\r\n\t\tdestRigidbody3D.angularVelocity = this._angularVelocity;\r\n\t\tdestRigidbody3D.linearFactor = this._linearFactor;\r\n\t\tdestRigidbody3D.angularFactor = this._angularFactor;\r\n\t\tdestRigidbody3D.detectCollisions = this._detectCollisions;\r\n\t}\r\n\r\n\t/**\r\n\t * 应用作用力。\r\n\t * @param\tforce 作用力。\r\n\t * @param\tlocalOffset 偏移,如果为null则为中心点\r\n\t */\r\n\tapplyForce(force: Vector3, localOffset: Vector3 = null): void {\r\n\t\tif (this._btColliderObject == null)\r\n\t\t\tthrow \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar btForce: number = Rigidbody3D._btTempVector30;\r\n\t\tbt.btVector3_setValue(btForce, -force.x, force.y, force.z);\r\n\t\tif (localOffset) {\r\n\t\t\tvar btOffset: number = Rigidbody3D._btTempVector31;\r\n\t\t\tbt.btVector3_setValue(btOffset, -localOffset.x, localOffset.y, localOffset.z);\r\n\t\t\tbt.btRigidBody_applyForce(this._btColliderObject, btForce, btOffset);\r\n\t\t} else {\r\n\t\t\tbt.btRigidBody_applyCentralForce(this._btColliderObject, btForce);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 应用扭转力。\r\n\t * @param\ttorque 扭转力。\r\n\t */\r\n\tapplyTorque(torque: Vector3): void {\r\n\t\tif (this._btColliderObject == null)\r\n\t\t\tthrow \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n\t\tvar bullet: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar btTorque: number = Rigidbody3D._btTempVector30;\r\n\t\tbullet.btVector3_setValue(btTorque, -torque.x, torque.y, torque.z);\r\n\t\tbullet.btRigidBody_applyTorque(this._btColliderObject, btTorque);\r\n\t}\r\n\r\n\t/**\r\n\t * 应用冲量。\r\n\t * @param\timpulse 冲量。\r\n\t * @param   localOffset 偏移,如果为null则为中心点。\r\n\t */\r\n\tapplyImpulse(impulse: Vector3, localOffset: Vector3 = null): void {\r\n\t\tif (this._btColliderObject == null)\r\n\t\t\tthrow \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btVector3_setValue(Rigidbody3D._btImpulse, -impulse.x, impulse.y, impulse.z);\r\n\t\tif (localOffset) {\r\n\t\t\tbt.btVector3_setValue(Rigidbody3D._btImpulseOffset, -localOffset.x, localOffset.y, localOffset.z);\r\n\t\t\tbt.btRigidBody_applyImpulse(this._btColliderObject, Rigidbody3D._btImpulse, Rigidbody3D._btImpulseOffset);\r\n\t\t} else {\r\n\t\t\tbt.btRigidBody_applyCentralImpulse(this._btColliderObject, Rigidbody3D._btImpulse);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 应用扭转冲量。\r\n\t * @param\ttorqueImpulse\r\n\t */\r\n\tapplyTorqueImpulse(torqueImpulse: Vector3): void {\r\n\t\tif (this._btColliderObject == null)\r\n\t\t\tthrow \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar btTorqueImpulse: number = Rigidbody3D._btTempVector30;\r\n\t\tbt.btVector3_setValue(btTorqueImpulse, -torqueImpulse.x, torqueImpulse.y, torqueImpulse.z);\r\n\t\tbt.btRigidBody_applyTorqueImpulse(this._btColliderObject, btTorqueImpulse);\r\n\t}\r\n\r\n\t/**\r\n\t * 唤醒刚体。\r\n\t */\r\n\twakeUp(): void {\r\n\t\tthis._btColliderObject && (ILaya3D.Physics3D._bullet.btCollisionObject_activate(this._btColliderObject, false));\r\n\t}\r\n\r\n\t/**\r\n\t *清除应用到刚体上的所有力。\r\n\t */\r\n\tclearForces(): void {\r\n\t\tvar rigidBody: number = this._btColliderObject;\r\n\t\tif (rigidBody == null)\r\n\t\t\tthrow \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btRigidBody_clearForces(rigidBody);\r\n\t\tvar btZero: number = Rigidbody3D._btVector3Zero;\r\n\t\tbt.btCollisionObject_setInterpolationLinearVelocity(rigidBody, btZero);\r\n\t\tbt.btRigidBody_setLinearVelocity(rigidBody, btZero);\r\n\t\tbt.btCollisionObject_setInterpolationAngularVelocity(rigidBody, btZero);\r\n\t\tbt.btRigidBody_setAngularVelocity(rigidBody, btZero);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { CannonColliderShape } from \"../physicsCannon/shape/CannonColliderShape\";\r\nimport { CannonPhysicsComponent } from \"../physicsCannon/CannonPhysicsComponent\";\r\nimport { CannonPhysicsSimulation } from \"../physicsCannon/CannonPhysicsSimulation\";\r\nimport { CannonBoxColliderShape } from \"../physicsCannon/shape/CannonBoxColliderShape\";\r\nimport { CannonRigidbody3D } from \"../physicsCannon/CannonRigidbody3D\";\r\nimport { StaticPlaneColliderShape } from \"./shape/StaticPlaneColliderShape\";\r\nimport { ColliderShape } from \"./shape/ColliderShape\";\r\nimport { CompoundColliderShape } from \"./shape/CompoundColliderShape\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\";\r\nimport { PhysicsSimulation } from \"./PhysicsSimulation\";\r\nimport { BoxColliderShape } from \"./shape/BoxColliderShape\";\r\nimport { CylinderColliderShape } from \"./shape/CylinderColliderShape\";\r\nimport { CharacterController } from \"./CharacterController\";\r\nimport { Rigidbody3D } from \"./Rigidbody3D\";\r\n\r\nexport class Physics3D {\r\n    /**@internal */\r\n    static _bullet: any = null;\r\n    /**@internal */\r\n    static _cannon:any = null;\r\n    /**@internal */\r\n    static _enablePhysics: Boolean = false;\r\n\r\n    /**@internal */\r\n    static __bulletinit__(){\r\n        this._bullet = (window as any).Physics3D;\r\n        if(this._bullet){\r\n            StaticPlaneColliderShape.__init__();\r\n            ColliderShape.__init__();\r\n            CompoundColliderShape.__init__();\r\n            PhysicsComponent.__init__();\r\n            PhysicsSimulation.__init__();\r\n            BoxColliderShape.__init__();\r\n            CylinderColliderShape.__init__();\r\n            CharacterController.__init__();\r\n            Rigidbody3D.__init__();\r\n        }   \r\n    }\r\n\r\n    static __cannoninit__(){\r\n        this._cannon = window.CANNON;\r\n        if(!this._cannon)\r\n            return;\r\n        CannonColliderShape.__init__();\r\n        CannonPhysicsComponent.__init__();\r\n        CannonPhysicsSimulation.__init__();\r\n        CannonBoxColliderShape.__init__();\r\n        CannonRigidbody3D.__init__();\r\n    }\r\n\r\n}","import { IClone } from \"./laya/d3/core/IClone\"\r\nimport { Vector3 } from \"./laya/d3/math/Vector3\"\r\nimport { PBRRenderQuality } from \"./laya/d3/core/material/PBRRenderQuality\";\r\nimport { Physics3D } from \"./laya/d3/physics/Physics3D\";\r\nimport { ILaya3D } from \"./ILaya3D\";\r\nimport { CannonPhysicsSettings } from \"./laya/d3/physicsCannon/CannonPhysicsSettings\";\r\n\r\n/**\r\n * <code>Config3D</code> 类用于创建3D初始化配置。\r\n */\r\nexport class Config3D implements IClone {\r\n\t/**@internal*/\r\n\tstatic _config: Config3D = new Config3D();\r\n\r\n\r\n\tstatic get useCannonPhysics():boolean{\r\n\t\treturn Config3D._config.isUseCannonPhysicsEngine;\r\n\t}\r\n\tstatic set useCannonPhysics(value:boolean){\r\n\t\tConfig3D._config.isUseCannonPhysicsEngine = value;\r\n\t\tif(value) {\r\n\t\t\tPhysics3D.__cannoninit__();\r\n\t\t\tif(!ILaya3D.Scene3D.cannonPhysicsSettings) ILaya3D.Scene3D.cannonPhysicsSettings = new CannonPhysicsSettings();\r\n\t\t}\t\r\n\t}\r\n\t/**@internal*/\r\n\tprivate _defaultPhysicsMemory: number = 16;\r\n\t/**@internal*/\r\n\tprivate _maxLightCount: number = 32;\r\n\t/**@internal*/\r\n\tprivate _lightClusterCount: Vector3 = new Vector3(12, 12, 12);\r\n\r\n\t/**@internal*/\r\n\t_editerEnvironment: boolean = false;\r\n\t/**@internal*/\r\n\t_multiLighting: boolean;\r\n\t/**@internal*/\r\n\t_maxAreaLightCountPerClusterAverage: number;\r\n\r\n\t/** 是否开启抗锯齿。*/\r\n\tisAntialias: boolean = true;\r\n\t/** 画布是否包含透明通道。*/\r\n\tisAlpha: boolean = false;\r\n\t/** 画布是否预乘。*/\r\n\tpremultipliedAlpha: boolean = true;\r\n\t/** 画布是否开启模板缓冲。*/\r\n\tisStencil: boolean = true;\r\n\t/** 是否开启多光源,如果场景不需要多光源，关闭后可提升性能。*/\r\n\tenableMultiLight: boolean = true;\r\n\t/** 是否开启八叉树裁剪。*/\r\n\toctreeCulling: boolean = false;\r\n\t/** 八叉树初始化尺寸。*/\r\n\toctreeInitialSize: number = 64.0;\r\n\t/** 八叉树初始化中心。*/\r\n\toctreeInitialCenter: Vector3 = new Vector3(0, 0, 0);\r\n\t/** 八叉树最小尺寸。*/\r\n\toctreeMinNodeSize: number = 2.0;\r\n\t/** 八叉树松散值。*/\r\n\toctreeLooseness: number = 1.25;\r\n\t\r\n\r\n\t/** \r\n\t * 是否开启视锥裁剪调试。\r\n\t * 如果开启八叉树裁剪,使用红色绘制高层次八叉树节点包围盒,使用蓝色绘制低层次八叉节点包围盒,精灵包围盒和八叉树节点包围盒颜色一致,但Alpha为非透明。如果视锥完全包含八叉树节点,八叉树节点包围盒和精灵包围盒变为蓝色,同样精灵包围盒的Alpha为非透明。\r\n\t * 如果不开启八叉树裁剪,使用绿色像素线绘制精灵包围盒。\r\n\t */\r\n\tdebugFrustumCulling: boolean = false;\r\n\t/** PBR材质渲染质量。*/\r\n\tpbrRenderQuality: PBRRenderQuality = PBRRenderQuality.High;\r\n\t/** 是否使用CANNONJS物理引擎*/\r\n\tisUseCannonPhysicsEngine:boolean = false;\r\n\t/**\r\n\t * 默认物理功能初始化内存，单位为M。\r\n\t */\r\n\tget defaultPhysicsMemory(): number {\r\n\t\treturn this._defaultPhysicsMemory;\r\n\t}\r\n\r\n\tset defaultPhysicsMemory(value: number) {\r\n\t\tif (value < 16)//必须大于16M\r\n\t\t\tthrow \"defaultPhysicsMemory must large than 16M\";\r\n\t\tthis._defaultPhysicsMemory = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大光源数量。\r\n\t */\r\n\tget maxLightCount(): number {\r\n\t\treturn this._maxLightCount;\r\n\t}\r\n\r\n\tset maxLightCount(value: number) {\r\n\t\tif (value > 2048) {\r\n\t\t\tthis._maxLightCount = 2048;\r\n\t\t\tconsole.warn(\"Config3D: maxLightCount must less equal 2048.\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._maxLightCount = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X、Y、Z轴的光照集群数量,Z值会影响Cluster接受区域光(点光、聚光)影响的数量,Math.floor(2048 / lightClusterCount.z - 1) * 4 为每个Cluster的最大平均接受区域光数量,如果每个Cluster所接受光源影响的平均数量大于该值，则较远的Cluster会忽略其中多余的光照影响。\r\n\t */\r\n\tget lightClusterCount(): Vector3 {\r\n\t\treturn this._lightClusterCount;\r\n\t}\r\n\r\n\tset lightClusterCount(value: Vector3) {\r\n\t\tif (value.x > 128 || value.y > 128 || value.z > 128) {\r\n\t\t\tthis._lightClusterCount.setValue(Math.min(value.x, 128), Math.min(value.y, 128), Math.min(value.z, 128));\r\n\t\t\tconsole.warn(\"Config3D: lightClusterCount X and Y、Z must less equal 128.\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalue.cloneTo(this._lightClusterCount);\r\n\t\t}\r\n\r\n\t\tvar maxAreaLightCountWithZ = Math.floor(2048 / this._lightClusterCount.z - 1) * 4;\r\n\t\tif (maxAreaLightCountWithZ < this._maxLightCount)\r\n\t\t\tconsole.warn(\"Config3D: if the area light(PointLight、SpotLight) count is large than \" + maxAreaLightCountWithZ + \",maybe the far away culster will ingonre some light.\");\r\n\t\tthis._maxAreaLightCountPerClusterAverage = Math.min(maxAreaLightCountWithZ, this._maxLightCount);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Config3D</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._maxAreaLightCountPerClusterAverage = Math.min(Math.floor(2048 / this._lightClusterCount.z - 1) * 4, this._maxLightCount);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(dest: any): void {//[实现IClone接口]\r\n\t\tvar destConfig3D: Config3D = (<Config3D>dest);\r\n\t\tdestConfig3D._defaultPhysicsMemory = this._defaultPhysicsMemory;\r\n\t\tdestConfig3D._editerEnvironment = this._editerEnvironment;\r\n\t\tdestConfig3D.isAntialias = this.isAntialias;\r\n\t\tdestConfig3D.isAlpha = this.isAlpha;\r\n\t\tdestConfig3D.premultipliedAlpha = this.premultipliedAlpha;\r\n\t\tdestConfig3D.isStencil = this.isStencil;\r\n\t\tdestConfig3D.octreeCulling = this.octreeCulling;\r\n\t\tthis.octreeInitialCenter.cloneTo(destConfig3D.octreeInitialCenter);\r\n\t\tdestConfig3D.octreeInitialSize = this.octreeInitialSize;\r\n\t\tdestConfig3D.octreeMinNodeSize = this.octreeMinNodeSize;\r\n\t\tdestConfig3D.octreeLooseness = this.octreeLooseness;\r\n\t\tdestConfig3D.debugFrustumCulling = this.debugFrustumCulling;\r\n\t\tdestConfig3D.maxLightCount = this.maxLightCount;\r\n\t\tdestConfig3D.enableMultiLight = this.enableMultiLight;\r\n\t\tvar lightClusterCount: Vector3 = destConfig3D.lightClusterCount;\r\n\t\tthis.lightClusterCount.cloneTo(lightClusterCount);\r\n\t\tdestConfig3D.lightClusterCount = lightClusterCount;\r\n\t\tdestConfig3D.pbrRenderQuality = this.pbrRenderQuality;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {//[实现IClone接口]\r\n\t\tvar dest: Config3D = new Config3D();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n(window as any).Config3D = Config3D;\r\n\r\n","import { Keyframe } from \"../core/Keyframe\"\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class KeyframeNode {\r\n\tprivate _ownerPath: string[] = [];\r\n\tprivate _propertys: string[] = [];\r\n\r\n\t/**@internal */\r\n\t_keyFrames: Keyframe[] = [];\r\n\t/**@internal */\r\n\t_indexInList: number;\r\n\r\n\t/**@internal */\r\n\ttype: number;\r\n\t/**@internal */\r\n\tfullPath: string;\r\n\t/**@internal */\r\n\tpropertyOwner: string;\r\n\r\n\t/**\r\n\t * 精灵路径个数。\r\n\t */\r\n\tget ownerPathCount(): number {\r\n\t\treturn this._ownerPath.length;\r\n\t}\r\n\r\n\t/**\r\n\t * 属性路径个数。\r\n\t */\r\n\tget propertyCount(): number {\r\n\t\treturn this._propertys.length;\r\n\t}\r\n\r\n\t/**\r\n\t * 帧个数。\r\n\t */\r\n\tget keyFramesCount(): number {\r\n\t\treturn this._keyFrames.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setOwnerPathCount(value: number): void {\r\n\t\tthis._ownerPath.length = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setOwnerPathByIndex(index: number, value: string): void {\r\n\t\tthis._ownerPath[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_joinOwnerPath(sep: string): string {\r\n\t\treturn this._ownerPath.join(sep);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setPropertyCount(value: number): void {\r\n\t\tthis._propertys.length = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setPropertyByIndex(index: number, value: string): void {\r\n\t\tthis._propertys[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_joinProperty(sep: string): string {\r\n\t\treturn this._propertys.join(sep);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setKeyframeCount(value: number): void {\r\n\t\tthis._keyFrames.length = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setKeyframeByIndex(index: number, value: Keyframe): void {\r\n\t\tthis._keyFrames[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取精灵路径。\r\n\t * @param index 索引。\r\n\t */\r\n\tgetOwnerPathByIndex(index: number): string {\r\n\t\treturn this._ownerPath[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取属性路径。\r\n\t * @param index 索引。\r\n\t */\r\n\tgetPropertyByIndex(index: number): string {\r\n\t\treturn this._propertys[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取帧。\r\n\t * @param index 索引。\r\n\t */\r\n\tgetKeyframeByIndex(index: number): Keyframe {\r\n\t\treturn this._keyFrames[index];\r\n\t}\r\n}\r\n\r\n// native\r\n/*if ((window as any).conch && (window as any).conchKeyframeNode) {\r\n\t//@ts-ignore\r\n\tKeyframeNode = (window as any).conchKeyframeNode;\r\n}\r\nif ((window as any).qq && (window as any).qq.webglPlus) {\r\n\t//@ts-ignore\r\n\tKeyframeNode = (window as any).qq.webglPlus.conchKeyframeNode;\r\n}*/","/**\r\n * <code>AnimationEvent</code> 类用于实现动画事件。\r\n */\r\nexport class AnimationEvent {\r\n\t/** 事件触发时间。*/\r\n\ttime: number;\r\n\t/** 事件触发名称。*/\r\n\teventName: string;\r\n\t/** 事件触发参数。*/\r\n\tparams: any[];\r\n\r\n\t/**\r\n\t * 创建一个 <code>AnimationEvent</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"./IClone\";\r\n/**\r\n\t * <code>KeyFrame</code> 类用于创建关键帧实例。\r\n\t */\r\nexport class Keyframe implements IClone {\r\n\t/**时间。*/\r\n\ttime: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>KeyFrame</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destKeyFrame: Keyframe = (<Keyframe>destObject);\r\n\t\tdestKeyFrame.time = this.time;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: Keyframe = new Keyframe();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Keyframe } from \"./Keyframe\";\r\n/**\r\n\t * <code>FloatKeyFrame</code> 类用于创建浮点关键帧实例。\r\n\t */\r\nexport class FloatKeyframe extends Keyframe {\r\n\tinTangent: number;\r\n\toutTangent: number;\r\n\tvalue: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>FloatKeyFrame</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destKeyFrame: FloatKeyframe = (<FloatKeyframe>destObject);\r\n\t\tdestKeyFrame.inTangent = this.inTangent;\r\n\t\tdestKeyFrame.outTangent = this.outTangent;\r\n\t\tdestKeyFrame.value = this.value;\r\n\t}\r\n\r\n}\r\n\r\n// native\r\n/*if ((window as any).conch && (window as any).conchFloatKeyframe) {\r\n\t//@ts-ignore\r\n\tFloatKeyframe = (window as any).conchFloatKeyframe;\r\n}\r\nif ((window as any).qq && (window as any).qq.webglPlus) {\r\n\t//@ts-ignore\r\n\tFloatKeyframe = (window as any).qq.webglPlus.conchFloatKeyframe;\r\n}*/\r\n\r\n\r\n\r\n","import { Keyframe } from \"./Keyframe\";\r\nimport { Quaternion } from \"../math/Quaternion\"\r\nimport { Vector4 } from \"../math/Vector4\"\r\n\r\n/**\r\n * <code>QuaternionKeyframe</code> 类用于创建四元数关键帧实例。\r\n */\r\nexport class QuaternionKeyframe extends Keyframe {\r\n\tinTangent: Vector4 = new Vector4();\r\n\toutTangent: Vector4 = new Vector4();\r\n\tvalue: Quaternion = new Quaternion();\r\n\r\n\t/**\r\n\t * 创建一个 <code>QuaternionKeyframe</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t * @override\r\n\t */\r\n\tcloneTo(dest: any): void {\r\n\t\tsuper.cloneTo(dest);\r\n\t\tvar destKeyFarme: QuaternionKeyframe = (<QuaternionKeyframe>dest);\r\n\t\tthis.inTangent.cloneTo(destKeyFarme.inTangent);\r\n\t\tthis.outTangent.cloneTo(destKeyFarme.outTangent);\r\n\t\tthis.value.cloneTo(destKeyFarme.value);\r\n\t}\r\n}\r\n\r\n// native\r\n/*if ((window as any).conch && (window as any).conchFloatArrayKeyframe) {\r\n\t//@ts-ignore\r\n\tQuaternionKeyframe = (window as any).conchFloatArrayKeyframe;\r\n}\r\nif ((window as any).qq && (window as any).qq.webglPlus) {\r\n\t//@ts-ignore\r\n\tQuaternionKeyframe = (window as any).qq.webglPlus.conchFloatArrayKeyframe;\r\n}*/\r\n\r\n","import { Keyframe } from \"./Keyframe\";\r\nimport { Vector3 } from \"../math/Vector3\"\r\n\r\n/**\r\n * <code>Vector3Keyframe</code> 类用于创建三维向量关键帧实例。\r\n */\r\nexport class Vector3Keyframe extends Keyframe {\r\n\tinTangent: Vector3 = new Vector3();\r\n\toutTangent: Vector3 = new Vector3();\r\n\tvalue: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * 创建一个 <code>Vector3Keyframe</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t * @override\r\n\t */\r\n\tcloneTo(dest: any): void {\r\n\t\tsuper.cloneTo(dest);\r\n\t\tvar destKeyFarme: Vector3Keyframe = (<Vector3Keyframe>dest);\r\n\t\tthis.inTangent.cloneTo(destKeyFarme.inTangent);\r\n\t\tthis.outTangent.cloneTo(destKeyFarme.outTangent);\r\n\t\tthis.value.cloneTo(destKeyFarme.value);\r\n\t}\r\n}\r\n\r\n// native\r\n/*if ((window as any).conch && (window as any).conchFloatArrayKeyframe) {\r\n\t//@ts-ignore\r\n\tVector3Keyframe = (window as any).conchFloatArrayKeyframe;\r\n}\r\nif ((window as any).qq && (window as any).qq.webglPlus) {\r\n\t//@ts-ignore\r\n\tVector3Keyframe = (window as any).qq.webglPlus.conchFloatArrayKeyframe;\r\n}*/","import { KeyframeNode } from \"./KeyframeNode\";\r\nimport { KeyframeNodeList } from \"./KeyframeNodeList\";\r\nimport { AnimationEvent } from \"./AnimationEvent\";\r\nimport { FloatKeyframe } from \"../core/FloatKeyframe\"\r\nimport { QuaternionKeyframe } from \"../core/QuaternionKeyframe\"\r\nimport { Vector3Keyframe } from \"../core/Vector3Keyframe\"\r\nimport { ConchQuaternion } from \"../math/Native/ConchQuaternion\"\r\nimport { ConchVector3 } from \"../math/Native/ConchVector3\"\r\nimport { Quaternion } from \"../math/Quaternion\"\r\nimport { Vector3 } from \"../math/Vector3\"\r\nimport { Vector4 } from \"../math/Vector4\"\r\nimport { Render } from \"../../renders/Render\"\r\nimport { Byte } from \"../../utils/Byte\"\r\nimport { AnimationClip } from \"./AnimationClip\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class AnimationClipParser03 {\r\n\tprivate static _animationClip: AnimationClip;\r\n\tprivate static _reader: Byte;\r\n\tprivate static _strings: any[] = [];\r\n\tprivate static _BLOCK: any = { count: 0 };\r\n\tprivate static _DATA: any = { offset: 0, size: 0 };\r\n\r\n\tprivate static READ_DATA(): void {\r\n\t\tAnimationClipParser03._DATA.offset = AnimationClipParser03._reader.getUint32();\r\n\t\tAnimationClipParser03._DATA.size = AnimationClipParser03._reader.getUint32();\r\n\t}\r\n\r\n\tprivate static READ_BLOCK(): void {\r\n\t\tvar count: number = AnimationClipParser03._BLOCK.count = AnimationClipParser03._reader.getUint16();\r\n\t\tvar blockStarts: any[] = AnimationClipParser03._BLOCK.blockStarts = [];\r\n\t\tvar blockLengths: any[] = AnimationClipParser03._BLOCK.blockLengths = [];\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tblockStarts.push(AnimationClipParser03._reader.getUint32());\r\n\t\t\tblockLengths.push(AnimationClipParser03._reader.getUint32());\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static READ_STRINGS(): void {\r\n\t\tvar offset: number = AnimationClipParser03._reader.getUint32();\r\n\t\tvar count: number = AnimationClipParser03._reader.getUint16();\r\n\t\tvar prePos: number = AnimationClipParser03._reader.pos;\r\n\t\tAnimationClipParser03._reader.pos = offset + AnimationClipParser03._DATA.offset;\r\n\r\n\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\tAnimationClipParser03._strings[i] = AnimationClipParser03._reader.readUTFString();\r\n\t\tAnimationClipParser03._reader.pos = prePos;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic parse(clip: AnimationClip, reader: Byte): void {\r\n\t\tAnimationClipParser03._animationClip = clip;\r\n\t\tAnimationClipParser03._reader = reader;\r\n\t\tvar arrayBuffer = reader.__getBuffer();\r\n\t\tAnimationClipParser03.READ_DATA();\r\n\t\tAnimationClipParser03.READ_BLOCK();\r\n\t\tAnimationClipParser03.READ_STRINGS();\r\n\t\tfor (var i: number = 0, n: number = AnimationClipParser03._BLOCK.count; i < n; i++) {\r\n\t\t\tvar index: number = reader.getUint16();\r\n\t\t\tvar blockName: string = AnimationClipParser03._strings[index];\r\n\t\t\tvar fn: Function = AnimationClipParser03[\"READ_\" + blockName];\r\n\t\t\tif (fn == null)\r\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\r\n\t\t\telse\r\n\t\t\t\tfn.call(null);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic READ_ANIMATIONS(): void {\r\n\t\tvar i: number, j: number;\r\n\t\tvar node: KeyframeNode;\r\n\t\tvar reader: Byte = AnimationClipParser03._reader;\r\n\t\tvar buffer: ArrayBuffer = reader.__getBuffer();\r\n\r\n\t\tvar startTimeTypes: number[] = [];\r\n\t\tvar startTimeTypeCount: number = reader.getUint16();\r\n\t\tstartTimeTypes.length = startTimeTypeCount;\r\n\t\tfor (i = 0; i < startTimeTypeCount; i++)\r\n\t\t\tstartTimeTypes[i] = reader.getFloat32();\r\n\r\n\t\tvar clip: AnimationClip = AnimationClipParser03._animationClip;\r\n\t\tclip.name = AnimationClipParser03._strings[reader.getUint16()];\r\n\t\tvar clipDur: number = clip._duration = reader.getFloat32();\r\n\t\tclip.islooping = !!reader.getByte();\r\n\t\tclip._frameRate = reader.getInt16();\r\n\t\tvar nodeCount: number = reader.getInt16();\r\n\t\tvar nodes: KeyframeNodeList = clip._nodes;\r\n\t\tnodes.count = nodeCount;\r\n\t\tvar nodesMap: any = clip._nodesMap = {};\r\n\t\tvar nodesDic: any = clip._nodesDic = {};\r\n\r\n\t\tfor (i = 0; i < nodeCount; i++) {\r\n\t\t\tnode = new KeyframeNode();\r\n\t\t\tnodes.setNodeByIndex(i, node);\r\n\t\t\tnode._indexInList = i;\r\n\t\t\tvar type: number = node.type = reader.getUint8();\r\n\r\n\t\t\tvar pathLength: number = reader.getUint16();\r\n\t\t\tnode._setOwnerPathCount(pathLength);\r\n\t\t\tfor (j = 0; j < pathLength; j++)\r\n\t\t\t\tnode._setOwnerPathByIndex(j, AnimationClipParser03._strings[reader.getUint16()]);//TODO:如果只有根节点并且为空，是否可以和componentType一样优化。\r\n\r\n\t\t\tvar nodePath: string = node._joinOwnerPath(\"/\");\r\n\t\t\tvar mapArray: KeyframeNode[] = nodesMap[nodePath];\r\n\t\t\t(mapArray) || (nodesMap[nodePath] = mapArray = []);\r\n\t\t\tmapArray.push(node);\r\n\r\n\t\t\tnode.propertyOwner = AnimationClipParser03._strings[reader.getUint16()];\r\n\r\n\t\t\tvar propertyLength: number = reader.getUint16();\r\n\t\t\tnode._setPropertyCount(propertyLength);\r\n\t\t\tfor (j = 0; j < propertyLength; j++)\r\n\t\t\t\tnode._setPropertyByIndex(j, AnimationClipParser03._strings[reader.getUint16()]);\r\n\r\n\t\t\tvar fullPath: string = nodePath + \".\" + node.propertyOwner + \".\" + node._joinProperty(\".\");\r\n\t\t\tnodesDic[fullPath] = node;\r\n\t\t\tnode.fullPath = fullPath;\r\n\r\n\t\t\tvar keyframeCount: number = reader.getUint16();\r\n\t\t\tnode._setKeyframeCount(keyframeCount);\r\n\t\t\tvar startTime: number;\r\n\t\t\tfor (j = 0; j < keyframeCount; j++) {\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tvar floatKeyframe: FloatKeyframe = new FloatKeyframe();\r\n\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\r\n\t\t\t\t\t\tstartTime = floatKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\tfloatKeyframe.inTangent = reader.getFloat32();\r\n\t\t\t\t\t\tfloatKeyframe.outTangent = reader.getFloat32();\r\n\t\t\t\t\t\tfloatKeyframe.value = reader.getFloat32();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\tvar floatArrayKeyframe: Vector3Keyframe = new Vector3Keyframe();\r\n\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\r\n\r\n\t\t\t\t\t\tstartTime = floatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\r\n\t\t\t\t\t\tif (Render.supportWebGLPlusAnimation) {\r\n\r\n\t\t\t\t\t\t\tvar data: Float32Array = ((<any>floatArrayKeyframe)).data = new Float32Array(3 * 3);\r\n\t\t\t\t\t\t\tfor (var k: number = 0; k < 3; k++)\r\n\t\t\t\t\t\t\t\tdata[k] = reader.getFloat32();\r\n\t\t\t\t\t\t\tfor (k = 0; k < 3; k++)\r\n\t\t\t\t\t\t\t\tdata[3 + k] = reader.getFloat32();\r\n\t\t\t\t\t\t\tfor (k = 0; k < 3; k++)\r\n\t\t\t\t\t\t\t\tdata[6 + k] = reader.getFloat32();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tvar inTangent: Vector3 = floatArrayKeyframe.inTangent;\r\n\t\t\t\t\t\t\tvar outTangent: Vector3 = floatArrayKeyframe.outTangent;\r\n\t\t\t\t\t\t\tvar value: Vector3 = floatArrayKeyframe.value;\r\n\t\t\t\t\t\t\tinTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\tinTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\tinTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalue.x = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalue.y = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalue.z = reader.getFloat32();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tvar quaArrayKeyframe: QuaternionKeyframe = new QuaternionKeyframe();\r\n\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaArrayKeyframe);\r\n\t\t\t\t\t\tstartTime = quaArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\tif (Render.supportWebGLPlusAnimation) {\r\n\t\t\t\t\t\t\tdata = ((<any>quaArrayKeyframe)).data = new Float32Array(3 * 4);\r\n\t\t\t\t\t\t\tfor (k = 0; k < 4; k++)\r\n\t\t\t\t\t\t\t\tdata[k] = reader.getFloat32();\r\n\t\t\t\t\t\t\tfor (k = 0; k < 4; k++)\r\n\t\t\t\t\t\t\t\tdata[4 + k] = reader.getFloat32();\r\n\t\t\t\t\t\t\tfor (k = 0; k < 4; k++)\r\n\t\t\t\t\t\t\t\tdata[8 + k] = reader.getFloat32();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tvar inTangentQua: Vector4 = quaArrayKeyframe.inTangent;\r\n\t\t\t\t\t\t\tvar outTangentQua: Vector4 = quaArrayKeyframe.outTangent;\r\n\t\t\t\t\t\t\tvar valueQua: Quaternion = quaArrayKeyframe.value;\r\n\t\t\t\t\t\t\tinTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\tinTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\tinTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\tinTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalueQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalueQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalueQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalueQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"AnimationClipParser03:unknown type.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar eventCount: number = reader.getUint16();\r\n\t\tfor (i = 0; i < eventCount; i++) {\r\n\t\t\tvar event: AnimationEvent = new AnimationEvent();\r\n\t\t\tevent.time = Math.min(clipDur, reader.getFloat32());//TODO:事件时间可能大于动画总时长\r\n\t\t\tevent.eventName = AnimationClipParser03._strings[reader.getUint16()];\r\n\t\t\tvar params: any[];\r\n\t\t\tvar paramCount: number = reader.getUint16();\r\n\t\t\t(paramCount > 0) && (event.params = params = []);\r\n\r\n\t\t\tfor (j = 0; j < paramCount; j++) {\r\n\t\t\t\tvar eventType: number = reader.getByte();\r\n\t\t\t\tswitch (eventType) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tparams.push(!!reader.getByte());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tparams.push(reader.getInt32());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tparams.push(reader.getFloat32());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tparams.push(AnimationClipParser03._strings[reader.getUint16()]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error(\"unknown type.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tclip.addEvent(event);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","/**\r\n\t * <code>HalfFloatUtils</code> 类用于创建HalfFloat工具。\r\n\t */\r\n\texport class HalfFloatUtils {\r\n\t\t/**@internal */\r\n\t\tprivate static _buffer:ArrayBuffer = new ArrayBuffer(4);\r\n\t\t/**@internal */\r\n\t\tprivate static _floatView:Float32Array = new Float32Array(HalfFloatUtils._buffer);\r\n\t\t/**@internal */\r\n\t\tprivate static _uint32View:Uint32Array = new Uint32Array(HalfFloatUtils._buffer);\r\n\t\t\r\n\t\t/**@internal */\r\n\t\tprivate static _baseTable:Uint32Array = new Uint32Array(512);\r\n\t\t/**@internal */\r\n\t\tprivate static _shiftTable:Uint32Array = new Uint32Array(512);\r\n\t\t\r\n\t\t/**@internal */\r\n\t\tprivate static _mantissaTable:Uint32Array = new Uint32Array(2048);\r\n\t\t/**@internal */\r\n\t\tprivate static _exponentTable:Uint32Array = new Uint32Array(64);\r\n\t\t/**@internal */\r\n\t\tprivate static _offsetTable:Uint32Array = new Uint32Array(64);\r\n\t\t\r\n\t\t/**\r\n\t\t * @internal\r\n\t\t */\r\n\t\t static __init__():void {\r\n\t\t\tfor (var i:number = 0; i < 256; ++i) {\r\n\t\t\t\tvar e:number = i - 127;\r\n\t\t\t\t// very small number (0, -0)\r\n\t\t\t\tif (e < -27) {\r\n\t\t\t\t\tHalfFloatUtils._baseTable[i | 0x000] = 0x0000;\r\n\t\t\t\t\tHalfFloatUtils._baseTable[i | 0x100] = 0x8000;\r\n\t\t\t\t\tHalfFloatUtils._shiftTable[i | 0x000] = 24;\r\n\t\t\t\t\tHalfFloatUtils._shiftTable[i | 0x100] = 24;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t// small number (denorm)\r\n\t\t\t\t} else if (e < -14) {\r\n\t\t\t\t\tHalfFloatUtils._baseTable[i | 0x000] = 0x0400 >> (-e - 14);\r\n\t\t\t\t\tHalfFloatUtils._baseTable[i | 0x100] = (0x0400 >> (-e - 14)) | 0x8000;\r\n\t\t\t\t\tHalfFloatUtils._shiftTable[i | 0x000] = -e - 1;\r\n\t\t\t\t\tHalfFloatUtils._shiftTable[i | 0x100] = -e - 1;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t// normal number\r\n\t\t\t\t} else if (e <= 15) {\r\n\t\t\t\t\tHalfFloatUtils._baseTable[i | 0x000] = (e + 15) << 10;\r\n\t\t\t\t\tHalfFloatUtils._baseTable[i | 0x100] = ((e + 15) << 10) | 0x8000;\r\n\t\t\t\t\tHalfFloatUtils._shiftTable[i | 0x000] = 13;\r\n\t\t\t\t\tHalfFloatUtils._shiftTable[i | 0x100] = 13;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t// large number (Infinity, -Infinity)\r\n\t\t\t\t} else if (e < 128) {\r\n\t\t\t\t\tHalfFloatUtils._baseTable[i | 0x000] = 0x7c00;\r\n\t\t\t\t\tHalfFloatUtils._baseTable[i | 0x100] = 0xfc00;\r\n\t\t\t\t\tHalfFloatUtils._shiftTable[i | 0x000] = 24;\r\n\t\t\t\t\tHalfFloatUtils._shiftTable[i | 0x100] = 24;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t// stay (NaN, Infinity, -Infinity)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tHalfFloatUtils._baseTable[i | 0x000] = 0x7c00;\r\n\t\t\t\t\tHalfFloatUtils._baseTable[i | 0x100] = 0xfc00;\r\n\t\t\t\t\tHalfFloatUtils._shiftTable[i | 0x000] = 13;\r\n\t\t\t\t\tHalfFloatUtils._shiftTable[i | 0x100] = 13;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tHalfFloatUtils._mantissaTable[0] = 0;\r\n\t\t\tfor (i = 1; i < 1024; ++i) {\r\n\t\t\t\tvar m:number = i << 13;    // zero pad mantissa bits\r\n\t\t\t\te = 0;          // zero exponent\r\n\t\t\t\t\r\n\t\t\t\t// normalized\r\n\t\t\t\twhile ((m & 0x00800000) === 0) {\r\n\t\t\t\t\te -= 0x00800000;    // decrement exponent\r\n\t\t\t\t\tm <<= 1;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tm &= ~0x00800000;   // clear leading 1 bit\r\n\t\t\t\te += 0x38800000;    // adjust bias\r\n\t\t\t\t\r\n\t\t\t\tHalfFloatUtils._mantissaTable[i] = m | e;\r\n\t\t\t}\r\n\t\t\tfor (i = 1024; i < 2048; ++i) {\r\n\t\t\t\tHalfFloatUtils._mantissaTable[i] = 0x38000000 + ((i - 1024) << 13);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tHalfFloatUtils._exponentTable[0] = 0;\r\n\t\t\tfor (i = 1; i < 31; ++i) {\r\n\t\t\t\tHalfFloatUtils._exponentTable[i] = i << 23;\r\n\t\t\t}\r\n\t\t\tHalfFloatUtils._exponentTable[31] = 0x47800000;\r\n\t\t\tHalfFloatUtils._exponentTable[32] = 0x80000000;\r\n\t\t\tfor (i = 33; i < 63; ++i) {\r\n\t\t\t\tHalfFloatUtils._exponentTable[i] = 0x80000000 + ((i - 32) << 23);\r\n\t\t\t}\r\n\t\t\tHalfFloatUtils._exponentTable[63] = 0xc7800000;\r\n\t\t\t\r\n\t\t\tHalfFloatUtils._offsetTable[0] = 0;\r\n\t\t\tfor (i = 1; i < 64; ++i) {\r\n\t\t\t\tif (i === 32) {\r\n\t\t\t\t\tHalfFloatUtils._offsetTable[i] = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tHalfFloatUtils._offsetTable[i] = 1024;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * round a number to a half float number bits.\r\n\t\t * @param {number} num\r\n\t\t */\r\n\t\t static roundToFloat16Bits(num:number):number {\r\n\t\t\tHalfFloatUtils._floatView[0] = num;\r\n\t\t\tvar f:number = HalfFloatUtils._uint32View[0];\r\n\t\t\tvar e:number = (f >> 23) & 0x1ff;\r\n\t\t\treturn HalfFloatUtils._baseTable[e] + ((f & 0x007fffff) >> HalfFloatUtils._shiftTable[e]);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * convert a half float number bits to a number.\r\n\t\t * @param {number} float16bits - half float number bits\r\n\t\t */\r\n\t\t static convertToNumber(float16bits:number):number {\r\n\t\t\tvar m:number = float16bits >> 10;\r\n\t\t\tHalfFloatUtils._uint32View[0] = HalfFloatUtils._mantissaTable[HalfFloatUtils._offsetTable[m] + (float16bits & 0x3ff)] + HalfFloatUtils._exponentTable[m];\r\n\t\t\treturn HalfFloatUtils._floatView[0];\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","import { KeyframeNode } from \"./KeyframeNode\";\r\nimport { KeyframeNodeList } from \"./KeyframeNodeList\";\r\nimport { AnimationEvent } from \"./AnimationEvent\";\r\nimport { FloatKeyframe } from \"../core/FloatKeyframe\"\r\nimport { QuaternionKeyframe } from \"../core/QuaternionKeyframe\"\r\nimport { Vector3Keyframe } from \"../core/Vector3Keyframe\"\r\nimport { HalfFloatUtils } from \"../math/HalfFloatUtils\"\r\nimport { ConchQuaternion } from \"../math/Native/ConchQuaternion\"\r\nimport { ConchVector3 } from \"../math/Native/ConchVector3\"\r\nimport { Quaternion } from \"../math/Quaternion\"\r\nimport { Vector3 } from \"../math/Vector3\"\r\nimport { Vector4 } from \"../math/Vector4\"\r\nimport { AnimationClip } from \"./AnimationClip\";\r\nimport { Byte } from \"../../utils/Byte\";\r\nimport { Render } from \"../../renders/Render\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class AnimationClipParser04 {\r\n\tprivate static _animationClip: AnimationClip;\r\n\tprivate static _reader: Byte;\r\n\tprivate static _strings: any[] = [];\r\n\tprivate static _BLOCK: any = { count: 0 };\r\n\tprivate static _DATA: any = { offset: 0, size: 0 };\r\n\tprivate static _version: string;\r\n\r\n\tprivate static READ_DATA(): void {\r\n\t\tAnimationClipParser04._DATA.offset = AnimationClipParser04._reader.getUint32();\r\n\t\tAnimationClipParser04._DATA.size = AnimationClipParser04._reader.getUint32();\r\n\t}\r\n\r\n\tprivate static READ_BLOCK(): void {\r\n\t\tvar count: number = AnimationClipParser04._BLOCK.count = AnimationClipParser04._reader.getUint16();\r\n\t\tvar blockStarts: any[] = AnimationClipParser04._BLOCK.blockStarts = [];\r\n\t\tvar blockLengths: any[] = AnimationClipParser04._BLOCK.blockLengths = [];\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tblockStarts.push(AnimationClipParser04._reader.getUint32());\r\n\t\t\tblockLengths.push(AnimationClipParser04._reader.getUint32());\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static READ_STRINGS(): void {\r\n\t\tvar offset: number = AnimationClipParser04._reader.getUint32();\r\n\t\tvar count: number = AnimationClipParser04._reader.getUint16();\r\n\t\tvar prePos: number = AnimationClipParser04._reader.pos;\r\n\t\tAnimationClipParser04._reader.pos = offset + AnimationClipParser04._DATA.offset;\r\n\r\n\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\tAnimationClipParser04._strings[i] = AnimationClipParser04._reader.readUTFString();\r\n\t\tAnimationClipParser04._reader.pos = prePos;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic parse(clip: AnimationClip, reader: Byte, version: string): void {\r\n\t\tAnimationClipParser04._animationClip = clip;\r\n\t\tAnimationClipParser04._reader = reader;\r\n\t\tAnimationClipParser04._version = version;\r\n\t\tAnimationClipParser04.READ_DATA();\r\n\t\tAnimationClipParser04.READ_BLOCK();\r\n\t\tAnimationClipParser04.READ_STRINGS();\r\n\t\tfor (var i: number = 0, n: number = AnimationClipParser04._BLOCK.count; i < n; i++) {\r\n\t\t\tvar index: number = reader.getUint16();\r\n\t\t\tvar blockName: string = AnimationClipParser04._strings[index];\r\n\t\t\tvar fn: Function = AnimationClipParser04[\"READ_\" + blockName];\r\n\t\t\tif (fn == null)\r\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\r\n\t\t\telse\r\n\t\t\t\tfn.call(null);\r\n\t\t}\r\n\t\tAnimationClipParser04._version = null;\r\n\t\tAnimationClipParser04._reader = null;\r\n\t\tAnimationClipParser04._animationClip = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic READ_ANIMATIONS(): void {\r\n\t\tvar i: number, j: number;\r\n\t\tvar node: KeyframeNode;\r\n\t\tvar reader: Byte = AnimationClipParser04._reader;\r\n\t\tvar buffer: ArrayBuffer = reader.__getBuffer();\r\n\r\n\t\tvar startTimeTypes: number[] = [];\r\n\t\tvar startTimeTypeCount: number = reader.getUint16();\r\n\t\tstartTimeTypes.length = startTimeTypeCount;\r\n\t\tfor (i = 0; i < startTimeTypeCount; i++)\r\n\t\t\tstartTimeTypes[i] = reader.getFloat32();\r\n\r\n\t\tvar clip: AnimationClip = AnimationClipParser04._animationClip;\r\n\t\tclip.name = AnimationClipParser04._strings[reader.getUint16()];\r\n\t\tvar clipDur: number = clip._duration = reader.getFloat32();\r\n\t\tclip.islooping = !!reader.getByte();\r\n\t\tclip._frameRate = reader.getInt16();\r\n\t\tvar nodeCount: number = reader.getInt16();\r\n\t\tvar nodes: KeyframeNodeList = clip._nodes;\r\n\t\tnodes.count = nodeCount;\r\n\t\tvar nodesMap: any = clip._nodesMap = {};\r\n\t\tvar nodesDic: any = clip._nodesDic = {};\r\n\r\n\t\tfor (i = 0; i < nodeCount; i++) {\r\n\t\t\tnode = new KeyframeNode();\r\n\t\t\tnodes.setNodeByIndex(i, node);\r\n\t\t\tnode._indexInList = i;\r\n\t\t\tvar type: number = node.type = reader.getUint8();\r\n\r\n\t\t\tvar pathLength: number = reader.getUint16();\r\n\t\t\tnode._setOwnerPathCount(pathLength);\r\n\t\t\tfor (j = 0; j < pathLength; j++)\r\n\t\t\t\tnode._setOwnerPathByIndex(j, AnimationClipParser04._strings[reader.getUint16()]);//TODO:如果只有根节点并且为空，是否可以和componentType一样优化。\r\n\r\n\t\t\tvar nodePath: string = node._joinOwnerPath(\"/\");\r\n\t\t\tvar mapArray: KeyframeNode[] = nodesMap[nodePath];\r\n\t\t\t(mapArray) || (nodesMap[nodePath] = mapArray = []);\r\n\t\t\tmapArray.push(node);\r\n\r\n\t\t\tnode.propertyOwner = AnimationClipParser04._strings[reader.getUint16()];\r\n\r\n\t\t\tvar propertyLength: number = reader.getUint16();\r\n\t\t\tnode._setPropertyCount(propertyLength);\r\n\t\t\tfor (j = 0; j < propertyLength; j++)\r\n\t\t\t\tnode._setPropertyByIndex(j, AnimationClipParser04._strings[reader.getUint16()]);\r\n\r\n\t\t\tvar fullPath: string = nodePath + \".\" + node.propertyOwner + \".\" + node._joinProperty(\".\");\r\n\t\t\tnodesDic[fullPath] = node;\r\n\t\t\tnode.fullPath = fullPath;\r\n\r\n\t\t\tvar keyframeCount: number = reader.getUint16();\r\n\t\t\tnode._setKeyframeCount(keyframeCount);\r\n\t\t\tvar startTime: number;\r\n\t\t\tswitch (AnimationClipParser04._version) {\r\n\t\t\t\tcase \"LAYAANIMATION:04\":\r\n\t\t\t\t\tfor (j = 0; j < keyframeCount; j++) {\r\n\t\t\t\t\t\tswitch (type) {\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tvar floatKeyframe: FloatKeyframe = new FloatKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\r\n\t\t\t\t\t\t\t\tstartTime = floatKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tfloatKeyframe.inTangent = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tfloatKeyframe.outTangent = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tfloatKeyframe.value = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\tvar floatArrayKeyframe: Vector3Keyframe = new Vector3Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\r\n\t\t\t\t\t\t\t\tstartTime = floatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tif (Render.supportWebGLPlusAnimation) {\r\n\t\t\t\t\t\t\t\t\tvar data: Float32Array = ((<any>floatArrayKeyframe)).data = new Float32Array(3 * 3);\r\n\t\t\t\t\t\t\t\t\tfor (var k: number = 0; k < 3; k++)\r\n\t\t\t\t\t\t\t\t\t\tdata[k] = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tfor (k = 0; k < 3; k++)\r\n\t\t\t\t\t\t\t\t\t\tdata[3 + k] = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tfor (k = 0; k < 3; k++)\r\n\t\t\t\t\t\t\t\t\t\tdata[6 + k] = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tvar inTangent: Vector3 = floatArrayKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\t\tvar outTangent: Vector3 = floatArrayKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\t\tvar value: Vector3 = floatArrayKeyframe.value;\r\n\t\t\t\t\t\t\t\t\tinTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tvalue.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tvalue.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tvalue.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\tvar quaternionKeyframe: QuaternionKeyframe = new QuaternionKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaternionKeyframe);\r\n\t\t\t\t\t\t\t\tstartTime = quaternionKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tif (Render.supportWebGLPlusAnimation) {\r\n\t\t\t\t\t\t\t\t\tdata = ((<any>quaternionKeyframe)).data = new Float32Array(3 * 4);\r\n\t\t\t\t\t\t\t\t\tfor (k = 0; k < 4; k++)\r\n\t\t\t\t\t\t\t\t\t\tdata[k] = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tfor (k = 0; k < 4; k++)\r\n\t\t\t\t\t\t\t\t\t\tdata[4 + k] = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tfor (k = 0; k < 4; k++)\r\n\t\t\t\t\t\t\t\t\t\tdata[8 + k] = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tvar inTangentQua: Vector4 = quaternionKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\t\tvar outTangentQua: Vector4 = quaternionKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\t\tvar valueQua: Quaternion = quaternionKeyframe.value;\r\n\t\t\t\t\t\t\t\t\tinTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tvalueQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tvalueQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tvalueQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tvalueQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tthrow \"AnimationClipParser04:unknown type.\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"LAYAANIMATION:COMPRESSION_04\":\r\n\t\t\t\t\tfor (j = 0; j < keyframeCount; j++) {\r\n\t\t\t\t\t\tswitch (type) {\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tfloatKeyframe = new FloatKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\r\n\t\t\t\t\t\t\t\tstartTime = floatKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tfloatKeyframe.inTangent = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tfloatKeyframe.outTangent = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tfloatKeyframe.value = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\tfloatArrayKeyframe = new Vector3Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\r\n\t\t\t\t\t\t\t\tstartTime = floatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\r\n\t\t\t\t\t\t\t\tif (Render.supportWebGLPlusAnimation) {\r\n\t\t\t\t\t\t\t\t\tdata = ((<any>floatArrayKeyframe)).data = new Float32Array(3 * 3);\r\n\t\t\t\t\t\t\t\t\tfor (k = 0; k < 3; k++)\r\n\t\t\t\t\t\t\t\t\t\tdata[k] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tfor (k = 0; k < 3; k++)\r\n\t\t\t\t\t\t\t\t\t\tdata[3 + k] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tfor (k = 0; k < 3; k++)\r\n\t\t\t\t\t\t\t\t\t\tdata[6 + k] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tinTangent = floatArrayKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\t\toutTangent = floatArrayKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\t\tvalue = floatArrayKeyframe.value;\r\n\t\t\t\t\t\t\t\t\tinTangent.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tinTangent.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tinTangent.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\toutTangent.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\toutTangent.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\toutTangent.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tvalue.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tvalue.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tvalue.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\tquaternionKeyframe = new QuaternionKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaternionKeyframe);\r\n\t\t\t\t\t\t\t\tstartTime = quaternionKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\r\n\t\t\t\t\t\t\t\tif (Render.supportWebGLPlusAnimation) {\r\n\t\t\t\t\t\t\t\t\tdata = ((<any>quaternionKeyframe)).data = new Float32Array(3 * 4);\r\n\t\t\t\t\t\t\t\t\tfor (k = 0; k < 4; k++)\r\n\t\t\t\t\t\t\t\t\t\tdata[k] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tfor (k = 0; k < 4; k++)\r\n\t\t\t\t\t\t\t\t\t\tdata[4 + k] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tfor (k = 0; k < 4; k++)\r\n\t\t\t\t\t\t\t\t\t\tdata[8 + k] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tinTangentQua = quaternionKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\t\toutTangentQua = quaternionKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\t\tvalueQua = quaternionKeyframe.value;\r\n\t\t\t\t\t\t\t\t\tinTangentQua.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tinTangentQua.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tinTangentQua.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tinTangentQua.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\toutTangentQua.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\toutTangentQua.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\toutTangentQua.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\toutTangentQua.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tvalueQua.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tvalueQua.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tvalueQua.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tvalueQua.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tthrow \"AnimationClipParser04:unknown type.\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar eventCount: number = reader.getUint16();\r\n\t\tfor (i = 0; i < eventCount; i++) {\r\n\t\t\tvar event: AnimationEvent = new AnimationEvent();\r\n\t\t\tevent.time = Math.min(clipDur, reader.getFloat32());//TODO:事件时间可能大于动画总时长\r\n\t\t\tevent.eventName = AnimationClipParser04._strings[reader.getUint16()];\r\n\t\t\tvar params: any[];\r\n\t\t\tvar paramCount: number = reader.getUint16();\r\n\t\t\t(paramCount > 0) && (event.params = params = []);\r\n\r\n\t\t\tfor (j = 0; j < paramCount; j++) {\r\n\t\t\t\tvar eventType: number = reader.getByte();\r\n\t\t\t\tswitch (eventType) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tparams.push(!!reader.getByte());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tparams.push(reader.getInt32());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tparams.push(reader.getFloat32());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tparams.push(AnimationClipParser04._strings[reader.getUint16()]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error(\"unknown type.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tclip.addEvent(event);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { KeyframeNode } from \"./KeyframeNode\";\r\n\r\n/**\r\n * @internal\r\n * <code>KeyframeNodeList</code> 类用于创建KeyframeNode节点队列。\r\n */\r\nexport class KeyframeNodeList {\r\n\t/** @internal */\r\n\tprivate _nodes: KeyframeNode[] = [];\r\n\r\n\t/**\r\n\t *\t节点个数。\r\n\t */\r\n\tget count(): number {\r\n\t\treturn this._nodes.length;\r\n\t}\r\n\r\n\tset count(value: number) {\r\n\t\tthis._nodes.length = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>KeyframeNodeList</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取节点。\r\n\t * @param\tindex 索引。\r\n\t * @return 节点。\r\n\t */\r\n\tgetNodeByIndex(index: number): KeyframeNode {\r\n\t\treturn this._nodes[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引设置节点。\r\n\t * @param\tindex 索引。\r\n\t * @param 节点。\r\n\t */\r\n\tsetNodeByIndex(index: number, node: KeyframeNode): void {\r\n\t\tthis._nodes[index] = node;\r\n\t}\r\n\r\n}\r\n\r\n// native\r\n/*if ((window as any).conch && (window as any).conchKeyframeNodeList) {\r\n\t//@ts-ignore\r\n\tKeyframeNodeList = (window as any).conchKeyframeNodeList;\r\n}\r\nif ((window as any).qq && (window as any).qq.webglPlus) {\r\n\t//@ts-ignore\r\n\tKeyframeNodeList = (window as any).qq.webglPlus.conchKeyframeNodeList;\r\n}*/\r\n","import { AnimationClipParser03 } from \"./AnimationClipParser03\";\r\nimport { AnimationClipParser04 } from \"./AnimationClipParser04\";\r\nimport { KeyframeNodeList } from \"./KeyframeNodeList\";\r\nimport { AnimationEvent } from \"./AnimationEvent\";\r\nimport { KeyframeNode } from \"./KeyframeNode\";\r\nimport { FloatKeyframe } from \"../core/FloatKeyframe\"\r\nimport { Keyframe } from \"../core/Keyframe\"\r\nimport { QuaternionKeyframe } from \"../core/QuaternionKeyframe\"\r\nimport { Vector3Keyframe } from \"../core/Vector3Keyframe\"\r\nimport { Quaternion } from \"../math/Quaternion\"\r\nimport { Vector3 } from \"../math/Vector3\"\r\nimport { Vector4 } from \"../math/Vector4\"\r\nimport { Utils3D } from \"../utils/Utils3D\"\r\nimport { LayaGL } from \"../../layagl/LayaGL\"\r\nimport { Resource } from \"../../resource/Resource\"\r\nimport { Byte } from \"../../utils/Byte\"\r\nimport { Handler } from \"../../utils/Handler\"\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { ConchVector3 } from \"../math/Native/ConchVector3\";\r\nimport { ConchQuaternion } from \"../math/Native/ConchQuaternion\";\r\n\r\n/**\r\n * <code>AnimationClip</code> 类用于动画片段资源。\r\n */\r\nexport class AnimationClip extends Resource {\r\n\t/**AnimationClip资源。*/\r\n\tstatic ANIMATIONCLIP: string = \"ANIMATIONCLIP\";\r\n\r\n\t/**@internal\t*/\r\n\tstatic _tempQuaternion0: Quaternion = new Quaternion();\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tstatic _parse(data: any, propertyParams: any = null, constructParams: any[] = null): AnimationClip {\r\n\t\tvar clip: AnimationClip = new AnimationClip();\r\n\t\tvar reader: Byte = new Byte(data);\r\n\t\tvar version: string = reader.readUTFString();\r\n\t\tswitch (version) {\r\n\t\t\tcase \"LAYAANIMATION:03\":\r\n\t\t\t\tAnimationClipParser03.parse(clip, reader);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"LAYAANIMATION:04\":\r\n\t\t\tcase \"LAYAANIMATION:COMPRESSION_04\":\r\n\t\t\t\tAnimationClipParser04.parse(clip, reader, version);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"unknown animationClip version.\";\r\n\t\t}\r\n\t\treturn clip;\r\n\t}\r\n\r\n\t/**\r\n\t * 加载动画片段。\r\n\t * @param url 动画片段地址。\r\n\t * @param complete  完成回掉。\r\n\t */\r\n\tstatic load(url: string, complete: Handler): void {\r\n\t\tILaya.loader.create(url, complete, null, AnimationClip.ANIMATIONCLIP);\r\n\t}\r\n\r\n\t/**@internal */\r\n\t_duration: number;\r\n\t/**@internal */\r\n\t_frameRate: number;\r\n\t/**@internal */\r\n\t_nodes: KeyframeNodeList = new KeyframeNodeList();\r\n\t/**@internal */\r\n\t_nodesDic: any;\r\n\t/**@internal */\r\n\t_nodesMap: any;//TODO:去掉\r\n\t/** @internal */\r\n\t_animationEvents: AnimationEvent[];\r\n\r\n\t/**是否循环。*/\r\n\tislooping: boolean;\r\n\r\n\t/**\r\n\t * 获取动画片段时长。\r\n\t */\r\n\tduration(): number {\r\n\t\treturn this._duration;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>AnimationClip</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._animationEvents = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _hermiteInterpolate(frame: FloatKeyframe, nextFrame: FloatKeyframe, t: number, dur: number): number {\r\n\t\tvar t0: number = frame.outTangent, t1: number = nextFrame.inTangent;\r\n\t\tif (Number.isFinite(t0) && Number.isFinite(t1)) {\r\n\t\t\tvar t2: number = t * t;\r\n\t\t\tvar t3: number = t2 * t;\r\n\t\t\tvar a: number = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\t\t\tvar b: number = t3 - 2.0 * t2 + t;\r\n\t\t\tvar c: number = t3 - t2;\r\n\t\t\tvar d: number = -2.0 * t3 + 3.0 * t2;\r\n\t\t\treturn a * frame.value + b * t0 * dur + c * t1 * dur + d * nextFrame.value;\r\n\t\t} else\r\n\t\t\treturn frame.value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _hermiteInterpolateVector3(frame: Vector3Keyframe, nextFrame: Vector3Keyframe, t: number, dur: number, out: Vector3): void {\r\n\t\tvar p0: Vector3 = frame.value;\r\n\t\tvar tan0: Vector3 = frame.outTangent;\r\n\t\tvar p1: Vector3 = nextFrame.value;\r\n\t\tvar tan1: Vector3 = nextFrame.inTangent;\r\n\r\n\t\tvar t2: number = t * t;\r\n\t\tvar t3: number = t2 * t;\r\n\t\tvar a: number = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\t\tvar b: number = t3 - 2.0 * t2 + t;\r\n\t\tvar c: number = t3 - t2;\r\n\t\tvar d: number = -2.0 * t3 + 3.0 * t2;\r\n\r\n\t\tvar t0: number = tan0.x, t1: number = tan1.x;\r\n\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\r\n\t\telse\r\n\t\t\tout.x = p0.x;\r\n\r\n\t\tt0 = tan0.y, t1 = tan1.y;\r\n\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\r\n\t\telse\r\n\t\t\tout.y = p0.y;\r\n\r\n\t\tt0 = tan0.z, t1 = tan1.z;\r\n\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\tout.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\r\n\t\telse\r\n\t\t\tout.z = p0.z;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _hermiteInterpolateQuaternion(frame: QuaternionKeyframe, nextFrame: QuaternionKeyframe, t: number, dur: number, out: Quaternion): void {\r\n\t\tvar p0: Quaternion = frame.value;\r\n\t\tvar tan0: Vector4 = frame.outTangent;\r\n\t\tvar p1: Quaternion = nextFrame.value;\r\n\t\tvar tan1: Vector4 = nextFrame.inTangent;\r\n\r\n\t\tvar t2: number = t * t;\r\n\t\tvar t3: number = t2 * t;\r\n\t\tvar a: number = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\t\tvar b: number = t3 - 2.0 * t2 + t;\r\n\t\tvar c: number = t3 - t2;\r\n\t\tvar d: number = -2.0 * t3 + 3.0 * t2;\r\n\r\n\t\tvar t0: number = tan0.x, t1: number = tan1.x;\r\n\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\r\n\t\telse\r\n\t\t\tout.x = p0.x;\r\n\r\n\t\tt0 = tan0.y, t1 = tan1.y;\r\n\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\r\n\t\telse\r\n\t\t\tout.y = p0.y;\r\n\r\n\t\tt0 = tan0.z, t1 = tan1.z;\r\n\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\tout.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\r\n\t\telse\r\n\t\t\tout.z = p0.z;\r\n\r\n\t\tt0 = tan0.w, t1 = tan1.w;\r\n\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\tout.w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\r\n\t\telse\r\n\t\t\tout.w = p0.w;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_evaluateClipDatasRealTime(nodes: KeyframeNodeList, playCurTime: number, realTimeCurrentFrameIndexes: Int16Array, addtive: boolean, frontPlay: boolean, outDatas: Array<number | Vector3 | Quaternion | ConchVector3 | ConchQuaternion>): void {\r\n\t\tfor (var i: number = 0, n: number = nodes.count; i < n; i++) {\r\n\t\t\tvar node: KeyframeNode = nodes.getNodeByIndex(i);\r\n\t\t\tvar type: number = node.type;\r\n\t\t\tvar nextFrameIndex: number;\r\n\t\t\tvar keyFrames: Keyframe[] = node._keyFrames;\r\n\t\t\tvar keyFramesCount: number = keyFrames.length;\r\n\t\t\tvar frameIndex: number = realTimeCurrentFrameIndexes[i];\r\n\r\n\t\t\tif (frontPlay) {\r\n\t\t\t\tif ((frameIndex !== -1) && (playCurTime < keyFrames[frameIndex].time)) {//重置正向循环\r\n\t\t\t\t\tframeIndex = -1;\r\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnextFrameIndex = frameIndex + 1;\r\n\t\t\t\twhile (nextFrameIndex < keyFramesCount) {\r\n\t\t\t\t\tif (keyFrames[nextFrameIndex].time > playCurTime)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tframeIndex++;\r\n\t\t\t\t\tnextFrameIndex++;\r\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnextFrameIndex = frameIndex + 1;\r\n\t\t\t\tif ((nextFrameIndex !== keyFramesCount) && (playCurTime > keyFrames[nextFrameIndex].time)) {//重置逆向循环\r\n\t\t\t\t\tframeIndex = keyFramesCount - 1;\r\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnextFrameIndex = frameIndex + 1;\r\n\t\t\t\twhile (frameIndex > -1) {\r\n\t\t\t\t\tif (keyFrames[frameIndex].time < playCurTime)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tframeIndex--;\r\n\t\t\t\t\tnextFrameIndex--;\r\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar isEnd: boolean = nextFrameIndex === keyFramesCount;\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (frameIndex !== -1) {\r\n\t\t\t\t\t\tvar frame: FloatKeyframe = (<FloatKeyframe>keyFrames[frameIndex]);\r\n\t\t\t\t\t\tif (isEnd) {//如果nextFarme为空，不修改数据，保持上一帧\r\n\t\t\t\t\t\t\toutDatas[i] = frame.value;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar nextFarme: FloatKeyframe = (<FloatKeyframe>keyFrames[nextFrameIndex]);\r\n\t\t\t\t\t\t\tvar d: number = nextFarme.time - frame.time;\r\n\t\t\t\t\t\t\tvar t: number;\r\n\t\t\t\t\t\t\tif (d !== 0)\r\n\t\t\t\t\t\t\t\tt = (playCurTime - frame.time) / d;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tt = 0;\r\n\t\t\t\t\t\t\toutDatas[i] = this._hermiteInterpolate(frame, nextFarme, t, d);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\toutDatas[i] = (<FloatKeyframe>keyFrames[0]).value;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (addtive)\r\n\t\t\t\t\t\toutDatas[i] = <number>outDatas[i] - (<FloatKeyframe>keyFrames[0]).value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tvar clipData: Vector3 = <Vector3>outDatas[i];\r\n\t\t\t\t\tthis._evaluateFrameNodeVector3DatasRealTime(keyFrames as Vector3Keyframe[], frameIndex, isEnd, playCurTime, clipData);\r\n\t\t\t\t\tif (addtive) {\r\n\t\t\t\t\t\tvar firstFrameValue: Vector3 = ((<Vector3Keyframe>keyFrames[0])).value;\r\n\t\t\t\t\t\tclipData.x -= firstFrameValue.x;\r\n\t\t\t\t\t\tclipData.y -= firstFrameValue.y;\r\n\t\t\t\t\t\tclipData.z -= firstFrameValue.z;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tvar clipQuat: Quaternion = <Quaternion>outDatas[i];\r\n\t\t\t\t\tthis._evaluateFrameNodeQuaternionDatasRealTime(keyFrames as QuaternionKeyframe[], frameIndex, isEnd, playCurTime, clipQuat);\r\n\t\t\t\t\tif (addtive) {\r\n\t\t\t\t\t\tvar tempQuat: Quaternion = AnimationClip._tempQuaternion0;\r\n\t\t\t\t\t\tvar firstFrameValueQua: Quaternion = ((<QuaternionKeyframe>keyFrames[0])).value;\r\n\t\t\t\t\t\tUtils3D.quaternionConjugate(firstFrameValueQua, tempQuat);\r\n\t\t\t\t\t\tQuaternion.multiply(tempQuat, clipQuat, clipQuat);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tclipData = <Vector3>outDatas[i];\r\n\t\t\t\t\tthis._evaluateFrameNodeVector3DatasRealTime(keyFrames as Vector3Keyframe[], frameIndex, isEnd, playCurTime, clipData);\r\n\t\t\t\t\tif (addtive) {\r\n\t\t\t\t\t\tfirstFrameValue = ((<Vector3Keyframe>keyFrames[0])).value;\r\n\t\t\t\t\t\tclipData.x /= firstFrameValue.x;\r\n\t\t\t\t\t\tclipData.y /= firstFrameValue.y;\r\n\t\t\t\t\t\tclipData.z /= firstFrameValue.z;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"AnimationClip:unknown node type.\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_evaluateClipDatasRealTimeForNative(nodes: any, playCurTime: number, realTimeCurrentFrameIndexes: Uint16Array, addtive: boolean): void {\r\n\t\t(<any>LayaGL.instance).evaluateClipDatasRealTime(nodes._nativeObj, playCurTime, realTimeCurrentFrameIndexes, addtive);\r\n\t}\r\n\r\n\tprivate _evaluateFrameNodeVector3DatasRealTime(keyFrames: Vector3Keyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Vector3): void {\r\n\t\tif (frameIndex !== -1) {\r\n\t\t\tvar frame: Vector3Keyframe = keyFrames[frameIndex];\r\n\t\t\tif (isEnd) {\r\n\t\t\t\tvar frameData: Vector3 = frame.value;\r\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\r\n\t\t\t\toutDatas.y = frameData.y;\r\n\t\t\t\toutDatas.z = frameData.z;\r\n\t\t\t} else {\r\n\t\t\t\tvar nextKeyFrame: Vector3Keyframe = keyFrames[frameIndex + 1];\r\n\t\t\t\tvar t: number;\r\n\t\t\t\tvar startTime: number = frame.time;\r\n\t\t\t\tvar d: number = nextKeyFrame.time - startTime;\r\n\t\t\t\tif (d !== 0)\r\n\t\t\t\t\tt = (playCurTime - startTime) / d;\r\n\t\t\t\telse\r\n\t\t\t\t\tt = 0;\r\n\r\n\t\t\t\tthis._hermiteInterpolateVector3(frame, nextKeyFrame, t, d, outDatas);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tvar firstFrameDatas: Vector3 = keyFrames[0].value;\r\n\t\t\toutDatas.x = firstFrameDatas.x;\r\n\t\t\toutDatas.y = firstFrameDatas.y;\r\n\t\t\toutDatas.z = firstFrameDatas.z;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprivate _evaluateFrameNodeQuaternionDatasRealTime(keyFrames: QuaternionKeyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Quaternion): void {\r\n\t\tif (frameIndex !== -1) {\r\n\t\t\tvar frame: QuaternionKeyframe = keyFrames[frameIndex];\r\n\t\t\tif (isEnd) {\r\n\t\t\t\tvar frameData: Quaternion = frame.value;\r\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\r\n\t\t\t\toutDatas.y = frameData.y;\r\n\t\t\t\toutDatas.z = frameData.z;\r\n\t\t\t\toutDatas.w = frameData.w;\r\n\t\t\t} else {\r\n\t\t\t\tvar nextKeyFrame: QuaternionKeyframe = keyFrames[frameIndex + 1];\r\n\t\t\t\tvar t: number;\r\n\t\t\t\tvar startTime: number = frame.time;\r\n\t\t\t\tvar d: number = nextKeyFrame.time - startTime;\r\n\t\t\t\tif (d !== 0)\r\n\t\t\t\t\tt = (playCurTime - startTime) / d;\r\n\t\t\t\telse\r\n\t\t\t\t\tt = 0;\r\n\r\n\t\t\t\tthis._hermiteInterpolateQuaternion(frame, nextKeyFrame, t, d, outDatas);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tvar firstFrameDatas: Quaternion = keyFrames[0].value;\r\n\t\t\toutDatas.x = firstFrameDatas.x;\r\n\t\t\toutDatas.y = firstFrameDatas.y;\r\n\t\t\toutDatas.z = firstFrameDatas.z;\r\n\t\t\toutDatas.w = firstFrameDatas.w;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _binarySearchEventIndex(time: number): number {\r\n\t\tvar start: number = 0;\r\n\t\tvar end: number = this._animationEvents.length - 1;\r\n\t\tvar mid: number;\r\n\t\twhile (start <= end) {\r\n\t\t\tmid = Math.floor((start + end) / 2);\r\n\t\t\tvar midValue: number = this._animationEvents[mid].time;\r\n\t\t\tif (midValue == time)\r\n\t\t\t\treturn mid;\r\n\t\t\telse if (midValue > time)\r\n\t\t\t\tend = mid - 1;\r\n\t\t\telse\r\n\t\t\t\tstart = mid + 1;\r\n\t\t}\r\n\t\treturn start;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加动画事件。\r\n\t */\r\n\taddEvent(event: AnimationEvent): void {\r\n\t\tvar index: number = this._binarySearchEventIndex(event.time);\r\n\t\tthis._animationEvents.splice(index, 0, event);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _disposeResource(): void {\r\n\t\tthis._nodes = null;\r\n\t\tthis._nodesMap = null;\r\n\t}\r\n}\r\n\r\n\r\n\r\n","import { AnimatorState } from \"./AnimatorState\";\r\n\r\n/**\r\n * <code>AnimatorPlayState</code> 类用于创建动画播放状态信息。\r\n */\r\nexport class AnimatorPlayState {\r\n\t/**@internal */\r\n\t_finish: boolean;\r\n\t/**@internal */\r\n\t_startPlayTime: number;\r\n\t/**@internal */\r\n\t_lastElapsedTime: number;\r\n\t/**@internal */\r\n\t_elapsedTime: number;\r\n\t/**@internal */\r\n\t_normalizedTime: number;\r\n\t/**@internal */\r\n\t_normalizedPlayTime: number;\r\n\t/**@internal */\r\n\t_duration: number;\r\n\t/**@internal */\r\n\t_playEventIndex: number;\r\n\t/**@internal */\r\n\t_lastIsFront: boolean;\r\n\t/**@internal */\r\n\t_currentState: AnimatorState = null;\r\n\r\n\t/**\r\n\t * 播放状态的归一化时间,整数为循环次数，小数为单次播放时间。\r\n\t */\r\n\tget normalizedTime(): number {\r\n\t\treturn this._normalizedTime;\r\n\t}\r\n\r\n\t/**\r\n\t * 当前动画的持续时间，以秒为单位。\r\n\t */\r\n\tget duration(): number {\r\n\t\treturn this._duration;\r\n\t}\r\n\r\n\t/**\r\n\t * 动画状态机。\r\n\t */\r\n\tget animatorState(): AnimatorState {\r\n\t\treturn this._currentState;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>AnimatorPlayState</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_resetPlayState(startTime: number): void {\r\n\t\tthis._finish = false;\r\n\t\tthis._startPlayTime = startTime;\r\n\t\tthis._elapsedTime = startTime;\r\n\t\tthis._playEventIndex = 0;\r\n\t\tthis._lastIsFront = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(dest: AnimatorPlayState): void {\r\n\t\tdest._finish = this._finish;\r\n\t\tdest._startPlayTime = this._startPlayTime;\r\n\t\tdest._elapsedTime = this._elapsedTime;\r\n\t\tdest._normalizedTime = this._normalizedTime;\r\n\t\tdest._normalizedPlayTime = this._normalizedPlayTime;\r\n\t\tdest._playEventIndex = this._playEventIndex;\r\n\t\tdest._lastIsFront = this._lastIsFront;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { AnimationClip } from \"../animation/AnimationClip\";\r\nimport { KeyframeNodeList } from \"../animation/KeyframeNodeList\";\r\nimport { IClone } from \"../core/IClone\";\r\nimport { IReferenceCounter } from \"../resource/IReferenceCounter\";\r\nimport { Animator } from \"./Animator\";\r\nimport { AnimatorPlayState } from \"./AnimatorPlayState\";\r\nimport { AnimatorState } from \"./AnimatorState\";\r\nimport { KeyframeNodeOwner } from \"./KeyframeNodeOwner\";\r\n\r\n\r\n/**\r\n * <code>AnimatorControllerLayer</code> 类用于创建动画控制器层。\r\n */\r\nexport class AnimatorControllerLayer implements IReferenceCounter, IClone {\r\n\t/**混合模式_覆盖。 */\r\n\tstatic BLENDINGMODE_OVERRIDE: number = 0;\r\n\t/**混合模式_叠加。 */\r\n\tstatic BLENDINGMODE_ADDTIVE: number = 1;\r\n\r\n\t/**@internal */\r\n\tprivate _defaultState: AnimatorState = null;\r\n\t/**@internal */\r\n\tprivate _referenceCount: number = 0;\r\n\r\n\t/**@internal 0:常规播放、1:动态融合播放、2:固定融合播放*/\r\n\t_playType: number = -1;\r\n\t/**@internal */\r\n\t_crossDuration: number = -1;\r\n\t/**@internal */\r\n\t_crossPlayState: AnimatorState;\r\n\t/**@internal */\r\n\t_crossMark: number = 0;\r\n\t/**@internal */\r\n\t_crossNodesOwnersCount: number = 0;\r\n\t/**@internal */\r\n\t_crossNodesOwners: KeyframeNodeOwner[] = [];\r\n\t/**@internal */\r\n\t_crossNodesOwnersIndicesMap: any = {};\r\n\t/**@internal */\r\n\t_srcCrossClipNodeIndices: number[] = [];\r\n\t/**@internal */\r\n\t_destCrossClipNodeIndices: number[] = [];\r\n\r\n\t/**@internal */\r\n\t_animator: Animator;\r\n\t/**@internal */\r\n\t_statesMap: any = {};\r\n\t/**@internal */\r\n\t_states: AnimatorState[] = [];\r\n\t/**@internal */\r\n\t_playStateInfo: AnimatorPlayState = new AnimatorPlayState();\r\n\t/**@internal */\r\n\t_crossPlayStateInfo: AnimatorPlayState = new AnimatorPlayState();\r\n\r\n\t/** 层的名称。*/\r\n\tname: string;\r\n\t/** 名称。*/\r\n\tblendingMode: number = AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n\t/** 权重。*/\r\n\tdefaultWeight: number = 1.0;\r\n\t/**\t激活时是否自动播放。*/\r\n\tplayOnWake: boolean = true;\r\n\r\n\t/**\r\n\t * 默认动画状态机。\r\n\t */\r\n\tget defaultState(): AnimatorState {\r\n\t\treturn this._defaultState;\r\n\t}\r\n\r\n\tset defaultState(value: AnimatorState) {\r\n\t\tthis._defaultState = value;\r\n\t\tthis._statesMap[value.name] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>AnimatorControllerLayer</code> 实例。\r\n\t */\r\n\tconstructor(name: string) {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _removeClip(clipStateInfos: AnimatorState[], statesMap: any, index: number, state: AnimatorState): void {\r\n\t\tvar clip: AnimationClip = state._clip;\r\n\t\tvar clipStateInfo: AnimatorState = clipStateInfos[index];\r\n\r\n\t\tclipStateInfos.splice(index, 1);\r\n\t\tdelete statesMap[state.name];\r\n\r\n\t\tif (this._animator) {\r\n\t\t\tvar frameNodes: KeyframeNodeList = clip._nodes;\r\n\t\t\tvar nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\r\n\t\t\tclip._removeReference();\r\n\t\t\tfor (var i: number = 0, n: number = frameNodes.count; i < n; i++)\r\n\t\t\t\tthis._animator._removeKeyframeNodeOwner(nodeOwners, frameNodes.getNodeByIndex(i));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @implements IReferenceCounter\r\n\t */\r\n\t_getReferenceCount(): number {\r\n\t\treturn this._referenceCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @implements IReferenceCounter\r\n\t */\r\n\t_addReference(count: number = 1): void {\r\n\t\tfor (var i: number = 0, n: number = this._states.length; i < n; i++)\r\n\t\t\tthis._states[i]._addReference(count);\r\n\t\tthis._referenceCount += count;\r\n\t}\r\n\r\n\t/**\r\n\t * @implements IReferenceCounter\r\n\t */\r\n\t_removeReference(count: number = 1): void {\r\n\t\tfor (var i: number = 0, n: number = this._states.length; i < n; i++)\r\n\t\t\tthis._states[i]._removeReference(count);\r\n\t\tthis._referenceCount -= count;\r\n\t}\r\n\r\n\t/**\r\n\t * @implements IReferenceCounter\r\n\t */\r\n\t_clearReference(): void {\r\n\t\tthis._removeReference(-this._referenceCount);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取当前的播放状态。\r\n\t * @return 动画播放状态。\r\n\t */\r\n\tgetCurrentPlayState(): AnimatorPlayState {\r\n\t\treturn this._playStateInfo;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取动画状态。\r\n\t * @return 动画状态。\r\n\t */\r\n\tgetAnimatorState(name: string): AnimatorState {\r\n\t\tvar state: AnimatorState = this._statesMap[name];\r\n\t\treturn state ? state : null;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加动画状态。\r\n\t * @param\tstate 动画状态。\r\n\t * @param   layerIndex 层索引。\r\n\t */\r\n\taddState(state: AnimatorState): void {\r\n\t\tvar stateName: string = state.name;\r\n\t\tif (this._statesMap[stateName]) {\r\n\t\t\tthrow \"AnimatorControllerLayer:this stat's name has exist.\";\r\n\t\t} else {\r\n\t\t\tthis._statesMap[stateName] = state;\r\n\t\t\tthis._states.push(state);\r\n\r\n\t\t\tif (this._animator) {\r\n\t\t\t\tstate._clip._addReference();\r\n\t\t\t\tthis._animator._getOwnersByClip(state);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 移除动画状态。\r\n\t * @param\tstate 动画状态。\r\n\t * @param   layerIndex 层索引。\r\n\t */\r\n\tremoveState(state: AnimatorState): void {\r\n\t\tvar states: AnimatorState[] = this._states;\r\n\t\tvar index: number = -1;\r\n\t\tfor (var i: number = 0, n: number = states.length; i < n; i++) {\r\n\t\t\tif (states[i] === state) {\r\n\t\t\t\tindex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (index !== -1)\r\n\t\t\tthis._removeClip(states, this._statesMap, index, state);\r\n\t}\r\n\r\n\t/**\r\n\t * 销毁。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tthis._clearReference();\r\n\t\tthis._statesMap = null;\r\n\t\tthis._states = null;\r\n\t\tthis._playStateInfo = null;\r\n\t\tthis._crossPlayStateInfo = null;\r\n\t\tthis._defaultState = null;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar dest: AnimatorControllerLayer = (<AnimatorControllerLayer>destObject);\r\n\t\tdest.name = this.name;\r\n\t\tdest.blendingMode = this.blendingMode;\r\n\t\tdest.defaultWeight = this.defaultWeight;\r\n\t\tdest.playOnWake = this.playOnWake;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: AnimatorControllerLayer = new AnimatorControllerLayer(this.name);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../core/IClone\"\r\n\timport { MathUtils3D } from \"../MathUtils3D\"\r\n\t\r\n\t/**\r\n\t * <code>Vector4</code> 类用于创建四维向量。\r\n\t */\r\n\texport class ConchVector4 implements IClone {\r\n\t\t/*[FILEINDEX:10000]*/\r\n\t\t\r\n\t\t/**零向量，禁止修改*/\r\n\t\t static ZERO:ConchVector4 = new ConchVector4();\r\n\t\t\r\n\t\t/*一向量，禁止修改*/\r\n\t\t static ONE:ConchVector4 = new ConchVector4(1.0, 1.0, 1.0, 1.0);\r\n\t\t\r\n\t\t/*X单位向量，禁止修改*/\r\n\t\t static UnitX:ConchVector4 = new ConchVector4(1.0, 0.0, 0.0, 0.0);\r\n\t\t\r\n\t\t/*Y单位向量，禁止修改*/\r\n\t\t static UnitY:ConchVector4 = new ConchVector4(0.0, 1.0, 0.0, 0.0);\r\n\t\t\r\n\t\t/*Z单位向量，禁止修改*/\r\n\t\t static UnitZ:ConchVector4 = new ConchVector4(0.0, 0.0, 1.0, 0.0);\r\n\t\t\r\n\t\t/*W单位向量，禁止修改*/\r\n\t\t static UnitW:ConchVector4 = new ConchVector4(0.0, 0.0, 0.0, 1.0);\r\n\t\t\r\n\t\t/**[只读]向量元素集合。*/\r\n\t\t elements:Float32Array;\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取X轴坐标。\r\n\t\t * @return  X轴坐标。\r\n\t\t */\r\n\t\t get x():number {\r\n\t\t\treturn this.elements[0];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置X轴坐标。\r\n\t\t * @param value X轴坐标。\r\n\t\t */\r\n\t\t set x(value:number) {\r\n\t\t\tthis.elements[0] = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取Y轴坐标。\r\n\t\t * @return\tY轴坐标。\r\n\t\t */\r\n\t\t get y():number {\r\n\t\t\treturn this.elements[1];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置Y轴坐标。\r\n\t\t * @param\tvalue  Y轴坐标。\r\n\t\t */\r\n\t\t set y(value:number) {\r\n\t\t\tthis.elements[1] = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取Z轴坐标。\r\n\t\t * @return\t Z轴坐标。\r\n\t\t */\r\n\t\t get z():number {\r\n\t\t\treturn this.elements[2];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置Z轴坐标。\r\n\t\t * @param\tvalue  Z轴坐标。\r\n\t\t */\r\n\t\t set z(value:number) {\r\n\t\t\tthis.elements[2] = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取W轴坐标。\r\n\t\t * @return\tW轴坐标。\r\n\t\t */\r\n\t\t get w():number {\r\n\t\t\treturn this.elements[3];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置W轴坐标。\r\n\t\t * @param value\tW轴坐标。\r\n\t\t */\r\n\t\t set w(value:number) {\r\n\t\t\tthis.elements[3] = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个 <code>Vector4</code> 实例。\r\n\t\t * @param\tx  X轴坐标。\r\n\t\t * @param\ty  Y轴坐标。\r\n\t\t * @param\tz  Z轴坐标。\r\n\t\t * @param\tw  W轴坐标。\r\n\t\t */\r\n\t\tconstructor(x:number = 0, y:number = 0, z:number = 0, w:number = 0){\r\n\t\t\tvar v:Float32Array = this.elements = new Float32Array(4);\r\n\t\t\tv[0] = x;\r\n\t\t\tv[1] = y;\r\n\t\t\tv[2] = z;\r\n\t\t\tv[3] = w;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 从Array数组拷贝值。\r\n\t\t * @param  array 数组。\r\n\t\t * @param  offset 数组偏移。\r\n\t\t */\r\n\t\t fromArray(array:any[], offset:number = 0):void {\r\n\t\t\tthis.elements[0] = array[offset + 0];\r\n\t\t\tthis.elements[1] = array[offset + 1];\r\n\t\t\tthis.elements[2] = array[offset + 2];\r\n\t\t\tthis.elements[3] = array[offset + 3];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 克隆。\r\n\t\t * @param\tdestObject 克隆源。\r\n\t\t */\r\n\t\t cloneTo(destObject:any):void {\r\n\t\t\tvar destVector4:ConchVector4 = (<ConchVector4>destObject );\r\n\t\t\tvar destE:Float32Array = destVector4.elements;\r\n\t\t\tvar s:Float32Array = this.elements;\r\n\t\t\tdestE[0] = s[0];\r\n\t\t\tdestE[1] = s[1];\r\n\t\t\tdestE[2] = s[2];\r\n\t\t\tdestE[3] = s[3];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 克隆。\r\n\t\t * @return\t 克隆副本。\r\n\t\t */\r\n\t\t clone():any {\r\n\t\t\tvar destVector4:ConchVector4 = new ConchVector4();\r\n\t\t\tthis.cloneTo(destVector4);\r\n\t\t\treturn destVector4;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 插值四维向量。\r\n\t\t * @param\ta left向量。\r\n\t\t * @param\tb right向量。\r\n\t\t * @param\tt 插值比例。\r\n\t\t * @param\tout 输出向量。\r\n\t\t */\r\n\t\t static lerp(a:ConchVector4, b:ConchVector4, t:number, out:ConchVector4):void {\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = a.elements;\r\n\t\t\tvar g:Float32Array = b.elements;\r\n\t\t\t\r\n\t\t\tvar ax:number = f[0], ay:number = f[1], az:number = f[2], aw:number = f[3];\r\n\t\t\te[0] = ax + t * (g[0] - ax);\r\n\t\t\te[1] = ay + t * (g[1] - ay);\r\n\t\t\te[2] = az + t * (g[2] - az);\r\n\t\t\te[3] = aw + t * (g[3] - aw);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 通过4x4矩阵把一个四维向量转换为另一个四维向量\r\n\t\t * @param\tvector4 带转换四维向量。\r\n\t\t * @param\tM4x4    4x4矩阵。\r\n\t\t * @param\tout     转换后四维向量。\r\n\t\t */\r\n\t\t static transformByM4x4(vector4:ConchVector4, m4x4:any, out:ConchVector4):void {\r\n\t\t\t\r\n\t\t\tvar ve:Float32Array = vector4.elements;\r\n\t\t\tvar vx:number = ve[0];\r\n\t\t\tvar vy:number = ve[1];\r\n\t\t\tvar vz:number = ve[2];\r\n\t\t\tvar vw:number = ve[3];\r\n\t\t\t\r\n\t\t\tvar me:Float32Array = m4x4.elements;\r\n\t\t\tvar oe:Float32Array = out.elements;\r\n\t\t\t\r\n\t\t\toe[0] = vx * me[0] + vy * me[4] + vz * me[8] + vw * me[12];\r\n\t\t\toe[1] = vx * me[1] + vy * me[5] + vz * me[9] + vw * me[13];\r\n\t\t\toe[2] = vx * me[2] + vy * me[6] + vz * me[10] + vw * me[14];\r\n\t\t\toe[3] = vx * me[3] + vy * me[7] + vz * me[11] + vw * me[15];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 判断两个四维向量是否相等。\r\n\t\t * @param\ta 四维向量。\r\n\t\t * @param\tb 四维向量。\r\n\t\t * @return  是否相等。\r\n\t\t */\r\n\t\t static equals(a:ConchVector4, b:ConchVector4):boolean {\r\n\t\t\t\r\n\t\t\tvar ae:Float32Array = a.elements;\r\n\t\t\tvar be:Float32Array = b.elements;\r\n\t\t\treturn MathUtils3D.nearEqual(Math.abs(ae[0]), Math.abs(be[0])) && MathUtils3D.nearEqual(Math.abs(ae[1]), Math.abs(be[1])) && MathUtils3D.nearEqual(Math.abs(ae[2]), Math.abs(be[2])) && MathUtils3D.nearEqual(Math.abs(ae[3]), Math.abs(be[3]));\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 求四维向量的长度。\r\n\t\t * @return  长度。\r\n\t\t */\r\n\t\t length():number {\r\n\t\t\t\r\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 求四维向量长度的平方。\r\n\t\t * @return  长度的平方。\r\n\t\t */\r\n\t\t lengthSquared():number {\r\n\t\t\t\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 归一化四维向量。\r\n\t\t * @param\ts   源四维向量。\r\n\t\t * @param\tout 输出四维向量。\r\n\t\t */\r\n\t\t static normalize(s:ConchVector4, out:ConchVector4):void {\r\n\t\t\t\r\n\t\t\tvar se:Float32Array = s.elements;\r\n\t\t\tvar oe:Float32Array = out.elements;\r\n\t\t\tvar len:number = s.length();\r\n\t\t\tif (len > 0) {\r\n\t\t\t\toe[0] = se[0] * len;\r\n\t\t\t\toe[1] = se[1] * len;\r\n\t\t\t\toe[2] = se[2] * len;\r\n\t\t\t\toe[3] = se[3] * len;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 求两个四维向量的和。\r\n\t\t * @param\ta   四维向量。\r\n\t\t * @param\tb   四维向量。\r\n\t\t * @param\tout 输出向量。\r\n\t\t */\r\n\t\t static add(a:ConchVector4, b:ConchVector4, out:ConchVector4):void {\r\n\t\t\t\r\n\t\t\tvar oe:Float32Array = out.elements;\r\n\t\t\tvar ae:Float32Array = a.elements;\r\n\t\t\tvar be:Float32Array = b.elements;\r\n\t\t\toe[0] = ae[0] + be[0];\r\n\t\t\toe[1] = ae[1] + be[1];\r\n\t\t\toe[2] = ae[2] + be[2];\r\n\t\t\toe[3] = ae[3] + be[3];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 求两个四维向量的差。\r\n\t\t * @param\ta   四维向量。\r\n\t\t * @param\tb   四维向量。\r\n\t\t * @param\tout 输出向量。\r\n\t\t */\r\n\t\t static subtract(a:ConchVector4, b:ConchVector4, out:ConchVector4):void {\r\n\t\t\t\r\n\t\t\tvar oe:Float32Array = out.elements;\r\n\t\t\tvar ae:Float32Array = a.elements;\r\n\t\t\tvar be:Float32Array = b.elements;\r\n\t\t\toe[0] = ae[0] - be[0];\r\n\t\t\toe[1] = ae[1] - be[1];\r\n\t\t\toe[2] = ae[2] - be[2];\r\n\t\t\toe[3] = ae[3] - be[3];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算两个四维向量的乘积。\r\n\t\t * @param\ta   四维向量。\r\n\t\t * @param\tb   四维向量。\r\n\t\t * @param\tout 输出向量。\r\n\t\t */\r\n\t\t static multiply(a:ConchVector4, b:ConchVector4, out:ConchVector4):void {\r\n\t\t\t\r\n\t\t\tvar oe:Float32Array = out.elements;\r\n\t\t\tvar ae:Float32Array = a.elements;\r\n\t\t\tvar be:Float32Array = b.elements;\r\n\t\t\toe[0] = ae[0] * be[0];\r\n\t\t\toe[1] = ae[1] * be[1];\r\n\t\t\toe[2] = ae[2] * be[2];\r\n\t\t\toe[3] = ae[3] * be[3];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 缩放四维向量。\r\n\t\t * @param\ta   源四维向量。\r\n\t\t * @param\tb   缩放值。\r\n\t\t * @param\tout 输出四维向量。\r\n\t\t */\r\n\t\t static scale(a:ConchVector4, b:number, out:ConchVector4):void {\r\n\t\t\t\r\n\t\t\tvar oe:Float32Array = out.elements;\r\n\t\t\tvar ae:Float32Array = a.elements;\r\n\t\t\toe[0] = ae[0] * b;\r\n\t\t\toe[1] = ae[1] * b;\r\n\t\t\toe[2] = ae[2] * b;\r\n\t\t\toe[3] = ae[3] * b;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 求一个指定范围的四维向量\r\n\t\t * @param\tvalue clamp向量\r\n\t\t * @param\tmin   最小\r\n\t\t * @param\tmax   最大\r\n\t\t * @param   out   输出向量\r\n\t\t */\r\n\t\t static Clamp(value:ConchVector4, min:ConchVector4, max:ConchVector4, out:ConchVector4):void {\r\n\t\t\t\r\n\t\t\tvar valuee:Float32Array = value.elements;\r\n\t\t\tvar x:number = valuee[0];\r\n\t\t\tvar y:number = valuee[1];\r\n\t\t\tvar z:number = valuee[2];\r\n\t\t\tvar w:number = valuee[3];\r\n\t\t\t\r\n\t\t\tvar mine:Float32Array = min.elements;\r\n\t\t\tvar mineX:number = mine[0];\r\n\t\t\tvar mineY:number = mine[1];\r\n\t\t\tvar mineZ:number = mine[2];\r\n\t\t\tvar mineW:number = mine[3];\r\n\t\t\t\r\n\t\t\tvar maxe:Float32Array = max.elements;\r\n\t\t\tvar maxeX:number = maxe[0];\r\n\t\t\tvar maxeY:number = maxe[1];\r\n\t\t\tvar maxeZ:number = maxe[2];\r\n\t\t\tvar maxeW:number = maxe[3];\r\n\t\t\t\r\n\t\t\tvar oute:Float32Array = out.elements;\r\n\t\t\t\r\n\t\t\tx = (x > maxeX) ? maxeX : x;\r\n\t\t\tx = (x < mineX) ? mineX : x;\r\n\t\t\t\r\n\t\t\ty = (y > maxeY) ? maxeY : y;\r\n\t\t\ty = (y < mineY) ? mineY : y;\r\n\t\t\t\r\n\t\t\tz = (z > maxeZ) ? maxeZ : z;\r\n\t\t\tz = (z < mineZ) ? mineZ : z;\r\n\t\t\t\r\n\t\t\tw = (w > maxeW) ? maxeW : w;\r\n\t\t\tw = (w < mineW) ? mineW : w;\r\n\t\t\t\r\n\t\t\toute[0] = x;\r\n\t\t\toute[1] = y;\r\n\t\t\toute[2] = z;\r\n\t\t\toute[3] = w;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 两个四维向量距离的平方。\r\n\t\t * @param\tvalue1 向量1。\r\n\t\t * @param\tvalue2 向量2。\r\n\t\t * @return\t距离的平方。\r\n\t\t */\r\n\t\t static distanceSquared(value1:ConchVector4, value2:ConchVector4):number {\r\n\t\t\t\r\n\t\t\tvar value1e:Float32Array = value1.elements;\r\n\t\t\tvar value2e:Float32Array = value2.elements;\r\n\t\t\t\r\n\t\t\tvar x:number = value1e[0] - value2e[0];\r\n\t\t\tvar y:number = value1e[1] - value2e[1];\r\n\t\t\tvar z:number = value1e[2] - value2e[2];\r\n\t\t\tvar w:number = value1e[3] - value2e[3];\r\n\t\t\t\r\n\t\t\treturn (x * x) + (y * y) + (z * z) + (w * w);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 两个四维向量距离。\r\n\t\t * @param\tvalue1 向量1。\r\n\t\t * @param\tvalue2 向量2。\r\n\t\t * @return\t距离。\r\n\t\t */\r\n\t\t static distance(value1:ConchVector4, value2:ConchVector4):number {\r\n\t\t\t\r\n\t\t\tvar value1e:Float32Array = value1.elements;\r\n\t\t\tvar value2e:Float32Array = value2.elements;\r\n\t\t\t\r\n\t\t\tvar x:number = value1e[0] - value2e[0];\r\n\t\t\tvar y:number = value1e[1] - value2e[1];\r\n\t\t\tvar z:number = value1e[2] - value2e[2];\r\n\t\t\tvar w:number = value1e[3] - value2e[3];\r\n\t\t\t\r\n\t\t\treturn Math.sqrt((x * x) + (y * y) + (z * z) + (w * w));\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 求两个四维向量的点积。\r\n\t\t * @param\ta 向量。\r\n\t\t * @param\tb 向量。\r\n\t\t * @return  点积。\r\n\t\t */\r\n\t\t static dot(a:ConchVector4, b:ConchVector4):number {\r\n\t\t\t\r\n\t\t\tvar ae:Float32Array = a.elements;\r\n\t\t\tvar be:Float32Array = b.elements;\r\n\t\t\t\r\n\t\t\tvar r:number = (ae[0] * be[0]) + (ae[1] * be[1]) + (ae[2] * be[2]) + (ae[3] * be[3]);\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 分别取两个四维向量x、y、z的最小值计算新的四维向量。\r\n\t\t * @param\ta   四维向量。\r\n\t\t * @param\tb   四维向量。\r\n\t\t * @param\tout 结果三维向量。\r\n\t\t */\r\n\t\t static min(a:ConchVector4, b:ConchVector4, out:ConchVector4):void {\r\n\t\t\t\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = a.elements;\r\n\t\t\tvar g:Float32Array = b.elements\r\n\t\t\t\r\n\t\t\te[0] = Math.min(f[0], g[0]);\r\n\t\t\te[1] = Math.min(f[1], g[1]);\r\n\t\t\te[2] = Math.min(f[2], g[2]);\r\n\t\t\te[3] = Math.min(f[3], g[3]);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 分别取两个四维向量x、y、z的最大值计算新的四维向量。\r\n\t\t * @param\ta   四维向量。\r\n\t\t * @param\tb   四维向量。\r\n\t\t * @param\tout 结果三维向量。\r\n\t\t */\r\n\t\t static max(a:ConchVector4, b:ConchVector4, out:ConchVector4):void {\r\n\t\t\t\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = a.elements;\r\n\t\t\tvar g:Float32Array = b.elements\r\n\t\t\t\r\n\t\t\te[0] = Math.max(f[0], g[0]);\r\n\t\t\te[1] = Math.max(f[1], g[1]);\r\n\t\t\te[2] = Math.max(f[2], g[2]);\r\n\t\t\te[3] = Math.max(f[3], g[3]);\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n","import { ConchVector4 } from \"./ConchVector4\";\r\nimport { ConchQuaternion } from \"./ConchQuaternion\";\r\nimport { IClone } from \"../../core/IClone\"\r\n\timport { MathUtils3D } from \"../MathUtils3D\"\r\n\t\r\n\t/**\r\n\t * <code>Vector3</code> 类用于创建三维向量。\r\n\t */\r\n\texport class ConchVector3 implements IClone {\r\n\t\t/*[FILEINDEX:10000]*/\r\n\t\t/**@internal\t*/\r\n\t\t static _tempVector4:ConchVector4 = new ConchVector4();\r\n\t\t\r\n\t\t/**零向量，禁止修改*/\r\n\t\t static ZERO:ConchVector3 = new ConchVector3(0.0, 0.0, 0.0);\r\n\t\t/**一向量，禁止修改*/\r\n\t\t static ONE:ConchVector3 = new ConchVector3(1.0, 1.0, 1.0);\r\n\t\t/**X轴单位向量，禁止修改*/\r\n\t\t static NegativeUnitX:ConchVector3 = new ConchVector3(-1, 0, 0);\r\n\t\t/**X轴单位向量，禁止修改*/\r\n\t\t static UnitX:ConchVector3 = new ConchVector3(1, 0, 0);\r\n\t\t/**Y轴单位向量，禁止修改*/\r\n\t\t static UnitY:ConchVector3 = new ConchVector3(0, 1, 0);\r\n\t\t/**Z轴单位向量，禁止修改*/\r\n\t\t static UnitZ:ConchVector3 = new ConchVector3(0, 0, 1);\r\n\t\t/**右手坐标系统前向量，禁止修改*/\r\n\t\t static ForwardRH:ConchVector3 = new ConchVector3(0, 0, -1);\r\n\t\t/**左手坐标系统前向量,禁止修改*/\r\n\t\t static ForwardLH:ConchVector3 = new ConchVector3(0, 0, 1);\r\n\t\t/**上向量,禁止修改*/\r\n\t\t static Up:ConchVector3 = new ConchVector3(0, 1, 0);\r\n\t\t/**无效矩阵,禁止修改*/\r\n\t\t static NAN:ConchVector3 = new ConchVector3(NaN, NaN, NaN);\r\n\t\t/**[只读]向量元素集合。*/\r\n\t\t elements:Float32Array;\r\n\t\t/**\r\n\t\t * 两个三维向量距离的平方。\r\n\t\t * @param\tvalue1 向量1。\r\n\t\t * @param\tvalue2 向量2。\r\n\t\t * @return\t距离的平方。\r\n\t\t */\r\n\t\t static distanceSquared(value1:ConchVector3, value2:ConchVector3):number {\r\n\t\t\tvar value1e:Float32Array = value1.elements;\r\n\t\t\tvar value2e:Float32Array = value2.elements;\r\n\t\t\tvar x:number = value1e[0] - value2e[0];\r\n\t\t\tvar y:number = value1e[1] - value2e[1];\r\n\t\t\tvar z:number = value1e[2] - value2e[2];\r\n\t\t\treturn (x * x) + (y * y) + (z * z);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 两个三维向量距离。\r\n\t\t * @param\tvalue1 向量1。\r\n\t\t * @param\tvalue2 向量2。\r\n\t\t * @return\t距离。\r\n\t\t */\r\n\t\t static distance(value1:ConchVector3, value2:ConchVector3):number {\r\n\t\t\tvar value1e:Float32Array = value1.elements;\r\n\t\t\tvar value2e:Float32Array = value2.elements;\r\n\t\t\tvar x:number = value1e[0] - value2e[0];\r\n\t\t\tvar y:number = value1e[1] - value2e[1];\r\n\t\t\tvar z:number = value1e[2] - value2e[2];\r\n\t\t\treturn Math.sqrt((x * x) + (y * y) + (z * z));\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 分别取两个三维向量x、y、z的最小值计算新的三维向量。\r\n\t\t * @param\ta。\r\n\t\t * @param\tb。\r\n\t\t * @param\tout。\r\n\t\t */\r\n\t\t static min(a:ConchVector3, b:ConchVector3, out:ConchVector3):void {\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = a.elements;\r\n\t\t\tvar g:Float32Array = b.elements\r\n\t\t\te[0] = Math.min(f[0], g[0]);\r\n\t\t\te[1] = Math.min(f[1], g[1]);\r\n\t\t\te[2] = Math.min(f[2], g[2]);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 分别取两个三维向量x、y、z的最大值计算新的三维向量。\r\n\t\t * @param\ta a三维向量。\r\n\t\t * @param\tb b三维向量。\r\n\t\t * @param\tout 结果三维向量。\r\n\t\t */\r\n\t\t static max(a:ConchVector3, b:ConchVector3, out:ConchVector3):void {\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = a.elements;\r\n\t\t\tvar g:Float32Array = b.elements\r\n\t\t\te[0] = Math.max(f[0], g[0]);\r\n\t\t\te[1] = Math.max(f[1], g[1]);\r\n\t\t\te[2] = Math.max(f[2], g[2]);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 根据四元数旋转三维向量。\r\n\t\t * @param\tsource 源三维向量。\r\n\t\t * @param\trotation 旋转四元数。\r\n\t\t * @param\tout 输出三维向量。\r\n\t\t */\r\n\t\t static transformQuat(source:ConchVector3, rotation:ConchQuaternion, out:ConchVector3):void {\r\n\t\t\tvar destination:Float32Array = out.elements;\r\n\t\t\tvar se:Float32Array = source.elements;\r\n\t\t\tvar re:Float32Array = rotation.elements;\r\n\t\t\t\r\n\t\t\tvar x:number = se[0], y:number = se[1], z:number = se[2], qx:number = re[0], qy:number = re[1], qz:number = re[2], qw:number = re[3],\r\n\t\t\t\r\n\t\t\tix:number = qw * x + qy * z - qz * y, iy:number = qw * y + qz * x - qx * z, iz:number = qw * z + qx * y - qy * x, iw:number = -qx * x - qy * y - qz * z;\r\n\t\t\t\r\n\t\t\tdestination[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n\t\t\tdestination[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n\t\t\tdestination[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算标量长度。\r\n\t\t * @param\ta 源三维向量。\r\n\t\t * @return 标量长度。\r\n\t\t */\r\n\t\t static scalarLength(a:ConchVector3):number {\r\n\t\t\tvar f:Float32Array = a.elements;\r\n\t\t\tvar x:number = f[0], y:number = f[1], z:number = f[2];\r\n\t\t\treturn Math.sqrt(x * x + y * y + z * z);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算标量长度的平方。\r\n\t\t * @param\ta 源三维向量。\r\n\t\t * @return 标量长度的平方。\r\n\t\t */\r\n\t\t static scalarLengthSquared(a:ConchVector3):number {\r\n\t\t\tvar f:Float32Array = a.elements;\r\n\t\t\tvar x:number = f[0], y:number = f[1], z:number = f[2];\r\n\t\t\treturn x * x + y * y + z * z;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 归一化三维向量。\r\n\t\t * @param\ts 源三维向量。\r\n\t\t * @param\tout 输出三维向量。\r\n\t\t */\r\n\t\t static normalize(s:ConchVector3, out:ConchVector3):void {\r\n\t\t\tvar se:Float32Array = s.elements;\r\n\t\t\tvar oe:Float32Array = out.elements;\r\n\t\t\tvar x:number = se[0], y:number = se[1], z:number = se[2];\r\n\t\t\tvar len:number = x * x + y * y + z * z;\r\n\t\t\tif (len > 0) {\r\n\t\t\t\tlen = 1 / Math.sqrt(len);\r\n\t\t\t\toe[0] = se[0] * len;\r\n\t\t\t\toe[1] = se[1] * len;\r\n\t\t\t\toe[2] = se[2] * len;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算两个三维向量的乘积。\r\n\t\t * @param\ta left三维向量。\r\n\t\t * @param\tb right三维向量。\r\n\t\t * @param\tout 输出三维向量。\r\n\t\t */\r\n\t\t static multiply(a:ConchVector3, b:ConchVector3, out:ConchVector3):void {\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = a.elements;\r\n\t\t\tvar g:Float32Array = b.elements\r\n\t\t\te[0] = f[0] * g[0];\r\n\t\t\te[1] = f[1] * g[1];\r\n\t\t\te[2] = f[2] * g[2];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 缩放三维向量。\r\n\t\t * @param\ta 源三维向量。\r\n\t\t * @param\tb 缩放值。\r\n\t\t * @param\tout 输出三维向量。\r\n\t\t */\r\n\t\t static scale(a:ConchVector3, b:number, out:ConchVector3):void {\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = a.elements;\r\n\t\t\te[0] = f[0] * b;\r\n\t\t\te[1] = f[1] * b;\r\n\t\t\te[2] = f[2] * b;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 插值三维向量。\r\n\t\t * @param\ta left向量。\r\n\t\t * @param\tb right向量。\r\n\t\t * @param\tt 插值比例。\r\n\t\t * @param\tout 输出向量。\r\n\t\t */\r\n\t\t static lerp(a:ConchVector3, b:ConchVector3, t:number, out:ConchVector3):void {\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = a.elements;\r\n\t\t\tvar g:Float32Array = b.elements;\r\n\t\t\tvar ax:number = f[0], ay:number = f[1], az:number = f[2];\r\n\t\t\te[0] = ax + t * (g[0] - ax);\r\n\t\t\te[1] = ay + t * (g[1] - ay);\r\n\t\t\te[2] = az + t * (g[2] - az);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 通过矩阵转换一个三维向量到另外一个三维向量。\r\n\t\t * @param\tvector 源三维向量。\r\n\t\t * @param\ttransform  变换矩阵。\r\n\t\t * @param\tresult 输出三维向量。\r\n\t\t */\r\n\t\t static transformV3ToV3(vector:ConchVector3, transform:any, result:ConchVector3):void {\r\n\t\t\tvar intermediate:ConchVector4 = ConchVector3._tempVector4;\r\n\t\t\tConchVector3.transformV3ToV4(vector, transform, intermediate);\r\n\t\t\tvar intermediateElem:Float32Array = intermediate.elements;\r\n\t\t\tvar resultElem:Float32Array = result.elements;\r\n\t\t\tresultElem[0] = intermediateElem[0];\r\n\t\t\tresultElem[1] = intermediateElem[1];\r\n\t\t\tresultElem[2] = intermediateElem[2];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 通过矩阵转换一个三维向量到另外一个四维向量。\r\n\t\t * @param\tvector 源三维向量。\r\n\t\t * @param\ttransform  变换矩阵。\r\n\t\t * @param\tresult 输出四维向量。\r\n\t\t */\r\n\t\t static transformV3ToV4(vector:ConchVector3, transform:any, result:ConchVector4):void {\r\n\t\t\tvar vectorElem:Float32Array = vector.elements;\r\n\t\t\tvar vectorX:number = vectorElem[0];\r\n\t\t\tvar vectorY:number = vectorElem[1];\r\n\t\t\tvar vectorZ:number = vectorElem[2];\r\n\t\t\t\r\n\t\t\tvar transformElem:Float32Array = transform.elements;\r\n\t\t\tvar resultElem:Float32Array = result.elements;\r\n\t\t\tresultElem[0] = (vectorX * transformElem[0]) + (vectorY * transformElem[4]) + (vectorZ * transformElem[8]) + transformElem[12];\r\n\t\t\tresultElem[1] = (vectorX * transformElem[1]) + (vectorY * transformElem[5]) + (vectorZ * transformElem[9]) + transformElem[13];\r\n\t\t\tresultElem[2] = (vectorX * transformElem[2]) + (vectorY * transformElem[6]) + (vectorZ * transformElem[10]) + transformElem[14];\r\n\t\t\tresultElem[3] = (vectorX * transformElem[3]) + (vectorY * transformElem[7]) + (vectorZ * transformElem[11]) + transformElem[15];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 通过法线矩阵转换一个法线三维向量到另外一个三维向量。\r\n\t\t * @param\tnormal 源法线三维向量。\r\n\t\t * @param\ttransform  法线变换矩阵。\r\n\t\t * @param\tresult 输出法线三维向量。\r\n\t\t */\r\n\t\t static TransformNormal(normal:ConchVector3, transform:any, result:ConchVector3):void {\r\n\t\t\tvar normalElem:Float32Array = normal.elements;\r\n\t\t\tvar normalX:number = normalElem[0];\r\n\t\t\tvar normalY:number = normalElem[1];\r\n\t\t\tvar normalZ:number = normalElem[2];\r\n\t\t\t\r\n\t\t\tvar transformElem:Float32Array = transform.elements;\r\n\t\t\tvar resultElem:Float32Array = result.elements;\r\n\t\t\tresultElem[0] = (normalX * transformElem[0]) + (normalY * transformElem[4]) + (normalZ * transformElem[8]);\r\n\t\t\tresultElem[1] = (normalX * transformElem[1]) + (normalY * transformElem[5]) + (normalZ * transformElem[9]);\r\n\t\t\tresultElem[2] = (normalX * transformElem[2]) + (normalY * transformElem[6]) + (normalZ * transformElem[10]);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 通过矩阵转换一个三维向量到另外一个归一化的三维向量。\r\n\t\t * @param\tvector 源三维向量。\r\n\t\t * @param\ttransform  变换矩阵。\r\n\t\t * @param\tresult 输出三维向量。\r\n\t\t */\r\n\t\t static transformCoordinate(coordinate:ConchVector3, transform:any, result:ConchVector3):void {\r\n\t\t\tvar coordinateElem:Float32Array = coordinate.elements;\r\n\t\t\tvar coordinateX:number = coordinateElem[0];\r\n\t\t\tvar coordinateY:number = coordinateElem[1];\r\n\t\t\tvar coordinateZ:number = coordinateElem[2];\r\n\t\t\t\r\n\t\t\tvar transformElem:Float32Array = transform.elements;\r\n\t\t\tvar w:number = ((coordinateX * transformElem[3]) + (coordinateY * transformElem[7]) + (coordinateZ * transformElem[11]) + transformElem[15]);\r\n\t\t\tvar resultElem:Float32Array = result.elements;\r\n\t\t\tresultElem[0] = (coordinateX * transformElem[0]) + (coordinateY * transformElem[4]) + (coordinateZ * transformElem[8]) + transformElem[12] / w;\r\n\t\t\tresultElem[1] = (coordinateX * transformElem[1]) + (coordinateY * transformElem[5]) + (coordinateZ * transformElem[9]) + transformElem[13] / w;\r\n\t\t\tresultElem[2] = (coordinateX * transformElem[2]) + (coordinateY * transformElem[6]) + (coordinateZ * transformElem[10]) + transformElem[14] / w;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 求一个指定范围的向量\r\n\t\t * @param\tvalue clamp向量\r\n\t\t * @param\tmin  最小\r\n\t\t * @param\tmax  最大\r\n\t\t * @param   out 输出向量\r\n\t\t */\r\n\t\t static Clamp(value:ConchVector3, min:ConchVector3, max:ConchVector3, out:ConchVector3):void {\r\n\t\t\t\r\n\t\t\tvar valuee:Float32Array = value.elements;\r\n\t\t\tvar x:number = valuee[0];\r\n\t\t\tvar y:number = valuee[1];\r\n\t\t\tvar z:number = valuee[2];\r\n\t\t\t\r\n\t\t\tvar mine:Float32Array = min.elements;\r\n\t\t\tvar mineX:number = mine[0];\r\n\t\t\tvar mineY:number = mine[1];\r\n\t\t\tvar mineZ:number = mine[2];\r\n\t\t\t\r\n\t\t\tvar maxe:Float32Array = max.elements;\r\n\t\t\tvar maxeX:number = maxe[0];\r\n\t\t\tvar maxeY:number = maxe[1];\r\n\t\t\tvar maxeZ:number = maxe[2];\r\n\t\t\t\r\n\t\t\tvar oute:Float32Array = out.elements;\r\n\t\t\t\r\n\t\t\tx = (x > maxeX) ? maxeX : x;\r\n\t\t\tx = (x < mineX) ? mineX : x;\r\n\t\t\t\r\n\t\t\ty = (y > maxeY) ? maxeY : y;\r\n\t\t\ty = (y < mineY) ? mineY : y;\r\n\t\t\t\r\n\t\t\tz = (z > maxeZ) ? maxeZ : z;\r\n\t\t\tz = (z < mineZ) ? mineZ : z;\r\n\t\t\t\r\n\t\t\toute[0] = x;\r\n\t\t\toute[1] = y;\r\n\t\t\toute[2] = z;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 求两个三维向量的和。\r\n\t\t * @param\ta left三维向量。\r\n\t\t * @param\tb right三维向量。\r\n\t\t * @param\tout 输出向量。\r\n\t\t */\r\n\t\t static add(a:ConchVector3, b:ConchVector3, out:ConchVector3):void {\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = a.elements;\r\n\t\t\tvar g:Float32Array = b.elements\r\n\t\t\te[0] = f[0] + g[0];\r\n\t\t\te[1] = f[1] + g[1];\r\n\t\t\te[2] = f[2] + g[2];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 求两个三维向量的差。\r\n\t\t * @param\ta  left三维向量。\r\n\t\t * @param\tb  right三维向量。\r\n\t\t * @param\to out 输出向量。\r\n\t\t */\r\n\t\t static subtract(a:ConchVector3, b:ConchVector3, o:ConchVector3):void {\r\n\t\t\tvar oe:Float32Array = o.elements;\r\n\t\t\tvar ae:Float32Array = a.elements;\r\n\t\t\tvar be:Float32Array = b.elements;\r\n\t\t\toe[0] = ae[0] - be[0];\r\n\t\t\toe[1] = ae[1] - be[1];\r\n\t\t\toe[2] = ae[2] - be[2];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 求两个三维向量的叉乘。\r\n\t\t * @param\ta left向量。\r\n\t\t * @param\tb right向量。\r\n\t\t * @param\to 输出向量。\r\n\t\t */\r\n\t\t static cross(a:ConchVector3, b:ConchVector3, o:ConchVector3):void {\r\n\t\t\tvar ae:Float32Array = a.elements;\r\n\t\t\tvar be:Float32Array = b.elements;\r\n\t\t\tvar oe:Float32Array = o.elements;\r\n\t\t\tvar ax:number = ae[0], ay:number = ae[1], az:number = ae[2], bx:number = be[0], by:number = be[1], bz:number = be[2];\r\n\t\t\toe[0] = ay * bz - az * by;\r\n\t\t\toe[1] = az * bx - ax * bz;\r\n\t\t\toe[2] = ax * by - ay * bx;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 求两个三维向量的点积。\r\n\t\t * @param\ta left向量。\r\n\t\t * @param\tb right向量。\r\n\t\t * @return   点积。\r\n\t\t */\r\n\t\t static dot(a:ConchVector3, b:ConchVector3):number {\r\n\t\t\tvar ae:Float32Array = a.elements;\r\n\t\t\tvar be:Float32Array = b.elements;\r\n\t\t\tvar r:number = (ae[0] * be[0]) + (ae[1] * be[1]) + (ae[2] * be[2]);\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 判断两个三维向量是否相等。\r\n\t\t * @param\ta 三维向量。\r\n\t\t * @param\tb 三维向量。\r\n\t\t * @return  是否相等。\r\n\t\t */\r\n\t\t static equals(a:ConchVector3, b:ConchVector3):boolean {\r\n\t\t\tvar ae:Float32Array = a.elements;\r\n\t\t\tvar be:Float32Array = b.elements;\r\n\t\t\treturn MathUtils3D.nearEqual(ae[0], be[0]) && MathUtils3D.nearEqual(ae[1], be[1]) && MathUtils3D.nearEqual(ae[2], be[2]);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取X轴坐标。\r\n\t\t * @return\tX轴坐标。\r\n\t\t */\r\n\t\t get x():number {\r\n\t\t\treturn this.elements[0];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置X轴坐标。\r\n\t\t * @param\tvalue  X轴坐标。\r\n\t\t */\r\n\t\t set x(value:number) {\r\n\t\t\tthis.elements[0] = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取Y轴坐标。\r\n\t\t * @return\tY轴坐标。\r\n\t\t */\r\n\t\t get y():number {\r\n\t\t\treturn this.elements[1];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置Y轴坐标。\r\n\t\t * @param\tvalue  Y轴坐标。\r\n\t\t */\r\n\t\t set y(value:number) {\r\n\t\t\tthis.elements[1] = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取Z轴坐标。\r\n\t\t * @return\tZ轴坐标。\r\n\t\t */\r\n\t\t get z():number {\r\n\t\t\treturn this.elements[2];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置Z轴坐标。\r\n\t\t * @param\tvalue  Z轴坐标。\r\n\t\t */\r\n\t\t set z(value:number) {\r\n\t\t\tthis.elements[2] = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个 <code>Vector3</code> 实例。\r\n\t\t * @param\tx  X轴坐标。\r\n\t\t * @param\ty  Y轴坐标。\r\n\t\t * @param\tz  Z轴坐标。\r\n\t\t */\r\n\t\tconstructor(x:number = 0, y:number = 0, z:number = 0, nativeElements:Float32Array = null/*[NATIVE]*/){\r\n\t\t\tvar v:Float32Array;\r\n\t\t\tif (nativeElements) {///*[NATIVE]*/\r\n\t\t\t\tv = nativeElements;\r\n\t\t\t} else {\r\n\t\t\t\tv = new Float32Array(3);\r\n\t\t\t}\r\n\t\t\tthis.elements = v;\r\n\t\t\tv[0] = x;\r\n\t\t\tv[1] = y;\r\n\t\t\tv[2] = z;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置xyz值。\r\n\t\t * @param\tx X值。\r\n\t\t * @param\ty Y值。\r\n\t\t * @param\tz Z值。\r\n\t\t */\r\n\t\t setValue(x:number, y:number, z:number):void {\r\n\t\t\tthis.elements[0] = x;\r\n\t\t\tthis.elements[1] = y;\r\n\t\t\tthis.elements[2] = z;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 从Array数组拷贝值。\r\n\t\t * @param  array 数组。\r\n\t\t * @param  offset 数组偏移。\r\n\t\t */\r\n\t\t fromArray(array:any[], offset:number = 0):void {\r\n\t\t\tthis.elements[0] = array[offset + 0];\r\n\t\t\tthis.elements[1] = array[offset + 1];\r\n\t\t\tthis.elements[2] = array[offset + 2];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 克隆。\r\n\t\t * @param\tdestObject 克隆源。\r\n\t\t */\r\n\t\t cloneTo(destObject:any):void {\r\n\t\t\tvar destVector3:ConchVector3 = (<ConchVector3>destObject );\r\n\t\t\tvar destE:Float32Array = destVector3.elements;\r\n\t\t\tvar s:Float32Array = this.elements;\r\n\t\t\tdestE[0] = s[0];\r\n\t\t\tdestE[1] = s[1];\r\n\t\t\tdestE[2] = s[2];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 克隆。\r\n\t\t * @return\t 克隆副本。\r\n\t\t */\r\n\t\t clone():any {\r\n\t\t\tvar destVector3:ConchVector3 = new ConchVector3();\r\n\t\t\tthis.cloneTo(destVector3);\r\n\t\t\treturn destVector3;\r\n\t\t}\r\n\t\t\r\n\t\t toDefault():void {\r\n\t\t\tthis.elements[0] = 0;\r\n\t\t\tthis.elements[1] = 0;\r\n\t\t\tthis.elements[2] = 0;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n","import { ConchVector3 } from \"./ConchVector3\";\r\nimport { IClone } from \"../../core/IClone\"\r\n\timport { MathUtils3D } from \"../MathUtils3D\"\r\n\timport { Matrix3x3 } from \"../Matrix3x3\"\r\n\timport { Matrix4x4 } from \"../Matrix4x4\"\r\n\t\r\n\t/**\r\n\t * <code>Quaternion</code> 类用于创建四元数。\r\n\t */\r\n\texport class ConchQuaternion implements IClone {\r\n\t\t/*[FILEINDEX:10000]*/\r\n\t\t/**@internal */\r\n\t\t static TEMPVector30:ConchVector3 = new ConchVector3();\r\n\t\t/**@internal */\r\n\t\t static TEMPVector31:ConchVector3 = new ConchVector3();\r\n\t\t/**@internal */\r\n\t\t static TEMPVector32:ConchVector3 = new ConchVector3();\r\n\t\t/**@internal */\r\n\t\t static TEMPVector33:ConchVector3 = new ConchVector3();\r\n\t\t/**@internal */\r\n\t\t static TEMPMatrix0:Matrix4x4 = new Matrix4x4();\r\n\t\t/**@internal */\r\n\t\t static TEMPMatrix1:Matrix4x4 = new Matrix4x4();\r\n\t\t/**@internal */\r\n\t\t static _tempMatrix3x3:Matrix3x3 = new Matrix3x3();\r\n\t\t\r\n\t\t/**默认矩阵,禁止修改*/\r\n\t\t static DEFAULT:ConchQuaternion = new ConchQuaternion();\r\n\t\t/**无效矩阵,禁止修改*/\r\n\t\t static NAN:ConchQuaternion = new ConchQuaternion(NaN, NaN, NaN, NaN);\r\n\t\t\r\n\t\t/**\r\n\t\t * @internal\r\n\t\t */\r\n\t\t static _dotArray(l:Float32Array, r:Float32Array):number {\t\t\t\r\n\t\t\treturn l[0] * r[0] + l[1] * r[1] + l[2] * r[2] + l[3] * r[3];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @internal\r\n\t\t */\r\n\t\t static _normalizeArray(f:Float32Array, o:Float32Array):void {\r\n\t\t\t\r\n\t\t\tvar x:number = f[0], y:number = f[1], z:number = f[2], w:number = f[3];\r\n\t\t\tvar len:number = x * x + y * y + z * z + w * w;\r\n\t\t\tif (len > 0) {\r\n\t\t\t\tlen = 1 / Math.sqrt(len);\r\n\t\t\t\to[0] = x * len;\r\n\t\t\t\to[1] = y * len;\r\n\t\t\t\to[2] = z * len;\r\n\t\t\t\to[3] = w * len;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @internal\r\n\t\t */\r\n\t\t static _lerpArray(l:Float32Array, r:Float32Array, amount:number, o:Float32Array):void {\r\n\t\t\tvar inverse:number = 1.0 - amount;\r\n\t\t\tif (ConchQuaternion._dotArray(l, r) >= 0) {\r\n\t\t\t\to[0] = (inverse * l[0]) + (amount * r[0]);\r\n\t\t\t\to[1] = (inverse * l[1]) + (amount * r[1]);\r\n\t\t\t\to[2] = (inverse * l[2]) + (amount * r[2]);\r\n\t\t\t\to[3] = (inverse * l[3]) + (amount * r[3]);\r\n\t\t\t} else {\r\n\t\t\t\to[0] = (inverse * l[0]) - (amount * r[0]);\r\n\t\t\t\to[1] = (inverse * l[1]) - (amount * r[1]);\r\n\t\t\t\to[2] = (inverse * l[2]) - (amount * r[2]);\r\n\t\t\t\to[3] = (inverse * l[3]) - (amount * r[3]);\r\n\t\t\t}\r\n\t\t\tConchQuaternion._normalizeArray(o, o);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t *  从欧拉角生成四元数（顺序为Yaw、Pitch、Roll）\r\n\t\t * @param\tyaw yaw值\r\n\t\t * @param\tpitch pitch值\r\n\t\t * @param\troll roll值\r\n\t\t * @param\tout 输出四元数\r\n\t\t */\r\n\t\t static createFromYawPitchRoll(yaw:number, pitch:number, roll:number, out:ConchQuaternion):void {\r\n\t\t\t\r\n\t\t\tvar halfRoll:number = roll * 0.5;\r\n\t\t\tvar halfPitch:number = pitch * 0.5;\r\n\t\t\tvar halfYaw:number = yaw * 0.5;\r\n\t\t\t\r\n\t\t\tvar sinRoll:number = Math.sin(halfRoll);\r\n\t\t\tvar cosRoll:number = Math.cos(halfRoll);\r\n\t\t\tvar sinPitch:number = Math.sin(halfPitch);\r\n\t\t\tvar cosPitch:number = Math.cos(halfPitch);\r\n\t\t\tvar sinYaw:number = Math.sin(halfYaw);\r\n\t\t\tvar cosYaw:number = Math.cos(halfYaw);\r\n\t\t\t\r\n\t\t\tvar oe:Float32Array = out.elements;\r\n\t\t\toe[0] = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\r\n\t\t\toe[1] = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\r\n\t\t\toe[2] = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\r\n\t\t\toe[3] = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算两个四元数相乘\r\n\t\t * @param\tleft left四元数\r\n\t\t * @param\tright  right四元数\r\n\t\t * @param\tout 输出四元数\r\n\t\t */\r\n\t\t static multiply(left:ConchQuaternion, right:ConchQuaternion, out:ConchQuaternion):void {\r\n\t\t\t\r\n\t\t\tvar le:Float32Array = left.elements;\r\n\t\t\tvar re:Float32Array = right.elements;\r\n\t\t\tvar oe:Float32Array = out.elements;\r\n\t\t\t\r\n\t\t\tvar lx:number = le[0];\r\n\t\t\tvar ly:number = le[1];\r\n\t\t\tvar lz:number = le[2];\r\n\t\t\tvar lw:number = le[3];\r\n\t\t\tvar rx:number = re[0];\r\n\t\t\tvar ry:number = re[1];\r\n\t\t\tvar rz:number = re[2];\r\n\t\t\tvar rw:number = re[3];\r\n\t\t\tvar a:number = (ly * rz - lz * ry);\r\n\t\t\tvar b:number = (lz * rx - lx * rz);\r\n\t\t\tvar c:number = (lx * ry - ly * rx);\r\n\t\t\tvar d:number = (lx * rx + ly * ry + lz * rz);\r\n\t\t\toe[0] = (lx * rw + rx * lw) + a;\r\n\t\t\toe[1] = (ly * rw + ry * lw) + b;\r\n\t\t\toe[2] = (lz * rw + rz * lw) + c;\r\n\t\t\toe[3] = lw * rw - d;\r\n\t\t}\r\n\t\t\r\n\t\tprivate static arcTanAngle(x:number, y:number):number {\r\n\t\t\t\r\n\t\t\tif (x == 0) {\r\n\t\t\t\tif (y == 1)\r\n\t\t\t\t\treturn Math.PI / 2;\r\n\t\t\t\treturn -Math.PI / 2;\r\n\t\t\t}\r\n\t\t\tif (x > 0)\r\n\t\t\t\treturn Math.atan(y / x);\r\n\t\t\tif (x < 0) {\r\n\t\t\t\tif (y > 0)\r\n\t\t\t\t\treturn Math.atan(y / x) + Math.PI;\r\n\t\t\t\treturn Math.atan(y / x) - Math.PI;\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\tprivate static angleTo(from:ConchVector3, location:ConchVector3, angle:ConchVector3):void {\r\n\t\t\t\r\n\t\t\tConchVector3.subtract(location, from, ConchQuaternion.TEMPVector30);\r\n\t\t\tConchVector3.normalize(ConchQuaternion.TEMPVector30, ConchQuaternion.TEMPVector30);\r\n\t\t\t\r\n\t\t\tangle.elements[0] = Math.asin(ConchQuaternion.TEMPVector30.y);\r\n\t\t\tangle.elements[1] = ConchQuaternion.arcTanAngle(-ConchQuaternion.TEMPVector30.z, -ConchQuaternion.TEMPVector30.x);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 从指定的轴和角度计算四元数\r\n\t\t * @param\taxis  轴\r\n\t\t * @param\trad  角度\r\n\t\t * @param\tout  输出四元数\r\n\t\t */\r\n\t\t static createFromAxisAngle(axis:ConchVector3, rad:number, out:ConchQuaternion):void {\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = axis.elements;\r\n\t\t\t\r\n\t\t\trad = rad * 0.5;\r\n\t\t\tvar s:number = Math.sin(rad);\r\n\t\t\te[0] = s * f[0];\r\n\t\t\te[1] = s * f[1];\r\n\t\t\te[2] = s * f[2];\r\n\t\t\te[3] = Math.cos(rad);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 根据3x3矩阵计算四元数\r\n\t\t * @param\tsou 源矩阵\r\n\t\t * @param\tout 输出四元数\r\n\t\t */\r\n\t\t static createFromMatrix3x3(sou:Matrix3x3, out:ConchQuaternion):void {\r\n\t\t\t\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = sou.elements;\r\n\t\t\t\r\n\t\t\tvar fTrace:number = f[0] + f[4] + f[8];\r\n\t\t\tvar fRoot:number;\r\n\t\t\tif (fTrace > 0.0) {\r\n\t\t\t\t// |w| > 1/2, may as well choose w > 1/2\r\n\t\t\t\tfRoot = Math.sqrt(fTrace + 1.0);  // 2w\r\n\t\t\t\te[3] = 0.5 * fRoot;\r\n\t\t\t\tfRoot = 0.5 / fRoot;  // 1/(4w)\r\n\t\t\t\te[0] = (f[5] - f[7]) * fRoot;\r\n\t\t\t\te[1] = (f[6] - f[2]) * fRoot;\r\n\t\t\t\te[2] = (f[1] - f[3]) * fRoot;\r\n\t\t\t} else {\r\n\t\t\t\t// |w| <= 1/2\r\n\t\t\t\tvar i:number = 0;\r\n\t\t\t\tif (f[4] > f[0])\r\n\t\t\t\t\ti = 1;\r\n\t\t\t\tif (f[8] > f[i * 3 + i])\r\n\t\t\t\t\ti = 2;\r\n\t\t\t\tvar j:number = (i + 1) % 3;\r\n\t\t\t\tvar k:number = (i + 2) % 3;\r\n\t\t\t\t\r\n\t\t\t\tfRoot = Math.sqrt(f[i * 3 + i] - f[j * 3 + j] - f[k * 3 + k] + 1.0);\r\n\t\t\t\te[i] = 0.5 * fRoot;\r\n\t\t\t\tfRoot = 0.5 / fRoot;\r\n\t\t\t\te[3] = (f[j * 3 + k] - f[k * 3 + j]) * fRoot;\r\n\t\t\t\te[j] = (f[j * 3 + i] + f[i * 3 + j]) * fRoot;\r\n\t\t\t\te[k] = (f[k * 3 + i] + f[i * 3 + k]) * fRoot;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn;\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t *  从旋转矩阵计算四元数\r\n\t\t * @param\tmat 旋转矩阵\r\n\t\t * @param\tout  输出四元数\r\n\t\t */\r\n\t\t static createFromMatrix4x4(mat:Matrix4x4, out:ConchQuaternion):void {\r\n\t\t\t\r\n\t\t\tvar me:Float32Array = mat.elements;\r\n\t\t\tvar oe:Float32Array = out.elements;\r\n\t\t\t\r\n\t\t\tvar sqrt:number;\r\n\t\t\tvar half:number;\r\n\t\t\tvar scale:number = me[0] + me[5] + me[10];\r\n\t\t\t\r\n\t\t\tif (scale > 0.0) {\r\n\t\t\t\tsqrt = Math.sqrt(scale + 1.0);\r\n\t\t\t\toe[3] = sqrt * 0.5;\r\n\t\t\t\tsqrt = 0.5 / sqrt;\r\n\t\t\t\t\r\n\t\t\t\toe[0] = (me[6] - me[9]) * sqrt;\r\n\t\t\t\toe[1] = (me[8] - me[2]) * sqrt;\r\n\t\t\t\toe[2] = (me[1] - me[4]) * sqrt;\r\n\t\t\t} else if ((me[0] >= me[5]) && (me[0] >= me[10])) {\r\n\t\t\t\tsqrt = Math.sqrt(1.0 + me[0] - me[5] - me[10]);\r\n\t\t\t\thalf = 0.5 / sqrt;\r\n\t\t\t\t\r\n\t\t\t\toe[0] = 0.5 * sqrt;\r\n\t\t\t\toe[1] = (me[1] + me[4]) * half;\r\n\t\t\t\toe[2] = (me[2] + me[8]) * half;\r\n\t\t\t\toe[3] = (me[6] - me[9]) * half;\r\n\t\t\t} else if (me[5] > me[10]) {\r\n\t\t\t\tsqrt = Math.sqrt(1.0 + me[5] - me[0] - me[10]);\r\n\t\t\t\thalf = 0.5 / sqrt;\r\n\t\t\t\t\r\n\t\t\t\toe[0] = (me[4] + me[1]) * half;\r\n\t\t\t\toe[1] = 0.5 * sqrt;\r\n\t\t\t\toe[2] = (me[9] + me[6]) * half;\r\n\t\t\t\toe[3] = (me[8] - me[2]) * half;\r\n\t\t\t} else {\r\n\t\t\t\tsqrt = Math.sqrt(1.0 + me[10] - me[0] - me[5]);\r\n\t\t\t\thalf = 0.5 / sqrt;\r\n\t\t\t\t\r\n\t\t\t\toe[0] = (me[8] + me[2]) * half;\r\n\t\t\t\toe[1] = (me[9] + me[6]) * half;\r\n\t\t\t\toe[2] = 0.5 * sqrt;\r\n\t\t\t\toe[3] = (me[1] - me[4]) * half;\r\n\t\t\t}\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 球面插值\r\n\t\t * @param\tleft left四元数\r\n\t\t * @param\tright  right四元数\r\n\t\t * @param\ta 插值比例\r\n\t\t * @param\tout 输出四元数\r\n\t\t * @return   输出Float32Array\r\n\t\t */\r\n\t\t static slerp(left:ConchQuaternion, right:ConchQuaternion, t:number, out:ConchQuaternion):Float32Array {\r\n\t\t\t\r\n\t\t\tvar a:Float32Array = left.elements;\r\n\t\t\tvar b:Float32Array = right.elements;\r\n\t\t\tvar oe:Float32Array = out.elements;\r\n\t\t\tvar ax:number = a[0], ay:number = a[1], az:number = a[2], aw:number = a[3], bx:number = b[0], by:number = b[1], bz:number = b[2], bw:number = b[3];\r\n\t\t\t\r\n\t\t\tvar omega:number, cosom:number, sinom:number, scale0:number, scale1:number;\r\n\t\t\t\r\n\t\t\t// calc cosine \r\n\t\t\tcosom = ax * bx + ay * by + az * bz + aw * bw;\r\n\t\t\t// adjust signs (if necessary) \r\n\t\t\tif (cosom < 0.0) {\r\n\t\t\t\tcosom = -cosom;\r\n\t\t\t\tbx = -bx;\r\n\t\t\t\tby = -by;\r\n\t\t\t\tbz = -bz;\r\n\t\t\t\tbw = -bw;\r\n\t\t\t}\r\n\t\t\t// calculate coefficients \r\n\t\t\tif ((1.0 - cosom) > 0.000001) {\r\n\t\t\t\t// standard case (slerp) \r\n\t\t\t\tomega = Math.acos(cosom);\r\n\t\t\t\tsinom = Math.sin(omega);\r\n\t\t\t\tscale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n\t\t\t\tscale1 = Math.sin(t * omega) / sinom;\r\n\t\t\t} else {\r\n\t\t\t\t// \"from\" and \"to\" quaternions are very close  \r\n\t\t\t\t//  ... so we can do a linear interpolation \r\n\t\t\t\tscale0 = 1.0 - t;\r\n\t\t\t\tscale1 = t;\r\n\t\t\t}\r\n\t\t\t// calculate final values \r\n\t\t\toe[0] = scale0 * ax + scale1 * bx;\r\n\t\t\toe[1] = scale0 * ay + scale1 * by;\r\n\t\t\toe[2] = scale0 * az + scale1 * bz;\r\n\t\t\toe[3] = scale0 * aw + scale1 * bw;\r\n\t\t\t\r\n\t\t\treturn oe;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算两个四元数的线性插值\r\n\t\t * @param\tleft left四元数\r\n\t\t * @param\tright right四元数b\r\n\t\t * @param\tt 插值比例\r\n\t\t * @param\tout 输出四元数\r\n\t\t */\r\n\t\t static lerp(left:ConchQuaternion, right:ConchQuaternion, amount:number, out:ConchQuaternion):void {\r\n\t\t\tConchQuaternion._lerpArray(left.elements, right.elements, amount, out.elements);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算两个四元数的和\r\n\t\t * @param\tleft  left四元数\r\n\t\t * @param\tright right 四元数\r\n\t\t * @param\tout 输出四元数\r\n\t\t */\r\n\t\t static add(left:any, right:ConchQuaternion, out:ConchQuaternion):void {\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = left.elements;\r\n\t\t\tvar g:Float32Array = right.elements;\r\n\t\t\t\r\n\t\t\te[0] = f[0] + g[0];\r\n\t\t\te[1] = f[1] + g[1];\r\n\t\t\te[2] = f[2] + g[2];\r\n\t\t\te[3] = f[3] + g[3];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算两个四元数的点积\r\n\t\t * @param\tleft left四元数\r\n\t\t * @param\tright right四元数\r\n\t\t * @return  点积\r\n\t\t */\r\n\t\t static dot(left:any, right:ConchQuaternion):number {\r\n\t\t\treturn ConchQuaternion._dotArray(left.elements,right.elements);\r\n\t\t}\r\n\t\t\r\n\t\t/**四元数元素数组*/\r\n\t\t elements:Float32Array;\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取四元数的x值\r\n\t\t */\r\n\t\t get x():number {\r\n\t\t\treturn this.elements[0];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置四元数的x值\r\n\t\t */\r\n\t\t set x(value:number) {\r\n\t\t\tthis.elements[0] = value;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取四元数的y值\r\n\t\t */\r\n\t\t get y():number {\r\n\t\t\treturn this.elements[1];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置四元数的y值\r\n\t\t */\r\n\t\t set y(value:number) {\r\n\t\t\tthis.elements[1] = value;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取四元数的z值\r\n\t\t */\r\n\t\t get z():number {\r\n\t\t\treturn this.elements[2];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置四元数的z值\r\n\t\t */\r\n\t\t set z(value:number) {\r\n\t\t\tthis.elements[2] = value;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取四元数的w值\r\n\t\t */\r\n\t\t get w():number {\r\n\t\t\treturn this.elements[3];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置四元数的w值\r\n\t\t */\r\n\t\t set w(value:number) {\r\n\t\t\tthis.elements[3] = value;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个 <code>Quaternion</code> 实例。\r\n\t\t * @param\tx 四元数的x值\r\n\t\t * @param\ty 四元数的y值\r\n\t\t * @param\tz 四元数的z值\r\n\t\t * @param\tw 四元数的w值\r\n\t\t */\r\n\t\tconstructor(x:number = 0, y:number = 0, z:number = 0, w:number = 1, nativeElements:Float32Array = null/*[NATIVE]*/){\r\n\t\t\tvar v:Float32Array;\r\n\t\t\tif (nativeElements) {///*[NATIVE]*/\r\n\t\t\t\tv = nativeElements;\r\n\t\t\t} else {\r\n\t\t\t\tv = new Float32Array(4);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tv[0] = x;\r\n\t\t\tv[1] = y;\r\n\t\t\tv[2] = z;\r\n\t\t\tv[3] = w;\r\n\t\t\tthis.elements = v;\t\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 根据缩放值缩放四元数\r\n\t\t * @param\tscale 缩放值\r\n\t\t * @param\tout 输出四元数\r\n\t\t */\r\n\t\t scaling(scaling:number, out:ConchQuaternion):void {\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = this.elements;\r\n\t\t\t\r\n\t\t\te[0] = f[0] * scaling;\r\n\t\t\te[1] = f[1] * scaling;\r\n\t\t\te[2] = f[2] * scaling;\r\n\t\t\te[3] = f[3] * scaling;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 归一化四元数\r\n\t\t * @param\tout 输出四元数\r\n\t\t */\r\n\t\t normalize(out:ConchQuaternion):void {\r\n\t\t\t\r\n\t\t\tConchQuaternion._normalizeArray(this.elements, out.elements);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算四元数的长度\r\n\t\t * @return  长度\r\n\t\t */\r\n\t\t length():number {\r\n\t\t\t\r\n\t\t\tvar f:Float32Array = this.elements;\r\n\t\t\t\r\n\t\t\tvar x:number = f[0], y:number = f[1], z:number = f[2], w:number = f[3];\r\n\t\t\treturn Math.sqrt(x * x + y * y + z * z + w * w);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 根据绕X轴的角度旋转四元数\r\n\t\t * @param\trad 角度\r\n\t\t * @param\tout 输出四元数\r\n\t\t */\r\n\t\t rotateX(rad:number, out:ConchQuaternion):void {\r\n\t\t\t\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = this.elements;\r\n\t\t\t\r\n\t\t\trad *= 0.5;\r\n\t\t\t\r\n\t\t\tvar ax:number = f[0], ay:number = f[1], az:number = f[2], aw:number = f[3];\r\n\t\t\tvar bx:number = Math.sin(rad), bw:number = Math.cos(rad);\r\n\t\t\t\r\n\t\t\te[0] = ax * bw + aw * bx;\r\n\t\t\te[1] = ay * bw + az * bx;\r\n\t\t\te[2] = az * bw - ay * bx;\r\n\t\t\te[3] = aw * bw - ax * bx;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 根据绕Y轴的制定角度旋转四元数\r\n\t\t * @param\trad 角度\r\n\t\t * @param\tout 输出四元数\r\n\t\t */\r\n\t\t rotateY(rad:number, out:ConchQuaternion):void {\r\n\t\t\t\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = this.elements;\r\n\t\t\t\r\n\t\t\trad *= 0.5;\r\n\t\t\t\r\n\t\t\tvar ax:number = f[0], ay:number = f[1], az:number = f[2], aw:number = f[3], by:number = Math.sin(rad), bw:number = Math.cos(rad);\r\n\t\t\t\r\n\t\t\te[0] = ax * bw - az * by;\r\n\t\t\te[1] = ay * bw + aw * by;\r\n\t\t\te[2] = az * bw + ax * by;\r\n\t\t\te[3] = aw * bw - ay * by;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 根据绕Z轴的制定角度旋转四元数\r\n\t\t * @param\trad 角度\r\n\t\t * @param\tout 输出四元数\r\n\t\t */\r\n\t\t rotateZ(rad:number, out:ConchQuaternion):void {\r\n\t\t\t\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = this.elements;\r\n\t\t\t\r\n\t\t\trad *= 0.5;\r\n\t\t\t\r\n\t\t\tvar ax:number = f[0], ay:number = f[1], az:number = f[2], aw:number = f[3], bz:number = Math.sin(rad), bw:number = Math.cos(rad);\r\n\t\t\t\r\n\t\t\te[0] = ax * bw + ay * bz;\r\n\t\t\te[1] = ay * bw - ax * bz;\r\n\t\t\te[2] = az * bw + aw * bz;\r\n\t\t\te[3] = aw * bw - az * bz;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 分解四元数到欧拉角（顺序为Yaw、Pitch、Roll），参考自http://xboxforums.create.msdn.com/forums/p/4574/23988.aspx#23988,问题绕X轴翻转超过±90度时有，会产生瞬间反转\r\n\t\t * @param\tquaternion 源四元数\r\n\t\t * @param\tout 欧拉角值\r\n\t\t */\r\n\t\t getYawPitchRoll(out:ConchVector3):void {\r\n\t\t\t\r\n\t\t\tConchVector3.transformQuat(ConchVector3.ForwardRH, this, ConchQuaternion.TEMPVector31/*forwarldRH*/);\r\n\t\t\t\r\n\t\t\tConchVector3.transformQuat(ConchVector3.Up, this, ConchQuaternion.TEMPVector32/*up*/);\r\n\t\t\tvar upe:Float32Array = ConchQuaternion.TEMPVector32.elements;\r\n\t\t\t\r\n\t\t\tConchQuaternion.angleTo(ConchVector3.ZERO, ConchQuaternion.TEMPVector31, ConchQuaternion.TEMPVector33/*angle*/);\r\n\t\t\tvar anglee:Float32Array = ConchQuaternion.TEMPVector33.elements;\r\n\t\t\t\r\n\t\t\tif (anglee[0] == Math.PI / 2) {\r\n\t\t\t\tanglee[1] = ConchQuaternion.arcTanAngle(upe[2], upe[0]);\r\n\t\t\t\tanglee[2] = 0;\r\n\t\t\t} else if (anglee[0] == -Math.PI / 2) {\r\n\t\t\t\tanglee[1] = ConchQuaternion.arcTanAngle(-upe[2], -upe[0]);\r\n\t\t\t\tanglee[2] = 0;\r\n\t\t\t} else {\r\n\t\t\t\tMatrix4x4.createRotationY(-anglee[1], ConchQuaternion.TEMPMatrix0);\r\n\t\t\t\tMatrix4x4.createRotationX(-anglee[0], ConchQuaternion.TEMPMatrix1);\r\n\t\t\t\t\r\n\t\t\t\tConchVector3.transformCoordinate(ConchQuaternion.TEMPVector32, ConchQuaternion.TEMPMatrix0, ConchQuaternion.TEMPVector32);\r\n\t\t\t\tConchVector3.transformCoordinate(ConchQuaternion.TEMPVector32, ConchQuaternion.TEMPMatrix1, ConchQuaternion.TEMPVector32);\r\n\t\t\t\tanglee[2] = ConchQuaternion.arcTanAngle(upe[1], -upe[0]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Special cases.\r\n\t\t\tif (anglee[1] <= -Math.PI)\r\n\t\t\t\tanglee[1] = Math.PI;\r\n\t\t\tif (anglee[2] <= -Math.PI)\r\n\t\t\t\tanglee[2] = Math.PI;\r\n\t\t\t\r\n\t\t\tif (anglee[1] >= Math.PI && anglee[2] >= Math.PI) {\r\n\t\t\t\tanglee[1] = 0;\r\n\t\t\t\tanglee[2] = 0;\r\n\t\t\t\tanglee[0] = Math.PI - anglee[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar oe:Float32Array = out.elements;\r\n\t\t\toe[0] = anglee[1];\r\n\t\t\toe[1] = anglee[0];\r\n\t\t\toe[2] = anglee[2];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 求四元数的逆\r\n\t\t * @param\tout  输出四元数\r\n\t\t */\r\n\t\t invert(out:ConchQuaternion):void {\r\n\t\t\t\r\n\t\t\tvar e:Float32Array = out.elements;\r\n\t\t\tvar f:Float32Array = this.elements;\r\n\t\t\t\r\n\t\t\tvar a0:number = f[0], a1:number = f[1], a2:number = f[2], a3:number = f[3];\r\n\t\t\tvar dot:number = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n\t\t\tvar invDot:number = dot ? 1.0 / dot : 0;\r\n\t\t\t\r\n\t\t\t// TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\t\t\te[0] = -a0 * invDot;\r\n\t\t\te[1] = -a1 * invDot;\r\n\t\t\te[2] = -a2 * invDot;\r\n\t\t\te[3] = a3 * invDot;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t *设置四元数为单位算数\r\n\t\t * @param out  输出四元数\r\n\t\t */\r\n\t\t identity():void {\r\n\t\t\tvar e:Float32Array = this.elements;\r\n\t\t\te[0] = 0;\r\n\t\t\te[1] = 0;\r\n\t\t\te[2] = 0;\r\n\t\t\te[3] = 1;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 从Array数组拷贝值。\r\n\t\t * @param  array 数组。\r\n\t\t * @param  offset 数组偏移。\r\n\t\t */\r\n\t\t fromArray(array:any[], offset:number = 0):void {\r\n\t\t\tthis.elements[0] = array[offset + 0];\r\n\t\t\tthis.elements[1] = array[offset + 1];\r\n\t\t\tthis.elements[2] = array[offset + 2];\r\n\t\t\tthis.elements[3] = array[offset + 3];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 克隆。\r\n\t\t * @param\tdestObject 克隆源。\r\n\t\t */\r\n\t\t cloneTo(destObject:any):void {\r\n\t\t\t\r\n\t\t\tvar i:number, s:Float32Array, d:Float32Array;\r\n\t\t\ts = this.elements;\r\n\t\t\td = destObject.elements;\r\n\t\t\tif (s === d) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tfor (i = 0; i < 4; ++i) {\r\n\t\t\t\td[i] = s[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 克隆。\r\n\t\t * @return\t 克隆副本。\r\n\t\t */\r\n\t\t clone():any {\r\n\t\t\tvar dest:ConchQuaternion = new ConchQuaternion();\r\n\t\t\tthis.cloneTo(dest);\r\n\t\t\treturn dest;\r\n\t\t}\r\n\t\t\r\n\t\t equals(b:ConchQuaternion):boolean {\r\n\t\t\t\r\n\t\t\tvar ae:Float32Array = this.elements;\r\n\t\t\tvar be:Float32Array = b.elements;\r\n\t\t\t\r\n\t\t\treturn MathUtils3D.nearEqual(ae[0], be[0]) && MathUtils3D.nearEqual(ae[1], be[1]) && MathUtils3D.nearEqual(ae[2], be[2]) && MathUtils3D.nearEqual(ae[3], be[3]);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算旋转观察四元数\r\n\t\t * @param\tforward 方向\r\n\t\t * @param\tup     上向量\r\n\t\t * @param\tout    输出四元数\r\n\t\t */\r\n\t\t static rotationLookAt(forward:ConchVector3, up:ConchVector3, out:ConchQuaternion):void {\r\n\t\t\tConchQuaternion.lookAt(ConchVector3.ZERO, forward, up, out);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算观察四元数\r\n\t\t * @param\teye    观察者位置\r\n\t\t * @param\ttarget 目标位置\r\n\t\t * @param\tup     上向量\r\n\t\t * @param\tout    输出四元数\r\n\t\t */\r\n\t\t static lookAt(eye:any, target:any, up:any, out:ConchQuaternion):void {\r\n\t\t\tMatrix3x3.lookAt(eye, target, up, ConchQuaternion._tempMatrix3x3);\r\n\t\t\tConchQuaternion.rotationMatrix(ConchQuaternion._tempMatrix3x3, out);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算长度的平方。\r\n\t\t * @return 长度的平方。\r\n\t\t */\r\n\t\t lengthSquared():number {\r\n\t\t\tvar x:number = this.elements[0];\r\n\t\t\tvar y:number = this.elements[1];\r\n\t\t\tvar z:number = this.elements[2];\r\n\t\t\tvar w:number = this.elements[3];\r\n\t\t\treturn (x * x) + (y * y) + (z * z) + (w * w);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算四元数的逆四元数。\r\n\t\t * @param\tvalue 四元数。\r\n\t\t * @param\tout 逆四元数。\r\n\t\t */\r\n\t\t static invert(value:ConchQuaternion, out:ConchQuaternion):void {\r\n\t\t\tvar vE:Float32Array = value.elements;\r\n\t\t\tvar oE:Float32Array = out.elements;\r\n\t\t\tvar lengthSq:number = value.lengthSquared();\r\n\t\t\tif (!MathUtils3D.isZero(lengthSq)) {\r\n\t\t\t\tlengthSq = 1.0 / lengthSq;\r\n\t\t\t\t\r\n\t\t\t\toE[0] = -vE[0] * lengthSq;\r\n\t\t\t\toE[1] = -vE[1] * lengthSq;\r\n\t\t\t\toE[2] = -vE[2] * lengthSq;\r\n\t\t\t\toE[3] = vE[3] * lengthSq;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 通过一个3x3矩阵创建一个四元数\r\n\t\t * @param\tmatrix3x3  3x3矩阵\r\n\t\t * @param\tout        四元数\r\n\t\t */\r\n\t\t static rotationMatrix(matrix3x3:Matrix3x3, out:ConchQuaternion):void {\r\n\t\t\tvar me:Float32Array = matrix3x3.elements;\r\n\t\t\tvar m11:number = me[0];\r\n\t\t\tvar m12:number = me[1];\r\n\t\t\tvar m13:number = me[2];\r\n\t\t\tvar m21:number = me[3];\r\n\t\t\tvar m22:number = me[4];\r\n\t\t\tvar m23:number = me[5];\r\n\t\t\tvar m31:number = me[6];\r\n\t\t\tvar m32:number = me[7];\r\n\t\t\tvar m33:number = me[8];\r\n\t\t\t\r\n\t\t\tvar oe:Float32Array = out.elements;\r\n\t\t\t\r\n\t\t\tvar sqrt:number, half:number;\r\n\t\t\tvar scale:number = m11 + m22 + m33;\r\n\t\t\t\r\n\t\t\tif (scale > 0) {\r\n\t\t\t\t\r\n\t\t\t\tsqrt = Math.sqrt(scale + 1);\r\n\t\t\t\toe[3] = sqrt * 0.5;\r\n\t\t\t\tsqrt = 0.5 / sqrt;\r\n\t\t\t\t\r\n\t\t\t\toe[0] = (m23 - m32) * sqrt;\r\n\t\t\t\toe[1] = (m31 - m13) * sqrt;\r\n\t\t\t\toe[2] = (m12 - m21) * sqrt;\r\n\t\t\t\t\r\n\t\t\t} else if ((m11 >= m22) && (m11 >= m33)) {\r\n\t\t\t\t\r\n\t\t\t\tsqrt = Math.sqrt(1 + m11 - m22 - m33);\r\n\t\t\t\thalf = 0.5 / sqrt;\r\n\t\t\t\t\r\n\t\t\t\toe[0] = 0.5 * sqrt;\r\n\t\t\t\toe[1] = (m12 + m21) * half;\r\n\t\t\t\toe[2] = (m13 + m31) * half;\r\n\t\t\t\toe[3] = (m23 - m32) * half;\r\n\t\t\t} else if (m22 > m33) {\r\n\t\t\t\t\r\n\t\t\t\tsqrt = Math.sqrt(1 + m22 - m11 - m33);\r\n\t\t\t\thalf = 0.5 / sqrt;\r\n\t\t\t\t\r\n\t\t\t\toe[0] = (m21 + m12) * half;\r\n\t\t\t\toe[1] = 0.5 * sqrt;\r\n\t\t\t\toe[2] = (m32 + m23) * half;\r\n\t\t\t\toe[3] = (m31 - m13) * half;\r\n\t\t\t} else {\r\n\t\t\t\t\r\n\t\t\t\tsqrt = Math.sqrt(1 + m33 - m11 - m22);\r\n\t\t\t\thalf = 0.5 / sqrt;\r\n\t\t\t\t\r\n\t\t\t\toe[0] = (m31 + m13) * half;\r\n\t\t\t\toe[1] = (m32 + m23) * half;\r\n\t\t\t\toe[2] = 0.5 * sqrt;\r\n\t\t\t\toe[3] = (m12 - m21) * half;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n","import { AnimationClip } from \"../animation/AnimationClip\";\r\nimport { AnimatorStateScript } from \"../animation/AnimatorStateScript\";\r\nimport { IClone } from \"../core/IClone\";\r\nimport { IReferenceCounter } from \"../resource/IReferenceCounter\";\r\nimport { KeyframeNodeOwner } from \"./KeyframeNodeOwner\";\r\nimport { Quaternion } from \"../math/Quaternion\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { KeyframeNodeList } from \"../animation/KeyframeNodeList\";\r\nimport { Render } from \"../../renders/Render\";\r\nimport { ConchVector3 } from \"../math/Native/ConchVector3\";\r\nimport { ConchQuaternion } from \"../math/Native/ConchQuaternion\";\r\n\r\n/**\r\n * <code>AnimatorState</code> 类用于创建动作状态。\r\n */\r\nexport class AnimatorState implements IReferenceCounter, IClone {\r\n\t/** @internal */\r\n\tprivate _referenceCount: number = 0;\r\n\r\n\t/** @internal */\r\n\t_clip: AnimationClip = null;\r\n\t/** @internal */\r\n\t_nodeOwners: KeyframeNodeOwner[] = [];//TODO:提出去\r\n\t/** @internal */\r\n\t_currentFrameIndices: Int16Array = null;\r\n\t/**\r\n\t * @internal\r\n\t * to avoid data confused,must put realtime datas in animatorState,can't be in animationClip,\r\n\t * for example use crossFade() with different animatorState but the sample clip source.\r\n\t */\r\n\t_realtimeDatas: Array<number | Vector3 | Quaternion | ConchVector3 | ConchQuaternion> = [];\r\n\t/** @internal */\r\n\t_scripts: AnimatorStateScript[] = null;\r\n\r\n\t/**名称。*/\r\n\tname: string;\r\n\t/**动画播放速度,1.0为正常播放速度。*/\r\n\tspeed: number = 1.0;\r\n\t/**动作播放起始时间。*/\r\n\tclipStart: number = 0.0;\r\n\t/**动作播放结束时间。*/\r\n\tclipEnd: number = 1.0;\r\n\r\n\t/**\r\n\t * 动作。\r\n\t */\r\n\tget clip(): AnimationClip {\r\n\t\treturn this._clip;\r\n\t}\r\n\r\n\tset clip(value: AnimationClip) {\r\n\t\tif (this._clip !== value) {\r\n\t\t\tif (this._clip)\r\n\t\t\t\t(this._referenceCount > 0) && (this._clip._removeReference(this._referenceCount));\r\n\t\t\tif (value) {\r\n\t\t\t\tvar realtimeDatas: Array<number | Vector3 | Quaternion | ConchVector3 | ConchQuaternion> = this._realtimeDatas;\r\n\t\t\t\tvar clipNodes: KeyframeNodeList = value._nodes;\r\n\t\t\t\tvar count: number = clipNodes.count;\r\n\t\t\t\tthis._currentFrameIndices = new Int16Array(count);\r\n\t\t\t\tthis._resetFrameIndices();\r\n\t\t\t\t(this._referenceCount > 0) && (value._addReference(this._referenceCount));\r\n\t\t\t\tthis._realtimeDatas.length = count;\r\n\t\t\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\t\t\tswitch (clipNodes.getNodeByIndex(i).type) {\r\n\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\trealtimeDatas[i] = Render.supportWebGLPlusAnimation ? new ConchVector3 : new Vector3();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\trealtimeDatas[i] = Render.supportWebGLPlusAnimation ? new ConchQuaternion : new Quaternion();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tthrow \"AnimationClipParser04:unknown type.\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._clip = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>AnimatorState</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @implements IReferenceCounter\r\n\t */\r\n\t_getReferenceCount(): number {\r\n\t\treturn this._referenceCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @implements IReferenceCounter\r\n\t */\r\n\t_addReference(count: number = 1): void {\r\n\t\t(this._clip) && (this._clip._addReference(count));\r\n\t\tthis._referenceCount += count;\r\n\t}\r\n\r\n\t/**\r\n\t * @implements IReferenceCounter\r\n\t */\r\n\t_removeReference(count: number = 1): void {\r\n\t\t(this._clip) && (this._clip._removeReference(count));\r\n\t\tthis._referenceCount -= count;\r\n\t}\r\n\r\n\t/**\r\n\t * @implements IReferenceCounter\r\n\t */\r\n\t_clearReference(): void {\r\n\t\tthis._removeReference(-this._referenceCount);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_resetFrameIndices(): void {\r\n\t\tfor (var i: number = 0, n: number = this._currentFrameIndices.length; i < n; i++)\r\n\t\t\tthis._currentFrameIndices[i] = -1;//-1表示没到第0帧,首帧时间可能大于\r\n\t}\r\n\r\n\t/**\r\n\t * 添加脚本。\r\n\t * @param\ttype  组件类型。\r\n\t * @return 脚本。\r\n\t *\r\n\t */\r\n\taddScript(type: typeof AnimatorStateScript): AnimatorStateScript {\r\n\t\tvar script: AnimatorStateScript = new type();\r\n\t\tthis._scripts = this._scripts || [];\r\n\t\tthis._scripts.push(script);\r\n\t\treturn script;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取脚本。\r\n\t * @param\ttype  组件类型。\r\n\t * @return 脚本。\r\n\t *\r\n\t */\r\n\tgetScript(type: typeof AnimatorStateScript): AnimatorStateScript {\r\n\t\tif (this._scripts) {\r\n\t\t\tfor (var i: number = 0, n: number = this._scripts.length; i < n; i++) {\r\n\t\t\t\tvar script: AnimatorStateScript = this._scripts[i];\r\n\t\t\t\tif (script instanceof type)\r\n\t\t\t\t\treturn script;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取脚本集合。\r\n\t * @param\ttype  组件类型。\r\n\t * @return 脚本集合。\r\n\t *\r\n\t */\r\n\tgetScripts(type: typeof AnimatorStateScript): AnimatorStateScript[] {\r\n\t\tvar coms: AnimatorStateScript[];\r\n\t\tif (this._scripts) {\r\n\t\t\tfor (var i: number = 0, n: number = this._scripts.length; i < n; i++) {\r\n\t\t\t\tvar script: AnimatorStateScript = this._scripts[i];\r\n\t\t\t\tif (script instanceof type) {\r\n\t\t\t\t\tcoms = coms || [];\r\n\t\t\t\t\tcoms.push(script);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn coms;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar dest: AnimatorState = <AnimatorState>destObject;\r\n\t\tdest.name = this.name;\r\n\t\tdest.speed = this.speed;\r\n\t\tdest.clipStart = this.clipStart;\r\n\t\tdest.clipEnd = this.clipEnd;\r\n\t\tdest.clip = this._clip;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: AnimatorState = new AnimatorState();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Vector3 } from \"../math/Vector3\";\r\nimport { Quaternion } from \"../math/Quaternion\";\r\n\r\n/**\r\n * @internal\r\n * <code>KeyframeNodeOwner</code> 类用于保存帧节点的拥有者信息。\r\n */\r\nexport class KeyframeNodeOwner {\r\n\t/**@internal */\r\n\tindexInList: number = -1;\r\n\t/**@internal */\r\n\treferenceCount: number = 0;\r\n\t/**@internal */\r\n\tupdateMark: number = -1;\r\n\r\n\t/**@internal */\r\n\ttype: number = -1;\r\n\t/**@internal */\r\n\tfullPath: string = null;\r\n\t/**@internal */\r\n\tpropertyOwner: any = null;\r\n\t/**@internal */\r\n\tproperty: string[] = null;\r\n\t/**@internal */\r\n\tdefaultValue: any = null;\r\n\t/**@internal */\r\n\tvalue: any = null;\r\n\t/**@internal */\r\n\tcrossFixedValue: any = null;\r\n\r\n\t/**\r\n\t * 创建一个 <code>KeyframeNodeOwner</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tsaveCrossFixedValue(): void {\r\n\t\tvar pro: any = this.propertyOwner;\r\n\t\tif (pro) {\r\n\t\t\tswitch (this.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tthis.crossFixedValue = this.value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\tcase 3:\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t(<Vector3>this.value).cloneTo(this.crossFixedValue);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t(<Quaternion>this.value).cloneTo(this.crossFixedValue);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"Animator:unknown type.\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Component } from \"../../components/Component\";\r\nimport { Node } from \"../../display/Node\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Render } from \"../../renders/Render\";\r\nimport { Timer } from \"../../utils/Timer\";\r\nimport { AnimationClip } from \"../animation/AnimationClip\";\r\nimport { AnimationEvent } from \"../animation/AnimationEvent\";\r\nimport { AnimationNode } from \"../animation/AnimationNode\";\r\nimport { AnimationTransform3D } from \"../animation/AnimationTransform3D\";\r\nimport { AnimatorStateScript } from \"../animation/AnimatorStateScript\";\r\nimport { KeyframeNode } from \"../animation/KeyframeNode\";\r\nimport { KeyframeNodeList } from \"../animation/KeyframeNodeList\";\r\nimport { Avatar } from \"../core/Avatar\";\r\nimport { RenderableSprite3D } from \"../core/RenderableSprite3D\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\nimport { Transform3D } from \"../core/Transform3D\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Quaternion } from \"../math/Quaternion\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\r\nimport { AnimatorPlayState } from \"./AnimatorPlayState\";\r\nimport { AnimatorState } from \"./AnimatorState\";\r\nimport { KeyframeNodeOwner } from \"./KeyframeNodeOwner\";\r\nimport { Script3D } from \"./Script3D\";\r\nimport { SimpleSingletonList } from \"./SimpleSingletonList\";\r\nimport { ConchQuaternion } from \"../math/Native/ConchQuaternion\";\r\nimport { ConchVector3 } from \"../math/Native/ConchVector3\";\r\n\r\n/**\r\n * <code>Animator</code> 类用于创建动画组件。\r\n */\r\nexport class Animator extends Component {\r\n\t/**@internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector31: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempQuaternion0: Quaternion = new Quaternion();\r\n\t/**@internal */\r\n\tprivate static _tempQuaternion1: Quaternion = new Quaternion();\r\n\r\n\t/** 裁剪模式_始终播放动画。*/\r\n\tstatic CULLINGMODE_ALWAYSANIMATE: number = 0;\r\n\t/** 裁剪模式_不可见时完全不播放动画。*/\r\n\tstatic CULLINGMODE_CULLCOMPLETELY: number = 2;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _update(scene: Scene3D): void {\r\n\t\tvar pool: SimpleSingletonList = scene._animatorPool;\r\n\t\tvar elements: Animator[] = pool.elements as Animator[];\r\n\t\tfor (var i: number = 0, n: number = pool.length; i < n; i++) {\r\n\t\t\tvar animator: Animator = elements[i];\r\n\t\t\t(animator && animator.enabled) && (animator._update());\r\n\t\t}\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _speed: number;\r\n\t/**@internal */\r\n\tprivate _keyframeNodeOwnerMap: any;\r\n\t/**@internal */\r\n\tprivate _keyframeNodeOwners: KeyframeNodeOwner[] = [];\r\n\t/**@internal */\r\n\tprivate _updateMark: number;\r\n\t/**@internal */\r\n\tprivate _controllerLayers: AnimatorControllerLayer[];\r\n\r\n\t/**@internal */\r\n\t_linkSprites: any;\r\n\t/**@internal\t*/\r\n\t_avatarNodeMap: any;\r\n\t/**@internal */\r\n\t_linkAvatarSpritesData: any = {};\r\n\t/**@internal */\r\n\t_linkAvatarSprites: Sprite3D[] = [];\r\n\t/**@internal */\r\n\t_renderableSprites: RenderableSprite3D[] = [];\r\n\r\n\t/**\t裁剪模式*/\r\n\tcullingMode: number = Animator.CULLINGMODE_CULLCOMPLETELY;\r\n\r\n\t/**@internal\t[NATIVE]*/\r\n\t_animationNodeLocalPositions: Float32Array;\r\n\t/**@internal\t[NATIVE]*/\r\n\t_animationNodeLocalRotations: Float32Array;\r\n\t/**@internal\t[NATIVE]*/\r\n\t_animationNodeLocalScales: Float32Array;\r\n\t/**@internal\t[NATIVE]*/\r\n\t_animationNodeWorldMatrixs: Float32Array;\r\n\t/**@internal\t[NATIVE]*/\r\n\t_animationNodeParentIndices: Int16Array;\r\n\r\n\t/**\r\n\t * 动画的播放速度,1.0为正常播放速度。\r\n\t */\r\n\tget speed(): number {\r\n\t\treturn this._speed;\r\n\t}\r\n\r\n\tset speed(value: number) {\r\n\t\tthis._speed = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Animation</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._controllerLayers = [];\r\n\t\tthis._linkSprites = {};\r\n\t\tthis._speed = 1.0;\r\n\t\tthis._keyframeNodeOwnerMap = {};\r\n\t\tthis._updateMark = 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _linkToSprites(linkSprites: any): void {\r\n\t\tfor (var k in linkSprites) {\r\n\t\t\tvar nodeOwner: Sprite3D = (<Sprite3D>this.owner);\r\n\t\t\tvar path: string[] = linkSprites[k];\r\n\t\t\tfor (var j: number = 0, m: number = path.length; j < m; j++) {\r\n\t\t\t\tvar p: string = path[j];\r\n\t\t\t\tif (p === \"\") {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnodeOwner = (<Sprite3D>nodeOwner.getChildByName(p));\r\n\t\t\t\t\tif (!nodeOwner)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t(nodeOwner) && (this.linkSprite3DToAvatarNode(k, nodeOwner));//此时Avatar文件已经加载完成\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _addKeyframeNodeOwner(clipOwners: KeyframeNodeOwner[], node: KeyframeNode, propertyOwner: any): void {\r\n\t\tvar nodeIndex: number = node._indexInList;\r\n\t\tvar fullPath: string = node.fullPath;\r\n\t\tvar keyframeNodeOwner: KeyframeNodeOwner = this._keyframeNodeOwnerMap[fullPath];\r\n\t\tif (keyframeNodeOwner) {\r\n\t\t\tkeyframeNodeOwner.referenceCount++;\r\n\t\t\tclipOwners[nodeIndex] = keyframeNodeOwner;\r\n\t\t} else {\r\n\t\t\tvar property: any = propertyOwner;\r\n\t\t\tfor (var i: number = 0, n: number = node.propertyCount; i < n; i++) {\r\n\t\t\t\tproperty = property[node.getPropertyByIndex(i)];\r\n\t\t\t\tif (!property)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tkeyframeNodeOwner = this._keyframeNodeOwnerMap[fullPath] = new KeyframeNodeOwner();\r\n\t\t\tkeyframeNodeOwner.fullPath = fullPath;\r\n\t\t\tkeyframeNodeOwner.indexInList = this._keyframeNodeOwners.length;\r\n\t\t\tkeyframeNodeOwner.referenceCount = 1;\r\n\t\t\tkeyframeNodeOwner.propertyOwner = propertyOwner;\r\n\t\t\tvar propertyCount: number = node.propertyCount;\r\n\t\t\tvar propertys: string[] = [];\r\n\t\t\tfor (i = 0; i < propertyCount; i++)\r\n\t\t\t\tpropertys[i] = node.getPropertyByIndex(i);\r\n\t\t\tkeyframeNodeOwner.property = propertys;\r\n\t\t\tkeyframeNodeOwner.type = node.type;\r\n\r\n\t\t\tif (property) {//查询成功后赋默认值\r\n\t\t\t\tif (node.type === 0) {\r\n\t\t\t\t\tkeyframeNodeOwner.defaultValue = property;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar defaultValue: any = new property.constructor();\r\n\t\t\t\t\tproperty.cloneTo(defaultValue);\r\n\t\t\t\t\tkeyframeNodeOwner.defaultValue = defaultValue;\r\n\t\t\t\t\tkeyframeNodeOwner.value = new property.constructor();\r\n\t\t\t\t\tkeyframeNodeOwner.crossFixedValue = new property.constructor();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._keyframeNodeOwners.push(keyframeNodeOwner);\r\n\t\t\tclipOwners[nodeIndex] = keyframeNodeOwner;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removeKeyframeNodeOwner(nodeOwners: KeyframeNodeOwner[], node: KeyframeNode): void {\r\n\t\tvar fullPath: string = node.fullPath;\r\n\t\tvar keyframeNodeOwner: KeyframeNodeOwner = this._keyframeNodeOwnerMap[fullPath];\r\n\t\tif (keyframeNodeOwner) {//TODO:Avatar中没该节点,但动画文件有,不会保存_keyframeNodeOwnerMap在中,移除会出BUG,例如动画节点下的SkinnedMeshRender有动画帧，但Avatar中忽略了\r\n\t\t\tkeyframeNodeOwner.referenceCount--;\r\n\t\t\tif (keyframeNodeOwner.referenceCount === 0) {\r\n\t\t\t\tdelete this._keyframeNodeOwnerMap[fullPath];\r\n\t\t\t\tthis._keyframeNodeOwners.splice(this._keyframeNodeOwners.indexOf(keyframeNodeOwner), 1);\r\n\t\t\t}\r\n\t\t\tnodeOwners[node._indexInList] = null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getOwnersByClip(clipStateInfo: AnimatorState): void {\r\n\t\tvar frameNodes: KeyframeNodeList = clipStateInfo._clip._nodes;\r\n\t\tvar frameNodesCount: number = frameNodes.count;\r\n\t\tvar nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\r\n\t\tnodeOwners.length = frameNodesCount;\r\n\t\tfor (var i: number = 0; i < frameNodesCount; i++) {\r\n\t\t\tvar node: KeyframeNode = frameNodes.getNodeByIndex(i);\r\n\t\t\tvar property: any = this._avatar ? this._avatarNodeMap[this._avatar._rootNode.name] : this.owner;//如果有avatar需使用克隆节点\r\n\t\t\tfor (var j: number = 0, m: number = node.ownerPathCount; j < m; j++) {\r\n\t\t\t\tvar ownPat: string = node.getOwnerPathByIndex(j);\r\n\t\t\t\tif (ownPat === \"\") {//TODO:直接不存\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tproperty = property.getChildByName(ownPat);\r\n\t\t\t\t\tif (!property)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (property) {\r\n\t\t\t\tvar propertyOwner: string = node.propertyOwner;\r\n\t\t\t\t(propertyOwner) && (property = property[propertyOwner]);\r\n\t\t\t\tproperty && this._addKeyframeNodeOwner(nodeOwners, node, property);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _updatePlayer(animatorState: AnimatorState, playState: AnimatorPlayState, elapsedTime: number, islooping: boolean): void {\r\n\t\tvar clipDuration: number = animatorState._clip._duration * (animatorState.clipEnd - animatorState.clipStart);\r\n\t\tvar lastElapsedTime: number = playState._elapsedTime;\r\n\t\tvar elapsedPlaybackTime: number = lastElapsedTime + elapsedTime;\r\n\t\tplayState._lastElapsedTime = lastElapsedTime;\r\n\t\tplayState._elapsedTime = elapsedPlaybackTime;\r\n\t\tvar normalizedTime: number = elapsedPlaybackTime / clipDuration;//TODO:时候可以都统一为归一化时间\r\n\t\tplayState._normalizedTime = normalizedTime;\r\n\t\tvar playTime: number = normalizedTime % 1.0;\r\n\t\tplayState._normalizedPlayTime = playTime < 0 ? playTime + 1.0 : playTime;\r\n\t\tplayState._duration = clipDuration;\r\n\t\tvar scripts: AnimatorStateScript[] = animatorState._scripts;\r\n\r\n\t\tif ((!islooping && elapsedPlaybackTime >= clipDuration)) {\r\n\t\t\tplayState._finish = true;\r\n\t\t\tplayState._elapsedTime = clipDuration;\r\n\t\t\tplayState._normalizedPlayTime = 1.0;\r\n\r\n\t\t\tif (scripts) {\r\n\t\t\t\tfor (var i: number = 0, n: number = scripts.length; i < n; i++)\r\n\t\t\t\t\tscripts[i].onStateExit();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (scripts) {\r\n\t\t\tfor (i = 0, n = scripts.length; i < n; i++)\r\n\t\t\t\tscripts[i].onStateUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _eventScript(scripts: Script3D[], events: AnimationEvent[], eventIndex: number, endTime: number, front: boolean): number {\r\n\t\tif (front) {\r\n\t\t\tfor (var n: number = events.length; eventIndex < n; eventIndex++) {\r\n\t\t\t\tvar event: AnimationEvent = events[eventIndex];\r\n\t\t\t\tif (event.time <= endTime) {\r\n\t\t\t\t\tfor (var j: number = 0, m: number = scripts.length; j < m; j++) {\r\n\t\t\t\t\t\tvar script: Script3D = scripts[j];\r\n\t\t\t\t\t\tvar fun: Function = script[event.eventName];\r\n\t\t\t\t\t\t(fun) && (fun.apply(script, event.params));\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (; eventIndex >= 0; eventIndex--) {\r\n\t\t\t\tevent = events[eventIndex];\r\n\t\t\t\tif (event.time >= endTime) {\r\n\t\t\t\t\tfor (j = 0, m = scripts.length; j < m; j++) {\r\n\t\t\t\t\t\tscript = scripts[j];\r\n\t\t\t\t\t\tfun = script[event.eventName];\r\n\t\t\t\t\t\t(fun) && (fun.apply(script, event.params));\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn eventIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _updateEventScript(stateInfo: AnimatorState, playStateInfo: AnimatorPlayState): void {\r\n\t\tvar scripts: Script3D[] = (<Sprite3D>this.owner)._scripts;\r\n\t\tif (scripts) {//TODO:play是否也换成此种计算\r\n\t\t\tvar clip: AnimationClip = stateInfo._clip;\r\n\t\t\tvar events: AnimationEvent[] = clip._animationEvents;\r\n\t\t\tvar clipDuration: number = clip._duration;\r\n\t\t\tvar elapsedTime: number = playStateInfo._elapsedTime;\r\n\t\t\tvar time: number = elapsedTime % clipDuration;\r\n\t\t\tvar loopCount: number = Math.abs(Math.floor(elapsedTime / clipDuration) - Math.floor(playStateInfo._lastElapsedTime / clipDuration));//backPlay可能为负数\r\n\r\n\t\t\tvar frontPlay: boolean = playStateInfo._elapsedTime >= playStateInfo._lastElapsedTime;\r\n\t\t\tif (playStateInfo._lastIsFront !== frontPlay) {\r\n\t\t\t\tif (frontPlay)\r\n\t\t\t\t\tplayStateInfo._playEventIndex++;\r\n\t\t\t\telse\r\n\t\t\t\t\tplayStateInfo._playEventIndex--;\r\n\t\t\t\tplayStateInfo._lastIsFront = frontPlay;\r\n\t\t\t}\r\n\r\n\t\t\tif (frontPlay) {\r\n\t\t\t\tplayStateInfo._playEventIndex = this._eventScript(scripts, events, playStateInfo._playEventIndex, loopCount > 0 ? clipDuration : time, true);\r\n\t\t\t\tfor (var i: number = 0, n: number = loopCount - 1; i < n; i++)\r\n\t\t\t\t\tthis._eventScript(scripts, events, 0, clipDuration, true);\r\n\t\t\t\t(loopCount > 0 && time > 0) && (playStateInfo._playEventIndex = this._eventScript(scripts, events, 0, time, true));//if need cross loop,'time' must large than 0\r\n\t\t\t} else {\r\n\t\t\t\tplayStateInfo._playEventIndex = this._eventScript(scripts, events, playStateInfo._playEventIndex, loopCount > 0 ? 0 : time, false);\r\n\t\t\t\tvar eventIndex: number = events.length - 1;\r\n\t\t\t\tfor (i = 0, n = loopCount - 1; i < n; i++)\r\n\t\t\t\t\tthis._eventScript(scripts, events, eventIndex, 0, false);\r\n\t\t\t\t(loopCount > 0 && time > 0) && (playStateInfo._playEventIndex = this._eventScript(scripts, events, eventIndex, time, false));//if need cross loop,'time' must large than 0\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _updateClipDatas(animatorState: AnimatorState, addtive: boolean, playStateInfo: AnimatorPlayState, scale: number): void {\r\n\t\tvar clip: AnimationClip = animatorState._clip;\r\n\t\tvar clipDuration: number = clip._duration;\r\n\r\n\t\tvar curPlayTime: number = animatorState.clipStart * clipDuration + playStateInfo._normalizedPlayTime * playStateInfo._duration;\r\n\t\tvar currentFrameIndices: Int16Array = animatorState._currentFrameIndices;\r\n\t\tvar frontPlay: boolean = playStateInfo._elapsedTime > playStateInfo._lastElapsedTime;\r\n\t\tclip._evaluateClipDatasRealTime(clip._nodes, curPlayTime, currentFrameIndices, addtive, frontPlay, animatorState._realtimeDatas);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _applyFloat(pro: any, proName: string, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: number): void {\r\n\t\tif (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n\t\t\tif (additive) {\r\n\t\t\t\tpro[proName] += weight * data;\r\n\t\t\t} else {\r\n\t\t\t\tvar oriValue: number = pro[proName];\r\n\t\t\t\tpro[proName] = oriValue + weight * (data - oriValue);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (isFirstLayer) {\r\n\t\t\t\tif (additive)\r\n\t\t\t\t\tpro[proName] = nodeOwner.defaultValue + data;\r\n\t\t\t\telse\r\n\t\t\t\t\tpro[proName] = data;\r\n\t\t\t} else {\r\n\t\t\t\tif (additive) {\r\n\t\t\t\t\tpro[proName] = nodeOwner.defaultValue + weight * (data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar defValue: number = nodeOwner.defaultValue;\r\n\t\t\t\t\tpro[proName] = defValue + weight * (data - defValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _applyPositionAndRotationEuler(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector3, out: Vector3): void {\r\n\t\tif (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n\t\t\tif (additive) {\r\n\t\t\t\tout.x += weight * data.x;\r\n\t\t\t\tout.y += weight * data.y;\r\n\t\t\t\tout.z += weight * data.z;\r\n\t\t\t} else {\r\n\t\t\t\tvar oriX: number = out.x;\r\n\t\t\t\tvar oriY: number = out.y;\r\n\t\t\t\tvar oriZ: number = out.z;\r\n\t\t\t\tout.x = oriX + weight * (data.x - oriX);\r\n\t\t\t\tout.y = oriY + weight * (data.y - oriY);\r\n\t\t\t\tout.z = oriZ + weight * (data.z - oriZ);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (isFirstLayer) {\r\n\t\t\t\tif (additive) {\r\n\t\t\t\t\tvar defValue: Vector3 = nodeOwner.defaultValue;\r\n\t\t\t\t\tout.x = defValue.x + data.x;\r\n\t\t\t\t\tout.y = defValue.y + data.y;\r\n\t\t\t\t\tout.z = defValue.z + data.z;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tout.x = data.x;\r\n\t\t\t\t\tout.y = data.y;\r\n\t\t\t\t\tout.z = data.z;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdefValue = nodeOwner.defaultValue;\r\n\t\t\t\tif (additive) {\r\n\t\t\t\t\tout.x = defValue.x + weight * data.x;\r\n\t\t\t\t\tout.y = defValue.y + weight * data.y;\r\n\t\t\t\t\tout.z = defValue.z + weight * data.z;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar defX: number = defValue.x;\r\n\t\t\t\t\tvar defY: number = defValue.y;\r\n\t\t\t\t\tvar defZ: number = defValue.z;\r\n\t\t\t\t\tout.x = defX + weight * (data.x - defX);\r\n\t\t\t\t\tout.y = defY + weight * (data.y - defY);\r\n\t\t\t\t\tout.z = defZ + weight * (data.z - defZ);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _applyRotation(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, clipRot: Quaternion, localRotation: Quaternion): void {\r\n\t\tif (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n\t\t\tif (additive) {\r\n\t\t\t\tvar tempQuat: Quaternion = Animator._tempQuaternion1;//使用临时四元数_tempQuaternion1，避免引用错乱\r\n\t\t\t\tUtils3D.quaternionWeight(clipRot, weight, tempQuat);\r\n\t\t\t\ttempQuat.normalize(tempQuat);\r\n\t\t\t\tQuaternion.multiply(localRotation, tempQuat, localRotation);\r\n\t\t\t} else {\r\n\t\t\t\tQuaternion.lerp(localRotation, clipRot, weight, localRotation);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (isFirstLayer) {\r\n\t\t\t\tif (additive) {\r\n\t\t\t\t\tvar defaultRot: Quaternion = nodeOwner.defaultValue;\r\n\t\t\t\t\tQuaternion.multiply(defaultRot, clipRot, localRotation);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlocalRotation.x = clipRot.x;\r\n\t\t\t\t\tlocalRotation.y = clipRot.y;\r\n\t\t\t\t\tlocalRotation.z = clipRot.z;\r\n\t\t\t\t\tlocalRotation.w = clipRot.w;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdefaultRot = nodeOwner.defaultValue;\r\n\t\t\t\tif (additive) {\r\n\t\t\t\t\ttempQuat = Animator._tempQuaternion1;\r\n\t\t\t\t\tUtils3D.quaternionWeight(clipRot, weight, tempQuat);\r\n\t\t\t\t\ttempQuat.normalize(tempQuat);\r\n\t\t\t\t\tQuaternion.multiply(defaultRot, tempQuat, localRotation);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tQuaternion.lerp(defaultRot, clipRot, weight, localRotation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _applyScale(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, clipSca: Vector3, localScale: Vector3): void {\r\n\t\tif (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n\t\t\tif (additive) {\r\n\t\t\t\tvar scale: Vector3 = Animator._tempVector31;\r\n\t\t\t\tUtils3D.scaleWeight(clipSca, weight, scale);\r\n\t\t\t\tlocalScale.x = localScale.x * scale.x;\r\n\t\t\t\tlocalScale.y = localScale.y * scale.y;\r\n\t\t\t\tlocalScale.z = localScale.z * scale.z;\r\n\t\t\t} else {\r\n\t\t\t\tUtils3D.scaleBlend(localScale, clipSca, weight, localScale);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (isFirstLayer) {\r\n\t\t\t\tif (additive) {\r\n\t\t\t\t\tvar defaultSca: Vector3 = nodeOwner.defaultValue;\r\n\t\t\t\t\tlocalScale.x = defaultSca.x * clipSca.x;\r\n\t\t\t\t\tlocalScale.y = defaultSca.y * clipSca.y;\r\n\t\t\t\t\tlocalScale.z = defaultSca.z * clipSca.z;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlocalScale.x = clipSca.x;\r\n\t\t\t\t\tlocalScale.y = clipSca.y;\r\n\t\t\t\t\tlocalScale.z = clipSca.z;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdefaultSca = nodeOwner.defaultValue;\r\n\t\t\t\tif (additive) {\r\n\t\t\t\t\tscale = Animator._tempVector31;\r\n\t\t\t\t\tUtils3D.scaleWeight(clipSca, weight, scale);\r\n\t\t\t\t\tlocalScale.x = defaultSca.x * scale.x;\r\n\t\t\t\t\tlocalScale.y = defaultSca.y * scale.y;\r\n\t\t\t\t\tlocalScale.z = defaultSca.z * scale.z;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tUtils3D.scaleBlend(defaultSca, clipSca, weight, localScale);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _applyCrossData(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, srcValue: any, desValue: any, crossWeight: number): void {\r\n\t\tvar pro: any = nodeOwner.propertyOwner;\r\n\t\tif (pro) {\r\n\t\t\tswitch (nodeOwner.type) {\r\n\t\t\t\tcase 0: //Float\r\n\t\t\t\t\tvar proPat: string[] = nodeOwner.property;\r\n\t\t\t\t\tvar m: number = proPat.length - 1;\r\n\t\t\t\t\tfor (var j: number = 0; j < m; j++) {\r\n\t\t\t\t\t\tpro = pro[proPat[j]];\r\n\t\t\t\t\t\tif (!pro)//属性可能或被置空\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar crossValue: number = srcValue + crossWeight * (desValue - srcValue);\r\n\t\t\t\t\tnodeOwner.value = crossValue;\r\n\t\t\t\t\tthis._applyFloat(pro, proPat[m], nodeOwner, additive, weight, isFirstLayer, crossValue);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1: //Position\r\n\t\t\t\t\tvar localPos: Vector3 = pro.localPosition;\r\n\t\t\t\t\tvar position: Vector3 = nodeOwner.value;\r\n\t\t\t\t\tvar srcX: number = srcValue.x, srcY: number = srcValue.y, srcZ: number = srcValue.z;\r\n\t\t\t\t\tposition.x = srcX + crossWeight * (desValue.x - srcX);\r\n\t\t\t\t\tposition.y = srcY + crossWeight * (desValue.y - srcY);\r\n\t\t\t\t\tposition.z = srcZ + crossWeight * (desValue.z - srcZ);\r\n\t\t\t\t\tthis._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, position, localPos);\r\n\t\t\t\t\tpro.localPosition = localPos;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2: //Rotation\r\n\t\t\t\t\tvar localRot: Quaternion = pro.localRotation;\r\n\t\t\t\t\tvar rotation: Quaternion = nodeOwner.value;\r\n\t\t\t\t\tQuaternion.lerp(srcValue, desValue, crossWeight, rotation);\r\n\t\t\t\t\tthis._applyRotation(nodeOwner, additive, weight, isFirstLayer, rotation, localRot);\r\n\t\t\t\t\tpro.localRotation = localRot;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3: //Scale\r\n\t\t\t\t\tvar localSca: Vector3 = pro.localScale;\r\n\t\t\t\t\tvar scale: Vector3 = nodeOwner.value;\r\n\t\t\t\t\tUtils3D.scaleBlend(srcValue, desValue, crossWeight, scale);\r\n\t\t\t\t\tthis._applyScale(nodeOwner, additive, weight, isFirstLayer, scale, localSca);\r\n\t\t\t\t\tpro.localScale = localSca;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4: //RotationEuler\r\n\t\t\t\t\tvar localEuler: Vector3 = pro.localRotationEuler;\r\n\t\t\t\t\tvar rotationEuler: Vector3 = nodeOwner.value;\r\n\t\t\t\t\tsrcX = srcValue.x, srcY = srcValue.y, srcZ = srcValue.z;\r\n\t\t\t\t\trotationEuler.x = srcX + crossWeight * (desValue.x - srcX);\r\n\t\t\t\t\trotationEuler.y = srcY + crossWeight * (desValue.y - srcY);\r\n\t\t\t\t\trotationEuler.z = srcZ + crossWeight * (desValue.z - srcZ);\r\n\t\t\t\t\tthis._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, rotationEuler, localEuler);\r\n\t\t\t\t\tpro.localRotationEuler = localEuler;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tnodeOwner.updateMark = this._updateMark;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _setClipDatasToNode(stateInfo: AnimatorState, additive: boolean, weight: number, isFirstLayer: boolean): void {\r\n\t\tvar realtimeDatas: Array<number | Vector3 | Quaternion | ConchVector3 | ConchQuaternion> = stateInfo._realtimeDatas;\r\n\t\tvar nodes: KeyframeNodeList = stateInfo._clip._nodes;\r\n\t\tvar nodeOwners: KeyframeNodeOwner[] = stateInfo._nodeOwners;\r\n\t\tfor (var i: number = 0, n: number = nodes.count; i < n; i++) {\r\n\t\t\tvar nodeOwner: KeyframeNodeOwner = nodeOwners[i];\r\n\t\t\tif (nodeOwner) {//骨骼中没有该节点\r\n\t\t\t\tvar pro: any = nodeOwner.propertyOwner;\r\n\t\t\t\tif (pro) {\r\n\t\t\t\t\tswitch (nodeOwner.type) {\r\n\t\t\t\t\t\tcase 0: //Float\r\n\t\t\t\t\t\t\tvar proPat: string[] = nodeOwner.property;\r\n\t\t\t\t\t\t\tvar m: number = proPat.length - 1;\r\n\t\t\t\t\t\t\tfor (var j: number = 0; j < m; j++) {\r\n\t\t\t\t\t\t\t\tpro = pro[proPat[j]];\r\n\t\t\t\t\t\t\t\tif (!pro)//属性可能或被置空\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis._applyFloat(pro, proPat[m], nodeOwner, additive, weight, isFirstLayer, <number>realtimeDatas[i]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 1: //Position\r\n\t\t\t\t\t\t\tvar localPos: Vector3 = pro.localPosition;\r\n\t\t\t\t\t\t\tthis._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i], localPos);\r\n\t\t\t\t\t\t\tpro.localPosition = localPos;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 2: //Rotation\r\n\t\t\t\t\t\t\tvar localRot: Quaternion = pro.localRotation;\r\n\t\t\t\t\t\t\tthis._applyRotation(nodeOwner, additive, weight, isFirstLayer, <Quaternion>realtimeDatas[i], localRot);\r\n\t\t\t\t\t\t\tpro.localRotation = localRot;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 3: //Scale\r\n\t\t\t\t\t\t\tvar localSca: Vector3 = pro.localScale;\r\n\t\t\t\t\t\t\tthis._applyScale(nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i], localSca);\r\n\t\t\t\t\t\t\tpro.localScale = localSca;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 4: //RotationEuler\r\n\t\t\t\t\t\t\tvar localEuler: Vector3 = pro.localRotationEuler;\r\n\t\t\t\t\t\t\tthis._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i], localEuler);\r\n\t\t\t\t\t\t\tpro.localRotationEuler = localEuler;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnodeOwner.updateMark = this._updateMark;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _setCrossClipDatasToNode(controllerLayer: AnimatorControllerLayer, srcState: AnimatorState, destState: AnimatorState, crossWeight: number, isFirstLayer: boolean): void {\r\n\t\tvar nodeOwners: KeyframeNodeOwner[] = controllerLayer._crossNodesOwners;\r\n\t\tvar ownerCount: number = controllerLayer._crossNodesOwnersCount;\r\n\t\tvar additive: boolean = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n\t\tvar weight: number = controllerLayer.defaultWeight;\r\n\r\n\t\tvar destRealtimeDatas: Array<number | Vector3 | Quaternion | ConchVector3 | ConchQuaternion> = destState._realtimeDatas;\r\n\t\tvar destDataIndices: number[] = controllerLayer._destCrossClipNodeIndices;\r\n\t\tvar destNodeOwners: KeyframeNodeOwner[] = destState._nodeOwners;\r\n\t\tvar srcRealtimeDatas: Array<number | Vector3 | Quaternion | ConchVector3 | ConchQuaternion> = srcState._realtimeDatas;\r\n\t\tvar srcDataIndices: number[] = controllerLayer._srcCrossClipNodeIndices;\r\n\t\tvar srcNodeOwners: KeyframeNodeOwner[] = srcState._nodeOwners;\r\n\r\n\t\tfor (var i: number = 0; i < ownerCount; i++) {\r\n\t\t\tvar nodeOwner: KeyframeNodeOwner = nodeOwners[i];\r\n\t\t\tif (nodeOwner) {\r\n\t\t\t\tvar srcIndex: number = srcDataIndices[i];\r\n\t\t\t\tvar destIndex: number = destDataIndices[i];\r\n\t\t\t\tvar srcValue: any = srcIndex !== -1 ? srcRealtimeDatas[srcIndex] : destNodeOwners[destIndex].defaultValue;\r\n\t\t\t\tvar desValue: any = destIndex !== -1 ? destRealtimeDatas[destIndex] : srcNodeOwners[srcIndex].defaultValue;\r\n\t\t\t\tthis._applyCrossData(nodeOwner, additive, weight, isFirstLayer, srcValue, desValue, crossWeight);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _setFixedCrossClipDatasToNode(controllerLayer: AnimatorControllerLayer, destState: AnimatorState, crossWeight: number, isFirstLayer: boolean): void {\r\n\t\tvar nodeOwners: KeyframeNodeOwner[] = controllerLayer._crossNodesOwners;\r\n\t\tvar ownerCount: number = controllerLayer._crossNodesOwnersCount;\r\n\t\tvar additive: boolean = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n\t\tvar weight: number = controllerLayer.defaultWeight;\r\n\t\tvar destRealtimeDatas: Array<number | Vector3 | Quaternion | ConchVector3 | ConchQuaternion> = destState._realtimeDatas;\r\n\t\tvar destDataIndices: number[] = controllerLayer._destCrossClipNodeIndices;\r\n\r\n\t\tfor (var i: number = 0; i < ownerCount; i++) {\r\n\t\t\tvar nodeOwner: KeyframeNodeOwner = nodeOwners[i];\r\n\t\t\tif (nodeOwner) {\r\n\t\t\t\tvar destIndex: number = destDataIndices[i];\r\n\t\t\t\tvar srcValue: any = nodeOwner.crossFixedValue;\r\n\t\t\t\tvar desValue: any = destIndex !== -1 ? destRealtimeDatas[destIndex] : nodeOwner.defaultValue;\r\n\t\t\t\tthis._applyCrossData(nodeOwner, additive, weight, isFirstLayer, srcValue, desValue, crossWeight);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _revertDefaultKeyframeNodes(clipStateInfo: AnimatorState): void {\r\n\t\tvar nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\r\n\t\tfor (var i: number = 0, n: number = nodeOwners.length; i < n; i++) {\r\n\t\t\tvar nodeOwner: KeyframeNodeOwner = nodeOwners[i];\r\n\t\t\tif (nodeOwner) {\r\n\t\t\t\tvar pro: any = nodeOwner.propertyOwner;\r\n\t\t\t\tif (pro) {\r\n\t\t\t\t\tswitch (nodeOwner.type) {\r\n\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\tvar proPat: string[] = nodeOwner.property;\r\n\t\t\t\t\t\t\tvar m: number = proPat.length - 1;\r\n\t\t\t\t\t\t\tfor (var j: number = 0; j < m; j++) {\r\n\t\t\t\t\t\t\t\tpro = pro[proPat[j]];\r\n\t\t\t\t\t\t\t\tif (!pro)//属性可能或被置空\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpro[proPat[m]] = nodeOwner.defaultValue;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tvar locPos: Vector3 = pro.localPosition;\r\n\t\t\t\t\t\t\tvar def: Vector3 = nodeOwner.defaultValue;\r\n\t\t\t\t\t\t\tlocPos.x = def.x;\r\n\t\t\t\t\t\t\tlocPos.y = def.y;\r\n\t\t\t\t\t\t\tlocPos.z = def.z;\r\n\t\t\t\t\t\t\tpro.localPosition = locPos;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tvar locRot: Quaternion = pro.localRotation;\r\n\t\t\t\t\t\t\tvar defQua: Quaternion = nodeOwner.defaultValue;\r\n\t\t\t\t\t\t\tlocRot.x = defQua.x;\r\n\t\t\t\t\t\t\tlocRot.y = defQua.y;\r\n\t\t\t\t\t\t\tlocRot.z = defQua.z;\r\n\t\t\t\t\t\t\tlocRot.w = defQua.w;\r\n\t\t\t\t\t\t\tpro.localRotation = locRot;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\tvar locSca: Vector3 = pro.localScale;\r\n\t\t\t\t\t\t\tdef = nodeOwner.defaultValue;\r\n\t\t\t\t\t\t\tlocSca.x = def.x;\r\n\t\t\t\t\t\t\tlocSca.y = def.y;\r\n\t\t\t\t\t\t\tlocSca.z = def.z;\r\n\t\t\t\t\t\t\tpro.localScale = locSca;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\tvar locEul: Vector3 = pro.localRotationEuler;\r\n\t\t\t\t\t\t\tdef = nodeOwner.defaultValue;\r\n\t\t\t\t\t\t\tlocEul.x = def.x;\r\n\t\t\t\t\t\t\tlocEul.y = def.y;\r\n\t\t\t\t\t\t\tlocEul.z = def.z;\r\n\t\t\t\t\t\t\tpro.localRotationEuler = locEul;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tthrow \"Animator:unknown type.\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_onAdded(): void {\r\n\t\tvar parent: Node = this.owner._parent;\r\n\t\t((<Sprite3D>this.owner))._setHierarchyAnimator(this, parent ? ((<Sprite3D>parent))._hierarchyAnimator : null);//只有动画组件在加载或卸载时才重新组织数据\r\n\t\t((<Sprite3D>this.owner))._changeAnimatorToLinkSprite3DNoAvatar(this, true, []);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _onDestroy(): void {\r\n\t\tfor (var i: number = 0, n: number = this._controllerLayers.length; i < n; i++)\r\n\t\t\tthis._controllerLayers[i]._removeReference();\r\n\t\tvar parent: Node = this.owner._parent;\r\n\t\t((<Sprite3D>this.owner))._clearHierarchyAnimator(this, parent ? ((<Sprite3D>parent))._hierarchyAnimator : null);//只有动画组件在加载或卸载时才重新组织数据\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_onEnable(): void {\r\n\t\t((<Scene3D>this.owner._scene))._animatorPool.add(this);\r\n\t\tfor (var i: number = 0, n: number = this._controllerLayers.length; i < n; i++) {\r\n\t\t\tif (this._controllerLayers[i].playOnWake) {\r\n\t\t\t\tvar defaultClip: AnimatorState = this.getDefaultState(i);\r\n\t\t\t\t(defaultClip) && (this.play(null, i, 0));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _onDisable(): void {\r\n\t\t((<Scene3D>this.owner._scene))._animatorPool.remove(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_handleSpriteOwnersBySprite(isLink: boolean, path: string[], sprite: Sprite3D): void {\r\n\t\tfor (var i: number = 0, n: number = this._controllerLayers.length; i < n; i++) {\r\n\t\t\tvar clipStateInfos: AnimatorState[] = this._controllerLayers[i]._states;\r\n\t\t\tfor (var j: number = 0, m: number = clipStateInfos.length; j < m; j++) {\r\n\t\t\t\tvar clipStateInfo: AnimatorState = clipStateInfos[j];\r\n\t\t\t\tvar clip: AnimationClip = clipStateInfo._clip;\r\n\t\t\t\tvar nodePath: string = path.join(\"/\");\r\n\t\t\t\tvar ownersNodes: KeyframeNode[] = clip._nodesMap[nodePath];\r\n\t\t\t\tif (ownersNodes) {\r\n\t\t\t\t\tvar nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\r\n\t\t\t\t\tfor (var k: number = 0, p: number = ownersNodes.length; k < p; k++) {\r\n\t\t\t\t\t\tif (isLink)\r\n\t\t\t\t\t\t\tthis._addKeyframeNodeOwner(nodeOwners, ownersNodes[k], sprite);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tthis._removeKeyframeNodeOwner(nodeOwners, ownersNodes[k]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_parse(data: any): void {\r\n\t\tvar avatarData: any = data.avatar;\r\n\t\tif (avatarData) {\r\n\t\t\tthis.avatar = Loader.getRes(avatarData.path);\r\n\t\t\tvar linkSprites: any = avatarData.linkSprites;\r\n\t\t\tthis._linkSprites = linkSprites;\r\n\t\t\tthis._linkToSprites(linkSprites);\r\n\t\t}\r\n\r\n\t\tvar clipPaths: string[] = data.clipPaths;\r\n\t\tvar play: any = data.playOnWake;\r\n\t\tvar layersData: any[] = data.layers;\r\n\t\tfor (var i: number = 0; i < layersData.length; i++) {\r\n\t\t\tvar layerData: any = layersData[i];\r\n\t\t\tvar animatorLayer: AnimatorControllerLayer = new AnimatorControllerLayer(layerData.name);\r\n\t\t\tif (i === 0)\r\n\t\t\t\tanimatorLayer.defaultWeight = 1.0;//TODO:\r\n\t\t\telse\r\n\t\t\t\tanimatorLayer.defaultWeight = layerData.weight;\r\n\r\n\t\t\tvar blendingModeData: any = layerData.blendingMode;\r\n\t\t\t(blendingModeData) && (animatorLayer.blendingMode = blendingModeData);\r\n\t\t\tthis.addControllerLayer(animatorLayer);\r\n\t\t\tvar states: any[] = layerData.states;\r\n\t\t\tfor (var j: number = 0, m: number = states.length; j < m; j++) {\r\n\t\t\t\tvar state: any = states[j];\r\n\t\t\t\tvar clipPath: string = state.clipPath;\r\n\t\t\t\tif (clipPath) {\r\n\t\t\t\t\tvar name: string = state.name;\r\n\t\t\t\t\tvar motion: AnimationClip;\r\n\t\t\t\t\tmotion = Loader.getRes(clipPath);\r\n\t\t\t\t\tif (motion) {//加载失败motion为空\r\n\t\t\t\t\t\tvar animatorState: AnimatorState = new AnimatorState();\r\n\t\t\t\t\t\tanimatorState.name = name;\r\n\t\t\t\t\t\tanimatorState.clip = motion;\r\n\t\t\t\t\t\tanimatorLayer.addState(animatorState);\r\n\t\t\t\t\t\t(j === 0) && (this.getControllerLayer(i).defaultState = animatorState);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t(play !== undefined) && (animatorLayer.playOnWake = play);\r\n\r\n\t\t}\r\n\t\tvar cullingModeData: any = data.cullingMode;\r\n\t\t(cullingModeData !== undefined) && (this.cullingMode = cullingModeData);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_update(): void {\r\n\t\tvar timer: Timer = ((<Scene3D>this.owner._scene)).timer;\r\n\t\tvar delta: number = timer._delta / 1000.0;//Laya.timer.delta已结包含Laya.timer.scale\r\n\t\tif (this._speed === 0 || delta === 0)//delta为0无需更新,可能造成crossWeight计算值为NaN\r\n\t\t\treturn;\r\n\t\tvar needRender: boolean;\r\n\t\tif (this.cullingMode === Animator.CULLINGMODE_CULLCOMPLETELY) {//所有渲染精灵不可见时\r\n\t\t\tneedRender = false;\r\n\t\t\tfor (var i: number = 0, n: number = this._renderableSprites.length; i < n; i++) {\r\n\t\t\t\tif (this._renderableSprites[i]._render.isRender) {\r\n\t\t\t\t\tneedRender = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tneedRender = true;\r\n\t\t}\r\n\t\tthis._updateMark++;\r\n\t\tvar timerScale: number = timer.scale;\r\n\t\tfor (i = 0, n = this._controllerLayers.length; i < n; i++) {\r\n\t\t\tvar controllerLayer: AnimatorControllerLayer = this._controllerLayers[i];\r\n\t\t\tvar playStateInfo: AnimatorPlayState = controllerLayer._playStateInfo;\r\n\t\t\tvar crossPlayStateInfo: AnimatorPlayState = controllerLayer._crossPlayStateInfo;\r\n\t\t\taddtive = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n\t\t\tswitch (controllerLayer._playType) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tvar animatorState: AnimatorState = playStateInfo._currentState;\r\n\t\t\t\t\tvar clip: AnimationClip = animatorState._clip;\r\n\t\t\t\t\tvar speed: number = this._speed * animatorState.speed;\r\n\t\t\t\t\tvar finish: boolean = playStateInfo._finish;//提前取出finish,防止最后一帧跳过\r\n\t\t\t\t\tfinish || this._updatePlayer(animatorState, playStateInfo, delta * speed, clip.islooping);\r\n\t\t\t\t\tif (needRender) {\r\n\t\t\t\t\t\tvar addtive: boolean = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n\t\t\t\t\t\tthis._updateClipDatas(animatorState, addtive, playStateInfo, timerScale * speed);//clipDatas为逐动画文件,防止两个使用同一动画文件的Animator数据错乱,即使动画停止也要updateClipDatas\r\n\t\t\t\t\t\tthis._setClipDatasToNode(animatorState, addtive, controllerLayer.defaultWeight, i === 0);//多层动画混合时即使动画停止也要设置数据\r\n\t\t\t\t\t\tfinish || this._updateEventScript(animatorState, playStateInfo);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tanimatorState = playStateInfo._currentState;\r\n\t\t\t\t\tclip = animatorState._clip;\r\n\t\t\t\t\tvar crossState: AnimatorState = controllerLayer._crossPlayState;\r\n\t\t\t\t\tvar crossClip: AnimationClip = crossState._clip;\r\n\t\t\t\t\tvar crossDuratuion: number = controllerLayer._crossDuration;\r\n\t\t\t\t\tvar startPlayTime: number = crossPlayStateInfo._startPlayTime;\r\n\t\t\t\t\tvar crossClipDuration: number = crossClip._duration - startPlayTime;\r\n\t\t\t\t\tvar crossScale: number = crossDuratuion > crossClipDuration ? crossClipDuration / crossDuratuion : 1.0;//如果过度时间大于过度动作时间,则减慢速度\r\n\t\t\t\t\tvar crossSpeed: number = this._speed * crossState.speed;\r\n\t\t\t\t\tthis._updatePlayer(crossState, crossPlayStateInfo, delta * crossScale * crossSpeed, crossClip.islooping);\r\n\t\t\t\t\tvar crossWeight: number = ((crossPlayStateInfo._elapsedTime - startPlayTime) / crossScale) / crossDuratuion;\r\n\t\t\t\t\tif (crossWeight >= 1.0) {\r\n\t\t\t\t\t\tif (needRender) {\r\n\t\t\t\t\t\t\tthis._updateClipDatas(crossState, addtive, crossPlayStateInfo, timerScale * crossSpeed);\r\n\t\t\t\t\t\t\tthis._setClipDatasToNode(crossState, addtive, controllerLayer.defaultWeight, i === 0);\r\n\r\n\t\t\t\t\t\t\tcontrollerLayer._playType = 0;//完成融合,切换到正常播放状态\r\n\t\t\t\t\t\t\tplayStateInfo._currentState = crossState;\r\n\t\t\t\t\t\t\tcrossPlayStateInfo._cloneTo(playStateInfo);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (!playStateInfo._finish) {\r\n\t\t\t\t\t\t\tspeed = this._speed * animatorState.speed;\r\n\t\t\t\t\t\t\tthis._updatePlayer(animatorState, playStateInfo, delta * speed, clip.islooping);\r\n\t\t\t\t\t\t\tif (needRender)\r\n\t\t\t\t\t\t\t\tthis._updateClipDatas(animatorState, addtive, playStateInfo, timerScale * speed);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (needRender) {\r\n\t\t\t\t\t\t\tthis._updateClipDatas(crossState, addtive, crossPlayStateInfo, timerScale * crossScale * crossSpeed);\r\n\t\t\t\t\t\t\tthis._setCrossClipDatasToNode(controllerLayer, animatorState, crossState, crossWeight, i === 0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (needRender) {\r\n\t\t\t\t\t\tthis._updateEventScript(animatorState, playStateInfo);\r\n\t\t\t\t\t\tthis._updateEventScript(crossState, crossPlayStateInfo);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tcrossState = controllerLayer._crossPlayState;\r\n\t\t\t\t\tcrossClip = crossState._clip;\r\n\t\t\t\t\tcrossDuratuion = controllerLayer._crossDuration;\r\n\t\t\t\t\tstartPlayTime = crossPlayStateInfo._startPlayTime;\r\n\t\t\t\t\tcrossClipDuration = crossClip._duration - startPlayTime;\r\n\t\t\t\t\tcrossScale = crossDuratuion > crossClipDuration ? crossClipDuration / crossDuratuion : 1.0;//如果过度时间大于过度动作时间,则减慢速度\r\n\t\t\t\t\tcrossSpeed = this._speed * crossState.speed;\r\n\t\t\t\t\tthis._updatePlayer(crossState, crossPlayStateInfo, delta * crossScale * crossSpeed, crossClip.islooping);\r\n\t\t\t\t\tif (needRender) {\r\n\t\t\t\t\t\tcrossWeight = ((crossPlayStateInfo._elapsedTime - startPlayTime) / crossScale) / crossDuratuion;\r\n\t\t\t\t\t\tif (crossWeight >= 1.0) {\r\n\t\t\t\t\t\t\tthis._updateClipDatas(crossState, addtive, crossPlayStateInfo, timerScale * crossSpeed);\r\n\t\t\t\t\t\t\tthis._setClipDatasToNode(crossState, addtive, 1.0, i === 0);\r\n\t\t\t\t\t\t\tcontrollerLayer._playType = 0;//完成融合,切换到正常播放状态\r\n\t\t\t\t\t\t\tplayStateInfo._currentState = crossState;\r\n\t\t\t\t\t\t\tcrossPlayStateInfo._cloneTo(playStateInfo);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis._updateClipDatas(crossState, addtive, crossPlayStateInfo, timerScale * crossScale * crossSpeed);\r\n\t\t\t\t\t\t\tthis._setFixedCrossClipDatasToNode(controllerLayer, crossState, crossWeight, i === 0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis._updateEventScript(crossState, crossPlayStateInfo);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (needRender) {\r\n\t\t\tif (this._avatar) {\r\n\t\t\t\tRender.supportWebGLPlusAnimation && this._updateAnimationNodeWorldMatix(this._animationNodeLocalPositions, this._animationNodeLocalRotations, this._animationNodeLocalScales, this._animationNodeWorldMatrixs, this._animationNodeParentIndices);//[NATIVE]\r\n\t\t\t\tthis._updateAvatarNodesToSprite();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_cloneTo(dest: Component): void {\r\n\t\tvar animator: Animator = (<Animator>dest);\r\n\t\tanimator.avatar = this.avatar;\r\n\t\tanimator.cullingMode = this.cullingMode;\r\n\r\n\t\tfor (var i: number = 0, n: number = this._controllerLayers.length; i < n; i++) {\r\n\t\t\tvar controllLayer: AnimatorControllerLayer = this._controllerLayers[i];\r\n\t\t\tanimator.addControllerLayer(controllLayer.clone());\r\n\t\t\tvar animatorStates: AnimatorState[] = controllLayer._states;\r\n\t\t\tfor (var j: number = 0, m: number = animatorStates.length; j < m; j++) {\r\n\t\t\t\tvar state: AnimatorState = animatorStates[j].clone();\r\n\t\t\t\tvar cloneLayer: AnimatorControllerLayer = animator.getControllerLayer(i);\r\n\t\t\t\tcloneLayer.addState(state);\r\n\t\t\t\t(j == 0) && (cloneLayer.defaultState = state);\r\n\t\t\t}\r\n\t\t}\r\n\t\tanimator._linkSprites = this._linkSprites;//TODO:需要统一概念\r\n\t\tanimator._linkToSprites(this._linkSprites);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取默认动画状态。\r\n\t * @param\tlayerIndex 层索引。\r\n\t * @return 默认动画状态。\r\n\t */\r\n\tgetDefaultState(layerIndex: number = 0): AnimatorState {\r\n\t\tvar controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\r\n\t\treturn controllerLayer.defaultState;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加动画状态。\r\n\t * @param\tstate 动画状态。\r\n\t * @param   layerIndex 层索引。\r\n\t */\r\n\taddState(state: AnimatorState, layerIndex: number = 0): void {\r\n\t\tvar controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\r\n\t\tcontrollerLayer.addState(state);\r\n\t\tconsole.warn(\"Animator:this function is discard,please use animatorControllerLayer.addState() instead.\");\r\n\t}\r\n\r\n\t/**\r\n\t * 移除动画状态。\r\n\t * @param\tstate 动画状态。\r\n\t * @param   layerIndex 层索引。\r\n\t */\r\n\tremoveState(state: AnimatorState, layerIndex: number = 0): void {\r\n\t\tvar controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\r\n\t\tcontrollerLayer.removeState(state);\r\n\t\tconsole.warn(\"Animator:this function is discard,please use animatorControllerLayer.removeState() instead.\");\r\n\t}\r\n\r\n\t/**\r\n\t * 添加控制器层。\r\n\t */\r\n\taddControllerLayer(controllderLayer: AnimatorControllerLayer): void {\r\n\t\tthis._controllerLayers.push(controllderLayer);\r\n\t\tcontrollderLayer._animator = this;//TODO:可以复用,不应该这么设计\r\n\t\tcontrollderLayer._addReference();\r\n\t\tvar states: AnimatorState[] = controllderLayer._states;\r\n\t\tfor (var i: number = 0, n: number = states.length; i < n; i++)\r\n\t\t\tthis._getOwnersByClip(states[i]);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取控制器层。\r\n\t */\r\n\tgetControllerLayer(layerInex: number = 0): AnimatorControllerLayer {\r\n\t\treturn this._controllerLayers[layerInex];\r\n\t}\r\n\r\n\t/**\r\n\t * 播放动画。\r\n\t * @param\tname 如果为null则播放默认动画，否则按名字播放动画片段。\r\n\t * @param\tlayerIndex 层索引。\r\n\t * @param\tnormalizedTime 归一化的播放起始时间。\r\n\t */\r\n\tplay(name: string = null, layerIndex: number = 0, normalizedTime: number = Number.NEGATIVE_INFINITY): void {\r\n\t\tvar controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\r\n\t\tif (controllerLayer) {\r\n\t\t\tvar defaultState: AnimatorState = controllerLayer.defaultState;\r\n\t\t\tif (!name && !defaultState)\r\n\t\t\t\tthrow new Error(\"Animator:must have default clip value,please set clip property.\");\r\n\t\t\tvar playStateInfo: AnimatorPlayState = controllerLayer._playStateInfo;\r\n\t\t\tvar curPlayState: AnimatorState = playStateInfo._currentState;\r\n\r\n\r\n\t\t\tvar animatorState: AnimatorState = name ? controllerLayer._statesMap[name] : defaultState;\r\n\t\t\tvar clipDuration: number = animatorState._clip._duration;\r\n\t\t\tif (curPlayState !== animatorState) {\r\n\t\t\t\tif (normalizedTime !== Number.NEGATIVE_INFINITY)\r\n\t\t\t\t\tplayStateInfo._resetPlayState(clipDuration * normalizedTime);\r\n\t\t\t\telse\r\n\t\t\t\t\tplayStateInfo._resetPlayState(0.0);\r\n\t\t\t\t(curPlayState !== null && curPlayState !== animatorState) && (this._revertDefaultKeyframeNodes(curPlayState));\r\n\t\t\t\tcontrollerLayer._playType = 0;\r\n\t\t\t\tplayStateInfo._currentState = animatorState;\r\n\t\t\t} else {\r\n\t\t\t\tif (normalizedTime !== Number.NEGATIVE_INFINITY) {\r\n\t\t\t\t\tplayStateInfo._resetPlayState(clipDuration * normalizedTime);\r\n\t\t\t\t\tcontrollerLayer._playType = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar scripts: AnimatorStateScript[] = animatorState._scripts;\r\n\t\t\tif (scripts) {\r\n\t\t\t\tfor (var i: number = 0, n: number = scripts.length; i < n; i++)\r\n\t\t\t\t\tscripts[i].onStateEnter();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.warn(\"Invalid layerIndex \" + layerIndex + \".\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 在当前动画状态和目标动画状态之间进行融合过渡播放。\r\n\t * @param\tname 目标动画状态。\r\n\t * @param\ttransitionDuration 过渡时间,该值为当前动画状态的归一化时间，值在0.0~1.0之间。\r\n\t * @param\tlayerIndex 层索引。\r\n\t * @param\tnormalizedTime 归一化的播放起始时间。\r\n\t */\r\n\tcrossFade(name: string, transitionDuration: number, layerIndex: number = 0, normalizedTime: number = Number.NEGATIVE_INFINITY): void {\r\n\t\tvar controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\r\n\t\tif (controllerLayer) {\r\n\t\t\tvar destAnimatorState: AnimatorState = controllerLayer._statesMap[name];\r\n\t\t\tif (destAnimatorState) {\r\n\t\t\t\tvar playType: number = controllerLayer._playType;\r\n\t\t\t\tif (playType === -1) {//如果未曾调用过play则回滚到play方法\r\n\t\t\t\t\tthis.play(name, layerIndex, normalizedTime);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar crossPlayStateInfo: AnimatorPlayState = controllerLayer._crossPlayStateInfo;\r\n\t\t\t\tvar crossNodeOwners: KeyframeNodeOwner[] = controllerLayer._crossNodesOwners;\r\n\t\t\t\tvar crossNodeOwnerIndicesMap: any = controllerLayer._crossNodesOwnersIndicesMap;\r\n\r\n\t\t\t\tvar srcAnimatorState: AnimatorState = controllerLayer._playStateInfo._currentState;\r\n\t\t\t\tvar destNodeOwners: KeyframeNodeOwner[] = destAnimatorState._nodeOwners;\r\n\t\t\t\tvar destCrossClipNodeIndices: number[] = controllerLayer._destCrossClipNodeIndices;\r\n\t\t\t\tvar destClip: AnimationClip = destAnimatorState._clip;\r\n\t\t\t\tvar destNodes: KeyframeNodeList = destClip._nodes;\r\n\t\t\t\tvar destNodesMap: any = destClip._nodesDic;\r\n\t\t\t\tswitch (playType) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tvar srcNodeOwners: KeyframeNodeOwner[] = srcAnimatorState._nodeOwners;\r\n\t\t\t\t\t\tvar scrCrossClipNodeIndices: number[] = controllerLayer._srcCrossClipNodeIndices;\r\n\t\t\t\t\t\tvar srcClip: AnimationClip = srcAnimatorState._clip;\r\n\t\t\t\t\t\tvar srcNodes: KeyframeNodeList = srcClip._nodes;\r\n\t\t\t\t\t\tvar srcNodesMap: any = srcClip._nodesDic;\r\n\t\t\t\t\t\tcontrollerLayer._playType = 1;\r\n\r\n\t\t\t\t\t\tvar crossMark: number = ++controllerLayer._crossMark;\r\n\t\t\t\t\t\tvar crossCount: number = controllerLayer._crossNodesOwnersCount = 0;\r\n\r\n\t\t\t\t\t\tfor (var i: number = 0, n: number = srcNodes.count; i < n; i++) {\r\n\t\t\t\t\t\t\tvar srcNode: KeyframeNode = srcNodes.getNodeByIndex(i);\r\n\t\t\t\t\t\t\tvar srcIndex: number = srcNode._indexInList;\r\n\t\t\t\t\t\t\tvar srcNodeOwner: KeyframeNodeOwner = srcNodeOwners[srcIndex];\r\n\t\t\t\t\t\t\tif (srcNodeOwner) {\r\n\t\t\t\t\t\t\t\tvar srcFullPath: string = srcNode.fullPath;\r\n\t\t\t\t\t\t\t\tscrCrossClipNodeIndices[crossCount] = srcIndex;\r\n\t\t\t\t\t\t\t\tvar destNode: KeyframeNode = destNodesMap[srcFullPath];\r\n\t\t\t\t\t\t\t\tif (destNode)\r\n\t\t\t\t\t\t\t\t\tdestCrossClipNodeIndices[crossCount] = destNode._indexInList;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tdestCrossClipNodeIndices[crossCount] = -1;\r\n\r\n\t\t\t\t\t\t\t\tcrossNodeOwnerIndicesMap[srcFullPath] = crossMark;\r\n\t\t\t\t\t\t\t\tcrossNodeOwners[crossCount] = srcNodeOwner;\r\n\t\t\t\t\t\t\t\tcrossCount++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor (i = 0, n = destNodes.count; i < n; i++) {\r\n\t\t\t\t\t\t\tdestNode = destNodes.getNodeByIndex(i);\r\n\t\t\t\t\t\t\tvar destIndex: number = destNode._indexInList;\r\n\t\t\t\t\t\t\tvar destNodeOwner: KeyframeNodeOwner = destNodeOwners[destIndex];\r\n\t\t\t\t\t\t\tif (destNodeOwner) {\r\n\t\t\t\t\t\t\t\tvar destFullPath: string = destNode.fullPath;\r\n\t\t\t\t\t\t\t\tif (!srcNodesMap[destFullPath]) {\r\n\t\t\t\t\t\t\t\t\tscrCrossClipNodeIndices[crossCount] = -1;\r\n\t\t\t\t\t\t\t\t\tdestCrossClipNodeIndices[crossCount] = destIndex;\r\n\r\n\t\t\t\t\t\t\t\t\tcrossNodeOwnerIndicesMap[destFullPath] = crossMark;\r\n\t\t\t\t\t\t\t\t\tcrossNodeOwners[crossCount] = destNodeOwner;\r\n\t\t\t\t\t\t\t\t\tcrossCount++;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tcontrollerLayer._playType = 2;\r\n\t\t\t\t\t\tfor (i = 0, n = crossNodeOwners.length; i < n; i++) {\r\n\t\t\t\t\t\t\tvar nodeOwner: KeyframeNodeOwner = crossNodeOwners[i];\r\n\t\t\t\t\t\t\tnodeOwner.saveCrossFixedValue();\r\n\t\t\t\t\t\t\tdestNode = destNodesMap[nodeOwner.fullPath];\r\n\t\t\t\t\t\t\tif (destNode)\r\n\t\t\t\t\t\t\t\tdestCrossClipNodeIndices[i] = destNode._indexInList;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tdestCrossClipNodeIndices[i] = -1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcrossCount = controllerLayer._crossNodesOwnersCount;\r\n\t\t\t\t\t\tcrossMark = controllerLayer._crossMark;\r\n\t\t\t\t\t\tfor (i = 0, n = destNodes.count; i < n; i++) {\r\n\t\t\t\t\t\t\tdestNode = destNodes.getNodeByIndex(i);\r\n\t\t\t\t\t\t\tdestIndex = destNode._indexInList;\r\n\t\t\t\t\t\t\tdestNodeOwner = destNodeOwners[destIndex];\r\n\t\t\t\t\t\t\tif (destNodeOwner) {\r\n\t\t\t\t\t\t\t\tdestFullPath = destNode.fullPath;\r\n\t\t\t\t\t\t\t\tif (crossNodeOwnerIndicesMap[destFullPath] !== crossMark) {\r\n\t\t\t\t\t\t\t\t\tdestCrossClipNodeIndices[crossCount] = destIndex;\r\n\r\n\t\t\t\t\t\t\t\t\tcrossNodeOwnerIndicesMap[destFullPath] = crossMark;\r\n\t\t\t\t\t\t\t\t\tnodeOwner = destNodeOwners[destIndex];\r\n\t\t\t\t\t\t\t\t\tcrossNodeOwners[crossCount] = nodeOwner;\r\n\t\t\t\t\t\t\t\t\tnodeOwner.saveCrossFixedValue();\r\n\t\t\t\t\t\t\t\t\tcrossCount++;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tcontrollerLayer._crossNodesOwnersCount = crossCount;\r\n\t\t\t\tcontrollerLayer._crossPlayState = destAnimatorState;\r\n\t\t\t\tcontrollerLayer._crossDuration = srcAnimatorState._clip._duration * transitionDuration;\r\n\t\t\t\tif (normalizedTime !== Number.NEGATIVE_INFINITY)\r\n\t\t\t\t\tcrossPlayStateInfo._resetPlayState(destClip._duration * normalizedTime);\r\n\t\t\t\telse\r\n\t\t\t\t\tcrossPlayStateInfo._resetPlayState(0.0);\r\n\r\n\t\t\t\tvar scripts: AnimatorStateScript[] = destAnimatorState._scripts;\r\n\t\t\t\tif (scripts) {\r\n\t\t\t\t\tfor (i = 0, n = scripts.length; i < n; i++)\r\n\t\t\t\t\t\tscripts[i].onStateEnter();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconsole.warn(\"Invalid name \" + layerIndex + \".\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.warn(\"Invalid layerIndex \" + layerIndex + \".\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 获取当前的播放状态。\r\n\t * @param   layerIndex 层索引。\r\n\t * @return  动画播放状态。\r\n\t */\r\n\tgetCurrentAnimatorPlayState(layerInex: number = 0): AnimatorPlayState {\r\n\t\treturn this._controllerLayers[layerInex]._playStateInfo;\r\n\t}\r\n\r\n\r\n\t//-----------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\t/** @internal */\r\n\tprivate _avatar: Avatar;//[兼容性API]\r\n\r\n\t/**\r\n\t * avatar。\r\n\t */\r\n\tget avatar(): Avatar {//[兼容性API]\r\n\t\treturn this._avatar;\r\n\t}\r\n\r\n\tset avatar(value: Avatar) {//[兼容性API]\r\n\t\tif (this._avatar !== value) {\r\n\t\t\tthis._avatar = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tthis._getAvatarOwnersAndInitDatasAsync();\r\n\t\t\t\t((<Sprite3D>this.owner))._changeHierarchyAnimatorAvatar(this, value);\r\n\t\t\t} else {\r\n\t\t\t\tvar parent: Node = this.owner._parent;\r\n\t\t\t\t((<Sprite3D>this.owner))._changeHierarchyAnimatorAvatar(this, parent ? ((<Sprite3D>parent))._hierarchyAnimator._avatar : null);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate _isLinkSpriteToAnimationNodeData(sprite: Sprite3D, nodeName: string, isLink: boolean): void {//[兼容性API]\r\n\t\tvar linkSprites: any[] = this._linkAvatarSpritesData[nodeName];//存储挂点数据\r\n\t\tif (isLink) {\r\n\t\t\tlinkSprites || (this._linkAvatarSpritesData[nodeName] = linkSprites = []);\r\n\t\t\tlinkSprites.push(sprite);\r\n\t\t} else {\r\n\t\t\tvar index: number = linkSprites.indexOf(sprite);\r\n\t\t\tlinkSprites.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate _getAvatarOwnersAndInitDatasAsync(): void {//[兼容性API]\r\n\t\tfor (var i: number = 0, n: number = this._controllerLayers.length; i < n; i++) {\r\n\t\t\tvar clipStateInfos: AnimatorState[] = this._controllerLayers[i]._states;\r\n\t\t\tfor (var j: number = 0, m: number = clipStateInfos.length; j < m; j++)\r\n\t\t\t\tthis._getOwnersByClip(clipStateInfos[j]);\r\n\t\t}\r\n\r\n\t\tthis._avatar._cloneDatasToAnimator(this);\r\n\t\tfor (var k in this._linkAvatarSpritesData) {\r\n\t\t\tvar sprites: any[] = this._linkAvatarSpritesData[k];\r\n\t\t\tif (sprites) {\r\n\t\t\t\tfor (var c: number = 0, p: number = sprites.length; c < p; c++)\r\n\t\t\t\t\tthis._isLinkSpriteToAnimationNode(sprites[c], k, true);//TODO:对应移除\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate _isLinkSpriteToAnimationNode(sprite: Sprite3D, nodeName: string, isLink: boolean): void {//[兼容性API]\r\n\t\tif (this._avatar) {\r\n\t\t\tvar node: AnimationNode = this._avatarNodeMap[nodeName];\r\n\t\t\tif (node) {\r\n\t\t\t\tif (isLink) {\r\n\t\t\t\t\tsprite._transform._dummy = node.transform;\r\n\t\t\t\t\tthis._linkAvatarSprites.push(sprite);\r\n\r\n\t\t\t\t\tvar nodeTransform: AnimationTransform3D = node.transform;//nodeTransform为空时表示avatar中暂时无此节点\r\n\t\t\t\t\tvar spriteTransform: Transform3D = sprite.transform;\r\n\t\t\t\t\tif (!spriteTransform.owner.isStatic && nodeTransform) {//Avatar跟节点始终为false,不会更新,Scene无transform\r\n\t\t\t\t\t\t//TODO:spriteTransform.owner.isStatic外部判断\r\n\t\t\t\t\t\tvar spriteWorldMatrix: Matrix4x4 = spriteTransform.worldMatrix;\r\n\t\t\t\t\t\tvar ownParTra: Transform3D = ((<Sprite3D>this.owner))._transform._parent;\r\n\t\t\t\t\t\tif (ownParTra) {\r\n\t\t\t\t\t\t\tUtils3D.matrix4x4MultiplyMFM(ownParTra.worldMatrix, nodeTransform.getWorldMatrix(), spriteWorldMatrix);//TODO:还可优化\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar sprWorE: Float32Array = spriteWorldMatrix.elements;\r\n\t\t\t\t\t\t\tvar nodWorE: Float32Array = nodeTransform.getWorldMatrix();\r\n\t\t\t\t\t\t\tfor (var i: number = 0; i < 16; i++)\r\n\t\t\t\t\t\t\t\tsprWorE[i] = nodWorE[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tspriteTransform.worldMatrix = spriteWorldMatrix;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsprite._transform._dummy = null;\r\n\t\t\t\t\tthis._linkAvatarSprites.splice(this._linkAvatarSprites.indexOf(sprite), 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\t_updateAvatarNodesToSprite(): void {\r\n\t\tfor (var i: number = 0, n: number = this._linkAvatarSprites.length; i < n; i++) {\r\n\t\t\tvar sprite: Sprite3D = this._linkAvatarSprites[i];\r\n\t\t\tvar nodeTransform: AnimationTransform3D = sprite.transform._dummy;//nodeTransform为空时表示avatar中暂时无此节点\r\n\t\t\tvar spriteTransform: Transform3D = sprite.transform;\r\n\t\t\tif (!spriteTransform.owner.isStatic && nodeTransform) {\r\n\t\t\t\tvar spriteWorldMatrix: Matrix4x4 = spriteTransform.worldMatrix;\r\n\t\t\t\tvar ownTra: Transform3D = ((<Sprite3D>this.owner))._transform;\r\n\t\t\t\tUtils3D.matrix4x4MultiplyMFM(ownTra.worldMatrix, nodeTransform.getWorldMatrix(), spriteWorldMatrix);\r\n\t\t\t\tspriteTransform.worldMatrix = spriteWorldMatrix;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 关联精灵节点到Avatar节点,此Animator必须有Avatar文件。\r\n\t * @param nodeName 关联节点的名字。\r\n\t * @param sprite3D 精灵节点。\r\n\t * @return 是否关联成功。\r\n\t */\r\n\tlinkSprite3DToAvatarNode(nodeName: string, sprite3D: Sprite3D): boolean {//[兼容性API]\r\n\t\tthis._isLinkSpriteToAnimationNodeData(sprite3D, nodeName, true);\r\n\t\tthis._isLinkSpriteToAnimationNode(sprite3D, nodeName, true);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 解除精灵节点到Avatar节点的关联,此Animator必须有Avatar文件。\r\n\t * @param sprite3D 精灵节点。\r\n\t * @return 是否解除关联成功。\r\n\t */\r\n\tunLinkSprite3DToAvatarNode(sprite3D: Sprite3D): boolean {//[兼容性API]\r\n\t\tvar dummy: AnimationTransform3D = sprite3D.transform._dummy;\r\n\t\tif (dummy) {\r\n\t\t\tvar nodeName: string = dummy._owner.name;\r\n\t\t\tthis._isLinkSpriteToAnimationNodeData(sprite3D, nodeName, false);\r\n\t\t\tthis._isLinkSpriteToAnimationNode(sprite3D, nodeName, false);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t * [NATIVE]\r\n\t */\r\n\t_updateAnimationNodeWorldMatix(localPositions: Float32Array, localRotations: Float32Array, localScales: Float32Array, worldMatrixs: Float32Array, parentIndices: Int16Array): void {\r\n\t\t(<any>LayaGL.instance).updateAnimationNodeWorldMatix(localPositions, localRotations, localScales, parentIndices, worldMatrixs);\r\n\t}\r\n}\r\n\r\n\r\n","import { Camera } from \"../Camera\"\r\nimport { CommandBuffer } from \"./command/CommandBuffer\"\r\nimport { RenderTexture } from \"../../resource/RenderTexture\"\r\nimport { ShaderData } from \"../../shader/ShaderData\"\r\n\r\n/**\r\n * * <code>PostProcessRenderContext</code> 类用于创建后期处理渲染上下文。\r\n */\r\nexport class PostProcessRenderContext {\r\n\t/** 源纹理。*/\r\n\tsource: RenderTexture = null;\r\n\t/** 输出纹理。*/\r\n\tdestination: RenderTexture = null;\r\n\t/** 渲染相机。*/\r\n\tcamera: Camera = null;\r\n\t/** 合成着色器数据。*/\r\n\tcompositeShaderData: ShaderData = null;\r\n\t/** 后期处理指令流。*/\r\n\tcommand: CommandBuffer = null;\r\n\t/** 临时纹理数组。*/\r\n\tdeferredReleaseTextures: RenderTexture[] = [];\r\n\r\n}\r\n\r\n\r\n","import { RenderElement } from \"./RenderElement\";\r\nimport { BaseCamera } from \"../BaseCamera\"\r\nimport { Scene3D } from \"../scene/Scene3D\"\r\nimport { Matrix4x4 } from \"../../math/Matrix4x4\"\r\nimport { Viewport } from \"../../math/Viewport\"\r\nimport { ShaderInstance } from \"../../shader/ShaderInstance\"\r\nimport { ShaderData } from \"../../shader/ShaderData\";\r\nimport { Camera } from \"../Camera\";\r\n\r\n/**\r\n * <code>RenderContext3D</code> 类用于实现渲染状态。\r\n */\r\nexport class RenderContext3D {\r\n\t/** @internal */\r\n\tstatic _instance: RenderContext3D = new RenderContext3D();\r\n\r\n\t/**渲染区宽度。*/\r\n\tstatic clientWidth: number;\r\n\t/**渲染区高度。*/\r\n\tstatic clientHeight: number;\r\n\r\n\t/** @internal */\r\n\tviewMatrix: Matrix4x4;\r\n\t/** @internal */\r\n\tprojectionMatrix: Matrix4x4;\r\n\t/** @internal */\r\n\tprojectionViewMatrix: Matrix4x4;\r\n\t/** @internal */\r\n\tviewport: Viewport;\r\n\r\n\t/** @internal */\r\n\tscene: Scene3D;\r\n\t/** @internal */\r\n\tcamera: Camera;\r\n\t/** @internal */\r\n\tcameraShaderValue: ShaderData;\r\n\t/** @internal */\r\n\trenderElement: RenderElement;\r\n\t/** @internal */\r\n\tshader: ShaderInstance;\r\n\t/** @internal */\r\n\tinvertY: boolean = false;\r\n\t/** @internal */\r\n\tpipelineMode: string;\r\n\r\n\t/**\r\n\t * 创建一个 <code>RenderContext3D</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Render } from \"../../renders/Render\";\r\nimport { BaseTexture } from \"../../resource/BaseTexture\";\r\nimport { RenderTextureDepthFormat, RenderTextureFormat } from \"../../resource/RenderTextureFormat\";\r\nimport { Texture2D } from \"../../resource/Texture2D\";\r\nimport { LayaGPU } from \"../../webgl/LayaGPU\";\r\nimport { WebGLContext } from \"../../webgl/WebGLContext\";\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\r\n\r\n/**\r\n * <code>RenderTexture</code> 类用于创建渲染目标。\r\n */\r\nexport class RenderTexture extends BaseTexture {\r\n\t/** @internal */\r\n\tprivate static _pool: any[] = [];\r\n\t/** @internal */\r\n\tprivate static _currentActive: RenderTexture;\r\n\r\n\t/**\r\n\t * 获取当前激活的Rendertexture。\r\n\t */\r\n\tstatic get currentActive(): RenderTexture {\r\n\t\treturn RenderTexture._currentActive;\r\n\t}\r\n\r\n\t/**\r\n\t *从对象池获取临时渲染目标。\r\n\t */\r\n\tstatic createFromPool(width: number, height: number, format: number = RenderTextureFormat.R8G8B8, depthStencilFormat: number = RenderTextureDepthFormat.DEPTH_16): RenderTexture {\r\n\t\tvar tex: RenderTexture;\r\n\t\tfor (var i: number = 0, n: number = RenderTexture._pool.length; i < n; i++) {\r\n\t\t\ttex = RenderTexture._pool[i];\r\n\t\t\tif (tex._width == width && tex._height == height && tex._format == format && tex._depthStencilFormat == depthStencilFormat) {\r\n\t\t\t\ttex._inPool = false;\r\n\t\t\t\tvar end: RenderTexture = RenderTexture._pool[n - 1];\r\n\t\t\t\tRenderTexture._pool[i] = end;\r\n\t\t\t\tRenderTexture._pool.length -= 1;\r\n\t\t\t\treturn tex;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttex = new RenderTexture(width, height, format, depthStencilFormat);\r\n\t\ttex.lock = true;//TODO:资源不加锁会被GC掉,或GC时对象池清空\r\n\t\treturn tex;\r\n\t}\r\n\r\n\t/**\r\n\t * 回收渲染目标到对象池,释放后可通过createFromPool复用。\r\n\t */\r\n\tstatic recoverToPool(renderTexture: RenderTexture): void {\r\n\t\tif (renderTexture._inPool)\r\n\t\t\treturn;\r\n\t\tRenderTexture._pool.push(renderTexture);\r\n\t\trenderTexture._inPool = true;\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _frameBuffer: any;\r\n\t/** @internal */\r\n\tprivate _depthStencilBuffer: any;\r\n\t/** @internal */\r\n\tprivate _depthStencilFormat: number;\r\n\t/** @internal */\r\n\tprivate _inPool: boolean = false;\r\n\r\n\t/** @internal */\r\n\t_isCameraTarget: boolean = false;\r\n\r\n\t/**\r\n\t * 深度格式。\r\n\t */\r\n\tget depthStencilFormat(): number {\r\n\t\treturn this._depthStencilFormat;\r\n\t}\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tget defaulteTexture(): BaseTexture {\r\n\t\treturn Texture2D.grayTexture;\r\n\t}\r\n\r\n\t/**\r\n\t * @param width  宽度。\r\n\t * @param height 高度。\r\n\t * @param format 纹理格式。\r\n\t * @param depthStencilFormat 深度格式。\r\n\t * 创建一个 <code>RenderTexture</code> 实例。\r\n\t */\r\n\tconstructor(width: number, height: number, format: RenderTextureFormat = RenderTextureFormat.R8G8B8, depthStencilFormat: RenderTextureDepthFormat = RenderTextureDepthFormat.DEPTH_16) {\r\n\t\tsuper(format, false);\r\n\t\tthis._glTextureType = LayaGL.instance.TEXTURE_2D;\r\n\t\tthis._width = width;\r\n\t\tthis._height = height;\r\n\t\tthis._depthStencilFormat = depthStencilFormat;\r\n\t\tthis._mipmapCount = 1;//TODO:\r\n\t\tthis._create(width, height);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _create(width: number, height: number): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar gl2: WebGL2RenderingContext = <WebGL2RenderingContext>gl;\r\n\t\tvar glTextureType: number = this._glTextureType;\r\n\t\tvar layaGPU: LayaGPU = LayaGL.layaGPUInstance;\r\n\t\tvar isWebGL2: Boolean = layaGPU._isWebGL2;\r\n\t\tvar format: number = this._format;\r\n\r\n\t\tthis._frameBuffer = gl.createFramebuffer();\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\r\n\r\n\t\t//color\r\n\t\tif (format !== RenderTextureFormat.Depth && format !== RenderTextureFormat.ShadowMap) {\r\n\t\t\tWebGLContext.bindTexture(gl, glTextureType, this._glTexture);\r\n\t\t\tswitch (format) {\r\n\t\t\t\tcase RenderTextureFormat.R8G8B8:\r\n\t\t\t\t\tif (isWebGL2)\r\n\t\t\t\t\t\tgl2.texStorage2D(glTextureType, this._mipmapCount, gl2.RGB8, width, height);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tgl.texImage2D(glTextureType, 0, gl.RGB, width, height, 0, gl.RGB, gl.UNSIGNED_BYTE, null);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase RenderTextureFormat.R8G8B8A8:\r\n\t\t\t\t\tif (isWebGL2)\r\n\t\t\t\t\t\tgl2.texStorage2D(glTextureType, this._mipmapCount, gl2.RGBA8, width, height);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tgl.texImage2D(glTextureType, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase RenderTextureFormat.Alpha8:\r\n\t\t\t\t\tif (isWebGL2)\r\n\t\t\t\t\t\tgl2.texStorage2D(glTextureType, 0, gl2.R8, width, height);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tgl.texImage2D(glTextureType, 0, gl.ALPHA, width, height, 0, gl.ALPHA, gl.UNSIGNED_BYTE, null);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase RenderTextureFormat.R16G16B16A16:\r\n\t\t\t\t\tif (isWebGL2)\r\n\t\t\t\t\t\tgl2.texStorage2D(glTextureType, this._mipmapCount, gl2.RGBA16F, width, height);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tgl.texImage2D(glTextureType, 0, gl.RGBA, width, height, 0, gl.RGBA, layaGPU._oesTextureHalfFloat.HALF_FLOAT_OES, null);//内部格式仍为RGBA\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._glTexture, 0);\r\n\t\t}\r\n\r\n\t\t//depth\r\n\t\tif (format == RenderTextureFormat.Depth || format == RenderTextureFormat.ShadowMap) {\r\n\t\t\tWebGLContext.bindTexture(gl, glTextureType, this._glTexture);\r\n\t\t\tswitch (this._depthStencilFormat) {\r\n\t\t\t\tcase RenderTextureDepthFormat.DEPTH_16:\r\n\t\t\t\t\tif (isWebGL2)\r\n\t\t\t\t\t\tgl2.texStorage2D(glTextureType, this._mipmapCount, gl2.DEPTH_COMPONENT16, width, height);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tgl.texImage2D(glTextureType, 0, gl.DEPTH_COMPONENT, width, height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT, null);\r\n\t\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this._glTexture, 0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase RenderTextureDepthFormat.DEPTHSTENCIL_24_8:\r\n\t\t\t\t\tif (isWebGL2)\r\n\t\t\t\t\t\tgl2.texStorage2D(glTextureType, this._mipmapCount, gl2.DEPTH24_STENCIL8, width, height);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tgl.texImage2D(glTextureType, 0, gl.DEPTH_STENCIL, width, height, 0, gl.DEPTH_STENCIL, layaGPU._webgl_depth_texture.UNSIGNED_INT_24_8_WEBGL, null);\r\n\t\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.TEXTURE_2D, this._glTexture, 0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"RenderTexture: depth format RenderTexture must use depthFormat with DEPTH_16 and DEPTHSTENCIL_16_8.\";\r\n\t\t\t}\r\n\t\t\tif (isWebGL2 && format == RenderTextureFormat.ShadowMap)\r\n\t\t\t\tgl2.texParameteri(glTextureType, gl2.TEXTURE_COMPARE_MODE, gl2.COMPARE_REF_TO_TEXTURE);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._depthStencilFormat !== RenderTextureDepthFormat.DEPTHSTENCIL_NONE) {\r\n\t\t\t\tthis._depthStencilBuffer = gl.createRenderbuffer();\r\n\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, this._depthStencilBuffer);\r\n\t\t\t\tswitch (this._depthStencilFormat) {\r\n\t\t\t\t\tcase RenderTextureDepthFormat.DEPTH_16:\r\n\t\t\t\t\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\r\n\t\t\t\t\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._depthStencilBuffer);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase RenderTextureDepthFormat.STENCIL_8:\r\n\t\t\t\t\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.STENCIL_INDEX8, width, height);\r\n\t\t\t\t\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, this._depthStencilBuffer);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase RenderTextureDepthFormat.DEPTHSTENCIL_24_8:\r\n\t\t\t\t\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);\r\n\t\t\t\t\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this._depthStencilBuffer);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"RenderTexture: unkonw depth format.\";\r\n\t\t\t\t}\r\n\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n\t\t\t}\r\n\t\t}\r\n\t\t//Debug Code:\r\n\t\t//console.log(\"Depth Bits: \" + gl.getParameter(gl.DEPTH_BITS));\r\n\t\t//console.log(\"Stencil Bits: \" + gl.getParameter(gl.STENCIL_BITS));\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n\t\tthis._setWarpMode(gl.TEXTURE_WRAP_S, this._wrapModeU);\r\n\t\tthis._setWarpMode(gl.TEXTURE_WRAP_T, this._wrapModeV);\r\n\t\tthis._setFilterMode(this._filterMode);\r\n\t\tthis._setAnisotropy(this._anisoLevel);\r\n\r\n\t\tthis._readyed = true;\r\n\t\tthis._activeResource();\r\n\t\tthis._setGPUMemory(width * height * 4);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_start(): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\r\n\t\tRenderTexture._currentActive = this;\r\n\t\t(this._isCameraTarget) && (RenderContext3D._instance.invertY = true);//if this is offScreenRenderTexture need invertY\r\n\t\tthis._readyed = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_end(): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\t\tRenderTexture._currentActive = null;\r\n\t\t(this._isCameraTarget) && (RenderContext3D._instance.invertY = false);\r\n\t\tthis._readyed = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 获得像素数据。\r\n\t * @param x X像素坐标。\r\n\t * @param y Y像素坐标。\r\n\t * @param width 宽度。\r\n\t * @param height 高度。\r\n\t * @return 像素数据。\r\n\t */\r\n\tgetData(x: number, y: number, width: number, height: number, out: Uint8Array): Uint8Array {//TODO:检查长度\r\n\t\tif (Render.isConchApp && (<any>window).conchConfig.threadMode == 2) {\r\n\t\t\tthrow \"native 2 thread mode use getDataAsync\";\r\n\t\t}\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\r\n\t\tvar canRead: boolean = (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE);\r\n\r\n\t\tif (!canRead) {\r\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tgl.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, out);\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _disposeResource(): void {\r\n\t\tif (this._frameBuffer) {\r\n\t\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\t\tgl.deleteTexture(this._glTexture);\r\n\t\t\tgl.deleteFramebuffer(this._frameBuffer);\r\n\t\t\tgl.deleteRenderbuffer(this._depthStencilBuffer);\r\n\t\t\tthis._glTexture = null;\r\n\t\t\tthis._frameBuffer = null;\r\n\t\t\tthis._depthStencilBuffer = null;\r\n\t\t\tthis._setGPUMemory(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * native多线程\r\n\t */\r\n\tgetDataAsync(x: number, y: number, width: number, height: number, callBack: Function): void {\r\n\t\tvar gl: any = LayaGL.instance;\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\r\n\t\tgl.readPixelsAsync(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, function (data: ArrayBuffer): void {\r\n\t\t\tcallBack(new Uint8Array(data));\r\n\t\t});\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n","import { IClone } from \"../core/IClone\";\r\nimport { ShaderDefine } from \"./ShaderDefine\";\r\n\r\n/**\r\n * <code>DefineDatas</code> 类用于创建宏定义数据集合。\r\n */\r\nexport class DefineDatas implements IClone {\r\n\t/** @internal */\r\n\t_mask: Array<number> = [];\r\n\t/** @internal */\r\n\t_length: number = 0;\r\n\r\n\t/**\r\n\t * 创建一个 <code>DefineDatas</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_intersectionDefineDatas(define: DefineDatas): void {\r\n\t\tvar unionMask: Array<number> = define._mask;\r\n\t\tvar mask: Array<number> = this._mask;\r\n\t\tfor (var i: number = this._length - 1; i >= 0; i--) {\r\n\t\t\tvar value: number = mask[i] & unionMask[i];\r\n\t\t\tif (value == 0 && i == this._length - 1)\r\n\t\t\t\tthis._length--;\r\n\t\t\telse\r\n\t\t\t\tmask[i] = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 添加宏定义值。\r\n\t * @param define 宏定义值。\r\n\t */\r\n\tadd(define: ShaderDefine): void {\r\n\t\tvar index: number = define._index;\r\n\t\tvar size: number = index + 1;\r\n\t\tvar mask: Array<number> = this._mask;\r\n\t\tvar maskStart: number = this._length;//must from this._length because this._length maybe less than mask.length and have dirty data should clear.\r\n\t\tif (maskStart < size) {\r\n\t\t\t(mask.length < size) && (mask.length = size);//mask.length maybe small than size,maybe not.\r\n\t\t\tfor (; maskStart < index; maskStart++)\r\n\t\t\t\tmask[maskStart] = 0;\r\n\t\t\tmask[index] = define._value;\r\n\t\t\tthis._length = size;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (size > this._length) {//the real length is this._length, if size is large than real length should use \"= instead \"|=\" to ignore dirty data.\r\n\t\t\t\tmask[index] = define._value;\r\n\t\t\t\tthis._length = size;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmask[index] |= define._value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 移除宏定义。\r\n\t * @param define 宏定义。\r\n\t */\r\n\tremove(define: ShaderDefine): void {\r\n\t\tvar index: number = define._index;\r\n\t\tvar mask: Array<number> = this._mask;\r\n\t\tvar endIndex: number = this._length - 1;\r\n\t\tif (index > endIndex)//不重置Length,避免经常扩充\r\n\t\t\treturn;\r\n\t\tvar newValue = mask[index] & ~define._value;\r\n\t\tif (index == endIndex && newValue === 0)\r\n\t\t\tthis._length--;\r\n\t\telse\r\n\t\t\tmask[index] = newValue;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加宏定义集合。\r\n\t * @param define 宏定义集合。\r\n\t */\r\n\taddDefineDatas(define: DefineDatas): void {\r\n\t\tvar addMask: Array<number> = define._mask;\r\n\t\tvar size: number = define._length;\r\n\t\tvar mask: Array<number> = this._mask;\r\n\t\tvar maskStart: number = mask.length;\r\n\t\tif (maskStart < size) {\r\n\t\t\tmask.length = size;\r\n\t\t\tfor (var i: number = 0; i < maskStart; i++)\r\n\t\t\t\tmask[i] |= addMask[i];\r\n\t\t\tfor (; maskStart < size; maskStart++)\r\n\t\t\t\tmask[maskStart] = addMask[maskStart];\r\n\t\t\tthis._length = size;\r\n\t\t} else {\r\n\t\t\tfor (var i: number = 0; i < size; i++)\r\n\t\t\t\tmask[i] |= addMask[i];\r\n\t\t\tthis._length = Math.max(this._length, size);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 移除宏定义集合。\r\n\t * @param define 宏定义集合。\r\n\t */\r\n\tremoveDefineDatas(define: DefineDatas): void {\r\n\t\tvar removeMask: Array<number> = define._mask;\r\n\t\tvar mask: Array<number> = this._mask;\r\n\t\tvar endIndex: number = this._length - 1;\r\n\t\tfor (var i: number = define._length - 1; i >= 0; i--) {\r\n\t\t\tif (i > endIndex)\r\n\t\t\t\tcontinue;\r\n\t\t\tvar newValue = mask[i] & ~removeMask[i];\r\n\t\t\tif (i == endIndex && newValue === 0) {\r\n\t\t\t\tendIndex--;\r\n\t\t\t\tthis._length--;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmask[i] = newValue;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 是否有宏定义。\r\n\t * @param define 宏定义。\r\n\t */\r\n\thas(define: ShaderDefine): boolean {\r\n\t\tvar index: number = define._index;\r\n\t\tif (index >= this._length)\r\n\t\t\treturn false;\r\n\t\treturn (this._mask[index] & define._value) !== 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 清空宏定义。\r\n\t */\r\n\tclear(): void {\r\n\t\tthis._length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destDefineData: DefineDatas = (<DefineDatas>destObject);\r\n\t\tvar destMask: Array<number> = destDefineData._mask;\r\n\t\tvar mask: Array<number> = this._mask;\r\n\t\tvar count: number = this._length;\r\n\t\tdestMask.length = count;\r\n\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\tdestMask[i] = mask[i];\r\n\t\tdestDefineData._length = count;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: DefineDatas = new DefineDatas();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n\r\n","\r\nexport class ShaderDefine {\r\n\t/**@internal */\r\n\t_index: number;\r\n\t/**@internal */\r\n\t_value: number;\r\n\r\n\tconstructor(index: number, value: number) {\r\n\t\tthis._index = index;\r\n\t\tthis._value = value;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { ILaya3D } from \"../../../ILaya3D\";\r\nimport { DefineDatas } from \"./DefineDatas\";\r\nimport { Shader3D } from \"./Shader3D\";\r\nimport { ShaderPass } from \"./ShaderPass\";\r\nimport { SubShader } from \"./SubShader\";\r\n\r\n/**\r\n * 着色器变种。\r\n */\r\nexport class ShaderVariant {\r\n    /** @internal */\r\n    _shader: Shader3D;\r\n    /** @internal */\r\n    _subShaderIndex: number = 0;\r\n    /** @internal */\r\n    _passIndex: number = 0;\r\n    /** @internal */\r\n    _defineNames: string[];\r\n\r\n    /**\r\n     * 着色器。\r\n     */\r\n    public get shader(): Shader3D {\r\n        return this._shader;\r\n    }\r\n\r\n    /**\r\n     * 子着色器索引。\r\n     */\r\n    public get subShaderIndex(): number {\r\n        return this._subShaderIndex;\r\n    }\r\n\r\n    /**\r\n     * 通道索引。\r\n     */\r\n    public get passIndex(): number {\r\n        return this._passIndex;\r\n    }\r\n\r\n    /**\r\n     * 宏定义集合。\r\n     */\r\n    public get defineNames(): Readonly<string[]> {\r\n        return this._defineNames;\r\n    }\r\n\r\n    /**\r\n     * 创建着色器变种。\r\n     * @param shader 着色器\r\n     * @param subShaderIndex 子着色器索引 \r\n     * @param passIndex 通道索引\r\n     * @param defines 宏定义集合\r\n     */\r\n    constructor(shader: Shader3D, subShaderIndex: number, passIndex: number, defines: string[]) {\r\n        this.setValue(shader, subShaderIndex, passIndex, defines);\r\n    }\r\n\r\n    /**\r\n     * 给着色器变种赋值。\r\n     * @param shader 着色器\r\n     * @param subShaderIndex 子着色器索引 \r\n     * @param passIndex 通道索引\r\n     * @param defineNames 宏定义集合\r\n     */\r\n    setValue(shader: Shader3D, subShaderIndex: number, passIndex: number, defineNames: string[]): void {\r\n        if (shader) {\r\n            var subShader: SubShader = shader.getSubShaderAt(subShaderIndex);\r\n            if (subShader) {\r\n                var pass: ShaderPass = subShader._passes[passIndex];\r\n                if (pass) {\r\n                    var validDefine: DefineDatas = pass._validDefine;\r\n                    for (var i: number = 0, n: number = defineNames.length; i < n; i++) {\r\n                        var defname: string = defineNames[i];\r\n                        if (!validDefine.has(ILaya3D.Shader3D.getDefineByName(defname)))\r\n                            throw `ShaderVariantInfo:Invalid defineName ${defname} in ${shader._name} subShaderIndex of ${subShaderIndex} passIndex of ${passIndex}.`;\r\n                    }\r\n                }\r\n                else {\r\n                    throw `ShaderVariantInfo:Shader don't have passIndex of ${passIndex}.`;\r\n                }\r\n            }\r\n            else {\r\n                throw `ShaderVariantInfo:Shader don't have subShaderIndex of ${subShaderIndex}.`;\r\n            }\r\n        }\r\n        else {\r\n            throw `ShaderVariantInfo:Shader can't be null.`;\r\n        }\r\n        this._shader = shader;\r\n        this._subShaderIndex = subShaderIndex;\r\n        this._passIndex = passIndex;\r\n        this._defineNames = defineNames;\r\n    }\r\n\r\n    /**\r\n     * 是否相等。\r\n     * @param other 其它着色器变种\r\n     * @return 是否相等。\r\n     */\r\n    equal(other: ShaderVariant): boolean {\r\n        if (this._shader !== other._shader || this._subShaderIndex !== other._subShaderIndex || this._passIndex !== other._passIndex)\r\n            return false;\r\n\r\n        var defines: string[] = this._defineNames;\r\n        var otherDefines: string[] = other._defineNames;\r\n        if (defines.length !== otherDefines.length)\r\n            return false;\r\n        for (var i: number = 0, n: number = this._defineNames.length; i < n; i++) {\r\n            if (defines[i] !== otherDefines[i])\r\n                return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 克隆。\r\n     * @return 着色器变种。 \r\n     */\r\n    clone(): ShaderVariant {\r\n        var dest: ShaderVariant = new ShaderVariant(this._shader, this._subShaderIndex, this._passIndex, this._defineNames.slice());\r\n        return dest;\r\n    }\r\n}\r\n\r\n/**\r\n * 着色器变种集合。\r\n */\r\nexport class ShaderVariantCollection {\r\n    /** @internal */\r\n    private _allCompiled: boolean = false;\r\n    /** @internal */\r\n    private _variants: ShaderVariant[] = [];\r\n\r\n    /**\r\n     * 是否已经全部编译。\r\n     */\r\n    get allCompiled(): boolean {\r\n        return this._allCompiled;\r\n    }\r\n\r\n    /**\r\n     * 包含的变种数量。\r\n     */\r\n    get variantCount(): number {\r\n        return this._variants.length;\r\n    }\r\n\r\n    /**\r\n     * 添加着色器变种。\r\n     * @param variant 着色器变种。\r\n     * @param 是否添加成功。\r\n     */\r\n    add(variant: ShaderVariant): boolean {\r\n        for (var i: number = 0, n: number = this._variants.length; i < n; i++) {\r\n            if (this._variants[i].equal(variant))\r\n                return false;\r\n        }\r\n        this._variants.push(variant.clone());\r\n        this._allCompiled = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 移除着色器变种。\r\n     * @param variant 着色器变种。\r\n     * @return 是否移除成功。\r\n     */\r\n    remove(variant: ShaderVariant): boolean {\r\n        for (var i: number = 0, n: number = this._variants.length; i < n; i++) {\r\n            if (this._variants[i].equal(variant)) {\r\n                this._variants.splice(i, 1);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 是否包含着色器变种。\r\n     * @param variant 着色器变种。\r\n     */\r\n    contatins(variant: ShaderVariant): boolean {\r\n        for (var i: number = 0, n: number = this._variants.length; i < n; i++) {\r\n            if (this._variants[i].equal(variant))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 通过索引获取着色器变种。\r\n     * @param index 索引。\r\n     * @returns 着色器变种。\r\n     */\r\n    getByIndex(index: number): ShaderVariant {\r\n        return this._variants[index];\r\n    }\r\n\r\n    /**\r\n     * 清空。\r\n     */\r\n    clear(): void {\r\n        this._variants.length = 0;\r\n    }\r\n\r\n    /**\r\n     * 执行编译。\r\n     */\r\n    compile(): void {\r\n        if (!this._allCompiled) {\r\n            var variants: ShaderVariant[] = this._variants;\r\n            for (var i: number = 0, n: number = variants.length; i < n; i++) {\r\n                var variant: ShaderVariant = variants[i];\r\n                ILaya3D.Shader3D.compileShaderByDefineNames(variant._shader._name, variant._subShaderIndex, variant._passIndex, variant._defineNames);\r\n            }\r\n            this._allCompiled = true;\r\n        }\r\n    }\r\n}","import { Config3D } from \"../../../Config3D\";\r\nimport { ShaderCompile } from \"../../webgl/utils/ShaderCompile\";\r\nimport { DefineDatas } from \"./DefineDatas\";\r\nimport { ShaderDefine } from \"./ShaderDefine\";\r\nimport { ShaderPass } from \"./ShaderPass\";\r\nimport { ShaderVariant, ShaderVariantCollection } from \"./ShaderVariantCollection\";\r\nimport { SubShader } from \"./SubShader\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\n\r\n/**\r\n * <code>Shader3D</code> 类用于创建Shader3D。\r\n */\r\nexport class Shader3D {\r\n\r\n\t/**@internal */\r\n\tprivate static _compileDefineDatas: DefineDatas = new DefineDatas();\r\n\r\n\t/**渲染状态_剔除。*/\r\n\tstatic RENDER_STATE_CULL: number = 0;\r\n\t/**渲染状态_混合。*/\r\n\tstatic RENDER_STATE_BLEND: number = 1;\r\n\t/**渲染状态_混合源。*/\r\n\tstatic RENDER_STATE_BLEND_SRC: number = 2;\r\n\t/**渲染状态_混合目标。*/\r\n\tstatic RENDER_STATE_BLEND_DST: number = 3;\r\n\t/**渲染状态_混合源RGB。*/\r\n\tstatic RENDER_STATE_BLEND_SRC_RGB: number = 4;\r\n\t/**渲染状态_混合目标RGB。*/\r\n\tstatic RENDER_STATE_BLEND_DST_RGB: number = 5;\r\n\t/**渲染状态_混合源ALPHA。*/\r\n\tstatic RENDER_STATE_BLEND_SRC_ALPHA: number = 6;\r\n\t/**渲染状态_混合目标ALPHA。*/\r\n\tstatic RENDER_STATE_BLEND_DST_ALPHA: number = 7;\r\n\t/**渲染状态_混合常量颜色。*/\r\n\tstatic RENDER_STATE_BLEND_CONST_COLOR: number = 8;\r\n\t/**渲染状态_混合方程。*/\r\n\tstatic RENDER_STATE_BLEND_EQUATION: number = 9;\r\n\t/**渲染状态_RGB混合方程。*/\r\n\tstatic RENDER_STATE_BLEND_EQUATION_RGB: number = 10;\r\n\t/**渲染状态_ALPHA混合方程。*/\r\n\tstatic RENDER_STATE_BLEND_EQUATION_ALPHA: number = 11;\r\n\t/**渲染状态_深度测试。*/\r\n\tstatic RENDER_STATE_DEPTH_TEST: number = 12;\r\n\t/**渲染状态_深度写入。*/\r\n\tstatic RENDER_STATE_DEPTH_WRITE: number = 13;\r\n\r\n\t/**shader变量提交周期，自定义。*/\r\n\tstatic PERIOD_CUSTOM: number = 0;\r\n\t/**shader变量提交周期，逐材质。*/\r\n\tstatic PERIOD_MATERIAL: number = 1;\r\n\t/**shader变量提交周期，逐精灵和相机，注：因为精灵包含MVP矩阵，为复合属性，所以摄像机发生变化时也应提交。*/\r\n\tstatic PERIOD_SPRITE: number = 2;\r\n\t/**shader变量提交周期，逐相机。*/\r\n\tstatic PERIOD_CAMERA: number = 3;\r\n\t/**shader变量提交周期，逐场景。*/\r\n\tstatic PERIOD_SCENE: number = 4;\r\n\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_LEGACYSINGALLIGHTING: ShaderDefine;\r\n\t/**@internal 图形API为WebGL1.0/OPENGLES2.0。*/\r\n\tstatic SHADERDEFINE_GRAPHICS_API_GLES2: ShaderDefine;\r\n\t/**@internal 图形API为WebGL2.0/OPENGLES3.0。*/\r\n\tstatic SHADERDEFINE_GRAPHICS_API_GLES3: ShaderDefine;\r\n\r\n\t/**@internal */\r\n\tprivate static _propertyNameCounter: number = 0;\r\n\t/**@internal */\r\n\tprivate static _propertyNameMap: any = {};\r\n\t/**@internal */\r\n\tprivate static _defineCounter: number = 0;\r\n\t/**@internal */\r\n\tprivate static _defineMap: object = {};\r\n\r\n\t/**@internal */\r\n\tstatic _preCompileShader: any = {};\r\n\t/**@internal */\r\n\tstatic _maskMap: Array<object> = [];\r\n\t/**@internal */\r\n\tstatic _debugShaderVariantInfo: ShaderVariant;\r\n\r\n\r\n\t/**是否开启调试模式。 */\r\n\tstatic debugMode: boolean = false;\r\n\t/**调试着色器变种集合。 */\r\n\tstatic readonly debugShaderVariantCollection: ShaderVariantCollection = new ShaderVariantCollection();\r\n\r\n\t/**@internal */\r\n\t_attributeMap: any = null;\r\n\t/**@internal */\r\n\t_uniformMap: any = null;\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _getNamesByDefineData(defineData: DefineDatas, out: Array<string>): void {\r\n\t\tvar maskMap: object[] = Shader3D._maskMap;\r\n\t\tvar mask: Array<number> = defineData._mask;\r\n\t\tout.length = 0;\r\n\t\tfor (var i: number = 0, n: number = defineData._length; i < n; i++) {\r\n\t\t\tvar subMaskMap: object = maskMap[i];\r\n\t\t\tvar subMask: number = mask[i];\r\n\t\t\tfor (var j: number = 0; j < 32; j++) {\r\n\t\t\t\tvar d: number = 1 << j;\r\n\t\t\t\tif (subMask > 0 && d > subMask)//如果31位存在subMask为负数,避免break\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tif (subMask & d)\r\n\t\t\t\t\tout.push(subMaskMap[d]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 注册宏定义。\r\n\t * @param name \r\n\t */\r\n\tstatic getDefineByName(name: string): ShaderDefine {\r\n\t\tvar define: ShaderDefine = Shader3D._defineMap[name];\r\n\t\tif (!define) {\r\n\t\t\tvar maskMap: Array<object> = Shader3D._maskMap;\r\n\t\t\tvar counter: number = Shader3D._defineCounter;\r\n\t\t\tvar index: number = Math.floor(counter / 32);\r\n\t\t\tvar value: number = 1 << counter % 32;\r\n\t\t\tdefine = new ShaderDefine(index, value);\r\n\t\t\tShader3D._defineMap[name] = define;\r\n\t\t\tif (index == maskMap.length) {\r\n\t\t\t\tmaskMap.length++;\r\n\t\t\t\tmaskMap[index] = {};\r\n\t\t\t}\r\n\t\t\tmaskMap[index][value] = name;\r\n\t\t\tShader3D._defineCounter++;\r\n\t\t}\r\n\t\treturn define;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 通过Shader属性名称获得唯一ID。\r\n\t * @param name Shader属性名称。\r\n\t * @return 唯一ID。\r\n\t */\r\n\tstatic propertyNameToID(name: string): number {\r\n\t\tif (Shader3D._propertyNameMap[name] != null) {\r\n\t\t\treturn Shader3D._propertyNameMap[name];\r\n\t\t} else {\r\n\t\t\tvar id: number = Shader3D._propertyNameCounter++;\r\n\t\t\tShader3D._propertyNameMap[name] = id;\r\n\t\t\treturn id;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 通过宏属性动态修改AttributeMap\r\n\t * @param defineString \r\n\t * @param attributeMap \r\n\t */\r\n\tstatic getAttributeMapByDefine(defineString:string[],attributeMap:any):any{\r\n\t\tvar newAttributeMap:any = {};\r\n\t\tfor(var value in attributeMap){\r\n\t\t\tnewAttributeMap[value] = attributeMap[value];\r\n\t\t}\t\r\n\t\tfor ( var i = 0, n: number = defineString.length; i < n; i++) {\r\n\t\t\tvar def: string = defineString[i];\r\n\t\t\tswitch(def){\r\n\t\t\t\tcase \"SIMPLEBONE\":\r\n\t\t\t\tif(attributeMap[\"a_Texcoord1\"]){\r\n\t\t\t\t\tnewAttributeMap[\"a_SimpleTextureParams\"] = attributeMap[\"a_Texcoord1\"];\r\n\t\t\t\t\tdelete newAttributeMap[\"a_Texcoord1\"];\r\n\t\t\t\t}\r\n\t\t\t\tnewAttributeMap[\"a_SimpleTextureParams\"] = 7;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn newAttributeMap;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加函数库引用。\r\n\t * @param fileName 文件名字。\r\n\t * @param txt 文件内容\r\n\t */\r\n\tstatic addInclude(fileName: string, txt: string): void {\r\n\t\ttxt = txt.replace(ShaderCompile._clearCR, \"\");//CRLF风格需要先去掉“\\r\",否则切分字符会出错导致宏定义编译错误等\r\n\t\tShaderCompile.addInclude(fileName, txt);\r\n\t}\r\n\r\n\t/**\r\n\t * 通过宏定义名字编译shader。\r\n\t * @param\tshaderName Shader名称。\r\n\t * @param   subShaderIndex 子着色器索引。\r\n\t * @param   passIndex  通道索引。\r\n\t * @param\tdefineNames 宏定义名字集合。\r\n\t */\r\n\tstatic compileShaderByDefineNames(shaderName: string, subShaderIndex: number, passIndex: number, defineNames: string[]): void {\r\n\t\tvar shader: Shader3D = Shader3D.find(shaderName);\r\n\t\tif (shader) {\r\n\t\t\tvar subShader: SubShader = shader.getSubShaderAt(subShaderIndex);\r\n\t\t\tif (subShader) {\r\n\t\t\t\tvar pass: ShaderPass = subShader._passes[passIndex];\r\n\t\t\t\tif (pass) {\r\n\t\t\t\t\tvar compileDefineDatas: DefineDatas = Shader3D._compileDefineDatas;\r\n\t\t\t\t\tcompileDefineDatas.clear();\r\n\t\t\t\t\tfor (var i: number = 0, n: number = defineNames.length; i < n; i++)\r\n\t\t\t\t\t\tcompileDefineDatas.add(Shader3D.getDefineByName(defineNames[i]));\r\n\t\t\t\t\tpass.withCompile(compileDefineDatas);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn(\"Shader3D: unknown passIndex.\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconsole.warn(\"Shader3D: unknown subShaderIndex.\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Shader3D: unknown shader name.\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 添加预编译shader文件，主要是处理宏定义\r\n\t */\r\n\tstatic add(name: string, attributeMap: any = null, uniformMap: any = null, enableInstancing: boolean = false,supportReflectionProbe:boolean = false): Shader3D {\r\n\t\treturn Shader3D._preCompileShader[name] = new Shader3D(name, attributeMap, uniformMap, enableInstancing,supportReflectionProbe);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取ShaderCompile3D。\r\n\t * @param\tname\r\n\t * @return ShaderCompile3D。\r\n\t */\r\n\tstatic find(name: string): Shader3D {\r\n\t\treturn Shader3D._preCompileShader[name];\r\n\t}\r\n\r\n\t/**@internal */\r\n\t_name: string;\r\n\t/**@internal */\r\n\t_enableInstancing: boolean = false;\r\n\t/**@internal */\r\n\t_supportReflectionProbe:boolean = false;\r\n\r\n\t/**@internal */\r\n\t_subShaders: SubShader[] = [];\r\n\r\n\t/**\r\n\t * 名字。\r\n\t */\r\n\tget name(): string {\r\n\t\treturn this._name;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Shader3D</code> 实例。\r\n\t */\r\n\tconstructor(name: string, attributeMap: any, uniformMap: any, enableInstancing: boolean, supportReflectionProbe:boolean) {\r\n\t\tthis._name = name;\r\n\t\tthis._attributeMap = attributeMap;\r\n\t\tthis._uniformMap = uniformMap;\r\n\t\tthis._enableInstancing = enableInstancing;\r\n\t\tthis._supportReflectionProbe = supportReflectionProbe;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加子着色器。\r\n\t * @param 子着色器。\r\n\t */\r\n\taddSubShader(subShader: SubShader): void {\r\n\t\tthis._subShaders.push(subShader);\r\n\t\tsubShader._owner = this;\r\n\t}\r\n\r\n\t/**\r\n\t * 在特定索引获取子着色器。\r\n\t * @param\tindex 索引。\r\n\t * @return 子着色器。\r\n\t */\r\n\tgetSubShaderAt(index: number): SubShader {\r\n\t\treturn this._subShaders[index];\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 通过宏定义遮罩编译shader,建议使用compileShaderByDefineNames。\r\n\t * @param\tshaderName Shader名称。\r\n\t * @param   subShaderIndex 子着色器索引。\r\n\t * @param   passIndex  通道索引。\r\n\t * @param\tdefineMask 宏定义遮罩集合。\r\n\t */\r\n\tstatic compileShader(shaderName: string, subShaderIndex: number, passIndex: number, ...defineMask): void {\r\n\t\tvar shader: Shader3D = Shader3D.find(shaderName);\r\n\t\tif (shader) {\r\n\t\t\tvar subShader: SubShader = shader.getSubShaderAt(subShaderIndex);\r\n\t\t\tif (subShader) {\r\n\t\t\t\tvar pass: ShaderPass = subShader._passes[passIndex];\r\n\t\t\t\tif (pass) {\r\n\t\t\t\t\tvar compileDefineDatas: DefineDatas = Shader3D._compileDefineDatas;\r\n\t\t\t\t\tvar mask: Array<number> = compileDefineDatas._mask;\r\n\t\t\t\t\tmask.length = 0;\r\n\t\t\t\t\tfor (var i: number = 0, n: number = defineMask.length; i < n; i++)\r\n\t\t\t\t\t\tmask.push(defineMask[i]);\r\n\t\t\t\t\tcompileDefineDatas._length = defineMask.length;\r\n\t\t\t\t\tpass.withCompile(compileDefineDatas);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn(\"Shader3D: unknown passIndex.\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconsole.warn(\"Shader3D: unknown subShaderIndex.\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Shader3D: unknown shader name.\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { BaseTexture } from \"../../resource/BaseTexture\";\r\nimport { Resource } from \"../../resource/Resource\";\r\nimport { IClone } from \"../core/IClone\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Quaternion } from \"../math/Quaternion\";\r\nimport { Vector2 } from \"../math/Vector2\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Vector4 } from \"../math/Vector4\";\r\nimport { DefineDatas } from \"./DefineDatas\";\r\nimport { ShaderDefine } from \"./ShaderDefine\";\r\nimport { Stat } from \"../../utils/Stat\";\r\n\r\n\r\n/**\r\n * 着色器数据类。\r\n */\r\nexport class ShaderData implements IClone {\r\n\t/**@internal */\r\n\tprivate _ownerResource: Resource = null;\r\n\t/**@internal */\r\n\tprivate _data: any = null;\r\n\r\n\t/** @internal */\r\n\t_defineDatas: DefineDatas = new DefineDatas();\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tconstructor(ownerResource: Resource = null) {\r\n\t\tthis._ownerResource = ownerResource;\r\n\t\tthis._initData();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_initData(): void {\r\n\t\tthis._data = new Object();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetData(): any {\r\n\t\treturn this._data;\r\n\t}\r\n\r\n\t/**\r\n\t * 增加Shader宏定义。\r\n\t * @param value 宏定义。\r\n\t */\r\n\taddDefine(define: ShaderDefine): void {\r\n\t\tthis._defineDatas.add(define);\r\n\t}\r\n\r\n\t/**\r\n\t * 移除Shader宏定义。\r\n\t * @param value 宏定义。\r\n\t */\r\n\tremoveDefine(define: ShaderDefine): void {\r\n\t\tthis._defineDatas.remove(define);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否包含Shader宏定义。\r\n\t * @param value 宏定义。\r\n\t */\r\n\thasDefine(define: ShaderDefine): boolean {\r\n\t\treturn this._defineDatas.has(define);\r\n\t}\r\n\r\n\t/**\r\n\t * 清空宏定义。\r\n\t */\r\n\tclearDefine(): void {\r\n\t\tthis._defineDatas.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * 获取布尔。\r\n\t * @param\tindex shader索引。\r\n\t * @return  布尔。\r\n\t */\r\n\tgetBool(index: number): boolean {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置布尔。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue 布尔。\r\n\t */\r\n\tsetBool(index: number, value: boolean): void {\r\n\t\tthis._data[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取整形。\r\n\t * @param\tindex shader索引。\r\n\t * @return  整形。\r\n\t */\r\n\tgetInt(index: number): number {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置整型。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue 整形。\r\n\t */\r\n\tsetInt(index: number, value: number): void {\r\n\t\tthis._data[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取浮点。\r\n\t * @param\tindex shader索引。\r\n\t * @return  浮点。\r\n\t */\r\n\tgetNumber(index: number): number {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置浮点。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue 浮点。\r\n\t */\r\n\tsetNumber(index: number, value: number): void {\r\n\t\tthis._data[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取Vector2向量。\r\n\t * @param\tindex shader索引。\r\n\t * @return Vector2向量。\r\n\t */\r\n\tgetVector2(index: number): Vector2 {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置Vector2向量。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue Vector2向量。\r\n\t */\r\n\tsetVector2(index: number, value: Vector2): void {\r\n\t\tthis._data[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取Vector3向量。\r\n\t * @param\tindex shader索引。\r\n\t * @return Vector3向量。\r\n\t */\r\n\tgetVector3(index: number): Vector3 {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置Vector3向量。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue Vector3向量。\r\n\t */\r\n\tsetVector3(index: number, value: Vector3): void {\r\n\t\tthis._data[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色。\r\n\t * @param\tindex shader索引。\r\n\t * @return 颜色向量。\r\n\t */\r\n\tgetVector(index: number): Vector4 {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置向量。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue 向量。\r\n\t */\r\n\tsetVector(index: number, value: Vector4): void {\r\n\t\tthis._data[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取四元数。\r\n\t * @param\tindex shader索引。\r\n\t * @return 四元。\r\n\t */\r\n\tgetQuaternion(index: number): Quaternion {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置四元数。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue 四元数。\r\n\t */\r\n\tsetQuaternion(index: number, value: Quaternion): void {\r\n\t\tthis._data[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取矩阵。\r\n\t * @param\tindex shader索引。\r\n\t * @return  矩阵。\r\n\t */\r\n\tgetMatrix4x4(index: number): Matrix4x4 {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置矩阵。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue  矩阵。\r\n\t */\r\n\tsetMatrix4x4(index: number, value: Matrix4x4): void {\r\n\t\tthis._data[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取Buffer。\r\n\t * @param\tindex shader索引。\r\n\t * @return\r\n\t */\r\n\tgetBuffer(shaderIndex: number): Float32Array {\r\n\t\treturn this._data[shaderIndex];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置Buffer。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue  buffer数据。\r\n\t */\r\n\tsetBuffer(index: number, value: Float32Array): void {\r\n\t\tthis._data[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置纹理。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue 纹理。\r\n\t */\r\n\tsetTexture(index: number, value: BaseTexture): void {\r\n\t\tvar lastValue: BaseTexture = this._data[index];\r\n\t\tthis._data[index] = value;\r\n\t\tif (this._ownerResource && this._ownerResource.referenceCount > 0) {\r\n\t\t\t(lastValue) && (lastValue._removeReference());\r\n\t\t\t(value) && (value._addReference());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理。\r\n\t * @param\tindex shader索引。\r\n\t * @return  纹理。\r\n\t */\r\n\tgetTexture(index: number): BaseTexture {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置Attribute。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue 纹理。\r\n\t */\r\n\tsetAttribute(index: number, value: Int32Array): void {\r\n\t\tthis._data[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取Attribute。\r\n\t * @param\tindex shader索引。\r\n\t * @return  纹理。\r\n\t */\r\n\tgetAttribute(index: number): any[] {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取长度。\r\n\t * @return 长度。\r\n\t */\r\n\tgetLength(): number {\r\n\t\treturn this._data.length;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置长度。\r\n\t * @param 长度。\r\n\t */\r\n\tsetLength(value: number): void {\r\n\t\tthis._data.length = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar dest: ShaderData = <ShaderData>destObject;\r\n\t\tvar destData: any[] = dest._data;\r\n\t\tfor (var k in this._data) {//TODO:需要优化,杜绝is判断，慢\r\n\t\t\tvar value: any = this._data[k];\r\n\t\t\tif (value != null) {\r\n\t\t\t\tif (typeof (value) == 'number') {\r\n\t\t\t\t\tdestData[k] = value;\r\n\t\t\t\t} else if (typeof (value) == 'number') {\r\n\t\t\t\t\tdestData[k] = value;\r\n\t\t\t\t} else if (typeof (value) == \"boolean\") {\r\n\t\t\t\t\tdestData[k] = value;\r\n\t\t\t\t} else if (value instanceof Vector2) {\r\n\t\t\t\t\tvar v2: Vector2 = (destData[k]) || (destData[k] = new Vector2());\r\n\t\t\t\t\t((<Vector2>value)).cloneTo(v2);\r\n\t\t\t\t\tdestData[k] = v2;\r\n\t\t\t\t} else if (value instanceof Vector3) {\r\n\t\t\t\t\tvar v3: Vector3 = (destData[k]) || (destData[k] = new Vector3());\r\n\t\t\t\t\t((<Vector3>value)).cloneTo(v3);\r\n\t\t\t\t\tdestData[k] = v3;\r\n\t\t\t\t} else if (value instanceof Vector4) {\r\n\t\t\t\t\tvar v4: Vector4 = (destData[k]) || (destData[k] = new Vector4());\r\n\t\t\t\t\t((<Vector4>value)).cloneTo(v4);\r\n\t\t\t\t\tdestData[k] = v4;\r\n\t\t\t\t} else if (value instanceof Matrix4x4) {\r\n\t\t\t\t\tvar mat: Matrix4x4 = (destData[k]) || (destData[k] = new Matrix4x4());\r\n\t\t\t\t\t((<Matrix4x4>value)).cloneTo(mat);\r\n\t\t\t\t\tdestData[k] = mat;\r\n\t\t\t\t} else if (value instanceof BaseTexture) {\r\n\t\t\t\t\tdestData[k] = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._defineDatas.cloneTo(dest._defineDatas);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: ShaderData = new ShaderData();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t//------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\t/**@internal [NATIVE]*/\r\n\tprivate _int32Data: Int32Array;\r\n\t/**@internal [NATIVE]*/\r\n\tprivate _float32Data: Float32Array;\r\n\t/**@internal [NATIVE]*/\r\n\t_nativeArray: any[];\r\n\t/**@internal [NATIVE]*/\r\n\t_frameCount: number;\r\n\t/**@internal [NATIVE]*/\r\n\tstatic _SET_RUNTIME_VALUE_MODE_REFERENCE_: boolean = true;\r\n\t/**@internal [NATIVE]*/\r\n\t_runtimeCopyValues: any[] = [];\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneToForNative(destObject: any): void {\r\n\t\tvar dest: ShaderData = (<ShaderData>destObject);\r\n\r\n\t\tvar diffSize: number = this._int32Data.length - dest._int32Data.length;\r\n\t\tif (diffSize > 0) {\r\n\t\t\tdest.needRenewArrayBufferForNative(this._int32Data.length);\r\n\t\t}\r\n\r\n\t\tdest._int32Data.set(this._int32Data, 0);\r\n\t\tvar destData: any[] = dest._nativeArray;\r\n\t\tvar dataCount: number = this._nativeArray.length;\r\n\t\tdestData.length = dataCount;//TODO:runtime\r\n\t\tfor (var i: number = 0; i < dataCount; i++) {//TODO:需要优化,杜绝is判断，慢\r\n\t\t\tvar value: any = this._nativeArray[i];\r\n\t\t\tif (value) {\r\n\t\t\t\tif (typeof (value) == 'number') {\r\n\t\t\t\t\tdestData[i] = value;\r\n\t\t\t\t\tdest.setNumber(i, value);\r\n\t\t\t\t} else if (typeof (value) == 'number') {\r\n\t\t\t\t\tdestData[i] = value;\r\n\t\t\t\t\tdest.setInt(i, value);\r\n\t\t\t\t} else if (typeof (value) == \"boolean\") {\r\n\t\t\t\t\tdestData[i] = value;\r\n\t\t\t\t\tdest.setBool(i, value);\r\n\t\t\t\t} else if (value instanceof Vector2) {\r\n\t\t\t\t\tvar v2: Vector2 = (destData[i]) || (destData[i] = new Vector2());\r\n\t\t\t\t\t((<Vector2>value)).cloneTo(v2);\r\n\t\t\t\t\tdestData[i] = v2;\r\n\t\t\t\t\tdest.setVector2(i, v2);\r\n\t\t\t\t} else if (value instanceof Vector3) {\r\n\t\t\t\t\tvar v3: Vector3 = (destData[i]) || (destData[i] = new Vector3());\r\n\t\t\t\t\t((<Vector3>value)).cloneTo(v3);\r\n\t\t\t\t\tdestData[i] = v3;\r\n\t\t\t\t\tdest.setVector3(i, v3);\r\n\t\t\t\t} else if (value instanceof Vector4) {\r\n\t\t\t\t\tvar v4: Vector4 = (destData[i]) || (destData[i] = new Vector4());\r\n\t\t\t\t\t((<Vector4>value)).cloneTo(v4);\r\n\t\t\t\t\tdestData[i] = v4;\r\n\t\t\t\t\tdest.setVector(i, v4);\r\n\t\t\t\t} else if (value instanceof Matrix4x4) {\r\n\t\t\t\t\tvar mat: Matrix4x4 = (destData[i]) || (destData[i] = new Matrix4x4());\r\n\t\t\t\t\t((<Matrix4x4>value)).cloneTo(mat);\r\n\t\t\t\t\tdestData[i] = mat;\r\n\t\t\t\t\tdest.setMatrix4x4(i, mat);\r\n\t\t\t\t} else if (value instanceof BaseTexture) {\r\n\t\t\t\t\tdestData[i] = value;\r\n\t\t\t\t\tdest.setTexture(i, value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._defineDatas.cloneTo(dest._defineDatas);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal [NATIVE]\r\n\t */\r\n\t_initDataForNative(): void {\r\n\t\tvar length: number = 8;//默认分配8个\r\n\t\tif (!length) {\r\n\t\t\talert(\"ShaderData _initDataForNative error length=0\");\r\n\t\t}\r\n\t\tthis._frameCount = -1;\r\n\t\tthis._runtimeCopyValues.length = 0;\r\n\t\tthis._nativeArray = [];\r\n\t\tthis._data = new ArrayBuffer(length * 4);\r\n\t\tthis._int32Data = new Int32Array(this._data);\r\n\t\tthis._float32Data = new Float32Array(this._data);\r\n\t\t(<any>LayaGL.instance).createArrayBufferRef(this._data, LayaGL.ARRAY_BUFFER_TYPE_DATA, true);\r\n\t}\r\n\r\n\tneedRenewArrayBufferForNative(index: number): void {\r\n\t\tif (index >= this._int32Data.length) {\r\n\t\t\tvar nByteLen: number = (index + 1) * 4;\r\n\t\t\tvar pre: Int32Array = this._int32Data;\r\n\t\t\tvar preConchRef: any = this._data[\"conchRef\"];\r\n\t\t\tvar prePtrID: number = this._data[\"_ptrID\"];\r\n\t\t\tthis._data = new ArrayBuffer(nByteLen);\r\n\t\t\tthis._int32Data = new Int32Array(this._data);\r\n\t\t\tthis._float32Data = new Float32Array(this._data);\r\n\t\t\tthis._data[\"conchRef\"] = preConchRef;\r\n\t\t\tthis._data[\"_ptrID\"] = prePtrID;\r\n\t\t\tpre && this._int32Data.set(pre, 0);\r\n\t\t\tvar layagl:any = LayaGL.instance;\r\n\t\t\tif(layagl.updateArrayBufferRef)\r\n\t\t\t{\r\n\t\t\t\tlayagl.updateArrayBufferRef(this._data['_ptrID'], preConchRef.isSyncToRender(), this._data);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t(<any>window).conch.updateArrayBufferRef(this._data['_ptrID'], preConchRef.isSyncToRender(), this._data);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetDataForNative(): any[] {//[NATIVE]\r\n\t\treturn this._nativeArray;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tgetIntForNative(index: number): number {//[NATIVE]\r\n\t\treturn this._int32Data[index];\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tsetIntForNative(index: number, value: number): void {//[NATIVE]\r\n\t\tthis.needRenewArrayBufferForNative(index);\r\n\t\tthis._int32Data[index] = value;\r\n\t\tthis._nativeArray[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tgetBoolForNative(index: number): boolean {//[NATIVE]\r\n\t\treturn this._int32Data[index] == 1;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tsetBoolForNative(index: number, value: boolean): void {//[NATIVE]\r\n\t\tthis.needRenewArrayBufferForNative(index);\r\n\t\tthis._int32Data[index] = value ? 1 : 0;\r\n\t\tthis._nativeArray[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tgetNumberForNative(index: number): number {//[NATIVE]\r\n\t\treturn this._float32Data[index];\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tsetNumberForNative(index: number, value: number): void {//[NATIVE]\r\n\t\tthis.needRenewArrayBufferForNative(index);\r\n\t\tthis._float32Data[index] = value;\r\n\t\tthis._nativeArray[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tgetMatrix4x4ForNative(index: number): Matrix4x4 {//[NATIVE]\r\n\t\treturn this._nativeArray[index];\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tsetMatrix4x4ForNative(index: number, value: Matrix4x4): void {//[NATIVE]\r\n\t\tthis.needRenewArrayBufferForNative(index);\r\n\t\tthis._nativeArray[index] = value;//保存引用\r\n\t\tvar nPtrID: number = this.setReferenceForNative(value.elements);\r\n\t\tthis._int32Data[index] = nPtrID;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tgetVectorForNative(index: number): any {//[NATIVE]\r\n\t\treturn this._nativeArray[index];\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tsetVectorForNative(index: number, value: any): void {//[NATIVE]\r\n\t\tthis.needRenewArrayBufferForNative(index);\r\n\t\tthis._nativeArray[index] = value;//保存引用\r\n\t\tif (!value.elements) {\r\n\t\t\tvalue.forNativeElement();\r\n\t\t}\r\n\t\tvar nPtrID: number = this.setReferenceForNative(value.elements);\r\n\t\tthis._int32Data[index] = nPtrID;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tgetVector2ForNative(index: number): any {//[NATIVE]\r\n\t\treturn this._nativeArray[index];\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tsetVector2ForNative(index: number, value: any): void {//[NATIVE]\r\n\t\tthis.needRenewArrayBufferForNative(index);\r\n\t\tthis._nativeArray[index] = value;//保存引用\r\n\t\tif (!value.elements) {\r\n\t\t\tvalue.forNativeElement();\r\n\t\t}\r\n\t\tvar nPtrID: number = this.setReferenceForNative(value.elements);\r\n\t\tthis._int32Data[index] = nPtrID;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tgetVector3ForNative(index: number): any {//[NATIVE]\r\n\t\treturn this._nativeArray[index];\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tsetVector3ForNative(index: number, value: any): void {//[NATIVE]\r\n\t\tthis.needRenewArrayBufferForNative(index);\r\n\t\tthis._nativeArray[index] = value;//保存引用\r\n\t\tif (!value.elements) {\r\n\t\t\tvalue.forNativeElement();\r\n\t\t}\r\n\t\tvar nPtrID: number = this.setReferenceForNative(value.elements);\r\n\t\tthis._int32Data[index] = nPtrID;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tgetQuaternionForNative(index: number): Quaternion {//[NATIVE]\r\n\t\treturn this._nativeArray[index];\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tsetQuaternionForNative(index: number, value: any): void {//[NATIVE]\r\n\t\tthis.needRenewArrayBufferForNative(index);\r\n\t\tthis._nativeArray[index] = value;//保存引用\r\n\t\tif (!value.elements) {\r\n\t\t\tvalue.forNativeElement();\r\n\t\t}\r\n\t\tvar nPtrID: number = this.setReferenceForNative(value.elements);\r\n\t\tthis._int32Data[index] = nPtrID;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tgetBufferForNative(shaderIndex: number): Float32Array {//[NATIVE]\r\n\t\treturn this._nativeArray[shaderIndex];\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tsetBufferForNative(index: number, value: Float32Array): void {//[NATIVE]\r\n\t\tthis.needRenewArrayBufferForNative(index);\r\n\t\tthis._nativeArray[index] = value;//保存引用\r\n\t\tvar nPtrID: number = this.setReferenceForNative(value);\r\n\t\tthis._int32Data[index] = nPtrID;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tgetAttributeForNative(index: number): any[] {//[NATIVE]\r\n\t\treturn this._nativeArray[index];\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tsetAttributeForNative(index: number, value: Int32Array): void {//[NATIVE]\r\n\t\tthis._nativeArray[index] = value;//保存引用\r\n\t\tif (!value[\"_ptrID\"]) {\r\n\t\t\t(<any>LayaGL.instance).createArrayBufferRef(value, LayaGL.ARRAY_BUFFER_TYPE_DATA, true);\r\n\t\t}\r\n\t\t(<any>LayaGL.instance).syncBufferToRenderThread(value);\r\n\t\tthis._int32Data[index] = value[\"_ptrID\"];\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tgetTextureForNative(index: number): BaseTexture {//[NATIVE]\r\n\t\treturn this._nativeArray[index];\r\n\t}\r\n\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\tsetTextureForNative(index: number, value: BaseTexture): void {//[NATIVE]\r\n\t\tif (!value) return;\r\n\t\tthis.needRenewArrayBufferForNative(index);\r\n\t\tvar lastValue: BaseTexture = this._nativeArray[index];\r\n\t\tthis._nativeArray[index] = value;//保存引用\r\n\t\tvar glTexture: any = value._getSource() || value.defaulteTexture._getSource();\r\n\t\tthis._int32Data[index] = ((<any>glTexture)).id;\r\n\t\tif (this._ownerResource && this._ownerResource.referenceCount > 0) {\r\n\t\t\t(lastValue) && (lastValue._removeReference());\r\n\t\t\t(value) && (value._addReference());\r\n\t\t}\r\n\t}\r\n\r\n\tsetReferenceForNative(value: any): number {//[NATIVE]\r\n\t\t//清空保存的数据\r\n\t\tthis.clearRuntimeCopyArray();\r\n\t\tvar nRefID: number = 0;\r\n\t\tvar nPtrID: number = 0;\r\n\t\tif (ShaderData._SET_RUNTIME_VALUE_MODE_REFERENCE_) {\r\n\t\t\t(<any>LayaGL.instance).createArrayBufferRefs(value, LayaGL.ARRAY_BUFFER_TYPE_DATA, true, LayaGL.ARRAY_BUFFER_REF_REFERENCE);\r\n\t\t\tnRefID = 0;\r\n\t\t\tnPtrID = value.getPtrID(nRefID);\r\n\t\t} else {\r\n\t\t\t(<any>LayaGL.instance).createArrayBufferRefs(value, LayaGL.ARRAY_BUFFER_TYPE_DATA, true, LayaGL.ARRAY_BUFFER_REF_COPY);\r\n\t\t\tnRefID = value.getRefNum() - 1;\r\n\t\t\tnPtrID = value.getPtrID(nRefID);\r\n\t\t\t//TODO 应该只用到value\r\n\t\t\tthis._runtimeCopyValues.push({ \"obj\": value, \"refID\": nRefID, \"ptrID\": nPtrID });\r\n\t\t}\r\n\t\t(<any>LayaGL.instance).syncBufferToRenderThread(value, nRefID);\r\n\t\treturn nPtrID;\r\n\t}\r\n\r\n\tstatic setRuntimeValueMode(bReference: boolean): void {//[NATIVE]\r\n\t\tShaderData._SET_RUNTIME_VALUE_MODE_REFERENCE_ = bReference;\r\n\t}\r\n\r\n\tclearRuntimeCopyArray(): void {\r\n\t\tvar currentFrame: number = Stat.loopCount;\r\n\t\tif (this._frameCount != currentFrame) {\r\n\t\t\tthis._frameCount = currentFrame;\r\n\t\t\tfor (var i: number = 0, n: number = this._runtimeCopyValues.length; i < n; i++) {\r\n\t\t\t\tvar obj: any = this._runtimeCopyValues[i];\r\n\t\t\t\tobj.obj.clearRefNum();\r\n\t\t\t}\r\n\t\t\tthis._runtimeCopyValues.length = 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { ILaya } from \"../../../ILaya\"\r\nimport { RenderTextureDepthFormat } from \"../../resource/RenderTextureFormat\"\r\nimport { Texture2D } from \"../../resource/Texture2D\"\r\nimport { Camera } from \"../core/Camera\"\r\nimport { CommandBuffer } from \"../core/render/command/CommandBuffer\"\r\nimport { PostProcessEffect } from \"../core/render/PostProcessEffect\"\r\nimport { PostProcessRenderContext } from \"../core/render/PostProcessRenderContext\"\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\"\r\nimport { RenderTexture } from \"../resource/RenderTexture\"\r\nimport { Shader3D } from \"../shader/Shader3D\"\r\nimport { ShaderData } from \"../shader/ShaderData\"\r\nimport { ShaderDefine } from \"../shader/ShaderDefine\"\r\nimport { Vector4 } from \"../math/Vector4\"\r\nimport { Viewport } from \"../math/Viewport\"\r\n\r\n/**\r\n * <code>PostProcess</code> 类用于创建后期处理组件。\r\n */\r\nexport class PostProcess {\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_BLOOM_LOW: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_BLOOM: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_FINALPASS: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_MAINTEX: number = Shader3D.propertyNameToID(\"u_MainTex\");\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_BLOOMTEX: number = Shader3D.propertyNameToID(\"u_BloomTex\");\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_AUTOEXPOSURETEX: number = Shader3D.propertyNameToID(\"u_AutoExposureTex\");\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_BLOOM_DIRTTEX: number = Shader3D.propertyNameToID(\"u_Bloom_DirtTex\");\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_BLOOMTEX_TEXELSIZE: number = Shader3D.propertyNameToID(\"u_BloomTex_TexelSize\");\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_BLOOM_DIRTTILEOFFSET: number = Shader3D.propertyNameToID(\"u_Bloom_DirtTileOffset\");\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_BLOOM_SETTINGS: number = Shader3D.propertyNameToID(\"u_Bloom_Settings\");\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_BLOOM_COLOR: number = Shader3D.propertyNameToID(\"u_Bloom_Color\");\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tPostProcess.SHADERDEFINE_BLOOM_LOW = Shader3D.getDefineByName(\"BLOOM_LOW\");\r\n\t\tPostProcess.SHADERDEFINE_BLOOM = Shader3D.getDefineByName(\"BLOOM\");\r\n\t\tPostProcess.SHADERDEFINE_FINALPASS = Shader3D.getDefineByName(\"FINALPASS\");\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _compositeShader: Shader3D = Shader3D.find(\"PostProcessComposite\");\r\n\t/**@internal */\r\n\tprivate _compositeShaderData: ShaderData = new ShaderData();\r\n\t/**@internal */\r\n\tprivate _effects: PostProcessEffect[] = [];\r\n\r\n\t/**@internal */\r\n\t_context: PostProcessRenderContext = null;\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>PostProcess</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._context = new PostProcessRenderContext();\r\n\t\tthis._context.compositeShaderData = this._compositeShaderData;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\t_init(camera: Camera, command: CommandBuffer): void {\r\n\t\tthis._context.camera = camera;\r\n\t\tthis._context.command = command;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_render(): void {\r\n\t\tvar noteValue: boolean = ShaderData._SET_RUNTIME_VALUE_MODE_REFERENCE_;\r\n\t\tILaya.Render.supportWebGLPlusRendering && ShaderData.setRuntimeValueMode(false);\r\n\r\n\t\tvar camera: Camera = this._context.camera;\r\n\t\tvar viewport: Viewport = camera.viewport;\r\n\r\n\t\tvar screenTexture: RenderTexture = RenderTexture.createFromPool(RenderContext3D.clientWidth, RenderContext3D.clientHeight, camera._getRenderTextureFormat(), RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\r\n\t\tvar cameraTarget: RenderTexture = camera._internalRenderTexture;\r\n\t\tthis._context.command.clear();\r\n\t\tthis._context.source = screenTexture;\r\n\t\tthis._context.destination = cameraTarget;\r\n\t\tthis._context.compositeShaderData.clearDefine();\r\n\r\n\t\tthis._context.command.blitScreenTriangle(cameraTarget, screenTexture);\r\n\r\n\t\tthis._context.compositeShaderData.setTexture(PostProcess.SHADERVALUE_AUTOEXPOSURETEX, Texture2D.whiteTexture);//TODO:\r\n\r\n\t\tfor (var i: number = 0, n: number = this._effects.length; i < n; i++)\r\n\t\t\tthis._effects[i].render(this._context);\r\n\r\n\t\tthis._compositeShaderData.addDefine(PostProcess.SHADERDEFINE_FINALPASS);\r\n\t\t//dithering.Render(context);\r\n\r\n\t\tvar offScreenTex: RenderTexture = camera._offScreenRenderTexture;\r\n\t\tvar dest: RenderTexture = offScreenTex ? offScreenTex : null;//TODO:如果不画到RenderTarget上,最后一次为null直接画到屏幕上\r\n\t\tthis._context.destination = dest;\r\n\t\tvar canvasWidth: number = camera._getCanvasWidth(), canvasHeight: number = camera._getCanvasHeight();\r\n\t\tcamera._screenOffsetScale.setValue(viewport.x / canvasWidth, viewport.y / canvasHeight, viewport.width / canvasWidth, viewport.height / canvasHeight);\r\n\t\tthis._context.command.blitScreenTriangle(this._context.source, dest, camera._screenOffsetScale, this._compositeShader, this._compositeShaderData);\r\n\r\n\t\t//context.source = context.destination;\r\n\t\t//context.destination = finalDestination;\r\n\r\n\t\t//释放临时纹理\r\n\t\tRenderTexture.recoverToPool(screenTexture);\r\n\t\tvar tempRenderTextures: RenderTexture[] = this._context.deferredReleaseTextures;\r\n\t\tfor (i = 0, n = tempRenderTextures.length; i < n; i++)\r\n\t\t\tRenderTexture.recoverToPool(tempRenderTextures[i]);\r\n\t\ttempRenderTextures.length = 0;\r\n\r\n\t\tILaya.Render.supportWebGLPlusRendering && ShaderData.setRuntimeValueMode(noteValue);\r\n\t}\r\n\r\n\t/**\r\n\t * 添加后期处理效果。\r\n\t */\r\n\taddEffect(effect: PostProcessEffect): void {\r\n\t\tthis._effects.push(effect);\r\n\t}\r\n\r\n\t/**\r\n\t * 移除后期处理效果。\r\n\t */\r\n\tremoveEffect(effect: PostProcessEffect): void {\r\n\t\tvar index: number = this._effects.indexOf(effect);\r\n\t\tif (index !== -1)\r\n\t\t\tthis._effects.splice(index, 1);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { AnimationNode } from \"./AnimationNode\";\r\nimport { Quaternion } from \"../math/Quaternion\"\r\nimport { Vector3 } from \"../math/Vector3\"\r\nimport { Utils3D } from \"../utils/Utils3D\"\r\nimport { Event } from \"../../events/Event\"\r\nimport { EventDispatcher } from \"../../events/EventDispatcher\"\r\nimport { Render } from \"../../renders/Render\"\r\nimport { ConchQuaternion } from \"../math/Native/ConchQuaternion\"\r\nimport { ConchVector3 } from \"../math/Native/ConchVector3\"\r\n/**\r\n * <code>AnimationTransform3D</code> 类用于实现3D变换。\r\n */\r\nexport class AnimationTransform3D extends EventDispatcher {\r\n\tprivate static _tempVector3: Vector3 = new Vector3();\r\n\tprivate static _angleToRandin: number = 180 / Math.PI;\r\n\r\n\tprivate _localMatrix: Float32Array;\r\n\tprivate _worldMatrix: Float32Array;\r\n\tprivate _localPosition: Vector3;\r\n\tprivate _localRotation: Quaternion;\r\n\tprivate _localScale: Vector3;\r\n\tprivate _localQuaternionUpdate: boolean;\r\n\tprivate _locaEulerlUpdate: boolean;\r\n\tprivate _localUpdate: boolean;\r\n\tprivate _parent: AnimationTransform3D;\r\n\tprivate _children: AnimationTransform3D[];\r\n\r\n\t/**@internal */\r\n\t_localRotationEuler: Vector3;\r\n\t/**@internal */\r\n\t_owner: AnimationNode;\r\n\t/** @internal */\r\n\t_worldUpdate: boolean;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Transform3D</code> 实例。\r\n\t * @param owner 所属精灵。\r\n\t */\r\n\tconstructor(owner: AnimationNode, localPosition: Float32Array = null/*[NATIVE]*/, localRotation: Float32Array = null/*[NATIVE]*/, localScale: Float32Array = null/*[NATIVE]*/, worldMatrix: Float32Array = null/*[NATIVE]*/) {\r\n\t\tsuper();\r\n\t\tthis._owner = owner;\r\n\t\tthis._children = [];\r\n\r\n\t\tthis._localMatrix = new Float32Array(16);\r\n\t\tif (Render.supportWebGLPlusAnimation) {\r\n\t\t\t/*\r\n\t\t\t_localPosition = new Vector3(0,0,0);\r\n\t\t\t_localPosition.forNativeElement(localPosition);\r\n\t\t\t_localRotation = new Quaternion(0,0,0,1);\r\n\t\t\t_localRotation.forNativeElement(localRotation);\r\n\t\t\t_localScale = new Vector3(0,0,0);\r\n\t\t\t_localScale.forNativeElement(localScale);\r\n\t\t\t_worldMatrix = worldMatrix;\r\n\t\t\t*/\r\n\r\n\t\t\tthis._localPosition = new ConchVector3(0,0,0,localPosition) as any as Vector3;\r\n\t\t\tthis._localRotation = new ConchQuaternion(0,0,0,1,localRotation) as any as Quaternion;\r\n\t\t\tthis._localScale = new ConchVector3(0,0,0,localScale) as any as Vector3;\r\n\t\t\tthis._worldMatrix = worldMatrix;\r\n\t\t} else {\r\n\t\t\tthis._localPosition = new Vector3();\r\n\t\t\tthis._localRotation = new Quaternion();\r\n\t\t\tthis._localScale = new Vector3();\r\n\t\t\tthis._worldMatrix = new Float32Array(16);\r\n\t\t}\r\n\t\tthis._localQuaternionUpdate = false;\r\n\t\tthis._locaEulerlUpdate = false;\r\n\t\tthis._localUpdate = false;\r\n\t\tthis._worldUpdate = true;\r\n\t}\r\n\r\n\tprivate _getlocalMatrix(): Float32Array {\r\n\t\tif (this._localUpdate) {\r\n\t\t\tUtils3D._createAffineTransformationArray(this._localPosition, this._localRotation, this._localScale, this._localMatrix);\r\n\t\t\tthis._localUpdate = false;\r\n\t\t}\r\n\t\treturn this._localMatrix;\r\n\t}\r\n\r\n\tprivate _onWorldTransform(): void {\r\n\t\tif (!this._worldUpdate) {\r\n\t\t\tthis._worldUpdate = true;\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED);\r\n\t\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++)\r\n\t\t\t\tthis._children[i]._onWorldTransform();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget localPosition(): Vector3 {\r\n\t\treturn this._localPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset localPosition(value: Vector3) {\r\n\t\tthis._localPosition = value;\r\n\t\tthis._localUpdate = true;\r\n\t\tthis._onWorldTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget localRotation(): Quaternion {\r\n\t\tif (this._localQuaternionUpdate) {\r\n\t\t\tvar euler: Vector3 = this._localRotationEuler;\r\n\t\t\tQuaternion.createFromYawPitchRoll(euler.y / AnimationTransform3D._angleToRandin, euler.x / AnimationTransform3D._angleToRandin, euler.z / AnimationTransform3D._angleToRandin, this._localRotation);\r\n\t\t\tthis._localQuaternionUpdate = false;\r\n\t\t}\r\n\t\treturn this._localRotation;\r\n\t}\r\n\r\n\t/*\r\n\t * @internal\r\n\t */\r\n\tset localRotation(value: Quaternion) {\r\n\t\tthis._localRotation = value;\r\n\t\t//Utils3D.quaterionNormalize(_localRotation, _localRotation);\r\n\t\tthis._locaEulerlUpdate = true;\r\n\t\tthis._localQuaternionUpdate = false;\r\n\t\tthis._localUpdate = true;\r\n\t\tthis._onWorldTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget localScale(): Vector3 {\r\n\t\treturn this._localScale;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset localScale(value: Vector3) {\r\n\t\tthis._localScale = value;\r\n\t\tthis._localUpdate = true;\r\n\t\tthis._onWorldTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget localRotationEuler(): Vector3 {\r\n\t\tif (this._locaEulerlUpdate) {\r\n\t\t\tthis._localRotation.getYawPitchRoll(AnimationTransform3D._tempVector3);\r\n\t\t\tvar euler: Vector3 = AnimationTransform3D._tempVector3;\r\n\t\t\tvar localRotationEuler: Vector3 = this._localRotationEuler;\r\n\t\t\tlocalRotationEuler.x = euler.y * AnimationTransform3D._angleToRandin;\r\n\t\t\tlocalRotationEuler.y = euler.x * AnimationTransform3D._angleToRandin;\r\n\t\t\tlocalRotationEuler.z = euler.z * AnimationTransform3D._angleToRandin;\r\n\t\t\tthis._locaEulerlUpdate = false;\r\n\t\t}\r\n\t\treturn this._localRotationEuler;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset localRotationEuler(value: Vector3) {\r\n\t\tthis._localRotationEuler = value;\r\n\t\tthis._locaEulerlUpdate = false;\r\n\t\tthis._localQuaternionUpdate = true;\r\n\t\tthis._localUpdate = true;\r\n\t\tthis._onWorldTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * 获取世界矩阵。\r\n\t * @return\t世界矩阵。\r\n\t */\r\n\tgetWorldMatrix(): Float32Array {\r\n\t\tif (!Render.supportWebGLPlusAnimation && this._worldUpdate) {\r\n\t\t\tif (this._parent != null) {\r\n\t\t\t\tUtils3D.matrix4x4MultiplyFFF(this._parent.getWorldMatrix(), this._getlocalMatrix(), this._worldMatrix);\r\n\t\t\t} else {\r\n\t\t\t\tvar e: Float32Array = this._worldMatrix;//根节点的世界矩阵始终为单位矩阵。需使用Animator中的矩阵,否则移动Animator精灵无效\r\n\t\t\t\te[1] = e[2] = e[3] = e[4] = e[6] = e[7] = e[8] = e[9] = e[11] = e[12] = e[13] = e[14] = 0;\r\n\t\t\t\te[0] = e[5] = e[10] = e[15] = 1;\r\n\t\t\t}\r\n\t\t\tthis._worldUpdate = false;\r\n\t\t}\r\n\t\tif (Render.supportWebGLPlusAnimation && this._worldUpdate) {\r\n\t\t\tthis._worldUpdate = false;\r\n\t\t}\r\n\t\treturn this._worldMatrix;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置父3D变换。\r\n\t * @param\tvalue 父3D变换。\r\n\t */\r\n\tsetParent(value: AnimationTransform3D): void {\r\n\t\tif (this._parent !== value) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tvar parentChilds: AnimationTransform3D[] = this._parent._children;\r\n\t\t\t\tvar index: number = parentChilds.indexOf(this);\r\n\t\t\t\tparentChilds.splice(index, 1);\r\n\t\t\t}\r\n\t\t\tif (value) {\r\n\t\t\t\tvalue._children.push(this);\r\n\t\t\t\t(value) && (this._onWorldTransform());\r\n\t\t\t}\r\n\t\t\tthis._parent = value;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n","import { AnimationTransform3D } from \"./AnimationTransform3D\";\r\nimport { Avatar } from \"../core/Avatar\"\r\nimport { IClone } from \"../core/IClone\"\r\nimport { Quaternion } from \"../math/Quaternion\"\r\nimport { Vector3 } from \"../math/Vector3\"\r\n\r\n/**\r\n * <code>BoneNode</code> 类用于实现骨骼节点。\r\n */\r\nexport class AnimationNode implements IClone {\r\n\tprivate _children: AnimationNode[];\r\n\r\n\t/**@internal */\r\n\t_parent: AnimationNode;\r\n\t/**@internal [只读]*/\r\n\ttransform: AnimationTransform3D;\r\n\r\n\t/**节点名称。 */\r\n\tname: string;\r\n\r\n\t/**@internal\t[NATIVE]*/\r\n\t_worldMatrixIndex: number;\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>AnimationNode</code> 实例。\r\n\t */\r\n\tconstructor(localPosition: Float32Array = null/*[NATIVE]*/, localRotation: Float32Array = null/*[NATIVE]*/, localScale: Float32Array = null/*[NATIVE]*/, worldMatrix: Float32Array = null/*[NATIVE]*/) {\r\n\t\tthis._children = [];\r\n\t\tthis.transform = new AnimationTransform3D(this, localPosition, localRotation, localScale, worldMatrix);\r\n\t}\r\n\r\n\t/**\r\n\t * 添加子节点。\r\n\t * @param\tchild  子节点。\r\n\t */\r\n\taddChild(child: AnimationNode): void {\r\n\t\tchild._parent = this;\r\n\t\tchild.transform.setParent(this.transform);\r\n\t\tthis._children.push(child);\r\n\t}\r\n\r\n\t/**\r\n\t * 移除子节点。\r\n\t * @param\tchild 子节点。\r\n\t */\r\n\tremoveChild(child: AnimationNode): void {\r\n\t\tvar index: number = this._children.indexOf(child);\r\n\t\t(index !== -1) && (this._children.splice(index, 1));\r\n\t}\r\n\r\n\t/**\r\n\t * 根据名字获取子节点。\r\n\t * @param\tname 名字。\r\n\t */\r\n\tgetChildByName(name: string): AnimationNode {\r\n\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++) {\r\n\t\t\tvar child: AnimationNode = this._children[i];\r\n\t\t\tif (child.name === name)\r\n\t\t\t\treturn child;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * 根据索引获取子节点。\r\n\t * @param\tindex 索引。\r\n\t */\r\n\tgetChildByIndex(index: number): AnimationNode {\r\n\t\treturn this._children[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取子节点的个数。\r\n\t */\r\n\tgetChildCount(): number {\r\n\t\treturn this._children.length;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destNode: AnimationNode = (<AnimationNode>destObject);\r\n\t\tdestNode.name = this.name;\r\n\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++) {\r\n\t\t\tvar child: AnimationNode = this._children[i];\r\n\t\t\tvar destChild: AnimationNode = child.clone();\r\n\t\t\tdestNode.addChild(destChild);\r\n\t\t\tvar transform: AnimationTransform3D = child.transform;\r\n\t\t\tvar destTransform: AnimationTransform3D = destChild.transform;\r\n\r\n\t\t\tvar destLocalPosition: Vector3 = destTransform.localPosition;\r\n\t\t\tvar destLocalRotation: Quaternion = destTransform.localRotation;\r\n\t\t\tvar destLocalScale: Vector3 = destTransform.localScale;\r\n\r\n\t\t\ttransform.localPosition.cloneTo(destLocalPosition);\r\n\t\t\ttransform.localRotation.cloneTo(destLocalRotation);\r\n\t\t\ttransform.localScale.cloneTo(destLocalScale);\r\n\r\n\t\t\tdestTransform.localPosition = destLocalPosition;//深拷贝\r\n\t\t\tdestTransform.localRotation = destLocalRotation;//深拷贝\r\n\t\t\tdestTransform.localScale = destLocalScale;//深拷贝\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: AnimationNode = new AnimationNode();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal [NATIVE]\r\n\t */\r\n\t_cloneNative(localPositions: Float32Array, localRotations: Float32Array, localScales: Float32Array, animationNodeWorldMatrixs: Float32Array, animationNodeParentIndices: Int16Array, parentIndex: number, avatar: Avatar): any {\r\n\t\tvar curID: number = avatar._nativeCurCloneCount;\r\n\t\tanimationNodeParentIndices[curID] = parentIndex;\r\n\t\tvar localPosition: Float32Array = new Float32Array(localPositions.buffer, curID * 3 * 4, 3);\r\n\t\tvar localRotation: Float32Array = new Float32Array(localRotations.buffer, curID * 4 * 4, 4);\r\n\t\tvar localScale: Float32Array = new Float32Array(localScales.buffer, curID * 3 * 4, 3);\r\n\t\tvar worldMatrix: Float32Array = new Float32Array(animationNodeWorldMatrixs.buffer, curID * 16 * 4, 16);\r\n\t\tvar dest: AnimationNode = new AnimationNode(localPosition, localRotation, localScale, worldMatrix);\r\n\t\tdest._worldMatrixIndex = curID;\r\n\t\tthis._cloneToNative(dest, localPositions, localRotations, localScales, animationNodeWorldMatrixs, animationNodeParentIndices, curID, avatar);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal [NATIVE]\r\n\t */\r\n\t_cloneToNative(destObject: any, localPositions: Float32Array, localRotations: Float32Array, localScales: Float32Array, animationNodeWorldMatrixs: Float32Array, animationNodeParentIndices: Int16Array, parentIndex: number, avatar: Avatar): void {\r\n\t\tvar destNode: AnimationNode = (<AnimationNode>destObject);\r\n\t\tdestNode.name = this.name;\r\n\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++) {\r\n\t\t\tvar child: AnimationNode = this._children[i];\r\n\t\t\tavatar._nativeCurCloneCount++;\r\n\t\t\tvar destChild: AnimationNode = child._cloneNative(localPositions, localRotations, localScales, animationNodeWorldMatrixs, animationNodeParentIndices, parentIndex, avatar);\r\n\t\t\tdestNode.addChild(destChild);\r\n\t\t\tvar transform: AnimationTransform3D = child.transform;\r\n\t\t\tvar destTransform: AnimationTransform3D = destChild.transform;\r\n\r\n\t\t\tvar destLocalPosition: Vector3 = destTransform.localPosition;\r\n\t\t\tvar destLocalRotation: Quaternion = destTransform.localRotation;\r\n\t\t\tvar destLocalScale: Vector3 = destTransform.localScale;\r\n\r\n\t\t\ttransform.localPosition.cloneTo(destLocalPosition);\r\n\t\t\ttransform.localRotation.cloneTo(destLocalRotation);\r\n\t\t\ttransform.localScale.cloneTo(destLocalScale);\r\n\r\n\t\t\tdestTransform.localPosition = destLocalPosition;//深拷贝\r\n\t\t\tdestTransform.localRotation = destLocalRotation;//深拷贝\r\n\t\t\tdestTransform.localScale = destLocalScale;//深拷贝\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"./IClone\";\r\nimport { AnimationNode } from \"../animation/AnimationNode\"\r\nimport { AnimationTransform3D } from \"../animation/AnimationTransform3D\"\r\nimport { Animator } from \"../component/Animator\"\r\nimport { Quaternion } from \"../math/Quaternion\"\r\nimport { Vector3 } from \"../math/Vector3\"\r\nimport { Render } from \"../../renders/Render\"\r\nimport { Resource } from \"../../resource/Resource\"\r\nimport { Handler } from \"../../utils/Handler\"\r\nimport { ILaya } from \"../../../ILaya\";\r\n/**\r\n * <code>Avatar</code> 类用于创建Avatar。\r\n */\r\nexport class Avatar extends Resource implements IClone {\r\n\t/**Avatar资源。*/\r\n\tstatic AVATAR: string = \"AVATAR\";\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tstatic _parse(data: any, propertyParams: any = null, constructParams: any[] = null): Avatar {\r\n\t\tvar avatar: Avatar = new Avatar();\r\n\t\tavatar._rootNode = new AnimationNode(new Float32Array(3), new Float32Array(4), new Float32Array(3), new Float32Array(16));//[NATIVE],需要优化\r\n\t\tif (Render.supportWebGLPlusAnimation)\r\n\t\t\tavatar._nativeNodeCount++;//[NATIVE]\r\n\t\tif (data.version) {\r\n\t\t\tvar rootNode: any = data.rootNode;\r\n\t\t\t(rootNode) && (avatar._parseNode(rootNode, avatar._rootNode));\r\n\t\t}\r\n\t\treturn avatar;\r\n\t}\r\n\r\n\t/**\r\n\t * 加载Avatar文件。\r\n\t * @param url Avatar文件。\r\n\t * @param complete 完成回掉。\r\n\t */\r\n\tstatic load(url: string, complete: Handler): void {\r\n\t\tILaya.loader.create(url, complete, null, Avatar.AVATAR);\r\n\t}\r\n\r\n\t/**@internal */\r\n\t_rootNode: AnimationNode;\r\n\r\n\t/** [NATIVE]*/\r\n\tprivate _nativeNodeCount: number = 0;\r\n\t/**@internal [NATIVE]*/\r\n\t_nativeCurCloneCount: number = 0;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Avatar</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\r\n\tprivate _initCloneToAnimator(destNode: AnimationNode, destAnimator: Animator): void {\r\n\t\tdestAnimator._avatarNodeMap[destNode.name] = destNode;\r\n\r\n\t\tfor (var i: number = 0, n: number = destNode.getChildCount(); i < n; i++)\r\n\t\t\tthis._initCloneToAnimator(destNode.getChildByIndex(i), destAnimator);\r\n\t}\r\n\r\n\tprivate _parseNode(nodaData: any, node: AnimationNode): void {\r\n\t\tvar name: string = nodaData.props.name;\r\n\t\tnode.name = name;\r\n\t\tvar props: any = nodaData.props;\r\n\t\tvar transform: AnimationTransform3D = node.transform;\r\n\t\tvar pos: Vector3 = transform.localPosition;\r\n\t\tvar rot: Quaternion = transform.localRotation;\r\n\t\tvar sca: Vector3 = transform.localScale;\r\n\t\tpos.fromArray(props.translate);\r\n\t\trot.fromArray(props.rotation);\r\n\t\tsca.fromArray(props.scale);\r\n\t\ttransform.localPosition = pos;\r\n\t\ttransform.localRotation = rot;\r\n\t\ttransform.localScale = sca;\r\n\r\n\t\tvar childrenData: any[] = nodaData.child;\r\n\t\tfor (var j: number = 0, n: number = childrenData.length; j < n; j++) {\r\n\t\t\tvar childData: any = childrenData[j];\r\n\t\t\tvar childBone: AnimationNode = new AnimationNode(new Float32Array(3), new Float32Array(4), new Float32Array(3), new Float32Array(16));//[NATIVE],需要优化\r\n\t\t\tnode.addChild(childBone);\r\n\t\t\tif (Render.supportWebGLPlusAnimation)\r\n\t\t\t\tthis._nativeNodeCount++;//[NATIVE]\r\n\t\t\tthis._parseNode(childData, childBone);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆数据到Avatr。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\t_cloneDatasToAnimator(destAnimator: Animator): void {\r\n\t\tvar destRoot: AnimationNode;\r\n\t\tdestRoot = this._rootNode.clone();\r\n\r\n\t\tvar transform: AnimationTransform3D = this._rootNode.transform;\r\n\t\tvar destTransform: AnimationTransform3D = destRoot.transform;\r\n\r\n\t\tvar destPosition: Vector3 = destTransform.localPosition;\r\n\t\tvar destRotation: Quaternion = destTransform.localRotation;\r\n\t\tvar destScale: Vector3 = destTransform.localScale;\r\n\t\ttransform.localPosition.cloneTo(destPosition);\r\n\t\ttransform.localRotation.cloneTo(destRotation);\r\n\t\ttransform.localScale.cloneTo(destScale);\r\n\t\tdestTransform.localPosition = destPosition;//深拷贝\r\n\t\tdestTransform.localRotation = destRotation;//深拷贝\r\n\t\tdestTransform.localScale = destScale;//深拷贝\r\n\r\n\t\tdestAnimator._avatarNodeMap = {};\r\n\t\tthis._initCloneToAnimator(destRoot, destAnimator);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destAvatar: Avatar = (<Avatar>destObject);\r\n\t\tvar destRoot: AnimationNode = this._rootNode.clone();\r\n\t\tdestAvatar._rootNode = destRoot;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: Avatar = new Avatar();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal [NATIVE]\r\n\t */\r\n\t_cloneDatasToAnimatorNative(destAnimator: Animator): void {\r\n\t\tvar animationNodeLocalPositions: Float32Array = new Float32Array(this._nativeNodeCount * 3);\r\n\t\tvar animationNodeLocalRotations: Float32Array = new Float32Array(this._nativeNodeCount * 4);\r\n\t\tvar animationNodeLocalScales: Float32Array = new Float32Array(this._nativeNodeCount * 3);\r\n\t\tvar animationNodeWorldMatrixs: Float32Array = new Float32Array(this._nativeNodeCount * 16);\r\n\t\tvar animationNodeParentIndices: Int16Array = new Int16Array(this._nativeNodeCount);\r\n\t\tdestAnimator._animationNodeLocalPositions = animationNodeLocalPositions;\r\n\t\tdestAnimator._animationNodeLocalRotations = animationNodeLocalRotations;\r\n\t\tdestAnimator._animationNodeLocalScales = animationNodeLocalScales;\r\n\t\tdestAnimator._animationNodeWorldMatrixs = animationNodeWorldMatrixs;\r\n\t\tdestAnimator._animationNodeParentIndices = animationNodeParentIndices;\r\n\t\tthis._nativeCurCloneCount = 0;\r\n\t\tvar destRoot: AnimationNode = this._rootNode._cloneNative(animationNodeLocalPositions, animationNodeLocalRotations, animationNodeLocalScales, animationNodeWorldMatrixs, animationNodeParentIndices, -1, this);\r\n\r\n\t\tvar transform: AnimationTransform3D = this._rootNode.transform;\r\n\t\tvar destTransform: AnimationTransform3D = destRoot.transform;\r\n\r\n\t\tvar destPosition: Vector3 = destTransform.localPosition;\r\n\t\tvar destRotation: Quaternion = destTransform.localRotation;\r\n\t\tvar destScale: Vector3 = destTransform.localScale;\r\n\t\ttransform.localPosition.cloneTo(destPosition);\r\n\t\ttransform.localRotation.cloneTo(destRotation);\r\n\t\ttransform.localScale.cloneTo(destScale);\r\n\t\tdestTransform.localPosition = destPosition;//深拷贝\r\n\t\tdestTransform.localRotation = destRotation;//深拷贝\r\n\t\tdestTransform.localScale = destScale;//深拷贝\r\n\r\n\t\tdestAnimator._avatarNodeMap = {};\r\n\t\tthis._initCloneToAnimator(destRoot, destAnimator);\r\n\t}\r\n}\r\n\r\n","import { Loader } from \"../../../net/Loader\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { Handler } from \"../../../utils/Handler\";\r\nimport { Vector2 } from \"../../math/Vector2\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { DefineDatas } from \"../../shader/DefineDatas\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { ShaderData } from \"../../shader/ShaderData\";\r\nimport { IClone } from \"../IClone\";\r\nimport { ClassUtils } from \"../../../utils/ClassUtils\";\r\nimport { Laya } from \"../../../../Laya\";\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\n\r\n/**\r\n * <code>Material</code> 类用于创建材质。\r\n */\r\nexport class Material extends Resource implements IClone {\r\n\t/**Material资源。*/\r\n\tstatic MATERIAL: string = \"MATERIAL\";\r\n\r\n\t/** 渲染队列_不透明。*/\r\n\tstatic RENDERQUEUE_OPAQUE: number = 2000;\r\n\t/** 渲染队列_阿尔法裁剪。*/\r\n\tstatic RENDERQUEUE_ALPHATEST: number = 2450;\r\n\t/** 渲染队列_透明。*/\r\n\tstatic RENDERQUEUE_TRANSPARENT: number = 3000;\r\n\r\n\t/**着色器变量,透明测试值。*/\r\n\tstatic ALPHATESTVALUE: number = Shader3D.propertyNameToID(\"u_AlphaTestValue\");\r\n\r\n\t/**材质级着色器宏定义,透明测试。*/\r\n\tstatic SHADERDEFINE_ALPHATEST: ShaderDefine = null;\r\n\r\n\t/**\r\n\t * 加载材质。\r\n\t * @param url 材质地址。\r\n\t * @param complete 完成回掉。\r\n\t */\r\n\tstatic load(url: string, complete: Handler): void {\r\n\t\tLaya.loader.create(url, complete, null, Material.MATERIAL);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tMaterial.SHADERDEFINE_ALPHATEST = Shader3D.getDefineByName(\"ALPHATEST\");\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tstatic _parse(data: any, propertyParams: any = null, constructParams: any[] = null): Material {\r\n\t\tvar jsonData: any = data;\r\n\t\tvar props: any = jsonData.props;\r\n\r\n\t\tvar material: Material;\r\n\t\tvar classType: string = props.type;\r\n\t\t//var clasPaths: any[] = classType.split('.');\r\n\t\t//var clas: new () => any = Browser.window;\r\n\t\t//clasPaths.forEach(function (cls: any): void {\r\n\t\t//\tclas = clas[cls];\r\n\t\t//});\r\n\t\tvar clas: any = ClassUtils.getRegClass(classType);\r\n\t\tif (clas)\r\n\t\t\tmaterial = new clas();\r\n\t\telse\r\n\t\t\tthrow ('_getSprite3DHierarchyInnerUrls 错误: ' + data.type + ' 不是类');\r\n\r\n\t\tswitch (jsonData.version) {\r\n\t\t\tcase \"LAYAMATERIAL:01\":\r\n\t\t\tcase \"LAYAMATERIAL:02\":\r\n\t\t\t\tvar i: number, n: number;\r\n\r\n\t\t\t\tfor (var key in props) {\r\n\t\t\t\t\tswitch (key) {\r\n\t\t\t\t\t\tcase \"type\":\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"vectors\":\r\n\t\t\t\t\t\t\tvar vectors: any[] = props[key];\r\n\t\t\t\t\t\t\tfor (i = 0, n = vectors.length; i < n; i++) {\r\n\t\t\t\t\t\t\t\tvar vector: any = vectors[i];\r\n\t\t\t\t\t\t\t\tvar vectorValue: any[] = vector.value;\r\n\t\t\t\t\t\t\t\tswitch (vectorValue.length) {\r\n\t\t\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t\t\tmaterial[vector.name] = new Vector2(vectorValue[0], vectorValue[1]);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\t\t\tmaterial[vector.name] = new Vector3(vectorValue[0], vectorValue[1], vectorValue[2]);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\t\t\tmaterial[vector.name] = new Vector4(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3]);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\tthrow new Error(\"BaseMaterial:unkonwn color length.\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"textures\":\r\n\t\t\t\t\t\t\tvar textures: any[] = props[key];\r\n\t\t\t\t\t\t\tfor (i = 0, n = textures.length; i < n; i++) {\r\n\t\t\t\t\t\t\t\tvar texture: any = textures[i];\r\n\t\t\t\t\t\t\t\tvar path: string = texture.path;\r\n\t\t\t\t\t\t\t\t(path) && (material[texture.name] = Loader.getRes(path));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"defines\":\r\n\t\t\t\t\t\t\tvar defineNames: any[] = props[key];\r\n\t\t\t\t\t\t\tfor (i = 0, n = defineNames.length; i < n; i++) {\r\n\t\t\t\t\t\t\t\tvar define: ShaderDefine = Shader3D.getDefineByName(defineNames[i]);//TODO:是否取消defines\r\n\t\t\t\t\t\t\t\tmaterial._shaderValues.addDefine(define);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"renderStates\"://\"LAYAMATERIAL:02\" \r\n\t\t\t\t\t\t\tvar renderStatesData: any[] = props[key];\r\n\t\t\t\t\t\t\tvar renderStateData: any = renderStatesData[0];\r\n\t\t\t\t\t\t\tvar mat: any = (<any>material);//TODO:临时兼容\r\n\t\t\t\t\t\t\tmat.blend = renderStateData.blend;\r\n\t\t\t\t\t\t\tmat.cull = renderStateData.cull;\r\n\t\t\t\t\t\t\tmat.depthTest = renderStateData.depthTest;\r\n\t\t\t\t\t\t\tmat.depthWrite = renderStateData.depthWrite;\r\n\t\t\t\t\t\t\tmat.blendSrc = renderStateData.srcBlend;\r\n\t\t\t\t\t\t\tmat.blendDst = renderStateData.dstBlend;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"cull\"://\"LAYAMATERIAL:01\"\r\n\t\t\t\t\t\t\t((<any>material)).cull = props[key];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"blend\"://\"LAYAMATERIAL:01\"\r\n\t\t\t\t\t\t\t((<any>material)).blend = props[key];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"depthWrite\"://\"LAYAMATERIAL:01\" \r\n\t\t\t\t\t\t\t((<any>material)).depthWrite = props[key];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"srcBlend\"://\"LAYAMATERIAL:01\" \r\n\t\t\t\t\t\t\t((<any>material)).blendSrc = props[key];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"dstBlend\"://\"LAYAMATERIAL:01\" \r\n\t\t\t\t\t\t\t((<any>material)).blendDst = props[key];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tmaterial[key] = props[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"BaseMaterial:unkonwn version.\");\r\n\t\t}\r\n\t\treturn material;\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _alphaTest: boolean;\r\n\r\n\t/** @internal */\r\n\t_shader: Shader3D;\r\n\t/** @private */\r\n\t_shaderValues: ShaderData = null;//TODO:剥离贴图ShaderValue\r\n\r\n\t/** 所属渲染队列. */\r\n\trenderQueue: number;\r\n\r\n\t/**\r\n\t * 着色器数据。\r\n\t */\r\n\tget shaderData(): ShaderData {\r\n\t\treturn this._shaderValues;\r\n\t}\r\n\r\n\t/**\r\n\t * 透明测试模式裁剪值。\r\n\t */\r\n\tget alphaTestValue(): number {\r\n\t\treturn this._shaderValues.getNumber(Material.ALPHATESTVALUE);\r\n\t}\r\n\r\n\tset alphaTestValue(value: number) {\r\n\t\tthis._shaderValues.setNumber(Material.ALPHATESTVALUE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否透明裁剪。\r\n\t */\r\n\tget alphaTest(): boolean {\r\n\t\treturn this._alphaTest;\r\n\t}\r\n\r\n\tset alphaTest(value: boolean) {\r\n\t\tthis._alphaTest = value;\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(Material.SHADERDEFINE_ALPHATEST);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(Material.SHADERDEFINE_ALPHATEST);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>BaseMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._shaderValues = new ShaderData(this);\r\n\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n\t\tthis._alphaTest = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _removeTetxureReference(): void {\r\n\t\tvar data: any = this._shaderValues.getData();\r\n\t\tfor (var k in data) {\r\n\t\t\tvar value: any = data[k];\r\n\t\t\tif (value && value instanceof BaseTexture)//TODO:需要优化,杜绝is判断，慢\r\n\t\t\t\t(<BaseTexture>value)._removeReference();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _disposeResource(): void {\r\n\t\tif (this._referenceCount > 0)\r\n\t\t\tthis._removeTetxureReference();\r\n\t\tthis._shaderValues = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @implements IReferenceCounter\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_addReference(count: number = 1): void {\r\n\t\tsuper._addReference(count);\r\n\t\tvar data: any = this._shaderValues.getData();\r\n\t\tfor (var k in data) {\r\n\t\t\tvar value: any = data[k];\r\n\t\t\tif (value && value instanceof BaseTexture)//TODO:需要优化,杜绝is判断，慢\r\n\t\t\t\t(<BaseTexture>value)._addReference();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @implements IReferenceCounter\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_removeReference(count: number = 1): void {\r\n\t\tsuper._removeReference(count);\r\n\t\tthis._removeTetxureReference();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 设置使用Shader名字。\r\n\t * @param name 名称。\r\n\t */\r\n\tsetShaderName(name: string): void {\r\n\t\tthis._shader = Shader3D.find(name);\r\n\t\tif (!this._shader)\r\n\t\t\tthrow new Error(\"BaseMaterial: unknown shader name.\");\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destBaseMaterial: Material = (<Material>destObject);\r\n\t\tdestBaseMaterial.name = this.name;\r\n\t\tdestBaseMaterial.renderQueue = this.renderQueue;\r\n\t\tthis._shaderValues.cloneTo(destBaseMaterial._shaderValues);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: Material = new Material();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t//--------------------------------------------兼容-------------------------------------------------\r\n\tget _defineDatas(): DefineDatas {\r\n\t\treturn this._shaderValues._defineDatas;\r\n\t}\r\n}\r\n\r\n\r\n","import { Laya } from \"../../../../Laya\";\r\nimport { Handler } from \"../../../utils/Handler\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\nimport { Material } from \"./Material\";\r\n\r\n\r\n/**\r\n * BaseMaterial has deprecated,please use Material instead.\r\n * @deprecated\r\n */\r\nexport class BaseMaterial {\r\n\t/** @deprecated use Material.MATERIAL instead*/\r\n\tstatic MATERIAL: string = \"MATERIAL\";\r\n\t/** @deprecated use Material.RENDERQUEUE_OPAQUE instead*/\r\n\tstatic RENDERQUEUE_OPAQUE: number = 2000;\r\n\t/** @deprecated use Material.RENDERQUEUE_ALPHATEST instead*/\r\n\tstatic RENDERQUEUE_ALPHATEST: number = 2450;\r\n\t/** @deprecated use Material.RENDERQUEUE_TRANSPARENT instead*/\r\n\tstatic RENDERQUEUE_TRANSPARENT: number = 3000;\r\n\t/** @deprecated use Material.ALPHATESTVALUE instead*/\r\n\tstatic ALPHATESTVALUE: number = Shader3D.propertyNameToID(\"u_AlphaTestValue\");\r\n\t/** @deprecated use Material.SHADERDEFINE_ALPHATEST instead*/\r\n\tstatic SHADERDEFINE_ALPHATEST: ShaderDefine = null;\r\n\r\n\t/**\r\n\t * @deprecated \r\n\t * BaseMaterial has deprecated,please use Material instead.\r\n\t */\r\n\tstatic load(url: string, complete: Handler): void {\r\n\t\tLaya.loader.create(url, complete, null, Material.MATERIAL);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tBaseMaterial.SHADERDEFINE_ALPHATEST = Material.SHADERDEFINE_ALPHATEST;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n","import { IClone } from \"../IClone\"\r\nimport { Vector4 } from \"../../math/Vector4\"\r\n\r\n\r\n/**\r\n * <code>RenderState</code> 类用于控制渲染状态。\r\n */\r\nexport class RenderState implements IClone {\r\n\t/**剔除枚举_不剔除。*/\r\n\tstatic CULL_NONE: number = 0;\r\n\t/**剔除枚举_剔除正面。*/\r\n\tstatic CULL_FRONT: number = 1;\r\n\t/**剔除枚举_剔除背面。*/\r\n\tstatic CULL_BACK: number = 2;\r\n\r\n\t/**混合枚举_禁用。*/\r\n\tstatic BLEND_DISABLE: number = 0;\r\n\t/**混合枚举_启用_RGB和Alpha统一混合。*/\r\n\tstatic BLEND_ENABLE_ALL: number = 1;\r\n\t/**混合枚举_启用_RGB和Alpha单独混合。*/\r\n\tstatic BLEND_ENABLE_SEPERATE: number = 2;\r\n\r\n\t/**混合参数枚举_零,例：RGB(0,0,0),Alpha:(1)。*/\r\n\tstatic BLENDPARAM_ZERO: number = 0;\r\n\t/**混合参数枚举_一,例：RGB(1,1,1),Alpha:(1)。*/\r\n\tstatic BLENDPARAM_ONE: number = 1;\r\n\t/**混合参数枚举_源颜色,例：RGB(Rs, Gs, Bs)，Alpha(As)。*/\r\n\tstatic BLENDPARAM_SRC_COLOR: number = 0x0300;\r\n\t/**混合参数枚举_一减源颜色,例：RGB(1-Rs, 1-Gs, 1-Bs)，Alpha(1-As)。*/\r\n\tstatic BLENDPARAM_ONE_MINUS_SRC_COLOR: number = 0x0301;\r\n\t/**混合参数枚举_目标颜色,例：RGB(Rd, Gd, Bd),Alpha(Ad)。*/\r\n\tstatic BLENDPARAM_DST_COLOR: number = 0x0306;\r\n\t/**混合参数枚举_一减目标颜色,例：RGB(1-Rd, 1-Gd, 1-Bd)，Alpha(1-Ad)。*/\r\n\tstatic BLENDPARAM_ONE_MINUS_DST_COLOR: number = 0x0307;\r\n\t/**混合参数枚举_源透明,例:RGB(As, As, As),Alpha(1-As)。*/\r\n\tstatic BLENDPARAM_SRC_ALPHA: number = 0x0302;\r\n\t/**混合参数枚举_一减源阿尔法,例:RGB(1-As, 1-As, 1-As),Alpha(1-As)。*/\r\n\tstatic BLENDPARAM_ONE_MINUS_SRC_ALPHA: number = 0x0303;\r\n\t/**混合参数枚举_目标阿尔法，例：RGB(Ad, Ad, Ad),Alpha(Ad)。*/\r\n\tstatic BLENDPARAM_DST_ALPHA: number = 0x0304;\r\n\t/**混合参数枚举_一减目标阿尔法,例：RGB(1-Ad, 1-Ad, 1-Ad),Alpha(Ad)。*/\r\n\tstatic BLENDPARAM_ONE_MINUS_DST_ALPHA: number = 0x0305;\r\n\t/**混合参数枚举_阿尔法饱和，例：RGB(min(As, 1 - Ad), min(As, 1 - Ad), min(As, 1 - Ad)),Alpha(1)。*/\r\n\tstatic BLENDPARAM_SRC_ALPHA_SATURATE: number = 0x0308;\r\n\r\n\t/**混合方程枚举_加法,例：source + destination*/\r\n\tstatic BLENDEQUATION_ADD: number = 0x8006;\r\n\t/**混合方程枚举_减法，例：source - destination*/\r\n\tstatic BLENDEQUATION_SUBTRACT: number = 0x800A;\r\n\t/**混合方程枚举_反序减法，例：destination - source*/\r\n\tstatic BLENDEQUATION_REVERSE_SUBTRACT: number = 0x800B;\r\n\r\n\t/**深度测试函数枚举_关闭深度测试。*/\r\n\tstatic DEPTHTEST_OFF: number = 0/*WebGLContext.NEVER*/;//TODO:什么鬼\r\n\t/**深度测试函数枚举_从不通过。*/\r\n\tstatic DEPTHTEST_NEVER: number = 0x0200/*WebGLContext.NEVER*/;\r\n\t/**深度测试函数枚举_小于时通过。*/\r\n\tstatic DEPTHTEST_LESS: number = 0x0201/*WebGLContext.LESS*/;\r\n\t/**深度测试函数枚举_等于时通过。*/\r\n\tstatic DEPTHTEST_EQUAL: number = 0x0202/*WebGLContext.EQUAL*/;\r\n\t/**深度测试函数枚举_小于等于时通过。*/\r\n\tstatic DEPTHTEST_LEQUAL: number = 0x0203/*WebGLContext.LEQUAL*/;\r\n\t/**深度测试函数枚举_大于时通过。*/\r\n\tstatic DEPTHTEST_GREATER: number = 0x0204/*WebGLContext.GREATER*/;\r\n\t/**深度测试函数枚举_不等于时通过。*/\r\n\tstatic DEPTHTEST_NOTEQUAL: number = 0x0205/*WebGLContext.NOTEQUAL*/;\r\n\t/**深度测试函数枚举_大于等于时通过。*/\r\n\tstatic DEPTHTEST_GEQUAL: number = 0x0206/*WebGLContext.GEQUAL*/;\r\n\t/**深度测试函数枚举_总是通过。*/\r\n\tstatic DEPTHTEST_ALWAYS: number = 0x0207/*WebGLContext.ALWAYS*/;\r\n\r\n\t/**渲染剔除状态。*/\r\n\tcull: number;\r\n\t/**透明混合。*/\r\n\tblend: number;\r\n\t/**源混合参数,在blend为BLEND_ENABLE_ALL时生效。*/\r\n\tsrcBlend: number;\r\n\t/**目标混合参数,在blend为BLEND_ENABLE_ALL时生效。*/\r\n\tdstBlend: number;\r\n\t/**RGB源混合参数,在blend为BLEND_ENABLE_SEPERATE时生效。*/\r\n\tsrcBlendRGB: number;\r\n\t/**RGB目标混合参数,在blend为BLEND_ENABLE_SEPERATE时生效。*/\r\n\tdstBlendRGB: number;\r\n\t/**Alpha源混合参数,在blend为BLEND_ENABLE_SEPERATE时生效。*/\r\n\tsrcBlendAlpha: number;\r\n\t/**Alpha目标混合参数,在blend为BLEND_ENABLE_SEPERATE时生效。*/\r\n\tdstBlendAlpha: number;\r\n\t/**混合常量颜色。*/\r\n\tblendConstColor: Vector4;\r\n\t/**混合方程。*/\r\n\tblendEquation: number;\r\n\t/**RGB混合方程。*/\r\n\tblendEquationRGB: number;\r\n\t/**Alpha混合方程。*/\r\n\tblendEquationAlpha: number;\r\n\t/**深度测试函数。*/\r\n\tdepthTest: number;\r\n\t/**是否深度写入。*/\r\n\tdepthWrite: boolean;\r\n\r\n\t/**\r\n\t * 创建一个 <code>RenderState</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\tthis.srcBlend = RenderState.BLENDPARAM_ONE;\r\n\t\tthis.dstBlend = RenderState.BLENDPARAM_ZERO;\r\n\t\tthis.srcBlendRGB = RenderState.BLENDPARAM_ONE;\r\n\t\tthis.dstBlendRGB = RenderState.BLENDPARAM_ZERO;\r\n\t\tthis.srcBlendAlpha = RenderState.BLENDPARAM_ONE;\r\n\t\tthis.dstBlendAlpha = RenderState.BLENDPARAM_ZERO;\r\n\t\tthis.blendConstColor = new Vector4(1, 1, 1, 1);\r\n\t\tthis.blendEquation = RenderState.BLENDEQUATION_ADD;\r\n\t\tthis.blendEquationRGB = RenderState.BLENDEQUATION_ADD;\r\n\t\tthis.blendEquationAlpha = RenderState.BLENDEQUATION_ADD;\r\n\t\tthis.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n\t\tthis.depthWrite = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(dest: any): void {\r\n\t\tvar destState: RenderState = (<RenderState>dest);\r\n\t\tdestState.cull = this.cull;\r\n\t\tdestState.blend = this.blend;\r\n\t\tdestState.srcBlend = this.srcBlend;\r\n\t\tdestState.dstBlend = this.dstBlend;\r\n\t\tdestState.srcBlendRGB = this.srcBlendRGB;\r\n\t\tdestState.dstBlendRGB = this.dstBlendRGB;\r\n\t\tdestState.srcBlendAlpha = this.srcBlendAlpha;\r\n\t\tdestState.dstBlendAlpha = this.dstBlendAlpha;\r\n\t\tthis.blendConstColor.cloneTo(destState.blendConstColor);\r\n\t\tdestState.blendEquation = this.blendEquation;\r\n\t\tdestState.blendEquationRGB = this.blendEquationRGB;\r\n\t\tdestState.blendEquationAlpha = this.blendEquationAlpha;\r\n\t\tdestState.depthTest = this.depthTest;\r\n\t\tdestState.depthWrite = this.depthWrite;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: RenderState = new RenderState();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Vector4 } from \"../../math/Vector4\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { ShaderData } from \"../../shader/ShaderData\";\r\nimport { Scene3DShaderDeclaration } from \"../scene/Scene3DShaderDeclaration\";\r\nimport { Material } from \"./Material\";\r\nimport { RenderState } from \"./RenderState\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\n\r\n/**\r\n * <code>BlinnPhongMaterial</code> 类用于实现Blinn-Phong材质。\r\n */\r\nexport class BlinnPhongMaterial extends Material {\r\n\t/**高光强度数据源_漫反射贴图的Alpha通道。*/\r\n\tstatic SPECULARSOURCE_DIFFUSEMAPALPHA: number;\r\n\t/**高光强度数据源_高光贴图的RGB通道。*/\r\n\tstatic SPECULARSOURCE_SPECULARMAP: number;\r\n\r\n\t/**渲染状态_不透明。*/\r\n\tstatic RENDERMODE_OPAQUE: number = 0;\r\n\t/**渲染状态_阿尔法测试。*/\r\n\tstatic RENDERMODE_CUTOUT: number = 1;\r\n\t/**渲染状态_透明混合。*/\r\n\tstatic RENDERMODE_TRANSPARENT: number = 2;\r\n\r\n\tstatic SHADERDEFINE_DIFFUSEMAP: ShaderDefine;\r\n\tstatic SHADERDEFINE_NORMALMAP: ShaderDefine;\r\n\tstatic SHADERDEFINE_SPECULARMAP: ShaderDefine;\r\n\tstatic SHADERDEFINE_TILINGOFFSET: ShaderDefine;\r\n\tstatic SHADERDEFINE_ENABLEVERTEXCOLOR: ShaderDefine;\r\n\r\n\tstatic ALBEDOTEXTURE: number = Shader3D.propertyNameToID(\"u_DiffuseTexture\");\r\n\tstatic NORMALTEXTURE: number = Shader3D.propertyNameToID(\"u_NormalTexture\");\r\n\tstatic SPECULARTEXTURE: number = Shader3D.propertyNameToID(\"u_SpecularTexture\");\r\n\tstatic ALBEDOCOLOR: number = Shader3D.propertyNameToID(\"u_DiffuseColor\");\r\n\tstatic MATERIALSPECULAR: number = Shader3D.propertyNameToID(\"u_MaterialSpecular\");\r\n\tstatic SHININESS: number = Shader3D.propertyNameToID(\"u_Shininess\");\r\n\tstatic TILINGOFFSET: number = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n\tstatic CULL: number = Shader3D.propertyNameToID(\"s_Cull\");\r\n\tstatic BLEND: number = Shader3D.propertyNameToID(\"s_Blend\");\r\n\tstatic BLEND_SRC: number = Shader3D.propertyNameToID(\"s_BlendSrc\");\r\n\tstatic BLEND_DST: number = Shader3D.propertyNameToID(\"s_BlendDst\");\r\n\tstatic DEPTH_TEST: number = Shader3D.propertyNameToID(\"s_DepthTest\");\r\n\tstatic DEPTH_WRITE: number = Shader3D.propertyNameToID(\"s_DepthWrite\");\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: BlinnPhongMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP = Shader3D.getDefineByName(\"DIFFUSEMAP\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_NORMALMAP = Shader3D.getDefineByName(\"NORMALMAP\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_SPECULARMAP = Shader3D.getDefineByName(\"SPECULARMAP\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_TILINGOFFSET = Shader3D.getDefineByName(\"TILINGOFFSET\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR = Shader3D.getDefineByName(\"ENABLEVERTEXCOLOR\");\r\n\t}\r\n\r\n\tprivate _albedoColor: Vector4;\r\n\tprivate _albedoIntensity: number;\r\n\tprivate _enableLighting: boolean;\r\n\tprivate _enableVertexColor: boolean = false;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _ColorR(): number {\r\n\t\treturn this._albedoColor.x;\r\n\t}\r\n\r\n\tset _ColorR(value: number) {\r\n\t\tthis._albedoColor.x = value;\r\n\t\tthis.albedoColor = this._albedoColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _ColorG(): number {\r\n\t\treturn this._albedoColor.y;\r\n\t}\r\n\r\n\tset _ColorG(value: number) {\r\n\t\tthis._albedoColor.y = value;\r\n\t\tthis.albedoColor = this._albedoColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _ColorB(): number {\r\n\t\treturn this._albedoColor.z;\r\n\t}\r\n\r\n\tset _ColorB(value: number) {\r\n\t\tthis._albedoColor.z = value;\r\n\t\tthis.albedoColor = this._albedoColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _ColorA(): number {\r\n\t\treturn this._albedoColor.w;\r\n\t}\r\n\r\n\tset _ColorA(value: number) {\r\n\t\tthis._albedoColor.w = value;\r\n\t\tthis.albedoColor = this._albedoColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _Color(): Vector4 {\r\n\t\treturn this._shaderValues.getVector(BlinnPhongMaterial.ALBEDOCOLOR);\r\n\t}\r\n\r\n\tset _Color(value: Vector4) {\r\n\t\tthis.albedoColor = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _SpecColorR(): number {\r\n\t\treturn this._shaderValues.getVector(BlinnPhongMaterial.MATERIALSPECULAR).x;\r\n\t}\r\n\r\n\tset _SpecColorR(value: number) {\r\n\t\tthis._shaderValues.getVector(BlinnPhongMaterial.MATERIALSPECULAR).x = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _SpecColorG(): number {\r\n\t\treturn this._shaderValues.getVector(BlinnPhongMaterial.MATERIALSPECULAR).y;\r\n\t}\r\n\r\n\tset _SpecColorG(value: number) {\r\n\t\tthis._shaderValues.getVector(BlinnPhongMaterial.MATERIALSPECULAR).y = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _SpecColorB(): number {\r\n\t\treturn this._shaderValues.getVector(BlinnPhongMaterial.MATERIALSPECULAR).z;\r\n\t}\r\n\r\n\tset _SpecColorB(value: number) {\r\n\t\tthis._shaderValues.getVector(BlinnPhongMaterial.MATERIALSPECULAR).z = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _SpecColorA(): number {\r\n\t\treturn this._shaderValues.getVector(BlinnPhongMaterial.MATERIALSPECULAR).w;\r\n\t}\r\n\r\n\tset _SpecColorA(value: number) {\r\n\t\tthis._shaderValues.getVector(BlinnPhongMaterial.MATERIALSPECULAR).w = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _SpecColor(): Vector4 {\r\n\t\treturn this._shaderValues.getVector(BlinnPhongMaterial.MATERIALSPECULAR);\r\n\t}\r\n\r\n\tset _SpecColor(value: Vector4) {\r\n\t\tthis.specularColor = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _AlbedoIntensity(): number {\r\n\t\treturn this._albedoIntensity;\r\n\t}\r\n\r\n\tset _AlbedoIntensity(value: number) {\r\n\t\tif (this._albedoIntensity !== value) {\r\n\t\t\tvar finalAlbedo: Vector4 = (<Vector4>this._shaderValues.getVector(BlinnPhongMaterial.ALBEDOCOLOR));\r\n\t\t\tVector4.scale(this._albedoColor, value, finalAlbedo);\r\n\t\t\tthis._albedoIntensity = value;\r\n\t\t\tthis._shaderValues.setVector(BlinnPhongMaterial.ALBEDOCOLOR, finalAlbedo);//修改值后必须调用此接口,否则NATIVE不生效\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _Shininess(): number {\r\n\t\treturn this._shaderValues.getNumber(BlinnPhongMaterial.SHININESS);\r\n\t}\r\n\r\n\tset _Shininess(value: number) {\r\n\t\tvalue = Math.max(0.0, Math.min(1.0, value));\r\n\t\tthis._shaderValues.setNumber(BlinnPhongMaterial.SHININESS, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STX(): number {\r\n\t\treturn this._shaderValues.getVector(BlinnPhongMaterial.TILINGOFFSET).x;\r\n\t}\r\n\r\n\tset _MainTex_STX(x: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(BlinnPhongMaterial.TILINGOFFSET));\r\n\t\ttilOff.x = x;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STY(): number {\r\n\t\treturn this._shaderValues.getVector(BlinnPhongMaterial.TILINGOFFSET).y;\r\n\t}\r\n\r\n\tset _MainTex_STY(y: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(BlinnPhongMaterial.TILINGOFFSET));\r\n\t\ttilOff.y = y;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STZ(): number {\r\n\t\treturn this._shaderValues.getVector(BlinnPhongMaterial.TILINGOFFSET).z;\r\n\t}\r\n\r\n\tset _MainTex_STZ(z: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(BlinnPhongMaterial.TILINGOFFSET));\r\n\t\ttilOff.z = z;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STW(): number {\r\n\t\treturn this._shaderValues.getVector(BlinnPhongMaterial.TILINGOFFSET).w;\r\n\t}\r\n\r\n\tset _MainTex_STW(w: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(BlinnPhongMaterial.TILINGOFFSET));\r\n\t\ttilOff.w = w;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_ST(): Vector4 {\r\n\t\treturn this._shaderValues.getVector(BlinnPhongMaterial.TILINGOFFSET);\r\n\t}\r\n\r\n\tset _MainTex_ST(value: Vector4) {\r\n\t\tthis.tilingOffset = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _Cutoff(): number {\r\n\t\treturn this.alphaTestValue;\r\n\t}\r\n\r\n\tset _Cutoff(value: number) {\r\n\t\tthis.alphaTestValue = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置渲染模式。\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase BlinnPhongMaterial.RENDERMODE_OPAQUE:\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase BlinnPhongMaterial.RENDERMODE_CUTOUT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_ALPHATEST;\r\n\t\t\t\tthis.alphaTest = true;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase BlinnPhongMaterial.RENDERMODE_TRANSPARENT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Material:renderMode value error.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 是否支持顶点色。\r\n\t */\r\n\tget enableVertexColor(): boolean {\r\n\t\treturn this._enableVertexColor;\r\n\t}\r\n\r\n\tset enableVertexColor(value: boolean) {\r\n\t\tthis._enableVertexColor = value;\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移X分量。\r\n\t */\r\n\tget tilingOffsetX(): number {\r\n\t\treturn this._MainTex_STX;\r\n\t}\r\n\r\n\tset tilingOffsetX(x: number) {\r\n\t\tthis._MainTex_STX = x;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移Y分量。\r\n\t */\r\n\tget tilingOffsetY(): number {\r\n\t\treturn this._MainTex_STY;\r\n\t}\r\n\r\n\tset tilingOffsetY(y: number) {\r\n\t\tthis._MainTex_STY = y;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移Z分量。\r\n\t */\r\n\tget tilingOffsetZ(): number {\r\n\t\treturn this._MainTex_STZ;\r\n\t}\r\n\r\n\tset tilingOffsetZ(z: number) {\r\n\t\tthis._MainTex_STZ = z;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移W分量。\r\n\t */\r\n\tget tilingOffsetW(): number {\r\n\t\treturn this._MainTex_STW;\r\n\t}\r\n\r\n\tset tilingOffsetW(w: number) {\r\n\t\tthis._MainTex_STW = w;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(BlinnPhongMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tif (value.x != 1 || value.y != 1 || value.z != 0 || value.w != 0)\r\n\t\t\t\tthis._shaderValues.addDefine(BlinnPhongMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t\telse\r\n\t\t\t\tthis._shaderValues.removeDefine(BlinnPhongMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t} else {\r\n\t\t\tthis._shaderValues.removeDefine(BlinnPhongMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t}\r\n\t\tthis._shaderValues.setVector(BlinnPhongMaterial.TILINGOFFSET, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率颜色R分量。\r\n\t */\r\n\tget albedoColorR(): number {\r\n\t\treturn this._ColorR;\r\n\t}\r\n\r\n\tset albedoColorR(value: number) {\r\n\t\tthis._ColorR = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率颜色G分量。\r\n\t */\r\n\tget albedoColorG(): number {\r\n\t\treturn this._ColorG;\r\n\t}\r\n\r\n\tset albedoColorG(value: number) {\r\n\t\tthis._ColorG = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率颜色B分量。\r\n\t */\r\n\tget albedoColorB(): number {\r\n\t\treturn this._ColorB;\r\n\t}\r\n\r\n\tset albedoColorB(value: number) {\r\n\t\tthis._ColorB = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率颜色Z分量。\r\n\t */\r\n\tget albedoColorA(): number {\r\n\t\treturn this._ColorA;\r\n\t}\r\n\r\n\tset albedoColorA(value: number) {\r\n\t\tthis._ColorA = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率颜色。\r\n\t */\r\n\tget albedoColor(): Vector4 {\r\n\t\treturn this._albedoColor;\r\n\t}\r\n\r\n\tset albedoColor(value: Vector4) {\r\n\t\tvar finalAlbedo: Vector4 = (<Vector4>this._shaderValues.getVector(BlinnPhongMaterial.ALBEDOCOLOR));\r\n\t\tVector4.scale(value, this._albedoIntensity, finalAlbedo);\r\n\t\tthis._albedoColor = value;\r\n\t\tthis._shaderValues.setVector(BlinnPhongMaterial.ALBEDOCOLOR, finalAlbedo);//修改值后必须调用此接口,否则NATIVE不生效\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率强度。\r\n\t */\r\n\tget albedoIntensity(): number {\r\n\t\treturn this._albedoIntensity;\r\n\t}\r\n\r\n\tset albedoIntensity(value: number) {\r\n\t\tthis._AlbedoIntensity = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 高光颜色R轴分量。\r\n\t */\r\n\tget specularColorR(): number {\r\n\t\treturn this._SpecColorR;\r\n\t}\r\n\r\n\tset specularColorR(value: number) {\r\n\t\tthis._SpecColorR = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 高光颜色G分量。\r\n\t */\r\n\tget specularColorG(): number {\r\n\t\treturn this._SpecColorG;\r\n\t}\r\n\r\n\tset specularColorG(value: number) {\r\n\t\tthis._SpecColorG = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 高光颜色B分量。\r\n\t */\r\n\tget specularColorB(): number {\r\n\t\treturn this._SpecColorB;\r\n\t}\r\n\r\n\tset specularColorB(value: number) {\r\n\t\tthis._SpecColorB = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 高光颜色A分量。\r\n\t */\r\n\tget specularColorA(): number {\r\n\t\treturn this._SpecColorA;\r\n\t}\r\n\r\n\tset specularColorA(value: number) {\r\n\t\tthis._SpecColorA = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 高光颜色。\r\n\t */\r\n\tget specularColor(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(BlinnPhongMaterial.MATERIALSPECULAR));\r\n\t}\r\n\r\n\tset specularColor(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(BlinnPhongMaterial.MATERIALSPECULAR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 高光强度,范围为0到1。\r\n\t */\r\n\tget shininess(): number {\r\n\t\treturn this._Shininess;\r\n\t}\r\n\r\n\tset shininess(value: number) {\r\n\t\tthis._Shininess = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率贴图。\r\n\t */\r\n\tget albedoTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(BlinnPhongMaterial.ALBEDOTEXTURE);\r\n\t}\r\n\r\n\tset albedoTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP);\r\n\t\tthis._shaderValues.setTexture(BlinnPhongMaterial.ALBEDOTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 法线贴图。\r\n\t */\r\n\tget normalTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(BlinnPhongMaterial.NORMALTEXTURE);\r\n\t}\r\n\r\n\tset normalTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(BlinnPhongMaterial.SHADERDEFINE_NORMALMAP);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(BlinnPhongMaterial.SHADERDEFINE_NORMALMAP);\r\n\t\tthis._shaderValues.setTexture(BlinnPhongMaterial.NORMALTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 高光贴图。\r\n\t */\r\n\tget specularTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(BlinnPhongMaterial.SPECULARTEXTURE);\r\n\t}\r\n\r\n\tset specularTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP);\r\n\r\n\t\tthis._shaderValues.setTexture(BlinnPhongMaterial.SPECULARTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否写入深度。\r\n\t */\r\n\tget depthWrite(): boolean {\r\n\t\treturn this._shaderValues.getBool(BlinnPhongMaterial.DEPTH_WRITE);\r\n\t}\r\n\r\n\tset depthWrite(value: boolean) {\r\n\t\tthis._shaderValues.setBool(BlinnPhongMaterial.DEPTH_WRITE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 剔除方式。\r\n\t */\r\n\tget cull(): number {\r\n\t\treturn this._shaderValues.getInt(BlinnPhongMaterial.CULL);\r\n\t}\r\n\r\n\tset cull(value: number) {\r\n\t\tthis._shaderValues.setInt(BlinnPhongMaterial.CULL, value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 混合方式。\r\n\t */\r\n\tget blend(): number {\r\n\t\treturn this._shaderValues.getInt(BlinnPhongMaterial.BLEND);\r\n\t}\r\n\r\n\tset blend(value: number) {\r\n\t\tthis._shaderValues.setInt(BlinnPhongMaterial.BLEND, value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 混合源。\r\n\t */\r\n\tget blendSrc(): number {\r\n\t\treturn this._shaderValues.getInt(BlinnPhongMaterial.BLEND_SRC);\r\n\t}\r\n\r\n\tset blendSrc(value: number) {\r\n\t\tthis._shaderValues.setInt(BlinnPhongMaterial.BLEND_SRC, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 混合目标。\r\n\t */\r\n\tget blendDst(): number {\r\n\t\treturn this._shaderValues.getInt(BlinnPhongMaterial.BLEND_DST);\r\n\t}\r\n\r\n\tset blendDst(value: number) {\r\n\t\tthis._shaderValues.setInt(BlinnPhongMaterial.BLEND_DST, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 深度测试方式。\r\n\t */\r\n\tget depthTest(): number {\r\n\t\treturn this._shaderValues.getInt(BlinnPhongMaterial.DEPTH_TEST);\r\n\t}\r\n\r\n\tset depthTest(value: number) {\r\n\t\tthis._shaderValues.setInt(BlinnPhongMaterial.DEPTH_TEST, value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>BlinnPhongMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"BLINNPHONG\");\r\n\t\tthis._albedoIntensity = 1.0;\r\n\t\tthis._albedoColor = new Vector4(1.0, 1.0, 1.0, 1.0);\r\n\t\tvar sv: ShaderData = this._shaderValues;\r\n\t\tsv.setVector(BlinnPhongMaterial.ALBEDOCOLOR, new Vector4(1.0, 1.0, 1.0, 1.0));\r\n\t\tsv.setVector(BlinnPhongMaterial.MATERIALSPECULAR, new Vector4(1.0, 1.0, 1.0, 1.0));\r\n\t\tsv.setNumber(BlinnPhongMaterial.SHININESS, 0.078125);\r\n\t\tsv.setNumber(Material.ALPHATESTVALUE, 0.5);\r\n\t\tsv.setVector(BlinnPhongMaterial.TILINGOFFSET, new Vector4(1.0, 1.0, 0.0, 0.0));\r\n\t\tthis._enableLighting = true;\r\n\t\tthis.renderMode = BlinnPhongMaterial.RENDERMODE_OPAQUE;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: BlinnPhongMaterial = new BlinnPhongMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destMaterial: BlinnPhongMaterial = (<BlinnPhongMaterial>destObject);\r\n\t\tdestMaterial._enableLighting = this._enableLighting;\r\n\t\tdestMaterial._albedoIntensity = this._albedoIntensity;\r\n\t\tdestMaterial._enableVertexColor = this._enableVertexColor;\r\n\t\tthis._albedoColor.cloneTo(destMaterial._albedoColor);\r\n\t}\r\n}\r\n\r\n\r\n","import { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { Material } from \"./Material\";\r\nimport { RenderState } from \"./RenderState\";\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\n\r\n/**\r\n * <code>EffectMaterial</code> 类用于实现Mesh特效材质。\r\n */\r\nexport class EffectMaterial extends Material {\r\n\t/**渲染状态_加色法混合。*/\r\n\tstatic RENDERMODE_ADDTIVE: number = 0;\r\n\t/**渲染状态_透明混合。*/\r\n\tstatic RENDERMODE_ALPHABLENDED: number = 1;\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: EffectMaterial;\r\n\r\n\tstatic SHADERDEFINE_MAINTEXTURE: ShaderDefine;\r\n\tstatic SHADERDEFINE_TILINGOFFSET: ShaderDefine;\r\n\tstatic SHADERDEFINE_ADDTIVEFOG: ShaderDefine;\r\n\r\n\tstatic MAINTEXTURE: number = Shader3D.propertyNameToID(\"u_AlbedoTexture\");\r\n\tstatic TINTCOLOR: number = Shader3D.propertyNameToID(\"u_AlbedoColor\");\r\n\tstatic TILINGOFFSET: number = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n\tstatic CULL: number = Shader3D.propertyNameToID(\"s_Cull\");\r\n\tstatic BLEND: number = Shader3D.propertyNameToID(\"s_Blend\");\r\n\tstatic BLEND_SRC: number = Shader3D.propertyNameToID(\"s_BlendSrc\");\r\n\tstatic BLEND_DST: number = Shader3D.propertyNameToID(\"s_BlendDst\");\r\n\tstatic DEPTH_TEST: number = Shader3D.propertyNameToID(\"s_DepthTest\");\r\n\tstatic DEPTH_WRITE: number = Shader3D.propertyNameToID(\"s_DepthWrite\");\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tEffectMaterial.SHADERDEFINE_MAINTEXTURE = Shader3D.getDefineByName(\"MAINTEXTURE\");\r\n\t\tEffectMaterial.SHADERDEFINE_TILINGOFFSET = Shader3D.getDefineByName(\"TILINGOFFSET\");\r\n\t\tEffectMaterial.SHADERDEFINE_ADDTIVEFOG = Shader3D.getDefineByName(\"ADDTIVEFOG\");\r\n\t}\r\n\r\n\tprivate _color: Vector4;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _TintColorR(): number {\r\n\t\treturn this._color.x;\r\n\t}\r\n\r\n\tset _TintColorR(value: number) {\r\n\t\tthis._color.x = value;\r\n\t\tthis.color = this._color;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _TintColorG(): number {\r\n\t\treturn this._color.y;\r\n\t}\r\n\r\n\tset _TintColorG(value: number) {\r\n\t\tthis._color.y = value;\r\n\t\tthis.color = this._color;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _TintColorB(): number {\r\n\t\treturn this._color.z;\r\n\t}\r\n\r\n\tset _TintColorB(value: number) {\r\n\t\tthis._color.z = value;\r\n\t\tthis.color = this._color;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal \r\n\t */\r\n\tget _TintColorA(): number {\r\n\t\treturn this._color.w;\r\n\t}\r\n\r\n\tset _TintColorA(value: number) {\r\n\t\tthis._color.w = value;\r\n\t\tthis.color = this._color;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _TintColor(): Vector4 {\r\n\t\treturn this._shaderValues.getVector(EffectMaterial.TINTCOLOR);\r\n\t}\r\n\r\n\tset _TintColor(value: Vector4) {\r\n\t\tthis.color = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STX(): number {\r\n\t\treturn this._shaderValues.getVector(EffectMaterial.TILINGOFFSET).x;\r\n\t}\r\n\r\n\tset _MainTex_STX(x: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(EffectMaterial.TILINGOFFSET));\r\n\t\ttilOff.x = x;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STY(): number {\r\n\t\treturn this._shaderValues.getVector(EffectMaterial.TILINGOFFSET).y;\r\n\t}\r\n\r\n\tset _MainTex_STY(y: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(EffectMaterial.TILINGOFFSET));\r\n\t\ttilOff.y = y;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STZ(): number {\r\n\t\treturn this._shaderValues.getVector(EffectMaterial.TILINGOFFSET).z;\r\n\t}\r\n\r\n\tset _MainTex_STZ(z: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(EffectMaterial.TILINGOFFSET));\r\n\t\ttilOff.z = z;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STW(): number {\r\n\t\treturn this._shaderValues.getVector(EffectMaterial.TILINGOFFSET).w;\r\n\t}\r\n\r\n\tset _MainTex_STW(w: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(EffectMaterial.TILINGOFFSET));\r\n\t\ttilOff.w = w;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_ST(): Vector4 {\r\n\t\treturn this._shaderValues.getVector(EffectMaterial.TILINGOFFSET);\r\n\t}\r\n\r\n\tset _MainTex_ST(value: Vector4) {\r\n\t\tthis.tilingOffset = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置渲染模式。\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase EffectMaterial.RENDERMODE_ADDTIVE:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tthis._shaderValues.addDefine(EffectMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tcase EffectMaterial.RENDERMODE_ALPHABLENDED:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tthis._shaderValues.removeDefine(EffectMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"MeshEffectMaterial : renderMode value error.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 颜色R分量。\r\n\t */\r\n\tget colorR(): number {\r\n\t\treturn this._TintColorR;\r\n\t}\r\n\r\n\tset colorR(value: number) {\r\n\t\tthis._TintColorR = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 颜色G分量。\r\n\t */\r\n\tget colorG(): number {\r\n\t\treturn this._TintColorG;\r\n\t}\r\n\r\n\tset colorG(value: number) {\r\n\t\tthis._TintColorG = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 颜色B分量。\r\n\t */\r\n\tget colorB(): number {\r\n\t\treturn this._TintColorB;\r\n\t}\r\n\r\n\tset colorB(value: number) {\r\n\t\tthis._TintColorB = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 颜色A分量。\r\n\t */\r\n\tget colorA(): number {\r\n\t\treturn this._TintColorA;\r\n\t}\r\n\r\n\tset colorA(value: number) {\r\n\t\tthis._TintColorA = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色。\r\n\t */\r\n\tget color(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(EffectMaterial.TINTCOLOR));\r\n\t}\r\n\r\n\tset color(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(EffectMaterial.TINTCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 贴图。\r\n\t */\r\n\tget texture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(EffectMaterial.MAINTEXTURE);\r\n\t}\r\n\r\n\tset texture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(EffectMaterial.SHADERDEFINE_MAINTEXTURE);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(EffectMaterial.SHADERDEFINE_MAINTEXTURE);\r\n\t\tthis._shaderValues.setTexture(EffectMaterial.MAINTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移X分量。\r\n\t */\r\n\tget tilingOffsetX(): number {\r\n\t\treturn this._MainTex_STX;\r\n\t}\r\n\r\n\tset tilingOffsetX(x: number) {\r\n\t\tthis._MainTex_STX = x;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移Y分量。\r\n\t */\r\n\tget tilingOffsetY(): number {\r\n\t\treturn this._MainTex_STY;\r\n\t}\r\n\r\n\tset tilingOffsetY(y: number) {\r\n\t\tthis._MainTex_STY = y;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移Z分量。\r\n\t */\r\n\tget tilingOffsetZ(): number {\r\n\t\treturn this._MainTex_STZ;\r\n\t}\r\n\r\n\tset tilingOffsetZ(z: number) {\r\n\t\tthis._MainTex_STZ = z;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移W分量。\r\n\t */\r\n\tget tilingOffsetW(): number {\r\n\t\treturn this._MainTex_STW;\r\n\t}\r\n\r\n\tset tilingOffsetW(w: number) {\r\n\t\tthis._MainTex_STW = w;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(EffectMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tif (value.x != 1 || value.y != 1 || value.z != 0 || value.w != 0)\r\n\t\t\t\tthis._shaderValues.addDefine(EffectMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t\telse\r\n\t\t\t\tthis._shaderValues.removeDefine(EffectMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t} else {\r\n\t\t\tthis._shaderValues.removeDefine(EffectMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t}\r\n\t\tthis._shaderValues.setVector(EffectMaterial.TILINGOFFSET, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否写入深度。\r\n\t */\r\n\tget depthWrite(): boolean {\r\n\t\treturn this._shaderValues.getBool(EffectMaterial.DEPTH_WRITE);\r\n\t}\r\n\r\n\tset depthWrite(value: boolean) {\r\n\t\tthis._shaderValues.setBool(EffectMaterial.DEPTH_WRITE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 剔除方式。\r\n\t */\r\n\tget cull(): number {\r\n\t\treturn this._shaderValues.getInt(EffectMaterial.CULL);\r\n\t}\r\n\r\n\tset cull(value: number) {\r\n\t\tthis._shaderValues.setInt(EffectMaterial.CULL, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 混合方式。\r\n\t */\r\n\tget blend(): number {\r\n\t\treturn this._shaderValues.getInt(EffectMaterial.BLEND);\r\n\t}\r\n\r\n\tset blend(value: number) {\r\n\t\tthis._shaderValues.setInt(EffectMaterial.BLEND, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 混合源。\r\n\t */\r\n\tget blendSrc(): number {\r\n\t\treturn this._shaderValues.getInt(EffectMaterial.BLEND_SRC);\r\n\t}\r\n\r\n\r\n\tset blendSrc(value: number) {\r\n\t\tthis._shaderValues.setInt(EffectMaterial.BLEND_SRC, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 混合目标。\r\n\t */\r\n\tget blendDst(): number {\r\n\t\treturn this._shaderValues.getInt(EffectMaterial.BLEND_DST);\r\n\t}\r\n\r\n\tset blendDst(value: number) {\r\n\t\tthis._shaderValues.setInt(EffectMaterial.BLEND_DST, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 深度测试方式。\r\n\t */\r\n\tget depthTest(): number {\r\n\t\treturn this._shaderValues.getInt(EffectMaterial.DEPTH_TEST);\r\n\t}\r\n\r\n\tset depthTest(value: number) {\r\n\t\tthis._shaderValues.setInt(EffectMaterial.DEPTH_TEST, value);\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"Effect\");\r\n\t\tthis._color = new Vector4(1.0, 1.0, 1.0, 1.0);\r\n\t\tthis._shaderValues.setVector(EffectMaterial.TINTCOLOR, new Vector4(1.0, 1.0, 1.0, 1.0));\r\n\t\tthis.renderMode = EffectMaterial.RENDERMODE_ADDTIVE;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: EffectMaterial = new EffectMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n","import { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { Scene3DShaderDeclaration } from \"../scene/Scene3DShaderDeclaration\";\r\nimport { Material } from \"./Material\";\r\nimport { RenderState } from \"./RenderState\";\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\n\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nexport class ExtendTerrainMaterial extends Material {\r\n\t/**渲染状态_不透明。*/\r\n\tstatic RENDERMODE_OPAQUE: number = 1;\r\n\t/**渲染状态_透明混合。*/\r\n\tstatic RENDERMODE_TRANSPARENT: number = 2;\r\n\r\n\t/**渲染状态_透明混合。*/\r\n\tstatic SPLATALPHATEXTURE: number = Shader3D.propertyNameToID(\"u_SplatAlphaTexture\");\r\n\r\n\tstatic DIFFUSETEXTURE1: number = Shader3D.propertyNameToID(\"u_DiffuseTexture1\");\r\n\tstatic DIFFUSETEXTURE2: number = Shader3D.propertyNameToID(\"u_DiffuseTexture2\");\r\n\tstatic DIFFUSETEXTURE3: number = Shader3D.propertyNameToID(\"u_DiffuseTexture3\");\r\n\tstatic DIFFUSETEXTURE4: number = Shader3D.propertyNameToID(\"u_DiffuseTexture4\");\r\n\tstatic DIFFUSETEXTURE5: number = Shader3D.propertyNameToID(\"u_DiffuseTexture5\");\r\n\r\n\tstatic DIFFUSESCALEOFFSET1: number = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset1\");\r\n\tstatic DIFFUSESCALEOFFSET2: number = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset2\");\r\n\tstatic DIFFUSESCALEOFFSET3: number = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset3\");\r\n\tstatic DIFFUSESCALEOFFSET4: number = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset4\");\r\n\tstatic DIFFUSESCALEOFFSET5: number = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset5\");\r\n\r\n\tstatic CULL: number = Shader3D.propertyNameToID(\"s_Cull\");\r\n\tstatic BLEND: number = Shader3D.propertyNameToID(\"s_Blend\");\r\n\tstatic BLEND_SRC: number = Shader3D.propertyNameToID(\"s_BlendSrc\");\r\n\tstatic BLEND_DST: number = Shader3D.propertyNameToID(\"s_BlendDst\");\r\n\tstatic DEPTH_TEST: number = Shader3D.propertyNameToID(\"s_DepthTest\");\r\n\tstatic DEPTH_WRITE: number = Shader3D.propertyNameToID(\"s_DepthWrite\");\r\n\r\n\t/**地形细节宏定义。*/\r\n\tstatic SHADERDEFINE_DETAIL_NUM1: ShaderDefine;\r\n\tstatic SHADERDEFINE_DETAIL_NUM2: ShaderDefine;\r\n\tstatic SHADERDEFINE_DETAIL_NUM3: ShaderDefine;\r\n\tstatic SHADERDEFINE_DETAIL_NUM4: ShaderDefine;\r\n\tstatic SHADERDEFINE_DETAIL_NUM5: ShaderDefine;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM1\");\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM2\");\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM3\");\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM4\");\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM5\");\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _enableLighting: boolean = true;\r\n\r\n\t/**\r\n\t * splatAlpha贴图。\r\n\t */\r\n\tget splatAlphaTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.SPLATALPHATEXTURE);\r\n\t}\r\n\r\n\tset splatAlphaTexture(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.SPLATALPHATEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 第一层贴图。\r\n\t */\r\n\tget diffuseTexture1(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE1);\r\n\t}\r\n\r\n\tset diffuseTexture1(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE1, value);\r\n\t\tthis._setDetailNum(1);\r\n\t}\r\n\r\n\t/**\r\n\t * 第二层贴图。\r\n\t */\r\n\tget diffuseTexture2(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE2);\r\n\t}\r\n\r\n\tset diffuseTexture2(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE2, value);\r\n\t\tthis._setDetailNum(2);\r\n\t}\r\n\r\n\t/**\r\n\t * 第三层贴图。\r\n\t */\r\n\tget diffuseTexture3(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE3);\r\n\t}\r\n\r\n\tset diffuseTexture3(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE3, value);\r\n\t\tthis._setDetailNum(3);\r\n\t}\r\n\r\n\t/**\r\n\t * 第四层贴图。\r\n\t */\r\n\tget diffuseTexture4(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE4);\r\n\t}\r\n\r\n\tset diffuseTexture4(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE4, value);\r\n\t\tthis._setDetailNum(4);\r\n\t}\r\n\r\n\t/**\r\n\t * 第五层贴图。\r\n\t */\r\n\tget diffuseTexture5(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE5);\r\n\t}\r\n\r\n\tset diffuseTexture5(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE5, value);\r\n\t\tthis._setDetailNum(5);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 第一层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset1(scaleOffset1: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET1, scaleOffset1);\r\n\t}\r\n\r\n\t/**\r\n\t * 第二层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset2(scaleOffset2: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET2, scaleOffset2);\r\n\t}\r\n\r\n\t/**\r\n\t * 第三层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset3(scaleOffset3: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET3, scaleOffset3);\r\n\t}\r\n\r\n\t/**\r\n\t * 第四层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset4(scaleOffset4: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET4, scaleOffset4);\r\n\t}\r\n\r\n\t/**\r\n\t * 第五层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset5(scaleOffset5: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET5, scaleOffset5);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置渲染模式。\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase ExtendTerrainMaterial.RENDERMODE_OPAQUE:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ExtendTerrainMaterial.RENDERMODE_TRANSPARENT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"ExtendTerrainMaterial:renderMode value error.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 是否写入深度。\r\n\t */\r\n\tget depthWrite(): boolean {\r\n\t\treturn this._shaderValues.getBool(ExtendTerrainMaterial.DEPTH_WRITE);\r\n\t}\r\n\r\n\tset depthWrite(value: boolean) {\r\n\t\tthis._shaderValues.setBool(ExtendTerrainMaterial.DEPTH_WRITE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 剔除方式。\r\n\t */\r\n\tget cull(): number {\r\n\t\treturn this._shaderValues.getInt(ExtendTerrainMaterial.CULL);\r\n\t}\r\n\r\n\tset cull(value: number) {\r\n\t\tthis._shaderValues.setInt(ExtendTerrainMaterial.CULL, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 混合方式。\r\n\t */\r\n\tget blend(): number {\r\n\t\treturn this._shaderValues.getInt(ExtendTerrainMaterial.BLEND);\r\n\t}\r\n\r\n\tset blend(value: number) {\r\n\t\tthis._shaderValues.setInt(ExtendTerrainMaterial.BLEND, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 混合源。\r\n\t */\r\n\tget blendSrc(): number {\r\n\t\treturn this._shaderValues.getInt(ExtendTerrainMaterial.BLEND_SRC);\r\n\t}\r\n\r\n\tset blendSrc(value: number) {\r\n\t\tthis._shaderValues.setInt(ExtendTerrainMaterial.BLEND_SRC, value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 混合目标。\r\n\t */\r\n\tget blendDst(): number {\r\n\t\treturn this._shaderValues.getInt(ExtendTerrainMaterial.BLEND_DST);\r\n\t}\r\n\r\n\tset blendDst(value: number) {\r\n\t\tthis._shaderValues.setInt(ExtendTerrainMaterial.BLEND_DST, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 深度测试方式。\r\n\t */\r\n\tget depthTest(): number {\r\n\t\treturn this._shaderValues.getInt(ExtendTerrainMaterial.DEPTH_TEST);\r\n\t}\r\n\r\n\tset depthTest(value: number) {\r\n\t\tthis._shaderValues.setInt(ExtendTerrainMaterial.DEPTH_TEST, value);\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"ExtendTerrain\");\r\n\t\tthis.renderMode = ExtendTerrainMaterial.RENDERMODE_OPAQUE;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _setDetailNum(value: number): void {\r\n\t\tswitch (value) {\r\n\t\t\tcase 1:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* 克隆。\r\n\t* @return\t 克隆副本。\r\n\t* @override\r\n\t*/\r\n\tclone(): any {\r\n\t\tvar dest: ExtendTerrainMaterial = new ExtendTerrainMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\nimport { Material } from \"./Material\";\r\nimport { RenderState } from \"./RenderState\";\r\nimport { PBRRenderQuality } from \"./PBRRenderQuality\";\r\n\r\n/**\r\n * 渲染模式。\r\n */\r\nexport enum PBRRenderMode {\r\n    /**不透明。*/\r\n    Opaque,\r\n    /**透明裁剪。*/\r\n    Cutout,\r\n    /**透明混合_游戏中经常使用的透明。*/\r\n    Fade,\r\n    /**透明混合_物理上看似合理的透明。*/\r\n    Transparent\r\n}\r\n\r\n/**\r\n * PBR材质的父类,该类为抽象类。\r\n */\r\nexport class PBRMaterial extends Material {\r\n    /** @internal */\r\n    static SHADERDEFINE_ALBEDOTEXTURE: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_NORMALTEXTURE: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_OCCLUSIONTEXTURE: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_PARALLAXTEXTURE: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_EMISSION: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_EMISSIONTEXTURE: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_TILINGOFFSET: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_TRANSPARENTBLEND: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_LAYA_PBR_BRDF_HIGH: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_LAYA_PBR_BRDF_LOW: ShaderDefine;\r\n\r\n    /** @internal */\r\n    static ALBEDOTEXTURE: number = Shader3D.propertyNameToID(\"u_AlbedoTexture\");\r\n    /** @internal */\r\n    static ALBEDOCOLOR: number = Shader3D.propertyNameToID(\"u_AlbedoColor\");\r\n    /** @internal */\r\n    static TILINGOFFSET: number = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n    /** @internal */\r\n    static NORMALTEXTURE: number = Shader3D.propertyNameToID(\"u_NormalTexture\");\r\n    /** @internal */\r\n    static NORMALSCALE: number = Shader3D.propertyNameToID(\"u_NormalScale\");\r\n    /** @internal */\r\n    static SMOOTHNESS: number = Shader3D.propertyNameToID(\"u_Smoothness\");\r\n    /** @internal */\r\n    static SMOOTHNESSSCALE: number = Shader3D.propertyNameToID(\"u_SmoothnessScale\");\r\n    /** @internal */\r\n    static OCCLUSIONTEXTURE: number = Shader3D.propertyNameToID(\"u_OcclusionTexture\");\r\n    /** @internal */\r\n    static OCCLUSIONSTRENGTH: number = Shader3D.propertyNameToID(\"u_occlusionStrength\");\r\n    /** @internal */\r\n    static PARALLAXTEXTURE: number = Shader3D.propertyNameToID(\"u_ParallaxTexture\");\r\n    /** @internal */\r\n    static PARALLAXSCALE: number = Shader3D.propertyNameToID(\"u_ParallaxScale\");\r\n    /** @internal */\r\n    static EMISSIONTEXTURE: number = Shader3D.propertyNameToID(\"u_EmissionTexture\");\r\n    /** @internal */\r\n    static EMISSIONCOLOR: number = Shader3D.propertyNameToID(\"u_EmissionColor\");\r\n\r\n    /** @internal */\r\n    static CULL: number = Shader3D.propertyNameToID(\"s_Cull\");\r\n    /** @internal */\r\n    static BLEND: number = Shader3D.propertyNameToID(\"s_Blend\");\r\n    /** @internal */\r\n    static BLEND_SRC: number = Shader3D.propertyNameToID(\"s_BlendSrc\");\r\n    /** @internal */\r\n    static BLEND_DST: number = Shader3D.propertyNameToID(\"s_BlendDst\");\r\n    /** @internal */\r\n    static DEPTH_TEST: number = Shader3D.propertyNameToID(\"s_DepthTest\");\r\n    /** @internal */\r\n    static DEPTH_WRITE: number = Shader3D.propertyNameToID(\"s_DepthWrite\");\r\n\r\n    /** 渲染质量。*/\r\n    static renderQuality: PBRRenderQuality = PBRRenderQuality.High;\r\n\r\n    /**\r\n\t * @private\r\n\t */\r\n    static __init__(): void {\r\n        PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE = Shader3D.getDefineByName(\"ALBEDOTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_NORMALTEXTURE = Shader3D.getDefineByName(\"NORMALTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE = Shader3D.getDefineByName(\"PARALLAXTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE = Shader3D.getDefineByName(\"OCCLUSIONTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_EMISSION = Shader3D.getDefineByName(\"EMISSION\");\r\n        PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE = Shader3D.getDefineByName(\"EMISSIONTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_TILINGOFFSET = Shader3D.getDefineByName(\"TILINGOFFSET\");\r\n        PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND = Shader3D.getDefineByName(\"TRANSPARENTBLEND\");\r\n        PBRMaterial.SHADERDEFINE_LAYA_PBR_BRDF_HIGH = Shader3D.getDefineByName(\"LAYA_PBR_BRDF_HIGH\");\r\n        PBRMaterial.SHADERDEFINE_LAYA_PBR_BRDF_LOW = Shader3D.getDefineByName(\"LAYA_PBR_BRDF_LOW\");\r\n    }\r\n\r\n    /** @internal */\r\n    private _enableEmission: boolean = false;\r\n\r\n    /**\r\n\t * 漫反射颜色。\r\n\t */\r\n    get albedoColor(): Vector4 {\r\n        return <Vector4>this._shaderValues.getVector(PBRMaterial.ALBEDOCOLOR);\r\n    }\r\n\r\n    set albedoColor(value: Vector4) {\r\n        this._shaderValues.setVector(PBRMaterial.ALBEDOCOLOR, value);\r\n    }\r\n\r\n\t/**\r\n\t * 漫反射贴图。\r\n\t */\r\n    get albedoTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.ALBEDOTEXTURE);\r\n    }\r\n\r\n    set albedoTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n\r\n        this._shaderValues.setTexture(PBRMaterial.ALBEDOTEXTURE, value);\r\n    }\r\n\r\n\t/**\r\n\t * 法线贴图。\r\n\t */\r\n    get normalTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.NORMALTEXTURE);\r\n    }\r\n\r\n    set normalTexture(value: BaseTexture) {\r\n        if (value) {\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_NORMALTEXTURE);\r\n        } else {\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_NORMALTEXTURE);\r\n        }\r\n        this._shaderValues.setTexture(PBRMaterial.NORMALTEXTURE, value);\r\n    }\r\n\r\n\t/**\r\n\t * 法线贴图缩放系数。\r\n\t */\r\n    get normalTextureScale(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.NORMALSCALE);\r\n    }\r\n\r\n    set normalTextureScale(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.NORMALSCALE, value);\r\n    }\r\n\r\n\t/**\r\n\t * 视差贴图。\r\n\t */\r\n    get parallaxTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.PARALLAXTEXTURE);\r\n    }\r\n\r\n    set parallaxTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE);\r\n        this._shaderValues.setTexture(PBRMaterial.PARALLAXTEXTURE, value);\r\n    }\r\n\r\n\t/**\r\n\t * 视差贴图缩放系数。\r\n\t */\r\n    get parallaxTextureScale(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.PARALLAXSCALE);\r\n    }\r\n\r\n    set parallaxTextureScale(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.PARALLAXSCALE, Math.max(0.005, Math.min(0.08, value)));\r\n    }\r\n\r\n\t/**\r\n\t * 遮挡贴图。\r\n\t */\r\n    get occlusionTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.OCCLUSIONTEXTURE);\r\n    }\r\n\r\n    set occlusionTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE);\r\n\r\n        this._shaderValues.setTexture(PBRMaterial.OCCLUSIONTEXTURE, value);\r\n    }\r\n\r\n\t/**\r\n\t * 遮挡贴图强度,范围为0到1。\r\n\t */\r\n    get occlusionTextureStrength(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.OCCLUSIONSTRENGTH);\r\n    }\r\n\r\n    set occlusionTextureStrength(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.OCCLUSIONSTRENGTH, Math.max(0.0, Math.min(1.0, value)));\r\n    }\r\n\r\n    /**\r\n\t * 光滑度,范围为0到1。\r\n\t */\r\n    get smoothness(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.SMOOTHNESS);\r\n    }\r\n\r\n    set smoothness(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESS, Math.max(0.0, Math.min(1.0, value)));\r\n    }\r\n\r\n\t/**\r\n\t * 光滑度缩放系数,范围为0到1。\r\n\t */\r\n    get smoothnessTextureScale(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.SMOOTHNESSSCALE);\r\n    }\r\n\r\n    set smoothnessTextureScale(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESSSCALE, Math.max(0.0, Math.min(1.0, value)));\r\n    }\r\n\r\n    /**\r\n\t * 是否开启自发光。\r\n\t */\r\n    get enableEmission(): boolean {\r\n        return this._enableEmission;\r\n    }\r\n\r\n    set enableEmission(value: boolean) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_EMISSION);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_EMISSION);\r\n        this._enableEmission = value;\r\n    }\r\n\r\n\t/**\r\n\t * 自发光颜色。\r\n\t */\r\n    get emissionColor(): Vector4 {\r\n        return <Vector4>this._shaderValues.getVector(PBRMaterial.EMISSIONCOLOR);\r\n    }\r\n\r\n    set emissionColor(value: Vector4) {\r\n        this._shaderValues.setVector(PBRMaterial.EMISSIONCOLOR, value);\r\n    }\r\n\r\n\t/**\r\n\t * 自发光贴图。\r\n\t */\r\n    get emissionTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.EMISSIONTEXTURE);\r\n    }\r\n\r\n    set emissionTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE);\r\n\r\n        this._shaderValues.setTexture(PBRMaterial.EMISSIONTEXTURE, value);\r\n    }\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移。\r\n\t */\r\n    get tilingOffset(): Vector4 {\r\n        return (<Vector4>this._shaderValues.getVector(PBRMaterial.TILINGOFFSET));\r\n    }\r\n\r\n    set tilingOffset(value: Vector4) {\r\n        if (value) {\r\n            if (value.x != 1 || value.y != 1 || value.z != 0 || value.w != 0)\r\n                this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_TILINGOFFSET);\r\n            else\r\n                this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TILINGOFFSET);\r\n        } else {\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TILINGOFFSET);\r\n        }\r\n        this._shaderValues.setVector(PBRMaterial.TILINGOFFSET, value);\r\n    }\r\n\r\n    /**\r\n\t * 是否写入深度。\r\n\t */\r\n    get depthWrite(): boolean {\r\n        return this._shaderValues.getBool(PBRMaterial.DEPTH_WRITE);\r\n    }\r\n\r\n    set depthWrite(value: boolean) {\r\n        this._shaderValues.setBool(PBRMaterial.DEPTH_WRITE, value);\r\n    }\r\n\r\n\t/**\r\n\t * 剔除方式。\r\n\t */\r\n    get cull(): number {\r\n        return this._shaderValues.getInt(PBRMaterial.CULL);\r\n    }\r\n\r\n    set cull(value: number) {\r\n        this._shaderValues.setInt(PBRMaterial.CULL, value);\r\n    }\r\n\r\n\t/**\r\n\t * 混合方式。\r\n\t */\r\n    get blend(): number {\r\n        return this._shaderValues.getInt(PBRMaterial.BLEND);\r\n    }\r\n\r\n    set blend(value: number) {\r\n        this._shaderValues.setInt(PBRMaterial.BLEND, value);\r\n    }\r\n\r\n\t/**\r\n\t * 混合源。\r\n\t */\r\n    get blendSrc(): number {\r\n        return this._shaderValues.getInt(PBRMaterial.BLEND_SRC);\r\n    }\r\n\r\n    set blendSrc(value: number) {\r\n        this._shaderValues.setInt(PBRMaterial.BLEND_SRC, value);\r\n    }\r\n\r\n\t/**\r\n\t * 混合目标。\r\n\t */\r\n    get blendDst(): number {\r\n        return this._shaderValues.getInt(PBRMaterial.BLEND_DST);\r\n    }\r\n\r\n    set blendDst(value: number) {\r\n        this._shaderValues.setInt(PBRMaterial.BLEND_DST, value);\r\n    }\r\n\r\n\t/**\r\n\t * 深度测试方式。\r\n\t */\r\n    get depthTest(): number {\r\n        return this._shaderValues.getInt(PBRMaterial.DEPTH_TEST);\r\n    }\r\n\r\n\r\n    set depthTest(value: number) {\r\n        this._shaderValues.setInt(PBRMaterial.DEPTH_TEST, value);\r\n    }\r\n\r\n    /**\r\n\t * 渲染模式。\r\n\t */\r\n    set renderMode(value: number) {\r\n        switch (value) {\r\n            case PBRRenderMode.Opaque:\r\n                this.alphaTest = false;\r\n                this.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n                this.depthWrite = true;\r\n                this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_DISABLE;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\r\n                break;\r\n            case PBRRenderMode.Cutout:\r\n                this.renderQueue = Material.RENDERQUEUE_ALPHATEST;\r\n                this.alphaTest = true;\r\n                this.depthWrite = true;\r\n                this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_DISABLE;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\r\n                break;\r\n            case PBRRenderMode.Fade:\r\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n                this.alphaTest = false;\r\n                this.depthWrite = false;\r\n                this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_ENABLE_ALL;\r\n                this.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n                this.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\r\n                break;\r\n            case PBRRenderMode.Transparent:\r\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n                this.alphaTest = false;\r\n                this.depthWrite = false;\r\n                this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_ENABLE_ALL;\r\n                this.blendSrc = RenderState.BLENDPARAM_ONE;\r\n                this.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\r\n                break;\r\n            default:\r\n                throw new Error(\"PBRMaterial:unknown renderMode value.\");\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this._shaderValues.setVector(PBRMaterial.ALBEDOCOLOR, new Vector4(1.0, 1.0, 1.0, 1.0));\r\n        this._shaderValues.setVector(PBRMaterial.EMISSIONCOLOR, new Vector4(1.0, 1.0, 1.0, 1.0));\r\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESS, 0.5);\r\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESSSCALE, 1.0);\r\n        this._shaderValues.setNumber(PBRMaterial.OCCLUSIONSTRENGTH, 1.0);\r\n        this._shaderValues.setNumber(PBRMaterial.NORMALSCALE, 1.0);\r\n        this._shaderValues.setNumber(PBRMaterial.PARALLAXSCALE, 0.001);\r\n        this._shaderValues.setNumber(Material.ALPHATESTVALUE, 0.5);\r\n        this.renderMode = PBRRenderMode.Opaque;\r\n    }\r\n\r\n\r\n    //---------------------------------------------------------------deprecated------------------------------------------------------------------\r\n    /**\r\n\t * @deprecated\r\n\t */\r\n    get enableReflection(): boolean {\r\n        return true;\r\n    }\r\n\r\n    set enableReflection(value: boolean) {\r\n    }\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n\tprecision highp int;\r\n#else\r\n\tprecision mediump float;\r\n\tprecision mediump int;\r\n#endif\r\n\r\n#define SETUP_BRDF_INPUT specularSetup\r\n\r\n#include \"Lighting.glsl\";\r\n#include \"PBRFSInput.glsl\";\r\n#include \"LayaPBRBRDF.glsl\";\r\n#include \"GlobalIllumination.glsl\";\r\n#include \"Shadow.glsl\"\r\n#include \"PBRCore.glsl\";\r\n\r\nvoid main()\r\n{\r\n\tfragmentForward();\r\n}","#include \"PBRVSInput.glsl\";\r\n#include \"Lighting.glsl\";\r\n#include \"PBRVertex.glsl\";\r\n\r\nvoid main()\r\n{\r\n\tvertexForward();\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n\tprecision highp int;\r\n#else\r\n\tprecision mediump float;\r\n\tprecision mediump int;\r\n#endif\r\n\r\n#include \"ShadowCasterFS.glsl\"\r\n\r\nvoid main()\r\n{\r\n\tgl_FragColor=shadowCasterFragment();\r\n}","#include \"ShadowCasterVS.glsl\"\r\n\r\nvoid main()\r\n{\r\n\tvec4 positionCS =  shadowCasterVertex();\r\n\tgl_Position=remapGLPositionZ(positionCS);\r\n}","/**\r\n\t * @internal\r\n\t *  <code>shaderVariable</code> 类用于保存shader变量上传相关信息。\r\n\t */\r\n\texport class ShaderVariable {\r\n\t\t/**@internal */\r\n\t\t name:string;\r\n\t\t/**@internal */\r\n\t\t type:number;\r\n\t\t/**@internal */\r\n\t\t location:WebGLUniformLocation;\r\n\t\t/**@internal */\r\n\t\t isArray:boolean;\r\n\t\t/**@internal */\r\n\t\t textureID:number;\r\n\t\t/**@internal */\r\n\t\t dataOffset:number;\r\n\t\t\r\n\t\t/**@internal */\r\n\t\t caller:any;\r\n\t\t/**@internal */\r\n\t\t fun:any;\r\n\t\t/**@internal */\r\n\t\t uploadedValue:any[];\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个 <code>shaderVariable</code> 实例。\r\n\t\t */\r\n\t\tconstructor(){\r\n\t\t\t\r\n\t\t\tthis.textureID = -1;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","import { CommandEncoder } from \"../../layagl/CommandEncoder\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { LayaGLRunner } from \"../../layagl/LayaGLRunner\";\r\nimport { Render } from \"../../renders/Render\";\r\nimport { BaseTexture } from \"../../resource/BaseTexture\";\r\nimport { Resource } from \"../../resource/Resource\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { WebGLContext } from \"../../webgl/WebGLContext\";\r\nimport { BaseCamera } from \"../core/BaseCamera\";\r\nimport { Material } from \"../core/material/Material\";\r\nimport { RenderState } from \"../core/material/RenderState\";\r\nimport { BaseRender } from \"../core/render/BaseRender\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Vector2 } from \"../math/Vector2\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Vector4 } from \"../math/Vector4\";\r\nimport { Shader3D } from \"./Shader3D\";\r\nimport { ShaderData } from \"./ShaderData\";\r\nimport { ShaderPass } from \"./ShaderPass\";\r\nimport { ShaderVariable } from \"./ShaderVariable\";\r\n\r\n/**\r\n * @internal\r\n * <code>ShaderInstance</code> 类用于实现ShaderInstance。\r\n */\r\nexport class ShaderInstance extends Resource {\r\n\t/**@internal */\r\n\tprivate _attributeMap: any;\r\n\t/**@internal */\r\n\tprivate _uniformMap: any;\r\n\t/**@internal */\r\n\tprivate _shaderPass: ShaderPass;\r\n\r\n\t/**@internal */\r\n\tprivate _vs: string\r\n\t/**@internal */\r\n\tprivate _ps: string;\r\n\t/**@internal */\r\n\tprivate _curActTexIndex: number;\r\n\r\n\t/**@internal */\r\n\tprivate _vshader: any;\r\n\t/**@internal */\r\n\tprivate _pshader: any\r\n\t/**@internal */\r\n\tprivate _program: any;\r\n\r\n\t/**@internal */\r\n\t_sceneUniformParamsMap: CommandEncoder;\r\n\t/**@internal */\r\n\t_cameraUniformParamsMap: CommandEncoder;\r\n\t/**@internal */\r\n\t_spriteUniformParamsMap: CommandEncoder;\r\n\t/**@internal */\r\n\t_materialUniformParamsMap: CommandEncoder;\r\n\t/**@internal */\r\n\tprivate _customUniformParamsMap: any[];\r\n\t/**@internal */\r\n\tprivate _stateParamsMap: any[] = [];\r\n\r\n\t/**@internal */\r\n\t_uploadMark: number = -1;\r\n\t/**@internal */\r\n\t_uploadMaterial: Material;\r\n\t/**@internal */\r\n\t_uploadRender: BaseRender;\r\n\t/** @internal */\r\n\t_uploadRenderType: number = -1;\r\n\t/**@internal */\r\n\t_uploadCameraShaderValue: ShaderData;\r\n\t/**@internal */\r\n\t_uploadScene: Scene3D;\r\n\r\n\t/**\r\n\t * 创建一个 <code>ShaderInstance</code> 实例。\r\n\t */\r\n\tconstructor(vs: string, ps: string, attributeMap: any, uniformMap: any, shaderPass: ShaderPass) {\r\n\r\n\t\tsuper();\r\n\t\tthis._vs = vs;\r\n\t\tthis._ps = ps;\r\n\t\tthis._attributeMap = attributeMap;\r\n\t\tthis._uniformMap = uniformMap;\r\n\t\tthis._shaderPass = shaderPass;\r\n\t\tthis._create();\r\n\t\tthis.lock = true;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate _create(): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tthis._program = gl.createProgram();\r\n\t\tthis._vshader = this._createShader(gl, this._vs, gl.VERTEX_SHADER);\r\n\t\tthis._pshader = this._createShader(gl, this._ps, gl.FRAGMENT_SHADER);\r\n\t\tgl.attachShader(this._program, this._vshader);\r\n\t\tgl.attachShader(this._program, this._pshader);\r\n\r\n\t\tfor (var k in this._attributeMap)//根据声明调整location,便于VAO使用\r\n\t\t\tgl.bindAttribLocation(this._program, this._attributeMap[k], k);\r\n\r\n\t\tgl.linkProgram(this._program);\r\n\t\tif (!Render.isConchApp && Shader3D.debugMode && !gl.getProgramParameter(this._program, gl.LINK_STATUS))\r\n\t\t\tthrow gl.getProgramInfoLog(this._program);\r\n\r\n\t\tvar sceneParms: any[] = [];\r\n\t\tvar cameraParms: any[] = [];\r\n\t\tvar spriteParms: any[] = [];\r\n\t\tvar materialParms: any[] = [];\r\n\t\tvar customParms: any[] = [];\r\n\t\tthis._customUniformParamsMap = [];\r\n\r\n\t\tvar nUniformNum: number = gl.getProgramParameter(this._program, gl.ACTIVE_UNIFORMS);\r\n\t\tWebGLContext.useProgram(gl, this._program);\r\n\t\tthis._curActTexIndex = 0;\r\n\t\tvar one: ShaderVariable, i: number, n: number;\r\n\t\tfor (i = 0; i < nUniformNum; i++) {\r\n\t\t\tvar uniformData: any = gl.getActiveUniform(this._program, i);\r\n\t\t\tvar uniName: string = uniformData.name;\r\n\t\t\tone = new ShaderVariable();\r\n\t\t\tone.location = gl.getUniformLocation(this._program, uniName);\r\n\r\n\t\t\tif (uniName.indexOf('[0]') > 0) {\r\n\t\t\t\tone.name = uniName = uniName.substr(0, uniName.length - 3);\r\n\t\t\t\tone.isArray = true;\r\n\t\t\t} else {\r\n\t\t\t\tone.name = uniName;\r\n\t\t\t\tone.isArray = false;\r\n\t\t\t}\r\n\t\t\tone.type = uniformData.type;\r\n\t\t\tthis._addShaderUnifiormFun(one);\r\n\t\t\tvar uniformPeriod: number = this._uniformMap[uniName];\r\n\t\t\tif (uniformPeriod != null) {\r\n\t\t\t\tone.dataOffset = Shader3D.propertyNameToID(uniName);\r\n\t\t\t\tswitch (uniformPeriod) {\r\n\t\t\t\t\tcase Shader3D.PERIOD_CUSTOM:\r\n\t\t\t\t\t\tcustomParms.push(one);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase Shader3D.PERIOD_MATERIAL:\r\n\t\t\t\t\t\tmaterialParms.push(one);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase Shader3D.PERIOD_SPRITE:\r\n\t\t\t\t\t\tspriteParms.push(one);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase Shader3D.PERIOD_CAMERA:\r\n\t\t\t\t\t\tcameraParms.push(one);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase Shader3D.PERIOD_SCENE:\r\n\t\t\t\t\t\tsceneParms.push(one);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error(\"Shader3D: period is unkonw.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Native版本分别存入funid、webglFunid,location、type、offset, +4是因为第一个存长度了 所以是*4*5+4\r\n\t\tthis._sceneUniformParamsMap = (<any>LayaGL.instance).createCommandEncoder(sceneParms.length * 4 * 5 + 4, 64, true);\r\n\t\tfor (i = 0, n = sceneParms.length; i < n; i++)\r\n\t\t\tthis._sceneUniformParamsMap.addShaderUniform(sceneParms[i]);\r\n\r\n\t\tthis._cameraUniformParamsMap = (<any>LayaGL.instance).createCommandEncoder(cameraParms.length * 4 * 5 + 4, 64, true);\r\n\t\tfor (i = 0, n = cameraParms.length; i < n; i++)\r\n\t\t\tthis._cameraUniformParamsMap.addShaderUniform(cameraParms[i]);\r\n\r\n\t\tthis._spriteUniformParamsMap = (<any>LayaGL.instance).createCommandEncoder(spriteParms.length * 4 * 5 + 4, 64, true);\r\n\t\tfor (i = 0, n = spriteParms.length; i < n; i++)\r\n\t\t\tthis._spriteUniformParamsMap.addShaderUniform(spriteParms[i]);\r\n\r\n\t\tthis._materialUniformParamsMap = (<any>LayaGL.instance).createCommandEncoder(materialParms.length * 4 * 5 + 4, 64, true);\r\n\t\tfor (i = 0, n = materialParms.length; i < n; i++)\r\n\t\t\tthis._materialUniformParamsMap.addShaderUniform(materialParms[i]);\r\n\r\n\t\tthis._customUniformParamsMap.length = customParms.length;\r\n\t\tfor (i = 0, n = customParms.length; i < n; i++) {\r\n\t\t\tvar custom: ShaderVariable = customParms[i];\r\n\t\t\tthis._customUniformParamsMap[custom.dataOffset] = custom;\r\n\t\t}\r\n\r\n\t\tvar stateMap: object = this._shaderPass._stateMap;\r\n\t\tfor (var s in stateMap)\r\n\t\t\tthis._stateParamsMap[stateMap[s]] = Shader3D.propertyNameToID(s);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getRenderState(shaderDatas: any, stateIndex: number): any {\r\n\t\tvar stateID: any = this._stateParamsMap[stateIndex];\r\n\t\tif (stateID == null)\r\n\t\t\treturn null;\r\n\t\telse\r\n\t\t\treturn shaderDatas[stateID];\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _disposeResource(): void {\r\n\t\tLayaGL.instance.deleteShader(this._vshader);\r\n\t\tLayaGL.instance.deleteShader(this._pshader);\r\n\t\tLayaGL.instance.deleteProgram(this._program);\r\n\t\tthis._vshader = this._pshader = this._program = null;\r\n\t\tthis._setGPUMemory(0);\r\n\t\tthis._curActTexIndex = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addShaderUnifiormFun(one: ShaderVariable): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tone.caller = this;\r\n\t\tvar isArray: boolean = one.isArray;\r\n\t\tswitch (one.type) {\r\n\t\t\tcase gl.BOOL:\r\n\t\t\t\tone.fun = this._uniform1i;\r\n\t\t\t\tone.uploadedValue = new Array(1);\r\n\t\t\t\tbreak;\r\n\t\t\tcase gl.INT:\r\n\t\t\t\tone.fun = isArray ? this._uniform1iv : this._uniform1i;//TODO:优化\r\n\t\t\t\tone.uploadedValue = new Array(1);\r\n\t\t\t\tbreak;\r\n\t\t\tcase gl.FLOAT:\r\n\t\t\t\tone.fun = isArray ? this._uniform1fv : this._uniform1f;\r\n\t\t\t\tone.uploadedValue = new Array(1);\r\n\t\t\t\tbreak;\r\n\t\t\tcase gl.FLOAT_VEC2:\r\n\t\t\t\tone.fun = isArray ? this._uniform_vec2v : this._uniform_vec2;\r\n\t\t\t\tone.uploadedValue = new Array(2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase gl.FLOAT_VEC3:\r\n\t\t\t\tone.fun = isArray ? this._uniform_vec3v : this._uniform_vec3;\r\n\t\t\t\tone.uploadedValue = new Array(3);\r\n\t\t\t\tbreak;\r\n\t\t\tcase gl.FLOAT_VEC4:\r\n\t\t\t\tone.fun = isArray ? this._uniform_vec4v : this._uniform_vec4;\r\n\t\t\t\tone.uploadedValue = new Array(4);\r\n\t\t\t\tbreak;\r\n\t\t\tcase gl.FLOAT_MAT2:\r\n\t\t\t\tone.fun = this._uniformMatrix2fv;\r\n\t\t\t\tbreak;\r\n\t\t\tcase gl.FLOAT_MAT3:\r\n\t\t\t\tone.fun = this._uniformMatrix3fv;\r\n\t\t\t\tbreak;\r\n\t\t\tcase gl.FLOAT_MAT4:\r\n\t\t\t\tone.fun = isArray ? this._uniformMatrix4fv : this._uniformMatrix4f;\r\n\t\t\t\tbreak;\r\n\t\t\tcase gl.SAMPLER_2D:\r\n\t\t\tcase (<WebGL2RenderingContext>gl).SAMPLER_2D_SHADOW:\r\n\t\t\t\tgl.uniform1i(one.location, this._curActTexIndex);\r\n\t\t\t\tone.textureID = WebGLContext._glTextureIDs[this._curActTexIndex++];\r\n\t\t\t\tone.fun = this._uniform_sampler2D;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x8b5f://sampler3D\r\n\t\t\t\tgl.uniform1i(one.location, this._curActTexIndex);\r\n\t\t\t\tone.textureID = WebGLContext._glTextureIDs[this._curActTexIndex++];\r\n\t\t\t\tone.fun = this._uniform_sampler3D;\r\n\t\t\t\tbreak;\r\n\t\t\tcase gl.SAMPLER_CUBE:\r\n\t\t\t\tgl.uniform1i(one.location, this._curActTexIndex);\r\n\t\t\t\tone.textureID = WebGLContext._glTextureIDs[this._curActTexIndex++];\r\n\t\t\t\tone.fun = this._uniform_samplerCube;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"compile shader err!\");\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _createShader(gl: WebGLRenderingContext, str: string, type: any): any {\r\n\t\tvar shader: any = gl.createShader(type);\r\n\t\tgl.shaderSource(shader, str);\r\n\t\tgl.compileShader(shader);\r\n\t\tif (Shader3D.debugMode && !gl.getShaderParameter(shader, gl.COMPILE_STATUS))\r\n\t\t\tthrow gl.getShaderInfoLog(shader);\r\n\r\n\t\treturn shader;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform1f(one: any, value: any): number {\r\n\t\tvar uploadedValue: any[] = one.uploadedValue;\r\n\t\tif (uploadedValue[0] !== value) {\r\n\t\t\tLayaGL.instance.uniform1f(one.location, uploadedValue[0] = value);\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform1fv(one: any, value: any): number {\r\n\t\tif (value.length < 4) {\r\n\t\t\tvar uploadedValue: any[] = one.uploadedValue;\r\n\t\t\tif (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2] || uploadedValue[3] !== value[3]) {\r\n\t\t\t\tLayaGL.instance.uniform1fv(one.location, value);\r\n\t\t\t\tuploadedValue[0] = value[0];\r\n\t\t\t\tuploadedValue[1] = value[1];\r\n\t\t\t\tuploadedValue[2] = value[2];\r\n\t\t\t\tuploadedValue[3] = value[3];\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t} else {\r\n\t\t\tLayaGL.instance.uniform1fv(one.location, value);\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_vec2(one: any, v: Vector2): number {\r\n\t\tvar uploadedValue: any[] = one.uploadedValue;\r\n\t\tif (uploadedValue[0] !== v.x || uploadedValue[1] !== v.y) {\r\n\t\t\tLayaGL.instance.uniform2f(one.location, uploadedValue[0] = v.x, uploadedValue[1] = v.y);\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_vec2v(one: any, value: Float32Array): number {\r\n\t\tif (value.length < 2) {\r\n\t\t\tvar uploadedValue: any[] = one.uploadedValue;\r\n\t\t\tif (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2] || uploadedValue[3] !== value[3]) {\r\n\t\t\t\tLayaGL.instance.uniform2fv(one.location, value);\r\n\t\t\t\tuploadedValue[0] = value[0];\r\n\t\t\t\tuploadedValue[1] = value[1];\r\n\t\t\t\tuploadedValue[2] = value[2];\r\n\t\t\t\tuploadedValue[3] = value[3];\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t} else {\r\n\t\t\tLayaGL.instance.uniform2fv(one.location, value);\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_vec3(one: any, v: Vector3): number {\r\n\t\tvar uploadedValue: any[] = one.uploadedValue;\r\n\t\tif (uploadedValue[0] !== v.x || uploadedValue[1] !== v.y || uploadedValue[2] !== v.z) {\r\n\t\t\tLayaGL.instance.uniform3f(one.location, uploadedValue[0] = v.x, uploadedValue[1] = v.y, uploadedValue[2] = v.z);\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_vec3v(one: any, v: Float32Array): number {\r\n\t\tLayaGL.instance.uniform3fv(one.location, v);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_vec4(one: any, v: Vector4): number {\r\n\t\tvar uploadedValue: any[] = one.uploadedValue;\r\n\t\tif (uploadedValue[0] !== v.x || uploadedValue[1] !== v.y || uploadedValue[2] !== v.z || uploadedValue[3] !== v.w) {\r\n\t\t\tLayaGL.instance.uniform4f(one.location, uploadedValue[0] = v.x, uploadedValue[1] = v.y, uploadedValue[2] = v.z, uploadedValue[3] = v.w);\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_vec4v(one: any, v: Float32Array): number {\r\n\t\tLayaGL.instance.uniform4fv(one.location, v);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniformMatrix2fv(one: any, value: any): number {\r\n\t\tLayaGL.instance.uniformMatrix2fv(one.location, false, value);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniformMatrix3fv(one: any, value: any): number {\r\n\t\tLayaGL.instance.uniformMatrix3fv(one.location, false, value);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniformMatrix4f(one: any, m: Matrix4x4): number {\r\n\t\tvar value: Float32Array = m.elements;\r\n\t\tLayaGL.instance.uniformMatrix4fv(one.location, false, value);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniformMatrix4fv(one: any, m: Float32Array): number {\r\n\t\tLayaGL.instance.uniformMatrix4fv(one.location, false, m);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform1i(one: any, value: any): number {\r\n\t\tvar uploadedValue: any[] = one.uploadedValue;\r\n\t\tif (uploadedValue[0] !== value) {\r\n\t\t\tLayaGL.instance.uniform1i(one.location, uploadedValue[0] = value);\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform1iv(one: any, value: any): number {\r\n\t\tLayaGL.instance.uniform1iv(one.location, value);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_ivec2(one: any, value: any): number {\r\n\t\tvar uploadedValue: any[] = one.uploadedValue;\r\n\t\tif (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1]) {\r\n\t\t\tLayaGL.instance.uniform2i(one.location, uploadedValue[0] = value[0], uploadedValue[1] = value[1]);\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_ivec2v(one: any, value: any): number {\r\n\t\tLayaGL.instance.uniform2iv(one.location, value);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_vec3i(one: any, value: any): number {\r\n\t\tvar uploadedValue: any[] = one.uploadedValue;\r\n\t\tif (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2]) {\r\n\t\t\tLayaGL.instance.uniform3i(one.location, uploadedValue[0] = value[0], uploadedValue[1] = value[1], uploadedValue[2] = value[2]);\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_vec3vi(one: any, value: any): number {\r\n\t\tLayaGL.instance.uniform3iv(one.location, value);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_vec4i(one: any, value: any): number {\r\n\t\tvar uploadedValue: any[] = one.uploadedValue;\r\n\t\tif (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2] || uploadedValue[3] !== value[3]) {\r\n\t\t\tLayaGL.instance.uniform4i(one.location, uploadedValue[0] = value[0], uploadedValue[1] = value[1], uploadedValue[2] = value[2], uploadedValue[3] = value[3]);\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_vec4vi(one: any, value: any): number {\r\n\t\tLayaGL.instance.uniform4iv(one.location, value);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_sampler2D(one: any, texture: BaseTexture): number {//TODO:TEXTURTE ARRAY\r\n\t\tvar value: any = texture._getSource() || texture.defaulteTexture._getSource();\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tWebGLContext.activeTexture(gl, one.textureID);\r\n\t\tWebGLContext.bindTexture(gl, gl.TEXTURE_2D, value);\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t_uniform_sampler3D(one: any, texture: BaseTexture): number {//TODO:TEXTURTE ARRAY\r\n\t\tvar value: any = texture._getSource() || texture.defaulteTexture._getSource();\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tWebGLContext.activeTexture(gl, one.textureID);\r\n\t\tWebGLContext.bindTexture(gl, WebGL2RenderingContext.TEXTURE_3D, value);\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uniform_samplerCube(one: any, texture: BaseTexture): number {//TODO:TEXTURTECUBE ARRAY\r\n\t\tvar value: any = texture._getSource() || texture.defaulteTexture._getSource();\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tWebGLContext.activeTexture(gl, one.textureID);\r\n\t\tWebGLContext.bindTexture(gl, gl.TEXTURE_CUBE_MAP, value);\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tbind(): boolean {\r\n\t\treturn WebGLContext.useProgram(LayaGL.instance, this._program);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tuploadUniforms(shaderUniform: CommandEncoder, shaderDatas: ShaderData, uploadUnTexture: boolean): void {\r\n\t\tStat.shaderCall += LayaGLRunner.uploadShaderUniforms((<any>LayaGL.instance), shaderUniform, shaderDatas, uploadUnTexture);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tuploadRenderStateBlendDepth(shaderDatas: ShaderData): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar renderState: RenderState = this._shaderPass.renderState;\r\n\t\tvar datas: any = shaderDatas.getData();\r\n\r\n\t\tvar depthWrite: any = this._getRenderState(datas, Shader3D.RENDER_STATE_DEPTH_WRITE);\r\n\t\tvar depthTest: any = this._getRenderState(datas, Shader3D.RENDER_STATE_DEPTH_TEST);\r\n\t\tvar blend: any = this._getRenderState(datas, Shader3D.RENDER_STATE_BLEND);\r\n\t\tdepthWrite == null && (depthWrite = renderState.depthWrite);\r\n\t\tdepthTest == null && (depthTest = renderState.depthTest);\r\n\t\tblend == null && (blend = renderState.blend);\r\n\r\n\t\tWebGLContext.setDepthMask(gl, depthWrite);\r\n\t\tif (depthTest === RenderState.DEPTHTEST_OFF)\r\n\t\t\tWebGLContext.setDepthTest(gl, false);\r\n\t\telse {\r\n\t\t\tWebGLContext.setDepthTest(gl, true);\r\n\t\t\tWebGLContext.setDepthFunc(gl, depthTest);\r\n\t\t}\r\n\r\n\t\tswitch (blend) {\r\n\t\t\tcase RenderState.BLEND_DISABLE:\r\n\t\t\t\tWebGLContext.setBlend(gl, false);\r\n\t\t\t\tbreak;\r\n\t\t\tcase RenderState.BLEND_ENABLE_ALL:\r\n\t\t\t\tvar blendEquation: any = this._getRenderState(datas, Shader3D.RENDER_STATE_BLEND_EQUATION);\r\n\t\t\t\tvar srcBlend: any = this._getRenderState(datas, Shader3D.RENDER_STATE_BLEND_SRC);\r\n\t\t\t\tvar dstBlend: any = this._getRenderState(datas, Shader3D.RENDER_STATE_BLEND_DST);\r\n\t\t\t\tblendEquation == null && (blendEquation = renderState.blendEquation);\r\n\t\t\t\tsrcBlend == null && (srcBlend = renderState.srcBlend);\r\n\t\t\t\tdstBlend == null && (dstBlend = renderState.dstBlend);\r\n\t\t\t\tWebGLContext.setBlend(gl, true);\r\n\t\t\t\tWebGLContext.setBlendEquation(gl, blendEquation);\r\n\t\t\t\tWebGLContext.setBlendFunc(gl, srcBlend, dstBlend);\r\n\t\t\t\tbreak;\r\n\t\t\tcase RenderState.BLEND_ENABLE_SEPERATE:\r\n\t\t\t\tvar blendEquationRGB: any = this._getRenderState(datas, Shader3D.RENDER_STATE_BLEND_EQUATION_RGB);\r\n\t\t\t\tvar blendEquationAlpha: any = this._getRenderState(datas, Shader3D.RENDER_STATE_BLEND_EQUATION_ALPHA);\r\n\t\t\t\tvar srcRGB: any = this._getRenderState(datas, Shader3D.RENDER_STATE_BLEND_SRC_RGB);\r\n\t\t\t\tvar dstRGB: any = this._getRenderState(datas, Shader3D.RENDER_STATE_BLEND_DST_RGB);\r\n\t\t\t\tvar srcAlpha: any = this._getRenderState(datas, Shader3D.RENDER_STATE_BLEND_SRC_ALPHA);\r\n\t\t\t\tvar dstAlpha: any = this._getRenderState(datas, Shader3D.RENDER_STATE_BLEND_DST_ALPHA);\r\n\t\t\t\tblendEquationRGB == null && (blendEquationRGB = renderState.blendEquationRGB);\r\n\t\t\t\tblendEquationAlpha == null && (blendEquationAlpha = renderState.blendEquationAlpha);\r\n\t\t\t\tsrcRGB == null && (srcRGB = renderState.srcBlendRGB);\r\n\t\t\t\tdstRGB == null && (dstRGB = renderState.dstBlendRGB);\r\n\t\t\t\tsrcAlpha == null && (srcAlpha = renderState.srcBlendAlpha);\r\n\t\t\t\tdstAlpha == null && (dstAlpha = renderState.dstBlendAlpha);\r\n\t\t\t\tWebGLContext.setBlend(gl, true);\r\n\t\t\t\tWebGLContext.setBlendEquationSeparate(gl, blendEquationRGB, blendEquationAlpha);\r\n\t\t\t\tWebGLContext.setBlendFuncSeperate(gl, srcRGB, dstRGB, srcAlpha, dstAlpha);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tuploadRenderStateFrontFace(shaderDatas: ShaderData, isTarget: boolean, invertFront: boolean): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar renderState: RenderState = this._shaderPass.renderState;\r\n\t\tvar datas: any = shaderDatas.getData();\r\n\r\n\t\tvar cull: any = this._getRenderState(datas, Shader3D.RENDER_STATE_CULL);\r\n\t\tcull == null && (cull = renderState.cull);\r\n\r\n\t\tvar forntFace: number;\r\n\t\tswitch (cull) {\r\n\t\t\tcase RenderState.CULL_NONE:\r\n\t\t\t\tWebGLContext.setCullFace(gl, false);\r\n\t\t\t\tbreak;\r\n\t\t\tcase RenderState.CULL_FRONT:\r\n\t\t\t\tWebGLContext.setCullFace(gl, true);\r\n\t\t\t\t//forntFace = isTarget ? invertFront ? WebGLContext.CCW : WebGLContext.CW : invertFront ? WebGLContext.CW : WebGLContext.CCW;\r\n\t\t\t\tif (isTarget) {\r\n\t\t\t\t\tif (invertFront)\r\n\t\t\t\t\t\tforntFace = gl.CCW;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tforntFace = gl.CW;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (invertFront)\r\n\t\t\t\t\t\tforntFace = gl.CW;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tforntFace = gl.CCW;\r\n\t\t\t\t}\r\n\t\t\t\tWebGLContext.setFrontFace(gl, forntFace);\r\n\t\t\t\tbreak;\r\n\t\t\tcase RenderState.CULL_BACK:\r\n\t\t\t\tWebGLContext.setCullFace(gl, true);\r\n\t\t\t\tif (isTarget) {\r\n\t\t\t\t\tif (invertFront)\r\n\t\t\t\t\t\tforntFace = gl.CW;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tforntFace = gl.CCW;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (invertFront)\r\n\t\t\t\t\t\tforntFace = gl.CCW;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tforntFace = gl.CW;\r\n\t\t\t\t}\r\n\t\t\t\tWebGLContext.setFrontFace(gl, forntFace);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tuploadCustomUniform(index: number, data: any): void {\r\n\t\tStat.shaderCall += LayaGLRunner.uploadCustomUniform((<any>LayaGL.instance), this._customUniformParamsMap, index, data);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * [NATIVE]\r\n\t */\r\n\t_uniformMatrix2fvForNative(one: any, value: any): number {\r\n\t\t(<any>LayaGL.instance).uniformMatrix2fvEx(one.location, false, value);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * [NATIVE]\r\n\t */\r\n\t_uniformMatrix3fvForNative(one: any, value: any): number {\r\n\t\t(<any>LayaGL.instance).uniformMatrix3fvEx(one.location, false, value);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * [NATIVE]\r\n\t */\r\n\t_uniformMatrix4fvForNative(one: any, m: Float32Array): number {\r\n\t\t(<any>LayaGL.instance).uniformMatrix4fvEx(one.location, false, m);\r\n\t\treturn 1;\r\n\t}\r\n}\r\n\r\n","import { SingletonList } from \"./SingletonList\";\r\nimport { ISingletonElement } from \"../../resource/ISingletonElement\"\r\n\r\n/**\r\n * <code>SimpleSingletonList</code> 类用于实现单例队列。\r\n */\r\nexport class SimpleSingletonList extends SingletonList<ISingletonElement> {\r\n\t/**\r\n\t * 创建一个新的 <code>SimpleSingletonList</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tadd(element: ISingletonElement): void {\r\n\t\tvar index: number = element._getIndexInList();\r\n\t\tif (index !== -1)\r\n\t\t\tthrow \"SimpleSingletonList:\" + element + \" has  in  SingletonList.\";\r\n\t\tthis._add(element);\r\n\t\telement._setIndexInList(this.length++);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tremove(element: ISingletonElement): void {\r\n\t\tvar index: number = element._getIndexInList();\r\n\t\tthis.length--;\r\n\t\tif (index !== this.length) {\r\n\t\t\tvar end: any = this.elements[this.length];\r\n\t\t\tthis.elements[index] = end;\r\n\t\t\tend._setIndexInList(index);\r\n\t\t}\r\n\t\telement._setIndexInList(-1);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tclear(): void {\r\n\t\tvar elements: ISingletonElement[] = this.elements;\r\n\t\tfor (var i: number = 0, n: number = this.length; i < n; i++)\r\n\t\t\telements[i]._setIndexInList(-1);\r\n\t\tthis.length = 0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../core/IClone\"\r\n\r\n/**\r\n * <code>Color</code> 类用于创建颜色实例。\r\n */\r\nexport class Color implements IClone {\r\n\t/**\r\n\t * 红色\r\n\t */\r\n\tstatic RED: Color = new Color(1, 0, 0, 1);\r\n\t/**\r\n\t * 绿色\r\n\t */\r\n\tstatic GREEN: Color = new Color(0, 1, 0, 1);\r\n\t/**\r\n\t * 蓝色\r\n\t */\r\n\tstatic BLUE: Color = new Color(0, 0, 1, 1);\r\n\t/**\r\n\t * 蓝绿色\r\n\t */\r\n\tstatic CYAN: Color = new Color(0, 1, 1, 1);\r\n\t/**\r\n\t * 黄色\r\n\t */\r\n\tstatic YELLOW: Color = new Color(1, 0.92, 0.016, 1);\r\n\t/**\r\n\t * 品红色\r\n\t */\r\n\tstatic MAGENTA: Color = new Color(1, 0, 1, 1);\r\n\t/**\r\n\t * 灰色\r\n\t */\r\n\tstatic GRAY: Color = new Color(0.5, 0.5, 0.5, 1);\r\n\t/**\r\n\t * 白色\r\n\t */\r\n\tstatic WHITE: Color = new Color(1, 1, 1, 1);\r\n\t/**\r\n\t * 黑色\r\n\t */\r\n\tstatic BLACK: Color = new Color(0, 0, 0, 1);\r\n\r\n\t/**\r\n\t * Gamma空间值转换到线性空间。\r\n\t * @param value gamma空间值。\r\n\t */\r\n\tstatic gammaToLinearSpace(value: number): number {\r\n\t\t// http://www.opengl.org/registry/specs/EXT/framebuffer_sRGB.txt\r\n\t\t// http://www.opengl.org/registry/specs/EXT/texture_sRGB_decode.txt\r\n\t\t// {  cs / 12.92,                 cs <= 0.04045 }\r\n\t\t// {  ((cs + 0.055)/1.055)^2.4,   cs >  0.04045 }\r\n\t\tif (value <= 0.04045)\r\n\t\t\treturn value / 12.92;\r\n\t\telse if (value < 1.0)\r\n\t\t\treturn Math.pow((value + 0.055) / 1.055, 2.4);\r\n\t\telse\r\n\t\t\treturn Math.pow(value, 2.4);\r\n\t}\r\n\r\n\t/**\r\n\t * 线性空间值转换到Gamma空间。\r\n\t * @param value 线性空间值。\r\n\t */\r\n\tstatic linearToGammaSpace(value: number): number {\r\n\t\t// http://www.opengl.org/registry/specs/EXT/framebuffer_sRGB.txt\r\n\t\t// http://www.opengl.org/registry/specs/EXT/texture_sRGB_decode.txt\r\n\t\t// {  0.0,                          0         <= cl\r\n\t\t// {  12.92 * c,                    0         <  cl < 0.0031308\r\n\t\t// {  1.055 * cl^0.41666 - 0.055,   0.0031308 <= cl < 1\r\n\t\t// {  1.0,                                       cl >= 1  <- This has been adjusted since we want to maintain HDR colors\r\n\t\tif (value <= 0.0)\r\n\t\t\treturn 0.0;\r\n\t\telse if (value <= 0.0031308)\r\n\t\t\treturn 12.92 * value;\r\n\t\telse if (value <= 1.0)\r\n\t\t\treturn 1.055 * Math.pow(value, 0.41666) - 0.055;\r\n\t\telse\r\n\t\t\treturn Math.pow(value, 0.41666);\r\n\t}\r\n\r\n\t/**red分量*/\r\n\tr: number;\r\n\t/**green分量*/\r\n\tg: number;\r\n\t/**blue分量*/\r\n\tb: number;\r\n\t/**alpha分量*/\r\n\ta: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Color</code> 实例。\r\n\t * @param\tr  颜色的red分量。\r\n\t * @param\tg  颜色的green分量。\r\n\t * @param\tb  颜色的blue分量。\r\n\t * @param\ta  颜色的alpha分量。\r\n\t */\r\n\tconstructor(r: number = 1, g: number = 1, b: number = 1, a: number = 1) {\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\t\tthis.a = a;\r\n\t}\r\n\r\n\t/**\r\n\t * Gamma空间转换到线性空间。\r\n\t * @param\tlinear 线性空间颜色。\r\n\t */\r\n\ttoLinear(out: Color): void {\r\n\t\tout.r = Color.gammaToLinearSpace(this.r);\r\n\t\tout.g = Color.gammaToLinearSpace(this.g);\r\n\t\tout.b = Color.gammaToLinearSpace(this.b);\r\n\t}\r\n\r\n\t/**\r\n\t * 线性空间转换到Gamma空间。\r\n\t * @param\tgamma Gamma空间颜色。\r\n\t */\r\n\ttoGamma(out: Color): void {\r\n\t\tout.r = Color.linearToGammaSpace(this.r);\r\n\t\tout.g = Color.linearToGammaSpace(this.g);\r\n\t\tout.b = Color.linearToGammaSpace(this.b);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destColor: Color = (<Color>destObject);\r\n\t\tdestColor.r = this.r;\r\n\t\tdestColor.g = this.g;\r\n\t\tdestColor.b = this.b;\r\n\t\tdestColor.a = this.a;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: Color = new Color();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\tforNativeElement(): void {//[NATIVE_TS]\r\n\t\t/*if (nativeElements) {\r\n\t\t\tthis.elements = nativeElements;\r\n\t\t\tthis.elements[0] = this.r;\r\n\t\t\tthis.elements[1] = this.g;\r\n\t\t\tthis.elements[2] = this.b;\r\n\t\t\tthis.elements[3] = this.a;\r\n\t\t} else {\r\n\t\t\tthis.elements = new Float32Array([this.r,this.g,this.b,this.a]);\r\n\t\t}\r\n\t\tVector2.rewriteNumProperty(this, \"r\", 0);\r\n\t\tVector2.rewriteNumProperty(this, \"g\", 1);\r\n\t\tVector2.rewriteNumProperty(this, \"b\", 2);\r\n\t\tVector2.rewriteNumProperty(this, \"a\", 3);*/\r\n\t}\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Render } from \"../../renders/Render\";\r\nimport { ISingletonElement } from \"../../resource/ISingletonElement\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { SimpleSingletonList } from \"../component/SimpleSingletonList\";\r\nimport { SingletonList } from \"../component/SingletonList\";\r\nimport { Camera } from \"../core/Camera\";\r\nimport { PixelLineSprite3D } from \"../core/pixelLine/PixelLineSprite3D\";\r\nimport { BaseRender } from \"../core/render/BaseRender\";\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\r\nimport { RenderElement } from \"../core/render/RenderElement\";\r\nimport { RenderQueue } from \"../core/render/RenderQueue\";\r\nimport { BoundsOctree } from \"../core/scene/BoundsOctree\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { BoundFrustum } from \"../math/BoundFrustum\";\r\nimport { Color } from \"../math/Color\";\r\nimport { Plane } from \"../math/Plane\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Shader3D } from \"../shader/Shader3D\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { DynamicBatchManager } from \"./DynamicBatchManager\";\r\nimport { StaticBatchManager } from \"./StaticBatchManager\";\r\nimport { Bounds } from \"../core/Bounds\";\r\nimport { BoundSphere } from \"../math/BoundSphere\";\r\n\r\n\r\nexport class CameraCullInfo {\r\n\tposition: Vector3;\r\n\r\n\tuseOcclusionCulling: Boolean;\r\n\tboundFrustum: BoundFrustum;\r\n\tcullingMask: number;\r\n}\r\n\r\nexport class ShadowCullInfo {\r\n\tposition: Vector3;\r\n\tcullPlanes: Plane[];\r\n\tcullSphere: BoundSphere;\r\n\tcullPlaneCount: number;\r\n\tdirection: Vector3;\r\n}\r\n\r\n/**\r\n * @internal\r\n * <code>FrustumCulling</code> 类用于裁剪。\r\n */\r\nexport class FrustumCulling {\r\n\t/**@internal */\r\n\tprivate static _tempColor0: Color = new Color();\r\n\t/**@internal */\r\n\tprivate static _tempVector0: Vector3 = new Vector3();\r\n\r\n\t/**@internal */\r\n\tstatic _cameraCullInfo: CameraCullInfo = new CameraCullInfo();\r\n\t/**@internal */\r\n\tstatic _shadowCullInfo: ShadowCullInfo = new ShadowCullInfo();\r\n\r\n\t/**@internal */\r\n\tstatic debugFrustumCulling: boolean = false;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tif (Render.supportWebGLPlusCulling) {//[NATIVE]\r\n\t\t\tFrustumCulling._cullingBufferLength = 0;\r\n\t\t\tFrustumCulling._cullingBuffer = new Float32Array(4096);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _drawTraversalCullingBound(renderList: SingletonList<ISingletonElement>, debugTool: PixelLineSprite3D): void {\r\n\t\tvar renders: ISingletonElement[] = renderList.elements;\r\n\t\tfor (var i: number = 0, n: number = renderList.length; i < n; i++) {\r\n\t\t\tvar color: Color = FrustumCulling._tempColor0;\r\n\t\t\tcolor.r = 0;\r\n\t\t\tcolor.g = 1;\r\n\t\t\tcolor.b = 0;\r\n\t\t\tcolor.a = 1;\r\n\t\t\tUtils3D._drawBound(debugTool, ((<BaseRender>renders[i])).bounds._getBoundBox(), color);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _traversalCulling(cameraCullInfo: CameraCullInfo, scene: Scene3D, context: RenderContext3D, renderList: SingletonList<ISingletonElement>, customShader: Shader3D, replacementTag: string, isShadowCasterCull: boolean): void {\r\n\t\tvar renders: ISingletonElement[] = renderList.elements;\r\n\t\tvar boundFrustum: BoundFrustum = cameraCullInfo.boundFrustum;\r\n\t\tvar camPos: Vector3 = cameraCullInfo.position;\r\n\t\tvar cullMask: number = cameraCullInfo.cullingMask;\r\n\t\tvar loopCount: number = Stat.loopCount;\r\n\t\tfor (var i: number = 0, n: number = renderList.length; i < n; i++) {\r\n\t\t\tvar render: BaseRender = <BaseRender>renders[i];\r\n\t\t\tvar canPass: boolean;\r\n\t\t\tif (isShadowCasterCull)\r\n\t\t\t\tcanPass = render._castShadow && render._enable;\r\n\t\t\telse\r\n\t\t\t\tcanPass = ((Math.pow(2, render._owner._layer) & cullMask) != 0) && render._enable;\r\n\r\n\t\t\tif (canPass) {\r\n\t\t\t\tStat.frustumCulling++;\r\n\t\t\t\tif (!cameraCullInfo.useOcclusionCulling || render._needRender(boundFrustum, context)) {\r\n\t\t\t\t\trender._renderMark = loopCount;\r\n\t\t\t\t\trender._distanceForSort = Vector3.distance(render.bounds.getCenter(), camPos);//TODO:合并计算浪费,或者合并后取平均值\r\n\t\t\t\t\tvar elements: RenderElement[] = render._renderElements;\r\n\t\t\t\t\tfor (var j: number = 0, m: number = elements.length; j < m; j++)\r\n\t\t\t\t\t\telements[j]._update(scene, context, customShader, replacementTag);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic renderObjectCulling(cameraCullInfo: CameraCullInfo, scene: Scene3D, context: RenderContext3D, customShader: Shader3D, replacementTag: string, isShadowCasterCull: boolean): void {\r\n\t\tvar opaqueQueue: RenderQueue = scene._opaqueQueue;\r\n\t\tvar transparentQueue: RenderQueue = scene._transparentQueue;\r\n\t\tvar renderList: SingletonList<ISingletonElement> = scene._renders;\r\n\t\tscene._clearRenderQueue();\r\n\t\tvar octree: BoundsOctree = scene._octree;\r\n\t\tif (octree) {\r\n\t\t\toctree.updateMotionObjects();\r\n\t\t\toctree.shrinkRootIfPossible();\r\n\t\t\toctree.getCollidingWithFrustum(cameraCullInfo, context, customShader, replacementTag, isShadowCasterCull);\r\n\t\t}\r\n\t\t//else {//包围盒不完善的节点走遍历裁剪\r\n\t\tFrustumCulling._traversalCulling(cameraCullInfo, scene, context, renderList, customShader, replacementTag, isShadowCasterCull);\r\n\t\t//}\r\n\r\n\t\tif (FrustumCulling.debugFrustumCulling) {\r\n\t\t\tvar debugTool: PixelLineSprite3D = scene._debugTool;\r\n\t\t\tdebugTool.clear();\r\n\t\t\tif (octree) {\r\n\t\t\t\toctree.drawAllBounds(debugTool);\r\n\t\t\t\toctree.drawAllObjects(debugTool);\r\n\t\t\t}\r\n\t\t\t//else {//包围盒不完善的节点走遍历裁剪\r\n\t\t\tFrustumCulling._drawTraversalCullingBound(renderList, debugTool);\r\n\t\t\t//}\r\n\t\t}\r\n\r\n\t\tvar count: number = opaqueQueue.elements.length;\r\n\t\t(count > 0) && (opaqueQueue._quickSort(0, count - 1));\r\n\t\tcount = transparentQueue.elements.length;\r\n\t\t(count > 0) && (transparentQueue._quickSort(0, count - 1));\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic cullingShadow(cullInfo: ShadowCullInfo, scene: Scene3D, context: RenderContext3D): boolean {\r\n\t\r\n\t\tvar renderList: SingletonList<ISingletonElement> = scene._renders;\r\n\t\tscene._clearRenderQueue();\r\n\t\tvar opaqueQueue = scene._opaqueQueue;\r\n\t\t//var renderList: SingletonList<ISingletonElement> = scene._renders;\r\n\t\tvar position: Vector3 = cullInfo.position;\r\n\t\tvar cullPlaneCount: number = cullInfo.cullPlaneCount;\r\n\t\tvar cullPlanes: Plane[] = cullInfo.cullPlanes;\r\n\t\tvar cullSphere: BoundSphere = cullInfo.cullSphere;\r\n\t\tvar direction: Vector3 = cullInfo.direction;\r\n\t\tvar renders: ISingletonElement[] = renderList.elements;\r\n\t\tvar loopCount: number = Stat.loopCount;\r\n\t\tfor (var i: number = 0, n: number = renderList.length; i < n; i++) {\r\n\t\t\tvar render: BaseRender = <BaseRender>renders[i];\r\n\t\t\tvar canPass: boolean = render._castShadow && render._enable;\r\n\t\t\tif (canPass) {\r\n\t\t\t\tStat.frustumCulling++;\r\n\t\t\t\tvar bounds: Bounds = render.bounds;\r\n\t\t\t\tvar min: Vector3 = bounds.getMin();\r\n\t\t\t\tvar max: Vector3 = bounds.getMax();\r\n\t\t\t\tvar minX: number = min.x;\r\n\t\t\t\tvar minY: number = min.y;\r\n\t\t\t\tvar minZ: number = min.z;\r\n\t\t\t\tvar maxX: number = max.x;\r\n\t\t\t\tvar maxY: number = max.y;\r\n\t\t\t\tvar maxZ: number = max.z;\r\n\t\t\t\t//TODO:通过相机裁剪直接pass\r\n\r\n\t\t\t\tvar pass: boolean = true;\r\n\t\t\t\t// cull by planes\r\n\t\t\t\t// Improve:Maybe use sphre and direction cull can savle the far plane cull\r\n\t\t\t\tfor (var j: number = 0; j < cullPlaneCount; j++) {\r\n\t\t\t\t\tvar plane: Plane = cullPlanes[j];\r\n\t\t\t\t\tvar normal: Vector3 = plane.normal;\r\n\t\t\t\t\tif (plane.distance + (normal.x * (normal.x < 0.0 ? minX : maxX)) + (normal.y * (normal.y < 0.0 ? minY : maxY)) + (normal.z * (normal.z < 0.0 ? minZ : maxZ)) < 0.0) {\r\n\t\t\t\t\t\tpass = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (pass) {\r\n\t\t\t\t\trender._renderMark = loopCount;\r\n\t\t\t\t\trender._distanceForSort = Vector3.distance(bounds.getCenter(), position);//TODO:合并计算浪费,或者合并后取平均值\r\n\t\t\t\t\tvar elements: RenderElement[] = render._renderElements;\r\n\t\t\t\t\tfor (var j: number = 0, m: number = elements.length; j < m; j++)\r\n\t\t\t\t\t\telements[j]._update(scene, context, null, null);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn opaqueQueue.elements.length > 0 ? true : false;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic cullingSpotShadow(cameraCullInfo:CameraCullInfo,scene: Scene3D, context: RenderContext3D):boolean\r\n\t{\r\n\t\tvar renderList: SingletonList<ISingletonElement> = scene._renders;\r\n\t\tscene._clearRenderQueue();\r\n\t\tvar opaqueQueue = scene._opaqueQueue;\r\n\t\tvar renders: ISingletonElement[] = renderList.elements;\r\n\t\tvar loopCount: number = Stat.loopCount;\r\n\t\tfor (var i: number = 0, n: number = renderList.length; i < n; i++) {\r\n\t\t\tvar render: BaseRender = <BaseRender>renders[i];\r\n\t\t\tvar canPass: boolean = render._castShadow && render._enable;\r\n\t\t\tif (canPass) {\r\n\t\t\t\tif(render._needRender(cameraCullInfo.boundFrustum,context)){\r\n\t\t\t\t\tvar bounds = render.bounds;\r\n\t\t\t\t\trender._renderMark = loopCount;\r\n\t\t\t\t\trender._distanceForSort = Vector3.distance(bounds.getCenter(),cameraCullInfo.position);\r\n\t\t\t\t\tvar elements:RenderElement[] = render._renderElements;\r\n\t\t\t\t\tfor (var j: number = 0, m: number = elements.length; j < m; j++)\r\n\t\t\t\t\t\telements[j]._update(scene, context, null, null);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn opaqueQueue.elements.length>0?true:false;\r\n\t}\r\n\t//---------------------------------------------------------NATIVE---------------------------------------------------------------------------------------------\r\n\t/**@internal\t[NATIVE]*/\r\n\tstatic _cullingBufferLength: number;\r\n\t/**@internal\t[NATIVE]*/\r\n\tstatic _cullingBuffer: Float32Array;\r\n\r\n\t/**\r\n\t * @internal [NATIVE]\r\n\t */\r\n\tstatic renderObjectCullingNative(camera: Camera, scene: Scene3D, context: RenderContext3D, renderList: SimpleSingletonList, customShader: Shader3D, replacementTag: string): void {\r\n\t\tvar i: number, n: number, j: number, m: number;\r\n\t\tvar opaqueQueue: RenderQueue = scene._opaqueQueue;\r\n\t\tvar transparentQueue: RenderQueue = scene._transparentQueue;\r\n\t\tscene._clearRenderQueue();\r\n\t\tvar validCount: number = renderList.length;\r\n\t\tvar renders: ISingletonElement[] = renderList.elements;\r\n\t\tfor (i = 0; i < validCount; i++) {\r\n\t\t\t((<BaseRender>renders[i])).bounds;\r\n\t\t\t(<any>renders[i])._updateForNative && (<any>renders[i])._updateForNative(context);\r\n\t\t}\r\n\t\tvar boundFrustum: BoundFrustum = camera.boundFrustum;\r\n\t\tFrustumCulling.cullingNative(camera._boundFrustumBuffer, FrustumCulling._cullingBuffer, scene._cullingBufferIndices, validCount, scene._cullingBufferResult);\r\n\r\n\t\tvar loopCount: number = Stat.loopCount;\r\n\t\tvar camPos: Vector3 = context.camera._transform.position;\r\n\r\n\t\tfor (i = 0; i < validCount; i++) {\r\n\t\t\tvar render: BaseRender = <BaseRender>renders[i];\r\n\t\t\tif (!camera.useOcclusionCulling || (camera._isLayerVisible(render._owner._layer) && render._enable && scene._cullingBufferResult[i])) {//TODO:需要剥离部分函数\r\n\t\t\t\trender._renderMark = loopCount;\r\n\t\t\t\trender._distanceForSort = Vector3.distance(render.bounds.getCenter(), camPos);//TODO:合并计算浪费,或者合并后取平均值\r\n\t\t\t\tvar elements: RenderElement[] = render._renderElements;\r\n\t\t\t\tfor (j = 0, m = elements.length; j < m; j++) {\r\n\t\t\t\t\tvar element: RenderElement = elements[j];\r\n\t\t\t\t\telement._update(scene, context, customShader, replacementTag);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar count: number = opaqueQueue.elements.length;\r\n\t\t(count > 0) && (opaqueQueue._quickSort(0, count - 1));\r\n\t\tcount = transparentQueue.elements.length;\r\n\t\t(count > 0) && (transparentQueue._quickSort(0, count - 1));\r\n\t}\r\n\r\n\t/**\r\n\t * @internal [NATIVE]\r\n\t */\r\n\tstatic cullingNative(boundFrustumBuffer: Float32Array, cullingBuffer: Float32Array, cullingBufferIndices: Int32Array, cullingCount: number, cullingBufferResult: Int32Array): number {\r\n\t\treturn (<any>LayaGL.instance).culling(boundFrustumBuffer, cullingBuffer, cullingBufferIndices, cullingCount, cullingBufferResult);\r\n\t}\r\n}\r\n\r\n","import { Config3D } from \"../../../../Config3D\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Camera } from \"../../core/Camera\";\r\nimport { LightQueue } from \"../../core/light/LightQueue\";\r\nimport { PointLight } from \"../../core/light/PointLight\";\r\nimport { SpotLight } from \"../../core/light/SpotLight\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { Matrix4x4 } from \"../../math/Matrix4x4\";\r\nimport { Vector2 } from \"../../math/Vector2\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\n\r\n/**\r\n * @internal\r\n */\r\nclass LightBound {\r\n    xMin: number;\r\n    xMax: number;\r\n    yMin: number;\r\n    yMax: number;\r\n    zMin: number;\r\n    zMax: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nclass ClusterData {\r\n    updateMark: number = -1;\r\n    pointLightCount: number = 0;\r\n    spotLightCount: number = 0;\r\n    indices: number[] = [];\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class Cluster {\r\n    private static _tempVector30: Vector3 = new Vector3();\r\n    private static _tempVector31: Vector3 = new Vector3();\r\n    private static _tempVector32: Vector3 = new Vector3();\r\n    private static _tempVector33: Vector3 = new Vector3();\r\n    private static _tempVector34: Vector3 = new Vector3();\r\n    private static _tempVector35: Vector3 = new Vector3();\r\n    private static _tempVector36: Vector3 = new Vector3();\r\n    private static _tempVector37: Vector3 = new Vector3();\r\n    private static _tempLightBound: LightBound = new LightBound();\r\n\r\n    static instance: Cluster;\r\n\r\n    private _xSlices: number;\r\n    private _ySlices: number;\r\n    private _zSlices: number;\r\n    private _clusterDatas: ClusterData[][][];\r\n    private _clusterPixels: Float32Array;\r\n    private _updateMark: number = 0;\r\n    private _depthSliceParam: Vector2 = new Vector2();\r\n\r\n    public _clusterTexture: Texture2D;\r\n\r\n    constructor(xSlices: number, ySlices: number, zSlices: number, maxLightsPerClusterAverage: number) {\r\n        this._xSlices = xSlices;\r\n        this._ySlices = ySlices;\r\n        this._zSlices = zSlices;\r\n        var clusterTexWidth: number = xSlices * ySlices;\r\n        var clisterTexHeight: number = zSlices * (1 + Math.ceil(maxLightsPerClusterAverage / 4));\r\n        this._clusterTexture = Utils3D._createFloatTextureBuffer(clusterTexWidth, clisterTexHeight);\r\n        this._clusterTexture.lock = true;\r\n        this._clusterPixels = new Float32Array(clusterTexWidth * clisterTexHeight * 4);\r\n\r\n        //Init for every cluster\r\n        var clusterDatas: ClusterData[][][] = new Array<Array<Array<ClusterData>>>(this._zSlices);\r\n        for (var z = 0; z < this._zSlices; z++) {\r\n            clusterDatas[z] = new Array<Array<ClusterData>>(this._ySlices);\r\n            for (var y = 0; y < this._ySlices; y++) {\r\n                clusterDatas[z][y] = new Array<ClusterData>(this._xSlices);\r\n                for (var x = 0; x < this._xSlices; x++)\r\n                    clusterDatas[z][y][x] = new ClusterData();\r\n            }\r\n        }\r\n        this._clusterDatas = clusterDatas;\r\n\r\n        /*\r\n        Layout of clusterTexture\r\n        |------------------------------------------------------U(XY)\r\n        |               cluster0               cluster1       \r\n        |        (PCou|SCou|Off0|Off1) | (PCou|SCou|Off0|Off1) \r\n        |               cluster2               cluster3      \r\n        |        (PCou|SCou|Off0|Off1) | (PCou|SCou|Off0|Off1) \r\n        |-----------------------------------------------------------\r\n        |                                    _                              \r\n        |        (poi0|poi1|spo0|spo1) |(spo2|poi0|poi1|poi2)\r\n        |             _\r\n        |        (poi3|spo0|....|....) |(....|....|....|....) \r\n        |\r\n        V(Z)\r\n        */\r\n    }\r\n\r\n    private _insertSpotLightSphere(origin: Vector3, forward: Vector3, size: number, angle: number, testSphere: Vector4): boolean {\r\n        //combine cone cull and sphere range cull\r\n        var V: Vector3 = Cluster._tempVector35;\r\n        V.x = testSphere.x - origin.x;\r\n        V.y = testSphere.y - origin.y;\r\n        V.z = testSphere.z - origin.z;\r\n\r\n        var VlenSq = Vector3.dot(V, V);\r\n        var sphereRadius: number = testSphere.w;\r\n\r\n        var rangeCull: boolean = VlenSq > sphereRadius * sphereRadius;\r\n        if (!rangeCull)\r\n            return false;\r\n\r\n        var V1len: number = Vector3.dot(V, forward);\r\n        var distanceClosestPoint: number = Math.cos(angle) * Math.sqrt(VlenSq - V1len * V1len) - V1len * Math.sin(angle);\r\n\r\n        var angleCull: boolean = distanceClosestPoint > sphereRadius;\r\n        var frontCull: boolean = V1len > sphereRadius + size;\r\n        var backCull: boolean = V1len < -sphereRadius;\r\n        return !(angleCull || frontCull || backCull);\r\n    }\r\n\r\n    private _placePointLightToClusters(lightIndex: number, lightBound: LightBound): void {\r\n        var clusterDatas: ClusterData[][][] = this._clusterDatas;\r\n        var updateMark: number = this._updateMark;\r\n        for (var z: number = lightBound.zMin, zEnd: number = lightBound.zMax; z < zEnd; z++) {\r\n            for (var y: number = lightBound.yMin, yEnd: number = lightBound.yMax; y < yEnd; y++) {\r\n                for (var x: number = lightBound.xMin, xEnd: number = lightBound.xMax; x < xEnd; x++) {\r\n                    var data: ClusterData = clusterDatas[z][y][x];\r\n                    if (data.updateMark != updateMark) {\r\n                        data.pointLightCount = 0;\r\n                        data.spotLightCount = 0;\r\n                        data.updateMark = updateMark;\r\n                    }\r\n                    var indices: number[] = data.indices;\r\n                    var lightCount: number = data.pointLightCount++;\r\n                    if (lightCount < indices.length)\r\n                        indices[lightCount] = lightIndex;\r\n                    else\r\n                        indices.push(lightIndex);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _placeSpotLightToClusters(lightIndex: number, lightBound: LightBound): void {\r\n        var clusterDatas: ClusterData[][][] = this._clusterDatas;\r\n        var updateMark: number = this._updateMark;\r\n        for (var z: number = lightBound.zMin, zEnd: number = lightBound.zMax; z < zEnd; z++) {\r\n            for (var y: number = lightBound.yMin, yEnd: number = lightBound.yMax; y < yEnd; y++) {\r\n                for (var x: number = lightBound.xMin, xEnd: number = lightBound.xMax; x < xEnd; x++) {\r\n                    var data: ClusterData = clusterDatas[z][y][x];\r\n                    if (data.updateMark != updateMark) {\r\n                        data.pointLightCount = 0;\r\n                        data.spotLightCount = 0;\r\n                        data.updateMark = updateMark;\r\n                    }\r\n                    var indices: number[] = data.indices;\r\n                    var lightCount: number = data.pointLightCount + data.spotLightCount++;\r\n                    if (lightCount < indices.length)\r\n                        indices[lightCount] = lightIndex;\r\n                    else\r\n                        indices.push(lightIndex);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private _insertConePlane(origin: Vector3, forward: Vector3, radius: number, halfAngle: number, pNor: Vector3): boolean {\r\n        //https://bartwronski.com/2017/04/13/cull-that-cone/\r\n        //because distance is always zero so we ease this method\r\n        var V1: Vector3 = Cluster._tempVector36;\r\n        var V2: Vector3 = Cluster._tempVector37;\r\n        Vector3.cross(pNor, forward, V1);\r\n        Vector3.cross(V1, forward, V2);\r\n        Vector3.normalize(V2, V2);\r\n        var tanR: number = radius * Math.tan(halfAngle);\r\n        var capRimX: number = origin.x + radius * forward.x + tanR * V2.x;\r\n        var capRimY: number = origin.y + radius * forward.y + tanR * V2.y;\r\n        var capRimZ: number = origin.z + radius * forward.z + tanR * V2.z;\r\n\r\n        return capRimX * pNor.x + capRimY * pNor.y + capRimZ * pNor.z <= 0 || origin.x * pNor.x + origin.y * pNor.y + origin.z * pNor.z <= 0;\r\n    }\r\n\r\n\r\n    private _shrinkSphereLightZPerspective(near: number, far: number, lightviewPos: Vector3, radius: number, lightBound: LightBound): boolean {\r\n        var lvZ: number = lightviewPos.z;\r\n        var minZ: number = lvZ - radius;\r\n        var maxZ: number = lvZ + radius;\r\n\r\n        if ((minZ > far) || (maxZ <= near))\r\n            return false;\r\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\r\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\r\n        var depthSliceParam: Vector2 = this._depthSliceParam;\r\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\r\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\r\n        return true;\r\n    }\r\n\r\n    private _shrinkSpotLightZPerspective(near: number, far: number, viewLightPos: Vector3, viewConeCap: Vector3, radius: number, halfAngle: number, lightBound: LightBound): boolean {\r\n        //https://bartwronski.com/2017/04/13/cull-that-cone/\r\n        //http://www.iquilezles.org/www/articles/diskbbox/diskbbox.htm\r\n\r\n        var pbX: number = viewConeCap.x, pbY: number = viewConeCap.y, pbZ: number = viewConeCap.z;\r\n        var rb: number = Math.tan(halfAngle) * radius;\r\n        var paX: number = viewLightPos.x, paY: number = viewLightPos.y, paZ: number = viewLightPos.z;\r\n        var aX: number = pbX - paX, aY: number = pbY - paY, aZ: number = pbZ - paZ;\r\n        var dotA: number = aX * aX + aY * aY + aZ * aZ;\r\n        var eZ: number = Math.sqrt(1.0 - aZ * aZ / dotA);\r\n\r\n        //flat-capped cone is not spotLight shape,spoltlight is sphere-capped.so we get the common boundBox of flat-capped cone bounds and sphere bounds.\r\n        var minZ: number = Math.max(Math.min(paZ, pbZ - eZ * rb), viewLightPos.z - radius);\r\n        var maxZ: number = Math.min(Math.max(paZ, pbZ + eZ * rb), viewLightPos.z + radius);\r\n\r\n        if ((minZ > far) || (maxZ <= near))\r\n            return false;\r\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\r\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\r\n        var depthSliceParam: Vector2 = this._depthSliceParam;\r\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\r\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\r\n        return true;\r\n    }\r\n\r\n    private _shrinkSphereLightByBoundOrth(halfX: number, halfY: number, near: number, far: number, lightviewPos: Vector3, radius: number, lightBound: LightBound): boolean {\r\n        var lvZ: number = lightviewPos.z;\r\n        var minZ: number = lvZ - radius, maxZ: number = lvZ + radius;\r\n        if ((minZ > far) || (maxZ <= near))\r\n            return false;\r\n        var lvX: number = lightviewPos.x;\r\n        var minX: number = lvX - radius, maxX: number = lvX + radius;\r\n        if ((minX > halfX) || (maxX <= -halfX))\r\n            return false;\r\n        var lvY: number = lightviewPos.y;\r\n        var minY: number = lvY - radius, maxY: number = lvY + radius;\r\n        if ((minY > halfY) || (maxY <= -halfY))\r\n            return false;\r\n\r\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\r\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\r\n        var xSlices: number = this._xSlices, ySlices: number = this._ySlices;\r\n        var depthSliceParam: Vector2 = this._depthSliceParam;\r\n        var xStride: number = halfX * 2 / xSlices, yStride: number = halfY * 2 / ySlices;\r\n        lightBound.xMin = Math.max(Math.floor((minX + halfX) / xStride), 0);\r\n        lightBound.xMax = Math.min(Math.ceil((maxX + halfX) / xStride), xSlices);\r\n        lightBound.yMin = Math.max(Math.floor((halfY - maxY) / yStride), 0);//zero is from top\r\n        lightBound.yMax = Math.min(Math.ceil((halfY - minY) / yStride), ySlices);\r\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\r\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\r\n        return true;\r\n    }\r\n\r\n    private _shrinkSpotLightByBoundOrth(halfX: number, halfY: number, near: number, far: number, viewLightPos: Vector3, viewConeCap: Vector3, radius: number, halfAngle: number, lightBound: LightBound): boolean {\r\n        //https://bartwronski.com/2017/04/13/cull-that-cone/\r\n        //http://www.iquilezles.org/www/articles/diskbbox/diskbbox.htm\r\n        var pbX: number = viewConeCap.x, pbY: number = viewConeCap.y, pbZ: number = viewConeCap.z;\r\n        var rb: number = Math.tan(halfAngle) * radius;\r\n        var paX: number = viewLightPos.x, paY: number = viewLightPos.y, paZ: number = viewLightPos.z;\r\n        var aX: number = pbX - paX, aY: number = pbY - paY, aZ: number = pbZ - paZ;\r\n        var dotA: number = aX * aX + aY * aY + aZ * aZ;\r\n\r\n        //flat-capped cone is not spotLight shape,spoltlight is sphere-capped.so we get the common boundBox of flat-capped cone bounds and sphere bounds.\r\n        var eZ: number = Math.sqrt(1.0 - aZ * aZ / dotA);\r\n        var minZ: number = Math.max(Math.min(paZ, pbZ - eZ * rb), viewLightPos.z - radius);\r\n        var maxZ: number = Math.min(Math.max(paZ, pbZ + eZ * rb), viewLightPos.z + radius);\r\n        if ((minZ > far) || (maxZ <= near))\r\n            return false;\r\n        var eX: number = Math.sqrt(1.0 - aX * aX / dotA);\r\n        var minX: number = Math.max(Math.min(paX, pbX - eX * rb), viewLightPos.x - radius);\r\n        var maxX: number = Math.min(Math.max(paX, pbX + eX * rb), viewLightPos.x + radius);\r\n        if ((minX > halfX) || (maxX <= -halfX))\r\n            return false;\r\n        var eY: number = Math.sqrt(1.0 - aY * aY / dotA);\r\n        var minY: number = Math.max(Math.min(paY, pbY - eY * rb), viewLightPos.y - radius);\r\n        var maxY: number = Math.min(Math.max(paY, pbY + eY * rb), viewLightPos.y + radius);\r\n        if ((minY > halfY) || (maxY <= -halfY))\r\n            return false;\r\n\r\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\r\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\r\n        var xSlices: number = this._xSlices, ySlices: number = this._ySlices;\r\n        var depthSliceParam: Vector2 = this._depthSliceParam;\r\n        var xStride: number = halfX * 2 / xSlices, yStride: number = halfY * 2 / ySlices;\r\n        lightBound.xMin = Math.max(Math.floor((minX + halfX) / xStride), 0);\r\n        lightBound.xMax = Math.min(Math.ceil((maxX + halfX) / xStride), xSlices);\r\n        lightBound.yMin = Math.max(Math.floor((halfY - maxY) / yStride), 0);//zero is from top\r\n        lightBound.yMax = Math.min(Math.ceil((halfY - minY) / yStride), ySlices);\r\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\r\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\r\n        return true;\r\n    }\r\n\r\n\r\n    private _shrinkXYByRadiusPerspective(lightviewPos: Vector3, radius: number, lightBound: LightBound, xPlanes: Vector3[], yPlanes: Vector3[]): boolean {\r\n        var xMin: number, yMin: number;\r\n        var xMax: number, yMax: number;\r\n        var lvX: number = lightviewPos.x, lvY: number = lightviewPos.y, lvZ: number = lightviewPos.z;\r\n\r\n        var i: number;\r\n        var n: number = this._ySlices + 1;\r\n        for (i = 0; i < n; i++) {\r\n            var plane: Vector3 = yPlanes[i];\r\n            if (lvY * plane.y + lvZ * plane.z < radius) {//Dot\r\n                yMin = Math.max(0, i - 1);\r\n                break;\r\n            }\r\n        }\r\n        if (i == n)//fail scan insert\r\n            return false;\r\n        yMax = this._ySlices;\r\n        for (i = yMin + 1; i < n; i++) {\r\n            var plane: Vector3 = yPlanes[i];\r\n            if (lvY * plane.y + lvZ * plane.z <= -radius) {//Dot\r\n                yMax = Math.max(0, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        n = this._xSlices + 1;\r\n        for (i = 0; i < n; i++) {\r\n            var plane: Vector3 = xPlanes[i];\r\n            if (lvX * plane.x + lvZ * plane.z < radius) {//Dot\r\n                xMin = Math.max(0, i - 1);\r\n                break;\r\n            }\r\n        }\r\n        xMax = this._xSlices;\r\n        for (i = xMin + 1; i < n; i++) {\r\n            var plane: Vector3 = xPlanes[i];\r\n            if (lvX * plane.x + lvZ * plane.z <= -radius) {//Dot\r\n                xMax = Math.max(0, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n\r\n        lightBound.xMin = xMin\r\n        lightBound.xMax = xMax;\r\n        lightBound.yMin = yMin;\r\n        lightBound.yMax = yMax;\r\n        return true;\r\n    }\r\n\r\n    private _shrinkSpotXYByConePerspective(lightviewPos: Vector3, viewForward: Vector3, radius: number, halfAngle: number, lightBound: LightBound, xPlanes: Vector3[], yPlanes: Vector3[]): void {\r\n        var xMin: number, yMin: number;\r\n        var xMax: number, yMax: number;\r\n\r\n        var normal: Vector3 = Cluster._tempVector32;\r\n        var n: number = lightBound.yMax + 1;\r\n        for (var i: number = lightBound.yMin + 1; i < n; i++) {\r\n            if (this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, yPlanes[i])) {\r\n                yMin = Math.max(0, i - 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        yMax = lightBound.yMax;\r\n        for (var i: number = yMin + 1; i < n; i++) {\r\n            var plane: Vector3 = yPlanes[i];\r\n            normal.setValue(0, -plane.y, -plane.z);\r\n            if (!this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, normal)) {\r\n                yMax = Math.max(0, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        n = lightBound.xMax + 1;\r\n        for (var i: number = lightBound.xMin + 1; i < n; i++) {\r\n            if (this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, xPlanes[i])) {\r\n                xMin = Math.max(0, i - 1);\r\n                break;\r\n            }\r\n        }\r\n        xMax = lightBound.xMax;\r\n        for (var i: number = xMin + 1; i < n; i++) {\r\n            var plane: Vector3 = xPlanes[i];\r\n            normal.setValue(-plane.x, 0, -plane.z);\r\n            if (!this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, normal)) {\r\n                xMax = Math.max(0, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        lightBound.xMin = xMin;\r\n        lightBound.xMax = xMax;\r\n        lightBound.yMin = yMin;\r\n        lightBound.yMax = yMax;\r\n    }\r\n\r\n\r\n\r\n    private _updatePointLightPerspective(near: number, far: number, viewMat: Matrix4x4, pointLight: PointLight, lightIndex: number, xPlanes: Vector3[], yPlanes: Vector3[]): void {\r\n        var lightBound: LightBound = Cluster._tempLightBound;\r\n        var lightviewPos: Vector3 = Cluster._tempVector30;\r\n        Vector3.transformV3ToV3(pointLight._transform.position, viewMat, lightviewPos);//World to View\r\n        lightviewPos.z *= -1;\r\n        if (!this._shrinkSphereLightZPerspective(near, far, lightviewPos, pointLight.range, lightBound))\r\n            return;\r\n        if (!this._shrinkXYByRadiusPerspective(lightviewPos, pointLight.range, lightBound, xPlanes, yPlanes))\r\n            return;\r\n\r\n        this._placePointLightToClusters(lightIndex, lightBound);\r\n    }\r\n\r\n    private _updateSpotLightPerspective(near: number, far: number, viewMat: Matrix4x4, spotLight: SpotLight, lightIndex: number, xPlanes: Vector3[], yPlanes: Vector3[]): void {\r\n        // technically could fall outside the bounds we make because the planes themeselves are tilted by some angle\r\n        // the effect is exaggerated the steeper the angle the plane makes is\r\n        var lightBound: LightBound = Cluster._tempLightBound;\r\n        var viewPos: Vector3 = Cluster._tempVector30;\r\n        var forward: Vector3 = Cluster._tempVector31;\r\n        var viewConeCap: Vector3 = Cluster._tempVector34;\r\n        var position: Vector3 = spotLight._transform.position;\r\n        var range: number = spotLight.range;\r\n        spotLight._transform.worldMatrix.getForward(forward);\r\n        Vector3.normalize(forward, forward);\r\n        Vector3.scale(forward, range, viewConeCap);\r\n        Vector3.add(position, viewConeCap, viewConeCap);\r\n\r\n        Vector3.transformV3ToV3(position, viewMat, viewPos);//World to View\r\n        Vector3.transformV3ToV3(viewConeCap, viewMat, viewConeCap);//World to View\r\n        viewPos.z *= -1;\r\n        viewConeCap.z *= -1;\r\n        var halfAngle: number = (spotLight.spotAngle / 2) * Math.PI / 180;\r\n        if (!this._shrinkSpotLightZPerspective(near, far, viewPos, viewConeCap, range, halfAngle, lightBound))\r\n            return;\r\n        if (!this._shrinkXYByRadiusPerspective(viewPos, range, lightBound, xPlanes, yPlanes))\r\n            return;\r\n        var viewFor: Vector3 = Cluster._tempVector33;\r\n        viewFor.x = viewConeCap.x - viewPos.x, viewFor.y = viewConeCap.y - viewPos.y, viewFor.z = viewConeCap.z - viewPos.z;\r\n        Vector3.normalize(viewFor, viewFor);\r\n        this._shrinkSpotXYByConePerspective(viewPos, viewFor, range, halfAngle, lightBound, xPlanes, yPlanes);\r\n\r\n        this._placeSpotLightToClusters(lightIndex, lightBound);\r\n    }\r\n\r\n    private _updatePointLightOrth(halfX: number, halfY: number, near: number, far: number, viewMat: Matrix4x4, pointLight: PointLight, lightIndex: number): void {\r\n        var lightBound: LightBound = Cluster._tempLightBound;\r\n        var lightviewPos: Vector3 = Cluster._tempVector30;\r\n        Vector3.transformV3ToV3(pointLight._transform.position, viewMat, lightviewPos);//World to View\r\n        lightviewPos.z *= -1;\r\n\r\n        if (!this._shrinkSphereLightByBoundOrth(halfX, halfY, near, far, lightviewPos, pointLight.range, lightBound))\r\n            return;\r\n\r\n        this._placePointLightToClusters(lightIndex, lightBound);\r\n    }\r\n\r\n    private _updateSpotLightOrth(halfX: number, halfY: number, near: number, far: number, viewMat: Matrix4x4, spotLight: SpotLight, lightIndex: number): void {\r\n        // technically could fall outside the bounds we make because the planes themeselves are tilted by some angle\r\n        // the effect is exaggerated the steeper the angle the plane makes is\r\n        var lightBound: LightBound = Cluster._tempLightBound;\r\n        var viewPos: Vector3 = Cluster._tempVector30;\r\n        var forward: Vector3 = Cluster._tempVector31;\r\n        var viewConeCap: Vector3 = Cluster._tempVector34;\r\n        var position: Vector3 = spotLight._transform.position;\r\n        var range: number = spotLight.range;\r\n        spotLight._transform.worldMatrix.getForward(forward);\r\n        Vector3.normalize(forward, forward);\r\n        Vector3.scale(forward, range, viewConeCap);\r\n        Vector3.add(position, viewConeCap, viewConeCap);\r\n\r\n        Vector3.transformV3ToV3(position, viewMat, viewPos);//World to View\r\n        Vector3.transformV3ToV3(viewConeCap, viewMat, viewConeCap);//World to View\r\n        viewPos.z *= -1;\r\n        viewConeCap.z *= -1;\r\n        var halfAngle: number = (spotLight.spotAngle / 2) * Math.PI / 180;\r\n        if (!this._shrinkSpotLightByBoundOrth(halfX, halfY, near, far, viewPos, viewConeCap, range, halfAngle, lightBound))\r\n            return;\r\n\r\n        this._placeSpotLightToClusters(lightIndex, lightBound);\r\n    }\r\n\r\n    update(camera: Camera, scene: Scene3D): void {\r\n        this._updateMark++;\r\n        var camNear: number = camera.nearPlane;\r\n        this._depthSliceParam.x = Config3D._config.lightClusterCount.z / Math.log2(camera.farPlane / camNear);\r\n        this._depthSliceParam.y = Math.log2(camNear) * this._depthSliceParam.x;\r\n\r\n        var near: number = camera.nearPlane;\r\n        var far: number = camera.farPlane;\r\n        var viewMat: Matrix4x4 = camera.viewMatrix;\r\n        var curCount: number = scene._directionLights._length;\r\n        var pointLights: LightQueue<PointLight> = scene._pointLights;\r\n        var poiCount: number = pointLights._length;\r\n        var poiElements: PointLight[] = <PointLight[]>pointLights._elements;\r\n        var spotLights: LightQueue<SpotLight> = scene._spotLights;\r\n        var spoCount: number = spotLights._length;\r\n        var spoElements: SpotLight[] = <SpotLight[]>spotLights._elements;\r\n        if (camera.orthographic) {\r\n            var halfY: number = camera.orthographicVerticalSize / 2.0;\r\n            var halfX: number = halfY * camera.aspectRatio;\r\n            for (var i = 0; i < poiCount; i++ , curCount++)\r\n                this._updatePointLightOrth(halfX, halfY, near, far, viewMat, poiElements[i], curCount);\r\n            for (var i = 0; i < spoCount; i++ , curCount++)\r\n                this._updateSpotLightOrth(halfX, halfY, near, far, viewMat, spoElements[i], curCount);\r\n        }\r\n        else {\r\n            camera._updateClusterPlaneXY();\r\n            var xPlanes: Vector3[] = camera._clusterXPlanes;//must after camera._updateClusterPlaneXY()\r\n            var yPlanes: Vector3[] = camera._clusterYPlanes;\r\n            for (var i = 0; i < poiCount; i++ , curCount++)\r\n                this._updatePointLightPerspective(near, far, viewMat, poiElements[i], curCount, xPlanes, yPlanes);\r\n            for (var i = 0; i < spoCount; i++ , curCount++)\r\n                this._updateSpotLightPerspective(near, far, viewMat, spoElements[i], curCount, xPlanes, yPlanes);\r\n        }\r\n\r\n        if (poiCount + spoCount > 0) {\r\n            var xSlices: number = this._xSlices, ySlices: number = this._ySlices, zSlices: number = this._zSlices;\r\n            var widthFloat: number = xSlices * ySlices * 4;\r\n            var lightOff: number = widthFloat * zSlices;\r\n            var clusterPixels: Float32Array = this._clusterPixels;\r\n            var clusterPixelsCount: number = clusterPixels.length;\r\n            var clusterDatas: ClusterData[][][] = this._clusterDatas;\r\n            var updateMark: number = this._updateMark;\r\n            var freeSpace: boolean = true;\r\n            for (var z = 0; z < zSlices; z++) {\r\n                for (var y = 0; y < ySlices; y++) {\r\n                    for (var x = 0; x < xSlices; x++) {\r\n                        var data: ClusterData = clusterDatas[z][y][x];\r\n                        var clusterOff: number = (x + y * xSlices + z * xSlices * ySlices) * 4;\r\n                        if (data.updateMark !== updateMark) {\r\n                            clusterPixels[clusterOff] = 0;\r\n                            clusterPixels[clusterOff + 1] = 0;\r\n                        }\r\n                        else {\r\n                            if (freeSpace) {\r\n                                var indices: number[] = data.indices;\r\n                                var pCount: number = data.pointLightCount;\r\n                                var sCount: number = data.spotLightCount;\r\n                                var count: number = pCount + sCount;\r\n                                if (lightOff + count < clusterPixelsCount) {\r\n                                    clusterPixels[clusterOff] = pCount;\r\n                                    clusterPixels[clusterOff + 1] = sCount;\r\n                                    clusterPixels[clusterOff + 2] = Math.floor(lightOff / widthFloat);//solve precision problme, if data is big some GPU int(float) have problem\r\n                                    clusterPixels[clusterOff + 3] = lightOff % widthFloat;\r\n                                    for (var i: number = 0; i < count; i++)\r\n                                        clusterPixels[lightOff++] = indices[i];\r\n                                }\r\n                                else {\r\n                                    count = clusterPixelsCount - (lightOff + count);\r\n                                    pCount = Math.min(pCount, count);\r\n                                    clusterPixels[clusterOff] = pCount;\r\n                                    clusterPixels[clusterOff + 1] = Math.min(sCount, count - pCount);\r\n                                    clusterPixels[clusterOff + 2] = Math.floor(lightOff / widthFloat);//solve precision problme, if data is big some GPU int(float) have problem\r\n                                    clusterPixels[clusterOff + 3] = lightOff % widthFloat;\r\n                                    for (var i: number = 0; i < count; i++)\r\n                                        clusterPixels[lightOff++] = indices[i];\r\n                                    freeSpace = false;//remain cluster light will be ignore\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            var width: number = this._clusterTexture.width;\r\n            this._clusterTexture.setSubPixels(0, 0, width, Math.ceil(lightOff / (4 * width)), clusterPixels);\r\n        }\r\n    }\r\n}\r\n","\r\n/**\r\n * 二阶球谐函数。\r\n */\r\nexport class SphericalHarmonicsL2 {\r\n    /** @internal */\r\n    static _default: SphericalHarmonicsL2 = new SphericalHarmonicsL2();\r\n\r\n    /** @internal */\r\n    private _coefficients: Float32Array = new Float32Array(27);\r\n\r\n    /**\r\n     * 获取颜色通道的系数。\r\n     * @param i 通道索引，范围0到2。\r\n     * @param j 系数索引，范围0到8。\r\n     */\r\n    getCoefficient(i: number, j: number): number {\r\n        return this._coefficients[i * 9 + j];\r\n    }\r\n\r\n    /**\r\n     * 设置颜色通道的系数。\r\n     * @param i 通道索引，范围0到2。\r\n     * @param j 系数索引，范围0到8。\r\n     */\r\n    setCoefficient(i: number, j: number, coefficient: number): void {\r\n        this._coefficients[i * 9 + j] = coefficient;\r\n    }\r\n\r\n    /**\r\n     * 设置颜色通道的系数。\r\n     * @param i 通道索引，范围0到2。\r\n     * @param coefficient0 系数0\r\n     * @param coefficient1 系数1\r\n     * @param coefficient2 系数2\r\n     * @param coefficient3 系数3\r\n     * @param coefficient4 系数4\r\n     * @param coefficient5 系数5\r\n     * @param coefficient6 系数6\r\n     * @param coefficient7 系数7\r\n     * @param coefficient8 系数8\r\n     */\r\n    setCoefficients(i: number, coefficient0: number, coefficient1: number, coefficient2: number, coefficient3: number, coefficient4: number, coefficient5: number, coefficient6: number, coefficient7: number, coefficient8: number): void {\r\n        var offset: number = i * 9;\r\n        this._coefficients[offset] = coefficient0;\r\n        this._coefficients[++offset] = coefficient1;\r\n        this._coefficients[++offset] = coefficient2;\r\n        this._coefficients[++offset] = coefficient3;\r\n        this._coefficients[++offset] = coefficient4;\r\n        this._coefficients[++offset] = coefficient5;\r\n        this._coefficients[++offset] = coefficient6;\r\n        this._coefficients[++offset] = coefficient7;\r\n        this._coefficients[++offset] = coefficient8;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     * @param dest \r\n     */\r\n    cloneTo(dest: SphericalHarmonicsL2): void {\r\n        if (this === dest)\r\n            return;\r\n        var coes: Float32Array = this._coefficients;\r\n        var destCoes: Float32Array = dest._coefficients;\r\n        for (var i: number = 0; i < 27; i++)\r\n            destCoes[i] = coes[i];\r\n    }\r\n}","import { Sprite3D } from \"./core/Sprite3D\"\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MouseTouch {\r\n\t/**@internal */\r\n\t_pressedSprite: Sprite3D = null;\r\n\t/**@internal */\r\n\t_pressedLoopCount: number = -1;\r\n\t/**@internal */\r\n\tsprite: Sprite3D = null;\r\n\t/**@internal */\r\n\tmousePositionX: number = 0;\r\n\t/**@internal */\r\n\tmousePositionY: number = 0;\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n}\r\n\r\n\r\n","import { Vector2 } from \"./math/Vector2\"\r\nimport { ISingletonElement } from \"../resource/ISingletonElement\"\r\n\r\n\r\n/**\r\n * <code>Touch</code> 类用于实现触摸描述。\r\n */\r\nexport class Touch implements ISingletonElement {\r\n\t/**[实现IListPool接口]*/\r\n\tprivate _indexInList: number = -1;\r\n\r\n\t/** @internal */\r\n\t_identifier: number = -1;\r\n\t/** @internal */\r\n\t_position: Vector2 = new Vector2();\r\n\r\n\t/**\r\n\t * 获取唯一识别ID。\r\n\t * @return 唯一识别ID。\r\n\t */\r\n\tget identifier(): number {\r\n\t\treturn this._identifier;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取触摸点的像素坐标。\r\n\t * @return 触摸点的像素坐标 [只读]。\r\n\t */\r\n\tget position(): Vector2 {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 创建一个 <code>Touch</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t *  [实现ISingletonElement接口]\r\n\t */\r\n\t_getIndexInList(): number {\r\n\t\treturn this._indexInList;\r\n\t}\r\n\r\n\t/**\r\n\t *  [实现ISingletonElement接口]\r\n\t */\r\n\t_setIndexInList(index: number): void {\r\n\t\tthis._indexInList = index;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Vector3 } from \"./Vector3\";\r\n\r\n/**\r\n * 平面。\r\n */\r\nexport class Plane {\r\n\t/**平面的向量*/\r\n\tnormal: Vector3;\r\n\t/**平面到坐标系原点的距离*/\r\n\tdistance: number;\r\n\t/**平面与其他几何体相交类型*/\r\n\tstatic PlaneIntersectionType_Back: number = 0;\r\n\tstatic PlaneIntersectionType_Front: number = 1;\r\n\tstatic PlaneIntersectionType_Intersecting: number = 2;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Plane</code> 实例。\r\n\t * @param\tnormal 平面的向量\r\n\t * @param\td  平面到原点的距离\r\n\t */\r\n\tconstructor(normal: Vector3, d: number = 0) {\r\n\t\tthis.normal = normal;\r\n\t\tthis.distance = d;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过三个点创建一个平面。\r\n\t * @param\tpoint0 第零个点\r\n\t * @param\tpoint1 第一个点\r\n\t * @param\tpoint2 第二个点\r\n\t */\r\n\tstatic createPlaneBy3P(point0: Vector3, point1: Vector3, point2: Vector3, out: Plane): void {\r\n\t\tvar x1: number = point1.x - point0.x;\r\n\t\tvar y1: number = point1.y - point0.y;\r\n\t\tvar z1: number = point1.z - point0.z;\r\n\t\tvar x2: number = point2.x - point0.x;\r\n\t\tvar y2: number = point2.y - point0.y;\r\n\t\tvar z2: number = point2.z - point0.z;\r\n\t\tvar yz: number = (y1 * z2) - (z1 * y2);\r\n\t\tvar xz: number = (z1 * x2) - (x1 * z2);\r\n\t\tvar xy: number = (x1 * y2) - (y1 * x2);\r\n\t\tvar invPyth: number = 1.0 / (Math.sqrt((yz * yz) + (xz * xz) + (xy * xy)));\r\n\r\n\t\tvar x: number = yz * invPyth;\r\n\t\tvar y: number = xz * invPyth;\r\n\t\tvar z: number = xy * invPyth;\r\n\r\n\t\tvar normal: Vector3 = out.normal;\r\n\t\tnormal.x = x;\r\n\t\tnormal.y = y;\r\n\t\tnormal.z = z;\r\n\r\n\t\tout.distance = -((x * point0.x) + (y * point0.y) + (z * point0.z));\r\n\t}\r\n\r\n\t/**\r\n\t * 更改平面法线向量的系数，使之成单位长度。\r\n\t */\r\n\tnormalize(): void {\r\n\t\tvar normalEX: number = this.normal.x;\r\n\t\tvar normalEY: number = this.normal.y;\r\n\t\tvar normalEZ: number = this.normal.z;\r\n\t\tvar magnitude: number = 1.0 / Math.sqrt(normalEX * normalEX + normalEY * normalEY + normalEZ * normalEZ);\r\n\r\n\t\tthis.normal.x = normalEX * magnitude;\r\n\t\tthis.normal.y = normalEY * magnitude;\r\n\t\tthis.normal.z = normalEZ * magnitude;\r\n\r\n\t\tthis.distance *= magnitude;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar dest: Plane = <Plane>destObject;\r\n\t\tthis.normal.cloneTo(dest.normal);\r\n\t\tdest.distance = this.distance;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): Plane {\r\n\t\tvar dest: Plane = new Plane(new Vector3());\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n","import { Vector3 } from \"./Vector3\";\r\n/**\r\n\t * <code>Ray</code> 类用于创建射线。\r\n\t */\r\nexport class Ray {\r\n\t/**原点*/\r\n\torigin: Vector3;\r\n\t/**方向*/\r\n\tdirection: Vector3;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Ray</code> 实例。\r\n\t * @param\torigin 射线的起点\r\n\t * @param\tdirection  射线的方向\r\n\t */\r\n\tconstructor(origin: Vector3, direction: Vector3) {\r\n\t\tthis.origin = origin;\r\n\t\tthis.direction = direction;\r\n\t}\r\n}\r\n\r\n","/**\r\n * <code>ContainmentType</code> 类用于定义空间物体位置关系。\r\n */\r\nexport class ContainmentType {\r\n\r\n\t/*不相交*/\r\n\tstatic Disjoint: number = 0;\r\n\t/*包含*/\r\n\tstatic Contains: number = 1;\r\n\t/*相交*/\r\n\tstatic Intersects: number = 2;\r\n\r\n}\r\n\r\n\r\n","import { Vector3 } from \"./Vector3\";\r\nimport { Plane } from \"./Plane\";\r\nimport { BoundBox } from \"./BoundBox\";\r\nimport { BoundSphere } from \"./BoundSphere\";\r\nimport { Ray } from \"./Ray\";\r\nimport { MathUtils3D } from \"./MathUtils3D\";\r\nimport { ContainmentType } from \"./ContainmentType\";\r\n/**\r\n\t * <code>Collision</code> 类用于检测碰撞。\r\n\t */\r\nexport class CollisionUtils {\r\n\r\n\t/** @internal */\r\n\tprivate static _tempV30: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV31: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV32: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV33: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV34: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV35: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV36: Vector3 = new Vector3();\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>Collision</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 空间中点到平面的距离\r\n\t * @param\tplane 平面\r\n\t * @param\tpoint 点\r\n\t */\r\n\tstatic distancePlaneToPoint(plane: Plane, point: Vector3): number {\r\n\r\n\t\tvar dot: number = Vector3.dot(plane.normal, point);\r\n\t\treturn dot - plane.distance;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中点到包围盒的距离\r\n\t * @param\tbox 包围盒\r\n\t * @param\tpoint 点\r\n\t */\r\n\tstatic distanceBoxToPoint(box: BoundBox, point: Vector3): number {\r\n\r\n\t\tvar boxMin: Vector3 = box.min;\r\n\t\tvar boxMineX: number = boxMin.x;\r\n\t\tvar boxMineY: number = boxMin.y;\r\n\t\tvar boxMineZ: number = boxMin.z;\r\n\r\n\t\tvar boxMax: Vector3 = box.max;\r\n\t\tvar boxMaxeX: number = boxMax.x;\r\n\t\tvar boxMaxeY: number = boxMax.y;\r\n\t\tvar boxMaxeZ: number = boxMax.z;\r\n\r\n\t\tvar pointeX: number = point.x;\r\n\t\tvar pointeY: number = point.y;\r\n\t\tvar pointeZ: number = point.z;\r\n\r\n\t\tvar distance: number = 0;\r\n\r\n\t\tif (pointeX < boxMineX)\r\n\t\t\tdistance += (boxMineX - pointeX) * (boxMineX - pointeX);\r\n\t\tif (pointeX > boxMaxeX)\r\n\t\t\tdistance += (boxMaxeX - pointeX) * (boxMaxeX - pointeX);\r\n\r\n\t\tif (pointeY < boxMineY)\r\n\t\t\tdistance += (boxMineY - pointeY) * (boxMineY - pointeY);\r\n\t\tif (pointeY > boxMaxeY)\r\n\t\t\tdistance += (boxMaxeY - pointeY) * (boxMaxeY - pointeY);\r\n\r\n\t\tif (pointeZ < boxMineZ)\r\n\t\t\tdistance += (boxMineZ - pointeZ) * (boxMineZ - pointeZ);\r\n\t\tif (pointeZ > boxMaxeZ)\r\n\t\t\tdistance += (boxMaxeZ - pointeZ) * (boxMaxeZ - pointeZ);\r\n\r\n\t\treturn Math.sqrt(distance);\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围盒到包围盒的距离\r\n\t * @param\tbox1 包围盒1\r\n\t * @param\tbox2 包围盒2\r\n\t */\r\n\tstatic distanceBoxToBox(box1: BoundBox, box2: BoundBox): number {\r\n\r\n\t\tvar box1Mine: Vector3 = box1.min;\r\n\t\tvar box1MineX: number = box1Mine.x;\r\n\t\tvar box1MineY: number = box1Mine.y;\r\n\t\tvar box1MineZ: number = box1Mine.z;\r\n\r\n\t\tvar box1Maxe: Vector3 = box1.max;\r\n\t\tvar box1MaxeX: number = box1Maxe.x;\r\n\t\tvar box1MaxeY: number = box1Maxe.y;\r\n\t\tvar box1MaxeZ: number = box1Maxe.z;\r\n\r\n\t\tvar box2Mine: Vector3 = box2.min;\r\n\t\tvar box2MineX: number = box2Mine.x;\r\n\t\tvar box2MineY: number = box2Mine.y;\r\n\t\tvar box2MineZ: number = box2Mine.z;\r\n\r\n\t\tvar box2Maxe: Vector3 = box2.max;\r\n\t\tvar box2MaxeX: number = box2Maxe.x;\r\n\t\tvar box2MaxeY: number = box2Maxe.y;\r\n\t\tvar box2MaxeZ: number = box2Maxe.z;\r\n\r\n\t\tvar distance: number = 0;\r\n\t\tvar delta: number;\r\n\r\n\t\tif (box1MineX > box2MaxeX) {\r\n\r\n\t\t\tdelta = box1MineX - box2MaxeX;\r\n\t\t\tdistance += delta * delta;\r\n\t\t} else if (box2MineX > box1MaxeX) {\r\n\r\n\t\t\tdelta = box2MineX - box1MaxeX;\r\n\t\t\tdistance += delta * delta;\r\n\t\t}\r\n\r\n\t\tif (box1MineY > box2MaxeY) {\r\n\r\n\t\t\tdelta = box1MineY - box2MaxeY;\r\n\t\t\tdistance += delta * delta;\r\n\t\t} else if (box2MineY > box1MaxeY) {\r\n\r\n\t\t\tdelta = box2MineY - box1MaxeY;\r\n\t\t\tdistance += delta * delta;\r\n\t\t}\r\n\r\n\t\tif (box1MineZ > box2MaxeZ) {\r\n\r\n\t\t\tdelta = box1MineZ - box2MaxeZ;\r\n\t\t\tdistance += delta * delta;\r\n\t\t} else if (box2MineZ > box1MaxeZ) {\r\n\r\n\t\t\tdelta = box2MineZ - box1MaxeZ;\r\n\t\t\tdistance += delta * delta;\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt(distance);\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中点到包围球的距离\r\n\t * @param\tsphere 包围球\r\n\t * @param\tpoint  点\r\n\t */\r\n\tstatic distanceSphereToPoint(sphere: BoundSphere, point: Vector3): number {\r\n\r\n\t\tvar distance: number = Math.sqrt(Vector3.distanceSquared(sphere.center, point));\r\n\t\tdistance -= sphere.radius;\r\n\r\n\t\treturn Math.max(distance, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围球到包围球的距离\r\n\t * @param\tsphere1 包围球1\r\n\t * @param\tsphere2 包围球2\r\n\t */\r\n\tstatic distanceSphereToSphere(sphere1: BoundSphere, sphere2: BoundSphere): number {\r\n\r\n\t\tvar distance: number = Math.sqrt(Vector3.distanceSquared(sphere1.center, sphere2.center));\r\n\t\tdistance -= sphere1.radius + sphere2.radius;\r\n\r\n\t\treturn Math.max(distance, 0);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 空间中射线和三角面是否相交,输出距离\r\n\t * @param\tray 射线\r\n\t * @param\tvertex1 三角面顶点1\r\n\t * @param\tvertex2\t三角面顶点2\r\n\t * @param\tvertex3 三角面顶点3\r\n\t * @param\tout 点和三角面的距离\r\n\t * @return  是否相交\r\n\t */\r\n\tstatic intersectsRayAndTriangleRD(ray: Ray, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: number): boolean {\r\n\r\n\t\tvar rayO: Vector3 = ray.origin;\r\n\t\tvar rayOeX: number = rayO.x;\r\n\t\tvar rayOeY: number = rayO.y;\r\n\t\tvar rayOeZ: number = rayO.z;\r\n\r\n\t\tvar rayD: Vector3 = ray.direction;\r\n\t\tvar rayDeX: number = rayD.x;\r\n\t\tvar rayDeY: number = rayD.y;\r\n\t\tvar rayDeZ: number = rayD.z;\r\n\r\n\t\tvar v1eX: number = vertex1.x;\r\n\t\tvar v1eY: number = vertex1.y;\r\n\t\tvar v1eZ: number = vertex1.z;\r\n\r\n\t\tvar v2eX: number = vertex2.x;\r\n\t\tvar v2eY: number = vertex2.y;\r\n\t\tvar v2eZ: number = vertex2.z;\r\n\r\n\t\tvar v3eX: number = vertex3.x;\r\n\t\tvar v3eY: number = vertex3.y;\r\n\t\tvar v3eZ: number = vertex3.z;\r\n\r\n\t\tvar _tempV30eX: number = CollisionUtils._tempV30.x;\r\n\t\tvar _tempV30eY: number = CollisionUtils._tempV30.y;\r\n\t\tvar _tempV30eZ: number = CollisionUtils._tempV30.z;\r\n\r\n\t\t_tempV30eX = v2eX - v1eX;\r\n\t\t_tempV30eY = v2eY - v1eY;\r\n\t\t_tempV30eZ = v2eZ - v1eZ;\r\n\r\n\t\tvar _tempV31eX: number = CollisionUtils._tempV31.x;\r\n\t\tvar _tempV31eY: number = CollisionUtils._tempV31.y;\r\n\t\tvar _tempV31eZ: number = CollisionUtils._tempV31.z;\r\n\r\n\t\t_tempV31eX = v3eX - v1eX;\r\n\t\t_tempV31eY = v3eY - v1eY;\r\n\t\t_tempV31eZ = v3eZ - v1eZ;\r\n\r\n\t\tvar _tempV32eX: number = CollisionUtils._tempV32.x;\r\n\t\tvar _tempV32eY: number = CollisionUtils._tempV32.y;\r\n\t\tvar _tempV32eZ: number = CollisionUtils._tempV32.z;\r\n\r\n\t\t_tempV32eX = (rayDeY * _tempV31eZ) - (rayDeZ * _tempV31eY);\r\n\t\t_tempV32eY = (rayDeZ * _tempV31eX) - (rayDeX * _tempV31eZ);\r\n\t\t_tempV32eZ = (rayDeX * _tempV31eY) - (rayDeY * _tempV31eX);\r\n\r\n\t\tvar determinant: number = (_tempV30eX * _tempV32eX) + (_tempV30eY * _tempV32eY) + (_tempV30eZ * _tempV32eZ);\r\n\r\n\t\tif (MathUtils3D.isZero(determinant)) {\r\n\r\n\t\t\tout = 0;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar inversedeterminant: number = 1 / determinant;\r\n\r\n\t\tvar _tempV33eX: number = CollisionUtils._tempV33.x;\r\n\t\tvar _tempV33eY: number = CollisionUtils._tempV33.y;\r\n\t\tvar _tempV33eZ: number = CollisionUtils._tempV33.z;\r\n\r\n\t\t_tempV33eX = rayOeX - v1eX;\r\n\t\t_tempV33eY = rayOeY - v1eY;\r\n\t\t_tempV33eZ = rayOeZ - v1eZ;\r\n\r\n\t\tvar triangleU: number = (_tempV33eX * _tempV32eX) + (_tempV33eY * _tempV32eY) + (_tempV33eZ * _tempV32eZ);\r\n\t\ttriangleU *= inversedeterminant;\r\n\r\n\t\tif (triangleU < 0 || triangleU > 1) {\r\n\r\n\t\t\tout = 0;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar _tempV34eX: number = CollisionUtils._tempV34.x;\r\n\t\tvar _tempV34eY: number = CollisionUtils._tempV34.y;\r\n\t\tvar _tempV34eZ: number = CollisionUtils._tempV34.z;\r\n\r\n\t\t_tempV34eX = (_tempV33eY * _tempV30eZ) - (_tempV33eZ * _tempV30eY);\r\n\t\t_tempV34eY = (_tempV33eZ * _tempV30eX) - (_tempV33eX * _tempV30eZ);\r\n\t\t_tempV34eZ = (_tempV33eX * _tempV30eY) - (_tempV33eY * _tempV30eX);\r\n\r\n\t\tvar triangleV: number = ((rayDeX * _tempV34eX) + (rayDeY * _tempV34eY)) + (rayDeZ * _tempV34eZ);\r\n\t\ttriangleV *= inversedeterminant;\r\n\r\n\t\tif (triangleV < 0 || triangleU + triangleV > 1) {\r\n\r\n\t\t\tout = 0;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar raydistance: number = (_tempV31eX * _tempV34eX) + (_tempV31eY * _tempV34eY) + (_tempV31eZ * _tempV34eZ);\r\n\t\traydistance *= inversedeterminant;\r\n\r\n\t\tif (raydistance < 0) {\r\n\r\n\t\t\tout = 0;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tout = raydistance;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中射线和三角面是否相交,输出相交点\r\n\t * @param\tray 射线\r\n\t * @param\tvertex1 三角面顶点1\r\n\t * @param\tvertex2\t三角面顶点2\r\n\t * @param\tvertex3 三角面顶点3\r\n\t * @param\tout 相交点\r\n\t * @return  是否相交\r\n\t */\r\n\tstatic intersectsRayAndTriangleRP(ray: Ray, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: Vector3): boolean {\r\n\r\n\t\tvar distance: number;\r\n\t\tif (!CollisionUtils.intersectsRayAndTriangleRD(ray, vertex1, vertex2, vertex3, distance)) {\r\n\r\n\t\t\tout = Vector3._ZERO;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tVector3.scale(ray.direction, distance, CollisionUtils._tempV30);\r\n\t\tVector3.add(ray.origin, CollisionUtils._tempV30, out);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中射线和点是否相交\r\n\t * @param\tsphere1 包围球1\r\n\t * @param\tsphere2 包围球2\r\n\t */\r\n\tstatic intersectsRayAndPoint(ray: Ray, point: Vector3): boolean {\r\n\r\n\t\tVector3.subtract(ray.origin, point, CollisionUtils._tempV30);\r\n\r\n\t\tvar b: number = Vector3.dot(CollisionUtils._tempV30, ray.direction);\r\n\t\tvar c: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV30) - MathUtils3D.zeroTolerance;\r\n\r\n\t\tif (c > 0 && b > 0)\r\n\t\t\treturn false;\r\n\t\tvar discriminant: number = b * b - c;\r\n\t\tif (discriminant < 0)\r\n\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中射线和射线是否相交\r\n\t * @param\tray1 射线1\r\n\t * @param\tray2 射线2\r\n\t * @param\tout 相交点\r\n\t */\r\n\tstatic intersectsRayAndRay(ray1: Ray, ray2: Ray, out: Vector3): boolean {\r\n\r\n\t\tvar ray1o: Vector3 = ray1.origin;\r\n\t\tvar ray1oeX: number = ray1o.x;\r\n\t\tvar ray1oeY: number = ray1o.y;\r\n\t\tvar ray1oeZ: number = ray1o.z;\r\n\r\n\t\tvar ray1d: Vector3 = ray1.direction;\r\n\t\tvar ray1deX: number = ray1d.x;\r\n\t\tvar ray1deY: number = ray1d.y;\r\n\t\tvar ray1deZ: number = ray1d.z;\r\n\r\n\t\tvar ray2o: Vector3 = ray2.origin;\r\n\t\tvar ray2oeX: number = ray2o.x;\r\n\t\tvar ray2oeY: number = ray2o.y;\r\n\t\tvar ray2oeZ: number = ray2o.z;\r\n\r\n\t\tvar ray2d: Vector3 = ray2.direction;\r\n\t\tvar ray2deX: number = ray2d.x;\r\n\t\tvar ray2deY: number = ray2d.y;\r\n\t\tvar ray2deZ: number = ray2d.z;\r\n\r\n\t\tVector3.cross(ray1d, ray2d, CollisionUtils._tempV30);\r\n\t\tvar tempV3: Vector3 = CollisionUtils._tempV30;\r\n\t\tvar denominator: number = Vector3.scalarLength(CollisionUtils._tempV30);\r\n\r\n\t\tif (MathUtils3D.isZero(denominator)) {\r\n\r\n\t\t\tif (MathUtils3D.nearEqual(ray2oeX, ray1oeX) && MathUtils3D.nearEqual(ray2oeY, ray1oeY) && MathUtils3D.nearEqual(ray2oeZ, ray1oeZ)) {\r\n\t\t\t\tout = Vector3._ZERO;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdenominator = denominator * denominator;\r\n\r\n\t\tvar m11: number = ray2oeX - ray1oeX;\r\n\t\tvar m12: number = ray2oeY - ray1oeY;\r\n\t\tvar m13: number = ray2oeZ - ray1oeZ;\r\n\t\tvar m21: number = ray2deX;\r\n\t\tvar m22: number = ray2deY;\r\n\t\tvar m23: number = ray2deZ;\r\n\t\tvar m31: number = tempV3.x;\r\n\t\tvar m32: number = tempV3.y;\r\n\t\tvar m33: number = tempV3.z;\r\n\r\n\t\tvar dets: number = m11 * m22 * m33 + m12 * m23 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 - m13 * m22 * m31;\r\n\r\n\t\tm21 = ray1deX;\r\n\t\tm22 = ray1deY;\r\n\t\tm23 = ray1deZ;\r\n\r\n\t\tvar dett: number = m11 * m22 * m33 + m12 * m23 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 - m13 * m22 * m31;\r\n\r\n\t\tvar s: number = dets / denominator;\r\n\t\tvar t: number = dett / denominator;\r\n\r\n\t\tVector3.scale(ray1d, s, CollisionUtils._tempV30);\r\n\t\tVector3.scale(ray2d, s, CollisionUtils._tempV31);\r\n\r\n\t\tVector3.add(ray1o, CollisionUtils._tempV30, CollisionUtils._tempV32);\r\n\t\tVector3.add(ray2o, CollisionUtils._tempV31, CollisionUtils._tempV33);\r\n\r\n\t\tvar point1e: Vector3 = CollisionUtils._tempV32;\r\n\t\tvar point2e: Vector3 = CollisionUtils._tempV33;\r\n\r\n\t\tif (!MathUtils3D.nearEqual(point2e.x, point1e.x) || !MathUtils3D.nearEqual(point2e.y, point1e.y) || !MathUtils3D.nearEqual(point2e.z, point1e.z)) {\r\n\t\t\tout = Vector3._ZERO;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tout = CollisionUtils._tempV32;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中平面和三角面是否相交\r\n\t * @param\tplane 平面\r\n\t * @param\tvertex1 三角面顶点1\r\n\t * @param\tvertex2 三角面顶点2\r\n\t * @param\tvertex3 三角面顶点3\r\n\t * @return  返回空间位置关系\r\n\t */\r\n\tstatic intersectsPlaneAndTriangle(plane: Plane, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): number {\r\n\r\n\t\tvar test1: number = CollisionUtils.intersectsPlaneAndPoint(plane, vertex1);\r\n\t\tvar test2: number = CollisionUtils.intersectsPlaneAndPoint(plane, vertex2);\r\n\t\tvar test3: number = CollisionUtils.intersectsPlaneAndPoint(plane, vertex3);\r\n\r\n\t\tif (test1 == Plane.PlaneIntersectionType_Front && test2 == Plane.PlaneIntersectionType_Front && test3 == Plane.PlaneIntersectionType_Front)\r\n\t\t\treturn Plane.PlaneIntersectionType_Front;\r\n\r\n\t\tif (test1 == Plane.PlaneIntersectionType_Back && test2 == Plane.PlaneIntersectionType_Back && test3 == Plane.PlaneIntersectionType_Back)\r\n\t\t\treturn Plane.PlaneIntersectionType_Back;\r\n\r\n\t\treturn Plane.PlaneIntersectionType_Intersecting;\r\n\t}\r\n\r\n\t/**\r\n\t * 射线和平面是否相交,并返回相交距离。\r\n\t * @param\tray   射线。\r\n\t * @param\tplane 平面。\r\n\t * @return\t相交距离,-1为不相交。\r\n\t */\r\n\tstatic intersectsRayAndPlaneRD(ray: Ray, plane: Plane): number {\r\n\t\t//Source: Real-Time Collision Detection by Christer Ericson\r\n\t\t//Reference: Page 175\r\n\t\tvar planeNor: Vector3 = plane.normal;\r\n\t\tvar direction: number = Vector3.dot(planeNor, ray.direction);\r\n\r\n\t\tif (Math.abs(direction) < MathUtils3D.zeroTolerance)\r\n\t\t\treturn -1;\r\n\r\n\t\tvar position: number = Vector3.dot(planeNor, ray.origin);\r\n\t\tvar distance: number = (-plane.distance - position) / direction;\r\n\r\n\t\tif (distance < 0) {\r\n\t\t\tif (distance < -MathUtils3D.zeroTolerance)\r\n\t\t\t\treturn -1;\r\n\t\t\tdistance = 0;\r\n\t\t}\r\n\t\treturn distance;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中射线和平面是否相交，并返回相交点。\r\n\t * @param\tray   射线。\r\n\t * @param\tplane 平面。\r\n\t * @param\tout 相交点。\r\n\t */\r\n\tstatic intersectsRayAndPlaneRP(ray: Ray, plane: Plane, out: Vector3): boolean {\r\n\t\t//Source: Real-Time Collision Detection by Christer Ericson\r\n\t\t//Reference: Page 175\r\n\t\tvar distance: number = CollisionUtils.intersectsRayAndPlaneRD(ray, plane);\r\n\t\tif (distance == -1) {\r\n\t\t\tout.setValue(0, 0, 0);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar scaDis: Vector3 = CollisionUtils._tempV30;\r\n\t\tVector3.scale(ray.direction, distance, scaDis);\r\n\t\tVector3.add(ray.origin, scaDis, out);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中射线和包围盒是否相交\r\n\t * @param\tray 射线\r\n\t * @param\tbox\t包围盒\r\n\t * @param\tout 相交距离,如果为0,不相交\r\n\t */\r\n\tstatic intersectsRayAndBoxRD(ray: Ray, box: BoundBox): number {\r\n\r\n\t\tvar rayoe: Vector3 = ray.origin;\r\n\t\tvar rayoeX: number = rayoe.x;\r\n\t\tvar rayoeY: number = rayoe.y;\r\n\t\tvar rayoeZ: number = rayoe.z;\r\n\r\n\t\tvar rayde: Vector3 = ray.direction;\r\n\t\tvar raydeX: number = rayde.x;\r\n\t\tvar raydeY: number = rayde.y;\r\n\t\tvar raydeZ: number = rayde.z;\r\n\r\n\t\tvar boxMine: Vector3 = box.min;\r\n\t\tvar boxMineX: number = boxMine.x;\r\n\t\tvar boxMineY: number = boxMine.y;\r\n\t\tvar boxMineZ: number = boxMine.z;\r\n\r\n\t\tvar boxMaxe: Vector3 = box.max;\r\n\t\tvar boxMaxeX: number = boxMaxe.x;\r\n\t\tvar boxMaxeY: number = boxMaxe.y;\r\n\t\tvar boxMaxeZ: number = boxMaxe.z;\r\n\r\n\t\tvar out: number = 0;\r\n\r\n\t\tvar tmax: number = MathUtils3D.MaxValue;\r\n\r\n\t\tif (MathUtils3D.isZero(raydeX)) {\r\n\r\n\t\t\tif (rayoeX < boxMineX || rayoeX > boxMaxeX) {\r\n\r\n\t\t\t\t//out = 0;\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t} else {\r\n\r\n\t\t\tvar inverse: number = 1 / raydeX;\r\n\t\t\tvar t1: number = (boxMineX - rayoeX) * inverse;\r\n\t\t\tvar t2: number = (boxMaxeX - rayoeX) * inverse;\r\n\r\n\t\t\tif (t1 > t2) {\r\n\r\n\t\t\t\tvar temp: number = t1;\r\n\t\t\t\tt1 = t2;\r\n\t\t\t\tt2 = temp;\r\n\t\t\t}\r\n\r\n\t\t\tout = Math.max(t1, out);\r\n\t\t\ttmax = Math.min(t2, tmax);\r\n\r\n\t\t\tif (out > tmax) {\r\n\r\n\t\t\t\t//out = 0;\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (MathUtils3D.isZero(raydeY)) {\r\n\r\n\t\t\tif (rayoeY < boxMineY || rayoeY > boxMaxeY) {\r\n\r\n\t\t\t\t//out = 0;\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t} else {\r\n\r\n\t\t\tvar inverse1: number = 1 / raydeY;\r\n\t\t\tvar t3: number = (boxMineY - rayoeY) * inverse1;\r\n\t\t\tvar t4: number = (boxMaxeY - rayoeY) * inverse1;\r\n\r\n\t\t\tif (t3 > t4) {\r\n\r\n\t\t\t\tvar temp1: number = t3;\r\n\t\t\t\tt3 = t4;\r\n\t\t\t\tt4 = temp1;\r\n\t\t\t}\r\n\r\n\t\t\tout = Math.max(t3, out);\r\n\t\t\ttmax = Math.min(t4, tmax);\r\n\r\n\t\t\tif (out > tmax) {\r\n\r\n\t\t\t\t//out = 0;\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (MathUtils3D.isZero(raydeZ)) {\r\n\r\n\t\t\tif (rayoeZ < boxMineZ || rayoeZ > boxMaxeZ) {\r\n\r\n\t\t\t\t//out = 0;\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t} else {\r\n\r\n\t\t\tvar inverse2: number = 1 / raydeZ;\r\n\t\t\tvar t5: number = (boxMineZ - rayoeZ) * inverse2;\r\n\t\t\tvar t6: number = (boxMaxeZ - rayoeZ) * inverse2;\r\n\r\n\t\t\tif (t5 > t6) {\r\n\r\n\t\t\t\tvar temp2: number = t5;\r\n\t\t\t\tt5 = t6;\r\n\t\t\t\tt6 = temp2;\r\n\t\t\t}\r\n\r\n\t\t\tout = Math.max(t5, out);\r\n\t\t\ttmax = Math.min(t6, tmax);\r\n\r\n\t\t\tif (out > tmax) {\r\n\r\n\t\t\t\t//out = 0;\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中射线和包围盒是否相交\r\n\t * @param\tray 射线\r\n\t * @param\tbox\t包围盒\r\n\t * @param\tout 相交点\r\n\t */\r\n\tstatic intersectsRayAndBoxRP(ray: Ray, box: BoundBox, out: Vector3): number {\r\n\r\n\t\tvar distance: number = CollisionUtils.intersectsRayAndBoxRD(ray, box);\r\n\t\tif (distance === -1) {\r\n\r\n\t\t\tVector3._ZERO.cloneTo(out);\r\n\t\t\treturn distance;\r\n\t\t}\r\n\t\tVector3.scale(ray.direction, distance, CollisionUtils._tempV30);\r\n\t\tVector3.add(ray.origin, CollisionUtils._tempV30, CollisionUtils._tempV31);\r\n\r\n\t\tCollisionUtils._tempV31.cloneTo(out);\r\n\r\n\t\treturn distance;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中射线和包围球是否相交\r\n\t * @param\tray    射线\r\n\t * @param\tsphere 包围球\r\n\t * @return\t相交距离,-1表示不相交\r\n\t */\r\n\tstatic intersectsRayAndSphereRD(ray: Ray, sphere: BoundSphere): number {\r\n\r\n\t\tvar sphereR: number = sphere.radius;\r\n\t\tVector3.subtract(ray.origin, sphere.center, CollisionUtils._tempV30);\r\n\r\n\t\tvar b: number = Vector3.dot(CollisionUtils._tempV30, ray.direction);\r\n\t\tvar c: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV30) - (sphereR * sphereR);\r\n\r\n\t\tif (c > 0 && b > 0) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\tvar discriminant: number = b * b - c;\r\n\r\n\t\tif (discriminant < 0) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\tvar distance: number = -b - Math.sqrt(discriminant);\r\n\r\n\t\tif (distance < 0)\r\n\t\t\tdistance = 0;\r\n\r\n\t\treturn distance;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中射线和包围球是否相交\r\n\t * @param\tray    射线\r\n\t * @param\tsphere 包围球\r\n\t * @param\tout    相交点\r\n\t * @return  相交距离,-1表示不相交\r\n\t */\r\n\tstatic intersectsRayAndSphereRP(ray: Ray, sphere: BoundSphere, out: Vector3): number {\r\n\t\tvar distance: number = CollisionUtils.intersectsRayAndSphereRD(ray, sphere);\r\n\t\tif (distance === -1) {\r\n\t\t\tVector3._ZERO.cloneTo(out);\r\n\t\t\treturn distance;\r\n\t\t}\r\n\r\n\t\tVector3.scale(ray.direction, distance, CollisionUtils._tempV30);\r\n\t\tVector3.add(ray.origin, CollisionUtils._tempV30, CollisionUtils._tempV31);\r\n\r\n\t\tCollisionUtils._tempV31.cloneTo(out);\r\n\t\treturn distance;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围球和三角面是否相交\r\n\t * @param\tsphere 包围球\r\n\t * @param\tvertex1 三角面顶点1\r\n\t * @param\tvertex2 三角面顶点2\r\n\t * @param\tvertex3 三角面顶点3\r\n\t * @return  返回是否相交\r\n\t */\r\n\tstatic intersectsSphereAndTriangle(sphere: BoundSphere, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): boolean {\r\n\r\n\t\tvar sphereC: Vector3 = sphere.center;\r\n\t\tvar sphereR: number = sphere.radius;\r\n\r\n\t\tCollisionUtils.closestPointPointTriangle(sphereC, vertex1, vertex2, vertex3, CollisionUtils._tempV30);\r\n\t\tVector3.subtract(CollisionUtils._tempV30, sphereC, CollisionUtils._tempV31);\r\n\r\n\t\tvar dot: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV31);\r\n\r\n\t\treturn dot <= sphereR * sphereR;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中点和平面是否相交\r\n\t * @param\tplane  平面\r\n\t * @param\tpoint  点\r\n\t * @return  碰撞状态\r\n\t */\r\n\tstatic intersectsPlaneAndPoint(plane: Plane, point: Vector3): number {\r\n\t\tvar distance: number = Vector3.dot(plane.normal, point) + plane.distance;\r\n\t\tif (distance > 0)\r\n\t\t\treturn Plane.PlaneIntersectionType_Front;\r\n\t\tif (distance < 0)\r\n\t\t\treturn Plane.PlaneIntersectionType_Back;\r\n\t\treturn Plane.PlaneIntersectionType_Intersecting;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中平面和平面是否相交\r\n\t * @param\tplane1 平面1\r\n\t * @param\tplane2 平面2\r\n\t * @return  是否相交\r\n\t */\r\n\tstatic intersectsPlaneAndPlane(plane1: Plane, plane2: Plane): boolean {\r\n\r\n\t\tVector3.cross(plane1.normal, plane2.normal, CollisionUtils._tempV30);\r\n\r\n\t\tvar denominator: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV30);\r\n\r\n\t\tif (MathUtils3D.isZero(denominator))\r\n\t\t\treturn false;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中平面和平面是否相交\r\n\t * @param\tplane1 平面1\r\n\t * @param\tplane2 平面2\r\n\t * @param\tline   相交线\r\n\t * @return  是否相交\r\n\t */\r\n\tstatic intersectsPlaneAndPlaneRL(plane1: Plane, plane2: Plane, line: Ray): boolean {\r\n\r\n\t\tvar plane1nor: Vector3 = plane1.normal;\r\n\t\tvar plane2nor: Vector3 = plane2.normal;\r\n\r\n\t\tVector3.cross(plane1nor, plane2nor, CollisionUtils._tempV34);\r\n\t\tvar denominator: number = Vector3.dot(CollisionUtils._tempV34, CollisionUtils._tempV34);\r\n\r\n\t\tif (MathUtils3D.isZero(denominator))\r\n\t\t\treturn false;\r\n\r\n\t\tVector3.scale(plane2nor, plane1.distance, CollisionUtils._tempV30);\r\n\t\tVector3.scale(plane1nor, plane2.distance, CollisionUtils._tempV31);\r\n\t\tVector3.subtract(CollisionUtils._tempV30, CollisionUtils._tempV31, CollisionUtils._tempV32);\r\n\t\tVector3.cross(CollisionUtils._tempV32, CollisionUtils._tempV34, CollisionUtils._tempV33);\r\n\r\n\t\tVector3.normalize(CollisionUtils._tempV34, CollisionUtils._tempV34);\r\n\t\tline = new Ray(CollisionUtils._tempV33, CollisionUtils._tempV34);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中平面和包围盒是否相交\r\n\t * @param\tplane 平面\r\n\t * @param   box  包围盒\r\n\t * @return  碰撞状态\r\n\t */\r\n\tstatic intersectsPlaneAndBox(plane: Plane, box: BoundBox): number {\r\n\r\n\t\tvar planeD: number = plane.distance;\r\n\r\n\t\tvar planeNor: Vector3 = plane.normal;\r\n\t\tvar planeNoreX: number = planeNor.x;\r\n\t\tvar planeNoreY: number = planeNor.y;\r\n\t\tvar planeNoreZ: number = planeNor.z;\r\n\r\n\t\tvar boxMine: Vector3 = box.min;\r\n\t\tvar boxMineX: number = boxMine.x;\r\n\t\tvar boxMineY: number = boxMine.y;\r\n\t\tvar boxMineZ: number = boxMine.z;\r\n\r\n\t\tvar boxMaxe: Vector3 = box.max;\r\n\t\tvar boxMaxeX: number = boxMaxe.x;\r\n\t\tvar boxMaxeY: number = boxMaxe.y;\r\n\t\tvar boxMaxeZ: number = boxMaxe.z;\r\n\r\n\t\tCollisionUtils._tempV30.x = (planeNoreX > 0) ? boxMineX : boxMaxeX;\r\n\t\tCollisionUtils._tempV30.y = (planeNoreY > 0) ? boxMineY : boxMaxeY;\r\n\t\tCollisionUtils._tempV30.z = (planeNoreZ > 0) ? boxMineZ : boxMaxeZ;\r\n\r\n\t\tCollisionUtils._tempV31.x = (planeNoreX > 0) ? boxMaxeX : boxMineX;\r\n\t\tCollisionUtils._tempV31.y = (planeNoreY > 0) ? boxMaxeY : boxMineY;\r\n\t\tCollisionUtils._tempV31.z = (planeNoreZ > 0) ? boxMaxeZ : boxMineZ;\r\n\r\n\t\tvar distance: number = Vector3.dot(planeNor, CollisionUtils._tempV30);\r\n\t\tif (distance + planeD > 0)\r\n\t\t\treturn Plane.PlaneIntersectionType_Front;\r\n\r\n\t\tdistance = Vector3.dot(planeNor, CollisionUtils._tempV31);\r\n\t\tif (distance + planeD < 0)\r\n\t\t\treturn Plane.PlaneIntersectionType_Back;\r\n\r\n\t\treturn Plane.PlaneIntersectionType_Intersecting;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中平面和包围球是否相交\r\n\t * @param\tplane 平面\r\n\t * @param   sphere 包围球\r\n\t * @return  碰撞状态\r\n\t */\r\n\tstatic intersectsPlaneAndSphere(plane: Plane, sphere: BoundSphere): number {\r\n\r\n\t\tvar sphereR: number = sphere.radius;\r\n\t\tvar distance: number = Vector3.dot(plane.normal, sphere.center) + plane.distance;\r\n\r\n\t\tif (distance > sphereR)\r\n\t\t\treturn Plane.PlaneIntersectionType_Front;\r\n\t\tif (distance < -sphereR)\r\n\t\t\treturn Plane.PlaneIntersectionType_Back;\r\n\t\treturn Plane.PlaneIntersectionType_Intersecting;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围盒和包围盒是否相交\r\n\t * @param\tbox1 包围盒1\r\n\t * @param   box2 包围盒2\r\n\t * @return  是否相交\r\n\t */\r\n\tstatic intersectsBoxAndBox(box1: BoundBox, box2: BoundBox): boolean {\r\n\r\n\t\tvar box1Mine: Vector3 = box1.min;\r\n\t\tvar box1Maxe: Vector3 = box1.max;\r\n\t\tvar box2Mine: Vector3 = box2.min;\r\n\t\tvar box2Maxe: Vector3 = box2.max;\r\n\r\n\t\tif (box1Mine.x > box2Maxe.x || box2Mine.x > box1Maxe.x)\r\n\t\t\treturn false;\r\n\t\tif (box1Mine.y > box2Maxe.y || box2Mine.y > box1Maxe.y)\r\n\t\t\treturn false;\r\n\t\tif (box1Mine.z > box2Maxe.z || box2Mine.z > box1Maxe.z)\r\n\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围盒和包围球是否相交\r\n\t * @param\tbox 包围盒\r\n\t * @param   sphere 包围球\r\n\t * @return  是否相交\r\n\t */\r\n\tstatic intersectsBoxAndSphere(box: BoundBox, sphere: BoundSphere): boolean {\r\n\t\tvar center: Vector3 = sphere.center;\r\n\t\tvar radius: number = sphere.radius;\r\n\t\tvar nearest: Vector3 = CollisionUtils._tempV30;\r\n\t\tVector3.Clamp(center, box.min, box.max, nearest);\r\n\t\tvar distance: number = Vector3.distanceSquared(center, nearest);\r\n\t\treturn distance <= radius * radius;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围球和包围球是否相交\r\n\t * @param\tsphere1 包围球1\r\n\t * @param   sphere2 包围球2\r\n\t * @return  是否相交\r\n\t */\r\n\tstatic intersectsSphereAndSphere(sphere1: BoundSphere, sphere2: BoundSphere): boolean {\r\n\r\n\t\tvar radiisum: number = sphere1.radius + sphere2.radius;\r\n\t\treturn Vector3.distanceSquared(sphere1.center, sphere2.center) <= radiisum * radiisum;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 空间中包围盒是否包含另一个点\r\n\t * @param\tbox 包围盒\r\n\t * @param   point 点\r\n\t * @return  位置关系:0 不想交,1 包含, 2 相交\r\n\t */\r\n\tstatic boxContainsPoint(box: BoundBox, point: Vector3): number {\r\n\t\tvar boxMine: Vector3 = box.min;\r\n\t\tvar boxMaxe: Vector3 = box.max;\r\n\t\tif (boxMine.x <= point.x && boxMaxe.x >= point.x && boxMine.y <= point.y && boxMaxe.y >= point.y && boxMine.z <= point.z && boxMaxe.z >= point.z)\r\n\t\t\treturn ContainmentType.Contains;\r\n\t\treturn ContainmentType.Disjoint;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围盒是否包含另一个包围盒\r\n\t * @param\tbox1 包围盒1\r\n\t * @param   box2 包围盒2\r\n\t * @return  位置关系:0 不想交,1 包含, 2 相交\r\n\t */\r\n\tstatic boxContainsBox(box1: BoundBox, box2: BoundBox): number {\r\n\r\n\t\tvar box1Mine: Vector3 = box1.min;\r\n\t\tvar box1MineX: number = box1Mine.x;\r\n\t\tvar box1MineY: number = box1Mine.y;\r\n\t\tvar box1MineZ: number = box1Mine.z;\r\n\r\n\t\tvar box1Maxe: Vector3 = box1.max;\r\n\t\tvar box1MaxeX: number = box1Maxe.x;\r\n\t\tvar box1MaxeY: number = box1Maxe.y;\r\n\t\tvar box1MaxeZ: number = box1Maxe.z;\r\n\r\n\t\tvar box2Mine: Vector3 = box2.min;\r\n\t\tvar box2MineX: number = box2Mine.x;\r\n\t\tvar box2MineY: number = box2Mine.y;\r\n\t\tvar box2MineZ: number = box2Mine.z;\r\n\r\n\t\tvar box2Maxe: Vector3 = box2.max;\r\n\t\tvar box2MaxeX: number = box2Maxe.x;\r\n\t\tvar box2MaxeY: number = box2Maxe.y;\r\n\t\tvar box2MaxeZ: number = box2Maxe.z;\r\n\r\n\t\tif (box1MaxeX < box2MineX || box1MineX > box2MaxeX)\r\n\t\t\treturn ContainmentType.Disjoint;\r\n\r\n\t\tif (box1MaxeY < box2MineY || box1MineY > box2MaxeY)\r\n\t\t\treturn ContainmentType.Disjoint;\r\n\r\n\t\tif (box1MaxeZ < box2MineZ || box1MineZ > box2MaxeZ)\r\n\t\t\treturn ContainmentType.Disjoint;\r\n\r\n\t\tif (box1MineX <= box2MineX && box2MaxeX <= box1MaxeX && box1MineY <= box2MineY && box2MaxeY <= box1MaxeY && box1MineZ <= box2MineZ && box2MaxeZ <= box1MaxeZ) {\r\n\t\t\treturn ContainmentType.Contains;\r\n\t\t}\r\n\r\n\t\treturn ContainmentType.Intersects;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 空间中包围盒是否包含另一个包围球\r\n\t * @param\tbox 包围盒\r\n\t * @param   sphere 包围球\r\n\t * @return  位置关系:0 不想交,1 包含, 2 相交\r\n\t */\r\n\tstatic boxContainsSphere(box: BoundBox, sphere: BoundSphere): number {\r\n\r\n\t\tvar boxMin: Vector3 = box.min;\r\n\t\tvar boxMineX: number = boxMin.x;\r\n\t\tvar boxMineY: number = boxMin.y;\r\n\t\tvar boxMineZ: number = boxMin.z;\r\n\r\n\t\tvar boxMax: Vector3 = box.max;\r\n\t\tvar boxMaxeX: number = boxMax.x;\r\n\t\tvar boxMaxeY: number = boxMax.y;\r\n\t\tvar boxMaxeZ: number = boxMax.z;\r\n\r\n\t\tvar sphereC: Vector3 = sphere.center;\r\n\t\tvar sphereCeX: number = sphereC.x;\r\n\t\tvar sphereCeY: number = sphereC.y;\r\n\t\tvar sphereCeZ: number = sphereC.z;\r\n\r\n\t\tvar sphereR: number = sphere.radius;\r\n\r\n\t\tVector3.Clamp(sphereC, boxMin, boxMax, CollisionUtils._tempV30);\r\n\t\tvar distance: number = Vector3.distanceSquared(sphereC, CollisionUtils._tempV30);\r\n\r\n\t\tif (distance > sphereR * sphereR)\r\n\t\t\treturn ContainmentType.Disjoint;\r\n\r\n\t\tif ((((boxMineX + sphereR <= sphereCeX) && (sphereCeX <= boxMaxeX - sphereR)) && ((boxMaxeX - boxMineX > sphereR) &&\r\n\t\t\t(boxMineY + sphereR <= sphereCeY))) && (((sphereCeY <= boxMaxeY - sphereR) && (boxMaxeY - boxMineY > sphereR)) &&\r\n\t\t\t\t(((boxMineZ + sphereR <= sphereCeZ) && (sphereCeZ <= boxMaxeZ - sphereR)) && (boxMaxeZ - boxMineZ > sphereR))))\r\n\t\t\treturn ContainmentType.Contains;\r\n\r\n\t\treturn ContainmentType.Intersects;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围球是否包含另一个点\r\n\t * @param\tsphere 包围球\r\n\t * @param   point 点\r\n\t * @return  位置关系:0 不想交,1 包含, 2 相交\r\n\t */\r\n\tstatic sphereContainsPoint(sphere: BoundSphere, point: Vector3): number {\r\n\r\n\t\tif (Vector3.distanceSquared(point, sphere.center) <= sphere.radius * sphere.radius)\r\n\t\t\treturn ContainmentType.Contains;\r\n\r\n\t\treturn ContainmentType.Disjoint;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围球是否包含另一个三角面\r\n\t * @param\tsphere\r\n\t * @param\tvertex1 三角面顶点1\r\n\t * @param\tvertex2 三角面顶点2\r\n\t * @param\tvertex3 三角面顶点3\r\n\t * @return  返回空间位置关系\r\n\t */\r\n\tstatic sphereContainsTriangle(sphere: BoundSphere, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): number {\r\n\t\tvar test1: number = CollisionUtils.sphereContainsPoint(sphere, vertex1);\r\n\t\tvar test2: number = CollisionUtils.sphereContainsPoint(sphere, vertex2);\r\n\t\tvar test3: number = CollisionUtils.sphereContainsPoint(sphere, vertex3);\r\n\r\n\t\tif (test1 == ContainmentType.Contains && test2 == ContainmentType.Contains && test3 == ContainmentType.Contains)\r\n\t\t\treturn ContainmentType.Contains;\r\n\r\n\t\tif (CollisionUtils.intersectsSphereAndTriangle(sphere, vertex1, vertex2, vertex3))\r\n\t\t\treturn ContainmentType.Intersects;\r\n\r\n\t\treturn ContainmentType.Disjoint;\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围球是否包含另一包围盒\r\n\t * @param\tsphere 包围球\r\n\t * @param   box 包围盒\r\n\t * @return  位置关系:0 不想交,1 包含, 2 相交\r\n\t */\r\n\tstatic sphereContainsBox(sphere: BoundSphere, box: BoundBox): number {\r\n\r\n\t\tvar sphereC: Vector3 = sphere.center;\r\n\t\tvar sphereCeX: number = sphereC.x;\r\n\t\tvar sphereCeY: number = sphereC.y;\r\n\t\tvar sphereCeZ: number = sphereC.z;\r\n\r\n\t\tvar sphereR: number = sphere.radius;\r\n\r\n\t\tvar boxMin: Vector3 = box.min;\r\n\t\tvar boxMineX: number = boxMin.x;\r\n\t\tvar boxMineY: number = boxMin.y;\r\n\t\tvar boxMineZ: number = boxMin.z;\r\n\r\n\t\tvar boxMax: Vector3 = box.max;\r\n\t\tvar boxMaxeX: number = boxMax.x;\r\n\t\tvar boxMaxeY: number = boxMax.y;\r\n\t\tvar boxMaxeZ: number = boxMax.z;\r\n\r\n\t\tvar _tempV30e: Vector3 = CollisionUtils._tempV30;\r\n\t\tvar _tempV30eX: number = _tempV30e.x;\r\n\t\tvar _tempV30eY: number = _tempV30e.y;\r\n\t\tvar _tempV30eZ: number = _tempV30e.z;\r\n\r\n\t\tif (!CollisionUtils.intersectsBoxAndSphere(box, sphere))\r\n\t\t\treturn ContainmentType.Disjoint;\r\n\r\n\t\tvar radiusSquared: number = sphereR * sphereR;\r\n\r\n\t\t_tempV30eX = sphereCeX - boxMineX;\r\n\t\t_tempV30eY = sphereCeY - boxMaxeY;\r\n\t\t_tempV30eZ = sphereCeZ - boxMaxeZ;\r\n\t\tif (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n\t\t\treturn ContainmentType.Intersects;\r\n\r\n\t\t_tempV30eX = sphereCeX - boxMaxeX;\r\n\t\t_tempV30eY = sphereCeY - boxMaxeY;\r\n\t\t_tempV30eZ = sphereCeZ - boxMaxeZ;\r\n\t\tif (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n\t\t\treturn ContainmentType.Intersects;\r\n\r\n\t\t_tempV30eX = sphereCeX - boxMaxeX;\r\n\t\t_tempV30eY = sphereCeY - boxMineY;\r\n\t\t_tempV30eZ = sphereCeZ - boxMaxeZ;\r\n\t\tif (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n\t\t\treturn ContainmentType.Intersects;\r\n\r\n\t\t_tempV30eX = sphereCeX - boxMineX;\r\n\t\t_tempV30eY = sphereCeY - boxMineY;\r\n\t\t_tempV30eZ = sphereCeZ - boxMaxeZ;\r\n\t\tif (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n\t\t\treturn ContainmentType.Intersects;\r\n\r\n\t\t_tempV30eX = sphereCeX - boxMineX;\r\n\t\t_tempV30eY = sphereCeY - boxMaxeY;\r\n\t\t_tempV30eZ = sphereCeZ - boxMineZ;\r\n\t\tif (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n\t\t\treturn ContainmentType.Intersects;\r\n\r\n\t\t_tempV30eX = sphereCeX - boxMaxeX;\r\n\t\t_tempV30eY = sphereCeY - boxMaxeY;\r\n\t\t_tempV30eZ = sphereCeZ - boxMineZ;\r\n\t\tif (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n\t\t\treturn ContainmentType.Intersects;\r\n\r\n\t\t_tempV30eX = sphereCeX - boxMaxeX;\r\n\t\t_tempV30eY = sphereCeY - boxMineY;\r\n\t\t_tempV30eZ = sphereCeZ - boxMineZ;\r\n\t\tif (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n\t\t\treturn ContainmentType.Intersects;\r\n\r\n\t\t_tempV30eX = sphereCeX - boxMineX;\r\n\t\t_tempV30eY = sphereCeY - boxMineY;\r\n\t\t_tempV30eZ = sphereCeZ - boxMineZ;\r\n\t\tif (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n\t\t\treturn ContainmentType.Intersects;\r\n\r\n\t\treturn ContainmentType.Contains;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围球是否包含另一包围球\r\n\t * @param\tsphere1 包围球\r\n\t * @param   sphere2 包围球\r\n\t * @return  位置关系:0 不想交,1 包含, 2 相交\r\n\t */\r\n\tstatic sphereContainsSphere(sphere1: BoundSphere, sphere2: BoundSphere): number {\r\n\r\n\t\tvar sphere1R: number = sphere1.radius;\r\n\t\tvar sphere2R: number = sphere2.radius;\r\n\r\n\t\tvar distance: number = Vector3.distance(sphere1.center, sphere2.center);\r\n\r\n\t\tif (sphere1R + sphere2R < distance)\r\n\t\t\treturn ContainmentType.Disjoint;\r\n\r\n\t\tif (sphere1R - sphere2R < distance)\r\n\t\t\treturn ContainmentType.Intersects;\r\n\r\n\t\treturn ContainmentType.Contains;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 空间中点与三角面的最近点\r\n\t * @param\tpoint 点\r\n\t * @param\tvertex1 三角面顶点1\r\n\t * @param\tvertex2\t三角面顶点2\r\n\t * @param\tvertex3 三角面顶点3\r\n\t * @param\tout 最近点\r\n\t */\r\n\tstatic closestPointPointTriangle(point: Vector3, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: Vector3): void {\r\n\r\n\t\tVector3.subtract(vertex2, vertex1, CollisionUtils._tempV30);\r\n\t\tVector3.subtract(vertex3, vertex1, CollisionUtils._tempV31);\r\n\r\n\t\tVector3.subtract(point, vertex1, CollisionUtils._tempV32);\r\n\t\tVector3.subtract(point, vertex2, CollisionUtils._tempV33);\r\n\t\tVector3.subtract(point, vertex3, CollisionUtils._tempV34);\r\n\r\n\t\tvar d1: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV32);\r\n\t\tvar d2: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV32);\r\n\t\tvar d3: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV33);\r\n\t\tvar d4: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV33);\r\n\t\tvar d5: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV34);\r\n\t\tvar d6: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV34);\r\n\r\n\t\tif (d1 <= 0 && d2 <= 0) {\r\n\t\t\tvertex1.cloneTo(out);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (d3 >= 0 && d4 <= d3) {\r\n\t\t\tvertex2.cloneTo(out);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar vc: number = d1 * d4 - d3 * d2;\r\n\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\r\n\t\t\tvar v: number = d1 / (d1 - d3);\r\n\t\t\tVector3.scale(CollisionUtils._tempV30, v, out);\r\n\t\t\tVector3.add(vertex1, out, out);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (d6 >= 0 && d5 <= d6) {\r\n\t\t\tvertex3.cloneTo(out);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar vb: number = d5 * d2 - d1 * d6;\r\n\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\r\n\t\t\tvar w: number = d2 / (d2 - d6);\r\n\t\t\tVector3.scale(CollisionUtils._tempV31, w, out);\r\n\t\t\tVector3.add(vertex1, out, out);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar va: number = d3 * d6 - d5 * d4;\r\n\t\tif (va <= 0 && (d4 - d3) >= 0 && (d5 - d6) >= 0) {\r\n\t\t\tvar w3: number = (d4 - d3) / ((d4 - d3) + (d5 - d6));\r\n\t\t\tVector3.subtract(vertex3, vertex2, out);\r\n\t\t\tVector3.scale(out, w3, out);\r\n\t\t\tVector3.add(vertex2, out, out);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar denom: number = 1 / (va + vb + vc);\r\n\t\tvar v2: number = vb * denom;\r\n\t\tvar w2: number = vc * denom;\r\n\t\tVector3.scale(CollisionUtils._tempV30, v2, CollisionUtils._tempV35);\r\n\t\tVector3.scale(CollisionUtils._tempV31, w2, CollisionUtils._tempV36);\r\n\t\tVector3.add(CollisionUtils._tempV35, CollisionUtils._tempV36, out);\r\n\t\tVector3.add(vertex1, out, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中平面与一点的最近点\r\n\t * @param\tplane 平面\r\n\t * @param\tpoint 点\r\n\t * @param\tout 最近点\r\n\t */\r\n\tstatic closestPointPlanePoint(plane: Plane, point: Vector3, out: Vector3): void {\r\n\r\n\t\tvar planeN: Vector3 = plane.normal;\r\n\t\tvar t: number = Vector3.dot(planeN, point) - plane.distance;\r\n\r\n\t\tVector3.scale(planeN, t, CollisionUtils._tempV30);\r\n\t\tVector3.subtract(point, CollisionUtils._tempV30, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围盒与一点的最近点\r\n\t * @param\tbox 包围盒\r\n\t * @param\tpoint 点\r\n\t * @param\tout 最近点\r\n\t */\r\n\tstatic closestPointBoxPoint(box: BoundBox, point: Vector3, out: Vector3): void {\r\n\t\tVector3.max(point, box.min, CollisionUtils._tempV30);\r\n\t\tVector3.min(CollisionUtils._tempV30, box.max, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围球与一点的最近点\r\n\t * @param\tsphere 包围球\r\n\t * @param\tpoint 点\r\n\t * @param\tout 最近点\r\n\t */\r\n\tstatic closestPointSpherePoint(sphere: BoundSphere, point: Vector3, out: Vector3): void {\r\n\t\tvar sphereC: Vector3 = sphere.center;\r\n\r\n\t\tVector3.subtract(point, sphereC, out);\r\n\t\tVector3.normalize(out, out);\r\n\r\n\t\tVector3.scale(out, sphere.radius, out);\r\n\t\tVector3.add(out, sphereC, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 空间中包围球与包围球的最近点\r\n\t * @param\tsphere1 包围球1\r\n\t * @param\tsphere2 包围球2\r\n\t * @param\tout 最近点\r\n\t */\r\n\tstatic closestPointSphereSphere(sphere1: BoundSphere, sphere2: BoundSphere, out: Vector3): void {\r\n\t\tvar sphere1C: Vector3 = sphere1.center;\r\n\r\n\t\tVector3.subtract(sphere2.center, sphere1C, out);\r\n\t\tVector3.normalize(out, out);\r\n\r\n\t\tVector3.scale(out, sphere1.radius, out);\r\n\t\tVector3.add(out, sphere1C, out);\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n","import { Vector3 } from \"./Vector3\";\r\nimport { Matrix4x4 } from \"./Matrix4x4\";\r\nimport { Plane } from \"./Plane\";\r\nimport { CollisionUtils } from \"./CollisionUtils\";\r\nimport { ContainmentType } from \"./ContainmentType\";\r\nimport { BoundBox } from \"./BoundBox\";\r\nimport { BoundSphere } from \"./BoundSphere\";\r\n\r\n/**\r\n * 锥体角点。\r\n */\r\nexport enum FrustumCorner {\r\n\tFarBottomLeft = 0,\r\n\tFarTopLeft = 1,\r\n\tFarTopRight = 2,\r\n\tFarBottomRight = 3,\r\n\tnearBottomLeft = 4,\r\n\tnearTopLeft = 5,\r\n\tnearTopRight = 6,\r\n\tnearBottomRight = 7,\r\n\tunknown = 8\r\n}\r\n\r\n\r\n/**\r\n * <code>BoundFrustum</code> 类用于创建锥截体。\r\n */\r\nexport class BoundFrustum {\r\n\t/** @internal */\r\n\tprivate static _tempV30: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV31: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV32: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV33: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV34: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV35: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV36: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * 根据矩阵获取6个包围平面。\r\n\t * @param  m 描述矩阵。\r\n\t * @param  np 近平面。\r\n\t * @param  fp 远平面。\r\n\t * @param  lp 左平面。\r\n\t * @param  rp 右平面。\r\n\t * @param  tp 顶平面。\r\n\t * @param  bp 底平面。\r\n\t */\r\n\tstatic getPlanesFromMatrix(m: Matrix4x4, np: Plane, fp: Plane, lp: Plane, rp: Plane, tp: Plane, bp: Plane): void {\r\n\t\tvar matrixE: Float32Array = m.elements;\r\n\t\tvar m11: number = matrixE[0];\r\n\t\tvar m12: number = matrixE[1];\r\n\t\tvar m13: number = matrixE[2];\r\n\t\tvar m14: number = matrixE[3];\r\n\t\tvar m21: number = matrixE[4];\r\n\t\tvar m22: number = matrixE[5];\r\n\t\tvar m23: number = matrixE[6];\r\n\t\tvar m24: number = matrixE[7];\r\n\t\tvar m31: number = matrixE[8];\r\n\t\tvar m32: number = matrixE[9];\r\n\t\tvar m33: number = matrixE[10];\r\n\t\tvar m34: number = matrixE[11];\r\n\t\tvar m41: number = matrixE[12];\r\n\t\tvar m42: number = matrixE[13];\r\n\t\tvar m43: number = matrixE[14];\r\n\t\tvar m44: number = matrixE[15];\r\n\r\n\t\t//near\r\n\t\tvar nearNorE: Vector3 = np.normal;\r\n\t\tnearNorE.x = m13;\r\n\t\tnearNorE.y = m23;\r\n\t\tnearNorE.z = m33;\r\n\t\tnp.distance = m43;\r\n\t\tnp.normalize();\r\n\r\n\t\t//far\r\n\t\tvar farNorE: Vector3 = fp.normal;\r\n\t\tfarNorE.x = m14 - m13;\r\n\t\tfarNorE.y = m24 - m23;\r\n\t\tfarNorE.z = m34 - m33;\r\n\t\tfp.distance = m44 - m43;\r\n\t\tfp.normalize();\r\n\r\n\t\t//left\r\n\t\tvar leftNorE: Vector3 = lp.normal;\r\n\t\tleftNorE.x = m14 + m11;\r\n\t\tleftNorE.y = m24 + m21;\r\n\t\tleftNorE.z = m34 + m31;\r\n\t\tlp.distance = m44 + m41;\r\n\t\tlp.normalize();\r\n\r\n\t\t//right\r\n\t\tvar rightNorE: Vector3 = rp.normal;\r\n\t\trightNorE.x = m14 - m11;\r\n\t\trightNorE.y = m24 - m21;\r\n\t\trightNorE.z = m34 - m31;\r\n\t\trp.distance = m44 - m41;\r\n\t\trp.normalize();\r\n\r\n\t\t//top\r\n\t\tvar topNorE: Vector3 = tp.normal;\r\n\t\ttopNorE.x = m14 - m12;\r\n\t\ttopNorE.y = m24 - m22;\r\n\t\ttopNorE.z = m34 - m32;\r\n\t\ttp.distance = m44 - m42;\r\n\t\ttp.normalize();\r\n\r\n\t\t//bottom\r\n\t\tvar bottomNorE: Vector3 = bp.normal;\r\n\t\tbottomNorE.x = m14 + m12;\r\n\t\tbottomNorE.y = m24 + m22;\r\n\t\tbottomNorE.z = m34 + m32;\r\n\t\tbp.distance = m44 + m42;\r\n\t\tbp.normalize();\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _matrix: Matrix4x4;\r\n\t/** @internal */\r\n\t_near: Plane;\r\n\t/** @internal */\r\n\t_far: Plane;\r\n\t/** @internal */\r\n\t_left: Plane;\r\n\t/** @internal */\r\n\t_right: Plane;\r\n\t/** @internal */\r\n\t_top: Plane;\r\n\t/** @internal */\r\n\t_bottom: Plane;\r\n\r\n\t/**\r\n\t * 创建一个 <code>BoundFrustum</code> 实例。\r\n\t * @param\tmatrix 锥截体的描述4x4矩阵。\r\n\t */\r\n\tconstructor(matrix: Matrix4x4) {\r\n\t\tthis._matrix = matrix;\r\n\t\tthis._near = new Plane(new Vector3());\r\n\t\tthis._far = new Plane(new Vector3());\r\n\t\tthis._left = new Plane(new Vector3());\r\n\t\tthis._right = new Plane(new Vector3());\r\n\t\tthis._top = new Plane(new Vector3());\r\n\t\tthis._bottom = new Plane(new Vector3());\r\n\t\tBoundFrustum.getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);\r\n\t}\r\n\r\n\t/**\r\n\t * 描述矩阵。\r\n\t */\r\n\tget matrix(): Matrix4x4 {\r\n\t\treturn this._matrix;\r\n\t}\r\n\r\n\tset matrix(matrix: Matrix4x4) {\r\n\t\tmatrix.cloneTo(this._matrix)\r\n\t\tBoundFrustum.getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);\r\n\t}\r\n\r\n\t/**\r\n\t * 近平面。\r\n\t */\r\n\tget near(): Plane {\r\n\t\treturn this._near;\r\n\t}\r\n\r\n\t/**\r\n\t * 远平面。\r\n\t */\r\n\tget far(): Plane {\r\n\t\treturn this._far;\r\n\t}\r\n\r\n\t/**\r\n\t * 左平面。\r\n\t */\r\n\tget left(): Plane {\r\n\t\treturn this._left;\r\n\t}\r\n\r\n\t/**\r\n\t * 右平面。\r\n\t */\r\n\tget right(): Plane {\r\n\t\treturn this._right;\r\n\t}\r\n\r\n\t/**\r\n\t * 顶平面。\r\n\t */\r\n\tget top(): Plane {\r\n\t\treturn this._top;\r\n\t}\r\n\r\n\t/**\r\n\t * 底平面。\r\n\t */\r\n\tget bottom(): Plane {\r\n\t\treturn this._bottom;\r\n\t}\r\n\r\n\t/**\r\n\t * 判断是否与其他锥截体相等。\r\n\t * @param\tother 锥截体。\r\n\t */\r\n\tequalsBoundFrustum(other: BoundFrustum): boolean {\r\n\t\treturn this._matrix.equalsOtherMatrix(other.matrix)\r\n\t}\r\n\r\n\t/**\r\n\t * 判断是否与其他对象相等。\r\n\t * @param\tobj 对象。\r\n\t */\r\n\tequalsObj(obj: any): boolean {\r\n\t\tif (obj instanceof BoundFrustum) {\r\n\t\t\tvar bf: BoundFrustum = (<BoundFrustum>obj);\r\n\t\t\treturn this.equalsBoundFrustum(bf);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取锥截体的任意一平面。\r\n\t * 0:近平面\r\n\t * 1:远平面\r\n\t * 2:左平面\r\n\t * 3:右平面\r\n\t * 4:顶平面\r\n\t * 5:底平面\r\n\t * @param\tindex 索引。\r\n\t */\r\n\tgetPlane(index: number): Plane {\r\n\t\tswitch (index) {\r\n\t\t\tcase 0:\r\n\t\t\t\treturn this._near;\r\n\t\t\tcase 1:\r\n\t\t\t\treturn this._far;\r\n\t\t\tcase 2:\r\n\t\t\t\treturn this._left;\r\n\t\t\tcase 3:\r\n\t\t\t\treturn this._right;\r\n\t\t\tcase 4:\r\n\t\t\t\treturn this._top;\r\n\t\t\tcase 5:\r\n\t\t\t\treturn this._bottom;\r\n\t\t\tdefault:\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 锥截体三个相交平面的交点。\r\n\t * @param  p1  平面1。\r\n\t * @param  p2  平面2。\r\n\t * @param  p3  平面3。\r\n\t */\r\n\tstatic get3PlaneInterPoint(p1: Plane, p2: Plane, p3: Plane, out: Vector3): void {\r\n\t\tvar p1Nor: Vector3 = p1.normal;\r\n\t\tvar p2Nor: Vector3 = p2.normal;\r\n\t\tvar p3Nor: Vector3 = p3.normal;\r\n\r\n\t\tVector3.cross(p2Nor, p3Nor, BoundFrustum._tempV30);\r\n\t\tVector3.cross(p3Nor, p1Nor, BoundFrustum._tempV31);\r\n\t\tVector3.cross(p1Nor, p2Nor, BoundFrustum._tempV32);\r\n\r\n\t\tvar a: number = Vector3.dot(p1Nor, BoundFrustum._tempV30);\r\n\t\tvar b: number = Vector3.dot(p2Nor, BoundFrustum._tempV31);\r\n\t\tvar c: number = Vector3.dot(p3Nor, BoundFrustum._tempV32);\r\n\r\n\t\tVector3.scale(BoundFrustum._tempV30, -p1.distance / a, BoundFrustum._tempV33);\r\n\t\tVector3.scale(BoundFrustum._tempV31, -p2.distance / b, BoundFrustum._tempV34);\r\n\t\tVector3.scale(BoundFrustum._tempV32, -p3.distance / c, BoundFrustum._tempV35);\r\n\r\n\t\tVector3.add(BoundFrustum._tempV33, BoundFrustum._tempV34, BoundFrustum._tempV36);\r\n\t\tVector3.add(BoundFrustum._tempV35, BoundFrustum._tempV36, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 锥截体的8个顶点。\r\n\t * @param  corners  返回顶点的输出队列。\r\n\t */\r\n\tgetCorners(corners: Vector3[]): void {\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._bottom, this._right, corners[FrustumCorner.nearBottomRight]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._top, this._right, corners[FrustumCorner.nearTopRight]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._top, this._left, corners[FrustumCorner.nearTopLeft]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._bottom, this._left, corners[FrustumCorner.nearBottomLeft]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._bottom, this._right, corners[FrustumCorner.FarBottomRight]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._top, this._right, corners[FrustumCorner.FarTopRight]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._top, this._left, corners[FrustumCorner.FarTopLeft]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._bottom, this._left, corners[FrustumCorner.FarBottomLeft]);\r\n\t}\r\n\r\n\t/**\r\n\t * 与点的关系。\r\n\t * @param  point  点。\r\n\t * @returns 包涵:1,相交:2,不相交:0\r\n\t */\r\n\tcontainsPoint(point: Vector3): number {\r\n\t\tvar result: number = Plane.PlaneIntersectionType_Front;\r\n\t\tvar planeResult: number = Plane.PlaneIntersectionType_Front;\r\n\r\n\t\tfor (var i: number = 0; i < 6; i++) {\r\n\r\n\t\t\tswitch (i) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._near, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._far, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._left, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._right, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._top, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._bottom, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (planeResult) {\r\n\t\t\t\tcase Plane.PlaneIntersectionType_Back:\r\n\t\t\t\t\treturn ContainmentType.Disjoint;\r\n\t\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\r\n\t\t\t\t\tresult = Plane.PlaneIntersectionType_Intersecting;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswitch (result) {\r\n\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\r\n\t\t\t\treturn ContainmentType.Intersects;\r\n\t\t\tdefault:\r\n\t\t\t\treturn ContainmentType.Contains;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 是否与包围盒交叉。\r\n\t * @param box 包围盒。\r\n\t * @returns boolean 是否相交\r\n\t */\r\n\tintersects(box: BoundBox): boolean {\r\n\t\tvar min: Vector3 = box.min;\r\n\t\tvar max: Vector3 = box.max;\r\n\t\tvar minX: number = min.x;\r\n\t\tvar minY: number = min.y;\r\n\t\tvar minZ: number = min.z;\r\n\t\tvar maxX: number = max.x;\r\n\t\tvar maxY: number = max.y;\r\n\t\tvar maxZ: number = max.z;\r\n\r\n\t\tvar nearNormal: Vector3 = this._near.normal;\r\n\t\tif (this._near.distance + (nearNormal.x * (nearNormal.x < 0 ? minX : maxX)) + (nearNormal.y * (nearNormal.y < 0 ? minY : maxY)) + (nearNormal.z * (nearNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\tvar leftNormal: Vector3 = this._left.normal;\r\n\t\tif (this._left.distance + (leftNormal.x * (leftNormal.x < 0 ? minX : maxX)) + (leftNormal.y * (leftNormal.y < 0 ? minY : maxY)) + (leftNormal.z * (leftNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false\r\n\r\n\t\tvar rightNormal: Vector3 = this._right.normal;\r\n\t\tif (this._right.distance + (rightNormal.x * (rightNormal.x < 0 ? minX : maxX)) + (rightNormal.y * (rightNormal.y < 0 ? minY : maxY)) + (rightNormal.z * (rightNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\tvar bottomNormal: Vector3 = this._bottom.normal;\r\n\t\tif (this._bottom.distance + (bottomNormal.x * (bottomNormal.x < 0 ? minX : maxX)) + (bottomNormal.y * (bottomNormal.y < 0 ? minY : maxY)) + (bottomNormal.z * (bottomNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\tvar topNormal: Vector3 = this._top.normal;\r\n\t\tif (this._top.distance + (topNormal.x * (topNormal.x < 0 ? minX : maxX)) + (topNormal.y * (topNormal.y < 0 ? minY : maxY)) + (topNormal.z * (topNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\t// Can ignore far plane when distant object culling is handled by another mechanism\r\n\t\tvar farNormal: Vector3 = this._far.normal;\r\n\t\tif (this._far.distance + (farNormal.x * (farNormal.x < 0 ? minX : maxX)) + (farNormal.y * (farNormal.y < 0 ? minY : maxY)) + (farNormal.z * (farNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 与包围盒的位置关系。\r\n\t * @param  box  包围盒。\r\n\t * @returns 包涵:1,相交:2,不相交:0\r\n\t */\r\n\tcontainsBoundBox(box: BoundBox): number {\r\n\t\tvar p: Vector3 = BoundFrustum._tempV30, n: Vector3 = BoundFrustum._tempV31;\r\n\t\tvar boxMin: Vector3 = box.min;\r\n\t\tvar boxMax: Vector3 = box.max;\r\n\t\tvar result: number = ContainmentType.Contains;\r\n\t\tfor (var i: number = 0; i < 6; i++) {\r\n\t\t\tvar plane: Plane = this.getPlane(i);\r\n\t\t\tvar planeNor: Vector3 = plane.normal;\r\n\r\n\t\t\tif (planeNor.x >= 0) {\r\n\t\t\t\tp.x = boxMax.x;\r\n\t\t\t\tn.x = boxMin.x;\r\n\t\t\t} else {\r\n\t\t\t\tp.x = boxMin.x;\r\n\t\t\t\tn.x = boxMax.x;\r\n\t\t\t}\r\n\t\t\tif (planeNor.y >= 0) {\r\n\t\t\t\tp.y = boxMax.y;\r\n\t\t\t\tn.y = boxMin.y;\r\n\t\t\t} else {\r\n\t\t\t\tp.y = boxMin.y;\r\n\t\t\t\tn.y = boxMax.y;\r\n\t\t\t}\r\n\t\t\tif (planeNor.z >= 0) {\r\n\t\t\t\tp.z = boxMax.z;\r\n\t\t\t\tn.z = boxMin.z;\r\n\t\t\t} else {\r\n\t\t\t\tp.z = boxMin.z;\r\n\t\t\t\tn.z = boxMax.z;\r\n\t\t\t}\r\n\r\n\t\t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, p) === Plane.PlaneIntersectionType_Back)\r\n\t\t\t\treturn ContainmentType.Disjoint;\r\n\r\n\t\t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, n) === Plane.PlaneIntersectionType_Back)\r\n\t\t\t\tresult = ContainmentType.Intersects;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * 与包围球的位置关系\r\n\t * @param  sphere  包围球。\r\n\t * @returns 包涵:1,相交:2,不相交:0\r\n\t */\r\n\tcontainsBoundSphere(sphere: BoundSphere): number {\r\n\t\tvar result: number = Plane.PlaneIntersectionType_Front;\r\n\t\tvar planeResult: number = Plane.PlaneIntersectionType_Front;\r\n\t\tfor (var i: number = 0; i < 6; i++) {\r\n\t\t\tswitch (i) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._near, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._far, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._left, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._right, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._top, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._bottom, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (planeResult) {\r\n\r\n\t\t\t\tcase Plane.PlaneIntersectionType_Back:\r\n\t\t\t\t\treturn ContainmentType.Disjoint;\r\n\t\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\r\n\t\t\t\t\tresult = Plane.PlaneIntersectionType_Intersecting;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswitch (result) {\r\n\r\n\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\r\n\t\t\t\treturn ContainmentType.Intersects;\r\n\t\t\tdefault:\r\n\t\t\t\treturn ContainmentType.Contains;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n","import { Matrix4x4 } from \"./Matrix4x4\";\r\nimport { Vector3 } from \"./Vector3\";\r\nimport { Vector4 } from \"./Vector4\";\r\n/**\r\n * <code>Viewport</code> 类用于创建视口。\r\n */\r\nexport class Viewport {\r\n\t/** @internal */\r\n\tprivate static _tempMatrix4x4: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/**X轴坐标*/\r\n\tx: number;\r\n\t/**Y轴坐标*/\r\n\ty: number;\r\n\t/**宽度*/\r\n\twidth: number;\r\n\t/**高度*/\r\n\theight: number;\r\n\t/**最小深度*/\r\n\tminDepth: number;\r\n\t/**最大深度*/\r\n\tmaxDepth: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Viewport</code> 实例。\r\n\t * @param\tx x坐标。\r\n\t * @param\ty y坐标。\r\n\t * @param\twidth 宽度。\r\n\t * @param\theight 高度。\r\n\t */\r\n\tconstructor(x: number, y: number, width: number, height: number) {\r\n\t\tthis.minDepth = 0.0;\r\n\t\tthis.maxDepth = 1.0;\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\r\n\t/**\r\n\t * 投影一个三维向量到视口空间。\r\n\t * @param\tsource 三维向量。\r\n\t * @param\tmatrix 变换矩阵。\r\n\t * @param\tout x、y、z为视口空间坐标,透视投影下w为相对于变换矩阵的z轴坐标。\r\n\t */\r\n\tproject(source: Vector3, matrix: Matrix4x4, out: Vector4): void {\r\n\t\tVector3.transformV3ToV4(source, matrix, out);\r\n\t\tvar x: number = out.x, y: number = out.y, z: number = out.z;\r\n\t\tvar w: number = out.w;\r\n\t\tif (w !== 1.0) {\r\n\t\t\tx = x / w;\r\n\t\t\ty = y / w;\r\n\t\t\tz = z / w;\r\n\t\t}\r\n\t\tout.x = (x + 1.0) * 0.5 * this.width + this.x;\r\n\t\tout.y = (-y + 1.0) * 0.5 * this.height + this.y;\r\n\t\tout.z = z * (this.maxDepth - this.minDepth) + this.minDepth;\r\n\t}\r\n\r\n\t/**\r\n\t * 反变换一个三维向量。\r\n\t * @param\tsource 源三维向量。\r\n\t * @param\tmatrix 变换矩阵。\r\n\t * @param\tout 输出三维向量。\r\n\t */\r\n\tunprojectFromMat(source: Vector3, matrix: Matrix4x4, out: Vector3): void {\r\n\t\tvar matrixEleme: Float32Array = matrix.elements;\r\n\r\n\t\tout.x = (((source.x - this.x) / this.width) * 2.0) - 1.0;\r\n\t\tout.y = -((((source.y - this.y) / this.height) * 2.0) - 1.0);\r\n\t\tout.z = (source.z - this.minDepth) / (this.maxDepth - this.minDepth);\r\n\t\tvar a: number = (((out.x * matrixEleme[3]) + (out.y * matrixEleme[7])) + (out.z * matrixEleme[11])) + matrixEleme[15];\r\n\t\tVector3.transformV3ToV3(out, matrix, out);\r\n\t\tif (a !== 1.0) {\r\n\t\t\tout.x = out.x / a;\r\n\t\t\tout.y = out.y / a;\r\n\t\t\tout.z = out.z / a;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 反变换一个三维向量。\r\n\t * @param\tsource 源三维向量。\r\n\t * @param\tprojection  透视投影矩阵。\r\n\t * @param\tview 视图矩阵。\r\n\t * @param\tworld 世界矩阵,可设置为null。\r\n\t * @param   out 输出向量。\r\n\t */\r\n\tunprojectFromWVP(source: Vector3, projection: Matrix4x4, view: Matrix4x4, world: Matrix4x4, out: Vector3): void {\r\n\r\n\t\tMatrix4x4.multiply(projection, view, Viewport._tempMatrix4x4);\r\n\t\t(world) && (Matrix4x4.multiply(Viewport._tempMatrix4x4, world, Viewport._tempMatrix4x4));\r\n\t\tViewport._tempMatrix4x4.invert(Viewport._tempMatrix4x4);\r\n\t\tthis.unprojectFromMat(source, Viewport._tempMatrix4x4, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆\r\n\t * @param\tout\r\n\t */\r\n\tcloneTo(out: Viewport): void {\r\n\t\tout.x = this.x;\r\n\t\tout.y = this.y;\r\n\t\tout.width = this.width;\r\n\t\tout.height = this.height;\r\n\t\tout.minDepth = this.minDepth;\r\n\t\tout.maxDepth = this.maxDepth;\r\n\t}\r\n}\r\n\r\n\r\n","import { Matrix4x4 } from \"../math/Matrix4x4\"\r\n\timport { Ray } from \"../math/Ray\"\r\n\timport { Vector2 } from \"../math/Vector2\"\r\n\timport { Vector3 } from \"../math/Vector3\"\r\n\timport { Viewport } from \"../math/Viewport\"\r\n\t\r\n\t/**\r\n\t * <code>Picker</code> 类用于创建拾取。\r\n\t */\r\n\texport class Picker {\r\n\t\tprivate static _tempVector30:Vector3 = new Vector3();\r\n\t\tprivate static _tempVector31:Vector3 = new Vector3();\r\n\t\tprivate static _tempVector32:Vector3 = new Vector3();\r\n\t\tprivate static _tempVector33:Vector3 = new Vector3();\r\n\t\tprivate static _tempVector34:Vector3 = new Vector3();\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个 <code>Picker</code> 实例。\r\n\t\t */\r\n\t\tconstructor(){\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算鼠标生成的射线。\r\n\t\t * @param\tpoint 鼠标位置。\r\n\t\t * @param\tviewPort 视口。\r\n\t\t * @param\tprojectionMatrix 透视投影矩阵。\r\n\t\t * @param\tviewMatrix 视图矩阵。\r\n\t\t * @param\tworld 世界偏移矩阵。\r\n\t\t * @return  out  输出射线。\r\n\t\t */\r\n\t\t static calculateCursorRay(point:Vector2, viewPort:Viewport, projectionMatrix:Matrix4x4, viewMatrix:Matrix4x4, world:Matrix4x4, out:Ray):void {\r\n\t\t\t\r\n\t\t\tvar x:number = point.x;\r\n\t\t\tvar y:number = point.y;\r\n\t\t\t\r\n\t\t\tvar nearSource:Vector3 = Picker._tempVector30;\r\n\t\t\tvar nerSourceE:Vector3 = nearSource;\r\n\t\t\tnerSourceE.x = x;\r\n\t\t\tnerSourceE.y = y;\r\n\t\t\tnerSourceE.z = viewPort.minDepth;\r\n\t\t\t\r\n\t\t\tvar farSource:Vector3 = Picker._tempVector31;\r\n\t\t\tvar farSourceE:Vector3 = farSource;\r\n\t\t\tfarSourceE.x = x;\r\n\t\t\tfarSourceE.y = y;\r\n\t\t\tfarSourceE.z = viewPort.maxDepth;\r\n\t\t\t\r\n\t\t\tvar nearPoint:Vector3 = out.origin;\r\n\t\t\tvar farPoint:Vector3 = Picker._tempVector32;\r\n\t\t\t\r\n\t\t\tviewPort.unprojectFromWVP(nearSource, projectionMatrix, viewMatrix, world, nearPoint);\r\n\t\t\tviewPort.unprojectFromWVP(farSource, projectionMatrix, viewMatrix, world, farPoint);\r\n\t\t\t\r\n\t\t\tvar outDire:Vector3 = out.direction;\r\n\t\t\toutDire.x = farPoint.x - nearPoint.x;\r\n\t\t\toutDire.y = farPoint.y - nearPoint.y;\r\n\t\t\toutDire.z = farPoint.z - nearPoint.z;\r\n\t\t\tVector3.normalize(out.direction, out.direction);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 计算射线和三角形碰撞并返回碰撞距离。\r\n\t\t * @param\tray 射线。\r\n\t\t * @param\tvertex1 顶点1。\r\n\t\t * @param\tvertex2 顶点2。\r\n\t\t * @param\tvertex3 顶点3。\r\n\t\t * @return   射线距离三角形的距离，返回Number.NaN则不相交。\r\n\t\t */\r\n\t\t static rayIntersectsTriangle(ray:Ray, vertex1:Vector3, vertex2:Vector3, vertex3:Vector3):number {\r\n\t\t\t\r\n\t\t\tvar result:number;\r\n\t\t\t// Compute vectors along two edges of the triangle.\r\n\t\t\tvar edge1:Vector3 = Picker._tempVector30, edge2:Vector3 = Picker._tempVector31;\r\n\t\t\t\r\n\t\t\tVector3.subtract(vertex2, vertex1, edge1);\r\n\t\t\tVector3.subtract(vertex3, vertex1, edge2);\r\n\t\t\t\r\n\t\t\t// Compute the determinant.\r\n\t\t\tvar directionCrossEdge2:Vector3 = Picker._tempVector32;\r\n\t\t\tVector3.cross(ray.direction, edge2, directionCrossEdge2);\r\n\t\t\t\r\n\t\t\tvar determinant:number;\r\n\t\t\tdeterminant = Vector3.dot(edge1, directionCrossEdge2);\r\n\t\t\t\r\n\t\t\t// If the ray is parallel to the triangle plane, there is no collision.\r\n\t\t\tif (determinant > -Number.MIN_VALUE && determinant < Number.MIN_VALUE) {\r\n\t\t\t\tresult = Number.NaN;\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar inverseDeterminant:number = 1.0 / determinant;\r\n\t\t\t\r\n\t\t\t// Calculate the U parameter of the intersection point.\r\n\t\t\tvar distanceVector:Vector3 = Picker._tempVector33;\r\n\t\t\tVector3.subtract(ray.origin, vertex1, distanceVector);\r\n\t\t\t\r\n\t\t\tvar triangleU:number;\r\n\t\t\ttriangleU = Vector3.dot(distanceVector, directionCrossEdge2);\r\n\t\t\ttriangleU *= inverseDeterminant;\r\n\t\t\t\r\n\t\t\t// Make sure it is inside the triangle.\r\n\t\t\tif (triangleU < 0 || triangleU > 1) {\r\n\t\t\t\tresult = Number.NaN;\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Calculate the V parameter of the intersection point.\r\n\t\t\tvar distanceCrossEdge1:Vector3 = Picker._tempVector34;\r\n\t\t\tVector3.cross(distanceVector, edge1, distanceCrossEdge1);\r\n\t\t\t\r\n\t\t\tvar triangleV:number;\r\n\t\t\ttriangleV = Vector3.dot(ray.direction, distanceCrossEdge1);\r\n\t\t\ttriangleV *= inverseDeterminant;\r\n\t\t\t\r\n\t\t\t// Make sure it is inside the triangle.\r\n\t\t\tif (triangleV < 0 || triangleU + triangleV > 1) {\r\n\t\t\t\tresult = Number.NaN;\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Compute the distance along the ray to the triangle.\r\n\t\t\tvar rayDistance:number;\r\n\t\t\trayDistance = Vector3.dot(edge2, distanceCrossEdge1);\r\n\t\t\trayDistance *= inverseDeterminant;\r\n\t\t\t\r\n\t\t\t// Is the triangle behind the ray origin?\r\n\t\t\tif (rayDistance < 0) {\r\n\t\t\t\tresult = Number.NaN;\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tresult = rayDistance;\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","import { LayaGL } from \"../../layagl/LayaGL\"\r\nimport { BufferStateBase } from \"../../webgl/BufferStateBase\"\r\nimport { IndexBuffer3D } from \"../graphics/IndexBuffer3D\"\r\nimport { VertexBuffer3D } from \"../graphics/VertexBuffer3D\"\r\nimport { VertexDeclaration } from \"../graphics/VertexDeclaration\"\r\n\r\n\r\n/**\r\n * @internal\r\n * <code>BufferState</code> 类用于实现渲染所需的Buffer状态集合。\r\n */\r\nexport class BufferState extends BufferStateBase {\r\n\t/**@readonly */\r\n\tvertexDeclaration: VertexDeclaration;\r\n\r\n\t/**\r\n\t * 创建一个 <code>BufferState</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * vertexBuffer的vertexDeclaration不能为空,该函数比较消耗性能，建议初始化时使用。\r\n\t */\r\n\tapplyVertexBuffer(vertexBuffer: VertexBuffer3D): void {//TODO:动态合并是否需要使用对象池机制\r\n\t\tif (BufferStateBase._curBindedBufferState === this) {\r\n\t\t\tvar gl: any = LayaGL.instance;\r\n\t\t\tvar verDec: VertexDeclaration = vertexBuffer.vertexDeclaration;\r\n\t\t\tvar valueData: any = verDec._shaderValues.getData();\r\n\t\t\tthis.vertexDeclaration = verDec;\r\n\t\t\tvertexBuffer.bind();\r\n\t\t\tfor (var k in valueData) {\r\n\t\t\t\tvar loc: number = parseInt(k);\r\n\t\t\t\tvar attribute: any[] = valueData[k];\r\n\t\t\t\tgl.enableVertexAttribArray(loc);\r\n\t\t\t\tgl.vertexAttribPointer(loc, attribute[0], attribute[1], !!attribute[2], attribute[3], attribute[4]);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow \"BufferState: must call bind() function first.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * vertexBuffers中的vertexDeclaration不能为空,该函数比较消耗性能，建议初始化时使用。\r\n\t */\r\n\tapplyVertexBuffers(vertexBuffers: VertexBuffer3D[]): void {\r\n\t\tif (BufferStateBase._curBindedBufferState === this) {\r\n\t\t\tvar gl: any = LayaGL.instance;\r\n\t\t\tfor (var i: number = 0, n: number = vertexBuffers.length; i < n; i++) {\r\n\t\t\t\tvar verBuf: VertexBuffer3D = vertexBuffers[i];\r\n\t\t\t\tvar verDec: VertexDeclaration = verBuf.vertexDeclaration;\r\n\t\t\t\tvar valueData: any = verDec._shaderValues.getData();\r\n\t\t\t\tverBuf.bind();\r\n\t\t\t\tfor (var k in valueData) {\r\n\t\t\t\t\tvar loc: number = parseInt(k);\r\n\t\t\t\t\tvar attribute: any[] = valueData[k];\r\n\t\t\t\t\tgl.enableVertexAttribArray(loc);\r\n\t\t\t\t\tgl.vertexAttribPointer(loc, attribute[0], attribute[1], !!attribute[2], attribute[3], attribute[4]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow \"BufferState: must call bind() function first.\";\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tapplyInstanceVertexBuffer(vertexBuffer: VertexBuffer3D): void {//TODO:动态合并是否需要使用对象池机制\r\n\t\tif (LayaGL.layaGPUInstance.supportInstance()) {//判断是否支持Instance\r\n\t\t\tif (BufferStateBase._curBindedBufferState === this) {\r\n\t\t\t\tvar gl: any = LayaGL.instance;\r\n\t\t\t\tvar verDec: VertexDeclaration = vertexBuffer.vertexDeclaration;\r\n\t\t\t\tvar valueData: any = verDec._shaderValues.getData();\r\n\t\t\t\tvertexBuffer.bind();\r\n\t\t\t\tfor (var k in valueData) {\r\n\t\t\t\t\tvar loc: number = parseInt(k);\r\n\t\t\t\t\tvar attribute: any[] = valueData[k];\r\n\t\t\t\t\tgl.enableVertexAttribArray(loc);\r\n\t\t\t\t\tgl.vertexAttribPointer(loc, attribute[0], attribute[1], !!attribute[2], attribute[3], attribute[4]);\r\n\t\t\t\t\tLayaGL.layaGPUInstance.vertexAttribDivisor(loc, 1);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthrow \"BufferState: must call bind() function first.\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tapplyIndexBuffer(indexBuffer: IndexBuffer3D): void {\r\n\t\tif (BufferStateBase._curBindedBufferState === this) {\r\n\t\t\tif (this._bindedIndexBuffer !== indexBuffer) {\r\n\t\t\t\tindexBuffer._bindForVAO();//TODO:可和vao合并bind\r\n\t\t\t\tthis._bindedIndexBuffer = indexBuffer;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow \"BufferState: must call bind() function first.\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n","export enum IndexFormat {\r\n    /** 8 位无符号整型索引格式。*/\r\n    UInt8,\r\n    /** 16 位无符号整型索引格式。*/\r\n    UInt16,\r\n    /** 32 位无符号整型索引格式。*/\r\n    UInt32\r\n}","import { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { BufferStateBase } from \"../../webgl/BufferStateBase\";\r\nimport { Buffer } from \"../../webgl/utils/Buffer\";\r\nimport { IndexFormat } from \"./IndexFormat\";\r\n\r\n/**\r\n * <code>IndexBuffer3D</code> 类用于创建索引缓冲。\r\n */\r\nexport class IndexBuffer3D extends Buffer {\r\n\t/** @internal */\r\n\tprivate _indexType: IndexFormat;\r\n\t/** @internal */\r\n\tprivate _indexTypeByteCount: number;\r\n\t/** @internal */\r\n\tprivate _indexCount: number;\r\n\t/** @internal */\r\n\tprivate _canRead: boolean;\r\n\r\n\t/**\r\n\t * 索引类型。\r\n\t */\r\n\tget indexType(): IndexFormat {\r\n\t\treturn this._indexType;\r\n\t}\r\n\r\n\t/**\r\n\t * 索引类型字节数量。\r\n\t */\r\n\tget indexTypeByteCount(): number {\r\n\t\treturn this._indexTypeByteCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 索引个数。\r\n\t */\r\n\tget indexCount(): number {\r\n\t\treturn this._indexCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否可读。\r\n\t */\r\n\tget canRead(): boolean {\r\n\t\treturn this._canRead;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>IndexBuffer3D,不建议开发者使用并用IndexBuffer3D.create()代替</code> 实例。\r\n\t * @param\tindexType 索引类型。\r\n\t * @param\tindexCount 索引个数。\r\n\t * @param\tbufferUsage IndexBuffer3D用途类型。\r\n\t * @param\tcanRead 是否可读。\r\n\t */\r\n\tconstructor(indexType: IndexFormat, indexCount: number, bufferUsage: number = 0x88E4/*WebGLContext.STATIC_DRAW*/, canRead: boolean = false) {\r\n\t\tsuper();\r\n\t\tthis._indexType = indexType;\r\n\t\tthis._indexCount = indexCount;\r\n\t\tthis._bufferUsage = bufferUsage;\r\n\t\tthis._bufferType = LayaGL.instance.ELEMENT_ARRAY_BUFFER;\r\n\t\tthis._canRead = canRead;\r\n\r\n\t\tswitch (indexType) {\r\n\t\t\tcase IndexFormat.UInt32:\r\n\t\t\t\t\tthis._indexTypeByteCount = 4;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt16:\r\n\t\t\t\t\tthis._indexTypeByteCount = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt8:\r\n\t\t\t\t\tthis._indexTypeByteCount = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"unidentification index type.\");\r\n\t\t}\r\n\t\tvar byteLength: number = this._indexTypeByteCount * indexCount;\r\n\t\tvar curBufSta: BufferStateBase = BufferStateBase._curBindedBufferState;\r\n\t\tthis._byteLength = byteLength;\r\n\t\tif (curBufSta) {\r\n\t\t\tif (curBufSta._bindedIndexBuffer === this) {\r\n\t\t\t\tLayaGL.instance.bufferData(this._bufferType, byteLength, this._bufferUsage);\r\n\t\t\t} else {\r\n\t\t\t\tcurBufSta.unBind();//避免影响VAO\r\n\t\t\t\tthis.bind();\r\n\t\t\t\tLayaGL.instance.bufferData(this._bufferType, byteLength, this._bufferUsage);\r\n\t\t\t\tcurBufSta.bind();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.bind();\r\n\t\t\tLayaGL.instance.bufferData(this._bufferType, byteLength, this._bufferUsage);\r\n\t\t}\r\n\r\n\t\tif (canRead) {\r\n\t\t\tswitch (indexType) {\r\n\t\t\t\tcase IndexFormat.UInt32:\r\n\t\t\t\t\tthis._buffer = new Uint32Array(indexCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase IndexFormat.UInt16:\r\n\t\t\t\t\tthis._buffer = new Uint16Array(indexCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase IndexFormat.UInt8:\r\n\t\t\t\t\tthis._buffer = new Uint8Array(indexCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_bindForVAO(): void {\r\n\t\tif (BufferStateBase._curBindedBufferState) {\r\n\t\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._glBuffer);\r\n\t\t} else {\r\n\t\t\tthrow \"IndexBuffer3D: must bind current BufferState.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tbind(): boolean {\r\n\t\tif (BufferStateBase._curBindedBufferState) {\r\n\t\t\tthrow \"IndexBuffer3D: must unbind current BufferState.\";\r\n\t\t} else {\r\n\t\t\tif (Buffer._bindedIndexBuffer !== this._glBuffer) {\r\n\t\t\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._glBuffer);\r\n\t\t\t\tBuffer._bindedIndexBuffer = this._glBuffer;\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 设置数据。\r\n\t * @param\tdata 索引数据。\r\n\t * @param\tbufferOffset 索引缓冲中的偏移。\r\n\t * @param\tdataStartIndex 索引数据的偏移。\r\n\t * @param\tdataCount 索引数据的数量。\r\n\t */\r\n\tsetData(data: any, bufferOffset: number = 0, dataStartIndex: number = 0, dataCount: number = 4294967295/*uint.MAX_VALUE*/): void {\r\n\t\tvar byteCount: number = this._indexTypeByteCount;\r\n\t\tif (dataStartIndex !== 0 || dataCount !== 4294967295/*uint.MAX_VALUE*/) {\r\n\t\t\tswitch (this._indexType) {\r\n\t\t\t\tcase IndexFormat.UInt32:\r\n\t\t\t\t\tdata = new Uint32Array(data.buffer, dataStartIndex * byteCount, dataCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase IndexFormat.UInt16:\r\n\t\t\t\t\tdata = new Uint16Array(data.buffer, dataStartIndex * byteCount, dataCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase IndexFormat.UInt8:\r\n\t\t\t\t\tdata = new Uint8Array(data.buffer, dataStartIndex * byteCount, dataCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar curBufSta: BufferStateBase = BufferStateBase._curBindedBufferState;\r\n\t\tif (curBufSta) {\r\n\t\t\tif (curBufSta._bindedIndexBuffer === this) {\r\n\t\t\t\tLayaGL.instance.bufferSubData(this._bufferType, bufferOffset * byteCount, data);//offset==0情况下，某些特殊设备或情况下直接bufferData速度是否优于bufferSubData\r\n\t\t\t} else {\r\n\t\t\t\tcurBufSta.unBind();//避免影响VAO\r\n\t\t\t\tthis.bind();\r\n\t\t\t\tLayaGL.instance.bufferSubData(this._bufferType, bufferOffset * byteCount, data);\r\n\t\t\t\tcurBufSta.bind();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.bind();\r\n\t\t\tLayaGL.instance.bufferSubData(this._bufferType, bufferOffset * byteCount, data);\r\n\t\t}\r\n\r\n\t\tif (this._canRead) {\r\n\t\t\tif (bufferOffset !== 0 || dataStartIndex !== 0 || dataCount !== 4294967295/*uint.MAX_VALUE*/) {\r\n\t\t\t\tvar maxLength: number = this._buffer.length - bufferOffset;\r\n\t\t\t\tif (dataCount > maxLength)\r\n\t\t\t\t\tdataCount = maxLength;\r\n\t\t\t\tfor (var i: number = 0; i < dataCount; i++)\r\n\t\t\t\t\tthis._buffer[bufferOffset + i] = data[i];\r\n\t\t\t} else {\r\n\t\t\t\tthis._buffer = data;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取索引数据。\r\n\t * @return\t索引数据。\r\n\t */\r\n\tgetData(): Uint16Array {\r\n\t\tif (this._canRead)\r\n\t\t\treturn this._buffer;\r\n\t\telse\r\n\t\t\tthrow new Error(\"Can't read data from VertexBuffer with only write flag!\");\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tthis._buffer = null;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../layagl/LayaGL\";\r\n\r\n\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nexport class VertexElementFormat {\r\n\tstatic Single: string = \"single\";\r\n\tstatic Vector2: string = \"vector2\";\r\n\tstatic Vector3: string = \"vector3\";\r\n\tstatic Vector4: string = \"vector4\";\r\n\tstatic Color: string = \"color\";\r\n\tstatic Byte4: string = \"byte4\";\r\n\tstatic Short2: string = \"short2\";\r\n\tstatic Short4: string = \"short4\";\r\n\tstatic NormalizedShort2: string = \"normalizedshort2\";\r\n\tstatic NormalizedShort4: string = \"normalizedshort4\";\r\n\tstatic HalfVector2: string = \"halfvector2\";\r\n\tstatic HalfVector4: string = \"halfvector4\";\r\n\r\n\r\n\t/** @internal [组数量,数据类型,是否归一化:0为false]。*/\r\n\tprivate static _elementInfos: any;\r\n\tstatic __init__(): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tVertexElementFormat._elementInfos = {\r\n\t\t\t\"single\": [1, gl.FLOAT, 0],\r\n\t\t\t\"vector2\": [2, gl.FLOAT, 0],\r\n\t\t\t\"vector3\": [3, gl.FLOAT, 0],\r\n\t\t\t\"vector4\": [4, gl.FLOAT, 0],\r\n\t\t\t\"color\": [4, gl.FLOAT, 0],\r\n\t\t\t\"byte4\": [4, gl.UNSIGNED_BYTE, 0],\r\n\t\t\t\"short2\": [2, gl.FLOAT, 0],\r\n\t\t\t\"short4\": [4, gl.FLOAT, 0],\r\n\t\t\t\"normalizedshort2\": [2, gl.FLOAT, 0],\r\n\t\t\t\"normalizedshort4\": [4, gl.FLOAT, 0],\r\n\t\t\t\"halfvector2\": [2, gl.FLOAT, 0],\r\n\t\t\t\"halfvector4\": [4, gl.FLOAT, 0]\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 获取顶点元素格式信息。\r\n\t */\r\n\tstatic getElementInfos(element: string): any[] {\r\n\t\tvar info: any[] = VertexElementFormat._elementInfos[element];\r\n\t\tif (info)\r\n\t\t\treturn info;\r\n\t\telse\r\n\t\t\tthrow \"VertexElementFormat: this vertexElementFormat is not implement.\";\r\n\t}\r\n}\r\n\r\n","import { VertexElement } from \"./VertexElement\";\r\nimport { VertexElementFormat } from \"./VertexElementFormat\";\r\nimport { ShaderData } from \"../shader/ShaderData\"\r\n\r\n\r\n/**\r\n * <code>VertexDeclaration</code> 类用于生成顶点声明。\r\n */\r\nexport class VertexDeclaration {\r\n\t/**@internal */\r\n\tprivate static _uniqueIDCounter: number = 1;\r\n\r\n\t/**@internal */\r\n\tprivate _id: number;\r\n\t/**@internal */\r\n\tprivate _vertexStride: number;\r\n\t/**@internal */\r\n\tprivate _vertexElementsDic: {[key:string]:VertexElement};\r\n\t/**@internal */\r\n\t_shaderValues: ShaderData;\r\n\r\n\t/**@internal [只读]*/\r\n\t_vertexElements: Array<VertexElement>;\r\n\r\n\t/**\r\n\t * 获取唯一标识ID(通常用于优化或识别)。\r\n\t * @return 唯一标识ID\r\n\t */\r\n\tget id(): number {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\t/**\r\n\t * 顶点跨度，以字节为单位。\r\n\t */\r\n\tget vertexStride(): number {\r\n\t\treturn this._vertexStride;\r\n\t}\r\n\r\n\t/**\r\n\t * 顶点元素的数量。\r\n\t */\r\n\tget vertexElementCount(): number {\r\n\t\treturn this._vertexElements.length;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>VertexDeclaration</code> 实例。\r\n\t * @param\tvertexStride 顶点跨度。\r\n\t * @param\tvertexElements 顶点元素集合。\r\n\t */\r\n\tconstructor(vertexStride: number, vertexElements: Array<VertexElement>) {\r\n\t\tthis._id = ++VertexDeclaration._uniqueIDCounter;\r\n\t\tthis._vertexElementsDic = {};\r\n\t\tthis._vertexStride = vertexStride;\r\n\t\tthis._vertexElements = vertexElements;\r\n\t\tvar count: number = vertexElements.length;\r\n\t\tthis._shaderValues = new ShaderData(null);\r\n\r\n\t\tfor (var j: number = 0; j < count; j++) {\r\n\t\t\tvar vertexElement: VertexElement = vertexElements[j];\r\n\t\t\tvar name: number = vertexElement._elementUsage;\r\n\t\t\tthis._vertexElementsDic[name] = vertexElement;\r\n\t\t\tvar value: Int32Array = new Int32Array(5);\r\n\t\t\tvar elmentInfo: any[] = VertexElementFormat.getElementInfos(vertexElement._elementFormat);\r\n\t\t\tvalue[0] = elmentInfo[0];\r\n\t\t\tvalue[1] = elmentInfo[1];\r\n\t\t\tvalue[2] = elmentInfo[2];\r\n\t\t\tvalue[3] = this._vertexStride;\r\n\t\t\tvalue[4] = vertexElement._offset;\r\n\t\t\tthis._shaderValues.setAttribute(name, value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取顶点元素。\r\n\t * @param index 索引。\r\n\t */\r\n\tgetVertexElementByIndex(index: number): VertexElement {\r\n\t\treturn this._vertexElements[index];\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetVertexElementByUsage(usage: number): VertexElement {\r\n\t\treturn this._vertexElementsDic[usage];\r\n\t}\r\n}\r\n\r\n\r\n","/**\r\n* <code>VertexElement</code> 类用于创建顶点结构分配。\r\n*/\r\nexport class VertexElement {\r\n\t/**@internal */\r\n\t_offset: number;\r\n\t/**@internal */\r\n\t_elementFormat: string;\r\n\t/**@internal */\r\n\t_elementUsage: number;\r\n\t//usageIndex:int;//TODO:待确定是否添加\r\n\r\n\r\n\tget offset(): number {\r\n\t\treturn this._offset;\r\n\t}\r\n\r\n\tget elementFormat(): string {\r\n\t\treturn this._elementFormat;\r\n\t}\r\n\r\n\tget elementUsage(): number {\r\n\t\treturn this._elementUsage;\r\n\t}\r\n\r\n\tconstructor(offset: number, elementFormat: string, elementUsage: number) {\r\n\t\tthis._offset = offset;\r\n\t\tthis._elementFormat = elementFormat;\r\n\t\tthis._elementUsage = elementUsage;\r\n\t\t//this.usageIndex = usageIndex;\r\n\t}\r\n}\r\n\r\n","import { VertexDeclaration } from \"../VertexDeclaration\";\r\nimport { VertexElement } from \"../VertexElement\";\r\nimport { VertexElementFormat } from \"../VertexElementFormat\";\r\n\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nexport class VertexMesh {\r\n\tstatic MESH_POSITION0: number = 0;\r\n\tstatic MESH_COLOR0: number = 1;\r\n\tstatic MESH_TEXTURECOORDINATE0: number = 2;\r\n\tstatic MESH_NORMAL0: number = 3;\r\n\tstatic MESH_TANGENT0: number = 4;\r\n\tstatic MESH_BLENDINDICES0: number = 5;\r\n\tstatic MESH_BLENDWEIGHT0: number = 6;\r\n\tstatic MESH_TEXTURECOORDINATE1: number = 7;\r\n\r\n\tstatic MESH_WORLDMATRIX_ROW0: number = 8;\r\n\tstatic MESH_WORLDMATRIX_ROW1: number = 9;\r\n\tstatic MESH_WORLDMATRIX_ROW2: number = 10;\r\n\tstatic MESH_WORLDMATRIX_ROW3: number = 11;\r\n\tstatic MESH_MVPMATRIX_ROW0: number = 12;\r\n\tstatic MESH_MVPMATRIX_ROW1: number = 13;\r\n\tstatic MESH_MVPMATRIX_ROW2: number = 14;\r\n\tstatic MESH_MVPMATRIX_ROW3: number = 15;\r\n\r\n\t//TODO：location不够\r\n\tstatic MESH_SIMPLEANIMATOR:number = 7;\r\n\tstatic instanceWorldMatrixDeclaration: VertexDeclaration;\r\n\r\n\tstatic instanceMVPMatrixDeclaration: VertexDeclaration;\r\n\r\n\tstatic instanceSimpleAnimatorDeclaration: VertexDeclaration;\r\n\r\n\t/**@internal */\r\n\tprivate static _vertexDeclarationMap: any = {};\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tVertexMesh.instanceWorldMatrixDeclaration = new VertexDeclaration(64,\r\n\t\t\t[new VertexElement(0, VertexElementFormat.Vector4, VertexMesh.MESH_WORLDMATRIX_ROW0),\r\n\t\t\tnew VertexElement(16, VertexElementFormat.Vector4, VertexMesh.MESH_WORLDMATRIX_ROW1),\r\n\t\t\tnew VertexElement(32, VertexElementFormat.Vector4, VertexMesh.MESH_WORLDMATRIX_ROW2),\r\n\t\t\tnew VertexElement(48, VertexElementFormat.Vector4, VertexMesh.MESH_WORLDMATRIX_ROW3)]);\r\n\r\n\t\tVertexMesh.instanceMVPMatrixDeclaration = new VertexDeclaration(64,\r\n\t\t\t[new VertexElement(0, VertexElementFormat.Vector4, VertexMesh.MESH_MVPMATRIX_ROW0),\r\n\t\t\tnew VertexElement(16, VertexElementFormat.Vector4, VertexMesh.MESH_MVPMATRIX_ROW1),\r\n\t\t\tnew VertexElement(32, VertexElementFormat.Vector4, VertexMesh.MESH_MVPMATRIX_ROW2),\r\n\t\t\tnew VertexElement(48, VertexElementFormat.Vector4, VertexMesh.MESH_MVPMATRIX_ROW3)]);\r\n\t\t\r\n\t\tVertexMesh.instanceSimpleAnimatorDeclaration = new VertexDeclaration(16,[new VertexElement(0,VertexElementFormat.Vector4,VertexMesh.MESH_SIMPLEANIMATOR)]);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取顶点声明。\r\n\t * @param vertexFlag 顶点声明标记字符,格式为:\"POSITION,NORMAL,COLOR,UV,UV1,BLENDWEIGHT,BLENDINDICES,TANGENT\"。\r\n\t * @return 顶点声明。\r\n\t */\r\n\tstatic getVertexDeclaration(vertexFlag: string, compatible: boolean = true): VertexDeclaration {\r\n\t\tvar verDec: VertexDeclaration = VertexMesh._vertexDeclarationMap[vertexFlag + (compatible ? \"_0\" : \"_1\")];//TODO:兼容模式\r\n\t\tif (!verDec) {\r\n\t\t\tvar subFlags: any[] = vertexFlag.split(\",\");\r\n\t\t\tvar offset: number = 0;\r\n\t\t\tvar elements: any[] = [];\r\n\t\t\tfor (var i: number = 0, n: number = subFlags.length; i < n; i++) {\r\n\t\t\t\tvar element: VertexElement;\r\n\t\t\t\tswitch (subFlags[i]) {\r\n\t\t\t\t\tcase \"POSITION\":\r\n\t\t\t\t\t\telement = new VertexElement(offset, VertexElementFormat.Vector3, VertexMesh.MESH_POSITION0);\r\n\t\t\t\t\t\toffset += 12;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"NORMAL\":\r\n\t\t\t\t\t\telement = new VertexElement(offset, VertexElementFormat.Vector3, VertexMesh.MESH_NORMAL0);\r\n\t\t\t\t\t\toffset += 12;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"COLOR\":\r\n\t\t\t\t\t\telement = new VertexElement(offset, VertexElementFormat.Vector4, VertexMesh.MESH_COLOR0);\r\n\t\t\t\t\t\toffset += 16;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"UV\":\r\n\t\t\t\t\t\telement = new VertexElement(offset, VertexElementFormat.Vector2, VertexMesh.MESH_TEXTURECOORDINATE0);\r\n\t\t\t\t\t\toffset += 8;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"UV1\":\r\n\t\t\t\t\t\telement = new VertexElement(offset, VertexElementFormat.Vector2, VertexMesh.MESH_TEXTURECOORDINATE1);\r\n\t\t\t\t\t\toffset += 8;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"BLENDWEIGHT\":\r\n\t\t\t\t\t\telement = new VertexElement(offset, VertexElementFormat.Vector4, VertexMesh.MESH_BLENDWEIGHT0);\r\n\t\t\t\t\t\toffset += 16;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"BLENDINDICES\":\r\n\t\t\t\t\t\tif (compatible) {\r\n\t\t\t\t\t\t\telement = new VertexElement(offset, VertexElementFormat.Vector4, VertexMesh.MESH_BLENDINDICES0);//兼容\r\n\t\t\t\t\t\t\toffset += 16;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\telement = new VertexElement(offset, VertexElementFormat.Byte4, VertexMesh.MESH_BLENDINDICES0);\r\n\t\t\t\t\t\t\toffset += 4;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"TANGENT\":\r\n\t\t\t\t\t\telement = new VertexElement(offset, VertexElementFormat.Vector4, VertexMesh.MESH_TANGENT0);\r\n\t\t\t\t\t\toffset += 16;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"VertexMesh: unknown vertex flag.\";\r\n\t\t\t\t}\r\n\t\t\t\telements.push(element);\r\n\t\t\t}\r\n\t\t\tverDec = new VertexDeclaration(offset, elements);\r\n\t\t\tVertexMesh._vertexDeclarationMap[vertexFlag + (compatible ? \"_0\" : \"_1\")] = verDec;//TODO:兼容模式\r\n\t\t}\r\n\t\treturn verDec;\r\n\t}\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Buffer } from \"../../webgl/utils/Buffer\";\r\nimport { VertexDeclaration } from \"./VertexDeclaration\";\r\nimport { LayaGPU } from \"../../webgl/LayaGPU\";\r\n\r\n\r\n/**\r\n * <code>VertexBuffer3D</code> 类用于创建顶点缓冲。\r\n */\r\nexport class VertexBuffer3D extends Buffer {\r\n\t/**数据类型_Float32Array类型。*/\r\n\tstatic DATATYPE_FLOAT32ARRAY: number = 0;\r\n\t/**数据类型_Uint8Array类型。*/\r\n\tstatic DATATYPE_UINT8ARRAY: number = 1;\r\n\r\n\t/** @internal */\r\n\tprivate _canRead: boolean;\r\n\r\n\t/** @internal */\r\n\t_vertexDeclaration: VertexDeclaration = null;\r\n\t/** @internal */\r\n\t_float32Reader: Float32Array = null;\r\n\r\n\t/**\r\n\t * 获取顶点声明。\r\n\t */\r\n\tget vertexDeclaration(): VertexDeclaration {\r\n\t\treturn this._vertexDeclaration;\r\n\t}\r\n\r\n\tset vertexDeclaration(value: VertexDeclaration) {\r\n\t\tthis._vertexDeclaration = value;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 是否可读。\r\n\t */\r\n\tget canRead(): boolean {\r\n\t\treturn this._canRead;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>VertexBuffer3D</code> 实例。\r\n\t * @param\tbyteLength 字节长度。\r\n\t * @param\tbufferUsage VertexBuffer3D用途类型。\r\n\t * @param\tcanRead 是否可读。\r\n\t */\r\n\tconstructor(byteLength: number, bufferUsage: number, canRead: boolean = false) {\r\n\t\tsuper();\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tthis._bufferUsage = bufferUsage;\r\n\t\tthis._bufferType = gl.ARRAY_BUFFER;\r\n\t\tthis._canRead = canRead;\r\n\r\n\t\tthis._byteLength = byteLength;\r\n\t\tthis.bind();\r\n\t\tgl.bufferData(this._bufferType, this._byteLength, this._bufferUsage);\r\n\t\tif (canRead) {\r\n\t\t\tthis._buffer = new Uint8Array(byteLength);\r\n\t\t\tthis._float32Reader = new Float32Array(this._buffer.buffer);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tbind(): boolean {\r\n\t\tif (Buffer._bindedVertexBuffer !== this._glBuffer) {\r\n\t\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._glBuffer);\r\n\t\t\tBuffer._bindedVertexBuffer = this._glBuffer;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 剥离内存块存储。\r\n\t */\r\n\torphanStorage(): void {\r\n\t\tthis.bind();\r\n\t\tLayaGL.instance.bufferData(this._bufferType, this._byteLength, this._bufferUsage);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置数据。\r\n\t * @param\tdata 顶点数据。\r\n\t * @param\tbufferOffset 顶点缓冲中的偏移,以字节为单位。\r\n\t * @param\tdataStartIndex 顶点数据的偏移,以字节为单位。\r\n\t * @param\tdataCount 顶点数据的长度,以字节为单位。\r\n\t */\r\n\tsetData(buffer: ArrayBuffer, bufferOffset: number = 0, dataStartIndex: number = 0, dataCount: number = Number.MAX_SAFE_INTEGER): void {\r\n\t\tthis.bind();\r\n\t\tvar needSubData: boolean = dataStartIndex !== 0 || dataCount !== Number.MAX_SAFE_INTEGER;\r\n\t\tif (needSubData) {\r\n\t\t\tvar subData: Uint8Array = new Uint8Array(buffer, dataStartIndex, dataCount);\r\n\t\t\tLayaGL.instance.bufferSubData(this._bufferType, bufferOffset, subData);\r\n\t\t\tif (this._canRead)\r\n\t\t\t\tthis._buffer.set(subData, bufferOffset);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tLayaGL.instance.bufferSubData(this._bufferType, bufferOffset, buffer);\r\n\t\t\tif (this._canRead)\r\n\t\t\t\tthis._buffer.set(new Uint8Array(buffer), bufferOffset);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取顶点数据。\r\n\t * @return\t顶点数据。\r\n\t */\r\n\tgetUint8Data(): Uint8Array {\r\n\t\tif (this._canRead)\r\n\t\t\treturn this._buffer;\r\n\t\telse\r\n\t\t\tthrow new Error(\"Can't read data from VertexBuffer with only write flag!\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tgetFloat32Data(): Float32Array {\r\n\t\tif (this._canRead)\r\n\t\t\treturn this._float32Reader;\r\n\t\telse\r\n\t\t\tthrow new Error(\"Can't read data from VertexBuffer with only write flag!\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tmarkAsUnreadbale(): void {\r\n\t\tthis._canRead = false;\r\n\t\tthis._buffer = null;\r\n\t\tthis._float32Reader = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tthis._buffer = null;\r\n\t\tthis._float32Reader = null;\r\n\t\tthis._vertexDeclaration = null;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n","import { BufferState } from \"../../core/BufferState\"\r\n\timport { RenderContext3D } from \"../../core/render/RenderContext3D\"\r\n\timport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\"\r\n\timport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\"\r\n\t\r\n\t/**\r\n\t * <code>SkyMesh</code> 类用于实现天空网格。\r\n\t */\r\n\texport class SkyMesh {\r\n\t\t\r\n\t\t/**@internal */\r\n\t\tprotected _vertexBuffer:VertexBuffer3D;\r\n\t\t/**@internal */\r\n\t\tprotected _indexBuffer:IndexBuffer3D;\r\n\t\t\r\n\t\t/**@internal */\r\n\t\t _bufferState:BufferState;\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个新的 <code>SkyMesh</code> 实例。\r\n\t\t */\r\n\t\tconstructor(){\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @internal\r\n\t\t */\r\n\t\t _render(state:RenderContext3D):void {\r\n\t\t\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { BufferState } from \"../../core/BufferState\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexMesh } from \"../../graphics/Vertex/VertexMesh\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { VertexDeclaration } from \"../../graphics/VertexDeclaration\";\r\nimport { SkyMesh } from \"./SkyMesh\";\r\nimport { IndexFormat } from \"../../graphics/IndexFormat\";\r\n\r\n/**\r\n * <code>SkyBox</code> 类用于创建天空盒。\r\n */\r\nexport class SkyBox extends SkyMesh {\r\n\tstatic instance: SkyBox;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tSkyBox.instance = new SkyBox();//TODO:移植为标准Mesh后需要加锁\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SkyBox</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar halfHeight: number = 1.0;\r\n\t\tvar halfWidth: number = 1.0;\r\n\t\tvar halfDepth: number = 1.0;\r\n\t\tvar vertices: Float32Array = new Float32Array([-halfDepth, halfHeight, -halfWidth, halfDepth, halfHeight, -halfWidth, halfDepth, halfHeight, halfWidth, -halfDepth, halfHeight, halfWidth,//上\r\n\t\t-halfDepth, -halfHeight, -halfWidth, halfDepth, -halfHeight, -halfWidth, halfDepth, -halfHeight, halfWidth, -halfDepth, -halfHeight, halfWidth]);//下\r\n\t\tvar indices: Uint8Array = new Uint8Array([\r\n\t\t\t0, 1, 2, 2, 3, 0, //上\r\n\t\t\t4, 7, 6, 6, 5, 4, //下\r\n\t\t\t0, 3, 7, 7, 4, 0, //左\r\n\t\t\t1, 5, 6, 6, 2, 1,//右\r\n\t\t\t3, 2, 6, 6, 7, 3, //前\r\n\t\t\t0, 4, 5, 5, 1, 0]);//后\r\n\r\n\t\tvar verDec: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION\");\r\n\t\tthis._vertexBuffer = new VertexBuffer3D(verDec.vertexStride * 8, gl.STATIC_DRAW, false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = verDec;\r\n\t\tthis._indexBuffer = new IndexBuffer3D(IndexFormat.UInt8, 36, gl.STATIC_DRAW, false);\r\n\t\tthis._vertexBuffer.setData(vertices.buffer);\r\n\t\tthis._indexBuffer.setData(indices);\r\n\r\n\t\tvar bufferState: BufferState = new BufferState();\r\n\t\tbufferState.bind();\r\n\t\tbufferState.applyVertexBuffer(this._vertexBuffer);\r\n\t\tbufferState.applyIndexBuffer(this._indexBuffer);\r\n\t\tbufferState.unBind();\r\n\t\tthis._bufferState = bufferState;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_render(state: RenderContext3D): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tgl.drawElements(gl.TRIANGLES, 36, gl.UNSIGNED_BYTE, 0);\r\n\t\tStat.trianglesFaces += 12;\r\n\t\tStat.renderBatches++;\r\n\t}\r\n}\r\n\r\n","import { ILaya } from \"../../../../ILaya\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { WebGLContext } from \"../../../webgl/WebGLContext\";\r\nimport { Camera } from \"../../core/Camera\";\r\nimport { Material } from \"../../core/material/Material\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { Matrix4x4 } from \"../../math/Matrix4x4\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { DefineDatas } from \"../../shader/DefineDatas\";\r\nimport { ShaderData } from \"../../shader/ShaderData\";\r\nimport { ShaderInstance } from \"../../shader/ShaderInstance\";\r\nimport { RenderTexture } from \"../RenderTexture\";\r\nimport { SkyBox } from \"./SkyBox\";\r\nimport { SkyMesh } from \"./SkyMesh\";\r\n\r\n/**\r\n * <code>SkyRenderer</code> 类用于实现天空渲染器。\r\n */\r\nexport class SkyRenderer {\r\n\t/** @internal */\r\n\tprivate static _tempMatrix0: Matrix4x4 = new Matrix4x4();\r\n\t/** @internal */\r\n\tprivate static _tempMatrix1: Matrix4x4 = new Matrix4x4();\r\n\t/** @internal */\r\n\tprivate static _compileDefine: DefineDatas = new DefineDatas();\r\n\r\n\t/** @internal */\r\n\tprivate _material: Material;\r\n\t/** @internal */\r\n\tprivate _mesh: SkyMesh = SkyBox.instance;\r\n\r\n\t/**\r\n\t * 材质。\r\n\t */\r\n\tget material(): Material {\r\n\t\treturn this._material;\r\n\t}\r\n\r\n\tset material(value: Material) {\r\n\t\tif (this._material !== value) {\r\n\t\t\t(this._material) && (this._material._removeReference());\r\n\t\t\t(value) && (value._addReference());\r\n\t\t\tthis._material = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 网格。\r\n\t */\r\n\tget mesh(): SkyMesh {\r\n\t\treturn this._mesh;\r\n\t}\r\n\r\n\tset mesh(value: SkyMesh) {\r\n\t\tif (this._mesh !== value) {\r\n\t\t\t//(_mesh) && (_mesh._removeReference());//TODO:SkyMesh换成Mesh\r\n\t\t\t//value._addReference();\r\n\t\t\tthis._mesh = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>SkyRenderer</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 是否可用。\r\n\t */\r\n\t_isAvailable(): boolean {\r\n\t\treturn this._material && this._mesh ? true : false;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_render(context: RenderContext3D): void {\r\n\t\tif (this._material && this._mesh) {\r\n\t\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\t\tvar scene: Scene3D = context.scene;\r\n\t\t\tvar cameraShaderValue: ShaderData = context.cameraShaderValue;\r\n\t\t\tvar camera: Camera = context.camera;\r\n\r\n\t\t\tvar noteValue: boolean = ShaderData._SET_RUNTIME_VALUE_MODE_REFERENCE_;\r\n\t\t\tILaya.Render.supportWebGLPlusRendering && ShaderData.setRuntimeValueMode(false);\r\n\r\n\t\t\tWebGLContext.setCullFace(gl, false);\r\n\t\t\tWebGLContext.setDepthFunc(gl, gl.LEQUAL);\r\n\t\t\tWebGLContext.setDepthMask(gl, false);\r\n\t\t\tvar comDef: DefineDatas = SkyRenderer._compileDefine;\r\n\t\t\tthis._material._shaderValues._defineDatas.cloneTo(comDef);\r\n\t\t\tvar shader: ShaderInstance = context.shader = this._material._shader.getSubShaderAt(0)._passes[0].withCompile(comDef);//TODO:调整SubShader代码\r\n\t\t\tvar switchShader: boolean = shader.bind();//纹理需要切换shader时重新绑定 其他uniform不需要\r\n\t\t\tvar switchShaderLoop: boolean = (Stat.loopCount !== shader._uploadMark);\r\n\r\n\t\t\tvar uploadScene: boolean = (shader._uploadScene !== scene) || switchShaderLoop;\r\n\t\t\tif (uploadScene || switchShader) {\r\n\t\t\t\tshader.uploadUniforms(shader._sceneUniformParamsMap, scene._shaderValues, uploadScene);\r\n\t\t\t\tshader._uploadScene = scene;\r\n\t\t\t}\r\n\r\n\t\t\tvar renderTex: RenderTexture = camera._getRenderTexture();\r\n\t\t\tvar uploadCamera: boolean = (shader._uploadCameraShaderValue !== cameraShaderValue) || switchShaderLoop;\r\n\t\t\tif (uploadCamera || switchShader) {\r\n\t\t\t\tvar viewMatrix: Matrix4x4 = SkyRenderer._tempMatrix0;\r\n\t\t\t\tvar projectionMatrix: Matrix4x4 = SkyRenderer._tempMatrix1;\r\n\t\t\t\tcamera.viewMatrix.cloneTo(viewMatrix);//视图矩阵逆矩阵的转置矩阵，移除平移和缩放\r\n\t\t\t\tcamera.projectionMatrix.cloneTo(projectionMatrix);\r\n\t\t\t\tviewMatrix.setTranslationVector(Vector3._ZERO);\r\n\r\n\t\t\t\tif (camera.orthographic)\r\n\t\t\t\t\tMatrix4x4.createPerspective(camera.fieldOfView, camera.aspectRatio, camera.nearPlane, camera.farPlane, projectionMatrix);\r\n\r\n\t\t\t\t//无穷投影矩阵算法,DirectX右手坐标系推导\r\n\t\t\t\t//http://terathon.com/gdc07_lengyel.pdf\r\n\r\n\t\t\t\t//xScale  0     0                          0\r\n\t\t\t\t//0     yScale  0                          0\r\n\t\t\t\t//0       0    \t-zfar /(zfar-znear)        -1.0\r\n\t\t\t\t//0       0     -znear*zfar /(zfar-znear)  0\r\n\r\n\t\t\t\t//xScale  0     0       0        mul   [x,y,z,0] =[xScale*x,yScale*y,-z,-z]\r\n\t\t\t\t//0     yScale  0       0\t\t\r\n\t\t\t\t//0       0    \t-1      -1.0\t\r\n\t\t\t\t//0       0     -0      0\r\n\r\n\t\t\t\t//[xScale*x,yScale*y,-z,-z]=>[-xScale*x/z,-yScale*y/z,1]\r\n\r\n\t\t\t\t//xScale  0     0       0      \r\n\t\t\t\t//0     yScale  0       0\t\t\r\n\t\t\t\t//0       0    \t-1+e    -1.0\t\r\n\t\t\t\t//0       0     -0  0\r\n\r\n\t\t\t\tvar epsilon: number = 1e-6;\r\n\t\t\t\tvar yScale: number = 1.0 / Math.tan(3.1416 * camera.fieldOfView / 180 * 0.5);\r\n\t\t\t\tprojectionMatrix.elements[0] = yScale / camera.aspectRatio;\r\n\t\t\t\tprojectionMatrix.elements[5] = yScale;\r\n\t\t\t\tprojectionMatrix.elements[10] = epsilon - 1.0;\r\n\t\t\t\tprojectionMatrix.elements[11] = -1.0;\r\n\t\t\t\tprojectionMatrix.elements[14] = -0;//znear无穷小\r\n\r\n\t\t\t\t(<Camera>camera)._applyViewProject(context, viewMatrix, projectionMatrix);//TODO:优化 不应设置给Camera直接提交\r\n\t\t\t\tshader.uploadUniforms(shader._cameraUniformParamsMap, cameraShaderValue, uploadCamera);\r\n\t\t\t\tshader._uploadCameraShaderValue = cameraShaderValue;\r\n\t\t\t}\r\n\r\n\t\t\tvar uploadMaterial: boolean = (shader._uploadMaterial !== this._material) || switchShaderLoop;\r\n\t\t\tif (uploadMaterial || switchShader) {\r\n\t\t\t\tshader.uploadUniforms(shader._materialUniformParamsMap, this._material._shaderValues, uploadMaterial);\r\n\t\t\t\tshader._uploadMaterial = this._material;\r\n\t\t\t}\r\n\r\n\t\t\tthis._mesh._bufferState.bind();\r\n\t\t\tthis._mesh._render(context);\r\n\r\n\t\t\tILaya.Render.supportWebGLPlusRendering && ShaderData.setRuntimeValueMode(noteValue);\r\n\r\n\t\t\tWebGLContext.setDepthFunc(gl, gl.LESS);\r\n\t\t\tWebGLContext.setDepthMask(gl, true);\r\n\t\t\tcamera._applyViewProject(context, camera.viewMatrix, camera.projectionMatrix);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._material) {\r\n\t\t\tthis._material._removeReference();\r\n\t\t\tthis._material = null;\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Node } from \"../../display/Node\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { URL } from \"../../net/URL\";\r\nimport { Handler } from \"../../utils/Handler\";\r\nimport { Animator } from \"../component/Animator\";\r\nimport { Script3D } from \"../component/Script3D\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Quaternion } from \"../math/Quaternion\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Shader3D } from \"../shader/Shader3D\";\r\nimport { Avatar } from \"./Avatar\";\r\nimport { Transform3D } from \"./Transform3D\";\r\nimport { Laya } from \"../../../Laya\";\r\nimport { ICreateResource } from \"../../resource/ICreateResource\";\r\n\r\n/**\r\n * <code>Sprite3D</code> 类用于实现3D精灵。\r\n */\r\nexport class Sprite3D extends Node implements ICreateResource {\r\n\t/**Hierarchy资源。*/\r\n\tstatic HIERARCHY: string = \"HIERARCHY\";\r\n\r\n\t/**@internal 着色器变量名，世界矩阵。*/\r\n\tstatic WORLDMATRIX: number = Shader3D.propertyNameToID(\"u_WorldMat\");\r\n\t/**@internal 着色器变量名，世界视图投影矩阵。*/\r\n\tstatic MVPMATRIX: number = Shader3D.propertyNameToID(\"u_MvpMatrix\");\r\n\t/*;*/\r\n\r\n\t/**@internal */\r\n\tprotected static _uniqueIDCounter: number = 0;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * 创建精灵的克隆实例。\r\n\t * @param\toriginal  原始精灵。\r\n\t * @param   parent    父节点。\r\n\t * @param   worldPositionStays 是否保持自身世界变换。\r\n\t * @param\tposition  世界位置,worldPositionStays为false时生效。\r\n\t * @param\trotation  世界旋转,worldPositionStays为false时生效。\r\n\t * @return  克隆实例。\r\n\t */\r\n\tstatic instantiate(original: Sprite3D, parent: Node = null, worldPositionStays: boolean = true, position: Vector3 = null, rotation: Quaternion = null): Sprite3D {\r\n\t\tvar destSprite3D: Sprite3D = (<Sprite3D>original.clone());\r\n\t\t(parent) && (parent.addChild(destSprite3D));\r\n\t\tvar transform: Transform3D = destSprite3D.transform;\r\n\t\tif (worldPositionStays) {\r\n\t\t\tvar worldMatrix: Matrix4x4 = transform.worldMatrix;\r\n\t\t\toriginal.transform.worldMatrix.cloneTo(worldMatrix);\r\n\t\t\ttransform.worldMatrix = worldMatrix;\r\n\t\t} else {\r\n\t\t\t(position) && (transform.position = position);\r\n\t\t\t(rotation) && (transform.rotation = rotation);\r\n\t\t}\r\n\t\treturn destSprite3D;\r\n\t}\r\n\r\n\t/**\r\n\t * 加载网格模板。\r\n\t * @param url 模板地址。\r\n\t * @param complete 完成回掉。\r\n\t */\r\n\tstatic load(url: string, complete: Handler): void {\r\n\t\tLaya.loader.create(url, complete, null, Sprite3D.HIERARCHY);\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _id: number;\r\n\r\n\t/**@internal */\r\n\tprivate _url: string;\r\n\r\n\t/** @internal */\r\n\t_isStatic: boolean;\r\n\t/** @internal */\r\n\t_layer: number;\r\n\t/** @internal */\r\n\t_scripts: Script3D[];\r\n\t/**@internal */\r\n\t_transform: Transform3D;\r\n\t/** @internal */\r\n\t_hierarchyAnimator: Animator;\r\n\t/** @internal */\r\n\t_needProcessCollisions: boolean = false;\r\n\t/** @internal */\r\n\t_needProcessTriggers: boolean = false;\r\n\r\n\t/**@internal */\r\n\tprivate _extData: any;\r\n\r\n\t/**\r\n\t * 额外数据\r\n\t */\r\n\tget extData(): any {\r\n\t\treturn this._extData;\r\n\t}\r\n\r\n\tset extData(value: any) {\r\n\t\tthis._extData = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 唯一标识ID。\r\n\t */\r\n\tget id(): number {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\t/**\r\n\t * 蒙版层。\r\n\t */\r\n\tget layer(): number {\r\n\t\treturn this._layer;\r\n\t}\r\n\r\n\tset layer(value: number) {\r\n\t\tif (this._layer !== value) {\r\n\t\t\tif (value >= 0 && value <= 30) {\r\n\t\t\t\tthis._layer = value;\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Layer value must be 0-30.\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 资源的URL地址。\r\n\t */\r\n\tget url(): string {\r\n\t\treturn this._url;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否为静态。\r\n\t */\r\n\tget isStatic(): boolean {\r\n\t\treturn this._isStatic;\r\n\t}\r\n\r\n\t/**\r\n\t * 精灵变换。\r\n\t */\r\n\tget transform(): Transform3D {\r\n\t\treturn this._transform;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Sprite3D</code> 实例。\r\n\t * @param name 精灵名称。\r\n\t * @param isStatic 是否为静态。\r\n\t */\r\n\tconstructor(name: string = null, isStatic: boolean = false) {\r\n\t\tsuper();\r\n\t\tthis._id = ++Sprite3D._uniqueIDCounter;\r\n\t\tthis._transform = new Transform3D(this);\r\n\t\tthis._isStatic = isStatic;\r\n\t\tthis.layer = 0;\r\n\t\tthis.name = name ? name : \"New Sprite3D\";\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\t_setCreateURL(url: string): void {\r\n\t\tthis._url = URL.formatURL(url);//perfab根节点会设置URL\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _changeAnimatorsToLinkSprite3D(sprite3D: Sprite3D, isLink: boolean, path: string[]): void {\r\n\t\tvar animator: Animator = (<Animator>this.getComponent(Animator));\r\n\t\tif (animator) {\r\n\t\t\tif (!animator.avatar)\r\n\t\t\t\tsprite3D._changeAnimatorToLinkSprite3DNoAvatar(animator, isLink, path);\r\n\t\t}\r\n\r\n\t\tif (this._parent && this._parent instanceof Sprite3D) {\r\n\t\t\tpath.unshift(this._parent.name);\r\n\t\t\tvar p: Sprite3D = (<Sprite3D>this._parent);\r\n\t\t\t(p._hierarchyAnimator) && (p._changeAnimatorsToLinkSprite3D(sprite3D, isLink, path));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setHierarchyAnimator(animator: Animator, parentAnimator: Animator): void {\r\n\t\tthis._changeHierarchyAnimator(animator);\r\n\t\tthis._changeAnimatorAvatar(animator.avatar);\r\n\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++) {\r\n\t\t\tvar child: Sprite3D = this._children[i];\r\n\t\t\t(child._hierarchyAnimator == parentAnimator) && (child._setHierarchyAnimator(animator, parentAnimator));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_clearHierarchyAnimator(animator: Animator, parentAnimator: Animator): void {\r\n\t\tthis._changeHierarchyAnimator(parentAnimator);\r\n\t\tthis._changeAnimatorAvatar(parentAnimator ? parentAnimator.avatar : null);\r\n\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++) {\r\n\t\t\tvar child: Sprite3D = this._children[i];\r\n\t\t\t(child._hierarchyAnimator == animator) && (child._clearHierarchyAnimator(animator, parentAnimator));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_changeHierarchyAnimatorAvatar(animator: Animator, avatar: Avatar): void {\r\n\t\tthis._changeAnimatorAvatar(avatar);\r\n\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++) {\r\n\t\t\tvar child: Sprite3D = this._children[i];\r\n\t\t\t(child._hierarchyAnimator == animator) && (child._changeHierarchyAnimatorAvatar(animator, avatar));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_changeAnimatorToLinkSprite3DNoAvatar(animator: Animator, isLink: boolean, path: string[]): void {\r\n\t\tanimator._handleSpriteOwnersBySprite(isLink, path, this);\r\n\t\tfor (var i: number = 0, n: number = this._children.length; i < n; i++) {\r\n\t\t\tvar child: Sprite3D = this._children[i];\r\n\t\t\tvar index: number = path.length;\r\n\t\t\tpath.push(child.name);\r\n\t\t\tchild._changeAnimatorToLinkSprite3DNoAvatar(animator, isLink, path);\r\n\t\t\tpath.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _changeHierarchyAnimator(animator: Animator): void {\r\n\t\tthis._hierarchyAnimator = animator;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _changeAnimatorAvatar(avatar: Avatar): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onAdded(): void {\r\n\t\tif (this._parent instanceof Sprite3D) {\r\n\t\t\tvar parent3D: Sprite3D = (<Sprite3D>this._parent);\r\n\t\t\tthis.transform._setParent(parent3D.transform);\r\n\t\t\tif (parent3D._hierarchyAnimator) {\r\n\t\t\t\t(!this._hierarchyAnimator) && (this._setHierarchyAnimator(parent3D._hierarchyAnimator, null));//执行条件为sprite3D._hierarchyAnimator==parentAnimator,只有一种情况sprite3D._hierarchyAnimator=null成立,且_hierarchyAnimator不为空有意义\r\n\t\t\t\tparent3D._changeAnimatorsToLinkSprite3D(this, true, [this.name]);//TODO:是否获取默认值函数移到active事件函数内，U3D修改active会重新获取默认值\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper._onAdded();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onRemoved(): void {\r\n\t\tsuper._onRemoved();\r\n\r\n\t\tif (this._parent instanceof Sprite3D) {\r\n\t\t\tvar parent3D: Sprite3D = (<Sprite3D>this._parent);\r\n\t\t\tthis.transform._setParent(null);\r\n\t\t\tif (parent3D._hierarchyAnimator) {\r\n\t\t\t\t(this._hierarchyAnimator == parent3D._hierarchyAnimator) && (this._clearHierarchyAnimator(parent3D._hierarchyAnimator, null));//_hierarchyAnimator不为空有意义\r\n\t\t\t\tparent3D._changeAnimatorsToLinkSprite3D(this, false, [this.name]);//TODO:是否获取默认值函数移到active事件函数内，U3D修改active会重新获取默认值\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\t(data.isStatic !== undefined) && (this._isStatic = data.isStatic);\r\n\t\t(data.active !== undefined) && (this.active = data.active);\r\n\t\t(data.name != undefined) && (this.name = data.name);\r\n\r\n\t\tif (data.position !== undefined) {\r\n\t\t\tvar loccalPosition: Vector3 = this.transform.localPosition;\r\n\t\t\tloccalPosition.fromArray(data.position);\r\n\t\t\tthis.transform.localPosition = loccalPosition;\r\n\t\t}\r\n\r\n\t\tif (data.rotationEuler !== undefined) {\r\n\t\t\tvar localRotationEuler: Vector3 = this.transform.localRotationEuler;\r\n\t\t\tlocalRotationEuler.fromArray(data.rotationEuler);\r\n\t\t\tthis.transform.localRotationEuler = localRotationEuler;\r\n\t\t}\r\n\t\tif (data.rotation !== undefined) {\r\n\t\t\tvar localRotation: Quaternion = this.transform.localRotation;\r\n\t\t\tlocalRotation.fromArray(data.rotation);\r\n\t\t\tthis.transform.localRotation = localRotation;\r\n\t\t}\r\n\r\n\t\tif (data.scale !== undefined) {\r\n\t\t\tvar localScale: Vector3 = this.transform.localScale;\r\n\t\t\tlocalScale.fromArray(data.scale);\r\n\t\t\tthis.transform.localScale = localScale;\r\n\t\t}\r\n\r\n\t\t(data.layer != undefined) && (this.layer = data.layer);\r\n\r\n\t\tif (data.extData !== undefined) {\r\n\t\t\tthis.extData = data.extData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @internal\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\t_cloneTo(destObject: any, srcRoot: Node, dstRoot: Node): void {\r\n\t\tif (this.destroyed)\r\n\t\t\tthrow new Error(\"Sprite3D: Can't be cloned if the Sprite3D has destroyed.\");\r\n\r\n\t\tvar destSprite3D: Sprite3D = <Sprite3D>destObject;\r\n\t\tvar trans: Transform3D = this._transform;\r\n\t\tvar destTrans: Transform3D = destSprite3D._transform;\r\n\r\n\t\tdestSprite3D.name = this.name/* + \"(clone)\"*/;//TODO:克隆后不能播放刚体动画，找不到名字\r\n\t\tdestSprite3D.destroyed = this.destroyed;\r\n\t\tdestSprite3D.active = this.active;\r\n\t\tdestTrans.localPosition = trans.localPosition;\r\n\t\tdestTrans.localRotation = trans.localRotation;\r\n\t\tdestTrans.localScale = trans.localScale;\r\n\r\n\t\tdestSprite3D._isStatic = this._isStatic;\r\n\t\tdestSprite3D.layer = this.layer;\r\n\t\tsuper._cloneTo(destSprite3D, srcRoot, dstRoot);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _createSprite3DInstance(scrSprite: Sprite3D): Node {\r\n\t\tvar node: Node = scrSprite._create();\r\n\t\tvar children: any[] = scrSprite._children;\r\n\t\tfor (var i: number = 0, n: number = children.length; i < n; i++) {\r\n\t\t\tvar child: any = Sprite3D._createSprite3DInstance(children[i])\r\n\t\t\tnode.addChild(child);\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _parseSprite3DInstance(srcRoot: Node, dstRoot: Node, scrSprite: Node, dstSprite: Node): void {\r\n\t\t//scrSprite._cloneTo(dstSprite,srcRoot,dstRoot);//TODO:因为根据名字找Owner,子节点名字还未赋值有BUG\r\n\t\tvar srcChildren: any[] = scrSprite._children;\r\n\t\tvar dstChildren: any[] = dstSprite._children;\r\n\t\tfor (var i: number = 0, n: number = srcChildren.length; i < n; i++)\r\n\t\t\tSprite3D._parseSprite3DInstance(srcRoot, dstRoot, srcChildren[i], dstChildren[i])\r\n\t\tscrSprite._cloneTo(dstSprite, srcRoot, dstRoot);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): Node {\r\n\t\tvar dstSprite3D: Node = Sprite3D._createSprite3DInstance(this);\r\n\t\tSprite3D._parseSprite3DInstance(this, dstSprite3D, this, dstSprite3D);\r\n\t\treturn dstSprite3D;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(destroyChild: boolean = true): void {\r\n\t\tif (this.destroyed)\r\n\t\t\treturn;\r\n\r\n\t\tsuper.destroy(destroyChild);\r\n\t\tthis._transform = null;\r\n\t\tthis._scripts = null;\r\n\t\tthis._url && Loader.clearRes(this._url);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new Sprite3D();\r\n\t}\r\n}\r\n\r\n","import { Laya } from \"../../../Laya\";\r\nimport { Node } from \"../../display/Node\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Vector4 } from \"../math/Vector4\";\r\nimport { SkyRenderer } from \"../resource/models/SkyRenderer\";\r\nimport { Shader3D } from \"../shader/Shader3D\";\r\nimport { ShaderData } from \"../shader/ShaderData\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { Scene3D } from \"./scene/Scene3D\";\r\n\r\n/**\r\n * <code>BaseCamera</code> 类用于创建摄像机的父类。\r\n */\r\nexport class BaseCamera extends Sprite3D {\r\n\tstatic _tempMatrix4x40: Matrix4x4 = new Matrix4x4();\r\n\r\n\tstatic CAMERAPOS: number = Shader3D.propertyNameToID(\"u_CameraPos\");\r\n\tstatic VIEWMATRIX: number = Shader3D.propertyNameToID(\"u_View\");\r\n\tstatic PROJECTMATRIX: number = Shader3D.propertyNameToID(\"u_Projection\");\r\n\tstatic VIEWPROJECTMATRIX: number = Shader3D.propertyNameToID(\"u_ViewProjection\");\r\n\tstatic CAMERADIRECTION: number = Shader3D.propertyNameToID(\"u_CameraDirection\");\r\n\tstatic CAMERAUP: number = Shader3D.propertyNameToID(\"u_CameraUp\");\r\n\tstatic VIEWPORT: number = Shader3D.propertyNameToID(\"u_Viewport\");\r\n\tstatic PROJECTION_PARAMS: number = Shader3D.propertyNameToID(\"u_ProjectionParams\");\r\n\r\n\t/**渲染模式,延迟光照渲染，暂未开放。*/\r\n\tstatic RENDERINGTYPE_DEFERREDLIGHTING: string = \"DEFERREDLIGHTING\";\r\n\t/**渲染模式,前向渲染。*/\r\n\tstatic RENDERINGTYPE_FORWARDRENDERING: string = \"FORWARDRENDERING\";\r\n\r\n\tprotected static _invertYScaleMatrix: Matrix4x4 = new Matrix4x4(1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);//Matrix4x4.createScaling(new Vector3(1, -1, 1), _invertYScaleMatrix);\r\n\tprotected static _invertYProjectionMatrix: Matrix4x4 = new Matrix4x4();\r\n\tprotected static _invertYProjectionViewMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n\t//private static const Vector3[] cornersWorldSpace:Vector.<Vector3> = new Vector.<Vector3>(8);\r\n\t//private static const  boundingFrustum:BoundingFrustum = new BoundingFrustum(Matrix4x4.Identity);\r\n\r\n\r\n\t/** @internal 渲染顺序。*/\r\n\t_renderingOrder: number\r\n\r\n\t/** 近裁剪面。*/\r\n\tprotected _nearPlane: number;\r\n\t/** 远裁剪面。*/\r\n\tprotected _farPlane: number;\r\n\t/** 视野。*/\r\n\tprivate _fieldOfView: number;\r\n\t/** 正交投影的垂直尺寸。*/\r\n\tprivate _orthographicVerticalSize: number;\r\n\tprivate _skyRenderer: SkyRenderer = new SkyRenderer();\r\n\tprivate _forward: Vector3 = new Vector3();\r\n\tprivate _up: Vector3 = new Vector3();\r\n\r\n\t/**@internal */\r\n\tprotected _orthographic: boolean;\r\n\r\n\t/**@internal 是否使用用户自定义投影矩阵，如果使用了用户投影矩阵，摄像机投影矩阵相关的参数改变则不改变投影矩阵的值，需调用ResetProjectionMatrix方法。*/\r\n\tprotected _useUserProjectionMatrix: boolean;\r\n\r\n\t/** @internal */\r\n\t_shaderValues: ShaderData;\r\n\r\n\t/**摄像机的清除颜色,默认颜色为CornflowerBlue。*/\r\n\tclearColor: Vector4 = new Vector4(100 / 255, 149 / 255, 237 / 255, 255 / 255);\r\n\t/** 可视层位标记遮罩值,支持混合 例:cullingMask=Math.pow(2,0)|Math.pow(2,1)为第0层和第1层可见。*/\r\n\tcullingMask: number;\r\n\t/** 渲染时是否用遮挡剔除。 */\r\n\tuseOcclusionCulling: boolean;\r\n\r\n\t/**\r\n\t * 天空渲染器。\r\n\t */\r\n\tget skyRenderer(): SkyRenderer {\r\n\t\treturn this._skyRenderer;\r\n\t}\r\n\r\n\t/**\r\n\t * 视野。\r\n\t */\r\n\tget fieldOfView(): number {\r\n\t\treturn this._fieldOfView;\r\n\t}\r\n\r\n\tset fieldOfView(value: number) {\r\n\t\tthis._fieldOfView = value;\r\n\t\tthis._calculateProjectionMatrix();\r\n\t}\r\n\r\n\t/**\r\n\t * 近裁面。\r\n\t */\r\n\tget nearPlane(): number {\r\n\t\treturn this._nearPlane;\r\n\t}\r\n\r\n\tset nearPlane(value: number) {\r\n\t\tthis._nearPlane = value;\r\n\t\tthis._calculateProjectionMatrix();\r\n\t}\r\n\r\n\t/**\r\n\t * 远裁面。\r\n\t */\r\n\tget farPlane(): number {\r\n\t\treturn this._farPlane;\r\n\t}\r\n\r\n\tset farPlane(vaule: number) {\r\n\t\tthis._farPlane = vaule;\r\n\t\tthis._calculateProjectionMatrix();\r\n\t}\r\n\r\n\t/**\r\n\t * 是否正交投影矩阵。\r\n\t */\r\n\tget orthographic(): boolean {\r\n\t\treturn this._orthographic;\r\n\t}\r\n\r\n\tset orthographic(vaule: boolean) {\r\n\t\tthis._orthographic = vaule;\r\n\t\tthis._calculateProjectionMatrix();\r\n\t}\r\n\r\n\t/**\r\n\t * 正交投影垂直矩阵尺寸。\r\n\t */\r\n\tget orthographicVerticalSize(): number {\r\n\t\treturn this._orthographicVerticalSize;\r\n\t}\r\n\r\n\tset orthographicVerticalSize(vaule: number) {\r\n\t\tthis._orthographicVerticalSize = vaule;\r\n\t\tthis._calculateProjectionMatrix();\r\n\t}\r\n\r\n\tget renderingOrder(): number {\r\n\t\treturn this._renderingOrder;\r\n\t}\r\n\r\n\tset renderingOrder(value: number) {\r\n\t\tthis._renderingOrder = value;\r\n\t\tthis._sortCamerasByRenderingOrder();\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>BaseCamera</code> 实例。\r\n\t * @param\tfieldOfView 视野。\r\n\t * @param\tnearPlane 近裁面。\r\n\t * @param\tfarPlane 远裁面。\r\n\t */\r\n\tconstructor(nearPlane: number = 0.3, farPlane: number = 1000) {\r\n\t\tsuper();\r\n\t\tthis._shaderValues = new ShaderData(null);\r\n\r\n\t\tthis._fieldOfView = 60;\r\n\t\tthis._useUserProjectionMatrix = false;\r\n\t\tthis._orthographic = false;\r\n\r\n\t\tthis._orthographicVerticalSize = 10;\r\n\t\tthis.renderingOrder = 0;\r\n\r\n\t\tthis._nearPlane = nearPlane;\r\n\t\tthis._farPlane = farPlane;\r\n\r\n\t\tthis.cullingMask = 2147483647/*int.MAX_VALUE*/;\r\n\t\tthis.useOcclusionCulling = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过RenderingOrder属性对摄像机机型排序。\r\n\t */\r\n\t_sortCamerasByRenderingOrder(): void {\r\n\t\tif (this.displayedInStage) {\r\n\t\t\tvar cameraPool: BaseCamera[] = this.scene._cameraPool;//TODO:可优化，从队列中移除再加入\r\n\t\t\tvar n: number = cameraPool.length - 1;\r\n\t\t\tfor (var i: number = 0; i < n; i++) {\r\n\t\t\t\tif (cameraPool[i].renderingOrder > cameraPool[n].renderingOrder) {\r\n\t\t\t\t\tvar tempCamera: BaseCamera = cameraPool[i];\r\n\t\t\t\t\tcameraPool[i] = cameraPool[n];\r\n\t\t\t\t\tcameraPool[n] = tempCamera;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _calculateProjectionMatrix(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _onScreenSizeChanged(): void {\r\n\t\tthis._calculateProjectionMatrix();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_prepareCameraToRender(): void {\r\n\t\tvar cameraSV: ShaderData = this._shaderValues;\r\n\t\tthis.transform.getForward(this._forward);\r\n\t\tthis.transform.getUp(this._up);\r\n\t\tcameraSV.setVector3(BaseCamera.CAMERAPOS, this.transform.position);\r\n\t\tcameraSV.setVector3(BaseCamera.CAMERADIRECTION, this._forward);\r\n\t\tcameraSV.setVector3(BaseCamera.CAMERAUP, this._up);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 相机渲染。\r\n\t * @param\tshader 着色器。\r\n\t * @param   replacementTag 着色器替换标记。\r\n\t */\r\n\trender(shader: Shader3D = null, replacementTag: string = null): void {\r\n\t}\r\n\r\n\t/**\r\n\t * 增加可视图层,layer值为0到31层。\r\n\t * @param layer 图层。\r\n\t */\r\n\taddLayer(layer: number): void {\r\n\t\tthis.cullingMask |= Math.pow(2, layer);\r\n\t}\r\n\r\n\t/**\r\n\t * 移除可视图层,layer值为0到31层。\r\n\t * @param layer 图层。\r\n\t */\r\n\tremoveLayer(layer: number): void {\r\n\t\tthis.cullingMask &= ~Math.pow(2, layer);\r\n\t}\r\n\r\n\t/**\r\n\t * 增加所有图层。\r\n\t */\r\n\taddAllLayers(): void {\r\n\t\tthis.cullingMask = 2147483647/*int.MAX_VALUE*/;\r\n\t}\r\n\r\n\t/**\r\n\t * 移除所有图层。\r\n\t */\r\n\tremoveAllLayers(): void {\r\n\t\tthis.cullingMask = 0;\r\n\t}\r\n\r\n\tresetProjectionMatrix(): void {\r\n\t\tthis._useUserProjectionMatrix = false;\r\n\t\tthis._calculateProjectionMatrix();\r\n\t}\r\n\r\n\t//public void BoundingFrustumViewSpace(Vector3[] cornersViewSpace)\r\n\t//{\r\n\t//if (cornersViewSpace.Length != 4)\r\n\t//throw new ArgumentOutOfRangeException(\"cornersViewSpace\");\r\n\t//boundingFrustum.Matrix = ViewMatrix * ProjectionMatrix;\r\n\t//boundingFrustum.GetCorners(cornersWorldSpace);\r\n\t//// Transform form world space to view space\r\n\t//for (int i = 0; i < 4; i++)\r\n\t//{\r\n\t//cornersViewSpace[i] = Vector3.Transform(cornersWorldSpace[i + 4], ViewMatrix);\r\n\t//}\r\n\t//\r\n\t//// Swap the last 2 values.\r\n\t//Vector3 temp = cornersViewSpace[3];\r\n\t//cornersViewSpace[3] = cornersViewSpace[2];\r\n\t//cornersViewSpace[2] = temp;\r\n\t//} // BoundingFrustumViewSpace\r\n\r\n\t//public void BoundingFrustumWorldSpace(Vector3[] cornersWorldSpaceResult)\r\n\t//{\r\n\t//if (cornersWorldSpaceResult.Length != 4)\r\n\t//throw new ArgumentOutOfRangeException(\"cornersViewSpace\");\r\n\t//boundingFrustum.Matrix = ViewMatrix * ProjectionMatrix;\r\n\t//boundingFrustum.GetCorners(cornersWorldSpace);\r\n\t//// Transform form world space to view space\r\n\t//for (int i = 0; i < 4; i++)\r\n\t//{\r\n\t//cornersWorldSpaceResult[i] = cornersWorldSpace[i + 4];\r\n\t//}\r\n\t//\r\n\t//// Swap the last 2 values.\r\n\t//Vector3 temp = cornersWorldSpaceResult[3];\r\n\t//cornersWorldSpaceResult[3] = cornersWorldSpaceResult[2];\r\n\t//cornersWorldSpaceResult[2] = temp;\r\n\t//} // BoundingFrustumWorldSpace\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onActive(): void {\r\n\t\t((<Scene3D>this._scene))._addCamera(this);\r\n\t\tsuper._onActive();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onInActive(): void {\r\n\t\t((<Scene3D>this._scene))._removeCamera(this);\r\n\t\tsuper._onInActive();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\r\n\t\tthis.orthographic = data.orthographic;\r\n\t\t(data.orthographicVerticalSize !== undefined) && (this.orthographicVerticalSize = data.orthographicVerticalSize);\r\n\t\t(data.fieldOfView !== undefined) && (this.fieldOfView = data.fieldOfView);\r\n\t\tthis.nearPlane = data.nearPlane;\r\n\t\tthis.farPlane = data.farPlane;\r\n\r\n\t\tvar color: any[] = data.clearColor;\r\n\t\tthis.clearColor = new Vector4(color[0], color[1], color[2], color[3]);\r\n\t\tvar skyboxMaterial: any = data.skyboxMaterial;\r\n\t\tif (skyboxMaterial) {\r\n\t\t\tthis._skyRenderer.material = Loader.getRes(skyboxMaterial.path);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(destroyChild: boolean = true): void {\r\n\t\t//postProcess = null;\r\n\t\t//AmbientLight = null;\r\n\t\tthis._skyRenderer.destroy();\r\n\t\tthis._skyRenderer = null;\r\n\r\n\t\tLaya.stage.off(Event.RESIZE, this, this._onScreenSizeChanged);\r\n\t\tsuper.destroy(destroyChild);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new BaseCamera();\r\n\t}\r\n\r\n\t/** @deprecated plaease use CameraClearFlags.SolidColor instead.*/\r\n\tstatic CLEARFLAG_SOLIDCOLOR: number = 0;\r\n\t/** @deprecated plaease use CameraClearFlags.Sky instead.*/\r\n\tstatic CLEARFLAG_SKY: number = 1;\r\n\t/** @deprecated plaease use CameraClearFlags.DepthOnly instead.*/\r\n\tstatic CLEARFLAG_DEPTHONLY: number = 2;\r\n\t/** @deprecated plaease use CameraClearFlags.Nothing instead.*/\r\n\tstatic CLEARFLAG_NONE: number = 3;\r\n}\r\n\r\n","/**\r\n * 阴影模式。\r\n */\r\nexport enum ShadowMode {\r\n    /* 不产生阴影。*/\r\n    None,\r\n    /* 硬阴影，对性能要求较低。*/\r\n    Hard,\r\n    /* 低强度软阴影，对性能要求一般。*/\r\n    SoftLow,\r\n    /* 高强度软阴影,对性能要求较高。*/\r\n    SoftHigh\r\n}","import { LayaGL } from \"../../../layagl/LayaGL\"\r\nimport { Resource } from \"../../../resource/Resource\"\r\nimport { Stat } from \"../../../utils/Stat\"\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\"\r\nimport { VertexDeclaration } from \"../../graphics/VertexDeclaration\"\r\nimport { VertexElement } from \"../../graphics/VertexElement\"\r\nimport { VertexElementFormat } from \"../../graphics/VertexElementFormat\"\r\nimport { BufferState } from \"../BufferState\"\r\n\r\n/**\r\n * <code>ScreenQuad</code> 类用于创建全屏四边形。\r\n */\r\nexport class ScreenQuad extends Resource {\r\n\t/** @internal */\r\n\tstatic SCREENQUAD_POSITION_UV: number = 0;\r\n\t/** @internal */\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\t/** @internal */\r\n\tprivate static _vertices: Float32Array = new Float32Array([1, 1, 1, 1, 1, -1, 1, 0, -1, 1, 0, 1, -1, -1, 0, 0]);//the rule of OpenGL\r\n\t/** @internal */\r\n\tprivate static _verticesInvertUV: Float32Array = new Float32Array([1, 1, 1, 0, 1, -1, 1, 1, -1, 1, 0, 0, -1, -1, 0, 1]);\r\n\r\n\t/**@internal */\r\n\tstatic instance: ScreenQuad;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tScreenQuad._vertexDeclaration = new VertexDeclaration(16, [new VertexElement(0, VertexElementFormat.Vector4, ScreenQuad.SCREENQUAD_POSITION_UV)]);\r\n\t\tScreenQuad.instance = new ScreenQuad();\r\n\t\tScreenQuad.instance.lock = true;\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _vertexBuffer: VertexBuffer3D;\r\n\t/** @internal */\r\n\tprivate _bufferState: BufferState = new BufferState();\r\n\t/** @internal */\r\n\tprivate _vertexBufferInvertUV: VertexBuffer3D;\r\n\t/** @internal */\r\n\tprivate _bufferStateInvertUV: BufferState = new BufferState();\r\n\r\n\t/**\r\n\t * 创建一个 <code>ScreenQuad</code> 实例,禁止使用。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tthis._vertexBuffer = new VertexBuffer3D(16 * 4, gl.STATIC_DRAW, false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = ScreenQuad._vertexDeclaration;\r\n\t\tthis._vertexBuffer.setData(ScreenQuad._vertices.buffer);\r\n\t\tthis._bufferState.bind();\r\n\t\tthis._bufferState.applyVertexBuffer(this._vertexBuffer);\r\n\t\tthis._bufferState.unBind();\r\n\r\n\t\tthis._vertexBufferInvertUV = new VertexBuffer3D(16 * 4, gl.STATIC_DRAW, false);\r\n\t\tthis._vertexBufferInvertUV.vertexDeclaration = ScreenQuad._vertexDeclaration;\r\n\t\tthis._vertexBufferInvertUV.setData(ScreenQuad._verticesInvertUV.buffer);\r\n\t\tthis._bufferStateInvertUV.bind();\r\n\t\tthis._bufferStateInvertUV.applyVertexBuffer(this._vertexBufferInvertUV);\r\n\t\tthis._bufferStateInvertUV.unBind();\r\n\r\n\t\tthis._setGPUMemory(this._vertexBuffer._byteLength + this._vertexBufferInvertUV._byteLength);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trender(): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tthis._bufferState.bind();\r\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n\t\tStat.renderBatches++;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trenderInvertUV(): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tthis._bufferStateInvertUV.bind();\r\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n\t\tStat.renderBatches++;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tthis._bufferState.destroy();\r\n\t\tthis._vertexBuffer.destroy();\r\n\t\tthis._bufferStateInvertUV.destroy();\r\n\t\tthis._vertexBufferInvertUV.destroy();\r\n\t\tthis._setGPUMemory(0);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BufferState } from \"../BufferState\"\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\"\r\nimport { VertexDeclaration } from \"../../graphics/VertexDeclaration\"\r\nimport { VertexElement } from \"../../graphics/VertexElement\"\r\nimport { VertexElementFormat } from \"../../graphics/VertexElementFormat\"\r\nimport { LayaGL } from \"../../../layagl/LayaGL\"\r\nimport { Resource } from \"../../../resource/Resource\"\r\nimport { Stat } from \"../../../utils/Stat\"\r\n\r\n\r\n/**\r\n * <code>ScreenTriangle</code> 类用于创建全屏三角形。\r\n */\r\nexport class ScreenTriangle extends Resource {\r\n\t/** @internal */\r\n\tstatic SCREENTRIANGLE_POSITION_UV: number = 0;\r\n\t/** @internal */\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\t/** @internal */\r\n\tprivate static _vertices: Float32Array = new Float32Array([-1, -1, 0, 0, -1, 3, 0, 2, 3, -1, 2, 0]);//the rule of OpenGL\r\n\t/** @internal */\r\n\tprivate static _verticesInvertUV: Float32Array = new Float32Array([-1, -1, 0, 1, -1, 3, 0, -1, 3, -1, 2, 1]);\r\n\r\n\t/**@internal */\r\n\tstatic instance: ScreenTriangle;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tScreenTriangle._vertexDeclaration = new VertexDeclaration(16, [new VertexElement(0, VertexElementFormat.Vector4, ScreenTriangle.SCREENTRIANGLE_POSITION_UV)]);\r\n\t\tScreenTriangle.instance = new ScreenTriangle();\r\n\t\tScreenTriangle.instance.lock = true;\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _vertexBuffer: VertexBuffer3D;\r\n\t/** @internal */\r\n\tprivate _bufferState: BufferState = new BufferState();\r\n\t/** @internal */\r\n\tprivate _vertexBufferInvertUV: VertexBuffer3D;\r\n\t/** @internal */\r\n\tprivate _bufferStateInvertUV: BufferState = new BufferState();\r\n\r\n\t/**\r\n\t * 创建一个 <code>ScreenTriangle</code> 实例,禁止使用。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tthis._vertexBuffer = new VertexBuffer3D(12 * 4, gl.STATIC_DRAW, false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = ScreenTriangle._vertexDeclaration;\r\n\t\tthis._vertexBuffer.setData(ScreenTriangle._vertices.buffer);\r\n\t\tthis._bufferState.bind();\r\n\t\tthis._bufferState.applyVertexBuffer(this._vertexBuffer);\r\n\t\tthis._bufferState.unBind();\r\n\r\n\t\tthis._vertexBufferInvertUV = new VertexBuffer3D(12 * 4, gl.STATIC_DRAW, false);\r\n\t\tthis._vertexBufferInvertUV.vertexDeclaration = ScreenTriangle._vertexDeclaration;\r\n\t\tthis._vertexBufferInvertUV.setData(ScreenTriangle._verticesInvertUV.buffer);\r\n\t\tthis._bufferStateInvertUV.bind();\r\n\t\tthis._bufferStateInvertUV.applyVertexBuffer(this._vertexBufferInvertUV);\r\n\t\tthis._bufferStateInvertUV.unBind();\r\n\r\n\t\tthis._setGPUMemory(this._vertexBuffer._byteLength + this._vertexBufferInvertUV._byteLength);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trender(): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tthis._bufferState.bind();\r\n\t\tgl.drawArrays(gl.TRIANGLES, 0, 3);\r\n\t\tStat.renderBatches++;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trenderInvertUV(): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tthis._bufferStateInvertUV.bind();\r\n\t\tgl.drawArrays(gl.TRIANGLES, 0, 3);\r\n\t\tStat.renderBatches++;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tthis._bufferState.destroy();\r\n\t\tthis._vertexBuffer.destroy();\r\n\t\tthis._bufferStateInvertUV.destroy();\r\n\t\tthis._vertexBufferInvertUV.destroy();\r\n\t\tthis._setGPUMemory(0);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Shader3D } from \"../../../../d3/shader/Shader3D\";\r\nimport { ShaderData } from \"../../../../d3/shader/ShaderData\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\n\r\n/**\r\n * <code>Command</code> 类用于创建指令。\r\n */\r\nexport class Command {\r\n\t/**@internal */\r\n\tstatic _screenShaderData: ShaderData;\r\n\t/** @internal */\r\n\tstatic _screenShader: Shader3D;\r\n\r\n\t/** @internal */\r\n\tstatic SCREENTEXTURE_NAME: string = \"u_MainTex\";//todo：\r\n\t/** @internal */\r\n\tstatic SCREENTEXTUREOFFSETSCALE_NAME: string = \"u_OffsetScale\";\r\n\t/** @internal */\r\n\tstatic MAINTEXTURE_TEXELSIZE_NAME: string = \"u_MainTex_TexelSize\";//todo：\r\n\t/** @internal */\r\n\tstatic SCREENTEXTURE_ID: number = Shader3D.propertyNameToID(Command.SCREENTEXTURE_NAME);//todo：\r\n\t/** @internal */\r\n\tstatic SCREENTEXTUREOFFSETSCALE_ID: number = Shader3D.propertyNameToID(Command.SCREENTEXTUREOFFSETSCALE_NAME);//todo：\r\n\t/** @internal */\r\n\tstatic MAINTEXTURE_TEXELSIZE_ID: number = Shader3D.propertyNameToID(Command.MAINTEXTURE_TEXELSIZE_NAME);//todo：\r\n\r\n\t/**@internal */\r\n\tprivate _commandBuffer: CommandBuffer = null;\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __init__(): void {\r\n\t\tCommand._screenShaderData = new ShaderData();\r\n\t\tCommand._screenShader = Shader3D.find(\"BlitScreen\");\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Command</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\trun(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\trecover(): void {\r\n\t\tthis._commandBuffer = null;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { Vector4 } from \"../../../math/Vector4\";\r\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\r\nimport { DefineDatas } from \"../../../shader/DefineDatas\";\r\nimport { Shader3D } from \"../../../shader/Shader3D\";\r\nimport { ShaderData } from \"../../../shader/ShaderData\";\r\nimport { ShaderInstance } from \"../../../shader/ShaderInstance\";\r\nimport { ShaderPass } from \"../../../shader/ShaderPass\";\r\nimport { SubShader } from \"../../../shader/SubShader\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { ScreenQuad } from \"../ScreenQuad\";\r\nimport { ScreenTriangle } from \"../ScreenTriangle\";\r\nimport { Command } from \"./Command\";\r\n\r\n/**\r\n * <code>BlitScreenQuadCMD</code> 类用于创建从一张渲染目标输出到另外一张渲染目标指令。\r\n */\r\nexport class BlitScreenQuadCMD extends Command {\r\n\t/**@internal */\r\n\tstatic _SCREENTYPE_QUAD: number = 0;\r\n\t/**@internal */\r\n\tstatic _SCREENTYPE_TRIANGLE: number = 1;\r\n\r\n\t/** @internal */\r\n\tprivate static _compileDefine: DefineDatas = new DefineDatas();\r\n\t/**@internal */\r\n\tprivate static _pool: any[] = [];\r\n\t/** @internal */\r\n\tprivate static _defaultOffsetScale: Vector4 = new Vector4(0, 0, 1, 1);\r\n\r\n\t/**@internal */\r\n\tprivate _source: BaseTexture = null;\r\n\t/**@internal */\r\n\tprivate _dest: RenderTexture = null;\r\n\t/**@internal */\r\n\tprivate _offsetScale: Vector4 = null;\r\n\t/**@internal */\r\n\tprivate _shader: Shader3D = null;\r\n\t/**@internal */\r\n\tprivate _shaderData: ShaderData = null;\r\n\t/**@internal */\r\n\tprivate _subShader: number = 0;\r\n\t/**@internal */\r\n\tprivate _sourceTexelSize: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _screenType: number = 0;\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tstatic create(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0, screenType: number = BlitScreenQuadCMD._SCREENTYPE_QUAD): BlitScreenQuadCMD {\r\n\t\tvar cmd: BlitScreenQuadCMD;\r\n\t\tcmd = BlitScreenQuadCMD._pool.length > 0 ? BlitScreenQuadCMD._pool.pop() : new BlitScreenQuadCMD();\r\n\t\tcmd._source = source;\r\n\t\tcmd._dest = dest;\r\n\t\tcmd._offsetScale = offsetScale;\r\n\t\tcmd._shader = shader;\r\n\t\tcmd._shaderData = shaderData;\r\n\t\tcmd._subShader = subShader;\r\n\t\tcmd._screenType = screenType;\r\n\t\treturn cmd;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trun(): void {//TODO:相机的UV\r\n\t\tvar shader: Shader3D = this._shader || Command._screenShader;\r\n\t\tvar shaderData: ShaderData = this._shaderData || Command._screenShaderData;\r\n\t\tvar dest: RenderTexture = this._dest;\r\n\r\n\t\tLayaGL.instance.viewport(0, 0, dest ? dest.width : RenderContext3D.clientWidth, dest ? dest.height : RenderContext3D.clientHeight);//TODO:是否在此\r\n\r\n\t\t//TODO:优化\r\n\t\tshaderData.setTexture(Command.SCREENTEXTURE_ID, this._source);\r\n\t\tshaderData.setVector(Command.SCREENTEXTUREOFFSETSCALE_ID, this._offsetScale || BlitScreenQuadCMD._defaultOffsetScale);\r\n\t\tthis._sourceTexelSize.setValue(1.0 / this._source.width, 1.0 / this._source.height, this._source.width, this._source.height);\r\n\t\tshaderData.setVector(Command.MAINTEXTURE_TEXELSIZE_ID, this._sourceTexelSize);\r\n\r\n\t\t(dest) && (dest._start());\r\n\t\tvar subShader: SubShader = shader.getSubShaderAt(this._subShader);\r\n\t\tvar passes: ShaderPass[] = subShader._passes;\r\n\t\tfor (var i: number = 0, n: number = passes.length; i < n; i++) {\r\n\t\t\tvar comDef: DefineDatas = BlitScreenQuadCMD._compileDefine;\r\n\t\t\tshaderData._defineDatas.cloneTo(comDef);\r\n\t\t\tvar shaderPass: ShaderInstance = passes[i].withCompile(comDef);//TODO:define处理\r\n\t\t\tshaderPass.bind();\r\n\t\t\tshaderPass.uploadUniforms(shaderPass._materialUniformParamsMap, shaderData, true);//TODO:最后一个参数处理\r\n\t\t\tshaderPass.uploadRenderStateBlendDepth(shaderData);\r\n\t\t\tshaderPass.uploadRenderStateFrontFace(shaderData, false, null);//TODO: //利用UV翻转,无需设置为true\r\n\t\t\tswitch (this._screenType) {\r\n\t\t\t\tcase BlitScreenQuadCMD._SCREENTYPE_QUAD:\r\n\t\t\t\t\tRenderContext3D._instance.invertY ? ScreenQuad.instance.renderInvertUV() : ScreenQuad.instance.render();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase BlitScreenQuadCMD._SCREENTYPE_TRIANGLE:\r\n\t\t\t\t\tRenderContext3D._instance.invertY ? ScreenTriangle.instance.renderInvertUV() : ScreenTriangle.instance.render();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"BlitScreenQuadCMD:unknown screen Type.\";\r\n\t\t\t}\r\n\t\t}\r\n\t\t(dest) && (dest._end());\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trecover(): void {\r\n\t\tBlitScreenQuadCMD._pool.push(this);\r\n\t\tthis._source = null;\r\n\t\tthis._dest = null;\r\n\t\tthis._offsetScale = null;\r\n\t\tthis._shader = null;\r\n\t\tthis._shaderData = null;\r\n\t\tsuper.recover();\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Command } from \"./Command\";\r\nimport { RenderTexture } from \"../../../resource/RenderTexture\"\r\n\r\n/**\r\n * @internal\r\n * <code>SetRenderTargetCMD</code> 类用于创建设置渲染目标指令。\r\n */\r\nexport class SetRenderTargetCMD extends Command {\r\n\t/**@internal */\r\n\tprivate static _pool: any[] = [];\r\n\r\n\t/**@internal */\r\n\tprivate _renderTexture: RenderTexture = null;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic create(renderTexture: RenderTexture): SetRenderTargetCMD {\r\n\t\tvar cmd: SetRenderTargetCMD;\r\n\t\tcmd = SetRenderTargetCMD._pool.length > 0 ? SetRenderTargetCMD._pool.pop() : new SetRenderTargetCMD();\r\n\t\tcmd._renderTexture = renderTexture;\r\n\t\treturn cmd;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trun(): void {\r\n\t\tthis._renderTexture._start();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trecover(): void {\r\n\t\tSetRenderTargetCMD._pool.push(this);\r\n\t\tthis._renderTexture = null;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Command } from \"./Command\";\r\nimport { ShaderData } from \"../../../shader/ShaderData\"\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\n\r\n\r\n/**\r\n * @internal\r\n * <code>SetShaderDataTextureCMD</code> 类用于创建设置渲染目标指令。\r\n */\r\nexport class SetShaderDataTextureCMD extends Command {\r\n\t/**@internal */\r\n\tprivate static _pool: any[] = [];\r\n\r\n\t/**@internal */\r\n\tprivate _shaderData: ShaderData = null;\r\n\t/**@internal */\r\n\tprivate _nameID: number = 0;\r\n\t/**@internal */\r\n\tprivate _texture: BaseTexture = null;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic create(shaderData: ShaderData, nameID: number, texture: BaseTexture): SetShaderDataTextureCMD {\r\n\t\tvar cmd: SetShaderDataTextureCMD;\r\n\t\tcmd = SetShaderDataTextureCMD._pool.length > 0 ? SetShaderDataTextureCMD._pool.pop() : new SetShaderDataTextureCMD();\r\n\t\tcmd._shaderData = shaderData;\r\n\t\tcmd._nameID = nameID;\r\n\t\tcmd._texture = texture;\r\n\t\treturn cmd;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trun(): void {\r\n\t\tthis._shaderData.setTexture(this._nameID, this._texture);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trecover(): void {\r\n\t\tSetShaderDataTextureCMD._pool.push(this);\r\n\t\tthis._shaderData = null;\r\n\t\tthis._nameID = 0;\r\n\t\tthis._texture = null;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { RenderTexture } from \"../../../resource/RenderTexture\";\r\nimport { Shader3D } from \"../../../shader/Shader3D\";\r\nimport { ShaderData } from \"../../../shader/ShaderData\";\r\nimport { Camera } from \"../../Camera\";\r\nimport { BlitScreenQuadCMD } from \"./BlitScreenQuadCMD\";\r\nimport { SetRenderTargetCMD } from \"./SetRenderTargetCMD\";\r\nimport { SetShaderDataTextureCMD } from \"./SetShaderDataTextureCMD\";\r\nimport { Command } from \"./Command\";\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { Vector4 } from \"../../../math/Vector4\";\r\n\r\n/**\r\n * <code>CommandBuffer</code> 类用于创建命令流。\r\n */\r\nexport class CommandBuffer {\r\n\t/**@internal */\r\n\t_camera: Camera = null;\r\n\t/**@internal */\r\n\tprivate _commands: Command[] = [];\r\n\r\n\t/**\r\n\t * 创建一个 <code>CommandBuffer</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\t_apply(): void {\r\n\t\tfor (var i: number = 0, n: number = this._commands.length; i < n; i++)\r\n\t\t\tthis._commands[i].run();\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tsetShaderDataTexture(shaderData: ShaderData, nameID: number, source: BaseTexture): void {\r\n\t\tthis._commands.push(SetShaderDataTextureCMD.create(shaderData, nameID, source));\r\n\t}\r\n\r\n\t/**\r\n\t * 添加一条通过全屏四边形将源纹理渲染到目标渲染纹理指令。\r\n\t * @param\tsource 源纹理。\r\n\t * @param\tdest  目标纹理。\r\n\t * @param\toffsetScale 偏移缩放。\r\n\t * @param\tshader 着色器,如果为null使用内部拷贝着色器,不做任何处理。\r\n\t * @param\tshaderData 着色器数据,如果为null只接收sourceTexture。\r\n\t * @param\tsubShader subShader索引,默认值为0。\r\n\t */\r\n\tblitScreenQuad(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0): void {\r\n\t\tthis._commands.push(BlitScreenQuadCMD.create(source, dest, offsetScale, shader, shaderData, subShader, BlitScreenQuadCMD._SCREENTYPE_QUAD));\r\n\t}\r\n\r\n\t/**\r\n\t * 添加一条通过全屏三角形将源纹理渲染到目标渲染纹理指令。\r\n\t * @param\tsource 源纹理。\r\n\t * @param\tdest  目标纹理。\r\n\t * @param\toffsetScale 偏移缩放。\r\n\t * @param\tshader 着色器,如果为null使用内部拷贝着色器,不做任何处理。\r\n\t * @param\tshaderData 着色器数据,如果为null只接收sourceTexture。\r\n\t * @param\tsubShader subShader索引,默认值为0。\r\n\t */\r\n\tblitScreenTriangle(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0): void {\r\n\t\tthis._commands.push(BlitScreenQuadCMD.create(source, dest, offsetScale, shader, shaderData, subShader, BlitScreenQuadCMD._SCREENTYPE_TRIANGLE));\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tsetRenderTarget(renderTexture: RenderTexture): void {\r\n\t\tthis._commands.push(SetRenderTargetCMD.create(renderTexture));\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tclear(): void {\r\n\t\tfor (var i: number = 0, n: number = this._commands.length; i < n; i++)\r\n\t\t\tthis._commands[i].recover();\r\n\t\tthis._commands.length = 0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ShaderDefine } from \"../../shader/ShaderDefine\";\r\n\r\nexport class Scene3DShaderDeclaration {\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_FOG: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DIRECTIONLIGHT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_POINTLIGHT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SPOTLIGHT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_CASCADE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SPOT:ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW:ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH:ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_GI_AMBIENT_SH: ShaderDefine;\r\n}","import { Config3D } from \"../../../../Config3D\";\r\nimport { Node } from \"../../../display/Node\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Scene3D } from \"../scene/Scene3D\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { ShadowMode } from \"./ShadowMode\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport enum LightType {\r\n\tDirectional,\r\n\tSpot,\r\n\tPoint\r\n}\r\n\r\n/**\r\n * <code>LightSprite</code> 类用于创建灯光的父类。\r\n */\r\nexport class LightSprite extends Sprite3D {\r\n\t/** 灯光烘培类型-实时。*/\r\n\tstatic LIGHTMAPBAKEDTYPE_REALTIME: number = 0;\r\n\t/** 灯光烘培类型-混合。*/\r\n\tstatic LIGHTMAPBAKEDTYPE_MIXED: number = 1;\r\n\t/** 灯光烘培类型-烘焙。*/\r\n\tstatic LIGHTMAPBAKEDTYPE_BAKED: number = 2;\r\n\r\n\t/** @internal */\r\n\tprotected _shadowMode: ShadowMode = ShadowMode.None;\r\n\r\n\t/** @internal */\r\n\t_isAlternate: boolean = false;\r\n\t/** @internal */\r\n\t_intensityColor: Vector3;\r\n\t/** @internal */\r\n\t_intensity: number;\r\n\t/** @internal */\r\n\t_shadowResolution: number = 2048;\r\n\t/** @internal */\r\n\t_shadowDistance: number = 50.0;\r\n\t/** @internal */\r\n\t_shadowDepthBias: number = 1.0;\r\n\t/** @internal */\r\n\t_shadowNormalBias: number = 1.0;\r\n\t/** @internal */\r\n\t_shadowNearPlane: number = 0.1;\r\n\t/** @internal */\r\n\t_shadowStrength: number = 1.0;\r\n\t/** @internal */\r\n\t_lightmapBakedType: number;\r\n\t/** @internal */\r\n\t_lightType: LightType;\r\n\r\n\t/** 灯光颜色。 */\r\n\tcolor: Vector3;\r\n\r\n\t/**\r\n\t * 灯光强度。\r\n\t */\r\n\tget intensity(): number {\r\n\t\treturn this._intensity;\r\n\t}\r\n\r\n\tset intensity(value: number) {\r\n\t\tthis._intensity = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影模式。\r\n\t */\r\n\tget shadowMode(): ShadowMode {\r\n\t\treturn this._shadowMode;\r\n\t}\r\n\r\n\tset shadowMode(value: ShadowMode) {\r\n\t\tthis._shadowMode = value\r\n\t}\r\n\r\n\t/**\r\n\t * 最大阴影距离。\r\n\t */\r\n\tget shadowDistance(): number {\r\n\t\treturn this._shadowDistance;\r\n\t}\r\n\r\n\tset shadowDistance(value: number) {\r\n\t\tthis._shadowDistance = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影贴图分辨率。\r\n\t */\r\n\tget shadowResolution(): number {\r\n\t\treturn this._shadowResolution;\r\n\t}\r\n\r\n\tset shadowResolution(value: number) {\r\n\t\tthis._shadowResolution = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影深度偏差。\r\n\t */\r\n\tget shadowDepthBias(): number {\r\n\t\treturn this._shadowDepthBias;\r\n\t}\r\n\r\n\tset shadowDepthBias(value: number) {\r\n\t\tthis._shadowDepthBias = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影法线偏差。\r\n\t */\r\n\tget shadowNormalBias(): number {\r\n\t\treturn this._shadowNormalBias;\r\n\t}\r\n\r\n\tset shadowNormalBias(value: number) {\r\n\t\tthis._shadowNormalBias = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影强度。\r\n\t */\r\n\tget shadowStrength(): number {\r\n\t\treturn this._shadowStrength;\r\n\t}\r\n\r\n\tset shadowStrength(value: number) {\r\n\t\tthis._shadowStrength = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影视锥的近裁面。\r\n\t */\r\n\tget shadowNearPlane(): number {\r\n\t\treturn this._shadowNearPlane;\r\n\t}\r\n\r\n\tset shadowNearPlane(value: number) {\r\n\t\tthis._shadowNearPlane = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 灯光烘培类型。\r\n\t */\r\n\tget lightmapBakedType(): number {\r\n\t\treturn this._lightmapBakedType;\r\n\t}\r\n\r\n\tset lightmapBakedType(value: number) {\r\n\t\tif (this._lightmapBakedType !== value) {\r\n\t\t\tthis._lightmapBakedType = value;\r\n\t\t\tif (this.activeInHierarchy) {\r\n\t\t\t\tif (value !== LightSprite.LIGHTMAPBAKEDTYPE_BAKED)\r\n\t\t\t\t\tthis._addToScene();\r\n\t\t\t\telse\r\n\t\t\t\t\tthis._removeFromScene();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>LightSprite</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._intensity = 1.0;\r\n\t\tthis._intensityColor = new Vector3();\r\n\t\tthis.color = new Vector3(1.0, 1.0, 1.0);\r\n\t\tthis._lightmapBakedType = LightSprite.LIGHTMAPBAKEDTYPE_REALTIME;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tvar colorData: any[] = data.color;\r\n\t\tthis.color.fromArray(colorData);\r\n\t\tthis.intensity = data.intensity;\r\n\t\tthis.lightmapBakedType = data.lightmapBakedType;\r\n\r\n\t\t//--- LT新增开始\r\n\r\n\t\t(data.shadowMode != undefined) && (this.shadowMode = data.shadowMode);\r\n\t\t(data.shadowStrength != undefined) && (this.shadowStrength = data.shadowStrength);\r\n\t\t(data.shadowDistance != undefined) && (this.shadowDistance = data.shadowDistance);\r\n\t\t(data.shadowNearPlane != undefined) && (this.shadowNearPlane = data.shadowNearPlane);\r\n\t\t(data.shadowResolution != undefined) && (this.shadowResolution = data.shadowResolution);\r\n\r\n\t\t//--- LT新增结束\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _addToScene(): void {\r\n\t\tvar scene: Scene3D = <Scene3D>this._scene;\r\n\t\tvar maxLightCount: number = Config3D._config.maxLightCount;\r\n\t\tif (scene._lightCount < maxLightCount) {\r\n\t\t\tscene._lightCount++;\r\n\t\t\tthis._addToLightQueue();\r\n\t\t\tthis._isAlternate = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tscene._alternateLights.add(this);\r\n\t\t\tthis._isAlternate = true;\r\n\t\t\tconsole.warn(\"LightSprite:light count has large than maxLightCount,the latest added light will be ignore.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _removeFromScene(): void {\r\n\t\tvar scene: Scene3D = <Scene3D>this._scene;\r\n\t\tif (this._isAlternate) {\r\n\t\t\tscene._alternateLights.remove(this);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tscene._lightCount--;\r\n\t\t\tthis._removeFromLightQueue();\r\n\t\t\tif (scene._alternateLights._length > 0) {\r\n\t\t\t\tvar alternateLight: LightSprite = scene._alternateLights.shift();\r\n\t\t\t\talternateLight._addToLightQueue();\r\n\t\t\t\talternateLight._isAlternate = false;\r\n\t\t\t\tscene._lightCount++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _addToLightQueue(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _removeFromLightQueue(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onActive(): void {\r\n\t\tsuper._onActive();\r\n\t\t(this.lightmapBakedType !== LightSprite.LIGHTMAPBAKEDTYPE_BAKED) && (this._addToScene());\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onInActive(): void {\r\n\t\tsuper._onInActive();\r\n\t\t(this.lightmapBakedType !== LightSprite.LIGHTMAPBAKEDTYPE_BAKED) && (this._removeFromScene());\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new LightSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * please use color property instead.\r\n\t */\r\n\tget diffuseColor(): Vector3 {\r\n\t\tconsole.log(\"LightSprite: discard property,please use color property instead.\");\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\tset diffuseColor(value: Vector3) {\r\n\t\tconsole.log(\"LightSprite: discard property,please use color property instead.\");\r\n\t\tthis.color = value;\r\n\t}\r\n}\r\n\r\n","/**\r\n * 阴影得级联模式。\r\n */\r\nexport enum ShadowCascadesMode {\r\n    /** 无级联。 */\r\n    NoCascades,\r\n    /** 二级级联。 */\r\n    TwoCascades,\r\n    /** 四级级联。 */\r\n    FourCascades,\r\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { FilterMode } from \"../../../resource/FilterMode\";\r\nimport { RenderTextureDepthFormat, RenderTextureFormat } from \"../../../resource/RenderTextureFormat\";\r\nimport { WarpMode } from \"../../../resource/WrapMode\";\r\nimport { BoundFrustum, FrustumCorner } from \"../../math/BoundFrustum\";\r\nimport { BoundSphere } from \"../../math/BoundSphere\";\r\nimport { MathUtils3D } from \"../../math/MathUtils3D\";\r\nimport { Matrix4x4 } from \"../../math/Matrix4x4\";\r\nimport { Plane } from \"../../math/Plane\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { RenderTexture } from \"../../resource/RenderTexture\";\r\nimport { ShadowSliceData, ShadowSpotData } from \"../../shadowMap/ShadowSliceData\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { DirectionLight } from \"./DirectionLight\";\r\nimport { LightSprite, LightType } from \"./LightSprite\";\r\nimport { ShadowCascadesMode } from \"./ShadowCascadesMode\";\r\nimport { ShadowMode } from \"./ShadowMode\";\r\nimport { SpotLight } from \"./SpotLight\";\r\nimport { SystemUtils } from \"../../../webgl/SystemUtils\";\r\n\r\n/**\r\n * @internal\r\n */\r\nenum FrustumFace {\r\n    Near = 0,\r\n    Far = 1,\r\n    Left = 2,\r\n    Right = 3,\r\n    Bottom = 4,\r\n    Top = 5,\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ShadowUtils {\r\n    /** @internal */\r\n    private static _tempMatrix0: Matrix4x4 = new Matrix4x4()\r\n\r\n\r\n    /** @internal */\r\n    private static _shadowMapScaleOffsetMatrix: Matrix4x4 = new Matrix4x4(\r\n        0.5, 0.0, 0.0, 0.0,\r\n        0.0, 0.5, 0.0, 0.0,\r\n        0.0, 0.0, 1.0, 0.0,\r\n        0.5, 0.5, 0.0, 1.0,\r\n    );\r\n    /** @internal */\r\n    private static _shadowTextureFormat: RenderTextureFormat;\r\n    /** @internal */\r\n    private static _frustumCorners: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];\r\n    /** @internal */\r\n    private static _adjustNearPlane: Plane = new Plane(new Vector3());\r\n    /** @internal */\r\n    private static _adjustFarPlane: Plane = new Plane(new Vector3());\r\n    /** @internal */\r\n    private static _backPlaneFaces: FrustumFace[] = new Array(5);\r\n    /** @internal */\r\n    private static _edgePlanePoint2: Vector3 = new Vector3();\r\n\r\n    /** @internal */\r\n    private static _frustumPlaneNeighbors: FrustumFace[][] = [\r\n        [FrustumFace.Left, FrustumFace.Right, FrustumFace.Top, FrustumFace.Bottom],// near\r\n        [FrustumFace.Left, FrustumFace.Right, FrustumFace.Top, FrustumFace.Bottom],// far\r\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Top, FrustumFace.Bottom],// left\r\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Top, FrustumFace.Bottom],// right\r\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Left, FrustumFace.Right],// bottom\r\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Left, FrustumFace.Right]];// top\r\n\r\n    /** @internal */\r\n    private static _frustumTwoPlaneCorners: FrustumCorner[][][] = [\r\n        [[FrustumCorner.unknown, FrustumCorner.unknown]/* near */, [FrustumCorner.unknown, FrustumCorner.unknown]/* far */, [FrustumCorner.nearBottomLeft, FrustumCorner.nearTopLeft]/* left */, [FrustumCorner.nearTopRight, FrustumCorner.nearBottomRight]/* right */, [FrustumCorner.nearBottomRight, FrustumCorner.nearBottomLeft]/* bottom */, [FrustumCorner.nearTopLeft, FrustumCorner.nearTopRight]/* top */],// near\r\n        [[FrustumCorner.unknown, FrustumCorner.unknown]/* near */, [FrustumCorner.unknown, FrustumCorner.unknown]/* far */, [FrustumCorner.FarTopLeft, FrustumCorner.FarBottomLeft]/* left */, [FrustumCorner.FarBottomRight, FrustumCorner.FarTopRight]/* right */, [FrustumCorner.FarBottomLeft, FrustumCorner.FarBottomRight]/* bottom */, [FrustumCorner.FarTopRight, FrustumCorner.FarTopLeft]/* top */],// far\r\n        [[FrustumCorner.nearTopLeft, FrustumCorner.nearBottomLeft]/* near */, [FrustumCorner.FarBottomLeft, FrustumCorner.FarTopLeft]/* far */, [FrustumCorner.unknown, FrustumCorner.unknown]/* left */, [FrustumCorner.unknown, FrustumCorner.unknown]/* right */, [FrustumCorner.nearBottomLeft, FrustumCorner.FarBottomLeft]/* bottom */, [FrustumCorner.FarTopLeft, FrustumCorner.nearTopLeft]/* top */],// left\r\n        [[FrustumCorner.nearBottomRight, FrustumCorner.nearTopRight]/* near */, [FrustumCorner.FarTopRight, FrustumCorner.FarBottomRight]/* far */, [FrustumCorner.unknown, FrustumCorner.unknown]/* left */, [FrustumCorner.unknown, FrustumCorner.unknown]/* right */, [FrustumCorner.FarBottomRight, FrustumCorner.nearBottomRight]/* bottom */, [FrustumCorner.nearTopRight, FrustumCorner.FarTopRight]/* top */],// right\r\n        [[FrustumCorner.nearBottomLeft, FrustumCorner.nearBottomRight]/* near */, [FrustumCorner.FarBottomRight, FrustumCorner.FarBottomLeft]/* far */, [FrustumCorner.FarBottomLeft, FrustumCorner.nearBottomLeft]/* left */, [FrustumCorner.nearBottomRight, FrustumCorner.FarBottomRight]/* right */, [FrustumCorner.unknown, FrustumCorner.unknown]/* bottom */, [FrustumCorner.unknown, FrustumCorner.unknown]/* top */],// bottom\r\n        [[FrustumCorner.nearTopRight, FrustumCorner.nearTopLeft]/* near */, [FrustumCorner.FarTopLeft, FrustumCorner.FarTopRight]/* far */, [FrustumCorner.nearTopLeft, FrustumCorner.FarTopLeft]/* left */, [FrustumCorner.FarTopRight, FrustumCorner.nearTopRight], [FrustumCorner.unknown/* right */, FrustumCorner.unknown]/* bottom */, [FrustumCorner.unknown, FrustumCorner.unknown]/* top */]// top\r\n    ];\r\n\r\n    /** @internal */\r\n    static readonly atlasBorderSize: number = 4.0;//now max shadow sample tent is 5x5,atlas borderSize at leate 3=ceil(2.5),and +1 pixle is for global border for no cascade mode.\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    static supportShadow(): boolean {\r\n        return LayaGL.layaGPUInstance._isWebGL2 || SystemUtils.supportRenderTextureFormat(RenderTextureFormat.Depth);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static init(): void {\r\n        //some const value,only init once here.\r\n        if (LayaGL.layaGPUInstance._isWebGL2)\r\n            ShadowUtils._shadowTextureFormat = RenderTextureFormat.ShadowMap;\r\n        else\r\n            ShadowUtils._shadowTextureFormat = RenderTextureFormat.Depth;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static getTemporaryShadowTexture(witdh: number, height: number, depthFormat: RenderTextureDepthFormat): RenderTexture {\r\n        var shadowMap: RenderTexture = RenderTexture.createFromPool(witdh, height, ShadowUtils._shadowTextureFormat, depthFormat);\r\n        shadowMap.filterMode = FilterMode.Bilinear;\r\n        shadowMap.wrapModeU = WarpMode.Clamp;\r\n        shadowMap.wrapModeV = WarpMode.Clamp;\r\n        return shadowMap;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static getShadowBias(light: LightSprite, shadowProjectionMatrix: Matrix4x4, shadowResolution: number, out: Vector4): void {\r\n        var frustumSize: number;\r\n        if (light._lightType == LightType.Directional) {\r\n            // Frustum size is guaranteed to be a cube as we wrap shadow frustum around a sphere\r\n            // elements[0] = 2.0 / (right - left)\r\n            frustumSize = 2.0 / shadowProjectionMatrix.elements[0];\r\n        }\r\n        else if (light._lightType == LightType.Spot) {\r\n            // For perspective projections, shadow texel size varies with depth\r\n            // It will only work well if done in receiver side in the pixel shader. Currently We\r\n            // do bias on caster side in vertex shader. When we add shader quality tiers we can properly\r\n            // handle this. For now, as a poor approximation we do a constant bias and compute the size of\r\n            // the frustum as if it was orthogonal considering the size at mid point between near and far planes.\r\n            // Depending on how big the light range is, it will be good enough with some tweaks in bias\r\n            frustumSize = Math.tan((<SpotLight>light).spotAngle * 0.5 * MathUtils3D.Deg2Rad) * (<SpotLight>light).range;\r\n        }\r\n        else {\r\n            console.warn(\"ShadowUtils:Only spot and directional shadow casters are supported now.\");\r\n            frustumSize = 0.0;\r\n        }\r\n\r\n        // depth and normal bias scale is in shadowmap texel size in world space\r\n        var texelSize: number = frustumSize / shadowResolution;\r\n        var depthBias: number = -light._shadowDepthBias * texelSize;\r\n        var normalBias: number = -light._shadowNormalBias * texelSize;\r\n\r\n        if (light.shadowMode == ShadowMode.SoftHigh) {\r\n            // TODO: depth and normal bias assume sample is no more than 1 texel away from shadowmap\r\n            // This is not true with PCF. Ideally we need to do either\r\n            // cone base bias (based on distance to center sample)\r\n            // or receiver place bias based on derivatives.\r\n            // For now we scale it by the PCF kernel size (5x5)\r\n            const kernelRadius: number = 2.5;\r\n            depthBias *= kernelRadius;\r\n            normalBias *= kernelRadius;\r\n        }\r\n        out.setValue(depthBias, normalBias, 0.0, 0.0);\r\n    }\r\n\r\n    /**\r\n\t * @internal\r\n\t */\r\n    static getCameraFrustumPlanes(cameraViewProjectMatrix: Matrix4x4, frustumPlanes: Plane[]): void {\r\n        BoundFrustum.getPlanesFromMatrix(cameraViewProjectMatrix, frustumPlanes[FrustumFace.Near], frustumPlanes[FrustumFace.Far], frustumPlanes[FrustumFace.Left], frustumPlanes[FrustumFace.Right], frustumPlanes[FrustumFace.Top], frustumPlanes[FrustumFace.Bottom]);\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    static getFarWithRadius(radius: number, denominator: number): number {\r\n        // use the frustum side as the radius and get the far distance form camera.\r\n        // var tFov: number = Math.tan(fov * 0.5);// get this the equation using Pythagorean\r\n        // return Math.sqrt(radius * radius / (1.0 + tFov * tFov * (aspectRatio * aspectRatio + 1.0)));\r\n        return Math.sqrt(radius * radius / denominator);\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    static getCascadesSplitDistance(twoSplitRatio: number, fourSplitRatio: Vector3, cameraNear: number, shadowFar: number, fov: number, aspectRatio: number, cascadesMode: ShadowCascadesMode, out: number[]): void {\r\n        out[0] = cameraNear;\r\n        var range: number = shadowFar - cameraNear;\r\n        var tFov: number = Math.tan(fov * 0.5);\r\n        var denominator: number = 1.0 + tFov * tFov * (aspectRatio * aspectRatio + 1.0);\r\n        switch (cascadesMode) {\r\n            case ShadowCascadesMode.NoCascades:\r\n                out[1] = ShadowUtils.getFarWithRadius(shadowFar, denominator);\r\n                break;\r\n            case ShadowCascadesMode.TwoCascades:\r\n                out[1] = ShadowUtils.getFarWithRadius(cameraNear + range * twoSplitRatio, denominator);\r\n                out[2] = ShadowUtils.getFarWithRadius(shadowFar, denominator);\r\n                break;\r\n            case ShadowCascadesMode.FourCascades:\r\n                out[1] = ShadowUtils.getFarWithRadius(cameraNear + range * fourSplitRatio.x, denominator);\r\n                out[2] = ShadowUtils.getFarWithRadius(cameraNear + range * fourSplitRatio.y, denominator);\r\n                out[3] = ShadowUtils.getFarWithRadius(cameraNear + range * fourSplitRatio.z, denominator);\r\n                out[4] = ShadowUtils.getFarWithRadius(shadowFar, denominator);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n\t * @internal\r\n\t */\r\n    static applySliceTransform(shadowSliceData: ShadowSliceData, atlasWidth: number, atlasHeight: number, cascadeIndex: number, outShadowMatrices: Float32Array): void {\r\n        // Apply shadow slice scale and offset\r\n        var sliceE: Float32Array = ShadowUtils._tempMatrix0.elements;\r\n        var oneOverAtlasWidth: number = 1.0 / atlasWidth;\r\n        var oneOverAtlasHeight: number = 1.0 / atlasHeight;\r\n\r\n        sliceE[0] = shadowSliceData.resolution * oneOverAtlasWidth;//scale\r\n        sliceE[5] = shadowSliceData.resolution * oneOverAtlasHeight;\r\n        sliceE[12] = shadowSliceData.offsetX * oneOverAtlasWidth;//offset\r\n        sliceE[13] = shadowSliceData.offsetY * oneOverAtlasHeight;\r\n        sliceE[1] = sliceE[2] = sliceE[2] = sliceE[4] = sliceE[6] = sliceE[7] = sliceE[8] = sliceE[9] = sliceE[11] = sliceE[14] = 0;\r\n        sliceE[10] = sliceE[15] = 1;\r\n\r\n        var offset: number = cascadeIndex * 16;\r\n        Utils3D._mulMatrixArray(sliceE, outShadowMatrices, offset, outShadowMatrices, offset);\r\n    }\r\n\r\n\r\n    /**\r\n\t * @internal\r\n\t */\r\n    static getDirectionLightShadowCullPlanes(cameraFrustumPlanes: Array<Plane>, cascadeIndex: number, splitDistance: number[], cameraNear: number, direction: Vector3, shadowSliceData: ShadowSliceData): void {\r\n        // http://lspiroengine.com/?p=187\r\n        var frustumCorners: Vector3[] = ShadowUtils._frustumCorners;\r\n        var backPlaneFaces: FrustumFace[] = ShadowUtils._backPlaneFaces;\r\n        var planeNeighbors: FrustumFace[][] = ShadowUtils._frustumPlaneNeighbors;\r\n        var twoPlaneCorners: FrustumCorner[][][] = ShadowUtils._frustumTwoPlaneCorners;\r\n        var edgePlanePoint2: Vector3 = ShadowUtils._edgePlanePoint2;\r\n        var out: Plane[] = shadowSliceData.cullPlanes;\r\n\r\n        // cameraFrustumPlanes is share\r\n        var near: Plane = cameraFrustumPlanes[FrustumFace.Near], far: Plane = cameraFrustumPlanes[FrustumFace.Far];\r\n        var left: Plane = cameraFrustumPlanes[FrustumFace.Left], right: Plane = cameraFrustumPlanes[FrustumFace.Right];\r\n        var bottom: Plane = cameraFrustumPlanes[FrustumFace.Bottom], top: Plane = cameraFrustumPlanes[FrustumFace.Top];\r\n\r\n        // adjustment the near/far plane\r\n        var splitNearDistance: number = splitDistance[cascadeIndex] - cameraNear;\r\n        var splitNear: Plane = ShadowUtils._adjustNearPlane;\r\n        var splitFar: Plane = ShadowUtils._adjustFarPlane;\r\n        near.normal.cloneTo(splitNear.normal);\r\n        far.normal.cloneTo(splitFar.normal);\r\n        splitNear.distance = near.distance - splitNearDistance;\r\n        splitFar.distance = Math.min(-near.distance + shadowSliceData.sphereCenterZ + shadowSliceData.splitBoundSphere.radius, far.distance);//do a clamp is the sphere is out of range the far plane\r\n\r\n        BoundFrustum.get3PlaneInterPoint(splitNear, bottom, right, frustumCorners[FrustumCorner.nearBottomRight]);\r\n        BoundFrustum.get3PlaneInterPoint(splitNear, top, right, frustumCorners[FrustumCorner.nearTopRight]);\r\n        BoundFrustum.get3PlaneInterPoint(splitNear, top, left, frustumCorners[FrustumCorner.nearTopLeft]);\r\n        BoundFrustum.get3PlaneInterPoint(splitNear, bottom, left, frustumCorners[FrustumCorner.nearBottomLeft]);\r\n        BoundFrustum.get3PlaneInterPoint(splitFar, bottom, right, frustumCorners[FrustumCorner.FarBottomRight]);\r\n        BoundFrustum.get3PlaneInterPoint(splitFar, top, right, frustumCorners[FrustumCorner.FarTopRight]);\r\n        BoundFrustum.get3PlaneInterPoint(splitFar, top, left, frustumCorners[FrustumCorner.FarTopLeft]);\r\n        BoundFrustum.get3PlaneInterPoint(splitFar, bottom, left, frustumCorners[FrustumCorner.FarBottomLeft]);\r\n\r\n        var backIndex: number = 0;\r\n        for (var i: FrustumFace = 0; i < 6; i++) {// meybe 3、4、5(light eye is at far, forward is near, or orth camera is any axis)\r\n            var plane: Plane;\r\n            switch (i) {\r\n                case FrustumFace.Near:\r\n                    plane = splitNear;\r\n                    break;\r\n                case FrustumFace.Far:\r\n                    plane = splitFar;\r\n                    break;\r\n                default:\r\n                    plane = cameraFrustumPlanes[i];\r\n                    break;\r\n            }\r\n            if (Vector3.dot(plane.normal, direction) < 0.0) {\r\n                plane.cloneTo(out[backIndex]);\r\n                backPlaneFaces[backIndex] = i;\r\n                backIndex++;\r\n            }\r\n        }\r\n\r\n        var edgeIndex: number = backIndex;\r\n        for (var i: FrustumFace = 0; i < backIndex; i++) {\r\n            var backFace: FrustumFace = backPlaneFaces[i];\r\n            var neighborFaces: Array<FrustumFace> = planeNeighbors[backFace];\r\n            for (var j: number = 0; j < 4; j++) {\r\n                var neighborFace: FrustumFace = neighborFaces[j];\r\n                var notBackFace: boolean = true;\r\n                for (var k: number = 0; k < backIndex; k++)\r\n                    if (neighborFace == backPlaneFaces[k]) {\r\n                        notBackFace = false;\r\n                        break;\r\n                    }\r\n                if (notBackFace) {\r\n                    var corners: Array<FrustumCorner> = twoPlaneCorners[backFace][neighborFace];\r\n                    var point0: Vector3 = frustumCorners[corners[0]];\r\n                    var point1: Vector3 = frustumCorners[corners[1]];\r\n                    Vector3.add(point0, direction, edgePlanePoint2);\r\n                    Plane.createPlaneBy3P(point0, point1, edgePlanePoint2, out[edgeIndex++]);\r\n                }\r\n            }\r\n        }\r\n        shadowSliceData.cullPlaneCount = edgeIndex;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static getBoundSphereByFrustum(near: number, far: number, fov: number, aspectRatio: number, cameraPos: Vector3, forward: Vector3, outBoundSphere: BoundSphere): number {\r\n        // https://lxjk.github.io/2017/04/15/Calculate-Minimal-Bounding-Sphere-of-Frustum.html\r\n        var centerZ: number;\r\n        var radius: number;\r\n        var k: number = Math.sqrt(1.0 + aspectRatio * aspectRatio) * Math.tan(fov / 2.0);\r\n        var k2: number = k * k;\r\n        var farSNear: number = far - near;\r\n        var farANear: number = far + near;\r\n        if (k2 > farSNear / farANear) {\r\n            centerZ = far;\r\n            radius = far * k;\r\n        }\r\n        else {\r\n            centerZ = 0.5 * farANear * (1 + k2);\r\n            radius = 0.5 * Math.sqrt(farSNear * farSNear + 2.0 * (far * far + near * near) * k2 + farANear * farANear * k2 * k2);\r\n        }\r\n\r\n        var center: Vector3 = outBoundSphere.center;\r\n        outBoundSphere.radius = radius;\r\n        Vector3.scale(forward, centerZ, center);\r\n        Vector3.add(cameraPos, center, center);\r\n        return centerZ;\r\n    }\r\n\r\n    /**\r\n     * @inernal\r\n     */\r\n    static getMaxTileResolutionInAtlas(atlasWidth: number, atlasHeight: number, tileCount: number): number {\r\n        var resolution: number = Math.min(atlasWidth, atlasHeight);\r\n        var currentTileCount: number = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);\r\n        while (currentTileCount < tileCount) {\r\n            resolution = Math.floor(resolution >> 1);\r\n            currentTileCount = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);\r\n        }\r\n        return resolution;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static getDirectionalLightMatrices(lightUp: Vector3, lightSide: Vector3, lightForward: Vector3, cascadeIndex: number, nearPlane: number, shadowResolution: number, shadowSliceData: ShadowSliceData, shadowMatrices: Float32Array): void {\r\n        var boundSphere: BoundSphere = shadowSliceData.splitBoundSphere;\r\n\r\n        // To solve shdow swimming problem.\r\n        var center: Vector3 = boundSphere.center;\r\n        var radius: number = boundSphere.radius;\r\n        var halfShadowResolution: number = shadowResolution / 2;\r\n        // Add border to prject edge pixel PCF.\r\n        // Improve:the clip planes not conside the border,but I think is OK,because the object can clip is not continuous.\r\n        var borderRadius: number = radius * halfShadowResolution / (halfShadowResolution - ShadowUtils.atlasBorderSize);\r\n        var borderDiam: number = borderRadius * 2.0;\r\n        var sizeUnit: number = shadowResolution / borderDiam;\r\n        var radiusUnit: number = borderDiam / shadowResolution;\r\n        var upLen: number = Math.ceil(Vector3.dot(center, lightUp) * sizeUnit) * radiusUnit;\r\n        var sideLen: number = Math.ceil(Vector3.dot(center, lightSide) * sizeUnit) * radiusUnit;\r\n        var forwardLen: number = Vector3.dot(center, lightForward);\r\n        center.x = lightUp.x * upLen + lightSide.x * sideLen + lightForward.x * forwardLen;\r\n        center.y = lightUp.y * upLen + lightSide.y * sideLen + lightForward.y * forwardLen;\r\n        center.z = lightUp.z * upLen + lightSide.z * sideLen + lightForward.z * forwardLen;\r\n\r\n        // Direction light use shadow pancaking tech,do special dispose with nearPlane.\r\n        var origin: Vector3 = shadowSliceData.position;\r\n        var viewMatrix: Matrix4x4 = shadowSliceData.viewMatrix;\r\n        var projectMatrix: Matrix4x4 = shadowSliceData.projectionMatrix;\r\n        var viewProjectMatrix: Matrix4x4 = shadowSliceData.viewProjectMatrix;\r\n\r\n        shadowSliceData.resolution = shadowResolution;\r\n        shadowSliceData.offsetX = (cascadeIndex % 2) * shadowResolution;\r\n        shadowSliceData.offsetY = Math.floor(cascadeIndex / 2) * shadowResolution;\r\n\r\n        Vector3.scale(lightForward, radius + nearPlane, origin);\r\n        Vector3.subtract(center, origin, origin);\r\n        Matrix4x4.createLookAt(origin, center, lightUp, viewMatrix);\r\n        Matrix4x4.createOrthoOffCenter(- borderRadius, borderRadius, - borderRadius, borderRadius, 0.0, radius * 2.0 + nearPlane, projectMatrix);\r\n        Matrix4x4.multiply(projectMatrix, viewMatrix, viewProjectMatrix);\r\n        Utils3D._mulMatrixArray(ShadowUtils._shadowMapScaleOffsetMatrix.elements, viewProjectMatrix.elements, 0, shadowMatrices, cascadeIndex * 16);\r\n    }\r\n\r\n    /** \r\n    * @internal\r\n    */\r\n   static getSpotLightShadowData(shadowSpotData:ShadowSpotData,spotLight:SpotLight,resolution:number,shadowParams:Vector4,shadowSpotMatrices:Matrix4x4,shadowMapSize:Vector4)\r\n   {\r\n        var out:Vector3 = shadowSpotData.position = spotLight.transform.position;\r\n        shadowSpotData.resolution = resolution;\r\n        shadowMapSize.setValue(1.0 / resolution, 1.0 / resolution, resolution, resolution);\r\n        shadowSpotData.offsetX = 0;\r\n        shadowSpotData.offsetY = 0;\r\n\r\n        var spotWorldMatrix:Matrix4x4 = spotLight.transform.worldMatrix \r\n        var viewMatrix: Matrix4x4 = shadowSpotData.viewMatrix;\r\n        var projectMatrix: Matrix4x4 = shadowSpotData.projectionMatrix;\r\n        var viewProjectMatrix: Matrix4x4 = shadowSpotData.viewProjectMatrix;\r\n        var BoundFrustum:BoundFrustum = shadowSpotData.cameraCullInfo.boundFrustum;\r\n        spotWorldMatrix.invert(viewMatrix);\r\n        Matrix4x4.createPerspective(3.1416*spotLight.spotAngle / 180.0,1,0.1,spotLight.range,projectMatrix);\r\n        shadowParams.y = spotLight.shadowStrength;\r\n        Matrix4x4.multiply(projectMatrix,viewMatrix,viewProjectMatrix);\r\n        BoundFrustum.matrix = viewProjectMatrix;\r\n        viewProjectMatrix.cloneTo(shadowSpotMatrices);\r\n        shadowSpotData.cameraCullInfo.position = out;\r\n   }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static prepareShadowReceiverShaderValues(light: DirectionLight, shadowMapWidth: number, shadowMapHeight: number, shadowSliceDatas: ShadowSliceData[], cascadeCount: number, shadowMapSize: Vector4, shadowParams: Vector4, shadowMatrices: Float32Array, splitBoundSpheres: Float32Array): void {\r\n        shadowMapSize.setValue(1.0 / shadowMapWidth, 1.0 / shadowMapHeight, shadowMapWidth, shadowMapHeight);\r\n        shadowParams.setValue(light._shadowStrength, 0.0, 0.0, 0.0);\r\n        if (cascadeCount > 1) {\r\n            const matrixFloatCount: number = 16;\r\n            for (var i: number = cascadeCount * matrixFloatCount, n: number = 4 * matrixFloatCount; i < n; i++)//the last matrix is always ZERO\r\n                shadowMatrices[i] = 0.0;//set Matrix4x4.ZERO to project the cascade index is 4\r\n\r\n            for (var i: number = 0; i < cascadeCount; i++) {\r\n                var boundSphere: BoundSphere = shadowSliceDatas[i].splitBoundSphere;\r\n                var center: Vector3 = boundSphere.center;\r\n                var radius: number = boundSphere.radius;\r\n                var offset: number = i * 4;\r\n                splitBoundSpheres[offset] = center.x;\r\n                splitBoundSpheres[offset + 1] = center.y;\r\n                splitBoundSpheres[offset + 2] = center.z;\r\n                splitBoundSpheres[offset + 3] = radius * radius;\r\n            }\r\n            const sphereFloatCount: number = 4;\r\n            for (var i: number = cascadeCount * sphereFloatCount, n: number = 4 * sphereFloatCount; i < n; i++)\r\n                splitBoundSpheres[i] = 0.0;//set Matrix4x4.ZERO to project the cascade index is 4\r\n        }\r\n    }\r\n}","import { Config3D } from \"../../../Config3D\";\r\nimport { Laya } from \"../../../Laya\";\r\nimport { Node } from \"../../display/Node\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Render } from \"../../renders/Render\";\r\nimport { FilterMode } from \"../../resource/FilterMode\";\r\nimport { RenderTextureDepthFormat, RenderTextureFormat } from \"../../resource/RenderTextureFormat\";\r\nimport { SystemUtils } from \"../../webgl/SystemUtils\";\r\nimport { WebGLContext } from \"../../webgl/WebGLContext\";\r\nimport { PostProcess } from \"../component/PostProcess\";\r\nimport { Cluster } from \"../graphics/renderPath/Cluster\";\r\nimport { BoundFrustum } from \"../math/BoundFrustum\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Plane } from \"../math/Plane\";\r\nimport { Ray } from \"../math/Ray\";\r\nimport { Vector2 } from \"../math/Vector2\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Vector4 } from \"../math/Vector4\";\r\nimport { Viewport } from \"../math/Viewport\";\r\nimport { RenderTexture } from \"../resource/RenderTexture\";\r\nimport { Shader3D } from \"../shader/Shader3D\";\r\nimport { ShaderData } from \"../shader/ShaderData\";\r\nimport { Picker } from \"../utils/Picker\";\r\nimport { BaseCamera } from \"./BaseCamera\";\r\nimport { DirectionLight } from \"./light/DirectionLight\";\r\nimport { ShadowMode } from \"./light/ShadowMode\";\r\nimport { BlitScreenQuadCMD } from \"./render/command/BlitScreenQuadCMD\";\r\nimport { CommandBuffer } from \"./render/command/CommandBuffer\";\r\nimport { RenderContext3D } from \"./render/RenderContext3D\";\r\nimport { Scene3D } from \"./scene/Scene3D\";\r\nimport { Scene3DShaderDeclaration } from \"./scene/Scene3DShaderDeclaration\";\r\nimport { Transform3D } from \"./Transform3D\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\nimport { ShadowUtils } from \"./light/ShadowUtils\";\r\nimport { SpotLight } from \"./light/SpotLight\";\r\n\r\n/**\r\n * 相机清除标记。\r\n */\r\nexport enum CameraClearFlags {\r\n\t/**固定颜色。*/\r\n\tSolidColor = 0,\r\n\t/**天空。*/\r\n\tSky = 1,\r\n\t/**仅深度。*/\r\n\tDepthOnly = 2,\r\n\t/**不清除。*/\r\n\tNothing = 3\r\n}\r\n\r\n/**\r\n * <code>Camera</code> 类用于创建摄像机。\r\n */\r\nexport class Camera extends BaseCamera {\r\n\t/** @internal */\r\n\tstatic CAMERAEVENT_POSTPROCESS: number = 0;\r\n\r\n\t/** @internal */\r\n\tstatic _tempVector20: Vector2 = new Vector2();\r\n\r\n\t/** @internal */\r\n\tstatic _updateMark: number = 0;\r\n\r\n\t/** @internal */\r\n\tprivate _aspectRatio: number;\r\n\t/** @internal */\r\n\tprivate _viewport: Viewport;\r\n\t/** @internal */\r\n\tprivate _normalizedViewport: Viewport;\r\n\t/** @internal */\r\n\tprivate _viewMatrix: Matrix4x4;\r\n\t/** @internal */\r\n\tprivate _projectionMatrix: Matrix4x4;\r\n\t/** @internal */\r\n\tprivate _projectionViewMatrix: Matrix4x4;\r\n\t/** @internal */\r\n\tprivate _boundFrustum: BoundFrustum;\r\n\t/** @internal */\r\n\tprivate _updateViewMatrix: boolean = true;\r\n\t/** @internal */\r\n\tprivate _postProcess: PostProcess = null;\r\n\t/** @internal */\r\n\tprivate _enableHDR: boolean = false;\r\n\t/** @internal */\r\n\tprivate _viewportParams: Vector4 = new Vector4();\r\n\t/** @internal */\r\n\tprivate _projectionParams: Vector4 = new Vector4();\r\n\r\n\r\n\t/** @internal */\r\n\t_offScreenRenderTexture: RenderTexture = null;\r\n\t/** @internal */\r\n\t_internalRenderTexture: RenderTexture = null;\r\n\t/** @internal */\r\n\t_postProcessCommandBuffers: CommandBuffer[] = [];\r\n\t/** @internal */\r\n\t_clusterXPlanes: Vector3[];\r\n\t/** @internal */\r\n\t_clusterYPlanes: Vector3[];\r\n\t/** @internal */\r\n\t_clusterPlaneCacheFlag: Vector2 = new Vector2(-1, -1);\r\n\t/** @internal */\r\n\t_screenOffsetScale: Vector4 = new Vector4();\r\n\r\n\t/**是否允许渲染。*/\r\n\tenableRender: boolean = true;\r\n\t/**清除标记。*/\r\n\tclearFlag: CameraClearFlags = CameraClearFlags.SolidColor;\r\n\r\n\t/**\r\n\t * 横纵比。\r\n\t */\r\n\tget aspectRatio(): number {\r\n\t\tif (this._aspectRatio === 0) {\r\n\t\t\tvar vp: Viewport = this.viewport;\r\n\t\t\treturn vp.width / vp.height;\r\n\t\t}\r\n\t\treturn this._aspectRatio;\r\n\t}\r\n\r\n\tset aspectRatio(value: number) {\r\n\t\tif (value < 0)\r\n\t\t\tthrow new Error(\"Camera: the aspect ratio has to be a positive real number.\");\r\n\t\tthis._aspectRatio = value;\r\n\t\tthis._calculateProjectionMatrix();\r\n\t}\r\n\r\n\t/**\r\n\t * 获取屏幕像素坐标的视口。\r\n\t */\r\n\tget viewport(): Viewport {//TODO:优化\r\n\t\tif (this._offScreenRenderTexture)\r\n\t\t\tthis._calculationViewport(this._normalizedViewport, this._offScreenRenderTexture.width, this._offScreenRenderTexture.height);\r\n\t\telse\r\n\t\t\tthis._calculationViewport(this._normalizedViewport, RenderContext3D.clientWidth, RenderContext3D.clientHeight);//屏幕尺寸会动态变化,需要重置\r\n\t\treturn this._viewport;\r\n\t}\r\n\r\n\tset viewport(value: Viewport) {\r\n\t\tvar width: number;\r\n\t\tvar height: number;\r\n\t\tif (this._offScreenRenderTexture) {\r\n\t\t\twidth = this._offScreenRenderTexture.width;\r\n\t\t\theight = this._offScreenRenderTexture.height;\r\n\t\t} else {\r\n\t\t\twidth = RenderContext3D.clientWidth;\r\n\t\t\theight = RenderContext3D.clientHeight;\r\n\t\t}\r\n\t\tthis._normalizedViewport.x = value.x / width;\r\n\t\tthis._normalizedViewport.y = value.y / height;\r\n\t\tthis._normalizedViewport.width = value.width / width;\r\n\t\tthis._normalizedViewport.height = value.height / height;\r\n\t\tthis._calculationViewport(this._normalizedViewport, width, height);\r\n\t\tthis._calculateProjectionMatrix();\r\n\t}\r\n\r\n\t/**\r\n\t * 裁剪空间的视口。\r\n\t */\r\n\tget normalizedViewport(): Viewport {\r\n\t\treturn this._normalizedViewport;\r\n\t}\r\n\r\n\tset normalizedViewport(value: Viewport) {\r\n\t\tvar width: number;\r\n\t\tvar height: number;\r\n\t\tif (this._offScreenRenderTexture) {\r\n\t\t\twidth = this._offScreenRenderTexture.width;\r\n\t\t\theight = this._offScreenRenderTexture.height;\r\n\t\t} else {\r\n\t\t\twidth = RenderContext3D.clientWidth;\r\n\t\t\theight = RenderContext3D.clientHeight;\r\n\t\t}\r\n\t\tif (this._normalizedViewport !== value)\r\n\t\t\tvalue.cloneTo(this._normalizedViewport);\r\n\t\tthis._calculationViewport(value, width, height);\r\n\t\tthis._calculateProjectionMatrix();\r\n\t}\r\n\r\n\t/**\r\n\t * 获取视图矩阵。\r\n\t */\r\n\tget viewMatrix(): Matrix4x4 {\r\n\t\tif (this._updateViewMatrix) {\r\n\t\t\tvar scale: Vector3 = this.transform.getWorldLossyScale();\r\n\t\t\tvar scaleX: number = scale.x;\r\n\t\t\tvar scaleY: number = scale.y;\r\n\t\t\tvar scaleZ: number = scale.z;\r\n\t\t\tvar viewMatE: Float32Array = this._viewMatrix.elements;\r\n\r\n\t\t\tthis.transform.worldMatrix.cloneTo(this._viewMatrix)\r\n\t\t\tviewMatE[0] /= scaleX;//忽略缩放\r\n\t\t\tviewMatE[1] /= scaleX;\r\n\t\t\tviewMatE[2] /= scaleX;\r\n\t\t\tviewMatE[4] /= scaleY;\r\n\t\t\tviewMatE[5] /= scaleY;\r\n\t\t\tviewMatE[6] /= scaleY;\r\n\t\t\tviewMatE[8] /= scaleZ;\r\n\t\t\tviewMatE[9] /= scaleZ;\r\n\t\t\tviewMatE[10] /= scaleZ;\r\n\t\t\tthis._viewMatrix.invert(this._viewMatrix);\r\n\t\t\tthis._updateViewMatrix = false;\r\n\t\t}\r\n\t\treturn this._viewMatrix;\r\n\t}\r\n\r\n\t/**\r\n\t * 投影矩阵。\r\n\t */\r\n\tget projectionMatrix(): Matrix4x4 {\r\n\t\treturn this._projectionMatrix;\r\n\t}\r\n\r\n\tset projectionMatrix(value: Matrix4x4) {\r\n\t\tthis._projectionMatrix = value;\r\n\t\tthis._useUserProjectionMatrix = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取视图投影矩阵。\r\n\t */\r\n\tget projectionViewMatrix(): Matrix4x4 {\r\n\t\tMatrix4x4.multiply(this.projectionMatrix, this.viewMatrix, this._projectionViewMatrix);\r\n\t\treturn this._projectionViewMatrix;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取摄像机视锥。\r\n\t */\r\n\tget boundFrustum(): BoundFrustum {\r\n\t\tthis._boundFrustum.matrix = this.projectionViewMatrix;\r\n\t\tif (Render.supportWebGLPlusCulling) {\r\n\t\t\tvar near: Plane = this._boundFrustum.near;\r\n\t\t\tvar far: Plane = this._boundFrustum.far;\r\n\t\t\tvar left: Plane = this._boundFrustum.left;\r\n\t\t\tvar right: Plane = this._boundFrustum.right;\r\n\t\t\tvar top: Plane = this._boundFrustum.top;\r\n\t\t\tvar bottom: Plane = this._boundFrustum.bottom;\r\n\t\t\tvar nearNE: Vector3 = near.normal;\r\n\t\t\tvar farNE: Vector3 = far.normal;\r\n\t\t\tvar leftNE: Vector3 = left.normal;\r\n\t\t\tvar rightNE: Vector3 = right.normal;\r\n\t\t\tvar topNE: Vector3 = top.normal;\r\n\t\t\tvar bottomNE: Vector3 = bottom.normal;\r\n\t\t\tvar buffer: Float32Array = this._boundFrustumBuffer;\r\n\t\t\tbuffer[0] = nearNE.x, buffer[1] = nearNE.y, buffer[2] = nearNE.z, buffer[3] = near.distance;\r\n\t\t\tbuffer[4] = farNE.x, buffer[5] = farNE.y, buffer[6] = farNE.z, buffer[7] = far.distance;\r\n\t\t\tbuffer[8] = leftNE.x, buffer[9] = leftNE.y, buffer[10] = leftNE.z, buffer[11] = left.distance;\r\n\t\t\tbuffer[12] = rightNE.x, buffer[13] = rightNE.y, buffer[14] = rightNE.z, buffer[15] = right.distance;\r\n\t\t\tbuffer[16] = topNE.x, buffer[17] = topNE.y, buffer[18] = topNE.z, buffer[19] = top.distance;\r\n\t\t\tbuffer[20] = bottomNE.x, buffer[21] = bottomNE.y, buffer[22] = bottomNE.z, buffer[23] = bottom.distance;\r\n\t\t}\r\n\r\n\t\treturn this._boundFrustum;\r\n\t}\r\n\r\n\t/**\r\n\t * 自定义渲染场景的渲染目标。\r\n\t */\r\n\tget renderTarget(): RenderTexture {\r\n\t\treturn this._offScreenRenderTexture;\r\n\t}\r\n\r\n\tset renderTarget(value: RenderTexture) {\r\n\t\tvar lastValue: RenderTexture = this._offScreenRenderTexture;\r\n\t\tif (lastValue !== value) {\r\n\t\t\t(lastValue) && (lastValue._isCameraTarget = false);\r\n\t\t\t(value) && (value._isCameraTarget = true);\r\n\t\t\tthis._offScreenRenderTexture = value;\r\n\t\t\tthis._calculateProjectionMatrix();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 后期处理。\r\n\t */\r\n\tget postProcess(): PostProcess {\r\n\t\treturn this._postProcess;\r\n\t}\r\n\r\n\tset postProcess(value: PostProcess) {\r\n\t\tthis._postProcess = value;\r\n\t\tvar postProcessCommandBuffer: CommandBuffer = new CommandBuffer();\r\n\t\tthis.addCommandBuffer(Camera.CAMERAEVENT_POSTPROCESS, postProcessCommandBuffer);\r\n\t\tvalue._init(this, postProcessCommandBuffer);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否开启HDR。\r\n\t * 开启后对性能有一定影响。\r\n\t */\r\n\tget enableHDR(): boolean {\r\n\t\treturn this._enableHDR;\r\n\t}\r\n\r\n\tset enableHDR(value: boolean) {\r\n\t\tif (value && !SystemUtils.supportRenderTextureFormat(RenderTextureFormat.R16G16B16A16)) {\r\n\t\t\tconsole.warn(\"Camera:can't enable HDR in this device.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._enableHDR = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Camera</code> 实例。\r\n\t * @param\taspectRatio 横纵比。\r\n\t * @param\tnearPlane 近裁面。\r\n\t * @param\tfarPlane 远裁面。\r\n\t */\r\n\tconstructor(aspectRatio: number = 0, nearPlane: number = 0.3, farPlane: number = 1000) {\r\n\t\tsuper(nearPlane, farPlane);\r\n\t\tthis._viewMatrix = new Matrix4x4();\r\n\t\tthis._projectionMatrix = new Matrix4x4();\r\n\t\tthis._projectionViewMatrix = new Matrix4x4();\r\n\t\tthis._viewport = new Viewport(0, 0, 0, 0);\r\n\t\tthis._normalizedViewport = new Viewport(0, 0, 1, 1);\r\n\t\tthis._aspectRatio = aspectRatio;\r\n\t\tthis._boundFrustum = new BoundFrustum(new Matrix4x4());\r\n\t\tif (Render.supportWebGLPlusCulling)\r\n\t\t\tthis._boundFrustumBuffer = new Float32Array(24);\r\n\r\n\t\tthis._calculateProjectionMatrix();\r\n\t\tLaya.stage.on(Event.RESIZE, this, this._onScreenSizeChanged);\r\n\t\tthis.transform.on(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _calculationViewport(normalizedViewport: Viewport, width: number, height: number): void {\r\n\t\tvar lx: number = normalizedViewport.x * width;//不应限制x范围\r\n\t\tvar ly: number = normalizedViewport.y * height;//不应限制y范围\r\n\t\tvar rx: number = lx + Math.max(normalizedViewport.width * width, 0);\r\n\t\tvar ry: number = ly + Math.max(normalizedViewport.height * height, 0);\r\n\r\n\t\tvar ceilLeftX: number = Math.ceil(lx);\r\n\t\tvar ceilLeftY: number = Math.ceil(ly);\r\n\t\tvar floorRightX: number = Math.floor(rx);\r\n\t\tvar floorRightY: number = Math.floor(ry);\r\n\r\n\t\tvar pixelLeftX: number = ceilLeftX - lx >= 0.5 ? Math.floor(lx) : ceilLeftX;\r\n\t\tvar pixelLeftY: number = ceilLeftY - ly >= 0.5 ? Math.floor(ly) : ceilLeftY;\r\n\t\tvar pixelRightX: number = rx - floorRightX >= 0.5 ? Math.ceil(rx) : floorRightX;\r\n\t\tvar pixelRightY: number = ry - floorRightY >= 0.5 ? Math.ceil(ry) : floorRightY;\r\n\r\n\t\tthis._viewport.x = pixelLeftX;\r\n\t\tthis._viewport.y = pixelLeftY;\r\n\t\tthis._viewport.width = pixelRightX - pixelLeftX;\r\n\t\tthis._viewport.height = pixelRightY - pixelLeftY;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _calculateProjectionMatrix(): void {\r\n\t\tif (!this._useUserProjectionMatrix) {\r\n\t\t\tif (this._orthographic) {\r\n\t\t\t\tvar halfHeight: number = this.orthographicVerticalSize * 0.5;\r\n\t\t\t\tvar halfWidth: number = halfHeight * this.aspectRatio;\r\n\t\t\t\tMatrix4x4.createOrthoOffCenter(-halfWidth, halfWidth, -halfHeight, halfHeight, this.nearPlane, this.farPlane, this._projectionMatrix);\r\n\t\t\t} else {\r\n\t\t\t\tMatrix4x4.createPerspective(3.1416 * this.fieldOfView / 180.0, this.aspectRatio, this.nearPlane, this.farPlane, this._projectionMatrix);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\t通过蒙版值获取蒙版是否显示。\r\n\t * \t@param  layer 层。\r\n\t * \t@return 是否显示。\r\n\t */\r\n\t_isLayerVisible(layer: number): boolean {\r\n\t\treturn (Math.pow(2, layer) & this.cullingMask) != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_onTransformChanged(flag: number): void {\r\n\t\tflag &= Transform3D.TRANSFORM_WORLDMATRIX;//过滤有用TRANSFORM标记\r\n\t\t(flag) && (this._updateViewMatrix = true);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tvar clearFlagData: any = data.clearFlag;\r\n\t\t(clearFlagData !== undefined) && (this.clearFlag = clearFlagData);\r\n\t\tvar viewport: any[] = data.viewport;\r\n\t\tthis.normalizedViewport = new Viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\r\n\t\tvar enableHDR: boolean = data.enableHDR;\r\n\t\t(enableHDR !== undefined) && (this.enableHDR = enableHDR);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getCanvasWidth(): number {\r\n\t\tif (this._offScreenRenderTexture)\r\n\t\t\treturn this._offScreenRenderTexture.width;\r\n\t\telse\r\n\t\t\treturn RenderContext3D.clientWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getCanvasHeight(): number {\r\n\t\tif (this._offScreenRenderTexture)\r\n\t\t\treturn this._offScreenRenderTexture.height;\r\n\t\telse\r\n\t\t\treturn RenderContext3D.clientHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getRenderTexture(): RenderTexture {\r\n\t\treturn this._internalRenderTexture || this._offScreenRenderTexture;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_needInternalRenderTexture(): boolean {\r\n\t\treturn this._postProcess || this._enableHDR ? true : false;//condition of internal RT\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_applyPostProcessCommandBuffers(): void {\r\n\t\tfor (var i: number = 0, n: number = this._postProcessCommandBuffers.length; i < n; i++)\r\n\t\t\tthis._postProcessCommandBuffers[i]._apply();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getRenderTextureFormat(): number {\r\n\t\tif (this._enableHDR)\r\n\t\t\treturn RenderTextureFormat.R16G16B16A16;\r\n\t\telse\r\n\t\t\treturn RenderTextureFormat.R8G8B8;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_prepareCameraToRender(): void {\r\n\t\tsuper._prepareCameraToRender();\r\n\t\tvar vp: Viewport = this.viewport;\r\n\t\tthis._viewportParams.setValue(vp.x, vp.y, vp.width, vp.height);\r\n\t\tthis._projectionParams.setValue(this._nearPlane, this._farPlane, RenderContext3D._instance.invertY ? -1 : 1, 0);\r\n\t\tthis._shaderValues.setVector(BaseCamera.VIEWPORT, this._viewportParams);\r\n\t\tthis._shaderValues.setVector(BaseCamera.PROJECTION_PARAMS, this._projectionParams);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_applyViewProject(context: RenderContext3D, viewMat: Matrix4x4, proMat: Matrix4x4): void {\r\n\t\tvar projectView: Matrix4x4;\r\n\t\tvar shaderData: ShaderData = this._shaderValues;\r\n\t\tif (context.invertY) {\r\n\t\t\tMatrix4x4.multiply(BaseCamera._invertYScaleMatrix, proMat, BaseCamera._invertYProjectionMatrix);\r\n\t\t\tMatrix4x4.multiply(BaseCamera._invertYProjectionMatrix, viewMat, BaseCamera._invertYProjectionViewMatrix);\r\n\t\t\tproMat = BaseCamera._invertYProjectionMatrix;\r\n\t\t\tprojectView = BaseCamera._invertYProjectionViewMatrix;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tMatrix4x4.multiply(proMat, viewMat, this._projectionViewMatrix);\r\n\t\t\tprojectView = this._projectionViewMatrix;\r\n\t\t}\r\n\r\n\t\tcontext.viewMatrix = viewMat;\r\n\t\tcontext.projectionMatrix = proMat;\r\n\t\tcontext.projectionViewMatrix = projectView;\r\n\t\tshaderData.setMatrix4x4(BaseCamera.VIEWMATRIX, viewMat);\r\n\t\tshaderData.setMatrix4x4(BaseCamera.PROJECTMATRIX, proMat);\r\n\t\tshaderData.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX, projectView);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateClusterPlaneXY(): void {\r\n\t\tvar fieldOfView: number = this.fieldOfView;\r\n\t\tvar aspectRatio: number = this.aspectRatio;\r\n\t\tif (this._clusterPlaneCacheFlag.x !== fieldOfView || this._clusterPlaneCacheFlag.y !== aspectRatio) {\r\n\t\t\tvar clusterCount: Vector3 = Config3D._config.lightClusterCount;\r\n\t\t\tvar xSlixe: number = clusterCount.x, ySlice: number = clusterCount.y;\r\n\t\t\tvar xCount: number = xSlixe + 1, yCount: number = ySlice + 1;\r\n\t\t\tvar xPlanes: Vector3[] = this._clusterXPlanes, yPlanes: Vector3[] = this._clusterYPlanes;\r\n\r\n\t\t\tif (!xPlanes) {\r\n\t\t\t\txPlanes = this._clusterXPlanes = new Array(xCount);\r\n\t\t\t\tyPlanes = this._clusterYPlanes = new Array(yCount);\r\n\t\t\t\tfor (var i: number = 0; i < xCount; i++)\r\n\t\t\t\t\txPlanes[i] = new Vector3();\r\n\t\t\t\tfor (var i: number = 0; i < yCount; i++)\r\n\t\t\t\t\tyPlanes[i] = new Vector3();\r\n\t\t\t}\r\n\r\n\t\t\tvar halfY = Math.tan((this.fieldOfView / 2) * Math.PI / 180);\r\n\t\t\tvar halfX = this.aspectRatio * halfY;\r\n\t\t\tvar yLengthPerCluster = 2 * halfY / xSlixe;\r\n\t\t\tvar xLengthPerCluster = 2 * halfX / ySlice;\r\n\t\t\tfor (var i: number = 0; i < xCount; i++) {\r\n\t\t\t\tvar angle: number = -halfX + xLengthPerCluster * i;\r\n\t\t\t\tvar bigHypot: number = Math.sqrt(1 + angle * angle);\r\n\t\t\t\tvar normX: number = 1 / bigHypot;\r\n\t\t\t\tvar xPlane: Vector3 = xPlanes[i];\r\n\t\t\t\txPlane.setValue(normX, 0, -angle * normX);\r\n\t\t\t}\r\n\t\t\t//start from top is more similar to light pixel data\r\n\t\t\tfor (var i: number = 0; i < yCount; i++) {\r\n\t\t\t\tvar angle: number = halfY - yLengthPerCluster * i;\r\n\t\t\t\tvar bigHypot: number = Math.sqrt(1 + angle * angle);\r\n\t\t\t\tvar normY: number = -1 / bigHypot;\r\n\t\t\t\tvar yPlane: Vector3 = yPlanes[i];\r\n\t\t\t\tyPlane.setValue(0, normY, -angle * normY);\r\n\t\t\t}\r\n\r\n\t\t\tthis._clusterPlaneCacheFlag.x = fieldOfView;\r\n\t\t\tthis._clusterPlaneCacheFlag.y = aspectRatio;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param shader 着色器\r\n\t * @param replacementTag 替换标记。\r\n\t */\r\n\trender(shader: Shader3D = null, replacementTag: string = null): void {\r\n\t\tif (!this.activeInHierarchy) //custom render should protected with activeInHierarchy=true\r\n\t\t\treturn;\r\n\r\n\t\tvar viewport: Viewport = this.viewport;\r\n\t\tvar needInternalRT: boolean = this._needInternalRenderTexture();\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar context: RenderContext3D = RenderContext3D._instance;\r\n\t\tvar scene: Scene3D = context.scene = <Scene3D>this._scene;\r\n\t\tcontext.pipelineMode = \"Forward\";\r\n\r\n\t\tif (needInternalRT) {\r\n\t\t\tthis._internalRenderTexture = RenderTexture.createFromPool(viewport.width, viewport.height, this._getRenderTextureFormat(), RenderTextureDepthFormat.DEPTH_16);\r\n\t\t\tthis._internalRenderTexture.filterMode = FilterMode.Bilinear;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._internalRenderTexture = null;\r\n\t\t}\r\n\r\n\t\t//render shadowMap\r\n\t\tvar shadowCasterPass;\r\n\t\tvar mainDirectLight: DirectionLight = scene._mainDirectionLight;\r\n\t\tvar needShadowCasterPass: boolean = mainDirectLight && mainDirectLight.shadowMode !== ShadowMode.None && ShadowUtils.supportShadow();\r\n\t\tif (needShadowCasterPass) {\r\n\t\t\tscene._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT)\r\n\t\t\tscene._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\r\n\t\t\tshadowCasterPass = ILaya3D.Scene3D._shadowCasterPass;\r\n\t\t\tshadowCasterPass.update(this, mainDirectLight,ILaya3D.ShadowLightType.DirectionLight);\r\n\t\t\tshadowCasterPass.render(context, scene,ILaya3D.ShadowLightType.DirectionLight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tscene._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\r\n\t\t}\r\n\t\tvar spotMainLight:SpotLight = scene._mainSpotLight;\r\n\t\tvar spotneedShadowCasterPass:boolean = spotMainLight && spotMainLight.shadowMode !== ShadowMode.None && ShadowUtils.supportShadow();\r\n\t\tif(spotneedShadowCasterPass) {\r\n\t\t\tscene._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\r\n\t\t\tscene._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT);\r\n\t\t\tshadowCasterPass = ILaya3D.Scene3D._shadowCasterPass;\r\n\t\t\tshadowCasterPass.update(this,spotMainLight,ILaya3D.ShadowLightType.SpotLight);\r\n\t\t\tshadowCasterPass.render(context,scene,ILaya3D.ShadowLightType.SpotLight);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tscene._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT);\r\n\t\t}\r\n\t\tif(needShadowCasterPass)\r\n\t\t\tscene._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\r\n\t\tif(spotneedShadowCasterPass)\t\r\n\t\t\tscene._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT);\r\n\r\n\r\n\r\n\t\tcontext.camera = this;\r\n\t\tcontext.cameraShaderValue = this._shaderValues;\r\n\t\tCamera._updateMark++;\r\n\t\tscene._preRenderScript();//TODO:duo相机是否重复\r\n\t\t//TODO:webgl2 should use blitFramebuffer\r\n\t\t//TODO:if adjacent camera param can use same internal RT can merge\r\n\t\t//if need internal RT and no off screen RT and clearFlag is DepthOnly or Nothing, should grab the backBuffer\r\n\t\tif (needInternalRT && !this._offScreenRenderTexture && (this.clearFlag == CameraClearFlags.DepthOnly || this.clearFlag == CameraClearFlags.Nothing)) {\r\n\t\t\tif (this._enableHDR) {//internal RT is HDR can't directly copy\r\n\t\t\t\tvar grabTexture: RenderTexture = RenderTexture.createFromPool(viewport.width, viewport.height, RenderTextureFormat.R8G8B8, RenderTextureDepthFormat.DEPTH_16);\r\n\t\t\t\tgrabTexture.filterMode = FilterMode.Bilinear;\r\n\t\t\t\tWebGLContext.bindTexture(gl, gl.TEXTURE_2D, grabTexture._getSource());\r\n\t\t\t\tgl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, viewport.x, RenderContext3D.clientHeight - (viewport.y + viewport.height), viewport.width, viewport.height);\r\n\t\t\t\tvar blit: BlitScreenQuadCMD = BlitScreenQuadCMD.create(grabTexture, this._internalRenderTexture);\r\n\t\t\t\tblit.run();\r\n\t\t\t\tblit.recover();\r\n\t\t\t\tRenderTexture.recoverToPool(grabTexture);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tWebGLContext.bindTexture(gl, gl.TEXTURE_2D, this._internalRenderTexture._getSource());\r\n\t\t\t\tgl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, viewport.x, RenderContext3D.clientHeight - (viewport.y + viewport.height), viewport.width, viewport.height);\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar renderTex: RenderTexture = this._getRenderTexture();//如果有临时renderTexture则画到临时renderTexture,最后再画到屏幕或者离屏画布,如果无临时renderTexture则直接画到屏幕或离屏画布\r\n\t\t(renderTex) && (renderTex._start());\r\n\t\tcontext.viewport = viewport;\r\n\t\tthis._prepareCameraToRender();\r\n\t\tvar multiLighting: boolean = Config3D._config._multiLighting;\r\n\t\t(multiLighting) && (Cluster.instance.update(this, <Scene3D>(this._scene)));\r\n\r\n\t\tthis._applyViewProject(context, this.viewMatrix, this._projectionMatrix);\r\n\r\n\t\tscene._preCulling(context, this, shader, replacementTag);\r\n\t\tscene._clear(gl, context);\r\n\t\tscene._renderScene(context);\r\n\t\tscene._postRenderScript();//TODO:duo相机是否重复\r\n\t\t(renderTex) && (renderTex._end());\r\n\r\n\t\tif (needInternalRT) {\r\n\t\t\tif (this._postProcess) {\r\n\t\t\t\tthis._postProcess._render();\r\n\t\t\t\tthis._applyPostProcessCommandBuffers();\r\n\t\t\t} else if (this._enableHDR) {\r\n\t\t\t\tvar canvasWidth: number = this._getCanvasWidth(), canvasHeight: number = this._getCanvasHeight();\r\n\t\t\t\tthis._screenOffsetScale.setValue(viewport.x / canvasWidth, viewport.y / canvasHeight, viewport.width / canvasWidth, viewport.height / canvasHeight);\r\n\t\t\t\tvar blit: BlitScreenQuadCMD = BlitScreenQuadCMD.create(this._internalRenderTexture, this._offScreenRenderTexture ? this._offScreenRenderTexture : null, this._screenOffsetScale);\r\n\t\t\t\tblit.run();\r\n\t\t\t\tblit.recover();\r\n\t\t\t}\r\n\t\t\tRenderTexture.recoverToPool(this._internalRenderTexture);\r\n\t\t}\r\n\r\n\t\tif (needShadowCasterPass||spotneedShadowCasterPass)\r\n\t\t\tshadowCasterPass.cleanUp();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 计算从屏幕空间生成的射线。\r\n\t * @param point 屏幕空间的位置位置。\r\n\t * @param out  输出射线。\r\n\t */\r\n\tviewportPointToRay(point: Vector2, out: Ray): void {\r\n\t\tPicker.calculateCursorRay(point, this.viewport, this._projectionMatrix, this.viewMatrix, null, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 计算从裁切空间生成的射线。\r\n\t * @param point 裁切空间的位置。\r\n\t * @param out  输出射线。\r\n\t */\r\n\tnormalizedViewportPointToRay(point: Vector2, out: Ray): void {\r\n\t\tvar finalPoint: Vector2 = Camera._tempVector20;\r\n\t\tvar vp: Viewport = this.viewport;\r\n\t\tfinalPoint.x = point.x * vp.width;\r\n\t\tfinalPoint.y = point.y * vp.height;\r\n\r\n\t\tPicker.calculateCursorRay(finalPoint, this.viewport, this._projectionMatrix, this.viewMatrix, null, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 将一个点从世界空间转换到视口空间。\r\n\t * @param position 世界空间的坐标。\r\n\t * @param out  x、y、z为视口空间坐标,w为相对于摄像机的z轴坐标。\r\n\t */\r\n\tworldToViewportPoint(position: Vector3, out: Vector4): void {\r\n\t\tMatrix4x4.multiply(this._projectionMatrix, this._viewMatrix, this._projectionViewMatrix);\r\n\t\tthis.viewport.project(position, this._projectionViewMatrix, out);\r\n\t\tout.x = out.x / Laya.stage.clientScaleX;\r\n\t\tout.y = out.y / Laya.stage.clientScaleY;\r\n\t}\r\n\r\n\t/**\r\n\t * 将一个点从世界空间转换到归一化视口空间。\r\n\t * @param position 世界空间的坐标。\r\n\t * @param out  x、y、z为归一化视口空间坐标,w为相对于摄像机的z轴坐标。\r\n\t */\r\n\tworldToNormalizedViewportPoint(position: Vector3, out: Vector4): void {\r\n\t\tMatrix4x4.multiply(this._projectionMatrix, this._viewMatrix, this._projectionViewMatrix);\r\n\t\tthis.normalizedViewport.project(position, this._projectionViewMatrix, out);\r\n\t\tout.x = out.x / Laya.stage.clientScaleX;\r\n\t\tout.y = out.y / Laya.stage.clientScaleY;\r\n\t}\r\n\r\n\t/**\r\n\t * 转换2D屏幕坐标系统到3D正交投影下的坐标系统，注:只有正交模型下有效。\r\n\t * @param   source 源坐标。\r\n\t * @param   out 输出坐标。\r\n\t * @return 是否转换成功。\r\n\t */\r\n\tconvertScreenCoordToOrthographicCoord(source: Vector3, out: Vector3): boolean {//TODO:是否应该使用viewport宽高\r\n\t\tif (this._orthographic) {\r\n\t\t\tvar clientWidth: number = RenderContext3D.clientWidth;\r\n\t\t\tvar clientHeight: number = RenderContext3D.clientHeight;\r\n\t\t\tvar ratioX: number = this.orthographicVerticalSize * this.aspectRatio / clientWidth;\r\n\t\t\tvar ratioY: number = this.orthographicVerticalSize / clientHeight;\r\n\t\t\tout.x = (-clientWidth / 2 + source.x * Laya.stage.clientScaleX) * ratioX;\r\n\t\t\tout.y = (clientHeight / 2 - source.y * Laya.stage.clientScaleY) * ratioY;\r\n\t\t\tout.z = (this.nearPlane - this.farPlane) * (source.z + 1) / 2 - this.nearPlane;\r\n\t\t\tVector3.transformCoordinate(out, this.transform.worldMatrix, out);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(destroyChild: boolean = true): void {\r\n\t\tthis._offScreenRenderTexture = null;\r\n\t\tthis.transform.off(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\r\n\t\tsuper.destroy(destroyChild);\r\n\t}\r\n\r\n\t/**\r\n\t * 在特定渲染管线阶段添加指令缓存。\r\n\t */\r\n\taddCommandBuffer(event: number, commandBuffer: CommandBuffer): void {\r\n\t\tswitch (event) {\r\n\t\t\tcase Camera.CAMERAEVENT_POSTPROCESS:\r\n\t\t\t\tthis._postProcessCommandBuffers.push(commandBuffer);\r\n\t\t\t\tcommandBuffer._camera = this;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"Camera:unknown event.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 在特定渲染管线阶段移除指令缓存。\r\n\t */\r\n\tremoveCommandBuffer(event: number, commandBuffer: CommandBuffer): void {\r\n\t\tswitch (event) {\r\n\t\t\tcase Camera.CAMERAEVENT_POSTPROCESS:\r\n\t\t\t\tvar index: number = this._postProcessCommandBuffers.indexOf(commandBuffer);\r\n\t\t\t\tif (index !== -1)\r\n\t\t\t\t\tthis._postProcessCommandBuffers.splice(index, 1);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"Camera:unknown event.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 在特定渲染管线阶段移除所有指令缓存。\r\n\t */\r\n\tremoveCommandBuffers(event: number): void {\r\n\t\tswitch (event) {\r\n\t\t\tcase Camera.CAMERAEVENT_POSTPROCESS:\r\n\t\t\t\tthis._postProcessCommandBuffers.length = 0;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"Camera:unknown event.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new Camera();\r\n\t}\r\n\r\n\t/** @internal [NATIVE]*/\r\n\t_boundFrustumBuffer: Float32Array;\r\n}\r\n\r\n","import { Point } from \"../maths/Point\";\r\nimport { Stat } from \"../utils/Stat\";\r\nimport { MouseTouch } from \"./MouseTouch\";\r\nimport { Touch } from \"./Touch\";\r\nimport { Script3D } from \"./component/Script3D\";\r\nimport { SimpleSingletonList } from \"./component/SimpleSingletonList\";\r\nimport { BaseCamera } from \"./core/BaseCamera\";\r\nimport { Camera, CameraClearFlags } from \"./core/Camera\";\r\nimport { Scene3D } from \"./core/scene/Scene3D\";\r\nimport { Sprite3D } from \"./core/Sprite3D\";\r\nimport { Ray } from \"./math/Ray\";\r\nimport { Vector2 } from \"./math/Vector2\";\r\nimport { Vector3 } from \"./math/Vector3\";\r\nimport { Viewport } from \"./math/Viewport\";\r\nimport { HitResult } from \"./physics/HitResult\";\r\nimport { PhysicsSimulation } from \"./physics/PhysicsSimulation\";\r\nimport { Physics3D } from \"./physics/Physics3D\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { Config3D } from \"../../Config3D\";\r\n\r\n/**\r\n * <code>Input3D</code> 类用于实现3D输入。\r\n */\r\nexport class Input3D {\r\n\t/**@internal */\r\n\tprivate static _tempPoint: Point = new Point();\r\n\t/**@internal */\r\n\tprivate static _tempVector20: Vector2 = new Vector2();\r\n\t/**@internal */\r\n\tprivate static _tempRay0: Ray = new Ray(new Vector3(), new Vector3());\r\n\t/**@internal */\r\n\tprivate static _tempHitResult0: HitResult = new HitResult();\r\n\r\n\t/**@internal */\r\n\tprivate _scene: Scene3D;\r\n\t/**@internal */\r\n\tprivate _eventList: UIEvent[] = [];\r\n\t/**@internal */\r\n\tprivate _mouseTouch: MouseTouch = new MouseTouch();\r\n\t/**@internal */\r\n\tprivate _touchPool: Touch[] = [];\r\n\t/**@internal */\r\n\tprivate _touches: SimpleSingletonList = new SimpleSingletonList();\r\n\t/**@internal */\r\n\tprivate _multiTouchEnabled: boolean = true;\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\t__init__(canvas: any, scene: Scene3D): void {\r\n\t\tthis._scene = scene;\r\n\t\tcanvas.oncontextmenu = function (e: any): any {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _pushEventList: Function = ((e: UIEvent) => {\r\n\t\t//e.cancelable:false will cause error in some case,for example chromre\r\n\t\t(e.cancelable) && (e.preventDefault());\r\n\t\tthis._eventList.push(e);\r\n\t}).bind(this);\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_onCanvasEvent(canvas: any): void {\r\n\t\tcanvas.addEventListener('mousedown', this._pushEventList);\r\n\t\tcanvas.addEventListener('mouseup', this._pushEventList, true);\r\n\t\tcanvas.addEventListener('mousemove', this._pushEventList, true);\r\n\t\tcanvas.addEventListener(\"touchstart\", this._pushEventList);\r\n\t\tcanvas.addEventListener(\"touchend\", this._pushEventList, true);\r\n\t\tcanvas.addEventListener(\"touchmove\", this._pushEventList, true);\r\n\t\tcanvas.addEventListener(\"touchcancel\", this._pushEventList, true);\r\n\t\t//e.preventDefault()会导致debugger中断后touchcancel无法执行,抛异常\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_offCanvasEvent(canvas: any): void {\r\n\t\tcanvas.removeEventListener('mousedown', this._pushEventList);\r\n\t\tcanvas.removeEventListener('mouseup', this._pushEventList, true);\r\n\t\tcanvas.removeEventListener('mousemove', this._pushEventList, true);\r\n\t\tcanvas.removeEventListener(\"touchstart\", this._pushEventList);\r\n\t\tcanvas.removeEventListener(\"touchend\", this._pushEventList, true);\r\n\t\tcanvas.removeEventListener(\"touchmove\", this._pushEventList, true);\r\n\t\tcanvas.removeEventListener(\"touchcancel\", this._pushEventList, true);\r\n\t\tthis._eventList.length = 0;\r\n\t\tthis._touches.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * 获取触摸点个数。\r\n\t * @return 触摸点个数。\r\n\t */\r\n\ttouchCount(): number {\r\n\t\treturn this._touches.length;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取是否可以使用多点触摸。\r\n\t * @return 是否可以使用多点触摸。\r\n\t */\r\n\tget multiTouchEnabled(): boolean {\r\n\t\treturn this._multiTouchEnabled;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置是否可以使用多点触摸。\r\n\t * @param 是否可以使用多点触摸。\r\n\t */\r\n\tset multiTouchEnabled(value: boolean) {\r\n\t\tthis._multiTouchEnabled = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 创建一个 <code>Input3D</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getTouch(touchID: number,type:number): Touch {\r\n\t\tvar touch: Touch = this._touchPool[touchID];\r\n\t\tif((type==0&&touch&&touch._getIndexInList()!=-1))\r\n\t\t\treturn null;\r\n\r\n\t\tif(type == 1&&touch&&(touch._getIndexInList()==-1))\r\n\t\t\treturn null;\r\n\t\t\t\r\n\t\tif (!touch) {\r\n\t\t\ttouch = new Touch();\r\n\t\t\tthis._touchPool[touchID] = touch;\r\n\t\t\ttouch._identifier = touchID;\r\n\t\t}\r\n\t\treturn touch;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _mouseTouchDown(): void {\r\n\t\tvar touch: MouseTouch = this._mouseTouch;\r\n\t\tvar sprite: Sprite3D = touch.sprite;\r\n\t\ttouch._pressedSprite = sprite;\r\n\t\ttouch._pressedLoopCount = Stat.loopCount;\r\n\t\tif (sprite) {\r\n\t\t\tvar scripts: Script3D[] = sprite._scripts;\r\n\t\t\tif (scripts) {\r\n\t\t\t\tfor (var i: number = 0, n: number = scripts.length; i < n; i++)\r\n\t\t\t\t\tscripts[i].onMouseDown();//onMouseDown\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _mouseTouchUp(): void {\r\n\t\tvar i: number, n: number;\r\n\t\tvar touch: MouseTouch = this._mouseTouch;\r\n\t\tvar lastPressedSprite: Sprite3D = touch._pressedSprite;\r\n\t\ttouch._pressedSprite = null;//表示鼠标弹起\r\n\t\ttouch._pressedLoopCount = -1;\r\n\t\tvar sprite: Sprite3D = touch.sprite;\r\n\t\tif (sprite) {\r\n\t\t\tif (sprite === lastPressedSprite) {\r\n\t\t\t\tvar scripts: Script3D[] = sprite._scripts;\r\n\t\t\t\tif (scripts) {\r\n\t\t\t\t\tfor (i = 0, n = scripts.length; i < n; i++)\r\n\t\t\t\t\t\tscripts[i].onMouseClick();//onMouseClifck\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (lastPressedSprite) {\r\n\t\t\tvar lastScripts: Script3D[] = lastPressedSprite._scripts;\r\n\t\t\tif (lastScripts) {\r\n\t\t\t\tfor (i = 0, n = lastScripts.length; i < n; i++)\r\n\t\t\t\t\tlastScripts[i].onMouseUp();//onMouseUp\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _mouseTouchRayCast(cameras: BaseCamera[]): void {\r\n\t\tvar touchHitResult: HitResult = Input3D._tempHitResult0;\r\n\t\tvar touchPos: Vector2 = Input3D._tempVector20;\r\n\t\tvar touchRay: Ray = Input3D._tempRay0;\r\n\r\n\t\ttouchHitResult.succeeded = false;\r\n\t\tvar x: number = this._mouseTouch.mousePositionX;\r\n\t\tvar y: number = this._mouseTouch.mousePositionY;\r\n\t\ttouchPos.x = x;\r\n\t\ttouchPos.y = y;\r\n\t\tfor (var i: number = cameras.length - 1; i >= 0; i--) {\r\n\t\t\tvar camera: Camera = (<Camera>cameras[i]);\r\n\t\t\tvar viewport: Viewport = camera.viewport;\r\n\t\t\tif (touchPos.x >= viewport.x && touchPos.y >= viewport.y && touchPos.x <= viewport.width && touchPos.y <= viewport.height) {\r\n\t\t\t\tcamera.viewportPointToRay(touchPos, touchRay);\r\n\r\n\t\t\t\tvar sucess: boolean = this._scene._physicsSimulation.rayCast(touchRay, touchHitResult);\r\n\t\t\t\tif (sucess || (camera.clearFlag === CameraClearFlags.SolidColor || camera.clearFlag === CameraClearFlags.Sky))\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar touch: MouseTouch = this._mouseTouch;\r\n\t\tvar lastSprite: Sprite3D = touch.sprite;\r\n\t\tif (touchHitResult.succeeded) {\r\n\t\t\tvar touchSprite: Sprite3D = (<Sprite3D>touchHitResult.collider.owner);\r\n\t\t\ttouch.sprite = touchSprite;\r\n\t\t\tvar scripts: Script3D[] = touchSprite._scripts;\r\n\t\t\tif (lastSprite !== touchSprite) {\r\n\t\t\t\tif (scripts) {\r\n\t\t\t\t\tfor (var j: number = 0, m: number = scripts.length; j < m; j++)\r\n\t\t\t\t\t\tscripts[j].onMouseEnter();//onMouseEnter\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttouch.sprite = null;\r\n\t\t}\r\n\r\n\t\tif (lastSprite && (lastSprite !== touchSprite)) {\r\n\t\t\tvar outScripts: Script3D[] = lastSprite._scripts;\r\n\t\t\tif (outScripts) {\r\n\t\t\t\tfor (j = 0, m = outScripts.length; j < m; j++)\r\n\t\t\t\t\toutScripts[j].onMouseOut();//onMouseOut\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @param flag 0:add、1:remove、2:change\r\n\t */\r\n\t_changeTouches(changedTouches: TouchList, flag: number): void {\r\n\t\tvar offsetX: number = 0, offsetY: number = 0;\r\n\t\tvar lastCount: number = this._touches.length;\r\n\t\tfor (var j: number = 0, m: number = changedTouches.length; j < m; j++) {\r\n\t\t\tvar nativeTouch: any = changedTouches[j];\r\n\t\t\tvar identifier: number = nativeTouch.identifier;\r\n\t\t\tif (!this._multiTouchEnabled && identifier !== 0)\r\n\t\t\t\tcontinue;\r\n\t\t\tvar touch: Touch = this._getTouch(identifier,flag);\r\n\t\t\tvar pos: Vector2 = this._touchPool[identifier]._position;\r\n\t\t\tvar mousePoint: Point = Input3D._tempPoint;\r\n\t\t\tmousePoint.setTo(nativeTouch.pageX, nativeTouch.pageY);\r\n\t\t\tILaya.stage._canvasTransform.invertTransformPoint(mousePoint);//考虑画布缩放\t\r\n\t\t\tvar posX: number = mousePoint.x;\r\n\t\t\tvar posY: number = mousePoint.y;\r\n\t\t\tswitch (flag) {\r\n\t\t\t\tcase 0://add \r\n\t\t\t\t\tif(!!touch)\r\n\t\t\t\t\t\tthis._touches.add(touch);\r\n\t\t\t\t\toffsetX += posX;\r\n\t\t\t\t\toffsetY += posY;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1://remove\r\n\t\t\t\t\t if(!!touch)\r\n\t\t\t\t\t\tthis._touches.remove(touch);\r\n\t\t\t\t\toffsetX -= posX;\r\n\t\t\t\t\toffsetY -= posY;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2://change \r\n\t\t\t\t\toffsetX = posX - pos.x;\r\n\t\t\t\t\toffsetY = posY - pos.y;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tpos.x = posX;\r\n\t\t\tpos.y = posY;\r\n\t\t}\r\n\r\n\t\tvar touchCount: number = this._touches.length;\r\n\t\tif (touchCount === 0) {//无触摸点需要归零\r\n\t\t\tthis._mouseTouch.mousePositionX = 0;\r\n\t\t\tthis._mouseTouch.mousePositionY = 0;\r\n\t\t} else {\r\n\t\t\tthis._mouseTouch.mousePositionX = (this._mouseTouch.mousePositionX * lastCount + offsetX) / touchCount;\r\n\t\t\tthis._mouseTouch.mousePositionY = (this._mouseTouch.mousePositionY * lastCount + offsetY) / touchCount;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_update(): void {\r\n\t\tvar enablePhysics: boolean = Physics3D._enablePhysics && !PhysicsSimulation.disableSimulation;\r\n\t\tvar i: number, n: number, j: number, m: number;\r\n\t\tn = this._eventList.length;\r\n\t\tvar cameras: BaseCamera[] = this._scene._cameraPool;\r\n\t\tif (n > 0) {\r\n\t\t\tvar rayCast: boolean = false;\r\n\t\t\tfor (i = 0; i < n; i++) {\r\n\t\t\t\tvar e: UIEvent = this._eventList[i];\r\n\t\t\t\tswitch (e.type) {\r\n\t\t\t\t\tcase \"mousedown\":\r\n\t\t\t\t\t\t(enablePhysics) && (this._mouseTouchDown());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"mouseup\":\r\n\t\t\t\t\t\t(enablePhysics) && (this._mouseTouchUp());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"mousemove\":\r\n\t\t\t\t\t\tvar mousePoint: Point = Input3D._tempPoint;\r\n\t\t\t\t\t\tmousePoint.setTo((<MouseEvent>e).pageX, (<MouseEvent>e).pageY);\r\n\t\t\t\t\t\tILaya.stage._canvasTransform.invertTransformPoint(mousePoint);//考虑画布缩放\r\n\t\t\t\t\t\tthis._mouseTouch.mousePositionX = mousePoint.x;\r\n\t\t\t\t\t\tthis._mouseTouch.mousePositionY = mousePoint.y;\r\n\t\t\t\t\t\t(enablePhysics) && (rayCast = true);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"touchstart\":\r\n\t\t\t\t\t\tvar lastLength: number = this._touches.length;//需要在_changeTouches()之前获取\r\n\t\t\t\t\t\tthis._changeTouches((<TouchEvent>e).changedTouches, 0);\r\n\t\t\t\t\t\tif (enablePhysics) {\r\n\t\t\t\t\t\t\t//rayCast = true;//触摸点击时touchMove不会触发,需要调用_touchRayCast()函数\r\n\t\t\t\t\t\t\t(!Config3D._config.isUseCannonPhysicsEngine) && (this._mouseTouchRayCast(cameras));\r\n\t\t\t\t\t\t\t(lastLength === 0) && (this._mouseTouchDown());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"touchend\":\r\n\t\t\t\t\tcase \"touchcancel\":\r\n\t\t\t\t\t\tthis._changeTouches((<TouchEvent>e).changedTouches, 1);\r\n\t\t\t\t\t\t(enablePhysics && this._touches.length === 0) && (this._mouseTouchUp());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"touchmove\":\r\n\t\t\t\t\t\tthis._changeTouches((<TouchEvent>e).changedTouches, 2);\r\n\t\t\t\t\t\t(enablePhysics) && (rayCast = true);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Input3D:unkonwn event type.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t(rayCast)&&(!Config3D._config.isUseCannonPhysicsEngine) && (this._mouseTouchRayCast(cameras));//延迟射线检测,否则mouseMove每帧可能触发多次\r\n\t\t\tthis._eventList.length = 0;\r\n\t\t}\r\n\r\n\t\tif (enablePhysics) {\r\n\t\t\tvar mouseTouch: MouseTouch = this._mouseTouch;\r\n\t\t\tvar pressedSprite: Sprite3D = mouseTouch._pressedSprite;\r\n\t\t\tif (pressedSprite && (Stat.loopCount > mouseTouch._pressedLoopCount)) {\r\n\t\t\t\tvar pressedScripts: Script3D[] = pressedSprite._scripts;\r\n\t\t\t\tif (pressedScripts) {\r\n\t\t\t\t\tfor (j = 0, m = pressedScripts.length; j < m; j++)\r\n\t\t\t\t\t\tpressedScripts[j].onMouseDrag();//onMouseDrag\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar touchSprite: Sprite3D = mouseTouch.sprite;\r\n\t\t\tif (touchSprite) {\r\n\t\t\t\tvar scripts: Script3D[] = touchSprite._scripts;\r\n\t\t\t\tif (scripts) {\r\n\t\t\t\t\tfor (j = 0, m = scripts.length; j < m; j++)\r\n\t\t\t\t\t\tscripts[j].onMouseOver();//onMouseOver\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\t获取触摸点。\r\n\t * \t@param\tindex 索引。\r\n\t * \t@return 触摸点。\r\n\t */\r\n\tgetTouch(index: number): Touch {\r\n\t\tif (index < this._touches.length) {\r\n\t\t\treturn (<Touch>this._touches.elements[index]);\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","/**\r\n\t * <code>PhysicsSettings</code> 类用于创建物理配置信息。\r\n\t */\r\nexport class PhysicsSettings {\r\n\t/**标志集合。*/\r\n\tflags: number = 0;\r\n\r\n\t/**物理引擎在一帧中用于补偿减速的最大次数。*/\r\n\tmaxSubSteps: number = 1;\r\n\r\n\t/**物理模拟器帧的间隔时间。*/\r\n\tfixedTimeStep: number = 1.0 / 60.0;\r\n\r\n\t/**\r\n\t * 创建一个 <code>PhysicsSettings</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\t\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { VertexMesh } from \"./VertexMesh\";\r\nimport { IVertex } from \"../IVertex\"\r\nimport { VertexDeclaration } from \"../VertexDeclaration\"\r\nimport { VertexElement } from \"../VertexElement\"\r\nimport { VertexElementFormat } from \"../VertexElementFormat\"\r\nimport { Vector2 } from \"../../math/Vector2\"\r\nimport { Vector3 } from \"../../math/Vector3\"\r\n\r\n/**\r\n * <code>VertexPositionNormalTexture</code> 类用于创建位置、纹理顶点结构。\r\n */\r\nexport class VertexPositionTexture0 implements IVertex {\r\n\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexPositionTexture0._vertexDeclaration;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tVertexPositionTexture0._vertexDeclaration = new VertexDeclaration(20, [new VertexElement(0, VertexElementFormat.Vector3, VertexMesh.MESH_POSITION0),\r\n\t\tnew VertexElement(12, VertexElementFormat.Vector2, VertexMesh.MESH_TEXTURECOORDINATE0)]);\r\n\t}\r\n\r\n\tprivate _position: Vector3;\r\n\tprivate _textureCoordinate0: Vector2;\r\n\r\n\tget position(): Vector3 {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tget textureCoordinate0(): Vector2 {\r\n\t\treturn this._textureCoordinate0;\r\n\t}\r\n\r\n\tget vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexPositionTexture0._vertexDeclaration;\r\n\t}\r\n\r\n\tconstructor(position: Vector3, textureCoordinate0: Vector2) {\r\n\t\tthis._position = position;\r\n\t\tthis._textureCoordinate0 = textureCoordinate0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { SkyMesh } from \"./SkyMesh\";\r\nimport { BufferState } from \"../../core/BufferState\"\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\"\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\"\r\nimport { VertexPositionTexture0 } from \"../../graphics/Vertex/VertexPositionTexture0\"\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\"\r\nimport { VertexDeclaration } from \"../../graphics/VertexDeclaration\"\r\nimport { LayaGL } from \"../../../layagl/LayaGL\"\r\nimport { Stat } from \"../../../utils/Stat\"\r\nimport { WebGLContext } from \"../../../webgl/WebGLContext\"\r\nimport { IndexFormat } from \"../../graphics/IndexFormat\";\r\n\r\n/**\r\n * <code>SkyDome</code> 类用于创建天空盒。\r\n */\r\nexport class SkyDome extends SkyMesh {\r\n\t/**@internal */\r\n\tprivate static _radius: number = 1;\r\n\r\n\tstatic instance: SkyDome;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tSkyDome.instance = new SkyDome();//TODO:移植为标准Mesh后需要加锁\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _stacks: number;\r\n\t/**@internal */\r\n\tprivate _slices: number;\r\n\r\n\t/**\r\n\t * 获取堆数。\r\n\t */\r\n\tget stacks(): number {\r\n\t\treturn this._stacks;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取层数。\r\n\t */\r\n\tget slices(): number {\r\n\t\treturn this._slices;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SkyDome</code> 实例。\r\n\t * @param stacks 堆数。\r\n\t * @param slices 层数。\r\n\t */\r\n\tconstructor(stacks: number = 48, slices: number = 48) {\r\n\t\tsuper();\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tthis._stacks = stacks;\r\n\t\tthis._slices = slices;\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexPositionTexture0.vertexDeclaration;\r\n\t\tvar vertexFloatCount: number = vertexDeclaration.vertexStride / 4;\r\n\t\tvar numberVertices: number = (this._stacks + 1) * (this._slices + 1);\r\n\t\tvar numberIndices: number = (3 * this._stacks * (this._slices + 1)) * 2;\r\n\r\n\t\tvar vertices: Float32Array = new Float32Array(numberVertices * vertexFloatCount);\r\n\t\tvar indices: Uint16Array = new Uint16Array(numberIndices);\r\n\r\n\t\tvar stackAngle: number = Math.PI / this._stacks;\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / this._slices;\r\n\r\n\t\t// Generate the group of Stacks for the sphere  \r\n\t\tvar vertexIndex: number = 0;\r\n\t\tvar vertexCount: number = 0;\r\n\t\tvar indexCount: number = 0;\r\n\r\n\t\tfor (var stack: number = 0; stack < (this._stacks + 1); stack++) {\r\n\t\t\tvar r: number = Math.sin(stack * stackAngle);\r\n\t\t\tvar y: number = Math.cos(stack * stackAngle);\r\n\r\n\t\t\t// Generate the group of segments for the current Stack  \r\n\t\t\tfor (var slice: number = 0; slice < (this._slices + 1); slice++) {\r\n\t\t\t\tvar x: number = r * Math.sin(slice * sliceAngle);\r\n\t\t\t\tvar z: number = r * Math.cos(slice * sliceAngle);\r\n\t\t\t\tvertices[vertexCount + 0] = x * SkyDome._radius;\r\n\t\t\t\tvertices[vertexCount + 1] = y * SkyDome._radius;\r\n\t\t\t\tvertices[vertexCount + 2] = z * SkyDome._radius;\r\n\r\n\t\t\t\tvertices[vertexCount + 3] = -(slice / this._slices) + 0.75;//gzk 改成我喜欢的坐标系 原来是 slice/_slices\r\n\t\t\t\tvertices[vertexCount + 4] = stack / this._stacks;\r\n\t\t\t\tvertexCount += vertexFloatCount;\r\n\t\t\t\tif (stack != (this._stacks - 1)) {\r\n\t\t\t\t\t// First Face\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + 1;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (this._slices + 1);\r\n\r\n\t\t\t\t\t// Second \r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (this._slices + 1);\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (this._slices);\r\n\t\t\t\t\tvertexIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._vertexBuffer = new VertexBuffer3D(vertices.length * 4, gl.STATIC_DRAW, false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = vertexDeclaration;\r\n\t\tthis._indexBuffer = new IndexBuffer3D(IndexFormat.UInt16, indices.length, gl.STATIC_DRAW, false);\r\n\t\tthis._vertexBuffer.setData(vertices.buffer);\r\n\t\tthis._indexBuffer.setData(indices);\r\n\r\n\t\tvar bufferState: BufferState = new BufferState();\r\n\t\tbufferState.bind();\r\n\t\tbufferState.applyVertexBuffer(this._vertexBuffer);\r\n\t\tbufferState.applyIndexBuffer(this._indexBuffer);\r\n\t\tbufferState.unBind();\r\n\t\tthis._bufferState = bufferState;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_render(state: RenderContext3D): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar indexCount: number = this._indexBuffer.indexCount;\r\n\t\tgl.drawElements(gl.TRIANGLES, indexCount, gl.UNSIGNED_SHORT, 0);\r\n\t\tStat.trianglesFaces += indexCount / 3;\r\n\t\tStat.renderBatches++;\r\n\t}\r\n}\r\n\r\n","import { Render } from \"../../renders/Render\"\r\nimport { Handler } from \"../../utils/Handler\"\r\nimport { WebGLContext } from \"../../webgl/WebGLContext\"\r\nimport { BaseTexture } from \"../../resource/BaseTexture\"\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { TextureFormat } from \"../../resource/TextureFormat\";\r\n\r\nexport enum TextureCubeFace {\r\n\tPositiveX,\r\n\tNegativeX,\r\n\tPositiveY,\r\n\tNegativeY,\r\n\tPositiveZ,\r\n\tNegativeZ\r\n}\r\n\r\n/**\r\n * <code>TextureCube</code> 类用于生成立方体纹理。\r\n */\r\nexport class TextureCube extends BaseTexture {\r\n\t/**TextureCube资源。*/\r\n\tstatic TEXTURECUBE: string = \"TEXTURECUBE\";\r\n\r\n\t/**@private*/\r\n\tprivate static _blackTexture: TextureCube;\r\n\t/**@private*/\r\n\tprivate static _grayTexture: TextureCube;\r\n\r\n\t/**\r\n\t * 黑色纯色纹理。\r\n\t */\r\n\tstatic get blackTexture() {\r\n\t\treturn TextureCube._blackTexture;\r\n\t}\r\n\r\n\t/**\r\n\t * 灰色纯色纹理。\r\n\t */\r\n\tstatic get grayTexture() {\r\n\t\treturn TextureCube._grayTexture;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tvar blackTexture: TextureCube = new TextureCube(1, TextureFormat.R8G8B8, false);\r\n\t\tvar grayTexture: TextureCube = new TextureCube(1, TextureFormat.R8G8B8, false);\r\n\t\tvar pixels: Uint8Array = new Uint8Array(3);\r\n\t\tpixels[0] = 0, pixels[1] = 0, pixels[2] = 0;\r\n\t\tblackTexture.setSixSidePixels([pixels, pixels, pixels, pixels, pixels, pixels]);\r\n\t\tblackTexture.lock = true;//锁住资源防止被资源管理释放\r\n\t\tpixels[0] = 128, pixels[1] = 128, pixels[2] = 128;\r\n\t\tgrayTexture.setSixSidePixels([pixels, pixels, pixels, pixels, pixels, pixels]);\r\n\t\tgrayTexture.lock = true;//锁住资源防止被资源管理释放\r\n\t\tTextureCube._grayTexture = grayTexture;\r\n\t\tTextureCube._blackTexture = blackTexture;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tstatic _parse(data: any, propertyParams: any = null, constructParams: any[] = null): TextureCube {\r\n\t\tvar texture: TextureCube = constructParams ? new TextureCube(0, constructParams[0], constructParams[1]) : new TextureCube(0);\r\n\t\ttexture.setSixSideImageSources(data);\r\n\t\treturn texture;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tstatic _parseBin(data: any, propertyParams: any = null, constructParams: any[] = null): TextureCube {\r\n\t\tvar texture: TextureCube = constructParams ? new TextureCube(0, constructParams[0], constructParams[1]) : new TextureCube(0);\r\n\t\ttexture.setSixSideImageSources(data);\r\n\t\treturn texture;\r\n\t}\r\n\r\n\t/**\r\n\t * 加载TextureCube。\r\n\t * @param url TextureCube地址。\r\n\t * @param complete 完成回调。\r\n\t */\r\n\tstatic load(url: string, complete: Handler): void {\r\n\t\tILaya.loader.create(url, complete, null, TextureCube.TEXTURECUBE);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tget defaulteTexture(): BaseTexture {\r\n\t\treturn TextureCube.grayTexture;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>TextureCube</code> 实例。\r\n\t * @param\tformat 贴图格式。\r\n\t * @param\tmipmap 是否生成mipmap。\r\n\t */\r\n\tconstructor(size: number, format: number = TextureFormat.R8G8B8, mipmap: boolean = false) {\r\n\t\tsuper(format, mipmap);\r\n\t\tthis._glTextureType = LayaGL.instance.TEXTURE_CUBE_MAP;\r\n\t\tthis._width = size;\r\n\t\tthis._height = size;\r\n\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tthis._setWarpMode(gl.TEXTURE_WRAP_S, this._wrapModeU);\r\n\t\tthis._setWarpMode(gl.TEXTURE_WRAP_T, this._wrapModeV);\r\n\t\tthis._setFilterMode(this._filterMode);\r\n\t\tthis._setAnisotropy(this._anisoLevel);\r\n\r\n\t\tif (this._mipmap) {\r\n\t\t\tthis._mipmapCount = Math.ceil(Math.log2(size)) + 1;\r\n\t\t\tfor (var i: number = 0; i < this._mipmapCount; i++)\r\n\t\t\t\tthis._setPixels([], i, Math.max(size >> i, 1), Math.max(size >> i, 1));//初始化各级mipmap\r\n\t\t\tthis._setGPUMemory(size * size * 4 * (1 + 1 / 3) * 6);\r\n\t\t} else {\r\n\t\t\tthis._mipmapCount = 1;\r\n\t\t\tthis._setGPUMemory(size * size * 4 * 6);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n \t* @private\r\n \t*/\r\n\tprivate _setPixels(pixels: any[], miplevel: number, width: number, height: number): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar glFormat: number = this._getGLFormat();\r\n\t\tWebGLContext.bindTexture(gl, this._glTextureType, this._glTexture);\r\n\t\tif (this.format === TextureFormat.R8G8B8) {\r\n\t\t\tgl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);//字节对齐\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels[0]);//back\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels[1]);//front\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels[2]);//right\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels[3]);//left\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels[4]);//up\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels[5]);//down\r\n\t\t\tgl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n\t\t} else {\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels[0]);//back\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels[1]);//front\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels[2]);//right\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels[3]);//left\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels[4]);//up\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels[5]);//down\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 通过六张图片源填充纹理。\r\n\t * @param 图片源数组。\r\n\t */\r\n\tsetSixSideImageSources(source: any[], premultiplyAlpha: boolean = false): void {\r\n\t\tvar width: number;\r\n\t\tvar height: number;\r\n\t\tfor (var i: number = 0; i < 6; i++) {\r\n\t\t\tvar img: any = source[i];\r\n\t\t\tif (!img) {//TODO:\r\n\t\t\t\tconsole.log(\"TextureCube: image Source can't be null.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar nextWidth: number = img.width;\r\n\t\t\tvar nextHeight: number = img.height;\r\n\t\t\tif (i > 0) {\r\n\t\t\t\tif (width !== nextWidth) {\r\n\t\t\t\t\tconsole.log(\"TextureCube: each side image's width and height must same.\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\twidth = nextWidth;\r\n\t\t\theight = nextHeight;\r\n\t\t\tif (width !== height) {\r\n\t\t\t\tconsole.log(\"TextureCube: each side image's width and height must same.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._width = width;\r\n\t\tthis._height = height;\r\n\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tWebGLContext.bindTexture(gl, this._glTextureType, this._glTexture);\r\n\t\tvar glFormat: number = this._getGLFormat();\r\n\r\n\t\tif (!Render.isConchApp) {\r\n\t\t\t(premultiplyAlpha) && (gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true));\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, glFormat, glFormat, gl.UNSIGNED_BYTE, source[0]);//back\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, glFormat, glFormat, gl.UNSIGNED_BYTE, source[1]);//front\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, glFormat, glFormat, gl.UNSIGNED_BYTE, source[2]);//right\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, glFormat, glFormat, gl.UNSIGNED_BYTE, source[3]);//left\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, glFormat, glFormat, gl.UNSIGNED_BYTE, source[4]);//up\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, glFormat, glFormat, gl.UNSIGNED_BYTE, source[5]);//down\r\n\t\t\t(premultiplyAlpha) && (gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false));\r\n\t\t} else {\r\n\t\t\tif (premultiplyAlpha == true) {\r\n\t\t\t\tfor (var j: number = 0; j < 6; j++)\r\n\t\t\t\t\tsource[j].setPremultiplyAlpha(premultiplyAlpha);\r\n\t\t\t}\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source[0]);//back\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source[1]);//front\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source[2]);//right\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source[3]);//left\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source[4]);//up\r\n\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source[5]);//down\r\n\t\t}\r\n\t\tif (this._mipmap && this._isPot(width) && this._isPot(height)) {\r\n\t\t\tgl.generateMipmap(this._glTextureType);\r\n\t\t\tthis._setGPUMemory(width * height * 4 * (1 + 1 / 3) * 6);\r\n\t\t} else {\r\n\t\t\tthis._setGPUMemory(width * height * 4 * 6);\r\n\t\t}\r\n\r\n\t\tthis._setWarpMode(gl.TEXTURE_WRAP_S, this._wrapModeU);\r\n\t\tthis._setWarpMode(gl.TEXTURE_WRAP_T, this._wrapModeV);\r\n\t\tthis._setFilterMode(this._filterMode);\r\n\t\tthis._readyed = true;\r\n\t\tthis._activeResource();\r\n\t}\r\n\r\n\t/**\r\n\t * 通过六张图片源填充纹理。\r\n\t * @param 图片源数组。\r\n\t */\r\n\tsetSixSidePixels(pixels: Array<Uint8Array>, miplevel: number = 0): void {\r\n\t\tif (!pixels)\r\n\t\t\tthrow new Error(\"TextureCube:pixels can't be null.\");\r\n\t\tvar width: number = Math.max(this._width >> miplevel, 1);\r\n\t\tvar height: number = Math.max(this._height >> miplevel, 1);\r\n\t\tvar pixelsCount: number = width * height * this._getFormatByteCount();\r\n\t\tif (pixels[0].length < pixelsCount)//TODO:只判断了0层\r\n\t\t\tthrow \"TextureCube:pixels length should at least \" + pixelsCount + \".\";\r\n\t\tthis._setPixels(pixels, miplevel, width, height);\r\n\t\tif (miplevel === 0) {\r\n\t\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\t\tthis._setWarpMode(gl.TEXTURE_WRAP_S, this._wrapModeU);\r\n\t\t\tthis._setWarpMode(gl.TEXTURE_WRAP_T, this._wrapModeV);\r\n\t\t}\r\n\t\tthis._readyed = true;\r\n\t\tthis._activeResource();\r\n\t}\r\n\r\n\t/**\r\n\t * 通过图源设置一个面的颜色。\r\n\t * @param face 面。\r\n\t * @param imageSource 图源。 \r\n\t * @param miplevel 层级。\r\n\t */\r\n\tsetImageSource(face: TextureCubeFace, imageSource: HTMLImageElement | HTMLCanvasElement, miplevel: number = 0): void {\r\n\t\tvar width: number = this._width;\r\n\t\tvar height: number = this._height;\r\n\t\tif (imageSource) {//if is null will clear the face data\r\n\t\t\tif (width !== imageSource.width || height !== imageSource.height) {\r\n\t\t\t\tconsole.log(\"TextureCube: imageSource's width and height must same.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tWebGLContext.bindTexture(gl, this._glTextureType, this._glTexture);\r\n\t\tvar glFormat: number = this._getGLFormat();\r\n\t\tswitch (face) {\r\n\t\t\tcase TextureCubeFace.NegativeX:\r\n\t\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, miplevel, glFormat, glFormat, gl.UNSIGNED_BYTE, imageSource);//left\r\n\t\t\t\tbreak;\r\n\t\t\tcase TextureCubeFace.PositiveX:\r\n\t\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, miplevel, glFormat, glFormat, gl.UNSIGNED_BYTE, imageSource);//right\r\n\t\t\t\tbreak;\r\n\t\t\tcase TextureCubeFace.NegativeY:\r\n\t\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, miplevel, glFormat, glFormat, gl.UNSIGNED_BYTE, imageSource);//down\r\n\t\t\t\tbreak;\r\n\t\t\tcase TextureCubeFace.PositiveY:\r\n\t\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, miplevel, glFormat, glFormat, gl.UNSIGNED_BYTE, imageSource);//up\r\n\t\t\t\tbreak;\r\n\t\t\tcase TextureCubeFace.NegativeZ:\r\n\t\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, miplevel, glFormat, glFormat, gl.UNSIGNED_BYTE, imageSource);//front\r\n\t\t\t\tbreak;\r\n\t\t\tcase TextureCubeFace.PositiveZ:\r\n\t\t\t\tgl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, miplevel, glFormat, glFormat, gl.UNSIGNED_BYTE, imageSource);//back\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//TODO:\r\n\t\tif (this._mipmap && this._isPot(width) && this._isPot(height)) {\r\n\t\t\tgl.generateMipmap(this._glTextureType);\r\n\t\t\tthis._setGPUMemory(width * height * 4 * (1 + 1 / 3) * 6);\r\n\t\t} else {\r\n\t\t\tthis._setGPUMemory(width * height * 4 * 6);\r\n\t\t}\r\n\r\n\t\tthis._setWarpMode(gl.TEXTURE_WRAP_S, this._wrapModeU);\r\n\t\tthis._setWarpMode(gl.TEXTURE_WRAP_T, this._wrapModeV);\r\n\t\tthis._setFilterMode(this._filterMode);\r\n\t\tthis._readyed = true;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { DirectionLight } from \"./DirectionLight\";\r\nimport { LightSprite } from \"./LightSprite\";\r\nimport { SpotLight } from \"./SpotLight\";\r\n\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class LightQueue<T extends LightSprite> {\r\n    _length: number = 0;\r\n    _elements: T[] = [];\r\n\r\n    add(light: T): void {\r\n        if (this._length === this._elements.length)\r\n            this._elements.push(light);\r\n        else\r\n            this._elements[this._length] = light;\r\n        this._length++;\r\n    }\r\n\r\n    remove(light: T): void {\r\n        var index: number = this._elements.indexOf(light);\r\n        this._length--;\r\n        if (index !== this._length) {\r\n            var end: T = this._elements[this._length];\r\n            this._elements[index] = end;\r\n        }\r\n    }\r\n\r\n    shift(): T {\r\n        this._length--;\r\n        return this._elements.shift();\r\n    }\r\n\r\n    getBrightestLight():number{\r\n        var maxIntIndex;\r\n        var maxIntensity:number = -1;\r\n        var elements:T[] = this._elements;\r\n        for(var i:number = 0;i<this._length;i++){\r\n            var intensity:number = elements[i]._intensity;\r\n            if(maxIntensity<intensity)\r\n            {\r\n                maxIntensity = intensity;\r\n                maxIntIndex = i;\r\n            }\r\n        }\r\n        return maxIntIndex;\r\n    }\r\n    normalLightOrdering(brightestIndex:number){\r\n        var slements:T[] = this._elements;\r\n        var firstLight:T = this._elements[0];\r\n        this._elements[0] = this._elements[brightestIndex];\r\n        this._elements[brightestIndex] = firstLight;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class AlternateLightQueue extends LightQueue<LightSprite>{\r\n\r\n    remove(light: LightSprite): void {\r\n        //sort must base added time\r\n        var index: number = this._elements.indexOf(light);\r\n        this._elements.splice(index, 1);\r\n        this._length--;\r\n    }\r\n}\r\n","import { Vector4 } from \"../../math/Vector4\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { Material } from \"../material/Material\";\r\n\r\n/**\r\n * <code>PixelLineMaterial</code> 类用于实现像素线材质。\r\n */\r\nexport class PixelLineMaterial extends Material {\r\n\tstatic COLOR: number = Shader3D.propertyNameToID(\"u_Color\");\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: PixelLineMaterial;\r\n\r\n\r\n\tstatic CULL: number = Shader3D.propertyNameToID(\"s_Cull\");\r\n\tstatic BLEND: number = Shader3D.propertyNameToID(\"s_Blend\");\r\n\tstatic BLEND_SRC: number = Shader3D.propertyNameToID(\"s_BlendSrc\");\r\n\tstatic BLEND_DST: number = Shader3D.propertyNameToID(\"s_BlendDst\");\r\n\tstatic DEPTH_TEST: number = Shader3D.propertyNameToID(\"s_DepthTest\");\r\n\tstatic DEPTH_WRITE: number = Shader3D.propertyNameToID(\"s_DepthWrite\");\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __initDefine__(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色。\r\n\t * @return 颜色。\r\n\t */\r\n\tget color(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(PixelLineMaterial.COLOR));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置颜色。\r\n\t * @param value 颜色。\r\n\t */\r\n\tset color(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(PixelLineMaterial.COLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置是否写入深度。\r\n\t * @param value 是否写入深度。\r\n\t */\r\n\tset depthWrite(value: boolean) {\r\n\t\tthis._shaderValues.setBool(PixelLineMaterial.DEPTH_WRITE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取是否写入深度。\r\n\t * @return 是否写入深度。\r\n\t */\r\n\tget depthWrite(): boolean {\r\n\t\treturn this._shaderValues.getBool(PixelLineMaterial.DEPTH_WRITE);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置剔除方式。\r\n\t * @param value 剔除方式。\r\n\t */\r\n\tset cull(value: number) {\r\n\t\tthis._shaderValues.setInt(PixelLineMaterial.CULL, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取剔除方式。\r\n\t * @return 剔除方式。\r\n\t */\r\n\tget cull(): number {\r\n\t\treturn this._shaderValues.getInt(PixelLineMaterial.CULL);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置混合方式。\r\n\t * @param value 混合方式。\r\n\t */\r\n\tset blend(value: number) {\r\n\t\tthis._shaderValues.setInt(PixelLineMaterial.BLEND, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取混合方式。\r\n\t * @return 混合方式。\r\n\t */\r\n\tget blend(): number {\r\n\t\treturn this._shaderValues.getInt(PixelLineMaterial.BLEND);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置混合源。\r\n\t * @param value 混合源\r\n\t */\r\n\tset blendSrc(value: number) {\r\n\t\tthis._shaderValues.setInt(PixelLineMaterial.BLEND_SRC, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取混合源。\r\n\t * @return 混合源。\r\n\t */\r\n\tget blendSrc(): number {\r\n\t\treturn this._shaderValues.getInt(PixelLineMaterial.BLEND_SRC);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置混合目标。\r\n\t * @param value 混合目标\r\n\t */\r\n\tset blendDst(value: number) {\r\n\t\tthis._shaderValues.setInt(PixelLineMaterial.BLEND_DST, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取混合目标。\r\n\t * @return 混合目标。\r\n\t */\r\n\tget blendDst(): number {\r\n\t\treturn this._shaderValues.getInt(PixelLineMaterial.BLEND_DST);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置深度测试方式。\r\n\t * @param value 深度测试方式\r\n\t */\r\n\tset depthTest(value: number) {\r\n\t\tthis._shaderValues.setInt(PixelLineMaterial.DEPTH_TEST, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取深度测试方式。\r\n\t * @return 深度测试方式。\r\n\t */\r\n\tget depthTest(): number {\r\n\t\treturn this._shaderValues.getInt(PixelLineMaterial.DEPTH_TEST);\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"LineShader\");\r\n\t\tthis._shaderValues.setVector(PixelLineMaterial.COLOR, new Vector4(1.0, 1.0, 1.0, 1.0));\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: PixelLineMaterial = new PixelLineMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n","import { Vector3 } from \"./Vector3\";\r\nimport { Matrix4x4 } from \"./Matrix4x4\";\r\nimport { IClone } from \"../core/IClone\"\r\n\t\r\n\t/**\r\n\t * <code>BoundBox</code> 类用于创建包围盒。\r\n\t */\r\n\texport class BoundBox implements IClone {\r\n\t\t/**@internal */\r\n\t\tprivate static _tempVector30:Vector3 = new Vector3();\r\n\t\t/**@internal */\r\n\t\tprivate static _tempVector31:Vector3 = new Vector3();\r\n\t\t\r\n\t\t/**最小顶点。*/\r\n\t\t min:Vector3;\r\n\t\t/**最大顶点。*/\r\n\t\t max:Vector3;\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个 <code>BoundBox</code> 实例。\r\n\t\t * @param\tmin 包围盒的最小顶点。\r\n\t\t * @param\tmax 包围盒的最大顶点。\r\n\t\t */\r\n\t\tconstructor(min:Vector3, max:Vector3){\r\n\t\t\tthis.min = min;\r\n\t\t\tthis.max = max;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @internal\r\n\t\t */\r\n\t\tprivate _rotateExtents(extents:Vector3, rotation:Matrix4x4, out:Vector3):void {\r\n\t\t\tvar extentsX:number = extents.x;\r\n\t\t\tvar extentsY:number = extents.y;\r\n\t\t\tvar extentsZ:number = extents.z;\r\n\t\t\tvar matElements:Float32Array = rotation.elements;\r\n\t\t\tout.x = Math.abs(matElements[0] * extentsX) + Math.abs(matElements[4] * extentsY) + Math.abs(matElements[8] * extentsZ);\r\n\t\t\tout.y = Math.abs(matElements[1] * extentsX) + Math.abs(matElements[5] * extentsY) + Math.abs(matElements[9] * extentsZ);\r\n\t\t\tout.z = Math.abs(matElements[2] * extentsX) + Math.abs(matElements[6] * extentsY) + Math.abs(matElements[10] * extentsZ);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取包围盒的8个角顶点。\r\n\t\t * @param\tcorners 返回顶点的输出队列。\r\n\t\t */\r\n\t\t getCorners(corners:Vector3[]):void {\r\n\t\t\tcorners.length = 8;\r\n\t\t\tvar minX:number = this.min.x;\r\n\t\t\tvar minY:number = this.min.y;\r\n\t\t\tvar minZ:number = this.min.z;\r\n\t\t\tvar maxX:number = this.max.x;\r\n\t\t\tvar maxY:number = this.max.y;\r\n\t\t\tvar maxZ:number = this.max.z;\r\n\t\t\tcorners[0] = new Vector3(minX, maxY, maxZ);\r\n\t\t\tcorners[1] = new Vector3(maxX, maxY, maxZ);\r\n\t\t\tcorners[2] = new Vector3(maxX, minY, maxZ);\r\n\t\t\tcorners[3] = new Vector3(minX, minY, maxZ);\r\n\t\t\tcorners[4] = new Vector3(minX, maxY, minZ);\r\n\t\t\tcorners[5] = new Vector3(maxX, maxY, minZ);\r\n\t\t\tcorners[6] = new Vector3(maxX, minY, minZ);\r\n\t\t\tcorners[7] = new Vector3(minX, minY, minZ);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取中心点。\r\n\t\t * @param\tout\r\n\t\t */\r\n\t\t getCenter(out:Vector3):void {\r\n\t\t\tVector3.add(this.min, this.max, out);\r\n\t\t\tVector3.scale(out, 0.5, out);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取范围。\r\n\t\t * @param\tout\r\n\t\t */\r\n\t\t getExtent(out:Vector3):void {\r\n\t\t\tVector3.subtract(this.max, this.min, out);\r\n\t\t\tVector3.scale(out, 0.5, out);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置中心点和范围。\r\n\t\t * @param\tcenter\r\n\t\t */\r\n\t\t setCenterAndExtent(center:Vector3, extent:Vector3):void {\r\n\t\t\tVector3.subtract(center, extent, this.min);\r\n\t\t\tVector3.add(center, extent, this.max);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @internal\r\n\t\t */\r\n\t\t tranform(matrix:Matrix4x4, out:BoundBox):void {\r\n\t\t\tvar center:Vector3 = BoundBox._tempVector30;\r\n\t\t\tvar extent:Vector3 = BoundBox._tempVector31;\r\n\t\t\tthis.getCenter(center);\r\n\t\t\tthis.getExtent(extent);\r\n\t\t\tVector3.transformCoordinate(center, matrix, center);\r\n\t\t\tthis._rotateExtents(extent, matrix,extent);\r\n\t\t\tout.setCenterAndExtent(center,extent);\r\n\t\t}\r\n\t\t\r\n\t\t toDefault():void {\r\n\t\t\tthis.min.toDefault();\r\n\t\t\tthis.max.toDefault();\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 从顶点生成包围盒。\r\n\t\t * @param\tpoints 所需顶点队列。\r\n\t\t * @param\tout 生成的包围盒。\r\n\t\t */\r\n\t\t static createfromPoints(points:Vector3[], out:BoundBox):void {\r\n\t\t\tif (points == null)\r\n\t\t\t\tthrow new Error(\"points\");\r\n\t\t\t\r\n\t\t\tvar min:Vector3 = out.min;\r\n\t\t\tvar max:Vector3 = out.max;\r\n\t\t\tmin.x = Number.MAX_VALUE;\r\n\t\t\tmin.y = Number.MAX_VALUE;\r\n\t\t\tmin.z = Number.MAX_VALUE;\r\n\t\t\tmax.x = -Number.MAX_VALUE;\r\n\t\t\tmax.y = -Number.MAX_VALUE;\r\n\t\t\tmax.z = -Number.MAX_VALUE;\r\n\t\t\t\r\n\t\t\tfor (var i:number = 0, n:number = points.length; i < n; ++i) {\r\n\t\t\t\tVector3.min(min, points[i], min);\r\n\t\t\t\tVector3.max(max, points[i], max);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 合并两个包围盒。\r\n\t\t * @param\tbox1 包围盒1。\r\n\t\t * @param\tbox2 包围盒2。\r\n\t\t * @param\tout 生成的包围盒。\r\n\t\t */\r\n\t\t static merge(box1:BoundBox, box2:BoundBox, out:BoundBox):void {\r\n\t\t\tVector3.min(box1.min, box2.min, out.min);\r\n\t\t\tVector3.max(box1.max, box2.max, out.max);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 克隆。\r\n\t\t * @param\tdestObject 克隆源。\r\n\t\t */\r\n\t\t cloneTo(destObject:any):void {\r\n\t\t\tvar dest:BoundBox = (<BoundBox>destObject );\r\n\t\t\tthis.min.cloneTo(dest.min);\r\n\t\t\tthis.max.cloneTo(dest.max);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 克隆。\r\n\t\t * @return\t 克隆副本。\r\n\t\t */\r\n\t\t clone():any {\r\n\t\t\tvar dest:BoundBox = new BoundBox(new Vector3(),new Vector3());\r\n\t\t\tthis.cloneTo(dest);\r\n\t\t\treturn dest;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n\r\n","import { IClone } from \"./IClone\";\r\nimport { BoundBox } from \"../math/BoundBox\"\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\"\r\nimport { Vector3 } from \"../math/Vector3\"\r\n\r\n/**\r\n * <code>Bounds</code> 类用于创建包围体。\r\n */\r\nexport class Bounds implements IClone {\r\n\t/**@internal */\r\n\tstatic _UPDATE_MIN: number = 0x01;\r\n\t/**@internal */\r\n\tstatic _UPDATE_MAX: number = 0x02;\r\n\t/**@internal */\r\n\tstatic _UPDATE_CENTER: number = 0x04;\r\n\t/**@internal */\r\n\tstatic _UPDATE_EXTENT: number = 0x08;\r\n\r\n\tstatic TEMP_VECTOR3_MAX0:Vector3 = new Vector3();\r\n\tstatic TEMP_VECTOR3_MAX1:Vector3 = new Vector3();\r\n\r\n\tprivate _updateFlag: number = 0;\r\n\r\n\t/**@internal\t*/\r\n\t_center: Vector3 = new Vector3();\r\n\t/**@internal\t*/\r\n\t_extent: Vector3 = new Vector3();\r\n\t/***/\r\n\t_boundBox: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\r\n\t/**\r\n\t * 设置包围盒的最小点。\r\n\t * @param value\t包围盒的最小点。\r\n\t */\r\n\tsetMin(value: Vector3): void {\r\n\t\tvar min: Vector3 = this._boundBox.min;\r\n\t\tif (value !== min)\r\n\t\t\tvalue.cloneTo(min);\r\n\t\tthis._setUpdateFlag(Bounds._UPDATE_CENTER | Bounds._UPDATE_EXTENT, true);\r\n\t\tthis._setUpdateFlag(Bounds._UPDATE_MIN, false);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取包围盒的最小点。\r\n\t * @return\t包围盒的最小点。\r\n\t */\r\n\tgetMin(): Vector3 {\r\n\t\tvar min: Vector3 = this._boundBox.min;\r\n\t\tif (this._getUpdateFlag(Bounds._UPDATE_MIN)) {\r\n\t\t\tthis._getMin(this.getCenter(), this.getExtent(), min);\r\n\t\t\tthis._setUpdateFlag(Bounds._UPDATE_MIN, false);\r\n\t\t}\r\n\t\treturn min;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置包围盒的最大点。\r\n\t * @param value\t包围盒的最大点。\r\n\t */\r\n\tsetMax(value: Vector3): void {\r\n\t\tvar max: Vector3 = this._boundBox.max;\r\n\t\tif (value !== max)\r\n\t\t\tvalue.cloneTo(max);\r\n\t\tthis._setUpdateFlag(Bounds._UPDATE_CENTER | Bounds._UPDATE_EXTENT, true);\r\n\t\tthis._setUpdateFlag(Bounds._UPDATE_MAX, false);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取包围盒的最大点。\r\n\t * @return\t包围盒的最大点。\r\n\t */\r\n\tgetMax(): Vector3 {\r\n\t\tvar max: Vector3 = this._boundBox.max;\r\n\t\tif (this._getUpdateFlag(Bounds._UPDATE_MAX)) {\r\n\t\t\tthis._getMax(this.getCenter(), this.getExtent(), max);\r\n\t\t\tthis._setUpdateFlag(Bounds._UPDATE_MAX, false);\r\n\t\t}\r\n\t\treturn max;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置包围盒的中心点。\r\n\t * @param value\t包围盒的中心点。\r\n\t */\r\n\tsetCenter(value: Vector3): void {\r\n\t\tif (value !== this._center)\r\n\t\t\tvalue.cloneTo(this._center);\r\n\t\tthis._setUpdateFlag(Bounds._UPDATE_MIN | Bounds._UPDATE_MAX, true);\r\n\t\tthis._setUpdateFlag(Bounds._UPDATE_CENTER, false);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取包围盒的中心点。\r\n\t * @return\t包围盒的中心点。\r\n\t */\r\n\tgetCenter(): Vector3 {\r\n\t\tif (this._getUpdateFlag(Bounds._UPDATE_CENTER)) {\r\n\t\t\tthis._getCenter(this.getMin(), this.getMax(), this._center);\r\n\t\t\tthis._setUpdateFlag(Bounds._UPDATE_CENTER, false);\r\n\t\t}\r\n\t\treturn this._center;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置包围盒的范围。\r\n\t * @param value\t包围盒的范围。\r\n\t */\r\n\tsetExtent(value: Vector3): void {\r\n\t\tif (value !== this._extent)\r\n\t\t\tvalue.cloneTo(this._extent);\r\n\t\tthis._setUpdateFlag(Bounds._UPDATE_MIN | Bounds._UPDATE_MAX, true);\r\n\t\tthis._setUpdateFlag(Bounds._UPDATE_EXTENT, false);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取包围盒的范围。\r\n\t * @return\t包围盒的范围。\r\n\t */\r\n\tgetExtent(): Vector3 {\r\n\t\tif (this._getUpdateFlag(Bounds._UPDATE_EXTENT)) {\r\n\t\t\tthis._getExtent(this.getMin(), this.getMax(), this._extent);\r\n\t\t\tthis._setUpdateFlag(Bounds._UPDATE_EXTENT, false);\r\n\t\t}\r\n\t\treturn this._extent;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Bounds</code> 实例。\r\n\t * @param\tmin  min 最小坐标\r\n\t * @param\tmax  max 最大坐标。\r\n\t */\r\n\tconstructor(min: Vector3, max: Vector3) {\r\n\t\tmin.cloneTo(this._boundBox.min);\r\n\t\tmax.cloneTo(this._boundBox.max);\r\n\t\tthis._setUpdateFlag(Bounds._UPDATE_CENTER | Bounds._UPDATE_EXTENT, true);\r\n\t}\r\n\r\n\r\n\tprivate _getUpdateFlag(type: number): boolean {\r\n\t\treturn (this._updateFlag & type) != 0;\r\n\t}\r\n\r\n\r\n\tprivate _setUpdateFlag(type: number, value: boolean): void {\r\n\t\tif (value)\r\n\t\t\tthis._updateFlag |= type;\r\n\t\telse\r\n\t\t\tthis._updateFlag &= ~type;\r\n\t}\r\n\r\n\r\n\tprivate _getCenter(min: Vector3, max: Vector3, out: Vector3): void {\r\n\t\tVector3.add(min, max, out);\r\n\t\tVector3.scale(out, 0.5, out);\r\n\t}\r\n\r\n\r\n\tprivate _getExtent(min: Vector3, max: Vector3, out: Vector3): void {\r\n\t\tVector3.subtract(max, min, out);\r\n\t\tVector3.scale(out, 0.5, out);\r\n\t}\r\n\r\n\r\n\tprivate _getMin(center: Vector3, extent: Vector3, out: Vector3): void {\r\n\t\tVector3.subtract(center, extent, out);\r\n\t}\r\n\r\n\r\n\tprivate _getMax(center: Vector3, extent: Vector3, out: Vector3): void {\r\n\t\tVector3.add(center, extent, out);\r\n\t}\r\n\r\n\tprivate _rotateExtents(extents: Vector3, rotation: Matrix4x4, out: Vector3): void {\r\n\t\tvar extentsX: number = extents.x;\r\n\t\tvar extentsY: number = extents.y;\r\n\t\tvar extentsZ: number = extents.z;\r\n\t\tvar matE: Float32Array = rotation.elements;\r\n\t\tout.x = Math.abs(matE[0] * extentsX) + Math.abs(matE[4] * extentsY) + Math.abs(matE[8] * extentsZ);\r\n\t\tout.y = Math.abs(matE[1] * extentsX) + Math.abs(matE[5] * extentsY) + Math.abs(matE[9] * extentsZ);\r\n\t\tout.z = Math.abs(matE[2] * extentsX) + Math.abs(matE[6] * extentsY) + Math.abs(matE[10] * extentsZ);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_tranform(matrix: Matrix4x4, out: Bounds): void {\r\n\t\tvar outCen: Vector3 = out._center;\r\n\t\tvar outExt: Vector3 = out._extent;\r\n\r\n\t\tVector3.transformCoordinate(this.getCenter(), matrix, outCen);\r\n\t\tthis._rotateExtents(this.getExtent(), matrix, outExt);\r\n\r\n\t\tout._boundBox.setCenterAndExtent(outCen, outExt);\r\n\t\tout._updateFlag = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getBoundBox(): BoundBox {\r\n\t\tif (this._updateFlag & Bounds._UPDATE_MIN) {\r\n\t\t\tvar min: Vector3 = this._boundBox.min;\r\n\t\t\tthis._getMin(this.getCenter(), this.getExtent(), min);\r\n\t\t\tthis._setUpdateFlag(Bounds._UPDATE_MIN, false);\r\n\t\t}\r\n\t\tif (this._updateFlag & Bounds._UPDATE_MAX) {\r\n\t\t\tvar max: Vector3 = this._boundBox.max;\r\n\t\t\tthis._getMax(this.getCenter(), this.getExtent(), max);\r\n\t\t\tthis._setUpdateFlag(Bounds._UPDATE_MAX, false);\r\n\t\t}\r\n\t\treturn this._boundBox;\r\n\t}\r\n\r\n\t/**\r\n\t * @returns -1为不相交 不为0的时候返回值为相交体积\r\n\t */\r\n\tcalculateBoundsintersection(bounds:Bounds):number{\r\n\t\tvar ownMax:Vector3 = this.getMax();\r\n\t\tvar ownMin:Vector3 = this.getMin();\r\n\t\tvar calMax:Vector3 = bounds.getMax();\r\n\t\tvar calMin:Vector3 = bounds.getMin();\r\n\t\tvar tempV0:Vector3 = Bounds.TEMP_VECTOR3_MAX0;\r\n\t\tvar tempV1:Vector3 = Bounds.TEMP_VECTOR3_MAX1;\r\n\t\tvar thisExtends:Vector3 = this.getExtent();\r\n\t\tvar boundExtends:Vector3 =bounds.getExtent();\r\n\t\ttempV0.setValue(Math.max(ownMax.x,calMax.x)-Math.min(ownMin.x,calMin.x),\r\n\t\t\tMath.max(ownMax.y,calMax.y)-Math.min(ownMin.y,calMin.y),\r\n\t\t\tMath.max(ownMax.z,calMax.z)-Math.min(ownMin.z,calMin.z));\r\n\t\ttempV1.setValue((thisExtends.x+boundExtends.x)*2.0,\r\n\t\t\t(thisExtends.y+boundExtends.y)*2.0,\r\n\t\t\t(thisExtends.z+boundExtends.z)*2.0); \r\n\t\tif((tempV0.x)>=(tempV1.x)) return -1;\r\n\t\tif((tempV0.y)>=(tempV1.y)) return -1;\r\n\t\tif((tempV0.z)>=(tempV1.z)) return -1;\r\n\t\treturn (tempV1.x-tempV0.x)*(tempV1.y-tempV0.y)*(tempV1.z-tempV0.z);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destBounds: Bounds = (<Bounds>destObject);\r\n\t\tthis.getMin().cloneTo(destBounds._boundBox.min);\r\n\t\tthis.getMax().cloneTo(destBounds._boundBox.max);\r\n\t\tthis.getCenter().cloneTo(destBounds._center);\r\n\t\tthis.getExtent().cloneTo(destBounds._extent);\r\n\t\tdestBounds._updateFlag = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: Bounds = new Bounds(new Vector3(), new Vector3());\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { RenderContext3D } from \"./render/RenderContext3D\"\r\nimport { IDestroy } from \"../../resource/IDestroy\"\r\n\r\n/**\r\n * <code>GeometryElement</code> 类用于实现几何体元素,该类为抽象类。\r\n */\r\nexport class GeometryElement implements IDestroy {\r\n\t/**@internal */\r\n\tprotected static _typeCounter: number = 0;\r\n\r\n\t/**@internal */\r\n\tprotected _destroyed: boolean;\r\n\r\n\t/**\r\n\t * 获取是否销毁。\r\n\t * @return 是否销毁。\r\n\t */\r\n\tget destroyed(): boolean {\r\n\t\treturn this._destroyed;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GeometryElement</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\tthis._destroyed = false;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取几何体类型。\r\n\t */\r\n\t_getType(): number {\r\n\t\tthrow \"GeometryElement:must override it.\";\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @return  是否需要渲染。\r\n\t */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_render(state: RenderContext3D): void {\r\n\t\tthrow \"GeometryElement:must override it.\";\r\n\t}\r\n\r\n\t/**\r\n\t * 销毁。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._destroyed)\r\n\t\t\treturn;\r\n\t\tthis._destroyed = true;\r\n\t}\r\n}\r\n\r\n","import { VertexMesh } from \"../../graphics/Vertex/VertexMesh\"\r\nimport { VertexDeclaration } from \"../../graphics/VertexDeclaration\"\r\nimport { VertexElement } from \"../../graphics/VertexElement\"\r\nimport { VertexElementFormat } from \"../../graphics/VertexElementFormat\"\r\n/**\r\n * ...\r\n * @author \r\n */\r\nexport class PixelLineVertex {\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn PixelLineVertex._vertexDeclaration;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tPixelLineVertex._vertexDeclaration = new VertexDeclaration(28,\r\n\t\t\t[new VertexElement(0, VertexElementFormat.Vector3, VertexMesh.MESH_POSITION0),\r\n\t\t\tnew VertexElement(12, VertexElementFormat.Vector4, VertexMesh.MESH_COLOR0)]);\r\n\t}\r\n\r\n\tget vertexDeclaration(): VertexDeclaration {\r\n\t\treturn PixelLineVertex._vertexDeclaration;\r\n\t}\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Color } from \"../../math/Color\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Bounds } from \"../Bounds\";\r\nimport { BufferState } from \"../BufferState\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { PixelLineData } from \"./PixelLineData\";\r\nimport { PixelLineSprite3D } from \"./PixelLineSprite3D\";\r\nimport { PixelLineVertex } from \"./PixelLineVertex\";\r\n\r\n/**\r\n * <code>PixelLineFilter</code> 类用于线过滤器。\r\n */\r\nexport class PixelLineFilter extends GeometryElement {\r\n\t/** @private */\r\n\tprivate static _tempVector0: Vector3 = new Vector3();\r\n\t/** @private */\r\n\tprivate static _tempVector1: Vector3 = new Vector3();\r\n\r\n\t/**@internal */\r\n\tprivate static _type: number = GeometryElement._typeCounter++;\r\n\r\n\t/** @internal */\r\n\tprivate _floatCountPerVertices: number = 7;\r\n\r\n\t/** @internal */\r\n\tprivate _owner: PixelLineSprite3D;\r\n\t/** @internal */\r\n\tprivate _vertexBuffer: VertexBuffer3D;\r\n\t/** @internal */\r\n\tprivate _vertices: Float32Array;\r\n\t/** @internal */\r\n\tprivate _minUpdate: number = Number.MAX_VALUE;\r\n\t/** @internal */\r\n\tprivate _maxUpdate: number = Number.MIN_VALUE;\r\n\t/** @internal */\r\n\tprivate _bufferState: BufferState = new BufferState();\r\n\t/** @internal */\r\n\tprivate _floatBound: Float32Array = new Float32Array(6);\r\n\t/** @internal */\r\n\tprivate _calculateBound: boolean = false;\r\n\r\n\t/** @internal */\r\n\t_bounds: Bounds;\r\n\t/** @internal */\r\n\t_maxLineCount: number = 0;\r\n\t/** @internal */\r\n\t_lineCount: number = 0;\r\n\r\n\tconstructor(owner: PixelLineSprite3D, maxLineCount: number) {\r\n\t\tsuper();\r\n\t\tvar pointCount: number = maxLineCount * 2;\r\n\t\tthis._owner = owner;\r\n\t\tthis._maxLineCount = maxLineCount;\r\n\t\tthis._vertices = new Float32Array(pointCount * this._floatCountPerVertices);\r\n\t\tthis._vertexBuffer = new VertexBuffer3D(PixelLineVertex.vertexDeclaration.vertexStride * pointCount, LayaGL.instance.STATIC_DRAW, false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = PixelLineVertex.vertexDeclaration;\r\n\r\n\t\tthis._bufferState.bind();\r\n\t\tthis._bufferState.applyVertexBuffer(this._vertexBuffer);\r\n\t\tthis._bufferState.unBind();\r\n\r\n\t\tvar min: Vector3 = PixelLineFilter._tempVector0;\r\n\t\tvar max: Vector3 = PixelLineFilter._tempVector1;\r\n\t\tmin.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\t\tmax.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\t\tthis._bounds = new Bounds(min, max);\r\n\t}\r\n\r\n\t/**\r\n\t *\t{@inheritDoc PixelLineFilter._getType}\r\n\t *\t@override\r\n\t */\r\n\t_getType(): number {\r\n\t\treturn PixelLineFilter._type;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_resizeLineData(maxCount: number): void {\r\n\t\tvar pointCount: number = maxCount * 2;\r\n\t\tvar lastVertices: Float32Array = this._vertices;\r\n\r\n\t\tthis._vertexBuffer.destroy();\r\n\t\tthis._maxLineCount = maxCount;\r\n\r\n\t\tvar vertexCount: number = pointCount * this._floatCountPerVertices;\r\n\t\tthis._vertices = new Float32Array(vertexCount);\r\n\t\tthis._vertexBuffer = new VertexBuffer3D(PixelLineVertex.vertexDeclaration.vertexStride * pointCount, LayaGL.instance.STATIC_DRAW, false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = PixelLineVertex.vertexDeclaration;\r\n\r\n\t\tif (vertexCount < lastVertices.length) {//取最小长度,拷贝旧数据\r\n\t\t\tthis._vertices.set(new Float32Array(lastVertices.buffer, 0, vertexCount));\r\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, 0, 0, vertexCount * 4);\r\n\t\t} else {\r\n\t\t\tthis._vertices.set(lastVertices);\r\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, 0, 0, lastVertices.length * 4);\r\n\t\t}\r\n\r\n\t\tthis._bufferState.bind();\r\n\t\tthis._bufferState.applyVertexBuffer(this._vertexBuffer);\r\n\t\tthis._bufferState.unBind();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _updateLineVertices(offset: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n\t\tif (startPosition) {\r\n\t\t\tthis._vertices[offset + 0] = startPosition.x;\r\n\t\t\tthis._vertices[offset + 1] = startPosition.y;\r\n\t\t\tthis._vertices[offset + 2] = startPosition.z;\r\n\t\t}\r\n\r\n\t\tif (startColor) {\r\n\t\t\tthis._vertices[offset + 3] = startColor.r;\r\n\t\t\tthis._vertices[offset + 4] = startColor.g;\r\n\t\t\tthis._vertices[offset + 5] = startColor.b;\r\n\t\t\tthis._vertices[offset + 6] = startColor.a;\r\n\t\t}\r\n\r\n\t\tif (endPosition) {\r\n\t\t\tthis._vertices[offset + 7] = endPosition.x;\r\n\t\t\tthis._vertices[offset + 8] = endPosition.y;\r\n\t\t\tthis._vertices[offset + 9] = endPosition.z;\r\n\t\t}\r\n\r\n\t\tif (endColor) {\r\n\t\t\tthis._vertices[offset + 10] = endColor.r;\r\n\t\t\tthis._vertices[offset + 11] = endColor.g;\r\n\t\t\tthis._vertices[offset + 12] = endColor.b;\r\n\t\t\tthis._vertices[offset + 13] = endColor.a;\r\n\t\t}\r\n\t\tthis._minUpdate = Math.min(this._minUpdate, offset);\r\n\t\tthis._maxUpdate = Math.max(this._maxUpdate, offset + this._floatCountPerVertices * 2);\r\n\r\n\t\t//expand bound\r\n\t\tvar bounds: Bounds = this._bounds;\r\n\t\tvar floatBound: Float32Array = this._floatBound;\r\n\t\tvar min: Vector3 = bounds.getMin(), max: Vector3 = bounds.getMax();\r\n\t\tVector3.min(min, startPosition, min);\r\n\t\tVector3.min(min, endPosition, min);\r\n\t\tVector3.max(max, startPosition, max);\r\n\t\tVector3.max(max, endPosition, max);\r\n\t\tbounds.setMin(min);\r\n\t\tbounds.setMax(max);\r\n\t\tfloatBound[0] = min.x, floatBound[1] = min.y, floatBound[2] = min.z;\r\n\t\tfloatBound[3] = max.x, floatBound[4] = max.y, floatBound[5] = max.z;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_reCalculateBound(): void {\r\n\t\tif (this._calculateBound) {\r\n\t\t\tvar vertices: Float32Array = this._vertices;\r\n\t\t\tvar min: Vector3 = PixelLineFilter._tempVector0;\r\n\t\t\tvar max: Vector3 = PixelLineFilter._tempVector1;\r\n\t\t\tmin.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\t\t\tmax.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\t\t\tfor (var i: number = 0; i < this._lineCount * 2; ++i) {\r\n\t\t\t\tvar offset: number = this._floatCountPerVertices * i;\r\n\t\t\t\tvar x: number = vertices[offset + 0], y: number = vertices[offset + 1], z: number = vertices[offset + 2];\r\n\t\t\t\tmin.x = Math.min(x, min.x);\r\n\t\t\t\tmin.y = Math.min(y, min.y);\r\n\t\t\t\tmin.z = Math.min(z, min.z);\r\n\t\t\t\tmax.x = Math.max(x, max.x);\r\n\t\t\t\tmax.y = Math.max(y, max.y);\r\n\t\t\t\tmax.z = Math.max(z, max.z);\r\n\t\t\t}\r\n\t\t\tthis._bounds.setMin(min);\r\n\t\t\tthis._bounds.setMax(max);\r\n\t\t\tvar floatBound: Float32Array = this._floatBound;\r\n\t\t\tfloatBound[0] = min.x, floatBound[1] = min.y, floatBound[2] = min.z;\r\n\t\t\tfloatBound[3] = max.x, floatBound[4] = max.y, floatBound[5] = max.z;\r\n\t\t\tthis._calculateBound = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removeLineData(index: number): void {\r\n\t\tvar floatCount: number = this._floatCountPerVertices * 2;\r\n\t\tvar nextIndex: number = index + 1;\r\n\t\tvar offset: number = index * floatCount;\r\n\r\n\t\tvar vertices: Float32Array = this._vertices;\r\n\t\tvar rightPartVertices: Float32Array = new Float32Array(vertices.buffer, nextIndex * floatCount * 4, (this._lineCount - nextIndex) * floatCount);\r\n\t\tvertices.set(rightPartVertices, offset);\r\n\t\tthis._minUpdate = Math.min(this._minUpdate, offset);\r\n\t\tthis._maxUpdate = Math.max(this._maxUpdate, offset + rightPartVertices.length);\r\n\t\tthis._lineCount--;\r\n\r\n\t\tvar floatBound: Float32Array = this._floatBound;\r\n\t\tvar startX: number = vertices[offset], startY: number = vertices[offset + 1], startZ: number = vertices[offset + 2];\r\n\t\tvar endX: number = vertices[offset + 7], endY: number = vertices[offset + 8], endZ: number = vertices[offset + 9];\r\n\t\tvar minX: number = floatBound[0], minY: number = floatBound[1], minZ: number = floatBound[2];\r\n\t\tvar maxX: number = floatBound[3], maxY: number = floatBound[4], maxZ: number = floatBound[5];\r\n\r\n\t\tif ((startX === minX) || (startX === maxX) || (startY === minY) || (startY === maxY) || (startZ === minZ) || (startZ === maxZ) ||\r\n\t\t\t(endX === minX) || (endX === maxX) || (endY === minY) || (endY === maxY) || (endZ === minZ) || (endZ === maxZ))\r\n\t\t\tthis._calculateBound = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateLineData(index: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n\t\tvar floatCount: number = this._floatCountPerVertices * 2;\r\n\t\tthis._updateLineVertices(index * floatCount, startPosition, endPosition, startColor, endColor);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateLineDatas(index: number, data: PixelLineData[]): void {\r\n\t\tvar floatCount: number = this._floatCountPerVertices * 2;\r\n\t\tvar count: number = data.length;\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tvar line: PixelLineData = data[i];\r\n\t\t\tthis._updateLineVertices((index + i) * floatCount, line.startPosition, line.endPosition, line.startColor, line.endColor);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取线段数据\r\n\t * @return 线段数据。\r\n\t */\r\n\t_getLineData(index: number, out: PixelLineData): void {\r\n\t\tvar startPosition: Vector3 = out.startPosition;\r\n\t\tvar startColor: Color = out.startColor;\r\n\t\tvar endPosition: Vector3 = out.endPosition;\r\n\t\tvar endColor: Color = out.endColor;\r\n\r\n\t\tvar vertices: Float32Array = this._vertices;\r\n\t\tvar offset: number = index * this._floatCountPerVertices * 2;\r\n\r\n\t\tstartPosition.x = vertices[offset + 0];\r\n\t\tstartPosition.y = vertices[offset + 1];\r\n\t\tstartPosition.z = vertices[offset + 2];\r\n\t\tstartColor.r = vertices[offset + 3];\r\n\t\tstartColor.g = vertices[offset + 4];\r\n\t\tstartColor.b = vertices[offset + 5];\r\n\t\tstartColor.a = vertices[offset + 6];\r\n\r\n\t\tendPosition.x = vertices[offset + 7];\r\n\t\tendPosition.y = vertices[offset + 8];\r\n\t\tendPosition.z = vertices[offset + 9];\r\n\t\tendColor.r = vertices[offset + 10];\r\n\t\tendColor.g = vertices[offset + 11];\r\n\t\tendColor.b = vertices[offset + 12];\r\n\t\tendColor.a = vertices[offset + 13];\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_render(state: RenderContext3D): void {\r\n\t\tif (this._minUpdate !== Number.MAX_VALUE && this._maxUpdate !== Number.MIN_VALUE) {\r\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, this._minUpdate * 4, this._minUpdate * 4, (this._maxUpdate - this._minUpdate) * 4);\r\n\t\t\tthis._minUpdate = Number.MAX_VALUE;\r\n\t\t\tthis._maxUpdate = Number.MIN_VALUE;\r\n\t\t}\r\n\r\n\t\tif (this._lineCount > 0) {\r\n\t\t\tthis._bufferState.bind();\r\n\t\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\t\tgl.drawArrays(gl.LINES, 0, this._lineCount * 2);\r\n\t\t\tStat.renderBatches++;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy();\r\n\t\tthis._bufferState.destroy();\r\n\t\tthis._vertexBuffer.destroy();\r\n\t\tthis._bufferState = null;\r\n\t\tthis._vertexBuffer = null;\r\n\t\tthis._vertices = null;\r\n\t}\r\n}\r\n\r\n","import { Node } from \"../../display/Node\";\r\nimport { Animator } from \"../component/Animator\";\r\nimport { Vector4 } from \"../math/Vector4\";\r\nimport { Shader3D } from \"../shader/Shader3D\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { BaseRender } from \"./render/BaseRender\";\r\nimport { Scene3D } from \"./scene/Scene3D\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\nimport { ShaderDefine } from \"../shader/ShaderDefine\";\r\n\r\n/**\r\n * <code>RenderableSprite3D</code> 类用于可渲染3D精灵的父类，抽象类不允许实例。\r\n */\r\nexport class RenderableSprite3D extends Sprite3D {\r\n\t/**精灵级着色器宏定义,接收阴影。*/\r\n\tstatic SHADERDEFINE_RECEIVE_SHADOW: ShaderDefine;\r\n\t/**精灵级着色器宏定义,光照贴图。*/\r\n\tstatic SAHDERDEFINE_LIGHTMAP: ShaderDefine;\r\n\t/**精灵级着色器宏定义,光照贴图方向。 */\r\n\tstatic SHADERDEFINE_LIGHTMAP_DIRECTIONAL: ShaderDefine;\r\n\r\n\t/**着色器变量名，光照贴图缩放和偏移。*/\r\n\tstatic LIGHTMAPSCALEOFFSET: number = Shader3D.propertyNameToID(\"u_LightmapScaleOffset\");\r\n\t/**着色器变量名，光照贴图。*/\r\n\tstatic LIGHTMAP: number = Shader3D.propertyNameToID(\"u_LightMap\");\r\n\t/**着色器变量名，光照贴图方向。*/\r\n\tstatic LIGHTMAP_DIRECTION: number = Shader3D.propertyNameToID(\"u_LightMapDirection\");\r\n\t/**拾取颜色。*/\r\n\tstatic PICKCOLOR: number = Shader3D.propertyNameToID(\"u_PickColor\");\r\n\t/** 反射贴图 */\r\n\tstatic REFLECTIONTEXTURE:number = Shader3D.propertyNameToID(\"u_ReflectTexture\");\r\n\t/** 反射贴图参数 */\r\n\tstatic REFLECTIONCUBE_HDR_PARAMS:number = Shader3D.propertyNameToID(\"u_ReflectCubeHDRParams\");\r\n\t/** 反射探针位置 最大最小值*/\r\n\tstatic REFLECTIONCUBE_PROBEPOSITION:number = Shader3D.propertyNameToID(\"u_SpecCubeProbePosition\");\r\n\tstatic REFLECTIONCUBE_PROBEBOXMAX:number = Shader3D.propertyNameToID(\"u_SpecCubeBoxMax\");\r\n\tstatic REFLECTIONCUBE_PROBEBOXMIN:number = Shader3D.propertyNameToID(\"u_SpecCubeBoxMin\");\r\n\tpickColor: Vector4;\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tRenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW = Shader3D.getDefineByName(\"RECEIVESHADOW\");\r\n\t\tRenderableSprite3D.SAHDERDEFINE_LIGHTMAP = Shader3D.getDefineByName(\"LIGHTMAP\");\r\n\t\tRenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL = Shader3D.getDefineByName(\"LIGHTMAP_DIRECTIONAL\");\r\n\t}\r\n\r\n\t/** @internal */\r\n\t_render: BaseRender;\r\n\r\n\t/**\r\n\t * 创建一个 <code>RenderableSprite3D</code> 实例。\r\n\t */\r\n\tconstructor(name: string) {\r\n\t\tsuper(name);\r\n\t}\r\n\r\n\t/** \r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onInActive(): void {\r\n\t\tsuper._onInActive();\r\n\t\t(<Scene3D>this._scene)._removeRenderObject(this._render);\r\n\r\n\t}\r\n\r\n\t/** \r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onActive(): void {\r\n\t\tsuper._onActive();\r\n\t\t(<Scene3D>this._scene)._addRenderObject(this._render);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onActiveInScene(): void {\r\n\t\tsuper._onActiveInScene();\r\n\r\n\t\tif (ILaya3D.Laya3D._editerEnvironment) {\r\n\t\t\tvar scene: Scene3D = (<Scene3D>this._scene);\r\n\t\t\tvar pickColor: Vector4 = new Vector4();\r\n\t\t\tscene._allotPickColorByID(this.id, pickColor);\r\n\t\t\tscene._pickIdToSprite[this.id] = this;\r\n\t\t\tthis._render._shaderValues.setVector(RenderableSprite3D.PICKCOLOR, pickColor);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addToInitStaticBatchManager(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_setBelongScene(scene: Node): void {\r\n\t\tsuper._setBelongScene(scene);\r\n\t\tthis._render._setBelongScene(<Scene3D>scene);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_setUnBelongScene(): void {\r\n\t\tthis._render._shaderValues.removeDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP);\r\n\t\tsuper._setUnBelongScene();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _changeHierarchyAnimator(animator: Animator): void {\r\n\t\tif (this._hierarchyAnimator) {\r\n\t\t\tvar renderableSprites: RenderableSprite3D[] = this._hierarchyAnimator._renderableSprites;\r\n\t\t\trenderableSprites.splice(renderableSprites.indexOf(this), 1);\r\n\t\t}\r\n\t\tif (animator)\r\n\t\t\tanimator._renderableSprites.push(this);\r\n\r\n\t\tsuper._changeHierarchyAnimator(animator);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(destroyChild: boolean = true): void {\r\n\t\tsuper.destroy(destroyChild);\r\n\t\tthis._render._destroy();\r\n\t\tthis._render = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new RenderableSprite3D(this.name);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","/**\r\n * @internal\r\n */\r\nexport class BatchMark {\r\n\t/**@internal */\r\n\tupdateMark: number = -1;\r\n\t/**@internal */\r\n\tindexInList: number = -1;\r\n\t/**@internal */\r\n\tbatched: boolean = false;\r\n}\r\n\r\n","import { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { GeometryElement } from \"../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\r\nimport { SubMeshRenderElement } from \"../core/render/SubMeshRenderElement\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\nimport { VertexBuffer3D } from \"./VertexBuffer3D\";\r\nimport { VertexMesh } from \"./Vertex/VertexMesh\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class SubMeshInstanceBatch extends GeometryElement {\r\n\t/** @internal */\r\n\tstatic instance: SubMeshInstanceBatch;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tSubMeshInstanceBatch.instance = new SubMeshInstanceBatch();\r\n\t}\r\n\r\n\t/** @internal */\r\n\tmaxInstanceCount: number = 1024;\r\n\r\n\t/** @internal */\r\n\tinstanceWorldMatrixData: Float32Array = new Float32Array(this.maxInstanceCount * 16);\r\n\t/** @internal */\r\n\tinstanceMVPMatrixData: Float32Array = new Float32Array(this.maxInstanceCount * 16);\r\n\t/** @internal */\r\n\tinstanceWorldMatrixBuffer: VertexBuffer3D;\r\n\t/** @internal */\r\n\tinstanceMVPMatrixBuffer: VertexBuffer3D;\r\n\r\n\t/**SimpleAnimator */\r\n\t/** @internal */\r\n\tinstanceSimpleAnimatorData:Float32Array = new Float32Array(this.maxInstanceCount*4);\r\n\r\n\t/** @internal */\r\n\tinstanceSimpleAnimatorBuffer:VertexBuffer3D;\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>InstanceSubMesh</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tthis.instanceWorldMatrixBuffer = new VertexBuffer3D(this.instanceWorldMatrixData.length * 4, gl.DYNAMIC_DRAW);\r\n\t\tthis.instanceMVPMatrixBuffer = new VertexBuffer3D(this.instanceMVPMatrixData.length * 4, gl.DYNAMIC_DRAW);\r\n\t\tthis.instanceWorldMatrixBuffer.vertexDeclaration = VertexMesh.instanceWorldMatrixDeclaration;\r\n\t\tthis.instanceMVPMatrixBuffer.vertexDeclaration = VertexMesh.instanceMVPMatrixDeclaration;\r\n\t\t//SImpleAnimator\r\n\t\tthis.instanceSimpleAnimatorBuffer = new VertexBuffer3D(this.instanceSimpleAnimatorData.length*4,gl.DYNAMIC_DRAW);\r\n\t\tthis.instanceSimpleAnimatorBuffer.vertexDeclaration = VertexMesh.instanceSimpleAnimatorDeclaration;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_render(state: RenderContext3D): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar element: SubMeshRenderElement = (<SubMeshRenderElement>state.renderElement);\r\n\t\tvar subMesh: SubMesh = element.instanceSubMesh;\r\n\t\tvar count: number = element.instanceBatchElementList.length;\r\n\t\tvar indexCount: number = subMesh._indexCount;\r\n\t\tsubMesh._mesh._instanceBufferState.bind();\r\n\t\tLayaGL.layaGPUInstance.drawElementsInstanced(gl.TRIANGLES, indexCount, gl.UNSIGNED_SHORT, subMesh._indexStart * 2, count);\r\n\t\tStat.renderBatches++;\r\n\t\tStat.savedRenderBatches += count - 1;\r\n\t\tStat.trianglesFaces += indexCount * count / 3;\r\n\t}\r\n\r\n\r\n}\r\n\r\n","import { BaseRender } from \"./BaseRender\";\r\nimport { RenderContext3D } from \"./RenderContext3D\";\r\nimport { RenderQueue } from \"./RenderQueue\";\r\nimport { BaseCamera } from \"../BaseCamera\"\r\nimport { Camera } from \"../Camera\"\r\nimport { GeometryElement } from \"../GeometryElement\"\r\nimport { Transform3D } from \"../Transform3D\"\r\nimport { Material } from \"../material/Material\"\r\nimport { Scene3D } from \"../scene/Scene3D\"\r\nimport { Shader3D } from \"../../shader/Shader3D\"\r\nimport { ShaderData } from \"../../shader/ShaderData\"\r\nimport { ShaderInstance } from \"../../shader/ShaderInstance\"\r\nimport { ShaderPass } from \"../../shader/ShaderPass\"\r\nimport { SubShader } from \"../../shader/SubShader\"\r\nimport { DefineDatas } from \"../../shader/DefineDatas\";\r\n\r\n/**\r\n * <code>RenderElement</code> 类用于实现渲染元素。\r\n */\r\nexport class RenderElement {\r\n\t/** @internal */\r\n\tstatic RENDERTYPE_NORMAL: number = 0;\r\n\t/** @internal */\r\n\tstatic RENDERTYPE_STATICBATCH: number = 1;\r\n\t/** @internal */\r\n\tstatic RENDERTYPE_INSTANCEBATCH: number = 2;\r\n\t/** @internal */\r\n\tstatic RENDERTYPE_VERTEXBATCH: number = 3;\r\n\r\n\t/** @internal */\r\n\tprivate static _compileDefine: DefineDatas = new DefineDatas();\r\n\r\n\t/** @internal */\r\n\t_transform: Transform3D;\r\n\t/** @internal */\r\n\t_geometry: GeometryElement;\r\n\r\n\t/** @internal */\r\n\tmaterial: Material;//可能为空\r\n\t/** @internal */\r\n\trender: BaseRender;\r\n\t/** @internal */\r\n\tstaticBatch: GeometryElement;\r\n\t/** @internal */\r\n\trenderSubShader: SubShader = null;//TODO：做缓存标记优化\r\n\r\n\t/** @internal */\r\n\trenderType: number = RenderElement.RENDERTYPE_NORMAL;\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>RenderElement</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetInvertFront(): boolean {\r\n\t\treturn this._transform._isFrontFaceInvert;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tsetTransform(transform: Transform3D): void {\r\n\t\tthis._transform = transform;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tsetGeometry(geometry: GeometryElement): void {\r\n\t\tthis._geometry = geometry;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\taddToOpaqueRenderQueue(context: RenderContext3D, queue: RenderQueue): void {\r\n\t\tqueue.elements.add(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\taddToTransparentRenderQueue(context: RenderContext3D, queue: RenderQueue): void {\r\n\t\tqueue.elements.add(this);\r\n\t\tqueue.lastTransparentBatched = false;\r\n\t\tqueue.lastTransparentRenderElement = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_update(scene: Scene3D, context: RenderContext3D, customShader: Shader3D, replacementTag: string): void {\r\n\t\tif (this.material) {//材质可能为空\r\n\t\t\tvar subShader: SubShader = this.material._shader.getSubShaderAt(0);//TODO:\r\n\t\t\tthis.renderSubShader = null;\r\n\t\t\tif (customShader) {\r\n\t\t\t\tif (replacementTag) {\r\n\t\t\t\t\tvar oriTag: string = subShader.getFlag(replacementTag);\r\n\t\t\t\t\tif (oriTag) {\r\n\t\t\t\t\t\tvar customSubShaders: SubShader[] = customShader._subShaders;\r\n\t\t\t\t\t\tfor (var k: number = 0, p: number = customSubShaders.length; k < p; k++) {\r\n\t\t\t\t\t\t\tvar customSubShader: SubShader = customSubShaders[k];\r\n\t\t\t\t\t\t\tif (oriTag === customSubShader.getFlag(replacementTag)) {\r\n\t\t\t\t\t\t\t\tthis.renderSubShader = customSubShader;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!this.renderSubShader)\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.renderSubShader = customShader.getSubShaderAt(0);//TODO:\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.renderSubShader = subShader;\r\n\t\t\t}\r\n\r\n\t\t\tvar renderQueue: RenderQueue = scene._getRenderQueue(this.material.renderQueue);\r\n\t\t\tif (renderQueue.isTransparent)\r\n\t\t\t\tthis.addToTransparentRenderQueue(context, renderQueue);\r\n\t\t\telse\r\n\t\t\t\tthis.addToOpaqueRenderQueue(context, renderQueue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_render(context: RenderContext3D): void {\r\n\t\tvar forceInvertFace: boolean = context.invertY;\r\n\t\tvar lastStateMaterial: Material, lastStateShaderInstance: ShaderInstance, lastStateRender: BaseRender;\r\n\t\tvar updateMark: number = Camera._updateMark;\r\n\t\tvar scene: Scene3D = context.scene;\r\n\t\tvar cameraShaderValue: ShaderData = context.cameraShaderValue;\r\n\r\n\t\tvar transform: Transform3D = this._transform;\r\n\t\tvar geometry: GeometryElement = this._geometry;\r\n\t\tcontext.renderElement = this;\r\n\t\tvar updateRender: boolean = updateMark !== this.render._updateMark || this.renderType !== this.render._updateRenderType;\r\n\t\tif (updateRender) {//此处处理更新为裁剪和合并后的，可避免浪费\r\n\t\t\tthis.render._renderUpdate(context, transform);\r\n\t\t\tthis.render._renderUpdateWithCamera(context, transform);\r\n\t\t\tthis.render._updateMark = updateMark;\r\n\t\t\tthis.render._updateRenderType = this.renderType;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//InstanceBatch should update worldMatrix every renderElement,\r\n\t\t\t//because the instance matrix buffer is always different.\r\n\t\t\tif (this.renderType == RenderElement.RENDERTYPE_INSTANCEBATCH) {\r\n\t\t\t\tthis.render._renderUpdate(context, transform);\r\n\t\t\t\tthis.render._renderUpdateWithCamera(context, transform);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar currentPipelineMode: string = context.pipelineMode;//NORE:can covert string to int.\r\n\r\n\t\tif (geometry._prepareRender(context)) {\r\n\t\t\tvar passes: ShaderPass[] = this.renderSubShader._passes;\r\n\t\t\tfor (var j: number = 0, m: number = passes.length; j < m; j++) {\r\n\t\t\t\tvar pass: ShaderPass = passes[j];\r\n\t\t\t\t//NOTE:this will cause maybe a shader not render but do prepare before，but the developer can avoide this manual,for example shaderCaster=false.\r\n\t\t\t\tif (pass._pipelineMode !== currentPipelineMode)\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\tvar comDef: DefineDatas = RenderElement._compileDefine;\r\n\t\t\t\tscene._shaderValues._defineDatas.cloneTo(comDef);\r\n\t\t\t\tcomDef.addDefineDatas(this.render._shaderValues._defineDatas);\r\n\t\t\t\tcomDef.addDefineDatas(this.material._shaderValues._defineDatas);\r\n\t\t\t\tvar shaderIns: ShaderInstance = context.shader = pass.withCompile(comDef);\r\n\t\t\t\tvar switchShader: boolean = shaderIns.bind();//纹理需要切换shader时重新绑定 其他uniform不需要\r\n\t\t\t\tvar switchUpdateMark: boolean = (updateMark !== shaderIns._uploadMark);\r\n\r\n\t\t\t\tvar uploadScene: boolean = (shaderIns._uploadScene !== scene) || switchUpdateMark;\r\n\t\t\t\tif (uploadScene || switchShader) {\r\n\t\t\t\t\tshaderIns.uploadUniforms(shaderIns._sceneUniformParamsMap, scene._shaderValues, uploadScene);\r\n\t\t\t\t\tshaderIns._uploadScene = scene;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uploadSprite3D: boolean = (shaderIns._uploadRender !== this.render || shaderIns._uploadRenderType !== this.renderType) || switchUpdateMark;\r\n\t\t\t\tif (uploadSprite3D || switchShader) {\r\n\t\t\t\t\tshaderIns.uploadUniforms(shaderIns._spriteUniformParamsMap, this.render._shaderValues, uploadSprite3D);\r\n\t\t\t\t\tshaderIns._uploadRender = this.render;\r\n\t\t\t\t\tshaderIns._uploadRenderType = this.renderType;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uploadCamera: boolean = shaderIns._uploadCameraShaderValue !== cameraShaderValue || switchUpdateMark;\r\n\t\t\t\tif (uploadCamera || switchShader) {\r\n\t\t\t\t\tshaderIns.uploadUniforms(shaderIns._cameraUniformParamsMap, cameraShaderValue, uploadCamera);\r\n\t\t\t\t\tshaderIns._uploadCameraShaderValue = cameraShaderValue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uploadMaterial: boolean = (shaderIns._uploadMaterial !== this.material) || switchUpdateMark;\r\n\t\t\t\tif (uploadMaterial || switchShader) {\r\n\t\t\t\t\tshaderIns.uploadUniforms(shaderIns._materialUniformParamsMap, this.material._shaderValues, uploadMaterial);\r\n\t\t\t\t\tshaderIns._uploadMaterial = this.material;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar matValues: ShaderData = this.material._shaderValues;\r\n\t\t\t\tif (lastStateMaterial !== this.material || lastStateShaderInstance !== shaderIns) {//lastStateMaterial,lastStateShaderInstance存到全局，多摄像机还可优化\r\n\t\t\t\t\tshaderIns.uploadRenderStateBlendDepth(matValues);\r\n\t\t\t\t\tshaderIns.uploadRenderStateFrontFace(matValues, forceInvertFace, this.getInvertFront());\r\n\t\t\t\t\tlastStateMaterial = this.material;\r\n\t\t\t\t\tlastStateShaderInstance = shaderIns;\r\n\t\t\t\t\tlastStateRender = this.render;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (lastStateRender !== this.render) {//TODO:是否可以用transfrom\r\n\t\t\t\t\t\tshaderIns.uploadRenderStateFrontFace(matValues, forceInvertFace, this.getInvertFront());\r\n\t\t\t\t\t\tlastStateRender = this.render;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry._render(context);\r\n\t\t\t\tshaderIns._uploadMark = updateMark;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.renderType !== RenderElement.RENDERTYPE_NORMAL)\r\n\t\t\tthis.render._revertBatchRenderUpdate(context);//还原因合并导致的数据变化\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tdestroy(): void {\r\n\t\tthis._transform = null;\r\n\t\tthis._geometry = null;\r\n\t\tthis.material = null;\r\n\t\tthis.render = null;\r\n\t}\r\n}\r\n\r\n","import { Event } from \"../../../events/Event\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { MeshRenderDynamicBatchManager } from \"../../graphics/MeshRenderDynamicBatchManager\";\r\nimport { MeshRenderStaticBatchManager } from \"../../graphics/MeshRenderStaticBatchManager\";\r\nimport { SubMeshInstanceBatch } from \"../../graphics/SubMeshInstanceBatch\";\r\nimport { SubMeshStaticBatch } from \"../../graphics/SubMeshStaticBatch\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { VertexDeclaration } from \"../../graphics/VertexDeclaration\";\r\nimport { Matrix4x4 } from \"../../math/Matrix4x4\";\r\nimport { Quaternion } from \"../../math/Quaternion\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { SubMesh } from \"../../resource/models/SubMesh\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { BaseRender } from \"./BaseRender\";\r\nimport { BatchMark } from \"./BatchMark\";\r\nimport { RenderContext3D } from \"./RenderContext3D\";\r\nimport { RenderElement } from \"./RenderElement\";\r\nimport { RenderQueue } from \"./RenderQueue\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { SingletonList } from \"../../component/SingletonList\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class SubMeshRenderElement extends RenderElement {\r\n\t/** @internal */\r\n\tprivate _dynamicWorldPositionNormalNeedUpdate: boolean;\r\n\r\n\t/** @internal */\r\n\t_dynamicVertexBatch: boolean;\r\n\t/** @internal */\r\n\t_dynamicMultiSubMesh: boolean;\r\n\t/** @internal */\r\n\t_dynamicVertexCount: number;\r\n\t/** @internal */\r\n\t_dynamicWorldPositions: Float32Array;\r\n\t/** @internal */\r\n\t_dynamicWorldNormals: Float32Array;\r\n\r\n\t/** @internal */\r\n\tstaticBatchIndexStart: number;\r\n\t/** @internal */\r\n\tstaticBatchIndexEnd: number;\r\n\t/** @internal */\r\n\tstaticBatchElementList: SingletonList<SubMeshRenderElement>;\r\n\r\n\t/** @internal */\r\n\tinstanceSubMesh: SubMesh;\r\n\t/** @internal */\r\n\tinstanceBatchElementList: SingletonList<SubMeshRenderElement>;\r\n\r\n\t/** @internal */\r\n\tvertexBatchElementList: SingletonList<SubMeshRenderElement>;\r\n\t/** @internal */\r\n\tvertexBatchVertexDeclaration: VertexDeclaration;\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>SubMeshRenderElement</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._dynamicWorldPositionNormalNeedUpdate = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _onWorldMatrixChanged(): void {\r\n\t\tthis._dynamicWorldPositionNormalNeedUpdate = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\t_computeWorldPositionsAndNormals(positionOffset: number, normalOffset: number, multiSubMesh: boolean, vertexCount: number): void {\r\n\t\tif (this._dynamicWorldPositionNormalNeedUpdate) {\r\n\t\t\tvar subMesh: SubMesh = (<SubMesh>this._geometry);\r\n\t\t\tvar vertexBuffer: VertexBuffer3D = subMesh._vertexBuffer;\r\n\t\t\tvar vertexFloatCount: number = vertexBuffer.vertexDeclaration.vertexStride / 4;\r\n\t\t\tvar oriVertexes: Float32Array = vertexBuffer.getFloat32Data();\r\n\t\t\tvar worldMat: Matrix4x4 = this._transform.worldMatrix;\r\n\t\t\tvar rotation: Quaternion = this._transform.rotation;//TODO:是否换成矩阵\r\n\t\t\tvar indices: Uint16Array = subMesh._indices;\r\n\r\n\t\t\tfor (var i: number = 0; i < vertexCount; i++) {\r\n\t\t\t\tvar index: number = multiSubMesh ? indices[i] : i;\r\n\t\t\t\tvar oriOffset: number = index * vertexFloatCount;\r\n\t\t\t\tvar bakeOffset: number = i * 3;\r\n\t\t\t\tUtils3D.transformVector3ArrayToVector3ArrayCoordinate(oriVertexes, oriOffset + positionOffset, worldMat, this._dynamicWorldPositions, bakeOffset);\r\n\t\t\t\t(normalOffset !== -1) && (Utils3D.transformVector3ArrayByQuat(oriVertexes, oriOffset + normalOffset, rotation, this._dynamicWorldNormals, bakeOffset));\r\n\t\t\t}\r\n\r\n\t\t\tthis._dynamicWorldPositionNormalNeedUpdate = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tsetTransform(transform: Transform3D): void {\r\n\t\tif (this._transform !== transform) {\r\n\t\t\t(this._transform) && (this._transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatrixChanged));\r\n\t\t\t(transform) && (transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatrixChanged));\r\n\t\t\tthis._dynamicWorldPositionNormalNeedUpdate = true;\r\n\t\t\tthis._transform = transform;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tsetGeometry(geometry: GeometryElement): void {\r\n\t\tif (this._geometry !== geometry) {\r\n\t\t\tvar subMesh: SubMesh = (<SubMesh>geometry);\r\n\t\t\tvar mesh: Mesh = subMesh._mesh;\r\n\t\t\tif (mesh) {//TODO:可能是StaticSubMesh\r\n\t\t\t\tvar multiSubMesh: boolean = mesh._subMeshes.length > 1;\r\n\t\t\t\tvar dynBatVerCount: number = multiSubMesh ? subMesh._indexCount : mesh._vertexCount;\r\n\t\t\t\tif (dynBatVerCount <= ILaya3D.SubMeshDynamicBatch.maxAllowVertexCount) {\r\n\t\t\t\t\tvar length: number = dynBatVerCount * 3;\r\n\t\t\t\t\tthis._dynamicVertexBatch = true;\r\n\t\t\t\t\tthis._dynamicWorldPositions = new Float32Array(length);\r\n\t\t\t\t\tthis._dynamicWorldNormals = new Float32Array(length);\r\n\t\t\t\t\tthis._dynamicVertexCount = dynBatVerCount;\r\n\t\t\t\t\tthis._dynamicMultiSubMesh = multiSubMesh;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._dynamicVertexBatch = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._geometry = geometry;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\taddToOpaqueRenderQueue(context: RenderContext3D, queue: RenderQueue): void {\r\n\t\tvar subMeshStaticBatch: SubMeshStaticBatch = (<SubMeshStaticBatch>this.staticBatch);\r\n\t\tvar queueElements: SingletonList<RenderElement> = queue.elements;\r\n\t\tvar elements: any[] = queueElements.elements;\r\n\t\tif (subMeshStaticBatch) {\r\n\t\t\tvar staManager: MeshRenderStaticBatchManager = ILaya3D.MeshRenderStaticBatchManager.instance;\r\n\t\t\tvar staBatchMarks: BatchMark = staManager.getBatchOpaquaMark(this.render.lightmapIndex + 1, this.render.receiveShadow, this.material.id, subMeshStaticBatch._batchID);\r\n\t\t\tif (staManager._updateCountMark === staBatchMarks.updateMark) {\r\n\t\t\t\tvar staBatchIndex: number = staBatchMarks.indexInList;\r\n\t\t\t\tif (staBatchMarks.batched) {\r\n\t\t\t\t\telements[staBatchIndex].staticBatchElementList.add(this);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar staOriElement: SubMeshRenderElement = elements[staBatchIndex];\r\n\t\t\t\t\tvar staOriRender: BaseRender = staOriElement.render;\r\n\t\t\t\t\tvar staBatchElement: SubMeshRenderElement = (<SubMeshRenderElement>staManager._getBatchRenderElementFromPool());\r\n\t\t\t\t\tstaBatchElement.renderType = RenderElement.RENDERTYPE_STATICBATCH;\r\n\t\t\t\t\tstaBatchElement.setGeometry(subMeshStaticBatch);\r\n\t\t\t\t\tstaBatchElement.material = staOriElement.material;\r\n\t\t\t\t\tvar staRootOwner: Sprite3D = subMeshStaticBatch.batchOwner;\r\n\t\t\t\t\tvar staBatchTransform: Transform3D = staRootOwner ? staRootOwner._transform : null;\r\n\t\t\t\t\tstaBatchElement.setTransform(staBatchTransform);\r\n\t\t\t\t\tstaBatchElement.render = staOriRender;\r\n\t\t\t\t\tstaBatchElement.renderSubShader = staOriElement.renderSubShader;\r\n\t\t\t\t\tvar staBatchList: SingletonList<SubMeshRenderElement> = staBatchElement.staticBatchElementList;\r\n\t\t\t\t\tstaBatchList.length = 0;\r\n\t\t\t\t\tstaBatchList.add((<SubMeshRenderElement>staOriElement));\r\n\t\t\t\t\tstaBatchList.add(this);\r\n\t\t\t\t\telements[staBatchIndex] = staBatchElement;\r\n\t\t\t\t\tstaBatchMarks.batched = true;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tstaBatchMarks.updateMark = staManager._updateCountMark;\r\n\t\t\t\tstaBatchMarks.indexInList = queueElements.length;\r\n\t\t\t\tstaBatchMarks.batched = false;//是否已有大于两个的元素可合并\r\n\t\t\t\tqueueElements.add(this);\r\n\t\t\t}\r\n\t\t} else if (this.renderSubShader._owner._enableInstancing && LayaGL.layaGPUInstance.supportInstance() && this.render.lightmapIndex < 0 && this.render._probReflection._isScene ) {//需要支持Instance渲染才可用,暂不支持光照贴图//不是Scene反射探针的不能合并\r\n\t\t\tvar subMesh: SubMesh = (<SubMesh>this._geometry);\r\n\t\t\tvar insManager: MeshRenderDynamicBatchManager = ILaya3D.MeshRenderDynamicBatchManager.instance;\r\n\t\t\tvar insBatchMarks: BatchMark = insManager.getInstanceBatchOpaquaMark(this.render.receiveShadow, this.material.id, subMesh._id, this._transform._isFrontFaceInvert);\r\n\t\t\tif (insManager._updateCountMark === insBatchMarks.updateMark) {\r\n\t\t\t\tvar insBatchIndex: number = insBatchMarks.indexInList;\r\n\t\t\t\tif (insBatchMarks.batched) {\r\n\t\t\t\t\tvar instanceBatchElementList: SingletonList<SubMeshRenderElement> = elements[insBatchIndex].instanceBatchElementList;\r\n\t\t\t\t\tif (instanceBatchElementList.length === SubMeshInstanceBatch.instance.maxInstanceCount) {\r\n\t\t\t\t\t\tinsBatchMarks.updateMark = insManager._updateCountMark;\r\n\t\t\t\t\t\tinsBatchMarks.indexInList = queueElements.length;\r\n\t\t\t\t\t\tinsBatchMarks.batched = false;//是否已有大于两个的元素可合并\r\n\t\t\t\t\t\tqueueElements.add(this);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tinstanceBatchElementList.add(this);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar insOriElement: SubMeshRenderElement = elements[insBatchIndex];\r\n\t\t\t\t\tvar insOriRender: BaseRender = insOriElement.render;\r\n\t\t\t\t\tvar insBatchElement: SubMeshRenderElement = (<SubMeshRenderElement>insManager._getBatchRenderElementFromPool());//TODO:是否动态和静态方法可合并\r\n\t\t\t\t\tinsBatchElement.renderType = RenderElement.RENDERTYPE_INSTANCEBATCH;\r\n\t\t\t\t\tinsBatchElement.setGeometry(SubMeshInstanceBatch.instance);\r\n\t\t\t\t\tinsBatchElement.material = insOriElement.material;\r\n\t\t\t\t\tinsBatchElement.setTransform(null);\r\n\t\t\t\t\tinsBatchElement.render = insOriRender;\r\n\t\t\t\t\tinsBatchElement.instanceSubMesh = subMesh;\r\n\t\t\t\t\tinsBatchElement.renderSubShader = insOriElement.renderSubShader;\r\n\t\t\t\t\tvar insBatchList: SingletonList<SubMeshRenderElement> = insBatchElement.instanceBatchElementList;\r\n\t\t\t\t\tinsBatchList.length = 0;\r\n\t\t\t\t\tinsBatchList.add((<SubMeshRenderElement>insOriElement));\r\n\t\t\t\t\tinsBatchList.add(this);\r\n\t\t\t\t\telements[insBatchIndex] = insBatchElement;\r\n\t\t\t\t\tinsBatchMarks.batched = true;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tinsBatchMarks.updateMark = insManager._updateCountMark;\r\n\t\t\t\tinsBatchMarks.indexInList = queueElements.length;\r\n\t\t\t\tinsBatchMarks.batched = false;//是否已有大于两个的元素可合并\r\n\t\t\t\tqueueElements.add(this);\r\n\t\t\t}\r\n\t\t} else if (this._dynamicVertexBatch) {\r\n\t\t\tvar verDec: VertexDeclaration = ((<SubMesh>this._geometry))._vertexBuffer.vertexDeclaration;\r\n\t\t\tvar dynManager: MeshRenderDynamicBatchManager = ILaya3D.MeshRenderDynamicBatchManager.instance;\r\n\t\t\tvar dynBatchMarks: BatchMark = dynManager.getVertexBatchOpaquaMark(this.render.lightmapIndex + 1, this.render.receiveShadow, this.material.id, verDec.id);\r\n\t\t\tif (dynManager._updateCountMark === dynBatchMarks.updateMark) {\r\n\t\t\t\tvar dynBatchIndex: number = dynBatchMarks.indexInList;\r\n\t\t\t\tif (dynBatchMarks.batched) {\r\n\t\t\t\t\telements[dynBatchIndex].vertexBatchElementList.add(this);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar dynOriElement: SubMeshRenderElement = elements[dynBatchIndex];\r\n\t\t\t\t\tvar dynOriRender: BaseRender = dynOriElement.render;\r\n\t\t\t\t\tvar dynBatchElement: SubMeshRenderElement = (<SubMeshRenderElement>dynManager._getBatchRenderElementFromPool());//TODO:是否动态和静态方法可合并\r\n\t\t\t\t\tdynBatchElement.renderType = RenderElement.RENDERTYPE_VERTEXBATCH;\r\n\t\t\t\t\tdynBatchElement.setGeometry(ILaya3D.SubMeshDynamicBatch.instance);\r\n\t\t\t\t\tdynBatchElement.material = dynOriElement.material;\r\n\t\t\t\t\tdynBatchElement.setTransform(null);\r\n\t\t\t\t\tdynBatchElement.render = dynOriRender;\r\n\t\t\t\t\tdynBatchElement.vertexBatchVertexDeclaration = verDec;\r\n\t\t\t\t\tdynBatchElement.renderSubShader = dynOriElement.renderSubShader;\r\n\t\t\t\t\tvar dynBatchList: SingletonList<SubMeshRenderElement> = dynBatchElement.vertexBatchElementList;\r\n\t\t\t\t\tdynBatchList.length = 0;\r\n\t\t\t\t\tdynBatchList.add((<SubMeshRenderElement>dynOriElement));\r\n\t\t\t\t\tdynBatchList.add(this);\r\n\t\t\t\t\telements[dynBatchIndex] = dynBatchElement;\r\n\t\t\t\t\tdynBatchMarks.batched = true;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdynBatchMarks.updateMark = dynManager._updateCountMark;\r\n\t\t\t\tdynBatchMarks.indexInList = queueElements.length;\r\n\t\t\t\tdynBatchMarks.batched = false;//是否已有大于两个的元素可合并\r\n\t\t\t\tqueueElements.add(this);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tqueueElements.add(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\taddToTransparentRenderQueue(context: RenderContext3D, queue: RenderQueue): void {\r\n\t\tvar subMeshStaticBatch: SubMeshStaticBatch = (<SubMeshStaticBatch>this.staticBatch);\r\n\t\tvar queueElements: SingletonList<RenderElement> = queue.elements;\r\n\t\tvar elements: any[] = queueElements.elements;\r\n\t\tif (subMeshStaticBatch) {\r\n\t\t\tvar staManager: MeshRenderStaticBatchManager = ILaya3D.MeshRenderStaticBatchManager.instance;\r\n\t\t\tvar staLastElement: RenderElement = queue.lastTransparentRenderElement;\r\n\t\t\tif (staLastElement) {\r\n\t\t\t\tvar staLastRender: BaseRender = staLastElement.render;\r\n\t\t\t\tif (staLastElement._geometry._getType() !== this._geometry._getType() || staLastElement.staticBatch !== subMeshStaticBatch || staLastElement.material !== this.material || staLastRender.receiveShadow !== this.render.receiveShadow || staLastRender.lightmapIndex !== this.render.lightmapIndex) {\r\n\t\t\t\t\tqueueElements.add(this);\r\n\t\t\t\t\tqueue.lastTransparentBatched = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (queue.lastTransparentBatched) {\r\n\t\t\t\t\t\t(<SubMeshRenderElement>elements[queueElements.length - 1]).staticBatchElementList.add((this));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar staBatchElement: SubMeshRenderElement = (<SubMeshRenderElement>staManager._getBatchRenderElementFromPool());\r\n\t\t\t\t\t\tstaBatchElement.renderType = RenderElement.RENDERTYPE_STATICBATCH;\r\n\t\t\t\t\t\tstaBatchElement.setGeometry(subMeshStaticBatch);\r\n\t\t\t\t\t\tstaBatchElement.material = staLastElement.material;\r\n\t\t\t\t\t\tvar staRootOwner: Sprite3D = subMeshStaticBatch.batchOwner;\r\n\t\t\t\t\t\tvar staBatchTransform: Transform3D = staRootOwner ? staRootOwner._transform : null;\r\n\t\t\t\t\t\tstaBatchElement.setTransform(staBatchTransform);\r\n\t\t\t\t\t\tstaBatchElement.render = this.render;\r\n\t\t\t\t\t\tstaBatchElement.renderSubShader = staLastElement.renderSubShader;\r\n\t\t\t\t\t\tvar staBatchList: SingletonList<SubMeshRenderElement> = staBatchElement.staticBatchElementList;\r\n\t\t\t\t\t\tstaBatchList.length = 0;\r\n\t\t\t\t\t\tstaBatchList.add((<SubMeshRenderElement>staLastElement));\r\n\t\t\t\t\t\tstaBatchList.add(this);\r\n\t\t\t\t\t\telements[queueElements.length - 1] = staBatchElement;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tqueue.lastTransparentBatched = true;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tqueueElements.add(this);\r\n\t\t\t\tqueue.lastTransparentBatched = false;\r\n\t\t\t}\r\n\t\t} else if (this.renderSubShader._owner._enableInstancing && LayaGL.layaGPUInstance.supportInstance() && this.render.lightmapIndex < 0 && this.render._probReflection._isScene) {//需要支持Instance渲染才可用，暂不支持光照贴图\r\n\t\t\tvar subMesh: SubMesh = (<SubMesh>this._geometry);\r\n\t\t\tvar insManager: MeshRenderDynamicBatchManager = ILaya3D.MeshRenderDynamicBatchManager.instance;\r\n\t\t\tvar insLastElement: RenderElement = queue.lastTransparentRenderElement;\r\n\t\t\tif (insLastElement) {\r\n\t\t\t\tvar insLastRender: BaseRender = insLastElement.render;\r\n\t\t\t\tif (insLastElement._geometry._getType() !== this._geometry._getType() || ((<SubMesh>insLastElement._geometry)) !== subMesh || insLastElement.material !== this.material || insLastRender.receiveShadow !== this.render.receiveShadow) {\r\n\t\t\t\t\tqueueElements.add(this);\r\n\t\t\t\t\tqueue.lastTransparentBatched = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (queue.lastTransparentBatched) {\r\n\t\t\t\t\t\tvar instanceBatchElementList: SingletonList<SubMeshRenderElement> = elements[queueElements.length - 1].instanceBatchElementList;\r\n\t\t\t\t\t\tif (instanceBatchElementList.length === SubMeshInstanceBatch.instance.maxInstanceCount) {\r\n\t\t\t\t\t\t\tqueueElements.add(this);\r\n\t\t\t\t\t\t\tqueue.lastTransparentBatched = false;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinstanceBatchElementList.add(this);\r\n\t\t\t\t\t\t\tqueue.lastTransparentBatched = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar insBatchElement: SubMeshRenderElement = (<SubMeshRenderElement>insManager._getBatchRenderElementFromPool());\r\n\t\t\t\t\t\tinsBatchElement.renderType = RenderElement.RENDERTYPE_INSTANCEBATCH;\r\n\t\t\t\t\t\tinsBatchElement.setGeometry(SubMeshInstanceBatch.instance);\r\n\t\t\t\t\t\tinsBatchElement.material = insLastElement.material;\r\n\t\t\t\t\t\tinsBatchElement.setTransform(null);\r\n\t\t\t\t\t\tinsBatchElement.render = this.render;\r\n\t\t\t\t\t\tinsBatchElement.instanceSubMesh = subMesh;\r\n\t\t\t\t\t\tinsBatchElement.renderSubShader = insLastElement.renderSubShader;\r\n\t\t\t\t\t\tvar insBatchList: SingletonList<SubMeshRenderElement> = insBatchElement.instanceBatchElementList;\r\n\t\t\t\t\t\tinsBatchList.length = 0;\r\n\t\t\t\t\t\tinsBatchList.add((<SubMeshRenderElement>insLastElement));\r\n\t\t\t\t\t\tinsBatchList.add(this);\r\n\t\t\t\t\t\telements[queueElements.length - 1] = insBatchElement;\r\n\t\t\t\t\t\tqueue.lastTransparentBatched = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tqueueElements.add(this);\r\n\t\t\t\tqueue.lastTransparentBatched = false;\r\n\t\t\t}\r\n\r\n\t\t} else if (this._dynamicVertexBatch) {\r\n\t\t\tvar verDec: VertexDeclaration = ((<SubMesh>this._geometry))._vertexBuffer.vertexDeclaration;\r\n\t\t\tvar dynManager: MeshRenderDynamicBatchManager = ILaya3D.MeshRenderDynamicBatchManager.instance;\r\n\t\t\tvar dynLastElement: RenderElement = queue.lastTransparentRenderElement;\r\n\t\t\tif (dynLastElement) {\r\n\t\t\t\tvar dynLastRender: BaseRender = dynLastElement.render;\r\n\t\t\t\tif (!(dynLastElement as SubMeshRenderElement)._dynamicVertexBatch|| dynLastElement._geometry._getType() !== this._geometry._getType() || ((<SubMesh>dynLastElement._geometry))._vertexBuffer._vertexDeclaration !== verDec || dynLastElement.material !== this.material || dynLastRender.receiveShadow !== this.render.receiveShadow || dynLastRender.lightmapIndex !== this.render.lightmapIndex) {\r\n\t\t\t\t\tqueueElements.add(this);\r\n\t\t\t\t\tqueue.lastTransparentBatched = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (queue.lastTransparentBatched) {\r\n\t\t\t\t\t\t((<SubMeshRenderElement>elements[queueElements.length - 1])).vertexBatchElementList.add((this));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar dynBatchElement: SubMeshRenderElement = (<SubMeshRenderElement>dynManager._getBatchRenderElementFromPool());\r\n\t\t\t\t\t\tdynBatchElement.renderType = RenderElement.RENDERTYPE_VERTEXBATCH;\r\n\t\t\t\t\t\tdynBatchElement.setGeometry(ILaya3D.SubMeshDynamicBatch.instance);\r\n\t\t\t\t\t\tdynBatchElement.material = dynLastElement.material;\r\n\t\t\t\t\t\tdynBatchElement.setTransform(null);\r\n\t\t\t\t\t\tdynBatchElement.render = this.render;\r\n\t\t\t\t\t\tdynBatchElement.vertexBatchVertexDeclaration = verDec;\r\n\t\t\t\t\t\tdynBatchElement.renderSubShader = dynLastElement.renderSubShader;\r\n\t\t\t\t\t\tvar dynBatchList: SingletonList<SubMeshRenderElement> = dynBatchElement.vertexBatchElementList;\r\n\t\t\t\t\t\tdynBatchList.length = 0;\r\n\t\t\t\t\t\tdynBatchList.add((<SubMeshRenderElement>dynLastElement));\r\n\t\t\t\t\t\tdynBatchList.add(this);\r\n\t\t\t\t\t\telements[queueElements.length - 1] = dynBatchElement;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tqueue.lastTransparentBatched = true;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tqueueElements.add(this);\r\n\t\t\t\tqueue.lastTransparentBatched = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tqueueElements.add(this);\r\n\t\t}\r\n\t\tqueue.lastTransparentRenderElement = this;\r\n\t}\r\n\r\n\tgetInvertFront(): boolean {\r\n\t\tswitch (this.renderType) {\r\n\t\t\tcase RenderElement.RENDERTYPE_NORMAL:\r\n\t\t\t\treturn this._transform._isFrontFaceInvert;\r\n\t\t\tcase RenderElement.RENDERTYPE_STATICBATCH:\r\n\t\t\tcase RenderElement.RENDERTYPE_VERTEXBATCH:\r\n\t\t\t\treturn false;\r\n\t\t\tcase RenderElement.RENDERTYPE_INSTANCEBATCH:\r\n\t\t\t\treturn this.instanceBatchElementList.elements[0]._transform._isFrontFaceInvert;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"SubMeshRenderElement: unknown renderType\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tthis._dynamicWorldPositions = null;\r\n\t\tthis._dynamicWorldNormals = null;\r\n\t\tthis.staticBatch = null;\r\n\t\tthis.staticBatchElementList = null;\r\n\t\tthis.vertexBatchElementList = null;\r\n\t\tthis.vertexBatchVertexDeclaration = null;\r\n\t}\r\n}\r\n\r\n\r\n","import { RenderElement } from \"../core/render/RenderElement\";\r\nimport { SubMeshRenderElement } from \"../core/render/SubMeshRenderElement\";\r\nimport { RenderableSprite3D } from \"../core/RenderableSprite3D\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\n\r\n/**\r\n * <code>StaticBatchManager</code> 类用于静态批处理管理的父类。\r\n */\r\nexport class StaticBatchManager {\r\n\t/** @internal [只读]*/\r\n\tstatic _managers: StaticBatchManager[] = [];\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _addToStaticBatchQueue(sprite3D: Sprite3D, renderableSprite3D: RenderableSprite3D[]): void {\r\n\t\tif (sprite3D instanceof RenderableSprite3D)\r\n\t\t\trenderableSprite3D.push(sprite3D);\r\n\t\tfor (var i: number = 0, n: number = sprite3D.numChildren; i < n; i++)\r\n\t\t\tStaticBatchManager._addToStaticBatchQueue((<Sprite3D>sprite3D._children[i]), renderableSprite3D);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _registerManager(manager: StaticBatchManager): void {\r\n\t\tStaticBatchManager._managers.push(manager);\r\n\t}\r\n\r\n\t/**\r\n\t * 静态批处理合并，合并后子节点修改Transform属性无效，根节点staticBatchRoot可为null,如果根节点不为null，根节点可移动。\r\n\t * 如果renderableSprite3Ds为null，合并staticBatchRoot以及其所有子节点为静态批处理，staticBatchRoot作为静态根节点。\r\n\t * 如果renderableSprite3Ds不为null,合并renderableSprite3Ds为静态批处理，staticBatchRoot作为静态根节点。\r\n\t * @param staticBatchRoot 静态批处理根节点。\r\n\t * @param renderableSprite3Ds 静态批处理子节点队列。\r\n\t */\r\n\tstatic combine(staticBatchRoot: Sprite3D, renderableSprite3Ds: RenderableSprite3D[] = null): void {\r\n\t\tif (!renderableSprite3Ds) {\r\n\t\t\trenderableSprite3Ds = [];\r\n\t\t\tif (staticBatchRoot)\r\n\t\t\t\tStaticBatchManager._addToStaticBatchQueue(staticBatchRoot, renderableSprite3Ds);\r\n\t\t}\r\n\r\n\t\tvar batchSpritesCount: number = renderableSprite3Ds.length;\r\n\t\tif (batchSpritesCount > 0) {\r\n\t\t\tfor (var i: number = 0; i < batchSpritesCount; i++) {\r\n\t\t\t\tvar sprite: RenderableSprite3D = renderableSprite3Ds[i];\r\n\t\t\t\tif (!sprite.destroyed) {\r\n\t\t\t\t\tif (sprite._render._isPartOfStaticBatch)\r\n\t\t\t\t\t\tconsole.warn(\"StaticBatchManager: Sprite \" + sprite.name + \" has a part of Static Batch,it will be ignore.\");\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tsprite._addToInitStaticBatchManager();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var k: number = 0, m: number = StaticBatchManager._managers.length; k < m; k++) {\r\n\t\t\t\tvar manager: StaticBatchManager = StaticBatchManager._managers[k];\r\n\t\t\t\tmanager._initStaticBatchs(staticBatchRoot);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprotected _batchRenderElementPool: SubMeshRenderElement[];\r\n\t/** @internal */\r\n\tprotected _batchRenderElementPoolIndex: number;\r\n\t/** @internal */\r\n\tprotected _initBatchSprites: RenderableSprite3D[] = [];\r\n\t/** @internal */\r\n\tprotected _staticBatches: object = {};\r\n\r\n\t/**\r\n\t * 创建一个 <code>StaticBatchManager</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._batchRenderElementPoolIndex = 0;\r\n\t\tthis._batchRenderElementPool = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _partition(items: RenderableSprite3D[], left: number, right: number): number {\r\n\t\tvar pivot: RenderableSprite3D = items[Math.floor((right + left) / 2)];\r\n\t\twhile (left <= right) {\r\n\t\t\twhile (this._compare(items[left], pivot) < 0)\r\n\t\t\t\tleft++;\r\n\t\t\twhile (this._compare(items[right], pivot) > 0)\r\n\t\t\t\tright--;\r\n\t\t\tif (left < right) {\r\n\t\t\t\tvar temp: any = items[left];\r\n\t\t\t\titems[left] = items[right];\r\n\t\t\t\titems[right] = temp;\r\n\t\t\t\tleft++;\r\n\t\t\t\tright--;\r\n\t\t\t} else if (left === right) {\r\n\t\t\t\tleft++;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn left;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _quickSort(items: RenderableSprite3D[], left: number, right: number): void {\r\n\t\tif (items.length > 1) {\r\n\t\t\tvar index: number = this._partition(items, left, right);\r\n\t\t\tvar leftIndex: number = index - 1;\r\n\t\t\tif (left < leftIndex)\r\n\t\t\t\tthis._quickSort(items, left, leftIndex);\r\n\r\n\t\t\tif (index < right)\r\n\t\t\t\tthis._quickSort(items, index, right);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _compare(left: RenderableSprite3D, right: RenderableSprite3D): number {\r\n\t\tthrow \"StaticBatch:must override this function.\";\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _initStaticBatchs(rootSprite: Sprite3D): void {\r\n\t\tthrow \"StaticBatch:must override this function.\";\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getBatchRenderElementFromPool(): RenderElement {\r\n\t\tthrow \"StaticBatch:must override this function.\";\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addBatchSprite(renderableSprite3D: RenderableSprite3D): void {\r\n\t\tthis._initBatchSprites.push(renderableSprite3D);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_clear(): void {\r\n\t\tthis._batchRenderElementPoolIndex = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_garbageCollection(): void {\r\n\t\tthrow \"StaticBatchManager: must override it.\";\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tdispose(): void {\r\n\t\tthis._staticBatches = null;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { IDispose } from \"../../resource/IDispose\";\r\nimport { Resource } from \"../../resource/Resource\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { SingletonList } from \"../component/SingletonList\";\r\nimport { BufferState } from \"../core/BufferState\";\r\nimport { GeometryElement } from \"../core/GeometryElement\";\r\nimport { MeshRenderer } from \"../core/MeshRenderer\";\r\nimport { MeshSprite3D } from \"../core/MeshSprite3D\";\r\nimport { BaseRender } from \"../core/render/BaseRender\";\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\r\nimport { RenderElement } from \"../core/render/RenderElement\";\r\nimport { SubMeshRenderElement } from \"../core/render/SubMeshRenderElement\";\r\nimport { RenderableSprite3D } from \"../core/RenderableSprite3D\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\nimport { Transform3D } from \"../core/Transform3D\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Quaternion } from \"../math/Quaternion\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Vector4 } from \"../math/Vector4\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { IndexBuffer3D } from \"./IndexBuffer3D\";\r\nimport { VertexMesh } from \"./Vertex/VertexMesh\";\r\nimport { VertexBuffer3D } from \"./VertexBuffer3D\";\r\nimport { VertexDeclaration } from \"./VertexDeclaration\";\r\nimport { VertexElement } from \"./VertexElement\";\r\nimport { IndexFormat } from \"./IndexFormat\";\r\n\r\n/**\r\n * @internal\r\n * <code>SubMeshStaticBatch</code> 类用于网格静态合并。\r\n */\r\nexport class SubMeshStaticBatch extends GeometryElement implements IDispose {\r\n\t/** @internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempVector31: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempQuaternion0: Quaternion = new Quaternion();\r\n\t/** @internal */\r\n\tprivate static _tempMatrix4x40: Matrix4x4 = new Matrix4x4();\r\n\t/** @internal */\r\n\tprivate static _tempMatrix4x41: Matrix4x4 = new Matrix4x4();\r\n\t/** @internal */\r\n\tprivate static _tempMatrix4x42: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/** @internal */\r\n\tstatic maxBatchVertexCount: number = 65535;\r\n\r\n\t/** @internal */\r\n\tprivate static _batchIDCounter: number = 0;\r\n\r\n\t/** @internal */\r\n\tprivate _currentBatchVertexCount: number;\r\n\t/** @internal */\r\n\tprivate _currentBatchIndexCount: number;\r\n\t/** @internal */\r\n\tprivate _vertexDeclaration: VertexDeclaration;\r\n\t/**@internal */\r\n\tprivate _vertexBuffer: VertexBuffer3D;\r\n\t/**@internal */\r\n\tprivate _indexBuffer: IndexBuffer3D;\r\n\t/** @internal */\r\n\tprivate _bufferState: BufferState = new BufferState();\r\n\r\n\t/** @internal */\r\n\t_batchElements: RenderableSprite3D[];\r\n\r\n\t/** @internal */\r\n\t_batchID: number;\r\n\r\n\t/** @internal [只读]*/\r\n\tbatchOwner: Sprite3D;\r\n\r\n\t/**\r\n\t * 创建一个 <code>SubMeshStaticBatch</code> 实例。\r\n\t */\r\n\tconstructor(batchOwner: Sprite3D, vertexDeclaration: VertexDeclaration) {\r\n\t\tsuper();\r\n\t\tthis._batchID = SubMeshStaticBatch._batchIDCounter++;\r\n\t\tthis._batchElements = [];\r\n\t\tthis._currentBatchVertexCount = 0;\r\n\t\tthis._currentBatchIndexCount = 0;\r\n\t\tthis._vertexDeclaration = vertexDeclaration;\r\n\t\tthis.batchOwner = batchOwner;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getStaticBatchBakedVertexs(batchVertices: Float32Array, batchOffset: number, batchOwnerTransform: Transform3D, transform: Transform3D, render: MeshRenderer, mesh: Mesh): number {\r\n\t\tvar vertexBuffer: VertexBuffer3D = mesh._vertexBuffer;\r\n\t\tvar vertexDeclaration: VertexDeclaration = vertexBuffer.vertexDeclaration;\r\n\t\tvar positionOffset: number = vertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_POSITION0)._offset / 4;\r\n\t\tvar normalElement: VertexElement = vertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_NORMAL0);\r\n\t\tvar normalOffset: number = normalElement ? normalElement._offset / 4 : -1;\r\n\t\tvar colorElement: VertexElement = vertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_COLOR0);\r\n\t\tvar colorOffset: number = colorElement ? colorElement._offset / 4 : -1;\r\n\t\tvar uv0Element: VertexElement = vertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE0);\r\n\t\tvar uv0Offset: number = uv0Element ? uv0Element._offset / 4 : -1;\r\n\t\tvar uv1Element: VertexElement = vertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE1);\r\n\t\tvar uv1Offset: number = uv1Element ? uv1Element._offset / 4 : -1;\r\n\t\tvar tangentElement: VertexElement = vertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_TANGENT0);\r\n\t\tvar sTangentOffset: number = tangentElement ? tangentElement._offset / 4 : -1;\r\n\t\tvar bakeVertexFloatCount: number = 18;\r\n\t\tvar oriVertexFloatCount: number = vertexDeclaration.vertexStride / 4;\r\n\t\tvar oriVertexes: Float32Array = vertexBuffer.getFloat32Data();\r\n\r\n\t\tvar worldMat: Matrix4x4;\r\n\t\tif (batchOwnerTransform) {\r\n\t\t\tvar rootMat: Matrix4x4 = batchOwnerTransform.worldMatrix;\r\n\t\t\trootMat.invert(SubMeshStaticBatch._tempMatrix4x40);\r\n\t\t\tworldMat = SubMeshStaticBatch._tempMatrix4x41;\r\n\t\t\tMatrix4x4.multiply(SubMeshStaticBatch._tempMatrix4x40, transform.worldMatrix, worldMat);\r\n\t\t} else {\r\n\t\t\tworldMat = transform.worldMatrix;\r\n\t\t}\r\n\t\tvar normalMat: Matrix4x4 = SubMeshStaticBatch._tempMatrix4x42;\r\n\t\tworldMat.invert(normalMat);\r\n\t\tnormalMat.transpose();\r\n\r\n\t\tvar rotation: Quaternion = SubMeshStaticBatch._tempQuaternion0;\r\n\t\tworldMat.decomposeTransRotScale(SubMeshStaticBatch._tempVector30, rotation, SubMeshStaticBatch._tempVector31);//可不计算position和scale\t\r\n\t\tvar lightmapScaleOffset: Vector4 = render.lightmapScaleOffset;\r\n\r\n\t\tvar vertexCount: number = mesh.vertexCount;\r\n\r\n\t\tfor (var i: number = 0; i < vertexCount; i++) {\r\n\t\t\tvar oriOffset: number = i * oriVertexFloatCount;\r\n\t\t\tvar bakeOffset: number = (i + batchOffset) * bakeVertexFloatCount;\r\n\t\t\tUtils3D.transformVector3ArrayToVector3ArrayCoordinate(oriVertexes, oriOffset + positionOffset, worldMat, batchVertices, bakeOffset + 0);\r\n\t\t\tif (normalOffset !== -1)\r\n\t\t\t\tUtils3D.transformVector3ArrayToVector3ArrayNormal(oriVertexes, oriOffset + normalOffset, normalMat, batchVertices, bakeOffset + 3);\r\n\r\n\t\t\tvar j: number, m: number;\r\n\t\t\tvar bakOff: number = bakeOffset + 6;\r\n\t\t\tif (colorOffset !== -1) {\r\n\t\t\t\tvar oriOff: number = oriOffset + colorOffset;\r\n\t\t\t\tfor (j = 0, m = 4; j < m; j++)\r\n\t\t\t\t\tbatchVertices[bakOff + j] = oriVertexes[oriOff + j];\r\n\t\t\t} else {\r\n\t\t\t\tfor (j = 0, m = 4; j < m; j++)\r\n\t\t\t\t\tbatchVertices[bakOff + j] = 1.0;\r\n\t\t\t}\r\n\r\n\t\t\tif (uv0Offset !== -1) {\r\n\t\t\t\tvar absUv0Offset: number = oriOffset + uv0Offset;\r\n\t\t\t\tbatchVertices[bakeOffset + 10] = oriVertexes[absUv0Offset];\r\n\t\t\t\tbatchVertices[bakeOffset + 11] = oriVertexes[absUv0Offset + 1];\r\n\t\t\t}\r\n\r\n\t\t\tif (lightmapScaleOffset) {\r\n\t\t\t\tif (uv1Offset !== -1)\r\n\t\t\t\t\tUtils3D.transformLightingMapTexcoordArray(oriVertexes, oriOffset + uv1Offset, lightmapScaleOffset, batchVertices, bakeOffset + 12);\r\n\t\t\t\telse\r\n\t\t\t\t\tUtils3D.transformLightingMapTexcoordArray(oriVertexes, oriOffset + uv0Offset, lightmapScaleOffset, batchVertices, bakeOffset + 12);\r\n\t\t\t}\r\n\r\n\t\t\tif (sTangentOffset !== -1) {\r\n\t\t\t\tvar absSTanegntOffset: number = oriOffset + sTangentOffset;\r\n\t\t\t\tbatchVertices[bakeOffset + 14] = oriVertexes[absSTanegntOffset];\r\n\t\t\t\tbatchVertices[bakeOffset + 15] = oriVertexes[absSTanegntOffset + 1];\r\n\t\t\t\tbatchVertices[bakeOffset + 16] = oriVertexes[absSTanegntOffset + 2];\r\n\t\t\t\tbatchVertices[bakeOffset + 17] = oriVertexes[absSTanegntOffset + 3];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn vertexCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\taddTest(sprite: RenderableSprite3D): boolean {\r\n\t\tvar vertexCount: number;\r\n\t\tvar subMeshVertexCount: number = ((<Mesh>((<MeshSprite3D>sprite)).meshFilter.sharedMesh)).vertexCount;\r\n\t\tvertexCount = this._currentBatchVertexCount + subMeshVertexCount;\r\n\t\tif (vertexCount > SubMeshStaticBatch.maxBatchVertexCount)\r\n\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tadd(sprite: RenderableSprite3D): void {\r\n\t\tvar mesh: Mesh = (<Mesh>((<MeshSprite3D>sprite)).meshFilter.sharedMesh);\r\n\t\tvar subMeshVertexCount: number = mesh.vertexCount;\r\n\t\tthis._batchElements.push(sprite);\r\n\r\n\t\tvar render: BaseRender = sprite._render;\r\n\t\trender._isPartOfStaticBatch = true;\r\n\t\trender._staticBatch = this;//TODO:mayebe shhould  delete\r\n\t\tvar renderElements: RenderElement[] = render._renderElements;\r\n\t\tfor (var i: number = 0, n: number = renderElements.length; i < n; i++)\r\n\t\t\trenderElements[i].staticBatch = this;\r\n\r\n\t\tthis._currentBatchIndexCount += mesh._indexBuffer.indexCount;\r\n\t\tthis._currentBatchVertexCount += subMeshVertexCount;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tremove(sprite: RenderableSprite3D): void {\r\n\t\tvar mesh: Mesh = (<MeshSprite3D>sprite).meshFilter.sharedMesh;\r\n\t\tvar index: number = this._batchElements.indexOf(sprite);\r\n\t\tif (index !== -1) {\r\n\t\t\tthis._batchElements.splice(index, 1);\r\n\r\n\t\t\tvar renderElements: RenderElement[] = sprite._render._renderElements;\r\n\t\t\tfor (var i: number = 0, n: number = renderElements.length; i < n; i++)\r\n\t\t\t\trenderElements[i].staticBatch = null;\r\n\r\n\t\t\tthis._currentBatchIndexCount = this._currentBatchIndexCount - mesh._indexBuffer.indexCount;\r\n\t\t\tthis._currentBatchVertexCount = this._currentBatchVertexCount - mesh.vertexCount;\r\n\t\t\tsprite._render._isPartOfStaticBatch = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tfinishInit(): void {//TODO:看下优化\r\n\t\tif (this._vertexBuffer) {\r\n\t\t\tthis._vertexBuffer.destroy();\r\n\t\t\tthis._indexBuffer.destroy();\r\n\t\t\tResource._addGPUMemory(-(this._vertexBuffer._byteLength + this._indexBuffer._byteLength));\r\n\t\t}\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar batchVertexCount: number = 0;\r\n\t\tvar batchIndexCount: number = 0;\r\n\r\n\t\tvar rootOwner: Sprite3D = this.batchOwner;\r\n\t\tvar floatStride: number = this._vertexDeclaration.vertexStride / 4;\r\n\t\tvar vertexDatas: Float32Array = new Float32Array(floatStride * this._currentBatchVertexCount);\r\n\t\tvar indexDatas: Uint16Array = new Uint16Array(this._currentBatchIndexCount);\r\n\t\tthis._vertexBuffer = new VertexBuffer3D(this._vertexDeclaration.vertexStride * this._currentBatchVertexCount, gl.STATIC_DRAW);\r\n\t\tthis._vertexBuffer.vertexDeclaration = this._vertexDeclaration;\r\n\t\tthis._indexBuffer = new IndexBuffer3D(IndexFormat.UInt16, this._currentBatchIndexCount, gl.STATIC_DRAW);\r\n\r\n\t\tfor (var i: number = 0, n: number = this._batchElements.length; i < n; i++) {\r\n\t\t\tvar sprite: MeshSprite3D = (<MeshSprite3D>this._batchElements[i]);\r\n\t\t\tvar mesh: Mesh = (<Mesh>sprite.meshFilter.sharedMesh);\r\n\t\t\tvar meshVerCount: number = this._getStaticBatchBakedVertexs(vertexDatas, batchVertexCount, rootOwner ? rootOwner._transform : null, sprite._transform, ((<MeshRenderer>sprite._render)), mesh);\r\n\t\t\tvar indices: Uint16Array = mesh._indexBuffer.getData();\r\n\t\t\tvar indexOffset: number = batchVertexCount;\r\n\t\t\tvar indexEnd: number = batchIndexCount + indices.length;//TODO:indexStartCount和Index\r\n\t\t\tvar elements: RenderElement[] = sprite._render._renderElements;\r\n\t\t\tfor (var j: number = 0, m: number = mesh.subMeshCount; j < m; j++) {\r\n\t\t\t\tvar subMesh: SubMesh = mesh._subMeshes[j];\r\n\t\t\t\tvar start: number = batchIndexCount + subMesh._indexStart;\r\n\t\t\t\tvar element: SubMeshRenderElement = (<SubMeshRenderElement>elements[j]);\r\n\t\t\t\telement.staticBatchIndexStart = start;\r\n\t\t\t\telement.staticBatchIndexEnd = start + subMesh._indexCount;\r\n\t\t\t}\r\n\r\n\t\t\tindexDatas.set(indices, batchIndexCount);//TODO:换成函数和动态合并一样\r\n\t\t\tvar k: number;\r\n\t\t\tvar isInvert: boolean = rootOwner ? (sprite._transform._isFrontFaceInvert !== rootOwner.transform._isFrontFaceInvert) : sprite._transform._isFrontFaceInvert;\r\n\t\t\tif (isInvert) {\r\n\t\t\t\tfor (k = batchIndexCount; k < indexEnd; k += 3) {\r\n\t\t\t\t\tindexDatas[k] = indexOffset + indexDatas[k];\r\n\t\t\t\t\tvar index1: number = indexDatas[k + 1];\r\n\t\t\t\t\tvar index2: number = indexDatas[k + 2];\r\n\t\t\t\t\tindexDatas[k + 1] = indexOffset + index2;\r\n\t\t\t\t\tindexDatas[k + 2] = indexOffset + index1;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (k = batchIndexCount; k < indexEnd; k += 3) {\r\n\t\t\t\t\tindexDatas[k] = indexOffset + indexDatas[k];\r\n\t\t\t\t\tindexDatas[k + 1] = indexOffset + indexDatas[k + 1];\r\n\t\t\t\t\tindexDatas[k + 2] = indexOffset + indexDatas[k + 2];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbatchIndexCount += indices.length;\r\n\t\t\tbatchVertexCount += meshVerCount;\r\n\t\t}\r\n\t\tthis._vertexBuffer.setData(vertexDatas.buffer);\r\n\t\tthis._indexBuffer.setData(indexDatas);\r\n\t\tvar memorySize: number = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;\r\n\t\tResource._addGPUMemory(memorySize);\r\n\r\n\t\tthis._bufferState.bind();\r\n\t\tthis._bufferState.applyVertexBuffer(this._vertexBuffer);\r\n\t\tthis._bufferState.applyIndexBuffer(this._indexBuffer);\r\n\t\tthis._bufferState.unBind();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_render(state: RenderContext3D): void {\r\n\t\tthis._bufferState.bind();\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar element: RenderElement = state.renderElement;\r\n\t\tvar staticBatchElementList: SingletonList<SubMeshRenderElement> = (<SubMeshRenderElement>element).staticBatchElementList;\r\n\t\tvar batchElementList: Array<SubMeshRenderElement> = staticBatchElementList.elements;\r\n\t\t/*合并drawcall版本:合并几率不大*/\r\n\t\tvar from: number = 0;\r\n\t\tvar end: number = 0;\r\n\t\tvar count: number = staticBatchElementList.length;\r\n\t\tfor (var i: number = 1; i < count; i++) {\r\n\t\t\tvar lastElement: SubMeshRenderElement = batchElementList[i - 1];\r\n\t\t\tif (lastElement.staticBatchIndexEnd === batchElementList[i].staticBatchIndexStart) {\r\n\t\t\t\tend++;\r\n\t\t\t\tcontinue;\r\n\t\t\t} else {\r\n\t\t\t\tvar start: number = batchElementList[from].staticBatchIndexStart;\r\n\t\t\t\tvar indexCount: number = batchElementList[end].staticBatchIndexEnd - start;\r\n\t\t\t\tgl.drawElements(gl.TRIANGLES, indexCount, gl.UNSIGNED_SHORT, start * 2);\r\n\t\t\t\tfrom = ++end;\r\n\t\t\t\tStat.trianglesFaces += indexCount / 3;\r\n\t\t\t}\r\n\t\t}\r\n\t\tstart = batchElementList[from].staticBatchIndexStart;\r\n\t\tindexCount = batchElementList[end].staticBatchIndexEnd - start;\r\n\t\tgl.drawElements(gl.TRIANGLES, indexCount, gl.UNSIGNED_SHORT, start * 2);\r\n\t\tStat.renderBatches++;\r\n\t\tStat.savedRenderBatches += count - 1;\r\n\t\tStat.trianglesFaces += indexCount / 3;\r\n\t\t/*暴力循环版本:drawcall调用次数有浪费\r\n\t\t   //for (var i:int = 0, n:int = batchElementList.length; i < n; i++) {\r\n\t\t   //var element:SubMeshRenderElement = batchElementList[i];\r\n\t\t   //var start:int = element.staticBatchIndexStart;\r\n\t\t   //var indexCount:int = element.staticBatchIndexEnd - start;\r\n\t\t   //LayaGL.instance.drawElements(WebGLContext.TRIANGLES, indexCount, WebGLContext.UNSIGNED_SHORT, start * 2);\r\n\t\t   //Stat.drawCall++;\r\n\t\t   //Stat.trianglesFaces += indexCount / 3;\r\n\t\t   //}\r\n\t\t */\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tdispose(): void {\r\n\t\tvar memorySize: number = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;\r\n\t\tResource._addGPUMemory(-memorySize);\r\n\t\tthis._batchElements = null;\r\n\t\tthis.batchOwner = null;\r\n\t\tthis._vertexDeclaration = null;\r\n\t\tthis._bufferState.destroy();\r\n\t\tthis._vertexBuffer.destroy();\r\n\t\tthis._indexBuffer.destroy();\r\n\t\tthis._vertexBuffer = null;\r\n\t\tthis._indexBuffer = null;\r\n\t\tthis._bufferState = null;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { MeshSprite3D } from \"../core/MeshSprite3D\";\r\nimport { BaseRender } from \"../core/render/BaseRender\";\r\nimport { BatchMark } from \"../core/render/BatchMark\";\r\nimport { RenderElement } from \"../core/render/RenderElement\";\r\nimport { SubMeshRenderElement } from \"../core/render/SubMeshRenderElement\";\r\nimport { RenderableSprite3D } from \"../core/RenderableSprite3D\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { StaticBatchManager } from \"./StaticBatchManager\";\r\nimport { SubMeshStaticBatch } from \"./SubMeshStaticBatch\";\r\nimport { VertexDeclaration } from \"./VertexDeclaration\";\r\nimport { VertexMesh } from \"./Vertex/VertexMesh\";\r\nimport { SingletonList } from \"../component/SingletonList\";\r\n\r\n/**\r\n * @internal\r\n * <code>MeshSprite3DStaticBatchManager</code> 类用于网格精灵静态批处理管理。\r\n */\r\nexport class MeshRenderStaticBatchManager extends StaticBatchManager {\r\n\t/** @internal */\r\n\tstatic _verDec: VertexDeclaration;\r\n\t/** @internal */\r\n\tstatic instance: MeshRenderStaticBatchManager = new MeshRenderStaticBatchManager();\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tMeshRenderStaticBatchManager._verDec = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,COLOR,UV,UV1,TANGENT\");\r\n\t}\r\n\r\n\t/**@internal */\r\n\t_opaqueBatchMarks: any[] = [];\r\n\t/**@internal [只读]*/\r\n\t_updateCountMark: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>MeshSprite3DStaticBatchManager</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._updateCountMark = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _compare(left: RenderableSprite3D, right: RenderableSprite3D): number {\r\n\t\t//按照合并条件排序，增加初始状态合并几率\r\n\t\tvar lRender: BaseRender = left._render, rRender: BaseRender = right._render;\r\n\t\tvar leftGeo: Mesh = (<Mesh>((<MeshSprite3D>left)).meshFilter.sharedMesh), rightGeo: Mesh = (<Mesh>((<MeshSprite3D>right)).meshFilter.sharedMesh);\r\n\t\tvar lightOffset: number = lRender.lightmapIndex - rRender.lightmapIndex;\r\n\t\tif (lightOffset === 0) {\r\n\t\t\tvar receiveShadowOffset: number = (lRender.receiveShadow ? 1 : 0) - (rRender.receiveShadow ? 1 : 0);\r\n\t\t\tif (receiveShadowOffset === 0) {\r\n\t\t\t\tvar materialOffset: number = (lRender.sharedMaterial && rRender.sharedMaterial) ? lRender.sharedMaterial.id - rRender.sharedMaterial.id : 0;//多维子材质以第一个材质排序\r\n\t\t\t\tif (materialOffset === 0) {\r\n\t\t\t\t\tvar verDec: number = leftGeo._vertexBuffer.vertexDeclaration.id - rightGeo._vertexBuffer.vertexDeclaration.id;\r\n\t\t\t\t\tif (verDec === 0) {\r\n\t\t\t\t\t\treturn rightGeo._indexBuffer.indexCount - leftGeo._indexBuffer.indexCount;//根据三角面排序\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn verDec;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn materialOffset;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn receiveShadowOffset;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn lightOffset;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_getBatchRenderElementFromPool(): RenderElement {\r\n\t\tvar renderElement: SubMeshRenderElement = this._batchRenderElementPool[this._batchRenderElementPoolIndex++];\r\n\t\tif (!renderElement) {\r\n\t\t\trenderElement = new SubMeshRenderElement();\r\n\t\t\tthis._batchRenderElementPool[this._batchRenderElementPoolIndex - 1] = renderElement;\r\n\t\t\trenderElement.staticBatchElementList = new SingletonList<SubMeshRenderElement>();\r\n\t\t}\r\n\t\treturn renderElement;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getStaticBatch(staticBatches: Array<SubMeshStaticBatch>, rootOwner: Sprite3D, number: number): SubMeshStaticBatch {\r\n\t\tvar subMeshStaticBatch: SubMeshStaticBatch = staticBatches[number];\r\n\t\tif (!subMeshStaticBatch) {\r\n\t\t\tsubMeshStaticBatch = staticBatches[number] = new SubMeshStaticBatch(rootOwner, MeshRenderStaticBatchManager._verDec);\r\n\t\t\tthis._staticBatches[subMeshStaticBatch._batchID] = subMeshStaticBatch;\r\n\t\t}\r\n\t\treturn subMeshStaticBatch;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _initStaticBatchs(rootOwner: Sprite3D): void {\r\n\t\tvar initBatchSprites: RenderableSprite3D[] = this._initBatchSprites;\r\n\t\tthis._quickSort(initBatchSprites, 0, initBatchSprites.length - 1);\r\n\t\tvar staticBatches: SubMeshStaticBatch[] = [];\r\n\t\tvar lastCanMerage: boolean = false;\r\n\t\tvar curStaticBatch: SubMeshStaticBatch;\r\n\t\tvar batchNumber: number = 0;\r\n\t\tfor (var i: number = 0, n: number = initBatchSprites.length; i < n; i++) {\r\n\t\t\tvar sprite: RenderableSprite3D = initBatchSprites[i];\r\n\t\t\tif (lastCanMerage) {\r\n\t\t\t\tif (curStaticBatch.addTest(sprite)) {\r\n\t\t\t\t\tcurStaticBatch.add(sprite);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlastCanMerage = false;\r\n\t\t\t\t\tbatchNumber++;//修改编号，区分批处理\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar lastIndex: number = n - 1;\r\n\t\t\t\tif (i !== lastIndex) {//the last do not need\r\n\t\t\t\t\tcurStaticBatch = this._getStaticBatch(staticBatches, rootOwner, batchNumber);\r\n\t\t\t\t\tcurStaticBatch.add(sprite);\r\n\t\t\t\t\tlastCanMerage = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (i = 0, n = staticBatches.length; i < n; i++) {\r\n\t\t\tvar staticBatch: SubMeshStaticBatch = staticBatches[i];\r\n\t\t\tstaticBatch && staticBatch.finishInit();\r\n\t\t}\r\n\t\tthis._initBatchSprites.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removeRenderSprite(sprite: RenderableSprite3D): void {\r\n\t\tvar render: BaseRender = sprite._render;\r\n\t\tvar staticBatch: SubMeshStaticBatch = <SubMeshStaticBatch>render._staticBatch;\r\n\t\tvar batchElements: RenderableSprite3D[] = staticBatch._batchElements;\r\n\t\tvar index: number = batchElements.indexOf(sprite);\r\n\t\tif (index !== -1) {\r\n\t\t\tbatchElements.splice(index, 1);\r\n\t\t\trender._staticBatch = null;\r\n\t\t\tvar renderElements: RenderElement[] = render._renderElements;\r\n\t\t\tfor (var i: number = 0, n: number = renderElements.length; i < n; i++)\r\n\t\t\t\trenderElements[i].staticBatch = null;\r\n\t\t}\r\n\r\n\t\tif (batchElements.length === 0) {\r\n\t\t\tdelete this._staticBatches[staticBatch._batchID];\r\n\t\t\tstaticBatch.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_clear(): void {\r\n\t\tsuper._clear();\r\n\t\tthis._updateCountMark++;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_garbageCollection(): void {\r\n\t\tfor (var key in this._staticBatches) {\r\n\t\t\tvar staticBatch: SubMeshStaticBatch = this._staticBatches[key];\r\n\t\t\tif (staticBatch._batchElements.length === 0) {\r\n\t\t\t\tstaticBatch.dispose();\r\n\t\t\t\tdelete this._staticBatches[key];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetBatchOpaquaMark(lightMapIndex: number, receiveShadow: boolean, materialID: number, staticBatchID: number): BatchMark {\r\n\t\tvar receiveShadowIndex: number = receiveShadow ? 1 : 0;\r\n\t\tvar staLightMapMarks: any[] = (this._opaqueBatchMarks[lightMapIndex]) || (this._opaqueBatchMarks[lightMapIndex] = []);\r\n\t\tvar staReceiveShadowMarks: any[] = (staLightMapMarks[receiveShadowIndex]) || (staLightMapMarks[receiveShadowIndex] = []);\r\n\t\tvar staMaterialMarks: BatchMark[] = (staReceiveShadowMarks[materialID]) || (staReceiveShadowMarks[materialID] = []);\r\n\t\treturn (staMaterialMarks[staticBatchID]) || (staMaterialMarks[staticBatchID] = new BatchMark);\r\n\t}\r\n}\r\n\r\n","import { Component } from \"../../../components/Component\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { TextureCube } from \"../../resource/TextureCube\";\r\nimport { Bounds } from \"../Bounds\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Scene3D } from \"../scene/Scene3D\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Loader } from \"../../../net/Loader\";\r\nimport { TextureDecodeFormat } from \"../../../resource/TextureDecodeFormat\";\r\n\r\n/**\r\n * 反射探针模式\r\n */\r\nexport enum ReflectionProbeMode {\r\n        off = 0,//现在仅仅支持Back烘培\r\n        simple = 1,\r\n}\r\n/**\r\n * <code>ReflectionProbe</code> 类用于实现反射探针组件\r\n * @miner\r\n */\r\nexport class ReflectionProbe extends Sprite3D {\r\n\t//因为纹理数量问题 暂不支持探针混合\r\n\tstatic TEMPVECTOR3:Vector3 = new Vector3();\r\n\t/** 默认解码数据 */\r\n\tstatic defaultTextureHDRDecodeValues:Vector4 = new Vector4(1.0,1.0,0.0,0.0);\r\n\t/** 盒子反射是否开启 */\r\n\tprivate _boxProjection:boolean = false;\r\n\t/** 探针重要度 */\r\n\tprivate _importance:number;\r\n\t/** 反射探针图片 */\r\n\tprivate _reflectionTexture:TextureCube;\r\n\t/** 包围盒大小 */\r\n\tprivate _size:Vector3 = new Vector3();\r\n\t/** 包围盒偏移 */\r\n\tprivate _offset:Vector3 = new Vector3();\r\n\t/** 包围盒 */\r\n\tprivate _bounds:Bounds;\r\n\t/** 反射强度 */\r\n\tprivate _intensity:number;\r\n\t/** 反射参数 */\r\n\tprivate _reflectionHDRParams:Vector4 = new Vector4();\r\n\t/** 反射探针解码格式 */\r\n\tprivate _reflectionDecodeFormat:TextureDecodeFormat = TextureDecodeFormat.Normal;\r\n\t/** 队列索引 */\r\n\tprivate _indexInReflectProbList:number;\r\n\t/** 是否是场景探针 */\r\n\t_isScene:boolean = false;\r\n\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * 是否开启正交反射。\r\n\t */\r\n\tget boxProjection(): boolean {\r\n\t\treturn this._boxProjection;\r\n\t}\r\n\t\r\n\tset boxProjection(value: boolean) {\r\n\t\tthis._boxProjection = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置反射探针的重要度\r\n\t */\r\n\tget importance():number{\r\n\t\treturn this._importance;\r\n\t}\r\n\r\n\tset importance(value:number){\r\n\t\tthis._importance = value\r\n\t}\r\n\r\n\t/**\r\n\t * 设置反射探针资源\r\n\t */\r\n\tget intensity():number{\r\n\t\treturn this._intensity;\r\n\t}\r\n\r\n\tset intensity(value:number){\r\n\t\tvalue = Math.max(Math.min(value, 1.0), 0.0);\r\n\t\tthis._reflectionHDRParams.x = value;\r\n\t\tif (this._reflectionDecodeFormat == TextureDecodeFormat.RGBM)\r\n\t\t\tthis._reflectionHDRParams.x *= 5.0;//5.0 is RGBM param\r\n\t\tthis._intensity = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置反射贴图\r\n\t */\r\n\tget reflectionTexture(){\r\n\t\treturn this._reflectionTexture;\r\n\t}\r\n\r\n\tset reflectionTexture(value:TextureCube){\r\n\t\tthis._reflectionTexture = value;\r\n\t\tthis._reflectionTexture._addReference();\r\n\t}\r\n\r\n\t/**\r\n\t * 获得反射探针的包围盒\r\n\t */\r\n\tget bounds():Bounds{\r\n\t\treturn this._bounds;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset bounds(value:Bounds){\r\n\t\tthis._bounds = value;\r\n\t}\r\n\r\n\tget boundsMax():Vector3{\r\n\t\treturn this._bounds.getMax();\r\n\t}\r\n\r\n\tget boundsMin():Vector3{\r\n\t\treturn this._bounds.getMin();\r\n\t}\r\n\r\n\tget probePosition():Vector3{\r\n\t\treturn this.transform.position;\r\n\t}\r\n\r\n\t/**\r\n\t * 反射参数\r\n\t */\r\n\tget reflectionHDRParams():Vector4{\r\n\t\treturn this._reflectionHDRParams;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset reflectionHDRParams(value:Vector4){\r\n\t\tthis._reflectionHDRParams = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_parse(data: any,spriteMap: any): void {\r\n\t\tsuper._parse(data,spriteMap);\r\n\t\tthis._boxProjection = data.boxProjection;\r\n\t\tthis._importance = data.importance;\r\n\t\t\r\n\t\tthis._reflectionTexture = Loader.getRes(data.reflection);\r\n\t\tvar position:Vector3 = this.transform.position;\r\n\t\tthis._size.fromArray(data.boxSize);\r\n\t\tVector3.scale(this._size,0.5, ReflectionProbe.TEMPVECTOR3);\r\n\t\tthis._offset.fromArray(data.boxOffset);\r\n\t\tvar min:Vector3 = new Vector3();\r\n\t\tvar max:Vector3 = new Vector3();\r\n\t\tVector3.add(position,ReflectionProbe.TEMPVECTOR3,max);\r\n\t\tVector3.add(max,this._offset,max);\r\n\t\tVector3.subtract(position,ReflectionProbe.TEMPVECTOR3,min);\r\n\t\tVector3.add(min,this._offset,min);\r\n\t\tthis._reflectionDecodeFormat = data.reflectionDecodingFormat;\r\n\t\tthis.intensity = data.intensity;\r\n\t\tif(!this._bounds) this.bounds = new Bounds(min,max);\r\n\t\telse {\r\n\t\t\tthis._bounds.setMin(min);\r\n\t\t\tthis._bounds.setMax(max);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * 设置队列索引\r\n\t * @param value \r\n\t */\r\n\t_setIndexInReflectionList(value: number): void {\r\n\t\tthis._indexInReflectProbList = value;\r\n\t}\r\n\t/**\r\n\t * 获得队列索引\r\n\t */\r\n\t_getIndexInReflectionList():number{\r\n\t\treturn this._indexInReflectProbList;\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onActive(): void {\r\n\t\tsuper._onActive();\r\n\t\tif(this._reflectionTexture)\r\n\t\t(this.scene as Scene3D)._reflectionProbeManager.add(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onInActive(): void {\r\n\t\tsuper._onInActive();\r\n\t\tif(this.reflectionTexture)\r\n\t\t(this.scene as Scene3D)._reflectionProbeManager.remove(this);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tdestroy(){\r\n\t\tthis._reflectionTexture._removeReference();\r\n\t\tthis._reflectionTexture = null;\r\n\t\tthis._bounds = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_cloneTo(dest: ReflectionProbe): void {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { RenderElement } from \"./RenderElement\";\r\nimport { RenderContext3D } from \"./RenderContext3D\";\r\nimport { Bounds } from \"../Bounds\"\r\nimport { GeometryElement } from \"../GeometryElement\"\r\nimport { RenderableSprite3D } from \"../RenderableSprite3D\"\r\nimport { Transform3D } from \"../Transform3D\"\r\nimport { Material } from \"../material/Material\"\r\nimport { BoundsOctreeNode } from \"../scene/BoundsOctreeNode\"\r\nimport { IOctreeObject } from \"../scene/IOctreeObject\"\r\nimport { Scene3D } from \"../scene/Scene3D\"\r\nimport { FrustumCulling } from \"../../graphics/FrustumCulling\"\r\nimport { BoundFrustum } from \"../../math/BoundFrustum\"\r\nimport { Vector3 } from \"../../math/Vector3\"\r\nimport { Vector4 } from \"../../math/Vector4\"\r\nimport { ShaderData } from \"../../shader/ShaderData\"\r\nimport { Event } from \"../../../events/Event\"\r\nimport { EventDispatcher } from \"../../../events/EventDispatcher\"\r\nimport { Render } from \"../../../renders/Render\"\r\nimport { ISingletonElement } from \"../../../resource/ISingletonElement\"\r\nimport { Texture2D } from \"../../../resource/Texture2D\"\r\nimport { MeshRenderStaticBatchManager } from \"../../graphics/MeshRenderStaticBatchManager\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { Lightmap } from \"../scene/Lightmap\";\r\nimport { ReflectionProbe, ReflectionProbeMode } from \"../reflectionProbe/ReflectionProbe\";\r\n\r\n/**\r\n * <code>Render</code> 类用于渲染器的父类，抽象类不允许实例。\r\n */\r\nexport class BaseRender extends EventDispatcher implements ISingletonElement, IOctreeObject {\r\n\t/**@internal */\r\n\tstatic _tempBoundBoxCorners: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];\r\n\r\n\t/**@internal */\r\n\tprivate static _uniqueIDCounter: number = 0;\r\n\r\n\t/**@internal */\r\n\tstatic _defaultLightmapScaleOffset: Vector4 = new Vector4(1.0, 1.0, 0.0, 0.0);\r\n\r\n\t/**@internal */\r\n\tprivate _id: number;\r\n\t/** @internal */\r\n\tprivate _lightmapScaleOffset: Vector4 = new Vector4(1, 1, 0, 0);\r\n\t/** @internal */\r\n\tprivate _lightmapIndex: number;\r\n\t/** @internal */\r\n\tprivate _receiveShadow: boolean;\r\n\t/** @internal */\r\n\tprivate _materialsInstance: boolean[];\r\n\t/** @internal  [实现IListPool接口]*/\r\n\tprivate _indexInList: number = -1;\r\n\t/** @internal */\r\n\t_indexInCastShadowList: number = -1;\r\n\r\n\t/** @internal */\r\n\tprotected _bounds: Bounds;\r\n\t/** @internal */\r\n\tprotected _boundsChange: boolean = true;\r\n\r\n\r\n\t/** @internal */\r\n\t_castShadow: boolean = false;\r\n\t/** @internal */\r\n\t_supportOctree: boolean = true;\r\n\t/** @internal */\r\n\t_enable: boolean;\r\n\t/** @internal */\r\n\t_shaderValues: ShaderData;\r\n\r\n\t/** @internal */\r\n\t_sharedMaterials: Material[] = [];\r\n\t/** @internal */\r\n\t_scene: Scene3D;\r\n\t/** @internal */\r\n\t_owner: RenderableSprite3D;\r\n\t/** @internal */\r\n\t_renderElements: RenderElement[];\r\n\t/** @internal */\r\n\t_distanceForSort: number;\r\n\t/** @internal */\r\n\t_renderMark: number = -1;//TODO:初始值为-1强制更新,否则会造成第一帧动画不更新等,待优化\r\n\t/** @internal */\r\n\t_octreeNode: BoundsOctreeNode;\r\n\t/** @internal */\r\n\t_indexInOctreeMotionList: number = -1;\r\n\t/** @internal 是否需要反射探针*/\r\n\t_probReflection:ReflectionProbe;\r\n\t/** @internal 材质是否支持反射探针*/\r\n\t_surportReflectionProbe:Boolean;\r\n\t/** @internal 设置是反射探针模式 off  simple */\r\n\t_reflectionMode:number = ReflectionProbeMode.simple;\r\n\r\n\t/** @internal */\r\n\t_updateMark: number = -1;\r\n\t/** @internal */\r\n\t_updateRenderType: number = -1;\r\n\t/** @internal */\r\n\t_isPartOfStaticBatch: boolean = false;\r\n\t/** @internal */\r\n\t_staticBatch: GeometryElement = null;\r\n\r\n\t/**排序矫正值。*/\r\n\tsortingFudge: number;\r\n\r\n\t/**@internal\t[NATIVE]*/\r\n\t_cullingBufferIndex: number;\r\n\r\n\t/**\r\n\t * 获取唯一标识ID,通常用于识别。\r\n\t */\r\n\tget id(): number {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\t/**\r\n\t * 光照贴图的索引。\r\n\t */\r\n\tget lightmapIndex(): number {\r\n\t\treturn this._lightmapIndex;\r\n\t}\r\n\r\n\tset lightmapIndex(value: number) {\r\n\t\tthis._lightmapIndex = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 光照贴图的缩放和偏移。\r\n\t */\r\n\tget lightmapScaleOffset(): Vector4 {\r\n\t\treturn this._lightmapScaleOffset;\r\n\t}\r\n\r\n\tset lightmapScaleOffset(value: Vector4) {\r\n\t\tif (!value)\r\n\t\t\tthrow \"BaseRender: lightmapScaleOffset can't be null.\";\r\n\t\tthis._lightmapScaleOffset = value;\r\n\t\tthis._shaderValues.setVector(RenderableSprite3D.LIGHTMAPSCALEOFFSET, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否可用。\r\n\t */\r\n\tget enable(): boolean {\r\n\t\treturn this._enable;\r\n\t}\r\n\r\n\tset enable(value: boolean) {\r\n\t\tthis._enable = !!value;\r\n\t}\r\n\r\n\t/**\r\n\t * 返回第一个实例材质,第一次使用会拷贝实例对象。\r\n\t */\r\n\tget material(): Material {\r\n\t\tvar material: Material = this._sharedMaterials[0];\r\n\t\tif (material && !this._materialsInstance[0]) {\r\n\t\t\tvar insMat: Material = this._getInstanceMaterial(material, 0);\r\n\t\t\tvar renderElement: RenderElement = this._renderElements[0];\r\n\t\t\t(renderElement) && (renderElement.material = insMat);\r\n\t\t}\r\n\t\treturn this._sharedMaterials[0];\r\n\t}\r\n\r\n\tset material(value: Material) {\r\n\t\tthis.sharedMaterial = value;\r\n\t\tthis._isSupportReflection();\r\n\t}\r\n\r\n\t/**\r\n\t * 潜拷贝实例材质列表,第一次使用会拷贝实例对象。\r\n\t */\r\n\tget materials(): Material[] {\r\n\t\tfor (var i: number = 0, n: number = this._sharedMaterials.length; i < n; i++) {\r\n\t\t\tif (!this._materialsInstance[i]) {\r\n\t\t\t\tvar insMat: Material = this._getInstanceMaterial(this._sharedMaterials[i], i);\r\n\t\t\t\tvar renderElement: RenderElement = this._renderElements[i];\r\n\t\t\t\t(renderElement) && (renderElement.material = insMat);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._sharedMaterials.slice();\r\n\t}\r\n\r\n\tset materials(value: Material[]) {\r\n\t\tthis.sharedMaterials = value;\r\n\t\tthis._isSupportReflection();\r\n\t}\r\n\r\n\t/**\r\n\t * 返回第一个材质。\r\n\t */\r\n\tget sharedMaterial(): Material {\r\n\t\treturn this._sharedMaterials[0];\r\n\t}\r\n\r\n\tset sharedMaterial(value: Material) {\r\n\t\tvar lastValue: Material = this._sharedMaterials[0];\r\n\t\tif (lastValue !== value) {\r\n\t\t\tthis._sharedMaterials[0] = value;\r\n\t\t\tthis._materialsInstance[0] = false;\r\n\t\t\tthis._changeMaterialReference(lastValue, value);\r\n\t\t\tvar renderElement: RenderElement = this._renderElements[0];\r\n\t\t\t(renderElement) && (renderElement.material = value);\r\n\t\t}\r\n\t\tthis._isSupportReflection();\r\n\t}\r\n\r\n\t/**\r\n\t * 浅拷贝材质列表。\r\n\t */\r\n\tget sharedMaterials(): Material[] {\r\n\t\treturn this._sharedMaterials.slice();\r\n\t}\r\n\r\n\tset sharedMaterials(value: Material[]) {\r\n\t\tvar materialsInstance: boolean[] = this._materialsInstance;\r\n\t\tvar sharedMats: Material[] = this._sharedMaterials;\r\n\r\n\t\tfor (var i: number = 0, n: number = sharedMats.length; i < n; i++) {\r\n\t\t\tvar lastMat: Material = sharedMats[i];\r\n\t\t\t(lastMat) && (lastMat._removeReference());\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tvar count: number = value.length;\r\n\t\t\tmaterialsInstance.length = count;\r\n\t\t\tsharedMats.length = count;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tlastMat = sharedMats[i];\r\n\t\t\t\tvar mat: Material = value[i];\r\n\t\t\t\tif (lastMat !== mat) {\r\n\t\t\t\t\tmaterialsInstance[i] = false;\r\n\t\t\t\t\tvar renderElement: RenderElement = this._renderElements[i];\r\n\t\t\t\t\t(renderElement) && (renderElement.material = mat);\r\n\t\t\t\t}\r\n\t\t\t\tif (mat) {\r\n\t\t\t\t\tmat._addReference();\r\n\t\t\t\t}\r\n\t\t\t\tsharedMats[i] = mat;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"BaseRender: shadredMaterials value can't be null.\");\r\n\t\t}\r\n\t\tthis._isSupportReflection();\r\n\t}\r\n\r\n\t/**\r\n\t * 包围盒,只读,不允许修改其值。\r\n\t */\r\n\tget bounds(): Bounds {\r\n\t\tif (this._boundsChange) {\r\n\t\t\tthis._calculateBoundingBox();\r\n\t\t\tthis._boundsChange = false;\r\n\t\t}\r\n\t\treturn this._bounds;\r\n\t}\r\n\r\n\tset receiveShadow(value: boolean) {\r\n\t\tif (this._receiveShadow !== value) {\r\n\t\t\tthis._receiveShadow = value;\r\n\t\t\tif (value)\r\n\t\t\t\tthis._shaderValues.addDefine(RenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW);\r\n\t\t\telse\r\n\t\t\t\tthis._shaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 是否接收阴影属性\r\n\t */\r\n\tget receiveShadow(): boolean {\r\n\t\treturn this._receiveShadow;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否产生阴影。\r\n\t */\r\n\tget castShadow(): boolean {\r\n\t\treturn this._castShadow;\r\n\t}\r\n\r\n\tset castShadow(value: boolean) {\r\n\t\tthis._castShadow = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否是静态的一部分。\r\n\t */\r\n\tget isPartOfStaticBatch(): boolean {\r\n\t\treturn this._isPartOfStaticBatch;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否被渲染。\r\n\t */\r\n\tget isRender(): boolean {\r\n\t\treturn this._renderMark == -1 || this._renderMark == (Stat.loopCount - 1);\r\n\t}\r\n\r\n\tset reflectionMode(value:ReflectionProbeMode){\r\n\t\tthis._reflectionMode = value;\r\n\t}\r\n\r\n\tget reflectionMode():ReflectionProbeMode{\r\n\t\treturn this._reflectionMode;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 创建一个新的 <code>BaseRender</code> 实例。\r\n\t */\r\n\tconstructor(owner: RenderableSprite3D) {\r\n\t\tsuper();\r\n\t\tthis._id = ++BaseRender._uniqueIDCounter;\r\n\t\tthis._indexInCastShadowList = -1;\r\n\t\tthis._bounds = new Bounds(Vector3._ZERO, Vector3._ZERO);\r\n\t\tif (Render.supportWebGLPlusCulling) {//[NATIVE]\r\n\t\t\tvar length: number = FrustumCulling._cullingBufferLength;\r\n\t\t\tthis._cullingBufferIndex = length;\r\n\t\t\tvar cullingBuffer: Float32Array = FrustumCulling._cullingBuffer;\r\n\t\t\tvar resizeLength: number = length + 7;\r\n\t\t\tif (resizeLength >= cullingBuffer.length) {\r\n\t\t\t\tvar temp: Float32Array = cullingBuffer;\r\n\t\t\t\tcullingBuffer = FrustumCulling._cullingBuffer = new Float32Array(cullingBuffer.length + 4096);\r\n\t\t\t\tcullingBuffer.set(temp, 0);\r\n\t\t\t}\r\n\t\t\tcullingBuffer[length] = 2;\r\n\t\t\tFrustumCulling._cullingBufferLength = resizeLength;\r\n\t\t}\r\n\r\n\t\tthis._renderElements = [];\r\n\t\tthis._owner = owner;\r\n\t\tthis._enable = true;\r\n\t\tthis._materialsInstance = [];\r\n\t\tthis._shaderValues = new ShaderData(null);\r\n\t\tthis.lightmapIndex = -1;\r\n\t\tthis.receiveShadow = false;\r\n\t\tthis.sortingFudge = 0.0;\r\n\t\t(owner) && (this._owner.transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));//如果为合并BaseRender,owner可能为空\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\t_getOctreeNode(): BoundsOctreeNode {//[实现IOctreeObject接口]\r\n\t\treturn this._octreeNode;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\t_setOctreeNode(value: BoundsOctreeNode): void {//[实现IOctreeObject接口]\r\n\t\tthis._octreeNode = value;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\t_getIndexInMotionList(): number {//[实现IOctreeObject接口]\r\n\t\treturn this._indexInOctreeMotionList;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\t_setIndexInMotionList(value: number): void {//[实现IOctreeObject接口]\r\n\t\tthis._indexInOctreeMotionList = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _changeMaterialReference(lastValue: Material, value: Material): void {\r\n\t\t(lastValue) && (lastValue._removeReference());\r\n\t\tvalue._addReference();//TODO:value可以为空\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getInstanceMaterial(material: Material, index: number): Material {\r\n\t\tvar insMat: Material = material.clone();//深拷贝\r\n\t\tinsMat.name = insMat.name + \"(Instance)\";\r\n\t\tthis._materialsInstance[index] = true;\r\n\t\tthis._changeMaterialReference(this._sharedMaterials[index], insMat);\r\n\t\tthis._sharedMaterials[index] = insMat;\r\n\t\treturn insMat;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _isSupportReflection(){\r\n\t\tthis._surportReflectionProbe = false;\r\n\t\tvar sharedMats: Material[] = this._sharedMaterials;\r\n\t\tfor (var i: number = 0, n: number = sharedMats.length; i < n; i++) {\r\n\t\t\tvar mat: Material = sharedMats[i];\r\n\t\t\tthis._surportReflectionProbe= (this._surportReflectionProbe||mat._shader._supportReflectionProbe);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 渲染器添加到更新反射探针队列\r\n\t * @internal\r\n\t */\r\n\t_addReflectionProbeUpdate(){\r\n\t\t//TODO目前暂时不支持混合以及与天空盒模式，只支持simple和off\r\n\t\tif(this._surportReflectionProbe&&this._reflectionMode==1){\r\n\t\t\tthis._scene._reflectionProbeManager.addMotionObject(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_applyLightMapParams(): void {\r\n\t\tvar lightMaps: Lightmap[] = this._scene.lightmaps;\r\n\t\tvar shaderValues: ShaderData = this._shaderValues;\r\n\t\tvar lightmapIndex: number = this._lightmapIndex;\r\n\t\tif (lightmapIndex >= 0 && lightmapIndex < lightMaps.length) {\r\n\t\t\tvar lightMap: Lightmap = lightMaps[lightmapIndex];\r\n\t\t\tshaderValues.setTexture(RenderableSprite3D.LIGHTMAP, lightMap.lightmapColor);\r\n\t\t\tshaderValues.addDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP);\r\n\t\t\tif (lightMap.lightmapDirection) {\r\n\t\t\t\tshaderValues.setTexture(RenderableSprite3D.LIGHTMAP_DIRECTION, lightMap.lightmapDirection);\r\n\t\t\t\tshaderValues.addDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tshaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tshaderValues.removeDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP);\r\n\t\t\tshaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _onWorldMatNeedChange(flag: number): void {\r\n\t\tthis._boundsChange = true;\r\n\t\tif (this._octreeNode) {\r\n\t\t\tflag &= Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDSCALE;//过滤有用TRANSFORM标记\r\n\t\t\tif (flag) {\r\n\t\t\t\tif (this._indexInOctreeMotionList === -1)//_octreeNode表示在八叉树队列中\r\n\t\t\t\t\tthis._octreeNode._octree.addMotionObject(this);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._addReflectionProbeUpdate();\r\n\t\t\r\n\t}\r\n\r\n\r\n\t\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _calculateBoundingBox(): void {\r\n\t\tthrow (\"BaseRender: must override it.\");\r\n\t}\r\n\r\n\t/**\r\n\t *  [实现ISingletonElement接口]\r\n\t */\r\n\t_getIndexInList(): number {\r\n\t\treturn this._indexInList;\r\n\t}\r\n\r\n\t/**\r\n\t *  [实现ISingletonElement接口]\r\n\t */\r\n\t_setIndexInList(index: number): void {\r\n\t\tthis._indexInList = index;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setBelongScene(scene: Scene3D): void {\r\n\t\tthis._scene = scene;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @param boundFrustum 如果boundFrustum为空则为摄像机不裁剪模式。\r\n\t */\r\n\t_needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_renderUpdate(context: RenderContext3D, transform: Transform3D): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_revertBatchRenderUpdate(context: RenderContext3D): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_destroy(): void {\r\n\t\t(this._indexInOctreeMotionList !== -1) && (this._octreeNode._octree.removeMotionObject(this));\r\n\t\tthis.offAll();\r\n\t\tvar i: number = 0, n: number = 0;\r\n\t\tfor (i = 0, n = this._renderElements.length; i < n; i++)\r\n\t\t\tthis._renderElements[i].destroy();\r\n\t\tfor (i = 0, n = this._sharedMaterials.length; i < n; i++)\r\n\t\t\t(this._sharedMaterials[i].destroyed) || (this._sharedMaterials[i]._removeReference());//TODO:材质可能为空\r\n\t\tthis._renderElements = null;\r\n\t\tthis._owner = null;\r\n\t\tthis._sharedMaterials = null;\r\n\t\tthis._bounds = null;\r\n\t\tthis._lightmapScaleOffset = null;\r\n\t}\r\n\r\n\t/**\r\n\t * 标记为非静态,静态合并后可用于取消静态限制。\r\n\t */\r\n\tmarkAsUnStatic(): void {\r\n\t\tif (this._isPartOfStaticBatch) {\r\n\t\t\tMeshRenderStaticBatchManager.instance._removeRenderSprite(this._owner);\r\n\t\t\tthis._isPartOfStaticBatch = false;\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\n","import { Render } from \"../../../renders/Render\";\r\nimport { FrustumCulling } from \"../../graphics/FrustumCulling\";\r\nimport { Matrix4x4 } from \"../../math/Matrix4x4\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { ShaderData } from \"../../shader/ShaderData\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { PixelLineSprite3D } from \"./PixelLineSprite3D\";\r\nimport { PixelLineFilter } from \"./PixelLineFilter\";\r\n\r\n\r\n/**\r\n * <code>PixelLineRenderer</code> 类用于线渲染器。\r\n */\r\nexport class PixelLineRenderer extends BaseRender {\r\n\t/** @internal */\r\n\tprotected _projectionViewWorldMatrix: Matrix4x4;\r\n\r\n\tconstructor(owner: PixelLineSprite3D) {\r\n\t\tsuper(owner);\r\n\t\tthis._projectionViewWorldMatrix = new Matrix4x4();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _calculateBoundingBox(): void {\r\n\t\tvar worldMat: Matrix4x4 = ((<PixelLineSprite3D>this._owner)).transform.worldMatrix;\r\n\t\tvar lineFilter: PixelLineFilter = (<PixelLineSprite3D>this._owner)._geometryFilter;\r\n\t\tlineFilter._reCalculateBound();\r\n\t\tlineFilter._bounds._tranform(worldMat, this._bounds);\r\n\t\tif (Render.supportWebGLPlusCulling) {//[NATIVE]\r\n\t\t\tvar min: Vector3 = this._bounds.getMin();\r\n\t\t\tvar max: Vector3 = this._bounds.getMax();\r\n\t\t\tvar buffer: Float32Array = FrustumCulling._cullingBuffer;\r\n\t\t\tbuffer[this._cullingBufferIndex + 1] = min.x;\r\n\t\t\tbuffer[this._cullingBufferIndex + 2] = min.y;\r\n\t\t\tbuffer[this._cullingBufferIndex + 3] = min.z;\r\n\t\t\tbuffer[this._cullingBufferIndex + 4] = max.x;\r\n\t\t\tbuffer[this._cullingBufferIndex + 5] = max.y;\r\n\t\t\tbuffer[this._cullingBufferIndex + 6] = max.z;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {//TODO:整理_renderUpdate\r\n\t\tvar projectionView: Matrix4x4 = context.projectionViewMatrix;\r\n\t\tvar sv: ShaderData = this._shaderValues;\r\n\t\tif (transform) {\r\n\t\t\tvar worldMat: Matrix4x4 = transform.worldMatrix;\r\n\t\t\tsv.setMatrix4x4(Sprite3D.WORLDMATRIX, worldMat);\r\n\t\t\tMatrix4x4.multiply(projectionView, worldMat, this._projectionViewWorldMatrix);\r\n\t\t\tsv.setMatrix4x4(Sprite3D.MVPMATRIX, this._projectionViewWorldMatrix);\r\n\t\t} else {\r\n\t\t\tsv.setMatrix4x4(Sprite3D.WORLDMATRIX, Matrix4x4.DEFAULT);\r\n\t\t\tsv.setMatrix4x4(Sprite3D.MVPMATRIX, projectionView);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { PixelLineFilter } from \"./PixelLineFilter\";\r\nimport { PixelLineRenderer } from \"./PixelLineRenderer\";\r\nimport { PixelLineMaterial } from \"./PixelLineMaterial\";\r\nimport { PixelLineData } from \"./PixelLineData\";\r\nimport { RenderableSprite3D } from \"../RenderableSprite3D\"\r\nimport { Material } from \"../material/Material\"\r\nimport { RenderElement } from \"../render/RenderElement\"\r\nimport { Color } from \"../../math/Color\"\r\nimport { Vector3 } from \"../../math/Vector3\"\r\nimport { Node } from \"../../../display/Node\"\r\n\r\n/**\r\n * <code>PixelLineSprite3D</code> 类用于像素线渲染精灵。\r\n */\r\nexport class PixelLineSprite3D extends RenderableSprite3D {\r\n\t/** @internal */\r\n\tpublic _geometryFilter: PixelLineFilter;\r\n\r\n\t/**\r\n\t * 最大线数量\r\n\t */\r\n\tget maxLineCount(): number {\r\n\t\treturn this._geometryFilter._maxLineCount;\r\n\t}\r\n\r\n\tset maxLineCount(value: number) {\r\n\t\tthis._geometryFilter._resizeLineData(value);\r\n\t\tthis._geometryFilter._lineCount = Math.min(this._geometryFilter._lineCount, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取线数量。\r\n\t */\r\n\tget lineCount(): number {\r\n\t\treturn this._geometryFilter._lineCount;\r\n\t}\r\n\r\n\tset lineCount(value: number) {\r\n\t\tif (value > this.maxLineCount)\r\n\t\t\tthrow \"PixelLineSprite3D: lineCount can't large than maxLineCount\";\r\n\t\telse\r\n\t\t\tthis._geometryFilter._lineCount = value;\r\n\t}\r\n\r\n\t/**\r\n\t * line渲染器。\r\n\t */\r\n\tget pixelLineRenderer(): PixelLineRenderer {\r\n\t\treturn (<PixelLineRenderer>this._render);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>PixelLineSprite3D</code> 实例。\r\n\t * @param maxCount 最大线段数量。\r\n\t * @param name 名字。\r\n\t */\r\n\tconstructor(maxCount: number = 2, name: string = null) {\r\n\t\tsuper(name);\r\n\t\tthis._geometryFilter = new PixelLineFilter(this, maxCount);\r\n\t\tthis._render = new PixelLineRenderer(this);\r\n\t\tthis._changeRenderObjects((<PixelLineRenderer>this._render), 0, PixelLineMaterial.defaultMaterial);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\t_changeRenderObjects(sender: PixelLineRenderer, index: number, material: Material): void {\r\n\t\tvar renderObjects: RenderElement[] = this._render._renderElements;\r\n\t\t(material) || (material = PixelLineMaterial.defaultMaterial);\r\n\t\tvar renderElement: RenderElement = renderObjects[index];\r\n\t\t(renderElement) || (renderElement = renderObjects[index] = new RenderElement());\r\n\t\trenderElement.setTransform(this._transform);\r\n\t\trenderElement.setGeometry(this._geometryFilter);\r\n\t\trenderElement.render = this._render;\r\n\t\trenderElement.material = material;\r\n\t}\r\n\r\n\t/**\r\n\t * 增加一条线。\r\n\t * @param\tstartPosition  初始点位置\r\n\t * @param\tendPosition\t   结束点位置\r\n\t * @param\tstartColor\t   初始点颜色\r\n\t * @param\tendColor\t   结束点颜色\r\n\t */\r\n\taddLine(startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n\t\tif (this._geometryFilter._lineCount !== this._geometryFilter._maxLineCount)\r\n\t\t\tthis._geometryFilter._updateLineData(this._geometryFilter._lineCount++, startPosition, endPosition, startColor, endColor);\r\n\t\telse\r\n\t\t\tthrow \"PixelLineSprite3D: lineCount has equal with maxLineCount.\";\r\n\t}\r\n\r\n\t/**\r\n\t * 添加多条线段。\r\n\t * @param\tlines  线段数据\r\n\t */\r\n\taddLines(lines: PixelLineData[]): void {\r\n\t\tvar lineCount: number = this._geometryFilter._lineCount;\r\n\t\tvar addCount: number = lines.length;\r\n\t\tif (lineCount + addCount > this._geometryFilter._maxLineCount) {\r\n\t\t\tthrow \"PixelLineSprite3D: lineCount plus lines count must less than maxLineCount.\";\r\n\t\t} else {\r\n\t\t\tthis._geometryFilter._updateLineDatas(lineCount, lines);\r\n\t\t\tthis._geometryFilter._lineCount += addCount;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 移除一条线段。\r\n\t * @param index 索引。\r\n\t */\r\n\tremoveLine(index: number): void {\r\n\t\tif (index < this._geometryFilter._lineCount)\r\n\t\t\tthis._geometryFilter._removeLineData(index);\r\n\t\telse\r\n\t\t\tthrow \"PixelLineSprite3D: index must less than lineCount.\";\r\n\t}\r\n\r\n\t/**\r\n\t * 更新线\r\n\t * @param\tindex  \t\t   索引\r\n\t * @param\tstartPosition  初始点位置\r\n\t * @param\tendPosition\t   结束点位置\r\n\t * @param\tstartColor\t   初始点颜色\r\n\t * @param\tendColor\t   结束点颜色\r\n\t */\r\n\tsetLine(index: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n\t\tif (index < this._geometryFilter._lineCount)\r\n\t\t\tthis._geometryFilter._updateLineData(index, startPosition, endPosition, startColor, endColor);\r\n\t\telse\r\n\t\t\tthrow \"PixelLineSprite3D: index must less than lineCount.\";\r\n\t}\r\n\r\n\t/**\r\n\t * 获取线段数据\r\n\t * @param out 线段数据。\r\n\t */\r\n\tgetLine(index: number, out: PixelLineData): void {\r\n\t\tif (index < this.lineCount)\r\n\t\t\tthis._geometryFilter._getLineData(index, out);\r\n\t\telse\r\n\t\t\tthrow \"PixelLineSprite3D: index must less than lineCount.\";\r\n\t}\r\n\r\n\t/**\r\n\t * 清除所有线段。\r\n\t */\r\n\tclear(): void {\r\n\t\tthis._geometryFilter._lineCount = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new PixelLineSprite3D();\r\n\t}\r\n\r\n}\r\n\r\n","import { SingletonList } from \"../../component/SingletonList\";\r\nimport { RenderContext3D } from \"./RenderContext3D\";\r\nimport { RenderElement } from \"./RenderElement\";\r\n\r\n/**\r\n * @internal\r\n * <code>RenderQuene</code> 类用于实现渲染队列。\r\n */\r\nexport class RenderQueue {\r\n\t/** @internal [只读]*/\r\n\tisTransparent: boolean = false;\r\n\t/** @internal */\r\n\telements: SingletonList<RenderElement> = new SingletonList<RenderElement>();\r\n\t/** @internal */\r\n\tlastTransparentRenderElement: RenderElement = null;\r\n\t/** @internal */\r\n\tlastTransparentBatched: boolean = false;\r\n\r\n\t/**\r\n\t * 创建一个 <code>RenderQuene</code> 实例。\r\n\t */\r\n\tconstructor(isTransparent: boolean = false) {\r\n\t\tthis.isTransparent = isTransparent;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _compare(left: RenderElement, right: RenderElement): number {\r\n\t\tvar renderQueue: number = left.material.renderQueue - right.material.renderQueue;\r\n\t\tif (renderQueue === 0) {\r\n\t\t\tvar sort: number = this.isTransparent ? right.render._distanceForSort - left.render._distanceForSort : left.render._distanceForSort - right.render._distanceForSort;\r\n\t\t\treturn sort + right.render.sortingFudge - left.render.sortingFudge;\r\n\t\t} else {\r\n\t\t\treturn renderQueue;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _partitionRenderObject(left: number, right: number): number {\r\n\t\tvar elements: RenderElement[] = this.elements.elements;\r\n\t\tvar pivot: RenderElement = elements[Math.floor((right + left) / 2)];\r\n\t\twhile (left <= right) {\r\n\t\t\twhile (this._compare(elements[left], pivot) < 0)\r\n\t\t\t\tleft++;\r\n\t\t\twhile (this._compare(elements[right], pivot) > 0)\r\n\t\t\t\tright--;\r\n\t\t\tif (left < right) {\r\n\t\t\t\tvar temp: RenderElement = elements[left];\r\n\t\t\t\telements[left] = elements[right];\r\n\t\t\t\telements[right] = temp;\r\n\t\t\t\tleft++;\r\n\t\t\t\tright--;\r\n\t\t\t} else if (left === right) {\r\n\t\t\t\tleft++;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn left;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_quickSort(left: number, right: number): void {\r\n\t\tif (this.elements.length > 1) {\r\n\t\t\tvar index: number = this._partitionRenderObject(left, right);\r\n\t\t\tvar leftIndex: number = index - 1;\r\n\t\t\tif (left < leftIndex)\r\n\t\t\t\tthis._quickSort(left, leftIndex);\r\n\r\n\t\t\tif (index < right)\r\n\t\t\t\tthis._quickSort(index, right);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_render(context: RenderContext3D): void {\r\n\t\tvar elements: RenderElement[] = this.elements.elements;\r\n\t\tfor (var i: number = 0, n: number = this.elements.length; i < n; i++)\r\n\t\t\telements[i]._render(context);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tclear(): void {\r\n\t\tthis.elements.length = 0;\r\n\t\tthis.lastTransparentRenderElement = null;\r\n\t\tthis.lastTransparentBatched = false;\r\n\t}\r\n}\r\n\r\n","import { Stat } from \"../../../utils/Stat\";\r\nimport { BoundBox } from \"../../math/BoundBox\";\r\nimport { BoundFrustum } from \"../../math/BoundFrustum\";\r\nimport { CollisionUtils } from \"../../math/CollisionUtils\";\r\nimport { Color } from \"../../math/Color\";\r\nimport { ContainmentType } from \"../../math/ContainmentType\";\r\nimport { Ray } from \"../../math/Ray\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { Camera } from \"../Camera\";\r\nimport { PixelLineSprite3D } from \"../pixelLine/PixelLineSprite3D\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { RenderElement } from \"../render/RenderElement\";\r\nimport { IOctreeObject } from \"./IOctreeObject\";\r\nimport { Scene3D } from \"./Scene3D\";\r\nimport { BoundsOctree } from \"./BoundsOctree\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { CameraCullInfo } from \"../../graphics/FrustumCulling\";\r\n\r\n/**\r\n * <code>BoundsOctreeNode</code> 类用于创建八叉树节点。\r\n */\r\nexport class BoundsOctreeNode {\r\n\t/**@internal */\r\n\tprivate static _tempVector3: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector31: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempColor0: Color = new Color();\r\n\t/**@internal */\r\n\tprivate static _tempBoundBox: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\r\n\t/**@internal */\r\n\tprivate static _NUM_OBJECTS_ALLOWED: number = 8;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _encapsulates(outerBound: BoundBox, innerBound: BoundBox): boolean {\r\n\t\treturn CollisionUtils.boxContainsBox(outerBound, innerBound) == ContainmentType.Contains;\r\n\t}\r\n\r\n\t/**@internal */\r\n\t_octree: BoundsOctree;\r\n\t/**@internal */\r\n\t_parent: BoundsOctreeNode;\r\n\t/**@internal AABB包围盒*/\r\n\tprivate _bounds: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\t/**@internal */\r\n\tprivate _objects: IOctreeObject[] = [];\r\n\r\n\t/**@internal */\r\n\t_children: BoundsOctreeNode[];\r\n\t/**@internal [Debug]*/\r\n\t_isContaion: boolean = false;\r\n\r\n\t/**@internal\t[只读]*/\r\n\tcenter: Vector3 = new Vector3();\r\n\t/**@internal\t[只读]*/\r\n\tbaseLength: number = 0.0;\r\n\r\n\t/**\r\n\t * 创建一个 <code>BoundsOctreeNode</code> 实例。\r\n\t * @param octree  所属八叉树。\r\n\t * @param parent  父节点。\r\n\t * @param baseLength  节点基本长度。\r\n\t * @param center  节点的中心位置。\r\n\t */\r\n\tconstructor(octree: BoundsOctree, parent: BoundsOctreeNode, baseLength: number, center: Vector3) {\r\n\t\tthis._setValues(octree, parent, baseLength, center);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _setValues(octree: BoundsOctree, parent: BoundsOctreeNode, baseLength: number, center: Vector3): void {\r\n\t\tthis._octree = octree;\r\n\t\tthis._parent = parent;\r\n\t\tthis.baseLength = baseLength;\r\n\t\tcenter.cloneTo(this.center);//避免引用错乱\r\n\t\tvar min: Vector3 = this._bounds.min;\r\n\t\tvar max: Vector3 = this._bounds.max;\r\n\t\tvar halfSize: number = (octree._looseness * baseLength) / 2;\r\n\t\tmin.setValue(center.x - halfSize, center.y - halfSize, center.z - halfSize);\r\n\t\tmax.setValue(center.x + halfSize, center.y + halfSize, center.z + halfSize);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getChildBound(index: number): BoundBox {\r\n\t\tif (this._children != null && this._children[index]) {\r\n\t\t\treturn this._children[index]._bounds;\r\n\t\t} else {\r\n\t\t\tvar quarter: number = this.baseLength / 4;\r\n\t\t\tvar halfChildSize: number = ((this.baseLength / 2) * this._octree._looseness) / 2;\r\n\t\t\tvar bounds: BoundBox = BoundsOctreeNode._tempBoundBox;\r\n\t\t\tvar min: Vector3 = bounds.min;\r\n\t\t\tvar max: Vector3 = bounds.max;\r\n\t\t\tswitch (index) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tmin.x = this.center.x - quarter - halfChildSize;\r\n\t\t\t\t\tmin.y = this.center.y + quarter - halfChildSize;\r\n\t\t\t\t\tmin.z = this.center.z - quarter - halfChildSize;\r\n\t\t\t\t\tmax.x = this.center.x - quarter + halfChildSize;\r\n\t\t\t\t\tmax.y = this.center.y + quarter + halfChildSize;\r\n\t\t\t\t\tmax.z = this.center.z - quarter + halfChildSize;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tmin.x = this.center.x + quarter - halfChildSize;\r\n\t\t\t\t\tmin.y = this.center.y + quarter - halfChildSize;\r\n\t\t\t\t\tmin.z = this.center.z - quarter - halfChildSize;\r\n\t\t\t\t\tmax.x = this.center.x + quarter + halfChildSize;\r\n\t\t\t\t\tmax.y = this.center.y + quarter + halfChildSize;\r\n\t\t\t\t\tmax.z = this.center.z - quarter + halfChildSize;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tmin.x = this.center.x - quarter - halfChildSize;\r\n\t\t\t\t\tmin.y = this.center.y + quarter - halfChildSize;\r\n\t\t\t\t\tmin.z = this.center.z + quarter - halfChildSize;\r\n\t\t\t\t\tmax.x = this.center.x - quarter + halfChildSize;\r\n\t\t\t\t\tmax.y = this.center.y + quarter + halfChildSize;\r\n\t\t\t\t\tmax.z = this.center.z + quarter + halfChildSize;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tmin.x = this.center.x + quarter - halfChildSize;\r\n\t\t\t\t\tmin.y = this.center.y + quarter - halfChildSize;\r\n\t\t\t\t\tmin.z = this.center.z + quarter - halfChildSize;\r\n\t\t\t\t\tmax.x = this.center.x + quarter + halfChildSize;\r\n\t\t\t\t\tmax.y = this.center.y + quarter + halfChildSize;\r\n\t\t\t\t\tmax.z = this.center.z + quarter + halfChildSize;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tmin.x = this.center.x - quarter - halfChildSize;\r\n\t\t\t\t\tmin.y = this.center.y - quarter - halfChildSize;\r\n\t\t\t\t\tmin.z = this.center.z - quarter - halfChildSize;\r\n\t\t\t\t\tmax.x = this.center.x - quarter + halfChildSize;\r\n\t\t\t\t\tmax.y = this.center.y - quarter + halfChildSize;\r\n\t\t\t\t\tmax.z = this.center.z - quarter + halfChildSize;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tmin.x = this.center.x + quarter - halfChildSize;\r\n\t\t\t\t\tmin.y = this.center.y - quarter - halfChildSize;\r\n\t\t\t\t\tmin.z = this.center.z - quarter - halfChildSize;\r\n\t\t\t\t\tmax.x = this.center.x + quarter + halfChildSize;\r\n\t\t\t\t\tmax.y = this.center.y - quarter + halfChildSize;\r\n\t\t\t\t\tmax.z = this.center.z - quarter + halfChildSize;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tmin.x = this.center.x - quarter - halfChildSize;\r\n\t\t\t\t\tmin.y = this.center.y - quarter - halfChildSize;\r\n\t\t\t\t\tmin.z = this.center.z + quarter - halfChildSize;\r\n\t\t\t\t\tmax.x = this.center.x - quarter + halfChildSize;\r\n\t\t\t\t\tmax.y = this.center.y - quarter + halfChildSize;\r\n\t\t\t\t\tmax.z = this.center.z + quarter + halfChildSize;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 7:\r\n\t\t\t\t\tmin.x = this.center.x + quarter - halfChildSize;\r\n\t\t\t\t\tmin.y = this.center.y - quarter - halfChildSize;\r\n\t\t\t\t\tmin.z = this.center.z + quarter - halfChildSize;\r\n\t\t\t\t\tmax.x = this.center.x + quarter + halfChildSize;\r\n\t\t\t\t\tmax.y = this.center.y - quarter + halfChildSize;\r\n\t\t\t\t\tmax.z = this.center.z + quarter + halfChildSize;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\treturn bounds;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getChildCenter(index: number): Vector3 {\r\n\t\tif (this._children != null) {\r\n\t\t\treturn this._children[index].center;\r\n\t\t} else {\r\n\t\t\tvar quarter: number = this.baseLength / 4;\r\n\t\t\tvar childCenter: Vector3 = BoundsOctreeNode._tempVector30;\r\n\t\t\tswitch (index) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tchildCenter.x = this.center.x - quarter;\r\n\t\t\t\t\tchildCenter.y = this.center.y + quarter;\r\n\t\t\t\t\tchildCenter.z = this.center.z - quarter;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tchildCenter.x = this.center.x + quarter;\r\n\t\t\t\t\tchildCenter.y = this.center.y + quarter;\r\n\t\t\t\t\tchildCenter.z = this.center.z - quarter;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tchildCenter.x = this.center.x - quarter;\r\n\t\t\t\t\tchildCenter.y = this.center.y + quarter;\r\n\t\t\t\t\tchildCenter.z = this.center.z + quarter;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tchildCenter.x = this.center.x + quarter;\r\n\t\t\t\t\tchildCenter.y = this.center.y + quarter;\r\n\t\t\t\t\tchildCenter.z = this.center.z + quarter;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tchildCenter.x = this.center.x - quarter;\r\n\t\t\t\t\tchildCenter.y = this.center.y - quarter;\r\n\t\t\t\t\tchildCenter.z = this.center.z - quarter;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tchildCenter.x = this.center.x + quarter;\r\n\t\t\t\t\tchildCenter.y = this.center.y - quarter;\r\n\t\t\t\t\tchildCenter.z = this.center.z - quarter;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tchildCenter.x = this.center.x - quarter;\r\n\t\t\t\t\tchildCenter.y = this.center.y - quarter;\r\n\t\t\t\t\tchildCenter.z = this.center.z + quarter;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 7:\r\n\t\t\t\t\tchildCenter.x = this.center.x + quarter;\r\n\t\t\t\t\tchildCenter.y = this.center.y - quarter;\r\n\t\t\t\t\tchildCenter.z = this.center.z + quarter;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\treturn childCenter;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getChild(index: number): BoundsOctreeNode {\r\n\t\tvar quarter: number = this.baseLength / 4;\r\n\t\tthis._children || (this._children = []);\r\n\t\tswitch (index) {\r\n\t\t\tcase 0:\r\n\t\t\t\treturn this._children[0] || (this._children[0] = new BoundsOctreeNode(this._octree, this, this.baseLength / 2, new Vector3(this.center.x + -quarter, this.center.y + quarter, this.center.z - quarter)));\r\n\t\t\tcase 1:\r\n\t\t\t\treturn this._children[1] || (this._children[1] = new BoundsOctreeNode(this._octree, this, this.baseLength / 2, new Vector3(this.center.x + quarter, this.center.y + quarter, this.center.z - quarter)));\r\n\t\t\tcase 2:\r\n\t\t\t\treturn this._children[2] || (this._children[2] = new BoundsOctreeNode(this._octree, this, this.baseLength / 2, new Vector3(this.center.x - quarter, this.center.y + quarter, this.center.z + quarter)));\r\n\t\t\tcase 3:\r\n\t\t\t\treturn this._children[3] || (this._children[3] = new BoundsOctreeNode(this._octree, this, this.baseLength / 2, new Vector3(this.center.x + quarter, this.center.y + quarter, this.center.z + quarter)));\r\n\t\t\tcase 4:\r\n\t\t\t\treturn this._children[4] || (this._children[4] = new BoundsOctreeNode(this._octree, this, this.baseLength / 2, new Vector3(this.center.x - quarter, this.center.y - quarter, this.center.z - quarter)));\r\n\t\t\tcase 5:\r\n\t\t\t\treturn this._children[5] || (this._children[5] = new BoundsOctreeNode(this._octree, this, this.baseLength / 2, new Vector3(this.center.x + quarter, this.center.y - quarter, this.center.z - quarter)));\r\n\t\t\tcase 6:\r\n\t\t\t\treturn this._children[6] || (this._children[6] = new BoundsOctreeNode(this._octree, this, this.baseLength / 2, new Vector3(this.center.x - quarter, this.center.y - quarter, this.center.z + quarter)));\r\n\t\t\tcase 7:\r\n\t\t\t\treturn this._children[7] || (this._children[7] = new BoundsOctreeNode(this._octree, this, this.baseLength / 2, new Vector3(this.center.x + quarter, this.center.y - quarter, this.center.z + quarter)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"BoundsOctreeNode: unknown index.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 是否合并判断(如果该节点和子节点包含的物体小于_NUM_OBJECTS_ALLOWED则应将子节点合并到该节点)\r\n\t */\r\n\tprivate _shouldMerge(): boolean {//无子节点不能调用该函数\r\n\t\tvar objectCount: number = this._objects.length;\r\n\t\tfor (var i: number = 0; i < 8; i++) {\r\n\t\t\tvar child: BoundsOctreeNode = this._children[i];\r\n\t\t\tif (child) {\r\n\t\t\t\tif (child._children != null) //有孙子节点不合并\r\n\t\t\t\t\treturn false;\r\n\t\t\t\tobjectCount += child._objects.length;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn objectCount <= BoundsOctreeNode._NUM_OBJECTS_ALLOWED;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _mergeChildren(): void {\r\n\t\tfor (var i: number = 0; i < 8; i++) {\r\n\t\t\tvar child: BoundsOctreeNode = this._children[i];\r\n\t\t\tif (child) {\r\n\t\t\t\tchild._parent = null;\r\n\t\t\t\tvar childObjects: IOctreeObject[] = child._objects;\r\n\t\t\t\tfor (var j: number = childObjects.length - 1; j >= 0; j--) {\r\n\t\t\t\t\tvar childObject: IOctreeObject = childObjects[j];\r\n\t\t\t\t\tthis._objects.push(childObject);\r\n\t\t\t\t\tchildObject._setOctreeNode(this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._children = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _merge(): void {\r\n\t\tif (this._children === null) {\r\n\t\t\tvar parent: BoundsOctreeNode = this._parent;\r\n\t\t\tif (parent && parent._shouldMerge()) {\r\n\t\t\t\tparent._mergeChildren();\r\n\t\t\t\tparent._merge();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _checkAddNode(object: IOctreeObject): BoundsOctreeNode {\r\n\t\t//始终将物体放入可能的最深层子节点，如果有子节点可以跳过检查\r\n\t\tif (this._children == null) {\r\n\t\t\t//如果该节点当前为末级节点,包含物体小于_NUM_OBJECTS_ALLOWED数量或不能再创建子节点,则存入该节点\r\n\t\t\tif (this._objects.length < BoundsOctreeNode._NUM_OBJECTS_ALLOWED || (this.baseLength / 2) < this._octree._minSize) {\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i: number = this._objects.length - 1; i >= 0; i--) {//已有新子节点,检查已经存在的物体是否更适合子节点\r\n\t\t\t\tvar existObject: IOctreeObject = this._objects[i];\r\n\t\t\t\tvar fitChildIndex: number = this._bestFitChild(existObject.bounds.getCenter());\r\n\t\t\t\tif (BoundsOctreeNode._encapsulates(this._getChildBound(fitChildIndex), existObject.bounds._getBoundBox())) {\r\n\t\t\t\t\tthis._objects.splice(this._objects.indexOf(existObject), 1);//当前节点移除\r\n\t\t\t\t\tthis._getChild(fitChildIndex)._add(existObject);//加入更深层节点\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar newFitChildIndex: number = this._bestFitChild(object.bounds.getCenter());\r\n\t\tif (BoundsOctreeNode._encapsulates(this._getChildBound(newFitChildIndex), object.bounds._getBoundBox()))\r\n\t\t\treturn this._getChild(newFitChildIndex)._checkAddNode(object);\r\n\t\telse\r\n\t\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _add(object: IOctreeObject): void {\r\n\t\tvar addNode: BoundsOctreeNode = this._checkAddNode(object);\r\n\t\taddNode._objects.push(object);\r\n\t\tobject._setOctreeNode(addNode);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _remove(object: IOctreeObject): void {\r\n\t\tvar index: number = this._objects.indexOf(object);\r\n\t\tthis._objects.splice(index, 1);\r\n\t\tobject._setOctreeNode(null);\r\n\t\tthis._merge();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _addUp(object: IOctreeObject): boolean {\r\n\t\tif ((CollisionUtils.boxContainsBox(this._bounds, object.bounds._getBoundBox()) === ContainmentType.Contains)) {\r\n\t\t\tthis._add(object);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tif (this._parent)\r\n\t\t\t\treturn this._parent._addUp(object);\r\n\t\t\telse\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getCollidingWithFrustum(cameraCullInfo: CameraCullInfo, context: RenderContext3D, testVisible: boolean, customShader: Shader3D, replacementTag: string, isShadowCasterCull: boolean): void {\r\n\t\t//if (_children === null && _objects.length == 0) {//无用末级节不需要检查，调试用\r\n\t\t//debugger;\r\n\t\t//return;\r\n\t\t//}\r\n\r\n\t\tvar frustum: BoundFrustum = cameraCullInfo.boundFrustum;\r\n\t\tvar camPos: Vector3 = cameraCullInfo.position;\r\n\t\tvar cullMask: number = cameraCullInfo.cullingMask;\r\n\r\n\t\tif (testVisible) {\r\n\t\t\tvar type: number = frustum.containsBoundBox(this._bounds);\r\n\t\t\tStat.octreeNodeCulling++;\r\n\t\t\tif (type === ContainmentType.Disjoint)\r\n\t\t\t\treturn;\r\n\t\t\ttestVisible = (type === ContainmentType.Intersects);\r\n\t\t}\r\n\t\tthis._isContaion = !testVisible;//[Debug] 用于调试信息,末级无用子节点不渲染、脱节节点看不见,所以无需更新变量\r\n\r\n\t\t//检查节点中的对象\r\n\t\tvar scene: Scene3D = context.scene;\r\n\t\tvar loopCount: number = Stat.loopCount;\r\n\t\tfor (var i: number = 0, n: number = this._objects.length; i < n; i++) {\r\n\t\t\tvar render: BaseRender = <BaseRender>this._objects[i];\r\n\t\t\tvar canPass: boolean;\r\n\t\t\tif (isShadowCasterCull)\r\n\t\t\t\tcanPass = render._castShadow && render._enable;\r\n\t\t\telse\r\n\t\t\t\tcanPass = (((Math.pow(2, render._owner._layer) & cullMask) != 0)) && render._enable;\r\n\t\t\tif (canPass) {\r\n\t\t\t\tif (testVisible) {\r\n\t\t\t\t\tStat.frustumCulling++;\r\n\t\t\t\t\tif (!render._needRender(frustum, context))\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\trender._renderMark = loopCount;\r\n\t\t\t\trender._distanceForSort = Vector3.distance(render.bounds.getCenter(), camPos);//TODO:合并计算浪费,或者合并后取平均值\r\n\t\t\t\tvar elements: RenderElement[] = render._renderElements;\r\n\t\t\t\tfor (var j: number = 0, m: number = elements.length; j < m; j++) {\r\n\t\t\t\t\tvar element: RenderElement = elements[j];\r\n\t\t\t\t\telement._update(scene, context, customShader, replacementTag);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//检查子节点\r\n\t\tif (this._children != null) {\r\n\t\t\tfor (i = 0; i < 8; i++) {\r\n\t\t\t\tvar child: BoundsOctreeNode = this._children[i];\r\n\t\t\t\tchild && child._getCollidingWithFrustum(cameraCullInfo, context, testVisible, customShader, replacementTag, isShadowCasterCull);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getCollidingWithBoundBox(checkBound: BoundBox, testVisible: boolean, result: any[]): void {\r\n\t\t//if (_children === null && _objects.length == 0){//无用末级节不需要检查，调试用\r\n\t\t//debugger;\r\n\t\t//return;\r\n\t\t//}\r\n\r\n\t\t//检查checkBound是否部分在_bounds中\r\n\t\tif (testVisible) {\r\n\t\t\tvar type: number = CollisionUtils.boxContainsBox(this._bounds, checkBound);\r\n\t\t\tif (type === ContainmentType.Disjoint)\r\n\t\t\t\treturn;\r\n\t\t\ttestVisible = (type === ContainmentType.Intersects);\r\n\t\t}\r\n\r\n\t\t//检查节点中的对象\r\n\t\tif (testVisible) {\r\n\t\t\tfor (var i: number = 0, n: number = this._objects.length; i < n; i++) {\r\n\t\t\t\tvar object: IOctreeObject = this._objects[i];\r\n\t\t\t\tif (CollisionUtils.intersectsBoxAndBox(object.bounds._getBoundBox(), checkBound)) {\r\n\t\t\t\t\tresult.push(object);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//检查子节点\r\n\t\tif (this._children != null) {\r\n\t\t\tfor (i = 0; i < 8; i++) {\r\n\t\t\t\tvar child: BoundsOctreeNode = this._children[i];\r\n\t\t\t\tchild._getCollidingWithBoundBox(checkBound, testVisible, result);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_bestFitChild(boundCenter: Vector3): number {\r\n\t\treturn (boundCenter.x <= this.center.x ? 0 : 1) + (boundCenter.y >= this.center.y ? 0 : 4) + (boundCenter.z <= this.center.z ? 0 : 2);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @return 是否需要扩充根节点\r\n\t */\r\n\t_update(object: IOctreeObject): boolean {\r\n\t\tif (CollisionUtils.boxContainsBox(this._bounds, object.bounds._getBoundBox()) === ContainmentType.Contains) {//addDown\r\n\t\t\tvar addNode: BoundsOctreeNode = this._checkAddNode(object);\r\n\t\t\tif (addNode !== object._getOctreeNode()) {\r\n\t\t\t\taddNode._objects.push(object);\r\n\t\t\t\tobject._setOctreeNode(addNode);\r\n\t\t\t\tvar index: number = this._objects.indexOf(object);\r\n\t\t\t\tthis._objects.splice(index, 1);\r\n\t\t\t\tthis._merge();\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} else {//addUp\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tvar sucess: boolean = this._parent._addUp(object);\r\n\t\t\t\tif (sucess) {//移除成功后才缩减节点,并且在最后移除否则可能造成节点层断裂\r\n\t\t\t\t\tindex = this._objects.indexOf(object);\r\n\t\t\t\t\tthis._objects.splice(index, 1);\r\n\t\t\t\t\tthis._merge();\r\n\t\t\t\t}\r\n\t\t\t\treturn sucess;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 添加指定物体。\r\n\t * @param\tobject 指定物体。\r\n\t */\r\n\tadd(object: IOctreeObject): boolean {\r\n\t\tif (!BoundsOctreeNode._encapsulates(this._bounds, object.bounds._getBoundBox())) //如果不包含,直接return false\r\n\t\t\treturn false;\r\n\t\tthis._add(object);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 移除指定物体。\r\n\t * @param\tobejct 指定物体。\r\n\t * @return 是否成功。\r\n\t */\r\n\tremove(object: IOctreeObject): boolean {\r\n\t\tif (object._getOctreeNode() !== this)\r\n\t\t\treturn false;\r\n\t\tthis._remove(object);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 更新制定物体，\r\n\t * @param\tobejct 指定物体。\r\n\t * @return 是否成功。\r\n\t */\r\n\tupdate(object: IOctreeObject): boolean {\r\n\t\tif (object._getOctreeNode() !== this)\r\n\t\t\treturn false;\r\n\t\treturn this._update(object);\r\n\t}\r\n\r\n\t/**\r\n\t * \t收缩八叉树节点。\r\n\t *\t-所有物体都在根节点的八分之一区域\r\n\t * \t-该节点无子节点或有子节点但1/8的子节点不包含物体\r\n\t *\t@param minLength 最小尺寸。\r\n\t * \t@return 新的根节点。\r\n\t */\r\n\tshrinkIfPossible(minLength: number): BoundsOctreeNode {\r\n\t\tif (this.baseLength < minLength * 2)//该节点尺寸大于等于minLength*2才收缩\r\n\t\t\treturn this;\r\n\r\n\t\t//检查根节点的物体\r\n\t\tvar bestFit: number = -1;\r\n\t\tfor (var i: number = 0, n: number = this._objects.length; i < n; i++) {\r\n\t\t\tvar object: IOctreeObject = this._objects[i];\r\n\t\t\tvar newBestFit: number = this._bestFitChild(object.bounds.getCenter());\r\n\t\t\tif (i == 0 || newBestFit == bestFit) {//判断所有的物理是否在同一个子节点中\r\n\t\t\t\tvar childBounds: BoundBox = this._getChildBound(newBestFit);\r\n\t\t\t\tif (BoundsOctreeNode._encapsulates(childBounds, object.bounds._getBoundBox()))\r\n\t\t\t\t\t(i == 0) && (bestFit = newBestFit);\r\n\t\t\t\telse //不能缩减,适合位置的子节点不能全包\r\n\t\t\t\t\treturn this;\r\n\t\t\t} else {//不在同一个子节点不能缩减\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 检查子节点的物体是否在同一缩减区域\r\n\t\tif (this._children != null) {\r\n\t\t\tvar childHadContent: boolean = false;\r\n\t\t\tfor (i = 0, n = this._children.length; i < n; i++) {\r\n\t\t\t\tvar child: BoundsOctreeNode = this._children[i];\r\n\t\t\t\tif (child && child.hasAnyObjects()) {\r\n\t\t\t\t\tif (childHadContent)\r\n\t\t\t\t\t\treturn this; // 大于等于两个子节点有物体,不能缩减\r\n\r\n\t\t\t\t\tif (bestFit >= 0 && bestFit != i)\r\n\t\t\t\t\t\treturn this; //包含物体的子节点并非最佳索引,不能缩减\r\n\t\t\t\t\tchildHadContent = true;\r\n\t\t\t\t\tbestFit = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (bestFit != -1) {//无子节点,直接缩减本节点\r\n\t\t\t\tvar childCenter: Vector3 = this._getChildCenter(bestFit);\r\n\t\t\t\tthis._setValues(this._octree, null, this.baseLength / 2, childCenter);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tif (bestFit != -1) {\r\n\t\t\tvar newRoot: BoundsOctreeNode = this._children[bestFit];//用合适的子节点作为新的根节点,bestFit!=-1,_children[bestFit]一定有值\r\n\t\t\tnewRoot._parent = null;//根节点需要置空父节点\r\n\t\t\treturn newRoot;\r\n\t\t} else {// 整个节点包括子节点没有物体\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 检查该节点和其子节点是否包含任意物体。\r\n\t * @return 是否包含任意物体。\r\n\t */\r\n\thasAnyObjects(): boolean {\r\n\t\tif (this._objects.length > 0)\r\n\t\t\treturn true;\r\n\r\n\t\tif (this._children != null) {\r\n\t\t\tfor (var i: number = 0; i < 8; i++) {\r\n\t\t\t\tvar child: BoundsOctreeNode = this._children[i];\r\n\t\t\t\tif (child && child.hasAnyObjects())\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取与指定包围盒相交的物体列表。\r\n\t * @param checkBound AABB包围盒。\r\n\t * @param result 相交物体列表\r\n\t */\r\n\tgetCollidingWithBoundBox(checkBound: BoundBox, result: any[]): void {\r\n\t\tthis._getCollidingWithBoundBox(checkBound, true, result);\r\n\t}\r\n\r\n\t/**\r\n\t *\t获取与指定射线相交的的物理列表。\r\n\t * \t@param\tray 射线。\r\n\t * \t@param\tresult 相交物体列表。\r\n\t * \t@param\tmaxDistance 射线的最大距离。\r\n\t */\r\n\tgetCollidingWithRay(ray: Ray, result: any[], maxDistance: number = Number.MAX_VALUE): void {\r\n\t\tvar distance: number = CollisionUtils.intersectsRayAndBoxRD(ray, this._bounds);\r\n\t\tif (distance == -1 || distance > maxDistance)\r\n\t\t\treturn;\r\n\r\n\t\t//检查节点中的对象\r\n\t\tfor (var i: number = 0, n: number = this._objects.length; i < n; i++) {\r\n\t\t\tvar object: IOctreeObject = this._objects[i];\r\n\t\t\tdistance = CollisionUtils.intersectsRayAndBoxRD(ray, object.bounds._getBoundBox());\r\n\t\t\tif (distance !== -1 && distance <= maxDistance)\r\n\t\t\t\tresult.push(object);\r\n\t\t}\r\n\r\n\t\t//检查子节点\r\n\t\tif (this._children != null) {\r\n\t\t\tfor (i = 0; i < 8; i++) {\r\n\t\t\t\tvar child: BoundsOctreeNode = this._children[i];\r\n\t\t\t\tchild.getCollidingWithRay(ray, result, maxDistance);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\t获取与指定视锥相交的的物理列表。\r\n\t * \t@param\tray 射线。.\r\n\t * \t@param\tresult 相交物体列表。\r\n\t */\r\n\tgetCollidingWithFrustum(cameraCullInfo: CameraCullInfo, context: RenderContext3D, customShader: Shader3D, replacementTag: string, isShadowCasterCull: boolean): void {\r\n\t\tthis._getCollidingWithFrustum(cameraCullInfo, context, true, customShader, replacementTag, isShadowCasterCull);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取是否与指定包围盒相交。\r\n\t * @param checkBound AABB包围盒。\r\n\t * @return 是否相交。\r\n\t */\r\n\tisCollidingWithBoundBox(checkBound: BoundBox): boolean {\r\n\t\t//检查checkBound是否部分在_bounds中\r\n\t\tif (!(CollisionUtils.intersectsBoxAndBox(this._bounds, checkBound)))\r\n\t\t\treturn false;\r\n\r\n\t\t//检查节点中的对象\r\n\t\tfor (var i: number = 0, n: number = this._objects.length; i < n; i++) {\r\n\t\t\tvar object: IOctreeObject = this._objects[i];\r\n\t\t\tif (CollisionUtils.intersectsBoxAndBox(object.bounds._getBoundBox(), checkBound))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t//检查子节点\r\n\t\tif (this._children != null) {\r\n\t\t\tfor (i = 0; i < 8; i++) {\r\n\t\t\t\tvar child: BoundsOctreeNode = this._children[i];\r\n\t\t\t\tif (child.isCollidingWithBoundBox(checkBound))\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t *\t获取是否与指定射线相交。\r\n\t * \t@param\tray 射线。\r\n\t * \t@param\tmaxDistance 射线的最大距离。\r\n\t *  @return 是否相交。\r\n\t */\r\n\tisCollidingWithRay(ray: Ray, maxDistance: number = Number.MAX_VALUE): boolean {\r\n\t\tvar distance: number = CollisionUtils.intersectsRayAndBoxRD(ray, this._bounds);\r\n\t\tif (distance == -1 || distance > maxDistance)\r\n\t\t\treturn false;\r\n\r\n\t\t//检查节点中的对象\r\n\t\tfor (var i: number = 0, n: number = this._objects.length; i < n; i++) {\r\n\t\t\tvar object: IOctreeObject = this._objects[i];\r\n\t\t\tdistance = CollisionUtils.intersectsRayAndBoxRD(ray, object.bounds._getBoundBox());\r\n\t\t\tif (distance !== -1 && distance <= maxDistance)\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t//检查子节点\r\n\t\tif (this._children != null) {\r\n\t\t\tfor (i = 0; i < 8; i++) {\r\n\t\t\t\tvar child: BoundsOctreeNode = this._children[i];\r\n\t\t\t\tif (child.isCollidingWithRay(ray, maxDistance))\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取包围盒。\r\n\t */\r\n\tgetBound(): BoundBox {\r\n\t\treturn this._bounds;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * [Debug]\r\n\t */\r\n\tdrawAllBounds(debugLine: PixelLineSprite3D, currentDepth: number, maxDepth: number): void {\r\n\t\tif (this._children === null && this._objects.length == 0)//无用末级节不需要渲染\r\n\t\t\treturn;\r\n\r\n\t\tcurrentDepth++;\r\n\t\tvar color: Color = BoundsOctreeNode._tempColor0;\r\n\t\tif (this._isContaion) {\r\n\t\t\tcolor.r = 0.0;\r\n\t\t\tcolor.g = 0.0;\r\n\t\t\tcolor.b = 1.0;\r\n\t\t} else {\r\n\t\t\tvar tint: number = maxDepth ? currentDepth / maxDepth : 0;\r\n\t\t\tcolor.r = 1.0 - tint;\r\n\t\t\tcolor.g = tint;\r\n\t\t\tcolor.b = 0.0;\r\n\t\t}\r\n\t\tcolor.a = 0.3;\r\n\t\tUtils3D._drawBound(debugLine, this._bounds, color);\r\n\t\tif (this._children != null) {\r\n\t\t\tfor (var i: number = 0; i < 8; i++) {\r\n\t\t\t\tvar child: BoundsOctreeNode = this._children[i];\r\n\t\t\t\tchild && child.drawAllBounds(debugLine, currentDepth, maxDepth);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * [Debug]\r\n\t */\r\n\tdrawAllObjects(debugLine: PixelLineSprite3D, currentDepth: number, maxDepth: number): void {\r\n\t\tcurrentDepth++;\r\n\r\n\t\tvar color: Color = BoundsOctreeNode._tempColor0;\r\n\t\tif (this._isContaion) {\r\n\t\t\tcolor.r = 0.0;\r\n\t\t\tcolor.g = 0.0;\r\n\t\t\tcolor.b = 1.0;\r\n\t\t} else {\r\n\t\t\tvar tint: number = maxDepth ? currentDepth / maxDepth : 0;\r\n\t\t\tcolor.r = 1.0 - tint;\r\n\t\t\tcolor.g = tint;\r\n\t\t\tcolor.b = 0.0;\r\n\t\t}\r\n\t\tcolor.a = 1.0;\r\n\r\n\t\tfor (var i: number = 0, n: number = this._objects.length; i < n; i++)\r\n\t\t\tUtils3D._drawBound(debugLine, this._objects[i].bounds._getBoundBox(), color);\r\n\r\n\t\tif (this._children != null) {\r\n\t\t\tfor (i = 0; i < 8; i++) {\r\n\t\t\t\tvar child: BoundsOctreeNode = this._children[i];\r\n\t\t\t\tchild && child.drawAllObjects(debugLine, currentDepth, maxDepth);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IOctreeObject } from \"./IOctreeObject\";\r\nimport { SingletonList } from \"../../component/SingletonList\"\r\n\r\n/**\r\n * <code>OctreeMotionList</code> 类用于实现物理更新队列。\r\n */\r\nexport class OctreeMotionList extends SingletonList<IOctreeObject> {\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>OctreeMotionList</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tadd(element: IOctreeObject): void {\r\n\t\tvar index: number = element._getIndexInMotionList();\r\n\t\tif (index !== -1)\r\n\t\t\tthrow \"OctreeMotionList:element has  in  PhysicsUpdateList.\";\r\n\t\tthis._add(element);\r\n\t\telement._setIndexInMotionList(this.length++);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tremove(element: IOctreeObject): void {\r\n\t\tvar index: number = element._getIndexInMotionList();\r\n\t\tthis.length--;\r\n\t\tif (index !== this.length) {\r\n\t\t\tvar end: any = this.elements[this.length];\r\n\t\t\tthis.elements[index] = end;\r\n\t\t\tend._setIndexInMotionList(index);\r\n\t\t}\r\n\t\telement._setIndexInMotionList(-1);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BoundsOctreeNode } from \"./BoundsOctreeNode\";\r\nimport { OctreeMotionList } from \"./OctreeMotionList\";\r\nimport { IOctreeObject } from \"./IOctreeObject\";\r\nimport { PixelLineSprite3D } from \"../pixelLine/PixelLineSprite3D\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { BoundBox } from \"../../math/BoundBox\";\r\nimport { Ray } from \"../../math/Ray\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { CameraCullInfo } from \"../../graphics/FrustumCulling\";\r\n\r\n/**\r\n * <code>BoundsOctree</code> 类用于创建八叉树。\r\n */\r\nexport class BoundsOctree {\r\n\t/**@internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\r\n\t/**@internal */\r\n\tprivate _initialSize: number;\r\n\t/**@internal */\r\n\tprivate _rootNode: BoundsOctreeNode;\r\n\t/**@internal */\r\n\tprivate _motionObjects: OctreeMotionList = new OctreeMotionList();\r\n\r\n\t/**@internal */\r\n\t_looseness: number;\r\n\t/**@internal */\r\n\t_minSize: number;\r\n\r\n\t/**@internal [只读]*/\r\n\tcount: number = 0;\r\n\r\n\t/**\r\n\t * 创建一个 <code>BoundsOctree</code> 实例。\r\n\t * @param\tinitialWorldSize 八叉树尺寸\r\n\t * @param\tinitialWorldPos 八叉树中心\r\n\t * @param\tminNodeSize  节点最小尺寸\r\n\t * @param\tloosenessVal 松散值\r\n\t */\r\n\tconstructor(initialWorldSize: number, initialWorldPos: Vector3, minNodeSize: number, looseness: number) {\r\n\t\tif (minNodeSize > initialWorldSize) {\r\n\t\t\tconsole.warn(\"Minimum node size must be at least as big as the initial world size. Was: \" + minNodeSize + \" Adjusted to: \" + initialWorldSize);\r\n\t\t\tminNodeSize = initialWorldSize;\r\n\t\t}\r\n\t\tthis._initialSize = initialWorldSize;\r\n\t\tthis._minSize = minNodeSize;\r\n\t\tthis._looseness = Math.min(Math.max(looseness, 1.0), 2.0);\r\n\t\tthis._rootNode = new BoundsOctreeNode(this, null, initialWorldSize, initialWorldPos);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getMaxDepth(node: BoundsOctreeNode, depth: number): number {\r\n\t\tdepth++;\r\n\t\tvar children: BoundsOctreeNode[] = node._children;\r\n\t\tif (children != null) {\r\n\t\t\tvar curDepth: number = depth;\r\n\t\t\tfor (var i: number = 0, n: number = children.length; i < n; i++) {\r\n\t\t\t\tvar child: BoundsOctreeNode = children[i];\r\n\t\t\t\tchild && (depth = Math.max(this._getMaxDepth(child, curDepth), depth));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn depth;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_grow(growObjectCenter: Vector3): void {\r\n\t\tvar xDirection: number = growObjectCenter.x >= 0 ? 1 : -1;\r\n\t\tvar yDirection: number = growObjectCenter.y >= 0 ? 1 : -1;\r\n\t\tvar zDirection: number = growObjectCenter.z >= 0 ? 1 : -1;\r\n\t\tvar oldRoot: BoundsOctreeNode = this._rootNode;\r\n\t\tvar half: number = this._rootNode.baseLength / 2;\r\n\t\tvar newLength: number = this._rootNode.baseLength * 2;\r\n\t\tvar rootCenter: Vector3 = this._rootNode.center;\r\n\t\tvar newCenter: Vector3 = new Vector3(rootCenter.x + xDirection * half, rootCenter.y + yDirection * half, rootCenter.z + zDirection * half);\r\n\r\n\t\t//创建新的八叉树根节点\r\n\t\tthis._rootNode = new BoundsOctreeNode(this, null, newLength, newCenter);\r\n\r\n\t\tif (oldRoot.hasAnyObjects()) {\r\n\t\t\tvar rootPos: number = this._rootNode._bestFitChild(oldRoot.center);\r\n\t\t\tvar children: BoundsOctreeNode[] = [];\r\n\t\t\tfor (var i: number = 0; i < 8; i++) {\r\n\t\t\t\tif (i == rootPos) {\r\n\t\t\t\t\toldRoot._parent = this._rootNode;\r\n\t\t\t\t\tchildren[i] = oldRoot;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Attach the new children to the new root node\r\n\t\t\tthis._rootNode._children = children;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 添加物体\r\n\t * @param\tobject\r\n\t */\r\n\tadd(object: IOctreeObject): void {\r\n\t\tvar count: number = 0;\r\n\t\twhile (!this._rootNode.add(object)) {\r\n\t\t\tvar growCenter: Vector3 = BoundsOctree._tempVector30;\r\n\t\t\tVector3.subtract(object.bounds.getCenter(), this._rootNode.center, growCenter);\r\n\t\t\tthis._grow(growCenter);\r\n\t\t\tif (++count > 20) {\r\n\t\t\t\tthrow \"Aborted Add operation as it seemed to be going on forever (\" + (count - 1) + \") attempts at growing the octree.\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.count++;\r\n\t}\r\n\r\n\t/**\r\n\t * 移除物体\r\n\t * @return 是否成功\r\n\t */\r\n\tremove(object: IOctreeObject): boolean {\r\n\t\tvar removed: boolean = object._getOctreeNode().remove(object);\r\n\t\tif (removed) {\r\n\t\t\tthis.count--;\r\n\t\t}\r\n\t\treturn removed;\r\n\t}\r\n\r\n\t/**\r\n\t * 更新物体\r\n\t */\r\n\tupdate(object: IOctreeObject): boolean {\r\n\t\tvar count: number = 0;\r\n\t\tvar octreeNode: BoundsOctreeNode = object._getOctreeNode();\r\n\t\tif (octreeNode) {\r\n\t\t\twhile (!octreeNode._update(object)) {\r\n\t\t\t\tvar growCenter: Vector3 = BoundsOctree._tempVector30;\r\n\t\t\t\tVector3.subtract(object.bounds.getCenter(), this._rootNode.center, growCenter);\r\n\t\t\t\tthis._grow(growCenter);\r\n\t\t\t\tif (++count > 20) {\r\n\t\t\t\t\tthrow \"Aborted Add operation as it seemed to be going on forever (\" + (count - 1) + \") attempts at growing the octree.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t} else {//节点从场景中移除时octreeNode为空\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 如果可能则收缩根节点。\r\n\t */\r\n\tshrinkRootIfPossible(): void {\r\n\t\tthis._rootNode = this._rootNode.shrinkIfPossible(this._initialSize);\r\n\t}\r\n\r\n\t/**\r\n\t * 添加运动物体。\r\n\t * @param 运动物体。\r\n\t */\r\n\taddMotionObject(object: IOctreeObject): void {\r\n\t\tthis._motionObjects.add(object);\r\n\t}\r\n\r\n\t/**\r\n\t * 移除运动物体。\r\n\t * @param 运动物体。\r\n\t */\r\n\tremoveMotionObject(object: IOctreeObject): void {\r\n\t\tthis._motionObjects.remove(object);\r\n\t}\r\n\r\n\t/**\r\n\t * 更新所有运动物体。\r\n\t */\r\n\tupdateMotionObjects(): void {\r\n\t\tvar elements: IOctreeObject[] = this._motionObjects.elements;\r\n\t\tfor (var i: number = 0, n: number = this._motionObjects.length; i < n; i++) {\r\n\t\t\tvar object: IOctreeObject = <any>elements[i];\r\n\t\t\tthis.update(object);\r\n\t\t\tobject._setIndexInMotionList(-1);\r\n\t\t}\r\n\t\tthis._motionObjects.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取是否与指定包围盒相交。\r\n\t * @param checkBound AABB包围盒。\r\n\t * @return 是否相交。\r\n\t */\r\n\tisCollidingWithBoundBox(checkBounds: BoundBox): boolean {\r\n\t\treturn this._rootNode.isCollidingWithBoundBox(checkBounds);\r\n\t}\r\n\r\n\t/**\r\n\t *\t获取是否与指定射线相交。\r\n\t * \t@param\tray 射线。\r\n\t * \t@param\tmaxDistance 射线的最大距离。\r\n\t *  @return 是否相交。\r\n\t */\r\n\tisCollidingWithRay(ray: Ray, maxDistance: number = Number.MAX_VALUE): boolean {\r\n\t\treturn this._rootNode.isCollidingWithRay(ray, maxDistance);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取与指定包围盒相交的物体列表。\r\n\t * @param checkBound AABB包围盒。\r\n\t * @param result 相交物体列表\r\n\t */\r\n\tgetCollidingWithBoundBox(checkBound: BoundBox, result: any[]): void {\r\n\t\tthis._rootNode.getCollidingWithBoundBox(checkBound, result);\r\n\t}\r\n\r\n\t/**\r\n\t *\t获取与指定射线相交的的物理列表。\r\n\t * \t@param\tray 射线。\r\n\t * \t@param\tresult 相交物体列表。\r\n\t * \t@param\tmaxDistance 射线的最大距离。\r\n\t */\r\n\tgetCollidingWithRay(ray: Ray, result: any[], maxDistance: number = Number.MAX_VALUE): void {\r\n\t\tthis._rootNode.getCollidingWithRay(ray, result, maxDistance);\r\n\t}\r\n\r\n\t/**\r\n\t *\t获取与指定视锥相交的的物理列表。\r\n\t *  @param 渲染上下文。\r\n\t */\r\n\tgetCollidingWithFrustum(cameraCullInfo: CameraCullInfo, context: RenderContext3D, shader: Shader3D, replacementTag: string, isShadowCasterCull: boolean): void {\r\n\t\tthis._rootNode.getCollidingWithFrustum(cameraCullInfo, context, shader, replacementTag, isShadowCasterCull);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取最大包围盒\r\n\t * @return 最大包围盒\r\n\t */\r\n\tgetMaxBounds(): BoundBox {\r\n\t\treturn this._rootNode.getBound();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * [Debug]\r\n\t */\r\n\tdrawAllBounds(pixelLine: PixelLineSprite3D): void {\r\n\t\tvar maxDepth: number = this._getMaxDepth(this._rootNode, -1);\r\n\t\tthis._rootNode.drawAllBounds(pixelLine, -1, maxDepth);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * [Debug]\r\n\t */\r\n\tdrawAllObjects(pixelLine: PixelLineSprite3D): void {\r\n\t\tvar maxDepth: number = this._getMaxDepth(this._rootNode, -1);\r\n\t\tthis._rootNode.drawAllObjects(pixelLine, -1, maxDepth);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Texture2D } from \"../../../resource/Texture2D\";\r\n\r\n/**\r\n * 光照贴图。\r\n */\r\nexport class Lightmap {\r\n    /** 光照贴图颜色。 */\r\n    lightmapColor: Texture2D;\r\n    /** 光照贴图方向。 */\r\n    lightmapDirection: Texture2D;\r\n}","import { Vector3 } from \"./Vector3\";\r\nimport { Ray } from \"./Ray\";\r\nimport { CollisionUtils } from \"./CollisionUtils\";\r\nimport { IClone } from \"../core/IClone\"\r\n\t\r\n\t/**\r\n\t * <code>BoundSphere</code> 类用于创建包围球。\r\n\t */\r\n\texport class BoundSphere implements IClone {\r\n\t\tprivate static _tempVector3:Vector3 = new Vector3();\r\n\t\t\r\n\t\t/**包围球的中心。*/\r\n\t\t center:Vector3;\r\n\t\t/**包围球的半径。*/\r\n\t\t radius:number;\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个 <code>BoundSphere</code> 实例。\r\n\t\t * @param\tcenter 包围球的中心。\r\n\t\t * @param\tradius 包围球的半径。\r\n\t\t */\r\n\t\tconstructor(center:Vector3, radius:number){\r\n\t\t\tthis.center = center;\r\n\t\t\tthis.radius = radius;\r\n\t\t}\r\n\t\t\r\n\t\t toDefault():void {\r\n\t\t\tthis.center.toDefault();\r\n\t\t\tthis.radius = 0;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 从顶点的子队列生成包围球。\r\n\t\t * @param\tpoints 顶点的队列。\r\n\t\t * @param\tstart 顶点子队列的起始偏移。\r\n\t\t * @param\tcount 顶点子队列的顶点数。\r\n\t\t * @param\tresult 生成的包围球。\r\n\t\t */\r\n\t\t static createFromSubPoints(points:Vector3[], start:number, count:number, out:BoundSphere):void {\r\n\t\t\tif (points == null) {\r\n\t\t\t\tthrow new Error(\"points\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Check that start is in the correct range \r\n\t\t\tif (start < 0 || start >= points.length) {\r\n\t\t\t\tthrow new Error(\"start\" + start + \"Must be in the range [0, \" + (points.length - 1) + \"]\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Check that count is in the correct range \r\n\t\t\tif (count < 0 || (start + count) > points.length) {\r\n\t\t\t\tthrow new Error(\"count\" + count + \"Must be in the range <= \" + points.length + \"}\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar upperEnd:number = start + count;\r\n\t\t\t\r\n\t\t\t//Find the center of all points. \r\n\t\t\tvar center:Vector3 = BoundSphere._tempVector3;\r\n\t\t\tcenter.x = 0;\r\n\t\t\tcenter.y = 0;\r\n\t\t\tcenter.z = 0;\r\n\t\t\tfor (var i:number = start; i < upperEnd; ++i) {\r\n\t\t\t\tVector3.add(points[i], center, center);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar outCenter:Vector3 = out.center;\r\n\t\t\t//This is the center of our sphere. \r\n\t\t\tVector3.scale(center, 1 / count, outCenter);\r\n\t\t\t\r\n\t\t\t//Find the radius of the sphere \r\n\t\t\tvar radius:number = 0.0;\r\n\t\t\tfor (i = start; i < upperEnd; ++i) {\r\n\t\t\t\t//We are doing a relative distance comparison to find the maximum distance \r\n\t\t\t\t//from the center of our sphere. \r\n\t\t\t\tvar distance:number = Vector3.distanceSquared(outCenter, points[i]);\r\n\t\t\t\t\r\n\t\t\t\tif (distance > radius)\r\n\t\t\t\t\tradius = distance;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Find the real distance from the DistanceSquared. \r\n\t\t\tout.radius = Math.sqrt(radius);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 从顶点队列生成包围球。\r\n\t\t * @param\tpoints 顶点的队列。\r\n\t\t * @param\tresult 生成的包围球。\r\n\t\t */\r\n\t\t static createfromPoints(points:Vector3[], out:BoundSphere):void {\r\n\t\t\tif (points == null) {\r\n\t\t\t\tthrow new Error(\"points\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tBoundSphere.createFromSubPoints(points, 0, points.length, out);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 判断射线是否与碰撞球交叉，并返回交叉距离。\r\n\t\t * @param\tray 射线。\r\n\t\t * @return 距离交叉点的距离，-1表示不交叉。\r\n\t\t */\r\n\t\t intersectsRayDistance(ray:Ray):number {\r\n\t\t\treturn CollisionUtils.intersectsRayAndSphereRD(ray, this);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 判断射线是否与碰撞球交叉，并返回交叉点。\r\n\t\t * @param\tray  射线。\r\n\t\t * @param\toutPoint 交叉点。\r\n\t\t * @return  距离交叉点的距离，-1表示不交叉。\r\n\t\t */\r\n\t\t intersectsRayPoint(ray:Ray, outPoint:Vector3):number {\r\n\t\t\treturn CollisionUtils.intersectsRayAndSphereRP(ray, this, outPoint);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 克隆。\r\n\t\t * @param\tdestObject 克隆源。\r\n\t\t */\r\n\t\t cloneTo(destObject:any):void {\r\n\t\t\tvar dest:BoundSphere = (<BoundSphere>destObject );\r\n\t\t\tthis.center.cloneTo(dest.center);\r\n\t\t\tdest.radius = this.radius;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 克隆。\r\n\t\t * @return\t 克隆副本。\r\n\t\t */\r\n\t\t clone():any {\r\n\t\t\tvar dest:BoundSphere = new BoundSphere(new Vector3(),0);\r\n\t\t\tthis.cloneTo(dest);\r\n\t\t\treturn dest;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n","import { BoundSphere } from \"../math/BoundSphere\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Plane } from \"../math/Plane\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { ShaderData } from \"../shader/ShaderData\";\r\nimport { BoundFrustum } from \"../math/BoundFrustum\";\r\nimport { CameraCullInfo } from \"../graphics/FrustumCulling\";\r\n\r\n/**\r\n * @internal\r\n * 阴影分割数据。\r\n */\r\nexport class ShadowSliceData {\r\n    cameraShaderValue: ShaderData = new ShaderData();\r\n    position: Vector3 = new Vector3();\r\n    offsetX: number;\r\n    offsetY: number;\r\n    resolution: number;\r\n    viewMatrix: Matrix4x4 = new Matrix4x4();\r\n    projectionMatrix: Matrix4x4 = new Matrix4x4();\r\n    viewProjectMatrix: Matrix4x4 = new Matrix4x4();\r\n    cullPlanes: Array<Plane> = [new Plane(new Vector3()), new Plane(new Vector3()), new Plane(new Vector3()), new Plane(new Vector3()), new Plane(new Vector3()), new Plane(new Vector3()), new Plane(new Vector3()), new Plane(new Vector3()), new Plane(new Vector3()), new Plane(new Vector3())];\r\n    cullPlaneCount: number;\r\n    splitBoundSphere: BoundSphere = new BoundSphere(new Vector3(), 0.0);\r\n    sphereCenterZ: number;\r\n}\r\n\r\nexport class ShadowSpotData{\r\n    cameraShaderValue:ShaderData = new ShaderData();\r\n    position:Vector3 = new Vector3;\r\n    offsetX:number;\r\n    offsetY:number;\r\n    resolution:number;\r\n    viewMatrix:Matrix4x4 = new Matrix4x4();\r\n    projectionMatrix:Matrix4x4 = new Matrix4x4();\r\n    viewProjectMatrix:Matrix4x4 = new Matrix4x4();\r\n    cameraCullInfo:CameraCullInfo = new CameraCullInfo();\r\n\r\n}\r\n","import { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { RenderTextureDepthFormat } from \"../../resource/RenderTextureFormat\";\r\nimport { BaseCamera } from \"../core/BaseCamera\";\r\nimport { Camera } from \"../core/Camera\";\r\nimport { DirectionLight } from \"../core/light/DirectionLight\";\r\nimport { ShadowCascadesMode } from \"../core/light/ShadowCascadesMode\";\r\nimport { ShadowMode } from \"../core/light/ShadowMode\";\r\nimport { ShadowUtils } from \"../core/light/ShadowUtils\";\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { Scene3DShaderDeclaration } from \"../core/scene/Scene3DShaderDeclaration\";\r\nimport { FrustumCulling, ShadowCullInfo } from \"../graphics/FrustumCulling\";\r\nimport { MathUtils3D } from \"../math/MathUtils3D\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Plane } from \"../math/Plane\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Vector4 } from \"../math/Vector4\";\r\nimport { RenderTexture } from \"../resource/RenderTexture\";\r\nimport { Shader3D } from \"../shader/Shader3D\";\r\nimport { ShaderData } from \"../shader/ShaderData\";\r\nimport { ShadowSliceData, ShadowSpotData } from \"./ShadowSliceData\";\r\nimport { LightSprite, LightType } from \"../core/light/LightSprite\";\r\nimport { SpotLight } from \"../core/light/SpotLight\";\r\nimport { BoundFrustum } from \"../math/BoundFrustum\";\r\n\r\nexport enum ShadowLightType{\r\n\tDirectionLight,\r\n\tSpotLight,\r\n\tPointLight\r\n}\r\n\r\nexport class ShadowCasterPass {\r\n\t/**@internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempMatrix0: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/** @internal */\r\n\tstatic SHADOW_BIAS: number = Shader3D.propertyNameToID(\"u_ShadowBias\");\r\n\t/** @internal */\r\n\tstatic SHADOW_LIGHT_DIRECTION: number = Shader3D.propertyNameToID(\"u_ShadowLightDirection\");\r\n\t/** @internal */\r\n\tstatic SHADOW_SPLIT_SPHERES: number = Shader3D.propertyNameToID(\"u_ShadowSplitSpheres\");\r\n\t/** @internal */\r\n\tstatic SHADOW_MATRICES: number = Shader3D.propertyNameToID(\"u_ShadowMatrices\");\r\n\t/** @internal */\r\n\tstatic SHADOW_MAP_SIZE: number = Shader3D.propertyNameToID(\"u_ShadowMapSize\");\r\n\t/** @internal */\r\n\tstatic SHADOW_MAP: number = Shader3D.propertyNameToID(\"u_ShadowMap\");\r\n\t/** @internal */\r\n\tstatic SHADOW_PARAMS: number = Shader3D.propertyNameToID(\"u_ShadowParams\");\r\n\t/** @internal */\r\n\tstatic SHADOW_SPOTMAP:number = Shader3D.propertyNameToID(\"u_SpotShadowMap\");\r\n\t/** @internal */\r\n\tstatic SHADOW_SPOTMATRICES:number = Shader3D.propertyNameToID(\"u_SpotViewProjectMatrix\");\r\n\t/** @internal */\r\n\tprivate static _maxCascades: number = 4;\r\n\t/**@internal */\r\n\tprivate static _cascadesSplitDistance: number[] = new Array(ShadowCasterPass._maxCascades + 1);\r\n\t/** @internal */\r\n\tprivate static _frustumPlanes: Plane[] = new Array(new Plane(new Vector3()), new Plane(new Vector3()), new Plane(new Vector3()), new Plane(new Vector3()), new Plane(new Vector3()), new Plane(new Vector3()));\r\n\r\n\t/** @internal */\r\n\tprivate _shadowBias: Vector4 = new Vector4();\r\n\t/** @internal */\r\n\tprivate _shadowParams: Vector4 = new Vector4();\r\n\t/** @internal */\r\n\tprivate _shadowMapSize: Vector4 = new Vector4();\r\n\t/** @internal */\r\n\tprivate _shadowMatrices: Float32Array = new Float32Array(16 * (ShadowCasterPass._maxCascades));\r\n\t/** @internal */\r\n\tprivate _shadowSpotMatrices:Matrix4x4 = new Matrix4x4();\r\n\t/**@internal */\r\n\tprivate _splitBoundSpheres: Float32Array = new Float32Array(ShadowCasterPass._maxCascades * 4);\r\n\t/** @internal */\r\n\tprivate _cascadeCount: number = 0;\r\n\t/** @internal */\r\n\tprivate _shadowMapWidth: number = 0;\r\n\t/** @internal */\r\n\tprivate _shadowMapHeight: number = 0;\r\n\t/** @internal */\r\n\tprivate _shadowDirectLightMap: RenderTexture;\r\n\t/** @internal */\r\n\tprivate _shadowSpotLightMap:RenderTexture;\r\n\t/** @internal */\r\n\tprivate _shadowSliceDatas: ShadowSliceData[] = [new ShadowSliceData(), new ShadowSliceData(), new ShadowSliceData(), new ShadowSliceData()];\r\n\t/** @internal */\r\n\tprivate _shadowSpotData:ShadowSpotData = new ShadowSpotData();\r\n\t/**@internal */\r\n\tprivate _light: LightSprite;\r\n\t/** @internal */\r\n\tprivate _lightUp: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _lightSide: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _lightForward: Vector3 = new Vector3();\r\n\r\n\tconstructor() {\r\n\t\tthis._shadowSpotData.cameraCullInfo.boundFrustum = new BoundFrustum(new Matrix4x4());\r\n\t}\r\n\r\n\t/**\r\n     * @internal\r\n     */\r\n\tprivate _setupShadowCasterShaderValues(context: RenderContext3D, shaderValues: ShaderData, shadowSliceData: any, LightParam: Vector3,shadowparams:Vector4, shadowBias: Vector4,lightType:LightType): void {\r\n\t\tshaderValues.setVector(ShadowCasterPass.SHADOW_BIAS, shadowBias);\r\n\t\tswitch(lightType)\r\n\t\t{\r\n\t\t\tcase LightType.Directional:\r\n\t\t\t\tshaderValues.setVector3(ShadowCasterPass.SHADOW_LIGHT_DIRECTION, LightParam);\r\n\t\t\t\tbreak;\r\n\t\t\tcase LightType.Spot:\r\n\t\t\t\tshaderValues.setVector(ShadowCasterPass.SHADOW_PARAMS,shadowparams);\r\n\t\t\t\tbreak;\r\n\t\t\tcase LightType.Point:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\r\n\t\tvar cameraSV: ShaderData = shadowSliceData.cameraShaderValue;//TODO:should optimization with shader upload.\r\n\t\tcameraSV.setMatrix4x4(BaseCamera.VIEWMATRIX, shadowSliceData.viewMatrix);\r\n\t\tcameraSV.setMatrix4x4(BaseCamera.PROJECTMATRIX, shadowSliceData.projectionMatrix);\r\n\t\tcameraSV.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX, shadowSliceData.viewProjectMatrix);\r\n\t\tcontext.viewMatrix = shadowSliceData.viewMatrix;\r\n\t\tcontext.projectionMatrix = shadowSliceData.projectionMatrix;\r\n\t\tcontext.projectionViewMatrix = shadowSliceData.viewProjectMatrix;\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _setupShadowReceiverShaderValues(shaderValues: ShaderData): void {\r\n\t\tvar light: DirectionLight = <DirectionLight>this._light;\r\n\t\tif (light.shadowCascadesMode !== ShadowCascadesMode.NoCascades)\r\n\t\t\tshaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_CASCADE);\r\n\t\telse\r\n\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_CASCADE);\r\n\t\tswitch (light.shadowMode) {\r\n\t\t\tcase ShadowMode.Hard:\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW);\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShadowMode.SoftLow:\r\n\t\t\t\tshaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW);\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShadowMode.SoftHigh:\r\n\t\t\t\tshaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH);\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tshaderValues.setTexture(ShadowCasterPass.SHADOW_MAP, this._shadowDirectLightMap);\r\n\t\tshaderValues.setBuffer(ShadowCasterPass.SHADOW_MATRICES, this._shadowMatrices);\r\n\t\tshaderValues.setVector(ShadowCasterPass.SHADOW_MAP_SIZE, this._shadowMapSize);\r\n\t\tshaderValues.setVector(ShadowCasterPass.SHADOW_PARAMS, this._shadowParams);\r\n\t\tshaderValues.setBuffer(ShadowCasterPass.SHADOW_SPLIT_SPHERES, this._splitBoundSpheres);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal \r\n\t */\r\n\tprivate _setupSpotShadowReceiverShaderValues(shaderValues:ShaderData):void{\r\n\t\tvar spotLight:SpotLight = <SpotLight>this._light;\r\n\t\tswitch(spotLight.shadowMode){\r\n\t\t\tcase ShadowMode.Hard:\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH);\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShadowMode.SoftLow:\r\n\t\t\t\tshaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW);\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShadowMode.SoftHigh:\r\n\t\t\t\tshaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH);\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tshaderValues.setTexture(ShadowCasterPass.SHADOW_SPOTMAP,this._shadowSpotLightMap);\r\n\t\tshaderValues.setMatrix4x4(ShadowCasterPass.SHADOW_SPOTMATRICES,this._shadowSpotMatrices)\r\n\t\tshaderValues.setVector(ShadowCasterPass.SHADOW_MAP_SIZE, this._shadowMapSize);\r\n\t\tshaderValues.setVector(ShadowCasterPass.SHADOW_PARAMS,this._shadowParams);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tupdate(camera: Camera, light: LightSprite,lightType:ShadowLightType): void {\r\n\t\tswitch(lightType){\r\n\t\t\tcase ShadowLightType.DirectionLight:\r\n\t\t\t\tthis._light = light;\r\n\t\t\t\tvar lightWorld: Matrix4x4 = ShadowCasterPass._tempMatrix0;\r\n\t\t\t\tvar lightWorldE: Float32Array = lightWorld.elements;\r\n\t\t\t\tvar lightUp: Vector3 = this._lightUp;\r\n\t\t\t\tvar lightSide: Vector3 = this._lightSide;\r\n\t\t\t\tvar lightForward: Vector3 = this._lightForward;\r\n\t\t\t\t//光的的空间矩阵，旁边 上面 前面\r\n\t\t\t\tMatrix4x4.createFromQuaternion(light._transform.rotation, lightWorld);//to remove scale problem\r\n\t\t\t\tlightSide.setValue(lightWorldE[0], lightWorldE[1], lightWorldE[2]);\r\n\t\t\t\tlightUp.setValue(lightWorldE[4], lightWorldE[5], lightWorldE[6]);\r\n\t\t\t\tlightForward.setValue(-lightWorldE[8], -lightWorldE[9], -lightWorldE[10]);\r\n\t\t\t\t//设置分辨率\r\n\t\t\t\tvar atlasResolution: number = light._shadowResolution;\r\n\t\t\t\tvar cascadesMode: ShadowCascadesMode = (<DirectionLight>light)._shadowCascadesMode;\r\n\t\t\t\tvar cascadesCount: number;\r\n\t\t\t\tvar shadowTileResolution: number;\r\n\t\t\t\tvar shadowMapWidth: number, shadowMapHeight: number;\r\n\t\t\t\tif (cascadesMode == ShadowCascadesMode.NoCascades) {\r\n\t\t\t\t\tcascadesCount = 1;\r\n\t\t\t\t\tshadowTileResolution = atlasResolution;\r\n\t\t\t\t\tshadowMapWidth = atlasResolution;\r\n\t\t\t\t\tshadowMapHeight = atlasResolution;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcascadesCount = cascadesMode == ShadowCascadesMode.TwoCascades ? 2 : 4;\r\n\t\t\t\t\tshadowTileResolution = ShadowUtils.getMaxTileResolutionInAtlas(atlasResolution, atlasResolution, cascadesCount);\r\n\t\t\t\t\tshadowMapWidth = shadowTileResolution * 2;\r\n\t\t\t\t\tshadowMapHeight = cascadesMode == ShadowCascadesMode.TwoCascades ? shadowTileResolution : shadowTileResolution * 2;\r\n\t\t\t\t}\r\n\t\t\t\tthis._cascadeCount = cascadesCount;\r\n\t\t\t\tthis._shadowMapWidth = shadowMapWidth;\r\n\t\t\t\tthis._shadowMapHeight = shadowMapHeight;\r\n\t\t\r\n\t\t\t\tvar splitDistance: number[] = ShadowCasterPass._cascadesSplitDistance;\r\n\t\t\t\tvar frustumPlanes: Plane[] = ShadowCasterPass._frustumPlanes;\r\n\t\t\t\tvar cameraNear: number = camera.nearPlane;\r\n\t\t\t\tvar shadowFar: number = Math.min(camera.farPlane, light._shadowDistance);\r\n\t\t\t\tvar shadowMatrices: Float32Array = this._shadowMatrices;\r\n\t\t\t\tvar boundSpheres: Float32Array = this._splitBoundSpheres;\r\n\t\t\t\tShadowUtils.getCascadesSplitDistance((<DirectionLight>light)._shadowTwoCascadeSplits, (<DirectionLight>light)._shadowFourCascadeSplits, cameraNear, shadowFar, camera.fieldOfView * MathUtils3D.Deg2Rad, camera.aspectRatio, cascadesMode, splitDistance);\r\n\t\t\t\tShadowUtils.getCameraFrustumPlanes(camera.projectionViewMatrix, frustumPlanes);\r\n\t\t\t\tvar forward: Vector3 = ShadowCasterPass._tempVector30;\r\n\t\t\t\tcamera._transform.getForward(forward);\r\n\t\t\t\tVector3.normalize(forward, forward);\r\n\t\t\t\tfor (var i: number = 0; i < cascadesCount; i++) {\r\n\t\t\t\t\tvar sliceData: ShadowSliceData = this._shadowSliceDatas[i];\r\n\t\t\t\t\tsliceData.sphereCenterZ = ShadowUtils.getBoundSphereByFrustum(splitDistance[i], splitDistance[i + 1], camera.fieldOfView * MathUtils3D.Deg2Rad, camera.aspectRatio, camera._transform.position, forward, sliceData.splitBoundSphere);\r\n\t\t\t\t\tShadowUtils.getDirectionLightShadowCullPlanes(frustumPlanes, i, splitDistance, cameraNear, lightForward, sliceData);\r\n\t\t\t\t\tShadowUtils.getDirectionalLightMatrices(lightUp, lightSide, lightForward, i, light._shadowNearPlane, shadowTileResolution, sliceData, shadowMatrices);\r\n\t\t\t\t\tif (cascadesCount > 1)\r\n\t\t\t\t\t\tShadowUtils.applySliceTransform(sliceData, shadowMapWidth, shadowMapHeight, i, shadowMatrices);\r\n\t\t\t\t}\r\n\t\t\t\tShadowUtils.prepareShadowReceiverShaderValues((<DirectionLight>light), shadowMapWidth, shadowMapHeight, this._shadowSliceDatas, cascadesCount, this._shadowMapSize, this._shadowParams, shadowMatrices, boundSpheres);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShadowLightType.SpotLight:\r\n\t\t\t\tthis._light = light;\r\n\t\t\t\tvar lightWorld:Matrix4x4 = ShadowCasterPass._tempMatrix0;\r\n\t\t\t\tvar lightForward:Vector3 = this._lightForward;\r\n\t\t\t\tvar shadowResolution:number = this._light._shadowResolution;\r\n\t\t\t\tthis._shadowMapWidth = shadowResolution;\r\n\t\t\t\tthis._shadowMapHeight = shadowResolution;\r\n\t\t\t\tvar shadowSpotData:ShadowSpotData = this._shadowSpotData;\r\n\t\t\t\tShadowUtils.getSpotLightShadowData(shadowSpotData,<SpotLight>this._light,shadowResolution,this._shadowParams,this._shadowSpotMatrices,this._shadowMapSize);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShadowLightType.PointLight:\r\n\t\t\t\t//TODO:\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow (\"There is no shadow of this type\")\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\t/**\r\n\t * @interal\r\n\t */\r\n\trender(context: RenderContext3D, scene: Scene3D,lightType:ShadowLightType): void {\r\n\t\tswitch(lightType){\r\n\t\t\tcase ShadowLightType.DirectionLight:\r\n\t\t\t\tvar shaderValues: ShaderData = scene._shaderValues;\r\n\t\t\t\tcontext.pipelineMode = \"ShadowCaster\";\r\n\t\t\t\tShaderData.setRuntimeValueMode(false);\r\n\t\t\t\tvar shadowMap: RenderTexture = this._shadowDirectLightMap = ShadowUtils.getTemporaryShadowTexture(this._shadowMapWidth, this._shadowMapHeight, RenderTextureDepthFormat.DEPTH_16);\r\n\t\t\t\tshadowMap._start();\r\n\t\t\t\tvar light: DirectionLight = <DirectionLight>this._light;\r\n\t\t\t\tfor (var i: number = 0, n: number = this._cascadeCount; i < n; i++) {\r\n\t\t\t\t\tvar sliceData: ShadowSliceData = this._shadowSliceDatas[i];\r\n\t\t\t\t\tShadowUtils.getShadowBias(light, sliceData.projectionMatrix, sliceData.resolution, this._shadowBias);\r\n\t\t\t\t\tthis._setupShadowCasterShaderValues(context, shaderValues, sliceData, this._lightForward,this._shadowParams, this._shadowBias,LightType.Directional);\r\n\t\t\t\t\tvar shadowCullInfo: ShadowCullInfo = FrustumCulling._shadowCullInfo;\r\n\t\t\t\t\tshadowCullInfo.position = sliceData.position;\r\n\t\t\t\t\tshadowCullInfo.cullPlanes = sliceData.cullPlanes;\r\n\t\t\t\t\tshadowCullInfo.cullPlaneCount = sliceData.cullPlaneCount;\r\n\t\t\t\t\tshadowCullInfo.cullSphere = sliceData.splitBoundSphere;\r\n\t\t\t\t\tshadowCullInfo.direction = this._lightForward;\r\n\t\t\t\t\tvar needRender: boolean = FrustumCulling.cullingShadow(shadowCullInfo, scene, context);\r\n\t\t\t\t\tcontext.cameraShaderValue = sliceData.cameraShaderValue;\r\n\t\t\t\t\tCamera._updateMark++;\r\n\t\t\t\t\tvar gl = LayaGL.instance;\r\n\t\t\t\t\tvar resolution: number = sliceData.resolution;\r\n\t\t\t\t\tvar offsetX: number = sliceData.offsetX;\r\n\t\t\t\t\tvar offsetY: number = sliceData.offsetY;\r\n\t\t\t\t\tgl.enable(gl.SCISSOR_TEST);\r\n\t\t\t\t\tgl.viewport(offsetX, offsetY, resolution, resolution);\r\n\t\t\t\t\tgl.scissor(offsetX, offsetY, resolution, resolution);\r\n\t\t\t\t\tgl.clear(gl.DEPTH_BUFFER_BIT);\r\n\t\t\t\t\tif (needRender) {// if one cascade have anything to render.\r\n\t\t\t\t\t\tgl.scissor(offsetX + 1, offsetY + 1, resolution - 2, resolution - 2);//for no cascade is for the edge,for cascade is for the beyond maxCascade pixel can use (0,0,0) trick sample the shadowMap\r\n\t\t\t\t\t\tscene._opaqueQueue._render(context);//阴影均为非透明队列\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tshadowMap._end();\r\n\t\t\t\tthis._setupShadowReceiverShaderValues(shaderValues);\r\n\t\t\t\tShaderData.setRuntimeValueMode(true);\r\n\t\t\t\tcontext.pipelineMode = \"Forward\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShadowLightType.SpotLight:\r\n\t\t\t\tvar shaderValues:ShaderData = scene._shaderValues;\r\n\t\t\t\tcontext.pipelineMode = \"ShadowCaster\";\r\n\t\t\t\tShaderData.setRuntimeValueMode(false);\r\n\t\t\t\tvar spotlight: SpotLight = <SpotLight>this._light;\r\n\t\t\t\tvar shadowMap:RenderTexture = this._shadowSpotLightMap = ShadowUtils.getTemporaryShadowTexture(this._shadowMapWidth,this._shadowMapHeight,RenderTextureDepthFormat.DEPTH_16);\r\n\t\t\t\tshadowMap._start();\r\n\t\t\t\tvar shadowSpotData:ShadowSpotData = this._shadowSpotData;\r\n\t\t\t\tShadowUtils.getShadowBias(spotlight,shadowSpotData.projectionMatrix,shadowSpotData.resolution,this._shadowBias);\r\n\t\t\t\tthis._setupShadowCasterShaderValues(context,shaderValues,shadowSpotData,this._light.transform.position,this._shadowParams,this._shadowBias,LightType.Spot);\r\n\t\t\t\tvar needRender:boolean = FrustumCulling.cullingSpotShadow(shadowSpotData.cameraCullInfo,scene,context);\r\n\t\t\t\tcontext.cameraShaderValue = shadowSpotData.cameraShaderValue;\r\n\t\t\t\tCamera._updateMark++;\r\n\t\t\t\tvar gl = LayaGL.instance;\r\n\t\t\t\tgl.enable(gl.SCISSOR_TEST);\r\n\t\t\t\tgl.viewport(shadowSpotData.offsetX, shadowSpotData.offsetY, shadowSpotData.resolution, shadowSpotData.resolution);\r\n\t\t\t\tgl.scissor(shadowSpotData.offsetX, shadowSpotData.offsetY,shadowSpotData.resolution, shadowSpotData.resolution);\r\n\t\t\t\tgl.clear(gl.DEPTH_BUFFER_BIT);\r\n\t\t\t\r\n\t\t\t\tif(needRender){\r\n\t\t\t\t\t gl.scissor(shadowSpotData.offsetX,shadowSpotData.offsetY,shadowSpotData.resolution,shadowSpotData.resolution);\r\n\t\t\t\t\tscene._opaqueQueue._render(context);\r\n\t\t\t\t}\r\n\t\t\t\tshadowMap._end();\r\n\t\t\t\tthis._setupSpotShadowReceiverShaderValues(shaderValues);\r\n\t\t\t\tShaderData.setRuntimeValueMode(true);\r\n\t\t\t\tcontext.pipelineMode = \"Forward\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShadowLightType.PointLight:\r\n\t\t\t\t//TODO:\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow (\"There is no shadow of this type\")\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tcleanUp(): void {\r\n\t\tthis._shadowDirectLightMap && RenderTexture.recoverToPool(this._shadowDirectLightMap);\r\n\t\tthis._shadowSpotLightMap && RenderTexture.recoverToPool(this._shadowSpotLightMap);\r\n\t\tthis._shadowDirectLightMap = null;\r\n\t\tthis._shadowSpotLightMap = null;\r\n\t\tthis._light = null;\r\n\t\t\r\n\t}\r\n}\r\n\r\n","import { RenderElement } from \"../core/render/RenderElement\";\r\n\r\n/**\r\n * @internal\r\n * <code>DynamicBatchManager</code> 类用于管理动态批处理。\r\n */\r\nexport class DynamicBatchManager {\r\n\t/** @internal [只读]*/\r\n\tstatic _managers: DynamicBatchManager[] = [];\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _registerManager(manager: DynamicBatchManager): void {\r\n\t\tDynamicBatchManager._managers.push(manager);\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprotected _batchRenderElementPool: RenderElement[];\r\n\t/** @internal */\r\n\tprotected _batchRenderElementPoolIndex: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>DynamicBatchManager</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._batchRenderElementPool = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_clear(): void {\r\n\t\tthis._batchRenderElementPoolIndex = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getBatchRenderElementFromPool(): RenderElement {\r\n\t\tthrow \"StaticBatch:must override this function.\";\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tdispose(): void {\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { SingletonList } from \"../../component/SingletonList\";\r\nimport { ReflectionProbe } from \"./ReflectionProbe\";\r\n\r\n/**\r\n * <code>ReflectionProbeList</code> 类用于实现反射探针队列。\r\n * @miner\r\n */\r\nexport class ReflectionProbeList extends SingletonList<ReflectionProbe>{\r\n\t/**\r\n\t * 创建一个新的 <code>ReflectionProbeList</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tadd(singleElement:ReflectionProbe){\r\n\t\tthis._add(singleElement);\r\n\t\tsingleElement._setIndexInReflectionList(this.length++);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tremove(singleElement:ReflectionProbe){\r\n\t\tvar index:number = singleElement._getIndexInReflectionList();\r\n\t\tthis.length--;\r\n\t\tif(index !== this.length) {\r\n\t\t\tvar end = this.elements[this.length];\r\n\t\t\tthis.elements[index] = end;\r\n\t\t\tend._setIndexInReflectionList(index);\r\n\t\t}\r\n\t\tsingleElement._setIndexInReflectionList(-1);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseRender } from \"../render/BaseRender\";\r\nimport { ReflectionProbe } from \"./ReflectionProbe\";\r\nimport { ReflectionProbeList } from \"./ReflectionProbeList\";\r\nimport { SingletonList } from \"../../component/SingletonList\";  \r\nimport { Bounds } from \"../Bounds\";\r\nimport { SimpleSingletonList } from \"../../component/SimpleSingletonList\";\r\nimport { TextureCube } from \"../../resource/TextureCube\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\n\r\n/**\r\n *<code>ReflectionProbeManager</code> 类用于反射探针管理\r\n * @miner \r\n */\r\nexport class ReflectionProbeManager {\r\n\r\n    /** @internal 反射探针队列 */\r\n    private _reflectionProbes:ReflectionProbeList = new ReflectionProbeList();\r\n    /** @internal 环境探针 */\r\n    private _sceneReflectionProbe:ReflectionProbe;\r\n    /** @internal 需要跟新反射探针的渲染队列 */\r\n    private _motionObjects:SingletonList<BaseRender> =  new SingletonList<BaseRender>();\r\n    /** @internal */\r\n    _needUpdateAllRender:boolean = false;\r\n    \r\n    constructor(){\r\n        this._sceneReflectionProbe = new ReflectionProbe();\r\n        this._sceneReflectionProbe.bounds= new Bounds(new Vector3(0,0,0),new Vector3(0,0,0));\r\n        this._sceneReflectionProbe.boxProjection = false;\r\n        this._sceneReflectionProbe._isScene = true;\r\n    }\r\n\r\n    set sceneReflectionProbe(value:TextureCube){\r\n        this._sceneReflectionProbe.reflectionTexture = value;\r\n    }\r\n\r\n    set sceneReflectionCubeHDRParam(value:Vector4){\r\n        this._sceneReflectionProbe.reflectionHDRParams = value;\r\n    }\r\n    \r\n    /**\r\n     * 更新baseRender的反射探针\r\n     * @param baseRender \r\n     */\r\n    _updateMotionObjects(baseRender:BaseRender):void{\r\n        var elements:ReflectionProbe[] = this._reflectionProbes.elements;\r\n        var maxOverlap:number = 0;\r\n        var mainProbe:ReflectionProbe;\r\n        var renderBounds:Bounds = baseRender.bounds;\r\n        var overlop ;\r\n        for(var i:number = 0,n:number = this._reflectionProbes.length;i<n;i++){\r\n            var renflectProbe = elements[i];\r\n            if(!mainProbe){\r\n                overlop = renderBounds.calculateBoundsintersection(renflectProbe.bounds);\r\n                if(overlop <maxOverlap) continue;   \r\n            }else{\r\n                if(mainProbe.importance>renflectProbe.importance) continue;//重要性判断\r\n                overlop = renderBounds.calculateBoundsintersection(renflectProbe.bounds);\r\n                if(overlop <maxOverlap && mainProbe.importance == renflectProbe.importance) continue;  \r\n            }\r\n            mainProbe = renflectProbe;\r\n            maxOverlap = overlop;\r\n        }\r\n        if(!mainProbe&&this._sceneReflectionProbe)//如果没有相交 传场景反射球\r\n            mainProbe = this._sceneReflectionProbe;\r\n        baseRender._probReflection = mainProbe;\r\n     }\r\n    /**\r\n     * 场景中添加反射探针\r\n     * @internal\r\n     * @param reflectionProbe \r\n     */\r\n    add(reflectionProbe:ReflectionProbe){\r\n        this._reflectionProbes.add(reflectionProbe);\r\n        this._needUpdateAllRender = true;\r\n    }\r\n    /**\r\n     * 场景中删除反射探针\r\n     * @internal\r\n     * @param reflectionProbe \r\n     */\r\n    remove(reflectionProbe:ReflectionProbe){\r\n        this._reflectionProbes.remove(reflectionProbe);\r\n        this._needUpdateAllRender = true;\r\n    }\r\n    /**\r\n\t * 添加运动物体。\r\n\t * @param 运动物体。\r\n\t */\r\n    addMotionObject(renderObject:BaseRender){\r\n        this._motionObjects.add(renderObject);\r\n    }\r\n    /**\r\n     * 更新运动物体的反射探针信息\r\n     */\r\n    update():void{\r\n        if(this._reflectionProbes.length==0)\r\n            return;\r\n        var elements: BaseRender[] = this._motionObjects.elements;\r\n        for(var i:number = 0,n:number = this._motionObjects.length;i<n;i++){\r\n            this._updateMotionObjects(elements[i]);\r\n        }\r\n        this.clearMotionObjects();\r\n    }\r\n    /**\r\n     * 更新传入所有渲染器反射探针\r\n     * @param 渲染器列表\r\n     */\r\n    updateAllRenderObjects(baseRenders:SimpleSingletonList){\r\n        var elements = baseRenders.elements;\r\n        for(var i:number = 0,n:number = baseRenders.length;i<n;i++){\r\n            this._updateMotionObjects(elements[i] as BaseRender);\r\n        }\r\n        this._needUpdateAllRender = false;\r\n    }\r\n    /**\r\n     * 清楚变动队列\r\n     */\r\n    clearMotionObjects(){\r\n        this._motionObjects.length = 0;\r\n    }\r\n\r\n    destroy(){\r\n    }\r\n}\r\n\r\n\r\n","import { Config3D } from \"../../../../Config3D\";\r\nimport { ILaya } from \"../../../../ILaya\";\r\nimport { Sprite } from \"../../../display/Sprite\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Loader } from \"../../../net/Loader\";\r\nimport { URL } from \"../../../net/URL\";\r\nimport { Render } from \"../../../renders/Render\";\r\nimport { Context } from \"../../../resource/Context\";\r\nimport { ICreateResource } from \"../../../resource/ICreateResource\";\r\nimport { RenderTextureDepthFormat } from \"../../../resource/RenderTextureFormat\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { TextureDecodeFormat } from \"../../../resource/TextureDecodeFormat\";\r\nimport { Handler } from \"../../../utils/Handler\";\r\nimport { Timer } from \"../../../utils/Timer\";\r\nimport { ISubmit } from \"../../../webgl/submit/ISubmit\";\r\nimport { SubmitBase } from \"../../../webgl/submit/SubmitBase\";\r\nimport { SubmitKey } from \"../../../webgl/submit/SubmitKey\";\r\nimport { WebGLContext } from \"../../../webgl/WebGLContext\";\r\nimport { Animator } from \"../../component/Animator\";\r\nimport { Script3D } from \"../../component/Script3D\";\r\nimport { SimpleSingletonList } from \"../../component/SimpleSingletonList\";\r\nimport { FrustumCulling, CameraCullInfo } from \"../../graphics/FrustumCulling\";\r\nimport { Cluster } from \"../../graphics/renderPath/Cluster\";\r\nimport { SphericalHarmonicsL2 } from \"../../graphics/SphericalHarmonicsL2\";\r\nimport { Input3D } from \"../../Input3D\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { Viewport } from \"../../math/Viewport\";\r\nimport { Physics3D } from \"../../physics/Physics3D\";\r\nimport { PhysicsComponent } from \"../../physics/PhysicsComponent\";\r\nimport { PhysicsSettings } from \"../../physics/PhysicsSettings\";\r\nimport { PhysicsSimulation } from \"../../physics/PhysicsSimulation\";\r\nimport { SkyBox } from \"../../resource/models/SkyBox\";\r\nimport { SkyDome } from \"../../resource/models/SkyDome\";\r\nimport { SkyRenderer } from \"../../resource/models/SkyRenderer\";\r\nimport { RenderTexture } from \"../../resource/RenderTexture\";\r\nimport { TextureCube } from \"../../resource/TextureCube\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { ShaderData } from \"../../shader/ShaderData\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { BaseCamera } from \"../BaseCamera\";\r\nimport { Camera, CameraClearFlags } from \"../Camera\";\r\nimport { DirectionLight } from \"../light/DirectionLight\";\r\nimport { AlternateLightQueue, LightQueue } from \"../light/LightQueue\";\r\nimport { PointLight } from \"../light/PointLight\";\r\nimport { SpotLight } from \"../light/SpotLight\";\r\nimport { Material } from \"../material/Material\";\r\nimport { PBRMaterial } from \"../material/PBRMaterial\";\r\nimport { PBRRenderQuality } from \"../material/PBRRenderQuality\";\r\nimport { RenderState } from \"../material/RenderState\";\r\nimport { PixelLineMaterial } from \"../pixelLine/PixelLineMaterial\";\r\nimport { PixelLineSprite3D } from \"../pixelLine/PixelLineSprite3D\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { RenderElement } from \"../render/RenderElement\";\r\nimport { RenderQueue } from \"../render/RenderQueue\";\r\nimport { BoundsOctree } from \"./BoundsOctree\";\r\nimport { Lightmap } from \"./Lightmap\";\r\nimport { Scene3DShaderDeclaration } from \"./Scene3DShaderDeclaration\";\r\nimport { ShadowCasterPass } from \"../../shadowMap/ShadowCasterPass\";\r\nimport { DefineDatas } from \"../../shader/DefineDatas\";\r\nimport { StaticBatchManager } from \"../../graphics/StaticBatchManager\";\r\nimport { DynamicBatchManager } from \"../../graphics/DynamicBatchManager\";\r\nimport { CannonPhysicsSimulation } from \"../../physicsCannon/CannonPhysicsSimulation\";\r\nimport { CannonPhysicsSettings } from \"../../physicsCannon/CannonPhysicsSettings\";\r\nimport { CannonPhysicsComponent } from \"../../physicsCannon/CannonPhysicsComponent\";\r\nimport { VideoTexture } from \"../../../resource/videoTexture\";\r\nimport { ReflectionProbeManager } from \"../reflectionProbe/ReflectionProbeManager\";\r\n\r\n/**\r\n * 环境光模式\r\n */\r\nexport enum AmbientMode {\r\n\t/** 固定颜色。*/\r\n\tSolidColor,\r\n\t/** 球谐光照,例如通过天空盒生成的球谐数据。 */\r\n\tSphericalHarmonics\r\n}\r\n\r\n/**\r\n * 用于实现3D场景。\r\n */\r\nexport class Scene3D extends Sprite implements ISubmit, ICreateResource {\r\n\t/** @internal */\r\n\tprivate static _lightTexture: Texture2D;\r\n\t/** @internal */\r\n\tprivate static _lightPixles: Float32Array;\r\n\t/** @internal */\r\n\tstatic _shadowCasterPass: ShadowCasterPass = new ShadowCasterPass();\r\n\r\n\t/**Hierarchy资源。*/\r\n\tstatic HIERARCHY: string = \"HIERARCHY\";\r\n\t/**@internal */\r\n\tstatic physicsSettings: PhysicsSettings;\r\n\t/**@internal */\r\n\tstatic cannonPhysicsSettings:CannonPhysicsSettings;\r\n\t/** 是否开启八叉树裁剪。*/\r\n\tstatic octreeCulling: boolean = false;\r\n\t/** 八叉树初始化尺寸。*/\r\n\tstatic octreeInitialSize: number = 64.0;\r\n\t/** 八叉树初始化中心。*/\r\n\tstatic octreeInitialCenter: Vector3 = new Vector3(0, 0, 0);\r\n\t/** 八叉树最小尺寸。*/\r\n\tstatic octreeMinNodeSize: number = 2.0;\r\n\t/** 八叉树松散值。*/\r\n\tstatic octreeLooseness: number = 1.25;\r\n\r\n\tstatic REFLECTIONMODE_SKYBOX: number = 0;\r\n\tstatic REFLECTIONMODE_CUSTOM: number = 1;\r\n\r\n\tstatic FOGCOLOR: number = Shader3D.propertyNameToID(\"u_FogColor\");\r\n\tstatic FOGSTART: number = Shader3D.propertyNameToID(\"u_FogStart\");\r\n\tstatic FOGRANGE: number = Shader3D.propertyNameToID(\"u_FogRange\");\r\n\r\n\tstatic DIRECTIONLIGHTCOUNT: number = Shader3D.propertyNameToID(\"u_DirationLightCount\");\r\n\tstatic LIGHTBUFFER: number = Shader3D.propertyNameToID(\"u_LightBuffer\");\r\n\tstatic CLUSTERBUFFER: number = Shader3D.propertyNameToID(\"u_LightClusterBuffer\");\r\n\tstatic SUNLIGHTDIRECTION: number = Shader3D.propertyNameToID(\"u_SunLight.direction\");\r\n\tstatic SUNLIGHTDIRCOLOR: number = Shader3D.propertyNameToID(\"u_SunLight.color\");\r\n\tstatic AMBIENTSHAR: number = Shader3D.propertyNameToID(\"u_AmbientSHAr\");\r\n\tstatic AMBIENTSHAG: number = Shader3D.propertyNameToID(\"u_AmbientSHAg\");\r\n\tstatic AMBIENTSHAB: number = Shader3D.propertyNameToID(\"u_AmbientSHAb\");\r\n\tstatic AMBIENTSHBR: number = Shader3D.propertyNameToID(\"u_AmbientSHBr\");\r\n\tstatic AMBIENTSHBG: number = Shader3D.propertyNameToID(\"u_AmbientSHBg\");\r\n\tstatic AMBIENTSHBB: number = Shader3D.propertyNameToID(\"u_AmbientSHBb\");\r\n\tstatic AMBIENTSHC: number = Shader3D.propertyNameToID(\"u_AmbientSHC\");\r\n\r\n\t//------------------legacy lighting-------------------------------\r\n\tstatic LIGHTDIRECTION: number = Shader3D.propertyNameToID(\"u_DirectionLight.direction\");\r\n\tstatic LIGHTDIRCOLOR: number = Shader3D.propertyNameToID(\"u_DirectionLight.color\");\r\n\tstatic POINTLIGHTPOS: number = Shader3D.propertyNameToID(\"u_PointLight.position\");\r\n\tstatic POINTLIGHTRANGE: number = Shader3D.propertyNameToID(\"u_PointLight.range\");\r\n\tstatic POINTLIGHTATTENUATION: number = Shader3D.propertyNameToID(\"u_PointLight.attenuation\");\r\n\tstatic POINTLIGHTCOLOR: number = Shader3D.propertyNameToID(\"u_PointLight.color\");\r\n\tstatic SPOTLIGHTPOS: number = Shader3D.propertyNameToID(\"u_SpotLight.position\");\r\n\tstatic SPOTLIGHTDIRECTION: number = Shader3D.propertyNameToID(\"u_SpotLight.direction\");\r\n\tstatic SPOTLIGHTSPOTANGLE: number = Shader3D.propertyNameToID(\"u_SpotLight.spot\");\r\n\tstatic SPOTLIGHTRANGE: number = Shader3D.propertyNameToID(\"u_SpotLight.range\");\r\n\tstatic SPOTLIGHTCOLOR: number = Shader3D.propertyNameToID(\"u_SpotLight.color\");\r\n\t//------------------legacy lighting-------------------------------\r\n\r\n\tstatic AMBIENTCOLOR: number = Shader3D.propertyNameToID(\"u_AmbientColor\");\r\n\r\n\tstatic TIME: number = Shader3D.propertyNameToID(\"u_Time\");\r\n\r\n\t/** @internal */\r\n\tstatic _configDefineValues: DefineDatas = new DefineDatas();\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tvar con: Config3D = Config3D._config;\r\n\t\tvar multiLighting: boolean = con._multiLighting;\r\n\t\tif (multiLighting) {\r\n\t\t\tconst width: number = 4;\r\n\t\t\tvar maxLightCount: number = con.maxLightCount;\r\n\t\t\tvar clusterSlices: Vector3 = con.lightClusterCount;\r\n\t\t\tCluster.instance = new Cluster(clusterSlices.x, clusterSlices.y, clusterSlices.z, Math.min(con.maxLightCount, con._maxAreaLightCountPerClusterAverage));\r\n\t\t\tScene3D._lightTexture = Utils3D._createFloatTextureBuffer(width, maxLightCount);\r\n\t\t\tScene3D._lightTexture.lock = true;\r\n\t\t\tScene3D._lightPixles = new Float32Array(maxLightCount * width * 4);\r\n\t\t}\r\n\r\n\t\tScene3DShaderDeclaration.SHADERDEFINE_FOG = Shader3D.getDefineByName(\"FOG\");\r\n\t\tScene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT = Shader3D.getDefineByName(\"DIRECTIONLIGHT\");\r\n\t\tScene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT = Shader3D.getDefineByName(\"POINTLIGHT\");\r\n\t\tScene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT = Shader3D.getDefineByName(\"SPOTLIGHT\");\r\n\t\tScene3DShaderDeclaration.SHADERDEFINE_SHADOW = Shader3D.getDefineByName(\"SHADOW\");\r\n\t\tScene3DShaderDeclaration.SHADERDEFINE_SHADOW_CASCADE = Shader3D.getDefineByName(\"SHADOW_CASCADE\");\r\n\t\tScene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW = Shader3D.getDefineByName(\"SHADOW_SOFT_SHADOW_LOW\");\r\n\t\tScene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH = Shader3D.getDefineByName(\"SHADOW_SOFT_SHADOW_HIGH\");\r\n\t\tScene3DShaderDeclaration.SHADERDEFINE_GI_AMBIENT_SH = Shader3D.getDefineByName(\"GI_AMBIENT_SH\");\r\n\t\tScene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT = Shader3D.getDefineByName(\"SHADOW_SPOT\");\r\n\t\tScene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW = Shader3D.getDefineByName(\"SHADOW_SPOT_SOFT_SHADOW_LOW\");\r\n\t\tScene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH = Shader3D.getDefineByName(\"SHADOW_SPOT_SOFT_SHADOW_HIGH\");\r\n\r\n\t\tvar config: Config3D = Config3D._config;\r\n\t\tvar configShaderValue: DefineDatas = Scene3D._configDefineValues;\r\n\t\t(config._multiLighting) || (configShaderValue.add(Shader3D.SHADERDEFINE_LEGACYSINGALLIGHTING));\r\n\t\tif (LayaGL.layaGPUInstance._isWebGL2)\r\n\t\t\tconfigShaderValue.add(Shader3D.SHADERDEFINE_GRAPHICS_API_GLES3);\r\n\t\telse\r\n\t\t\tconfigShaderValue.add(Shader3D.SHADERDEFINE_GRAPHICS_API_GLES2);\r\n\t\tswitch (config.pbrRenderQuality) {\r\n\t\t\tcase PBRRenderQuality.High:\r\n\t\t\t\tconfigShaderValue.add(PBRMaterial.SHADERDEFINE_LAYA_PBR_BRDF_HIGH)\r\n\t\t\t\tbreak;\r\n\t\t\tcase PBRRenderQuality.Low:\r\n\t\t\t\tconfigShaderValue.add(PBRMaterial.SHADERDEFINE_LAYA_PBR_BRDF_LOW)\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"Scene3D:unknown shader quality.\";\r\n\t\t}\r\n\t\tif(config.isUseCannonPhysicsEngine){\r\n\t\t\tScene3D.cannonPhysicsSettings = new CannonPhysicsSettings(); \r\n\t\t}else{\r\n\t\t\tScene3D.physicsSettings = new PhysicsSettings();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 加载场景,注意:不缓存。\r\n\t * @param url 模板地址。\r\n\t * @param complete 完成回调。\r\n\t */\r\n\tstatic load(url: string, complete: Handler): void {\r\n\t\tILaya.loader.create(url, complete, null, Scene3D.HIERARCHY);\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _url: string;\r\n\t/** @internal */\r\n\tprivate _group: string;\r\n\t/** @internal */\r\n\tpublic _lightCount: number = 0;\r\n\t/** @internal */\r\n\tpublic _pointLights: LightQueue<PointLight> = new LightQueue();\r\n\t/** @internal */\r\n\tpublic _spotLights: LightQueue<SpotLight> = new LightQueue();\r\n\t/** @internal */\r\n\tpublic _directionLights: LightQueue<DirectionLight> = new LightQueue();\r\n\t/** @internal */\r\n\tpublic _alternateLights: AlternateLightQueue = new AlternateLightQueue();\r\n\r\n\t/** @internal */\r\n\tprivate _lightmaps: Lightmap[] = [];\r\n\t/** @internal */\r\n\tprivate _skyRenderer: SkyRenderer = new SkyRenderer();\r\n\t/** @internal */\r\n\tprivate _enableFog: boolean;\r\n\t/** @internal */\r\n\tprivate _input: Input3D = new Input3D();\r\n\t/** @internal */\r\n\tprivate _timer: Timer = ILaya.timer;\r\n\t/** @internal */\r\n\tprivate _time: number = 0;\r\n\t/** @internal */\r\n\tprivate _shCoefficients: Vector4[] = new Array(7);\r\n\t/** @internal */\r\n\tprivate _ambientMode: AmbientMode = AmbientMode.SolidColor;\r\n\t/** @internal */\r\n\tprivate _ambientSphericalHarmonics: SphericalHarmonicsL2 = new SphericalHarmonicsL2();\r\n\t/** @internal */\r\n\tprivate _ambientSphericalHarmonicsIntensity: number = 1.0;\r\n\t/** @internal */\r\n\tprivate _reflection: TextureCube;\r\n\t/** @internal */\r\n\tprivate _reflectionDecodeFormat: TextureDecodeFormat = TextureDecodeFormat.Normal;\r\n\t/** @internal */\r\n\tprivate _reflectionIntensity: number = 1.0;\r\n\r\n\t/** @internal */\r\n\t_mainDirectionLight: DirectionLight;\r\n\t/** @internal */\r\n\t_mainSpotLight:SpotLight;\r\n\t/** @internal */\r\n\t_mainPointLight:PointLight;//TODO\r\n\t/** @internal */\r\n\t_physicsSimulation: PhysicsSimulation;\r\n\t/** @internal */\r\n\t_cannonPhysicsSimulation:CannonPhysicsSimulation;\r\n\t/** @internal */\r\n\t_octree: BoundsOctree;\r\n\t/** @internal 只读,不允许修改。*/\r\n\t_collsionTestList: number[] = [];\r\n\r\n\t/** @internal */\r\n\t_shaderValues: ShaderData;\r\n\t/** @internal */\r\n\t_renders: SimpleSingletonList = new SimpleSingletonList();\r\n\t/** @internal */\r\n\t_opaqueQueue: RenderQueue = new RenderQueue(false);\r\n\t/** @internal */\r\n\t_transparentQueue: RenderQueue = new RenderQueue(true);\r\n\t/** @internal */\r\n\t_cameraPool: BaseCamera[] = [];\r\n\t/** @internal */\r\n\t_animatorPool: SimpleSingletonList = new SimpleSingletonList();\r\n\t/** @internal */\r\n\t_scriptPool: Script3D[] = new Array<Script3D>();\r\n\t/** @internal */\r\n\t_tempScriptPool: Script3D[] = new Array<Script3D>();\r\n\t/** @internal */\r\n\t_needClearScriptPool: boolean = false;\r\n\t/**\t@internal */\r\n\t_reflectionCubeHDRParams: Vector4 = new Vector4();\r\n\t/** @internal */\r\n\t_reflectionProbeManager:ReflectionProbeManager = new ReflectionProbeManager();\r\n\r\n\r\n\r\n\t/** 当前创建精灵所属遮罩层。*/\r\n\tcurrentCreationLayer: number = Math.pow(2, 0);\r\n\t/** 是否启用灯光。*/\r\n\tenableLight: boolean = true;\r\n\r\n\t/** @internal */\r\n\t_debugTool: PixelLineSprite3D;\r\n\r\n\t/** @internal */\r\n\t_key: SubmitKey = new SubmitKey();\r\n\r\n\t/** @internal\t[NATIVE]*/\r\n\t_cullingBufferIndices: Int32Array;\r\n\t/** @internal\t[NATIVE]*/\r\n\t_cullingBufferResult: Int32Array;\r\n\r\n\t/** @internal [Editer]*/\r\n\t_pickIdToSprite: any = new Object();\r\n\r\n\t/**\r\n\t * 资源的URL地址。\r\n\t */\r\n\tget url(): string {\r\n\t\treturn this._url;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否允许雾化。\r\n\t */\r\n\tget enableFog(): boolean {\r\n\t\treturn this._enableFog;\r\n\t}\r\n\r\n\tset enableFog(value: boolean) {\r\n\t\tif (this._enableFog !== value) {\r\n\t\t\tthis._enableFog = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tthis._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG);\r\n\t\t\t} else\r\n\t\t\t\tthis._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 雾化颜色。\r\n\t */\r\n\tget fogColor(): Vector3 {\r\n\t\treturn this._shaderValues.getVector3(Scene3D.FOGCOLOR);\r\n\t}\r\n\r\n\tset fogColor(value: Vector3) {\r\n\t\tthis._shaderValues.setVector3(Scene3D.FOGCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 雾化起始位置。\r\n\t */\r\n\tget fogStart(): number {\r\n\t\treturn this._shaderValues.getNumber(Scene3D.FOGSTART);\r\n\t}\r\n\r\n\tset fogStart(value: number) {\r\n\t\tthis._shaderValues.setNumber(Scene3D.FOGSTART, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 雾化范围。\r\n\t */\r\n\tget fogRange(): number {\r\n\t\treturn this._shaderValues.getNumber(Scene3D.FOGRANGE);\r\n\t}\r\n\r\n\tset fogRange(value: number) {\r\n\t\tthis._shaderValues.setNumber(Scene3D.FOGRANGE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 环境光模式。\r\n\t * 如果值为AmbientMode.SolidColor一般使用ambientColor作为环境光源，如果值为如果值为AmbientMode.SphericalHarmonics一般使用ambientSphericalHarmonics作为环境光源。\r\n\t */\r\n\tget ambientMode(): AmbientMode {\r\n\t\treturn this._ambientMode;\r\n\t}\r\n\r\n\tset ambientMode(value: AmbientMode) {\r\n\t\tif (this._ambientMode !== value) {\r\n\t\t\tswitch (value) {\r\n\t\t\t\tcase AmbientMode.SolidColor:\r\n\t\t\t\t\tthis._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_GI_AMBIENT_SH);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase AmbientMode.SphericalHarmonics:\r\n\t\t\t\t\tthis._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_GI_AMBIENT_SH);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"Scene3D: unknown ambientMode.\";\r\n\t\t\t}\r\n\t\t\tthis._ambientMode = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 固定颜色环境光。\r\n\t */\r\n\tget ambientColor(): Vector3 {\r\n\t\treturn this._shaderValues.getVector3(Scene3D.AMBIENTCOLOR);\r\n\t}\r\n\r\n\tset ambientColor(value: Vector3) {\r\n\t\tthis._shaderValues.setVector3(Scene3D.AMBIENTCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 球谐环境光,修改后必须重新赋值。\r\n\t */\r\n\tget ambientSphericalHarmonics(): SphericalHarmonicsL2 {\r\n\t\treturn this._ambientSphericalHarmonics;\r\n\t}\r\n\r\n\tset ambientSphericalHarmonics(value: SphericalHarmonicsL2) {\r\n\t\tvar originalSH: SphericalHarmonicsL2 = value || SphericalHarmonicsL2._default;\r\n\t\tthis._applySHCoefficients(originalSH, Math.pow(this._ambientSphericalHarmonicsIntensity, 2.2));//Gamma to Linear,I prefer use 'Color.gammaToLinearSpace',but must same with Unity now.\r\n\t\tif (this._ambientSphericalHarmonics != value)\r\n\t\t\tvalue.cloneTo(this._ambientSphericalHarmonics);\r\n\t}\r\n\r\n\t/**\r\n\t * 环境球谐强度。\r\n\t */\r\n\tget ambientSphericalHarmonicsIntensity(): number {\r\n\t\treturn this._ambientSphericalHarmonicsIntensity;\r\n\t}\r\n\r\n\tset ambientSphericalHarmonicsIntensity(value: number) {\r\n\t\tvalue = Math.max(Math.min(value, 8.0), 0.0);\r\n\t\tif (this._ambientSphericalHarmonicsIntensity !== value) {\r\n\t\t\tvar originalSH: SphericalHarmonicsL2 = this._ambientSphericalHarmonics || SphericalHarmonicsL2._default;\r\n\t\t\tthis._applySHCoefficients(originalSH, Math.pow(value, 2.2));//Gamma to Linear,I prefer use 'Color.gammaToLinearSpace',but must same with Unity now.\r\n\t\t\tthis._ambientSphericalHarmonicsIntensity = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 反射立方体纹理。\r\n\t */\r\n\tget reflection(): TextureCube {\r\n\t\treturn this._reflection;\r\n\t}\r\n\r\n\tset reflection(value: TextureCube) {\r\n\t\tif (this._reflection != value) {\r\n\t\t\tvalue._addReference();\r\n\t\t\tthis._reflectionProbeManager.sceneReflectionProbe = value;\r\n\t\t\tthis._reflection = value || TextureCube.blackTexture;\r\n\t\t\tthis._reflectionProbeManager._needUpdateAllRender = true;\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 反射立方体纹理解码格式。\r\n\t */\r\n\tget reflectionDecodingFormat(): TextureDecodeFormat {\r\n\t\treturn this._reflectionDecodeFormat;\r\n\t}\r\n\r\n\tset reflectionDecodingFormat(value: TextureDecodeFormat) {\r\n\t\tif (this._reflectionDecodeFormat != value) {\r\n\t\t\tthis._reflectionCubeHDRParams.x = this._reflectionIntensity;\r\n\t\t\tif (this._reflectionDecodeFormat == TextureDecodeFormat.RGBM)\r\n\t\t\t\tthis._reflectionCubeHDRParams.x *= 5.0;//5.0 is RGBM param\r\n\t\t\tthis._reflectionDecodeFormat = value;\r\n\t\t\tthis._reflectionProbeManager.sceneReflectionCubeHDRParam = this._reflectionCubeHDRParams;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 反射强度。\r\n\t */\r\n\tget reflectionIntensity(): number {\r\n\t\treturn this._reflectionIntensity;\r\n\t}\r\n\r\n\tset reflectionIntensity(value: number) {\r\n\t\tvalue = Math.max(Math.min(value, 1.0), 0.0);\r\n\t\tthis._reflectionCubeHDRParams.x = value;\r\n\t\tif (this._reflectionDecodeFormat == TextureDecodeFormat.RGBM)\r\n\t\t\tthis._reflectionCubeHDRParams.x *= 5.0;//5.0 is RGBM param\r\n\t\tthis._reflectionIntensity = value;\r\n\t\tthis._reflectionProbeManager.sceneReflectionCubeHDRParam = this._reflectionCubeHDRParams;\r\n\t}\r\n\r\n\t/**\r\n\t * 天空渲染器。\r\n\t */\r\n\tget skyRenderer(): SkyRenderer {\r\n\t\treturn this._skyRenderer;\r\n\t}\r\n\r\n\t/**\r\n\t * 物理模拟器。\r\n\t */\r\n\tget physicsSimulation(): PhysicsSimulation {\r\n\t\treturn this._physicsSimulation;\r\n\t}\r\n\r\n\tget cannonPhysicsSimulation():CannonPhysicsSimulation{\r\n\t\treturn this._cannonPhysicsSimulation;\r\n\t}\r\n\t/**\r\n\t * 场景时钟。\r\n\t * @override\r\n\t */\r\n\tget timer(): Timer {\r\n\t\treturn this._timer;\r\n\t}\r\n\r\n\tset timer(value: Timer) {\r\n\t\tthis._timer = value;\r\n\t}\r\n\r\n\t/**\r\n\t *\t输入。\r\n\t */\r\n\tget input(): Input3D {\r\n\t\treturn this._input;\r\n\t}\r\n\r\n\t/**\r\n\t * 光照贴图数组,返回值为浅拷贝数组。\r\n\t */\r\n\tget lightmaps(): Lightmap[] {\r\n\t\treturn this._lightmaps.slice();\r\n\t}\r\n\r\n\tset lightmaps(value: Lightmap[]) {\r\n\t\tvar maps: Lightmap[] = this._lightmaps;\r\n\t\tif (maps) {\r\n\t\t\tfor (var i: number = 0, n: number = maps.length; i < n; i++) {\r\n\t\t\t\tvar map: Lightmap = maps[i];\r\n\t\t\t\tmap.lightmapColor._removeReference();\r\n\t\t\t\tmap.lightmapDirection._removeReference();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (value) {\r\n\t\t\tvar count: number = value.length;\r\n\t\t\tmaps.length = count;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tvar map: Lightmap = value[i];\r\n\t\t\t\tmap.lightmapColor && map.lightmapColor._addReference();\r\n\t\t\t\tmap.lightmapDirection && map.lightmapDirection._addReference();\r\n\t\t\t\tmaps[i] = map;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tmaps.length = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Scene3D</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tif(!Config3D._config.isUseCannonPhysicsEngine&&Physics3D._bullet)\r\n\t\t\tthis._physicsSimulation = new PhysicsSimulation(Scene3D.physicsSettings);\r\n\t\telse if(Physics3D._cannon){\r\n\t\t\tthis._cannonPhysicsSimulation = new CannonPhysicsSimulation(Scene3D.cannonPhysicsSettings);\r\n\t\t}\r\n\t\t\t\r\n\t\t\r\n\t\tthis._shaderValues = new ShaderData(null);\r\n\r\n\t\tthis.enableFog = false;\r\n\t\tthis.fogStart = 300;\r\n\t\tthis.fogRange = 1000;\r\n\t\tthis.fogColor = new Vector3(0.7, 0.7, 0.7);\r\n\t\tthis.ambientColor = new Vector3(0.212, 0.227, 0.259);\r\n\t\tthis.reflectionIntensity = 1.0;\r\n\t\tthis.reflection = TextureCube.blackTexture;\r\n\t\tfor (var i: number = 0; i < 7; i++)\r\n\t\t\tthis._shCoefficients[i] = new Vector4();\r\n\r\n\t\tthis._reflectionProbeManager.sceneReflectionCubeHDRParam = this._reflectionCubeHDRParams;\r\n\r\n\t\tif (Render.supportWebGLPlusCulling) {//[NATIVE]\r\n\t\t\tthis._cullingBufferIndices = new Int32Array(1024);\r\n\t\t\tthis._cullingBufferResult = new Int32Array(1024);\r\n\t\t}\r\n\r\n\t\t//this._shaderValues.setTexture(Scene3D.RANGEATTENUATIONTEXTURE, ShaderInit3D._rangeAttenTex);//TODO:\r\n\r\n\t\t//var angleAttenTex:Texture2D = Texture2D.buildTexture2D(64, 64, BaseTexture.FORMAT_Alpha8, TextureGenerator.haloTexture);\r\n\t\t//_shaderValues.setTexture(Scene3D.ANGLEATTENUATIONTEXTURE, angleAttenTex);\r\n\t\tthis._scene = this;\r\n\t\tthis._input.__init__(Render.canvas, this);\r\n\r\n\t\tif (Scene3D.octreeCulling)\r\n\t\t\tthis._octree = new BoundsOctree(Scene3D.octreeInitialSize, Scene3D.octreeInitialCenter, Scene3D.octreeMinNodeSize, Scene3D.octreeLooseness);\r\n\r\n\t\tif (FrustumCulling.debugFrustumCulling) {\r\n\t\t\tthis._debugTool = new PixelLineSprite3D();\r\n\t\t\tvar lineMaterial: PixelLineMaterial = new PixelLineMaterial();\r\n\t\t\tlineMaterial.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\tlineMaterial.alphaTest = false;\r\n\t\t\tlineMaterial.depthWrite = false;\r\n\t\t\tlineMaterial.cull = RenderState.CULL_BACK;\r\n\t\t\tlineMaterial.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\tlineMaterial.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\tlineMaterial.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\tlineMaterial.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\tthis._debugTool.pixelLineRenderer.sharedMaterial = lineMaterial;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _applySHCoefficients(originalSH: SphericalHarmonicsL2, intensity: number): void {\r\n\t\tvar optSH: Vector4[] = this._shCoefficients;\r\n\t\tfor (var i = 0; i < 3; i++) {\r\n\t\t\tvar shaderSHA: Vector4 = optSH[i];\r\n\t\t\tvar shaderSHB: Vector4 = optSH[i + 3];\r\n\t\t\tshaderSHA.setValue(originalSH.getCoefficient(i, 3) * intensity, originalSH.getCoefficient(i, 1) * intensity, originalSH.getCoefficient(i, 2) * intensity, (originalSH.getCoefficient(i, 0) - originalSH.getCoefficient(i, 6)) * intensity);\r\n\t\t\tshaderSHB.setValue(originalSH.getCoefficient(i, 4) * intensity, originalSH.getCoefficient(i, 5) * intensity, originalSH.getCoefficient(i, 6) * 3 * intensity, originalSH.getCoefficient(i, 7) * intensity);// Quadratic polynomials \r\n\t\t}\r\n\t\toptSH[6].setValue(originalSH.getCoefficient(0, 8) * intensity, originalSH.getCoefficient(1, 8) * intensity, originalSH.getCoefficient(2, 8) * intensity, 1);// Final quadratic polynomial\r\n\r\n\t\tvar shaderValues: ShaderData = this._shaderValues;\r\n\t\tshaderValues.setVector(Scene3D.AMBIENTSHAR, optSH[0]);\r\n\t\tshaderValues.setVector(Scene3D.AMBIENTSHAG, optSH[1]);\r\n\t\tshaderValues.setVector(Scene3D.AMBIENTSHAB, optSH[2]);\r\n\t\tshaderValues.setVector(Scene3D.AMBIENTSHBR, optSH[3]);\r\n\t\tshaderValues.setVector(Scene3D.AMBIENTSHBG, optSH[4]);\r\n\t\tshaderValues.setVector(Scene3D.AMBIENTSHBB, optSH[5]);\r\n\t\tshaderValues.setVector(Scene3D.AMBIENTSHC, optSH[6]);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate _update(): void {\r\n\t\tvar delta: number = this.timer._delta / 1000;\r\n\t\tthis._time += delta;\r\n\t\tthis._shaderValues.setNumber(Scene3D.TIME, this._time);\r\n\r\n\t\tvar simulation: PhysicsSimulation = this._physicsSimulation;\r\n\t\tif (Physics3D._enablePhysics && !PhysicsSimulation.disableSimulation&&!Config3D._config.isUseCannonPhysicsEngine) {\r\n\t\t\tsimulation._updatePhysicsTransformFromRender();\r\n\t\t\tPhysicsComponent._addUpdateList = false;//物理模拟器会触发_updateTransformComponent函数,不加入更新队列\r\n\t\t\t//simulate physics\r\n\t\t\tsimulation._simulate(delta);\r\n\t\t\t//update character sprite3D transforms from physics engine simulation\r\n\t\t\tsimulation._updateCharacters();\r\n\t\t\tPhysicsComponent._addUpdateList = true;\r\n\r\n\t\t\t//handle frame contacts\r\n\t\t\tsimulation._updateCollisions();\r\n\r\n\t\t\t//send contact events\r\n\t\t\tsimulation._eventScripts();\r\n\t\t}\r\n\t\tif(Physics3D._cannon&&Config3D._config.isUseCannonPhysicsEngine){\r\n\t\t\tvar cannonSimulation:CannonPhysicsSimulation = this._cannonPhysicsSimulation;\r\n\t\t\tcannonSimulation._updatePhysicsTransformFromRender();\r\n\t\t\tCannonPhysicsComponent._addUpdateList = false;\r\n\t\t\tcannonSimulation._simulate(delta);\r\n\t\t\tCannonPhysicsComponent._addUpdateList = true;\r\n\t\t\tcannonSimulation._updateCollisions();\r\n\t\t\tcannonSimulation._eventScripts();\r\n\t\t}\r\n\t\tthis._input._update();\r\n\r\n\t\tthis._clearScript();\r\n\t\tthis._updateScript();\r\n\t\tAnimator._update(this);\r\n\t\tVideoTexture._update();\r\n\t\tif(this._reflectionProbeManager._needUpdateAllRender)\r\n\t\t\tthis._reflectionProbeManager.updateAllRenderObjects(this._renders);\r\n\t\telse\r\n\t\t\tthis._reflectionProbeManager.update();\r\n\t\tthis._lateUpdateScript();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _binarySearchIndexInCameraPool(camera: BaseCamera): number {\r\n\t\tvar start: number = 0;\r\n\t\tvar end: number = this._cameraPool.length - 1;\r\n\t\tvar mid: number;\r\n\t\twhile (start <= end) {\r\n\t\t\tmid = Math.floor((start + end) / 2);\r\n\t\t\tvar midValue: number = this._cameraPool[mid]._renderingOrder;\r\n\t\t\tif (midValue == camera._renderingOrder)\r\n\t\t\t\treturn mid;\r\n\t\t\telse if (midValue > camera._renderingOrder)\r\n\t\t\t\tend = mid - 1;\r\n\t\t\telse\r\n\t\t\t\tstart = mid + 1;\r\n\t\t}\r\n\t\treturn start;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * [Editer]\r\n\t */\r\n\t_allotPickColorByID(id: number, pickColor: Vector4): void {\r\n\r\n\t\tvar pickColorR: number = Math.floor(id / (255 * 255));\r\n\t\tid -= pickColorR * 255 * 255;\r\n\t\tvar pickColorG: number = Math.floor(id / 255);\r\n\t\tid -= pickColorG * 255;\r\n\t\tvar pickColorB: number = id;\r\n\r\n\t\tpickColor.x = pickColorR / 255;\r\n\t\tpickColor.y = pickColorG / 255;\r\n\t\tpickColor.z = pickColorB / 255;\r\n\t\tpickColor.w = 1.0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * [Editer]\r\n\t */\r\n\t_searchIDByPickColor(pickColor: Vector4): number {\r\n\t\tvar id: number = pickColor.x * 255 * 255 + pickColor.y * 255 + pickColor.z;\r\n\t\treturn id;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tonEnable(): void {\r\n\t\tthis._input._onCanvasEvent(Render.canvas);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tonDisable(): void {\r\n\t\tthis._input._offCanvasEvent(Render.canvas);\r\n\t}\r\n\r\n\t/**\r\n\t */\r\n\t_setCreateURL(url: string): void {\r\n\t\tthis._url = URL.formatURL(url);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getGroup(): string {\r\n\t\treturn this._group;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setGroup(value: string): void {\r\n\t\tthis._group = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _clearScript(): void {\r\n\t\tif (this._needClearScriptPool) {\r\n\t\t\tvar scripts: Script3D[] = this._scriptPool;\r\n\t\t\tfor (var i: number = 0, n: number = scripts.length; i < n; i++) {\r\n\t\t\t\tvar script: Script3D = scripts[i];\r\n\t\t\t\tif (script) {\r\n\t\t\t\t\tscript._indexInPool = this._tempScriptPool.length;\r\n\t\t\t\t\tthis._tempScriptPool.push(script);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._scriptPool = this._tempScriptPool;\r\n\t\t\tscripts.length = 0;\r\n\t\t\tthis._tempScriptPool = scripts;\r\n\r\n\t\t\tthis._needClearScriptPool = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _updateScript(): void {\r\n\t\tvar scripts: Script3D[] = this._scriptPool;\r\n\t\tfor (var i: number = 0, n: number = scripts.length; i < n; i++) {\r\n\t\t\tvar script: Script3D = scripts[i];\r\n\t\t\t(script && script.enabled) && (script.onUpdate());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _lateUpdateScript(): void {\r\n\t\tvar scripts: Script3D[] = this._scriptPool;\r\n\t\tfor (var i: number = 0, n: number = scripts.length; i < n; i++) {\r\n\t\t\tvar script: Script3D = (<Script3D>scripts[i]);\r\n\t\t\t(script && script.enabled) && (script.onLateUpdate());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onActive(): void {\r\n\t\tsuper._onActive();\r\n\t\tILaya.stage._scene3Ds.push(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onInActive(): void {\r\n\t\tsuper._onInActive();\r\n\t\tvar scenes: any[] = ILaya.stage._scene3Ds;\r\n\t\tscenes.splice(scenes.indexOf(this), 1);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _prepareSceneToRender(): void {\r\n\t\tvar shaderValues: ShaderData = this._shaderValues;\r\n\t\tvar multiLighting: boolean = Config3D._config._multiLighting;\r\n\t\tif (multiLighting) {\r\n\t\t\tvar ligTex: Texture2D = Scene3D._lightTexture;\r\n\t\t\tvar ligPix: Float32Array = Scene3D._lightPixles;\r\n\t\t\tconst pixelWidth: number = ligTex.width;\r\n\t\t\tconst floatWidth: number = pixelWidth * 4;\r\n\t\t\tvar curCount: number = 0;\r\n\t\t\tvar dirCount: number = this._directionLights._length;\r\n\t\t\tvar dirElements: DirectionLight[] = this._directionLights._elements;\r\n\t\t\tif (dirCount > 0) {\r\n\t\t\t\tvar sunLightIndex: number = this._directionLights.getBrightestLight();//get the brightest light as sun\r\n\t\t\t\tthis._mainDirectionLight = dirElements[sunLightIndex];\r\n\t\t\t\tthis._directionLights.normalLightOrdering(sunLightIndex);\r\n\t\t\t\tfor (var i: number = 0; i < dirCount; i++ , curCount++) {\r\n\t\t\t\t\tvar dirLight: DirectionLight = dirElements[i];\r\n\t\t\t\t\tvar dir: Vector3 = dirLight._direction;\r\n\t\t\t\t\tvar intCor: Vector3 = dirLight._intensityColor;\r\n\t\t\t\t\tvar off: number = floatWidth * curCount;\r\n\t\t\t\t\tVector3.scale(dirLight.color, dirLight._intensity, intCor);\r\n\t\t\t\t\tdirLight.transform.worldMatrix.getForward(dir);\r\n\t\t\t\t\tVector3.normalize(dir, dir);//矩阵有缩放时需要归一化\r\n\t\t\t\t\tligPix[off] = intCor.x;\r\n\t\t\t\t\tligPix[off + 1] = intCor.y;\r\n\t\t\t\t\tligPix[off + 2] = intCor.z;\r\n\t\t\t\t\tligPix[off + 4] = dir.x;\r\n\t\t\t\t\tligPix[off + 5] = dir.y;\r\n\t\t\t\t\tligPix[off + 6] = dir.z;\r\n\t\t\t\t\tif (i == 0) {\r\n\t\t\t\t\t\tshaderValues.setVector3(Scene3D.SUNLIGHTDIRCOLOR, intCor);\r\n\t\t\t\t\t\tshaderValues.setVector3(Scene3D.SUNLIGHTDIRECTION, dir);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tshaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\r\n\t\t\t}\r\n\r\n\t\t\tvar poiCount: number = this._pointLights._length;\r\n\t\t\tif (poiCount > 0) {\r\n\t\t\t\tvar poiElements: PointLight[] = this._pointLights._elements;\r\n\t\t\t\tvar mainPointLightIndex:number = this._pointLights.getBrightestLight();\r\n\t\t\t\tthis._mainPointLight = poiElements[mainPointLightIndex];\r\n\t\t\t\tthis._pointLights.normalLightOrdering(mainPointLightIndex);\r\n\t\t\t\tfor (var i: number = 0; i < poiCount; i++ , curCount++) {\r\n\t\t\t\t\tvar poiLight: PointLight = poiElements[i];\r\n\t\t\t\t\tvar pos: Vector3 = poiLight.transform.position;\r\n\t\t\t\t\tvar intCor: Vector3 = poiLight._intensityColor;\r\n\t\t\t\t\tvar off: number = floatWidth * curCount;\r\n\t\t\t\t\tVector3.scale(poiLight.color, poiLight._intensity, intCor);\r\n\t\t\t\t\tligPix[off] = intCor.x;\r\n\t\t\t\t\tligPix[off + 1] = intCor.y;\r\n\t\t\t\t\tligPix[off + 2] = intCor.z;\r\n\t\t\t\t\tligPix[off + 3] = poiLight.range;\r\n\t\t\t\t\tligPix[off + 4] = pos.x;\r\n\t\t\t\t\tligPix[off + 5] = pos.y;\r\n\t\t\t\t\tligPix[off + 6] = pos.z;\r\n\t\t\t\t}\r\n\t\t\t\tshaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\r\n\t\t\t}\r\n\r\n\t\t\tvar spoCount: number = this._spotLights._length;\r\n\t\t\tif (spoCount > 0) {\r\n\t\t\t\tvar spoElements: SpotLight[] = this._spotLights._elements;\r\n\t\t\t\tvar mainSpotLightIndex:number = this._spotLights.getBrightestLight();\r\n\t\t\t\tthis._mainSpotLight = spoElements[mainSpotLightIndex];\r\n\t\t\t\tthis._spotLights.normalLightOrdering(mainSpotLightIndex)\r\n\t\t\t\tfor (var i: number = 0; i < spoCount; i++ , curCount++) {\r\n\t\t\t\t\tvar spoLight: SpotLight = spoElements[i];\r\n\t\t\t\t\tvar dir: Vector3 = spoLight._direction;\r\n\t\t\t\t\tvar pos: Vector3 = spoLight.transform.position;\r\n\t\t\t\t\tvar intCor: Vector3 = spoLight._intensityColor;\r\n\t\t\t\t\tvar off: number = floatWidth * curCount;\r\n\t\t\t\t\tVector3.scale(spoLight.color, spoLight._intensity, intCor);\r\n\t\t\t\t\tspoLight.transform.worldMatrix.getForward(dir);\r\n\t\t\t\t\tVector3.normalize(dir, dir);\r\n\t\t\t\t\tligPix[off] = intCor.x;\r\n\t\t\t\t\tligPix[off + 1] = intCor.y;\r\n\t\t\t\t\tligPix[off + 2] = intCor.z;\r\n\t\t\t\t\tligPix[off + 3] = spoLight.range;\r\n\t\t\t\t\tligPix[off + 4] = pos.x;\r\n\t\t\t\t\tligPix[off + 5] = pos.y;\r\n\t\t\t\t\tligPix[off + 6] = pos.z;\r\n\t\t\t\t\tligPix[off + 7] = spoLight.spotAngle * Math.PI / 180;\r\n\t\t\t\t\tligPix[off + 8] = dir.x;\r\n\t\t\t\t\tligPix[off + 9] = dir.y;\r\n\t\t\t\t\tligPix[off + 10] = dir.z;\r\n\t\t\t\t}\r\n\t\t\t\tshaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\r\n\t\t\t}\r\n\r\n\t\t\t(curCount > 0) && (ligTex.setSubPixels(0, 0, pixelWidth, curCount, ligPix, 0));\r\n\t\t\tshaderValues.setTexture(Scene3D.LIGHTBUFFER, ligTex);\r\n\t\t\tshaderValues.setInt(Scene3D.DIRECTIONLIGHTCOUNT, this._directionLights._length);\r\n\t\t\tshaderValues.setTexture(Scene3D.CLUSTERBUFFER, Cluster.instance._clusterTexture);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._directionLights._length > 0) {\r\n\t\t\t\tvar dirLight: DirectionLight = this._directionLights._elements[0];\r\n\t\t\t\tthis._mainDirectionLight = dirLight;\r\n\t\t\t\tVector3.scale(dirLight.color, dirLight._intensity, dirLight._intensityColor);\r\n\r\n\t\t\t\tdirLight.transform.worldMatrix.getForward(dirLight._direction);\r\n\t\t\t\tVector3.normalize(dirLight._direction, dirLight._direction);\r\n\t\t\t\tshaderValues.setVector3(Scene3D.LIGHTDIRCOLOR, dirLight._intensityColor);\r\n\t\t\t\tshaderValues.setVector3(Scene3D.LIGHTDIRECTION, dirLight._direction);\r\n\t\t\t\tshaderValues.setVector3(Scene3D.SUNLIGHTDIRCOLOR, dirLight._intensityColor);\r\n\t\t\t\tshaderValues.setVector3(Scene3D.SUNLIGHTDIRECTION, dirLight._direction);\r\n\t\t\t\tshaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\r\n\t\t\t}\r\n\t\t\tif (this._pointLights._length > 0) {\r\n\t\t\t\tvar poiLight: PointLight = this._pointLights._elements[0];\r\n\t\t\t\tVector3.scale(poiLight.color, poiLight._intensity, poiLight._intensityColor);\r\n\t\t\t\tshaderValues.setVector3(Scene3D.POINTLIGHTCOLOR, poiLight._intensityColor);\r\n\t\t\t\tshaderValues.setVector3(Scene3D.POINTLIGHTPOS, poiLight.transform.position);\r\n\t\t\t\tshaderValues.setNumber(Scene3D.POINTLIGHTRANGE, poiLight.range);\r\n\t\t\t\tshaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\r\n\t\t\t}\r\n\t\t\tif (this._spotLights._length > 0) {\r\n\t\t\t\tvar spotLight: SpotLight = this._spotLights._elements[0];\r\n\t\t\t\tVector3.scale(spotLight.color, spotLight._intensity, spotLight._intensityColor);\r\n\t\t\t\tshaderValues.setVector3(Scene3D.SPOTLIGHTCOLOR, spotLight._intensityColor);\r\n\t\t\t\tshaderValues.setVector3(Scene3D.SPOTLIGHTPOS, spotLight.transform.position);\r\n\t\t\t\tspotLight.transform.worldMatrix.getForward(spotLight._direction);\r\n\t\t\t\tVector3.normalize(spotLight._direction, spotLight._direction);\r\n\t\t\t\tshaderValues.setVector3(Scene3D.SPOTLIGHTDIRECTION, spotLight._direction);\r\n\t\t\t\tshaderValues.setNumber(Scene3D.SPOTLIGHTRANGE, spotLight.range);\r\n\t\t\t\tshaderValues.setNumber(Scene3D.SPOTLIGHTSPOTANGLE, spotLight.spotAngle * Math.PI / 180);\r\n\t\t\t\tshaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tshaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addScript(script: Script3D): void {\r\n\t\tvar scripts: Script3D[] = this._scriptPool;\r\n\t\tscript._indexInPool = scripts.length;\r\n\t\tscripts.push(script);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removeScript(script: Script3D): void {\r\n\t\tthis._scriptPool[script._indexInPool] = null;\r\n\t\tscript._indexInPool = -1;\r\n\t\tthis._needClearScriptPool = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_preRenderScript(): void {\r\n\t\tvar scripts: Script3D[] = this._scriptPool;\r\n\t\tfor (var i: number = 0, n: number = scripts.length; i < n; i++) {\r\n\t\t\tvar script: Script3D = scripts[i];\r\n\t\t\t(script && script.enabled) && (script.onPreRender());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_postRenderScript(): void {\r\n\t\tvar scripts: Script3D[] = this._scriptPool;\r\n\t\tfor (var i: number = 0, n: number = scripts.length; i < n; i++) {\r\n\t\t\tvar script: Script3D = scripts[i];\r\n\t\t\t(script && script.enabled) && (script.onPostRender());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addCamera(camera: BaseCamera): void {\r\n\t\tvar index: number = this._binarySearchIndexInCameraPool(camera);\r\n\t\tvar order: number = camera._renderingOrder;\r\n\t\tvar count: number = this._cameraPool.length;\r\n\t\twhile (index < count && this._cameraPool[index]._renderingOrder <= order)\r\n\t\t\tindex++;\r\n\t\tthis._cameraPool.splice(index, 0, camera);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removeCamera(camera: BaseCamera): void {\r\n\t\tthis._cameraPool.splice(this._cameraPool.indexOf(camera), 1);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_preCulling(context: RenderContext3D, camera: Camera, shader: Shader3D, replacementTag: string): void {\r\n\t\tvar cameraCullInfo: CameraCullInfo = FrustumCulling._cameraCullInfo;\r\n\t\tcameraCullInfo.position = camera._transform.position;\r\n\t\tcameraCullInfo.cullingMask = camera.cullingMask;\r\n\t\tcameraCullInfo.boundFrustum = camera.boundFrustum;\r\n\t\tcameraCullInfo.useOcclusionCulling = camera.useOcclusionCulling;\r\n\t\tFrustumCulling.renderObjectCulling(cameraCullInfo, this, context, shader, replacementTag, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_clear(gl: WebGLRenderingContext, state: RenderContext3D): void {\r\n\t\tvar viewport: Viewport = state.viewport;\r\n\t\tvar camera: Camera = <Camera>state.camera;\r\n\t\tvar renderTex: RenderTexture = camera._getRenderTexture();\r\n\t\tvar vpX: number, vpY: number;\r\n\t\tvar vpW: number = viewport.width;\r\n\t\tvar vpH: number = viewport.height;\r\n\t\tif (camera._needInternalRenderTexture()) {\r\n\t\t\tvpX = 0;\r\n\t\t\tvpY = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvpX = viewport.x;\r\n\t\t\tvpY = camera._getCanvasHeight() - viewport.y - vpH;\r\n\t\t}\r\n\t\tgl.viewport(vpX, vpY, vpW, vpH);\r\n\r\n\t\tvar flag: number;\r\n\t\tvar clearFlag: number = camera.clearFlag;\r\n\t\tif (clearFlag === CameraClearFlags.Sky && !(camera.skyRenderer._isAvailable() || this._skyRenderer._isAvailable()))\r\n\t\t\tclearFlag = CameraClearFlags.SolidColor;\r\n\r\n\t\tswitch (clearFlag) {\r\n\t\t\tcase CameraClearFlags.SolidColor:\r\n\t\t\t\tvar clearColor: Vector4 = camera.clearColor;\r\n\t\t\t\tgl.enable(gl.SCISSOR_TEST);\r\n\t\t\t\tgl.scissor(vpX, vpY, vpW, vpH);\r\n\t\t\t\tif (clearColor)\r\n\t\t\t\t\tgl.clearColor(clearColor.x, clearColor.y, clearColor.z, clearColor.w);\r\n\t\t\t\telse\r\n\t\t\t\t\tgl.clearColor(0, 0, 0, 0);\r\n\t\t\t\tif (renderTex) {\r\n\t\t\t\t\tflag = gl.COLOR_BUFFER_BIT;\r\n\t\t\t\t\tswitch (renderTex.depthStencilFormat) {\r\n\t\t\t\t\t\tcase RenderTextureDepthFormat.DEPTH_16:\r\n\t\t\t\t\t\t\tflag |= gl.DEPTH_BUFFER_BIT;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase RenderTextureDepthFormat.STENCIL_8:\r\n\t\t\t\t\t\t\tflag |= gl.STENCIL_BUFFER_BIT;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase RenderTextureDepthFormat.DEPTHSTENCIL_24_8:\r\n\t\t\t\t\t\t\tflag |= gl.DEPTH_BUFFER_BIT;\r\n\t\t\t\t\t\t\tflag |= gl.STENCIL_BUFFER_BIT;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tflag = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\r\n\t\t\t\t}\r\n\t\t\t\tWebGLContext.setDepthMask(gl, true);\r\n\t\t\t\tgl.clear(flag);\r\n\t\t\t\tgl.disable(gl.SCISSOR_TEST);\r\n\t\t\t\tbreak;\r\n\t\t\tcase CameraClearFlags.Sky:\r\n\t\t\tcase CameraClearFlags.DepthOnly:\r\n\t\t\t\tgl.enable(gl.SCISSOR_TEST);\r\n\t\t\t\tgl.scissor(vpX, vpY, vpW, vpH);\r\n\t\t\t\tif (renderTex) {\r\n\t\t\t\t\tswitch (renderTex.depthStencilFormat) {\r\n\t\t\t\t\t\tcase RenderTextureDepthFormat.DEPTH_16:\r\n\t\t\t\t\t\t\tflag = gl.DEPTH_BUFFER_BIT;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase RenderTextureDepthFormat.STENCIL_8:\r\n\t\t\t\t\t\t\tflag = gl.STENCIL_BUFFER_BIT;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase RenderTextureDepthFormat.DEPTHSTENCIL_24_8:\r\n\t\t\t\t\t\t\tflag = gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tflag = gl.DEPTH_BUFFER_BIT;\r\n\t\t\t\t}\r\n\t\t\t\tWebGLContext.setDepthMask(gl, true);\r\n\t\t\t\tgl.clear(flag);\r\n\t\t\t\tgl.disable(gl.SCISSOR_TEST);\r\n\t\t\t\tbreak;\r\n\t\t\tcase CameraClearFlags.Nothing:\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Scene3D:camera clearFlag invalid.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_renderScene(context: RenderContext3D): void {\r\n\t\tvar camera: Camera = <Camera>context.camera;\r\n\r\n\t\tthis._opaqueQueue._render(context);//非透明队列\r\n\t\tif (camera.clearFlag === CameraClearFlags.Sky) {\r\n\t\t\tif (camera.skyRenderer._isAvailable())\r\n\t\t\t\tcamera.skyRenderer._render(context);\r\n\t\t\telse if (this._skyRenderer._isAvailable())\r\n\t\t\t\tthis._skyRenderer._render(context);\r\n\t\t}\r\n\t\tthis._transparentQueue._render(context);//透明队列\r\n\r\n\t\tif (FrustumCulling.debugFrustumCulling) {\r\n\t\t\tvar renderElements: RenderElement[] = this._debugTool._render._renderElements;\r\n\t\t\tfor (var i: number = 0, n: number = renderElements.length; i < n; i++) {\r\n\t\t\t\trenderElements[i]._update(this, context, null, null);\r\n\t\t\t\trenderElements[i]._render(context);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tvar lightMapsData: any[] = data.lightmaps;\r\n\t\tif (lightMapsData) {\r\n\t\t\tvar lightMapCount: number = lightMapsData.length;\r\n\t\t\tvar lightmaps: Lightmap[] = new Array(lightMapCount);\r\n\t\t\tfor (var i: number = 0; i < lightMapCount; i++) {\r\n\t\t\t\tvar lightMap: Lightmap = new Lightmap();\r\n\t\t\t\tvar lightMapData: any = lightMapsData[i];\r\n\t\t\t\tif (lightMapData.path) {//兼容\r\n\t\t\t\t\tlightMap.lightmapColor = Loader.getRes(lightMapData.path);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlightMap.lightmapColor = Loader.getRes(lightMapData.color.path);\r\n\t\t\t\t\tif (lightMapData.direction)\r\n\t\t\t\t\t\tlightMap.lightmapDirection = Loader.getRes(lightMapData.direction.path);\r\n\t\t\t\t}\r\n\t\t\t\tlightmaps[i] = lightMap;\r\n\t\t\t}\r\n\t\t\tthis.lightmaps = lightmaps;\r\n\t\t}\r\n\r\n\t\tvar ambientColorData: any[] = data.ambientColor;\r\n\t\tif (ambientColorData) {\r\n\t\t\tvar ambCol: Vector3 = this.ambientColor;\r\n\t\t\tambCol.fromArray(ambientColorData);\r\n\t\t\tthis.ambientColor = ambCol;\r\n\t\t}\r\n\r\n\t\tvar skyData: any = data.sky;\r\n\t\tif (skyData) {\r\n\t\t\tthis._skyRenderer.material = Loader.getRes(skyData.material.path);\r\n\t\t\tswitch (skyData.mesh) {\r\n\t\t\t\tcase \"SkyBox\":\r\n\t\t\t\t\tthis._skyRenderer.mesh = SkyBox.instance;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"SkyDome\":\r\n\t\t\t\t\tthis._skyRenderer.mesh = SkyDome.instance;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.skyRenderer.mesh = SkyBox.instance;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.enableFog = data.enableFog;\r\n\t\tthis.fogStart = data.fogStart;\r\n\t\tthis.fogRange = data.fogRange;\r\n\t\tvar fogColorData: any[] = data.fogColor;\r\n\t\tif (fogColorData) {\r\n\t\t\tvar fogCol: Vector3 = this.fogColor;\r\n\t\t\tfogCol.fromArray(fogColorData);\r\n\t\t\tthis.fogColor = fogCol;\r\n\t\t}\r\n\r\n\t\tvar ambientSphericalHarmonicsData: Array<number> = data.ambientSphericalHarmonics;\r\n\t\tif (ambientSphericalHarmonicsData) {\r\n\t\t\tvar ambientSH: SphericalHarmonicsL2 = this.ambientSphericalHarmonics;\r\n\t\t\tfor (var i: number = 0; i < 3; i++) {\r\n\t\t\t\tvar off: number = i * 9;\r\n\t\t\t\tambientSH.setCoefficients(i, ambientSphericalHarmonicsData[off], ambientSphericalHarmonicsData[off + 1], ambientSphericalHarmonicsData[off + 2], ambientSphericalHarmonicsData[off + 3], ambientSphericalHarmonicsData[off + 4], ambientSphericalHarmonicsData[off + 5], ambientSphericalHarmonicsData[off + 6], ambientSphericalHarmonicsData[off + 7], ambientSphericalHarmonicsData[off + 8]);\r\n\t\t\t}\r\n\t\t\tthis.ambientSphericalHarmonics = ambientSH;\r\n\t\t}\r\n\t\tvar reflectionData: string = data.reflection;\r\n\t\t(reflectionData != undefined) && (this.reflection = Loader.getRes(reflectionData));\r\n\r\n\t\tvar reflectionDecodingFormatData: number = data.reflectionDecodingFormat;\r\n\t\t(reflectionDecodingFormatData != undefined) && (this.reflectionDecodingFormat = reflectionDecodingFormatData);\r\n\r\n\t\tvar ambientModeData: AmbientMode = data.ambientMode;\r\n\t\t(ambientModeData != undefined) && (this.ambientMode = ambientModeData);\r\n\r\n\t\tvar ambientSphericalHarmonicsIntensityData: number = data.ambientSphericalHarmonicsIntensity;\r\n\t\t(ambientSphericalHarmonicsIntensityData != undefined) && (this.ambientSphericalHarmonicsIntensity = ambientSphericalHarmonicsIntensityData);\r\n\t\tvar reflectionIntensityData: number = data.reflectionIntensity;\r\n\t\t(reflectionIntensityData != undefined) && (this.reflectionIntensity = reflectionIntensityData);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addRenderObject(render: BaseRender): void {\r\n\t\tif (this._octree && render._supportOctree) {\r\n\t\t\tthis._octree.add(render);\r\n\t\t} else {\r\n\t\t\tthis._renders.add(render);\r\n\t\t\tif (Render.supportWebGLPlusCulling) {//[NATIVE]\r\n\t\t\t\tvar indexInList: number = render._getIndexInList();\r\n\t\t\t\tvar length: number = this._cullingBufferIndices.length;\r\n\t\t\t\tif (indexInList >= length) {\r\n\t\t\t\t\tvar tempIndices: Int32Array = this._cullingBufferIndices;\r\n\t\t\t\t\tvar tempResult: Int32Array = this._cullingBufferResult;\r\n\t\t\t\t\tthis._cullingBufferIndices = new Int32Array(length + 1024);\r\n\t\t\t\t\tthis._cullingBufferResult = new Int32Array(length + 1024);\r\n\t\t\t\t\tthis._cullingBufferIndices.set(tempIndices, 0);\r\n\t\t\t\t\tthis._cullingBufferResult.set(tempResult, 0);\r\n\t\t\t\t}\r\n\t\t\t\tthis._cullingBufferIndices[indexInList] = render._cullingBufferIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\trender._addReflectionProbeUpdate();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removeRenderObject(render: BaseRender): void {\r\n\t\tif (this._octree && render._supportOctree) {\r\n\t\t\tthis._octree.remove(render);\r\n\t\t} else {\r\n\t\t\tvar endRender: BaseRender;\r\n\t\t\tif (Render.supportWebGLPlusCulling) {//[NATIVE]\r\n\t\t\t\tendRender = (<BaseRender>this._renders.elements[this._renders.length - 1]);\r\n\t\t\t}\r\n\t\t\tthis._renders.remove(render);\r\n\t\t\tif (Render.supportWebGLPlusCulling) {//[NATIVE]\r\n\t\t\t\tthis._cullingBufferIndices[endRender._getIndexInList()] = endRender._cullingBufferIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getRenderQueue(index: number): RenderQueue {\r\n\t\tif (index <= 2500)//2500作为队列临界点\r\n\t\t\treturn this._opaqueQueue;\r\n\t\telse\r\n\t\t\treturn this._transparentQueue;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_clearRenderQueue():void\r\n\t{\r\n\t\tthis._opaqueQueue.clear();\r\n\t\tthis._transparentQueue.clear();\r\n\t\tvar staticBatchManagers: StaticBatchManager[] = StaticBatchManager._managers;\r\n\t\tfor (var i: number = 0, n: number = staticBatchManagers.length; i < n; i++)\r\n\t\t\tstaticBatchManagers[i]._clear();\r\n\t\tvar dynamicBatchManagers: DynamicBatchManager[] = DynamicBatchManager._managers;\r\n\t\tfor (var i: number = 0, n: number = dynamicBatchManagers.length; i < n; i++)\r\n\t\t\tdynamicBatchManagers[i]._clear();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(destroyChild: boolean = true): void {\r\n\t\tif (this.destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy(destroyChild);\r\n\t\tthis._skyRenderer.destroy();\r\n\t\tthis._skyRenderer = null;\r\n\t\tthis._directionLights = null;\r\n\t\tthis._pointLights = null;\r\n\t\tthis._spotLights = null;\r\n\t\tthis._alternateLights = null;\r\n\t\tthis._shaderValues = null;\r\n\t\tthis._renders = null;\r\n\t\tthis._cameraPool = null;\r\n\t\tthis._octree = null;\r\n\t\tthis._physicsSimulation && this._physicsSimulation._destroy();\r\n\t\tthis._reflection._removeReference();\r\n\t\tthis._reflection = null;\r\n\t\tvar maps: Lightmap[] = this._lightmaps;\r\n\t\tif (maps) {\r\n\t\t\tfor (var i: number = 0, n: number = maps.length; i < n; i++) {\r\n\t\t\t\tvar map: Lightmap = maps[i];\r\n\t\t\t\tmap.lightmapColor&&map.lightmapColor._removeReference();\r\n\t\t\t\tmap.lightmapDirection&&map.lightmapDirection._removeReference();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._lightmaps = null;\r\n\t\tthis._reflectionProbeManager.destroy();\r\n\t\tLoader.clearRes(this.url);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\trender(ctx: Context, x: number, y: number): void {\r\n\t\t//TODO:外层应该设计为接口调用\r\n\t\tctx._curSubmit = SubmitBase.RENDERBASE;//打断2D合并的renderKey\r\n\t\tthis._children.length > 0 && ctx.addRenderObject(this);\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\trenderSubmit(): number {\r\n\t\tvar gl: any = LayaGL.instance;\r\n\t\tthis._prepareSceneToRender();\r\n\t\tvar i: number, n: number, n1: number;\r\n\t\tfor (i = 0, n = this._cameraPool.length, n1 = n - 1; i < n; i++) {\r\n\t\t\tif (Render.supportWebGLPlusRendering)\r\n\t\t\t\tShaderData.setRuntimeValueMode((i == n1) ? true : false);\r\n\t\t\tvar camera: Camera = (<Camera>this._cameraPool[i]);\r\n\t\t\tcamera.enableRender && camera.render();\r\n\t\t}\r\n\t\tContext.set2DRenderConfig();//还原2D配置\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tgetRenderType(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\treleaseRender(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\treUse(context: Context, pos: number): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\r\n\t//--------------------------------------------------------deprecated------------------------------------------------------------------------\r\n\t/**\r\n\t * @deprecated\r\n\t */\r\n\tget customReflection(): TextureCube {\r\n\t\treturn this._reflection;\r\n\t}\r\n\r\n\tset customReflection(value: TextureCube) {\r\n\t\tif (this._reflection != value) {\r\n\t\t\tvalue._addReference();\r\n\t\t\tthis._reflectionProbeManager.sceneReflectionProbe = value;\r\n\t\t\tthis._reflection = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _reflectionMode: number = 0;\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t */\r\n\tget reflectionMode(): number {\r\n\t\treturn this._reflectionMode;\r\n\t}\r\n\r\n\tset reflectionMode(value: number) {\r\n\t\tthis._reflectionMode = value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 设置光照贴图。\r\n\t * @param value 光照贴图。\r\n\t */\r\n\tsetlightmaps(value: Texture2D[]): void {\r\n\t\tvar maps: Lightmap[] = this._lightmaps;\r\n\t\tfor (var i: number = 0, n: number = maps.length; i < n; i++)\r\n\t\t\tmaps[i].lightmapColor._removeReference();\r\n\t\tif (value) {\r\n\t\t\tvar count: number = value.length;\r\n\t\t\tmaps.length = count;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tvar lightMap: Texture2D = value[i];\r\n\t\t\t\tlightMap._addReference();\r\n\t\t\t\t(maps[i]) || (maps[i] = new Lightmap());\r\n\t\t\t\tmaps[i].lightmapColor = lightMap;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Scene3D: value value can't be null.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 获取光照贴图浅拷贝列表。\r\n\t * @return 获取光照贴图浅拷贝列表。\r\n\t */\r\n\tgetlightmaps(): Texture2D[] {\r\n\t\tvar lightmapColors: Texture2D[] = new Array(this._lightmaps.length);\r\n\t\tfor (var i: number = 0; i < this._lightmaps.length; i++) {\r\n\t\t\tlightmapColors[i] = this._lightmaps[i].lightmapColor;\r\n\t\t}\r\n\t\treturn lightmapColors;//slice()防止修改数组内容\r\n\t}\r\n\r\n}\r\n\r\n","import { Config3D } from \"../../../Config3D\";\r\nimport { SystemUtils } from \"../../webgl/SystemUtils\";\r\nimport { InlcudeFile } from \"../../webgl/utils/InlcudeFile\";\r\nimport { ShaderCompile } from \"../../webgl/utils/ShaderCompile\";\r\nimport { ShaderNode } from \"../../webgl/utils/ShaderNode\";\r\nimport { WebGL } from \"../../webgl/WebGL\";\r\nimport { RenderState } from \"../core/material/RenderState\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { DefineDatas } from \"./DefineDatas\";\r\nimport { Shader3D } from \"./Shader3D\";\r\nimport { ShaderInstance } from \"./ShaderInstance\";\r\nimport { ShaderVariant } from \"./ShaderVariantCollection\";\r\nimport { SubShader } from \"./SubShader\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\n\r\n/**\r\n * <code>ShaderPass</code> 类用于实现ShaderPass。\r\n */\r\nexport class ShaderPass extends ShaderCompile {\r\n\t/** @internal */\r\n\tprivate static _defineString: Array<string> = [];\r\n\t/** @internal */\r\n\tprivate static _debugDefineString: string[] = [];\r\n\t/** @internal */\r\n\tprivate static _debugDefineMask: number[] = [];\r\n\r\n\t/** @internal */\r\n\tprivate _owner: SubShader;\r\n\t/** @internal */\r\n\t_stateMap: object;\r\n\t/** @internal */\r\n\tprivate _cacheSharders: object = {};\r\n\t/** @internal */\r\n\tprivate _cacheShaderHierarchy: number = 1;\r\n\t/** @internal */\r\n\tprivate _renderState: RenderState = new RenderState();\r\n\r\n\t/** @internal */\r\n\t_validDefine: DefineDatas = new DefineDatas();\r\n\t/** @internal */\r\n\t_tags: any = {};\r\n\t/** @internal */\r\n\t_pipelineMode: string;\r\n\r\n\t/**\r\n\t * 渲染状态。\r\n\t */\r\n\tget renderState(): RenderState {\r\n\t\treturn this._renderState;\r\n\t}\r\n\r\n\tconstructor(owner: SubShader, vs: string, ps: string, stateMap: object) {\r\n\t\tsuper(vs, ps, null);\r\n\t\tthis._owner = owner;\r\n\t\tthis._stateMap = stateMap;\r\n\t\tfor (var k in this.defs)\r\n\t\t\tthis._validDefine.add(Shader3D.getDefineByName(k));\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _compileToTree(parent: ShaderNode, lines: any[], start: number, includefiles: any[], defs: any): void {\r\n\t\tvar node: ShaderNode, preNode: ShaderNode;\r\n\t\tvar text: string, name: string, fname: string;\r\n\t\tvar ofs: number, words: any[], noUseNode: ShaderNode;\r\n\t\tvar i: number, n: number, j: number;\r\n\t\tfor (i = start; i < lines.length; i++) {\r\n\t\t\ttext = lines[i];\r\n\t\t\tif (text.length < 1) continue;\r\n\t\t\tofs = text.indexOf(\"//\");\r\n\t\t\tif (ofs === 0) continue;\r\n\t\t\tif (ofs >= 0) text = text.substr(0, ofs);\r\n\r\n\t\t\tnode = noUseNode || new ShaderNode(includefiles);\r\n\t\t\tnoUseNode = null;\r\n\t\t\tnode.text = text;\r\n\r\n\t\t\tif ((ofs = text.indexOf(\"#\")) >= 0) {\r\n\t\t\t\tname = \"#\";\r\n\t\t\t\tfor (j = ofs + 1, n = text.length; j < n; j++) {\r\n\t\t\t\t\tvar c: string = text.charAt(j);\r\n\t\t\t\t\tif (c === ' ' || c === '\\t' || c === '?') break;\r\n\t\t\t\t\tname += c;\r\n\t\t\t\t}\r\n\t\t\t\tnode.name = name;\r\n\t\t\t\tswitch (name) {\r\n\t\t\t\t\tcase \"#ifdef\":\r\n\t\t\t\t\tcase \"#ifndef\":\r\n\t\t\t\t\t\tnode.setParent(parent);\r\n\t\t\t\t\t\tparent = node;\r\n\t\t\t\t\t\tif (defs) {\r\n\t\t\t\t\t\t\twords = text.substr(j).split(ShaderCompile._splitToWordExps3);\r\n\t\t\t\t\t\t\tfor (j = 0; j < words.length; j++) {\r\n\t\t\t\t\t\t\t\ttext = words[j];\r\n\t\t\t\t\t\t\t\ttext.length && (defs[text] = true);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tcase \"#if\":\r\n\t\t\t\t\tcase \"#elif\":\r\n\t\t\t\t\t\tnode.setParent(parent);\r\n\t\t\t\t\t\tparent = node;\r\n\t\t\t\t\t\tif (defs) {\r\n\t\t\t\t\t\t\twords = text.substr(j).split(ShaderCompile._splitToWordExps3);\r\n\t\t\t\t\t\t\tfor (j = 0; j < words.length; j++) {\r\n\t\t\t\t\t\t\t\ttext = words[j];\r\n\t\t\t\t\t\t\t\ttext.length && text != \"defined\" && (defs[text] = true);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tcase \"#else\":\r\n\t\t\t\t\t\tparent = parent.parent;\r\n\t\t\t\t\t\tpreNode = parent.childs[parent.childs.length - 1];\r\n\t\t\t\t\t\tnode.setParent(parent);\r\n\t\t\t\t\t\tparent = node;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tcase \"#endif\":\r\n\t\t\t\t\t\tparent = parent.parent;\r\n\t\t\t\t\t\tpreNode = parent.childs[parent.childs.length - 1];\r\n\t\t\t\t\t\tnode.setParent(parent);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tcase \"#include\"://这里有问题,主要是空格\r\n\t\t\t\t\t\twords = ShaderCompile.splitToWords(text, null);\r\n\t\t\t\t\t\tvar inlcudeFile: InlcudeFile = ShaderCompile.includes[words[1]];\r\n\t\t\t\t\t\tif (!inlcudeFile) {\r\n\t\t\t\t\t\t\tthrow \"ShaderCompile error no this include file:\" + words[1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ((ofs = words[0].indexOf(\"?\")) < 0) {\r\n\t\t\t\t\t\t\tnode.setParent(parent);\r\n\t\t\t\t\t\t\ttext = inlcudeFile.getWith(words[2] == 'with' ? words[3] : null);\r\n\t\t\t\t\t\t\tthis._compileToTree(node, text.split('\\n'), 0, includefiles, defs);\r\n\t\t\t\t\t\t\tnode.text = \"\";\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnode.setCondition(words[0].substr(ofs + 1), ShaderCompile.IFDEF_YES);\r\n\t\t\t\t\t\tnode.text = inlcudeFile.getWith(words[2] == 'with' ? words[3] : null);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"#import\":\r\n\t\t\t\t\t\twords = ShaderCompile.splitToWords(text, null);\r\n\t\t\t\t\t\tfname = words[1];\r\n\t\t\t\t\t\tincludefiles.push({ node: node, file: ShaderCompile.includes[fname], ofs: node.text.length });\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tpreNode = parent.childs[parent.childs.length - 1];\r\n\t\t\t\tif (preNode && !preNode.name) {\r\n\t\t\t\t\tincludefiles.length > 0 && ShaderCompile.splitToWords(text, preNode);\r\n\t\t\t\t\tnoUseNode = node;\r\n\t\t\t\t\tpreNode.text += \"\\n\" + text;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tincludefiles.length > 0 && ShaderCompile.splitToWords(text, node);\r\n\t\t\t}\r\n\t\t\tnode.setParent(parent);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_resizeCacheShaderMap(cacheMap: object, hierarchy: number, resizeLength: number): void {\r\n\t\tvar end: number = this._cacheShaderHierarchy - 1;\r\n\t\tif (hierarchy == end) {\r\n\t\t\tfor (var k in cacheMap) {\r\n\t\t\t\tvar shader: ShaderInstance = cacheMap[k];\r\n\t\t\t\tfor (var i: number = 0, n: number = resizeLength - end; i < n; i++) {\r\n\t\t\t\t\tif (i == n - 1)\r\n\t\t\t\t\t\tcacheMap[0] = shader;//0替代(i == 0 ? k : 0),只扩不缩\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tcacheMap = cacheMap[i == 0 ? k : 0] = {};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._cacheShaderHierarchy = resizeLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor (var k in cacheMap)\r\n\t\t\t\tthis._resizeCacheShaderMap(cacheMap[k], ++hierarchy, resizeLength);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addDebugShaderVariantCollection(compileDefine: DefineDatas, outDebugDefines: string[], outDebugDefineMask: number[]): void {\r\n\t\tvar dbugShaderVariantInfo: ShaderVariant = Shader3D._debugShaderVariantInfo;\r\n\t\tvar debugSubShader: SubShader = this._owner;\r\n\t\tvar debugShader: Shader3D = debugSubShader._owner;\r\n\t\tvar mask: number[] = compileDefine._mask;\r\n\t\tShader3D._getNamesByDefineData(compileDefine, outDebugDefines);\r\n\t\toutDebugDefineMask.length = mask.length;\r\n\t\tfor (var i: number = 0, n: number = mask.length; i < n; i++)\r\n\t\t\toutDebugDefineMask[i] = mask[i];\r\n\r\n\t\tif (dbugShaderVariantInfo)\r\n\t\t\tdbugShaderVariantInfo.setValue(debugShader, debugShader._subShaders.indexOf(debugSubShader), debugSubShader._passes.indexOf(this), outDebugDefines);\r\n\t\telse\r\n\t\t\tShader3D._debugShaderVariantInfo = dbugShaderVariantInfo = new ShaderVariant(debugShader, debugShader._subShaders.indexOf(debugSubShader), debugSubShader._passes.indexOf(this), outDebugDefines);\r\n\t\tShader3D.debugShaderVariantCollection.add(dbugShaderVariantInfo);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\twithCompile(compileDefine: DefineDatas): ShaderInstance {\r\n\t\tvar debugDefineString: string[] = ShaderPass._debugDefineString;\r\n\t\tvar debugDefineMask: number[] = ShaderPass._debugDefineMask;\r\n\t\tvar debugMaskLength: number;\r\n\t\tcompileDefine._intersectionDefineDatas(this._validDefine);\r\n\t\tif (Shader3D.debugMode) {//add shader variant info to debug ShaderVariantCollection\r\n\t\t\tdebugMaskLength = compileDefine._length;\r\n\t\t\tthis._addDebugShaderVariantCollection(compileDefine, debugDefineString, debugDefineMask);\r\n\t\t}\r\n\t\tcompileDefine.addDefineDatas(Scene3D._configDefineValues);\r\n\r\n\t\tvar cacheShaders: object = this._cacheSharders;\r\n\t\tvar maskLength: number = compileDefine._length;\r\n\t\tif (maskLength > this._cacheShaderHierarchy) {//扩充已缓存ShaderMap\r\n\t\t\tthis._resizeCacheShaderMap(cacheShaders, 0, maskLength);\r\n\t\t\tthis._cacheShaderHierarchy = maskLength;\r\n\t\t}\r\n\r\n\t\tvar mask: Array<number> = compileDefine._mask;\r\n\t\tvar endIndex: number = compileDefine._length - 1;\r\n\t\tvar maxEndIndex: number = this._cacheShaderHierarchy - 1;\r\n\t\tfor (var i: number = 0; i < maxEndIndex; i++) {\r\n\t\t\tvar subMask: number = endIndex < i ? 0 : mask[i];\r\n\t\t\tvar subCacheShaders: object = cacheShaders[subMask];\r\n\t\t\t(subCacheShaders) || (cacheShaders[subMask] = subCacheShaders = {});\r\n\t\t\tcacheShaders = subCacheShaders;\r\n\t\t}\r\n\r\n\t\tvar cacheKey: number = endIndex < maxEndIndex ? 0 : mask[maxEndIndex];\r\n\t\tvar shader: ShaderInstance = cacheShaders[cacheKey];\r\n\t\tif (shader)\r\n\t\t\treturn shader;\r\n\r\n\t\tvar defineString: string[] = ShaderPass._defineString;\r\n\t\tShader3D._getNamesByDefineData(compileDefine, defineString);\r\n\r\n\t\tvar config: Config3D = Config3D._config;\r\n\t\tvar clusterSlices: Vector3 = config.lightClusterCount;\r\n\t\tvar defMap: any = {};\r\n\r\n\t\tvar vertexHead: string;\r\n\t\tvar fragmentHead: string;\r\n\t\tvar defineStr: string = \"\";\r\n\r\n\t\tif (WebGL._isWebGL2) {\r\n\t\t\tvertexHead =\r\n\t\t\t\t`#version 300 es\\n\r\n\t\t\t\t#define attribute in\r\n\t\t\t\t#define varying out\r\n\t\t\t\t#define texture2D texture\\n`;\r\n\t\t\tfragmentHead =\r\n\t\t\t\t`#version 300 es\\n\r\n\t\t\t\t#define varying in\r\n\t\t\t\tout highp vec4 pc_fragColor;\r\n\t\t\t\t#define gl_FragColor pc_fragColor\r\n\t\t\t\t#define gl_FragDepthEXT gl_FragDepth\r\n\t\t\t\t#define texture2D texture\r\n\t\t\t\t#define textureCube texture\r\n\t\t\t\t#define texture2DProj textureProj\r\n\t\t\t\t#define texture2DLodEXT textureLod\r\n\t\t\t\t#define texture2DProjLodEXT textureProjLod\r\n\t\t\t\t#define textureCubeLodEXT textureLod\r\n\t\t\t\t#define texture2DGradEXT textureGrad\r\n\t\t\t\t#define texture2DProjGradEXT textureProjGrad\r\n\t\t\t\t#define textureCubeGradEXT textureGrad\\n`;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvertexHead = \"\"\r\n\t\t\tfragmentHead =\r\n\t\t\t\t`#ifdef GL_EXT_shader_texture_lod\r\n\t\t\t\t\t#extension GL_EXT_shader_texture_lod : enable\r\n\t\t\t\t#endif\r\n\t\t\t\t#if !defined(GL_EXT_shader_texture_lod)\r\n\t\t\t\t\t#define texture1DLodEXT texture1D\r\n\t\t\t\t\t#define texture2DLodEXT texture2D\r\n\t\t\t\t\t#define texture2DProjLodEXT texture2DProj\r\n\t\t\t\t\t#define texture3DLodEXT texture3D\r\n\t\t\t\t\t#define textureCubeLodEXT textureCube\r\n\t\t\t\t#endif\\n`;\r\n\t\t}\r\n\r\n\r\n\t\tdefineStr += \"#define MAX_LIGHT_COUNT \" + config.maxLightCount + \"\\n\";\r\n\t\tdefineStr += \"#define MAX_LIGHT_COUNT_PER_CLUSTER \" + config._maxAreaLightCountPerClusterAverage + \"\\n\";\r\n\t\tdefineStr += \"#define CLUSTER_X_COUNT \" + clusterSlices.x + \"\\n\";\r\n\t\tdefineStr += \"#define CLUSTER_Y_COUNT \" + clusterSlices.y + \"\\n\";\r\n\t\tdefineStr += \"#define CLUSTER_Z_COUNT \" + clusterSlices.z + \"\\n\";\r\n\t\tdefineStr += \"#define SHADER_CAPAILITY_LEVEL \" + SystemUtils._shaderCapailityLevel + \"\\n\";\r\n\r\n\t\tfor (var i: number = 0, n: number = defineString.length; i < n; i++) {\r\n\t\t\tvar def: string = defineString[i];\r\n\t\t\tdefineStr += \"#define \" + def + \"\\n\";\r\n\t\t\tdefMap[def] = true;\r\n\t\t}\r\n\r\n\t\tvar vs: any[] = this._VS.toscript(defMap, []);\r\n\t\tvar vsVersion: string = '';\r\n\t\tif (vs[0].indexOf('#version') == 0) {\r\n\t\t\tvsVersion = vs[0] + '\\n';\r\n\t\t\tvs.shift();\r\n\t\t}\r\n\r\n\t\tvar ps: any[] = this._PS.toscript(defMap, []);\r\n\t\tvar psVersion: string = '';\r\n\t\tif (ps[0].indexOf('#version') == 0) {\r\n\t\t\tpsVersion = ps[0] + '\\n';\r\n\t\t\tps.shift();\r\n\t\t}\r\n\r\n\t\tvar attibuteMap = Shader3D.getAttributeMapByDefine(defineString,this._owner._attributeMap);\r\n\t\tshader = new ShaderInstance(vsVersion + vertexHead + defineStr + vs.join('\\n'), psVersion + fragmentHead + defineStr + ps.join('\\n'),attibuteMap , this._owner._uniformMap || this._owner._owner._uniformMap, this);\r\n\r\n\t\tcacheShaders[cacheKey] = shader;\r\n\r\n\t\tif (Shader3D.debugMode) {\r\n\t\t\tvar defStr: string = \"\";\r\n\t\t\tvar defMask: string = \"\";\r\n\r\n\t\t\tfor (var i: number = 0, n: number = debugMaskLength; i < n; i++)\r\n\t\t\t\t(i == n - 1) ? defMask += debugDefineMask[i] : defMask += debugDefineMask[i] + \",\";\r\n\t\t\tfor (var i: number = 0, n: number = debugDefineString.length; i < n; i++)\r\n\t\t\t\t(i == n - 1) ? defStr += debugDefineString[i] : defStr += debugDefineString[i] + \",\";\r\n\r\n\t\t\tconsole.log(\"%cLayaAir: Shader Compile Information---ShaderName:\" + this._owner._owner._name + \" SubShaderIndex:\" + this._owner._owner._subShaders.indexOf(this._owner) + \" PassIndex:\" + this._owner._passes.indexOf(this) + \" DefineMask:[\" + defMask + \"]\" + \" DefineNames:[\" + defStr + \"]\", \"color:green\");\r\n\t\t}\r\n\r\n\t\treturn shader;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加标记。\r\n\t * @param key 标记键。\r\n\t * @param value 标记值。\r\n\t */\r\n\tsetTag(key: string, value: string): void {\r\n\t\tif (value)\r\n\t\t\tthis._tags[key] = value;\r\n\t\telse\r\n\t\t\tdelete this._tags[key];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取标记值。\r\n\t * @return key 标记键。\r\n\t */\r\n\tgetTag(key: string): string {\r\n\t\treturn this._tags[key];\r\n\t}\r\n}\r\n\r\n\r\n","import { Shader3D } from \"./Shader3D\";\r\nimport { ShaderPass } from \"./ShaderPass\";\r\n\r\n/**\r\n * <code>SubShader</code> 类用于创建SubShader。\r\n */\r\nexport class SubShader {\r\n\t/**@internal */\r\n\t_attributeMap: any;\r\n\t/**@internal */\r\n\t_uniformMap: any;\r\n\r\n\t/**@internal */\r\n\t_owner: Shader3D;\r\n\t/**@internal */\r\n\t_flags: any = {};\r\n\t/**@internal */\r\n\t_passes: ShaderPass[] = [];\r\n\r\n\t/**\r\n\t * 创建一个 <code>SubShader</code> 实例。\r\n\t * @param\tattributeMap  顶点属性表。\r\n\t * @param\tuniformMap  uniform属性表。\r\n\t */\r\n\tconstructor(attributeMap: any, uniformMap: any) {\r\n\t\tthis._attributeMap = attributeMap;\r\n\t\tthis._uniformMap = uniformMap;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加标记。\r\n\t * @param key 标记键。\r\n\t * @param value 标记值。\r\n\t */\r\n\tsetFlag(key: string, value: string): void {\r\n\t\tif (value)\r\n\t\t\tthis._flags[key] = value;\r\n\t\telse\r\n\t\t\tdelete this._flags[key];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取标记值。\r\n\t * @return key 标记键。\r\n\t */\r\n\tgetFlag(key: string): string {\r\n\t\treturn this._flags[key];\r\n\t}\r\n\r\n\t/**\r\n\t * 添加着色器Pass\r\n\t * @param vs \r\n\t * @param ps \r\n\t * @param stateMap \r\n\t * @param pipelineMode 渲染管线模式。 \r\n\t */\r\n\taddShaderPass(vs: string, ps: string, stateMap: object = null, pipelineMode: string = \"Forward\"): ShaderPass {\r\n\t\tvar shaderPass: ShaderPass = new ShaderPass(this, vs, ps, stateMap);\r\n\t\tshaderPass._pipelineMode = pipelineMode;\r\n\t\tthis._passes.push(shaderPass);\r\n\t\treturn shaderPass;\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n","import { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport PBRPS from \"../../shader/files/PBRSpecular.fs\";\r\nimport PBRVS from \"../../shader/files/PBRSpecular.vs\";\r\nimport PBRShadowCasterPS from \"../../shader/files/PBRSpecularShadowCaster.fs\";\r\nimport PBRShadowCasterVS from \"../../shader/files/PBRSpecularShadowCaster.vs\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\nimport { SubShader } from \"../../shader/SubShader\";\r\nimport { PBRMaterial } from \"./PBRMaterial\";\r\nimport { VertexMesh } from \"../../graphics/Vertex/VertexMesh\";\r\n\r\n/**\r\n * 光滑度数据源。\r\n */\r\nexport enum PBRSpecularSmoothnessSource {\r\n\t/**金属度贴图的Alpha通道。*/\r\n\tSpecularTextureAlpha,\r\n\t/**反射率贴图的Alpha通道。*/\r\n\tAlbedoTextureAlpha\r\n}\r\n\r\n/**\r\n * <code>PBRSpecularMaterial</code> 类用于实现PBR(Specular)材质。\r\n */\r\nexport class PBRSpecularMaterial extends PBRMaterial {\r\n\t/** @internal */\r\n\tstatic SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA: ShaderDefine;\r\n\t/** @internal */\r\n\tstatic SHADERDEFINE_SPECULARGLOSSTEXTURE: ShaderDefine;\r\n\r\n\t/** @internal */\r\n\tstatic SPECULARTEXTURE: number = Shader3D.propertyNameToID(\"u_SpecGlossTexture\");\r\n\t/** @internal */\r\n\tstatic SPECULARCOLOR: number = Shader3D.propertyNameToID(\"u_SpecularColor\");\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: PBRSpecularMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tPBRSpecularMaterial.SHADERDEFINE_SPECULARGLOSSTEXTURE = Shader3D.getDefineByName(\"SPECULARGLOSSTEXTURE\");\r\n\t\tPBRSpecularMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = Shader3D.getDefineByName(\"SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\");\r\n\r\n\t\tvar attributeMap: any = {\r\n\t\t\t'a_Position': VertexMesh.MESH_POSITION0,\r\n\t\t\t'a_Normal': VertexMesh.MESH_NORMAL0,\r\n\t\t\t'a_Tangent0': VertexMesh.MESH_TANGENT0,\r\n\t\t\t'a_Texcoord0': VertexMesh.MESH_TEXTURECOORDINATE0,\r\n\t\t\t'a_Texcoord1': VertexMesh.MESH_TEXTURECOORDINATE1,\r\n\t\t\t'a_BoneWeights': VertexMesh.MESH_BLENDWEIGHT0,\r\n\t\t\t'a_BoneIndices': VertexMesh.MESH_BLENDINDICES0,\r\n\t\t\t'a_MvpMatrix': VertexMesh.MESH_MVPMATRIX_ROW0,\r\n\t\t\t'a_WorldMat': VertexMesh.MESH_WORLDMATRIX_ROW0\r\n\t\t};\r\n\t\tvar uniformMap: any = {\r\n\t\t\t'u_Bones': Shader3D.PERIOD_CUSTOM,\r\n\t\t\t'u_MvpMatrix': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_WorldMat': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_LightmapScaleOffset': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_LightMap': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_LightMapDirection': Shader3D.PERIOD_SPRITE,\r\n\t\t\t\r\n\t\t\t'u_SimpleAnimatorTexture':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SimpleAnimatorParams':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SimpleAnimatorTextureSize':Shader3D.PERIOD_SPRITE,\r\n\r\n\t\t\t'u_ReflectCubeHDRParams': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ReflectTexture': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SpecCubeProbePosition':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SpecCubeBoxMax':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SpecCubeBoxMin':Shader3D.PERIOD_SPRITE,\r\n\r\n\t\t\t'u_CameraPos': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_View': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_ProjectionParams': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_Viewport': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_ViewProjection': Shader3D.PERIOD_CAMERA,\r\n\r\n\t\t\t'u_AlphaTestValue': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_AlbedoColor': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_EmissionColor': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_AlbedoTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_NormalTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_ParallaxTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_OcclusionTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_EmissionTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_Smoothness': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_SmoothnessScale': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_occlusionStrength': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_NormalScale': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_ParallaxScale': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_TilingOffset': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_SpecGlossTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_SpecularColor': Shader3D.PERIOD_MATERIAL,\r\n\r\n\t\t\t'u_AmbientColor': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogStart': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogRange': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogColor': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_DirationLightCount': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_LightBuffer': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_LightClusterBuffer': Shader3D.PERIOD_SCENE,\r\n\r\n\t\t\t//Shadow\r\n\t\t\t'u_ShadowBias': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowLightDirection': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowMap': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowParams': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowSplitSpheres': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowMatrices': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowMapSize': Shader3D.PERIOD_SCENE,\r\n\t\t\t//SpotShadowMap\r\n\t\t\t'u_SpotShadowMap':Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotViewProjectMatrix':Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowLightPosition':Shader3D.PERIOD_SCENE,\r\n\r\n\t\t\t//PBRGI\r\n\t\t\t'u_AmbientSHAr': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHAg': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHAb': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHBr': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHBg': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHBb': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHC': Shader3D.PERIOD_SCENE,\r\n\r\n\r\n\t\t\t//legacy lighting\r\n\t\t\t'u_DirectionLight.direction': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_DirectionLight.color': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_PointLight.position': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_PointLight.range': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_PointLight.color': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.position': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.direction': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.range': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.spot': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.color': Shader3D.PERIOD_SCENE\r\n\t\t};\r\n\t\tvar stateMap = {\r\n\t\t\t's_Cull': Shader3D.RENDER_STATE_CULL,\r\n\t\t\t's_Blend': Shader3D.RENDER_STATE_BLEND,\r\n\t\t\t's_BlendSrc': Shader3D.RENDER_STATE_BLEND_SRC,\r\n\t\t\t's_BlendDst': Shader3D.RENDER_STATE_BLEND_DST,\r\n\t\t\t's_DepthTest': Shader3D.RENDER_STATE_DEPTH_TEST,\r\n\t\t\t's_DepthWrite': Shader3D.RENDER_STATE_DEPTH_WRITE\r\n\t\t}\r\n\t\tvar shader: Shader3D = Shader3D.add(\"PBRSpecular\",attributeMap,uniformMap,true,true);\r\n\t\tvar subShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tsubShader.addShaderPass(PBRVS, PBRPS, stateMap, \"Forward\");\r\n\t\tsubShader.addShaderPass(PBRShadowCasterVS, PBRShadowCasterPS, stateMap, \"ShadowCaster\");\r\n\t}\r\n\r\n\t/**\r\n\t * 高光贴图。\r\n\t */\r\n\tget specularTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(PBRSpecularMaterial.SPECULARTEXTURE);\r\n\t}\r\n\r\n\tset specularTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(PBRSpecularMaterial.SHADERDEFINE_SPECULARGLOSSTEXTURE);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(PBRSpecularMaterial.SHADERDEFINE_SPECULARGLOSSTEXTURE);\r\n\t\tthis._shaderValues.setTexture(PBRSpecularMaterial.SPECULARTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 高光颜色。\r\n\t */\r\n\tget specularColor(): Vector4 {\r\n\t\treturn <Vector4>this._shaderValues.getVector(PBRSpecularMaterial.SPECULARCOLOR);\r\n\t}\r\n\r\n\tset specularColor(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(PBRSpecularMaterial.SPECULARCOLOR, value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>PBRSpecularMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"PBRSpecular\");\r\n\t\tthis._shaderValues.setVector(PBRSpecularMaterial.SPECULARCOLOR, new Vector4(0.2, 0.2, 0.2, 1.0));\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: PBRSpecularMaterial = new PBRSpecularMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n\r\n","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n\tprecision highp int;\r\n#else\r\n\tprecision mediump float;\r\n\tprecision mediump int;\r\n#endif\r\n\r\n#include \"Lighting.glsl\";\r\n#include \"Shadow.glsl\"\r\n#include \"PBRFSInput.glsl\";\r\n#include \"LayaPBRBRDF.glsl\";\r\n#include \"GlobalIllumination.glsl\";\r\n#include \"PBRCore.glsl\";\r\n\r\nvoid main()\r\n{\r\n\tfragmentForward();\r\n}","#include \"Lighting.glsl\";\r\n#include \"Shadow.glsl\"\r\n#include \"PBRVSInput.glsl\";\r\n#include \"PBRVertex.glsl\";\r\n\r\nvoid main()\r\n{\r\n\tvertexForward();\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n\tprecision highp int;\r\n#else\r\n\tprecision mediump float;\r\n\tprecision mediump int;\r\n#endif\r\n\r\n#include \"ShadowCasterFS.glsl\"\r\n\r\nvoid main()\r\n{\r\n\tgl_FragColor=shadowCasterFragment();\r\n}","#include \"ShadowCasterVS.glsl\"\r\n\r\nvoid main()\r\n{\r\n\tvec4 positionCS =  shadowCasterVertex();\r\n\tgl_Position=remapGLPositionZ(positionCS);\r\n}","import { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { VertexMesh } from \"../../graphics/Vertex/VertexMesh\";\r\nimport PBRPS from \"../../shader/files/PBR.fs\";\r\nimport PBRVS from \"../../shader/files/PBR.vs\";\r\nimport PBRShadowCasterPS from \"../../shader/files/PBRShadowCaster.fs\";\r\nimport PBRShadowCasterVS from \"../../shader/files/PBRShadowCaster.vs\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\nimport { SubShader } from \"../../shader/SubShader\";\r\nimport { PBRMaterial } from \"./PBRMaterial\";\r\n\r\n/**\r\n * 金属度PBR材质光滑度数据源。\r\n */\r\nexport enum PBRMetallicSmoothnessSource {\r\n\t/**金属度贴图的Alpha通道。*/\r\n\tMetallicGlossTextureAlpha,\r\n\t/**反射率贴图的Alpha通道。*/\r\n\tAlbedoTextureAlpha\r\n}\r\n\r\n/**\r\n * <code>PBRStandardMaterial</code> 类用于实现PBR材质。\r\n */\r\nexport class PBRStandardMaterial extends PBRMaterial {\r\n\t/** @internal */\r\n\tstatic SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA: ShaderDefine;\r\n\t/** @internal */\r\n\tstatic SHADERDEFINE_METALLICGLOSSTEXTURE: ShaderDefine;\r\n\r\n\t/** @internal */\r\n\tstatic METALLICGLOSSTEXTURE: number = Shader3D.propertyNameToID(\"u_MetallicGlossTexture\");\r\n\t/** @internal */\r\n\tstatic METALLIC: number = Shader3D.propertyNameToID(\"u_Metallic\");\r\n\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: PBRStandardMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tPBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE = Shader3D.getDefineByName(\"METALLICGLOSSTEXTURE\");\r\n\t\tPBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = Shader3D.getDefineByName(\"SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\");\r\n\r\n\t\tvar attributeMap: any = {\r\n\t\t\t'a_Position': VertexMesh.MESH_POSITION0,\r\n\t\t\t'a_Normal': VertexMesh.MESH_NORMAL0,\r\n\t\t\t'a_Tangent0': VertexMesh.MESH_TANGENT0,\r\n\t\t\t'a_Texcoord0': VertexMesh.MESH_TEXTURECOORDINATE0,\r\n\t\t\t'a_Texcoord1': VertexMesh.MESH_TEXTURECOORDINATE1,\r\n\t\t\t'a_BoneWeights': VertexMesh.MESH_BLENDWEIGHT0,\r\n\t\t\t'a_BoneIndices': VertexMesh.MESH_BLENDINDICES0,\r\n\t\t\t'a_MvpMatrix': VertexMesh.MESH_MVPMATRIX_ROW0,\r\n\t\t\t'a_WorldMat': VertexMesh.MESH_WORLDMATRIX_ROW0\r\n\t\t};\r\n\t\tvar uniformMap: any = {\r\n\t\t\t'u_Bones': Shader3D.PERIOD_CUSTOM,\r\n\t\t\t'u_MvpMatrix': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_WorldMat': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_LightmapScaleOffset': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_LightMap': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_LightMapDirection': Shader3D.PERIOD_SPRITE,\r\n\t\t\t\r\n\t\t\t'u_SimpleAnimatorTexture':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SimpleAnimatorParams':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SimpleAnimatorTextureSize':Shader3D.PERIOD_SPRITE,\r\n\t\t\t\r\n\t\t\t//反射\r\n\t\t\t'u_ReflectCubeHDRParams': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ReflectTexture': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SpecCubeProbePosition':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SpecCubeBoxMax':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SpecCubeBoxMin':Shader3D.PERIOD_SPRITE,\r\n\r\n\t\t\t'u_CameraPos': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_View': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_ProjectionParams': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_Viewport': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_ViewProjection': Shader3D.PERIOD_CAMERA,\r\n\r\n\t\t\t'u_AlphaTestValue': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_AlbedoColor': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_EmissionColor': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_AlbedoTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_NormalTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_ParallaxTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_OcclusionTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_EmissionTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_Smoothness': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_SmoothnessScale': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_occlusionStrength': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_NormalScale': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_ParallaxScale': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_TilingOffset': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_MetallicGlossTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_Metallic': Shader3D.PERIOD_MATERIAL,\r\n\r\n\r\n\t\t\t'u_AmbientColor': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogStart': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogRange': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogColor': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_DirationLightCount': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_LightBuffer': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_LightClusterBuffer': Shader3D.PERIOD_SCENE,\r\n\r\n\t\t\t//Shadow\r\n\t\t\t'u_ShadowBias': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowLightDirection': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowMap': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowParams': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowSplitSpheres': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowMatrices': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowMapSize': Shader3D.PERIOD_SCENE,\r\n\t\t\t//SpotShadow\r\n\t\t\t'u_SpotShadowMap':Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotViewProjectMatrix':Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowLightPosition':Shader3D.PERIOD_SCENE,\r\n\r\n\t\t\t//GI\r\n\t\t\t'u_AmbientSHAr': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHAg': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHAb': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHBr': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHBg': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHBb': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHC': Shader3D.PERIOD_SCENE,\r\n\r\n\r\n\t\t\t//legacy lighting\r\n\t\t\t'u_DirectionLight.direction': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_DirectionLight.color': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_PointLight.position': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_PointLight.range': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_PointLight.color': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.position': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.direction': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.range': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.spot': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.color': Shader3D.PERIOD_SCENE\r\n\t\t};\r\n\t\tvar stateMap = {\r\n\t\t\t's_Cull': Shader3D.RENDER_STATE_CULL,\r\n\t\t\t's_Blend': Shader3D.RENDER_STATE_BLEND,\r\n\t\t\t's_BlendSrc': Shader3D.RENDER_STATE_BLEND_SRC,\r\n\t\t\t's_BlendDst': Shader3D.RENDER_STATE_BLEND_DST,\r\n\t\t\t's_DepthTest': Shader3D.RENDER_STATE_DEPTH_TEST,\r\n\t\t\t's_DepthWrite': Shader3D.RENDER_STATE_DEPTH_WRITE\r\n\t\t}\r\n\t\tvar shader: Shader3D = Shader3D.add(\"PBR\",attributeMap,uniformMap,true,true);\r\n\t\tvar subShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tsubShader.addShaderPass(PBRVS, PBRPS, stateMap, \"Forward\");\r\n\t\tsubShader.addShaderPass(PBRShadowCasterVS, PBRShadowCasterPS, stateMap, \"ShadowCaster\");\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _smoothnessSource: PBRMetallicSmoothnessSource = 0;\r\n\r\n\t/**\r\n\t * 金属光滑度贴图。\r\n\t */\r\n\tget metallicGlossTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(PBRStandardMaterial.METALLICGLOSSTEXTURE);\r\n\t}\r\n\r\n\tset metallicGlossTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE);\r\n\r\n\t\tthis._shaderValues.setTexture(PBRStandardMaterial.METALLICGLOSSTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取金属度,范围为0到1。\r\n\t */\r\n\tget metallic(): number {\r\n\t\treturn this._shaderValues.getNumber(PBRStandardMaterial.METALLIC);\r\n\t}\r\n\r\n\tset metallic(value: number) {\r\n\t\tthis._shaderValues.setNumber(PBRStandardMaterial.METALLIC, Math.max(0.0, Math.min(1.0, value)));\r\n\t}\r\n\r\n\t/**\r\n\t * 光滑度数据源,0或1。\r\n\t */\r\n\tget smoothnessSource(): PBRMetallicSmoothnessSource {\r\n\t\treturn this._smoothnessSource;\r\n\t}\r\n\r\n\tset smoothnessSource(value: PBRMetallicSmoothnessSource) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA);\r\n\t\tthis._smoothnessSource = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>PBRStandardMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"PBR\");\r\n\t\tthis._shaderValues.setNumber(PBRStandardMaterial.METALLIC, 0.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: PBRStandardMaterial = new PBRStandardMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n\r\n","import { Vector4 } from \"../../math/Vector4\";\r\nimport { TextureCube } from \"../../resource/TextureCube\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { Material } from \"./Material\";\r\n\r\n/**\r\n * <code>SkyBoxMaterial</code> 类用于实现SkyBoxMaterial材质。\r\n */\r\nexport class SkyBoxMaterial extends Material {\r\n\tstatic TINTCOLOR: number = Shader3D.propertyNameToID(\"u_TintColor\");\r\n\tstatic EXPOSURE: number = Shader3D.propertyNameToID(\"u_Exposure\");\r\n\tstatic ROTATION: number = Shader3D.propertyNameToID(\"u_Rotation\");\r\n\tstatic TEXTURECUBE: number = Shader3D.propertyNameToID(\"u_CubeTexture\");\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: SkyBoxMaterial;\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __initDefine__(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 颜色。\r\n\t */\r\n\tget tintColor(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(SkyBoxMaterial.TINTCOLOR));\r\n\t}\r\n\r\n\tset tintColor(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(SkyBoxMaterial.TINTCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 曝光强度。\r\n\t */\r\n\tget exposure(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyBoxMaterial.EXPOSURE);\r\n\t}\r\n\r\n\tset exposure(value: number) {\r\n\t\tthis._shaderValues.setNumber(SkyBoxMaterial.EXPOSURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 旋转角度。\r\n\t */\r\n\tget rotation(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyBoxMaterial.ROTATION);\r\n\t}\r\n\r\n\tset rotation(value: number) {\r\n\t\tthis._shaderValues.setNumber(SkyBoxMaterial.ROTATION, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 天空盒纹理。\r\n\t */\r\n\tget textureCube(): TextureCube {\r\n\t\treturn (<TextureCube>this._shaderValues.getTexture(SkyBoxMaterial.TEXTURECUBE));\r\n\t}\r\n\r\n\tset textureCube(value: TextureCube) {\r\n\t\tthis._shaderValues.setTexture(SkyBoxMaterial.TEXTURECUBE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: SkyBoxMaterial = new SkyBoxMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SkyBoxMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"SkyBox\");\r\n\t\tthis.tintColor = new Vector4(0.5, 0.5, 0.5, 0.5);\r\n\t\tthis.exposure = 1.0;\r\n\t\tthis.rotation = 0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Vector4 } from \"../../math/Vector4\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { Material } from \"./Material\";\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\n\r\n/**\r\n * <code>SkyProceduralMaterial</code> 类用于实现SkyProceduralMaterial材质。\r\n */\r\nexport class SkyProceduralMaterial extends Material {\r\n\t/** 太阳_无*/\r\n\tstatic SUN_NODE: number = 0;\r\n\t/** 太阳_精简*/\r\n\tstatic SUN_SIMPLE: number = 1;\r\n\t/** 太阳_高质量*/\r\n\tstatic SUN_HIGH_QUALITY: number = 2;\r\n\r\n\t/**@internal */\r\n\tstatic SUNSIZE: number = Shader3D.propertyNameToID(\"u_SunSize\");\r\n\t/**@internal */\r\n\tstatic SUNSIZECONVERGENCE: number = Shader3D.propertyNameToID(\"u_SunSizeConvergence\");\r\n\t/**@internal */\r\n\tstatic ATMOSPHERETHICKNESS: number = Shader3D.propertyNameToID(\"u_AtmosphereThickness\");\r\n\t/**@internal */\r\n\tstatic SKYTINT: number = Shader3D.propertyNameToID(\"u_SkyTint\");\r\n\t/**@internal */\r\n\tstatic GROUNDTINT: number = Shader3D.propertyNameToID(\"u_GroundTint\");\r\n\t/**@internal */\r\n\tstatic EXPOSURE: number = Shader3D.propertyNameToID(\"u_Exposure\");\r\n\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SUN_HIGH_QUALITY: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SUN_SIMPLE: ShaderDefine;\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: SkyProceduralMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tSkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY = Shader3D.getDefineByName(\"SUN_HIGH_QUALITY\");\r\n\t\tSkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE = Shader3D.getDefineByName(\"SUN_SIMPLE\");\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _sunDisk: number;\r\n\r\n\t/**\r\n\t * 太阳状态。\r\n\t */\r\n\tget sunDisk(): number {\r\n\t\treturn this._sunDisk;\r\n\t}\r\n\r\n\tset sunDisk(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase SkyProceduralMaterial.SUN_HIGH_QUALITY:\r\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);\r\n\t\t\t\tthis._shaderValues.addDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY);\r\n\t\t\t\tbreak;\r\n\t\t\tcase SkyProceduralMaterial.SUN_SIMPLE:\r\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY);\r\n\t\t\t\tthis._shaderValues.addDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);\r\n\t\t\t\tbreak;\r\n\t\t\tcase SkyProceduralMaterial.SUN_NODE:\r\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY);\r\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"SkyBoxProceduralMaterial: unknown sun value.\";\r\n\t\t}\r\n\t\tthis._sunDisk = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 太阳尺寸,范围是0到1。\r\n\t */\r\n\tget sunSize(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.SUNSIZE);\r\n\t}\r\n\r\n\tset sunSize(value: number) {\r\n\t\tvalue = Math.min(Math.max(0.0, value), 1.0);\r\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.SUNSIZE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 太阳尺寸收缩,范围是0到20。\r\n\t */\r\n\tget sunSizeConvergence(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.SUNSIZECONVERGENCE);\r\n\t}\r\n\r\n\tset sunSizeConvergence(value: number) {\r\n\t\tvalue = Math.min(Math.max(0.0, value), 20.0);\r\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.SUNSIZECONVERGENCE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 大气厚度,范围是0到5。\r\n\t */\r\n\tget atmosphereThickness(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.ATMOSPHERETHICKNESS);\r\n\t}\r\n\r\n\tset atmosphereThickness(value: number) {\r\n\t\tvalue = Math.min(Math.max(0.0, value), 5.0);\r\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.ATMOSPHERETHICKNESS, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 天空颜色。\r\n\t */\r\n\tget skyTint(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(SkyProceduralMaterial.SKYTINT));\r\n\t}\r\n\r\n\tset skyTint(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(SkyProceduralMaterial.SKYTINT, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 地面颜色。\r\n\t */\r\n\tget groundTint(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(SkyProceduralMaterial.GROUNDTINT));\r\n\t}\r\n\r\n\tset groundTint(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(SkyProceduralMaterial.GROUNDTINT, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 曝光强度,范围是0到8。\r\n\t */\r\n\tget exposure(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.EXPOSURE);\r\n\t}\r\n\r\n\tset exposure(value: number) {\r\n\t\tvalue = Math.min(Math.max(0.0, value), 8.0);\r\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.EXPOSURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SkyProceduralMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"SkyBoxProcedural\");\r\n\t\tthis.sunDisk = SkyProceduralMaterial.SUN_HIGH_QUALITY;\r\n\t\tthis.sunSize = 0.04;\r\n\t\tthis.sunSizeConvergence = 5;\r\n\t\tthis.atmosphereThickness = 1.0;\r\n\t\tthis.skyTint = new Vector4(0.5, 0.5, 0.5, 1.0);\r\n\t\tthis.groundTint = new Vector4(0.369, 0.349, 0.341, 1.0);\r\n\t\tthis.exposure = 1.3;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: SkyProceduralMaterial = new SkyProceduralMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\nimport { Material } from \"./Material\";\r\nimport { RenderState } from \"./RenderState\";\r\n\r\n/**\r\n * <code>UnlitMaterial</code> 类用于实现不受光照影响的材质。\r\n */\r\nexport class UnlitMaterial extends Material {\r\n\r\n\t/**渲染状态_不透明。*/\r\n\tstatic RENDERMODE_OPAQUE: number = 0;\r\n\t/**渲染状态_阿尔法测试。*/\r\n\tstatic RENDERMODE_CUTOUT: number = 1;\r\n\t/**渲染状态__透明混合。*/\r\n\tstatic RENDERMODE_TRANSPARENT: number = 2;\r\n\t/**渲染状态__加色法混合。*/\r\n\tstatic RENDERMODE_ADDTIVE: number = 3;\r\n\r\n\tstatic SHADERDEFINE_ALBEDOTEXTURE: ShaderDefine;\r\n\tstatic SHADERDEFINE_TILINGOFFSET: ShaderDefine;\r\n\tstatic SHADERDEFINE_ENABLEVERTEXCOLOR: ShaderDefine;\r\n\r\n\tstatic ALBEDOTEXTURE: number = Shader3D.propertyNameToID(\"u_AlbedoTexture\");\r\n\tstatic ALBEDOCOLOR: number = Shader3D.propertyNameToID(\"u_AlbedoColor\");\r\n\tstatic TILINGOFFSET: number = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n\tstatic CULL: number = Shader3D.propertyNameToID(\"s_Cull\");\r\n\tstatic BLEND: number = Shader3D.propertyNameToID(\"s_Blend\");\r\n\tstatic BLEND_SRC: number = Shader3D.propertyNameToID(\"s_BlendSrc\");\r\n\tstatic BLEND_DST: number = Shader3D.propertyNameToID(\"s_BlendDst\");\r\n\tstatic DEPTH_TEST: number = Shader3D.propertyNameToID(\"s_DepthTest\");\r\n\tstatic DEPTH_WRITE: number = Shader3D.propertyNameToID(\"s_DepthWrite\");\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: UnlitMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tUnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE = Shader3D.getDefineByName(\"ALBEDOTEXTURE\");\r\n\t\tUnlitMaterial.SHADERDEFINE_TILINGOFFSET = Shader3D.getDefineByName(\"TILINGOFFSET\");\r\n\t\tUnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR = Shader3D.getDefineByName(\"ENABLEVERTEXCOLOR\");\r\n\t}\r\n\r\n\tprivate _albedoColor: Vector4 = new Vector4(1.0, 1.0, 1.0, 1.0);\r\n\tprivate _albedoIntensity: number = 1.0;\r\n\tprivate _enableVertexColor: boolean = false;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _ColorR(): number {\r\n\t\treturn this._albedoColor.x;\r\n\t}\r\n\r\n\tset _ColorR(value: number) {\r\n\t\tthis._albedoColor.x = value;\r\n\t\tthis.albedoColor = this._albedoColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _ColorG(): number {\r\n\t\treturn this._albedoColor.y;\r\n\t}\r\n\r\n\tset _ColorG(value: number) {\r\n\t\tthis._albedoColor.y = value;\r\n\t\tthis.albedoColor = this._albedoColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _ColorB(): number {\r\n\t\treturn this._albedoColor.z;\r\n\t}\r\n\r\n\tset _ColorB(value: number) {\r\n\t\tthis._albedoColor.z = value;\r\n\t\tthis.albedoColor = this._albedoColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal \r\n\t */\r\n\tget _ColorA(): number {\r\n\t\treturn this._albedoColor.w;\r\n\t}\r\n\r\n\tset _ColorA(value: number) {\r\n\t\tthis._albedoColor.w = value;\r\n\t\tthis.albedoColor = this._albedoColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _Color(): Vector4 {\r\n\t\treturn this._shaderValues.getVector(UnlitMaterial.ALBEDOCOLOR);\r\n\t}\r\n\r\n\tset _Color(value: Vector4) {\r\n\t\tthis.albedoColor = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _AlbedoIntensity(): number {\r\n\t\treturn this._albedoIntensity;\r\n\t}\r\n\r\n\tset _AlbedoIntensity(value: number) {\r\n\t\tif (this._albedoIntensity !== value) {\r\n\t\t\tvar finalAlbedo: Vector4 = (<Vector4>this._shaderValues.getVector(UnlitMaterial.ALBEDOCOLOR));\r\n\t\t\tVector4.scale(this._albedoColor, value, finalAlbedo);\r\n\t\t\tthis._albedoIntensity = value;\r\n\t\t\tthis._shaderValues.setVector(UnlitMaterial.ALBEDOCOLOR, finalAlbedo);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STX(): number {\r\n\t\treturn this._shaderValues.getVector(UnlitMaterial.TILINGOFFSET).x;\r\n\t}\r\n\r\n\tset _MainTex_STX(x: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(UnlitMaterial.TILINGOFFSET));\r\n\t\ttilOff.x = x;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STY(): number {\r\n\t\treturn this._shaderValues.getVector(UnlitMaterial.TILINGOFFSET).y;\r\n\t}\r\n\r\n\tset _MainTex_STY(y: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(UnlitMaterial.TILINGOFFSET));\r\n\t\ttilOff.y = y;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STZ(): number {\r\n\t\treturn this._shaderValues.getVector(UnlitMaterial.TILINGOFFSET).z;\r\n\t}\r\n\r\n\tset _MainTex_STZ(z: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(UnlitMaterial.TILINGOFFSET));\r\n\t\ttilOff.z = z;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STW(): number {\r\n\t\treturn this._shaderValues.getVector(UnlitMaterial.TILINGOFFSET).w;\r\n\t}\r\n\r\n\tset _MainTex_STW(w: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(UnlitMaterial.TILINGOFFSET));\r\n\t\ttilOff.w = w;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_ST(): Vector4 {\r\n\t\treturn this._shaderValues.getVector(UnlitMaterial.TILINGOFFSET);\r\n\t}\r\n\r\n\tset _MainTex_ST(value: Vector4) {\r\n\t\tthis.tilingOffset = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _Cutoff(): number {\r\n\t\treturn this.alphaTestValue;\r\n\t}\r\n\r\n\tset _Cutoff(value: number) {\r\n\t\tthis.alphaTestValue = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率颜色R分量。\r\n\t */\r\n\tget albedoColorR(): number {\r\n\t\treturn this._ColorR;\r\n\t}\r\n\r\n\tset albedoColorR(value: number) {\r\n\t\tthis._ColorR = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率颜色G分量。\r\n\t */\r\n\tget albedoColorG(): number {\r\n\t\treturn this._ColorG;\r\n\t}\r\n\r\n\tset albedoColorG(value: number) {\r\n\t\tthis._ColorG = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率颜色B分量。\r\n\t */\r\n\tget albedoColorB(): number {\r\n\t\treturn this._ColorB;\r\n\t}\r\n\r\n\tset albedoColorB(value: number) {\r\n\t\tthis._ColorB = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率颜色Z分量。\r\n\t */\r\n\tget albedoColorA(): number {\r\n\t\treturn this._ColorA;\r\n\t}\r\n\r\n\tset albedoColorA(value: number) {\r\n\t\tthis._ColorA = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率颜色。\r\n\t */\r\n\tget albedoColor(): Vector4 {\r\n\t\treturn this._albedoColor;\r\n\t}\r\n\r\n\tset albedoColor(value: Vector4) {\r\n\t\tvar finalAlbedo: Vector4 = (<Vector4>this._shaderValues.getVector(UnlitMaterial.ALBEDOCOLOR));\r\n\t\tVector4.scale(value, this._albedoIntensity, finalAlbedo);\r\n\t\tthis._albedoColor = value;\r\n\t\tthis._shaderValues.setVector(UnlitMaterial.ALBEDOCOLOR, finalAlbedo);\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率强度。\r\n\t */\r\n\tget albedoIntensity(): number {\r\n\t\treturn this._albedoIntensity;\r\n\t}\r\n\r\n\tset albedoIntensity(value: number) {\r\n\t\tthis._AlbedoIntensity = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率贴图。\r\n\t */\r\n\tget albedoTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(UnlitMaterial.ALBEDOTEXTURE);\r\n\t}\r\n\r\n\tset albedoTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n\t\tthis._shaderValues.setTexture(UnlitMaterial.ALBEDOTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移X分量。\r\n\t */\r\n\tget tilingOffsetX(): number {\r\n\t\treturn this._MainTex_STX;\r\n\t}\r\n\r\n\tset tilingOffsetX(x: number) {\r\n\t\tthis._MainTex_STX = x;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移Y分量。\r\n\t */\r\n\tget tilingOffsetY(): number {\r\n\t\treturn this._MainTex_STY;\r\n\t}\r\n\r\n\tset tilingOffsetY(y: number) {\r\n\t\tthis._MainTex_STY = y;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移Z分量。\r\n\t */\r\n\tget tilingOffsetZ(): number {\r\n\t\treturn this._MainTex_STZ;\r\n\t}\r\n\r\n\tset tilingOffsetZ(z: number) {\r\n\t\tthis._MainTex_STZ = z;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移W分量。\r\n\t */\r\n\tget tilingOffsetW(): number {\r\n\t\treturn this._MainTex_STW;\r\n\t}\r\n\r\n\tset tilingOffsetW(w: number) {\r\n\t\tthis._MainTex_STW = w;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(UnlitMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tif (value.x != 1 || value.y != 1 || value.z != 0 || value.w != 0)\r\n\t\t\t\tthis._shaderValues.addDefine(UnlitMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t\telse\r\n\t\t\t\tthis._shaderValues.removeDefine(UnlitMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t} else {\r\n\t\t\tthis._shaderValues.removeDefine(UnlitMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t}\r\n\t\tthis._shaderValues.setVector(UnlitMaterial.TILINGOFFSET, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否支持顶点色。\r\n\t */\r\n\tget enableVertexColor(): boolean {\r\n\t\treturn this._enableVertexColor;\r\n\t}\r\n\r\n\tset enableVertexColor(value: boolean) {\r\n\t\tthis._enableVertexColor = value;\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t}\r\n\r\n\t/**\r\n\t * 渲染模式。\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase UnlitMaterial.RENDERMODE_OPAQUE:\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase UnlitMaterial.RENDERMODE_CUTOUT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_ALPHATEST;\r\n\t\t\t\tthis.alphaTest = true;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase UnlitMaterial.RENDERMODE_TRANSPARENT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"UnlitMaterial : renderMode value error.\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 是否写入深度。\r\n\t */\r\n\tget depthWrite(): boolean {\r\n\t\treturn this._shaderValues.getBool(UnlitMaterial.DEPTH_WRITE);\r\n\t}\r\n\r\n\tset depthWrite(value: boolean) {\r\n\t\tthis._shaderValues.setBool(UnlitMaterial.DEPTH_WRITE, value);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 剔除方式。\r\n\t */\r\n\tget cull(): number {\r\n\t\treturn this._shaderValues.getInt(UnlitMaterial.CULL);\r\n\t}\r\n\r\n\tset cull(value: number) {\r\n\t\tthis._shaderValues.setInt(UnlitMaterial.CULL, value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 混合方式。\r\n\t */\r\n\tget blend(): number {\r\n\t\treturn this._shaderValues.getInt(UnlitMaterial.BLEND);\r\n\t}\r\n\r\n\tset blend(value: number) {\r\n\t\tthis._shaderValues.setInt(UnlitMaterial.BLEND, value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 混合源。\r\n\t */\r\n\tget blendSrc(): number {\r\n\t\treturn this._shaderValues.getInt(UnlitMaterial.BLEND_SRC);\r\n\t}\r\n\r\n\tset blendSrc(value: number) {\r\n\t\tthis._shaderValues.setInt(UnlitMaterial.BLEND_SRC, value);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 混合目标。\r\n\t */\r\n\tget blendDst(): number {\r\n\t\treturn this._shaderValues.getInt(UnlitMaterial.BLEND_DST);\r\n\t}\r\n\r\n\tset blendDst(value: number) {\r\n\t\tthis._shaderValues.setInt(UnlitMaterial.BLEND_DST, value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 深度测试方式。\r\n\t */\r\n\tget depthTest(): number {\r\n\t\treturn this._shaderValues.getInt(UnlitMaterial.DEPTH_TEST);\r\n\t}\r\n\r\n\tset depthTest(value: number) {\r\n\t\tthis._shaderValues.setInt(UnlitMaterial.DEPTH_TEST, value);\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"Unlit\");\r\n\t\tthis._shaderValues.setVector(UnlitMaterial.ALBEDOCOLOR, new Vector4(1.0, 1.0, 1.0, 1.0));\r\n\t\tthis.renderMode = UnlitMaterial.RENDERMODE_OPAQUE;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: UnlitMaterial = new UnlitMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n","import { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { Material } from \"./Material\";\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\n\r\n/**\r\n * <code>WaterPrimaryMaterial</code> 类用于实现水材质。\r\n */\r\nexport class WaterPrimaryMaterial extends Material {\r\n\r\n\tstatic HORIZONCOLOR: number = Shader3D.propertyNameToID(\"u_HorizonColor\");\r\n\tstatic MAINTEXTURE: number = Shader3D.propertyNameToID(\"u_MainTexture\");\r\n\tstatic NORMALTEXTURE: number = Shader3D.propertyNameToID(\"u_NormalTexture\");\r\n\tstatic WAVESCALE: number = Shader3D.propertyNameToID(\"u_WaveScale\");\r\n\tstatic WAVESPEED: number = Shader3D.propertyNameToID(\"u_WaveSpeed\");\r\n\r\n\tstatic SHADERDEFINE_MAINTEXTURE: ShaderDefine;\r\n\tstatic SHADERDEFINE_NORMALTEXTURE: ShaderDefine;\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: WaterPrimaryMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tWaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE = Shader3D.getDefineByName(\"MAINTEXTURE\");\r\n\t\tWaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE = Shader3D.getDefineByName(\"NORMALTEXTURE\");\r\n\t}\r\n\r\n\t/**\r\n\t * 地平线颜色。\r\n\t */\r\n\tget horizonColor(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(WaterPrimaryMaterial.HORIZONCOLOR));\r\n\t}\r\n\r\n\tset horizonColor(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(WaterPrimaryMaterial.HORIZONCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 主贴图。\r\n\t */\r\n\tget mainTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(WaterPrimaryMaterial.MAINTEXTURE);\r\n\t}\r\n\r\n\tset mainTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(WaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(WaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE);\r\n\t\tthis._shaderValues.setTexture(WaterPrimaryMaterial.MAINTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 法线贴图。\r\n\t */\r\n\tget normalTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(WaterPrimaryMaterial.NORMALTEXTURE);\r\n\t}\r\n\r\n\tset normalTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(WaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(WaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE);\r\n\t\tthis._shaderValues.setTexture(WaterPrimaryMaterial.NORMALTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 波动缩放系数。\r\n\t */\r\n\tget waveScale(): number {\r\n\t\treturn this._shaderValues.getNumber(WaterPrimaryMaterial.WAVESCALE);\r\n\t}\r\n\r\n\tset waveScale(value: number) {\r\n\t\tthis._shaderValues.setNumber(WaterPrimaryMaterial.WAVESCALE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 波动速率。\r\n\t */\r\n\tget waveSpeed(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(WaterPrimaryMaterial.WAVESPEED));\r\n\t}\r\n\r\n\tset waveSpeed(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(WaterPrimaryMaterial.WAVESPEED, value);\r\n\t}\r\n\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"WaterPrimary\");\r\n\t\tthis._shaderValues.setVector(WaterPrimaryMaterial.HORIZONCOLOR, new Vector4(0.172, 0.463, 0.435, 0));\r\n\t\tthis._shaderValues.setNumber(WaterPrimaryMaterial.WAVESCALE, 0.15);\r\n\t\tthis._shaderValues.setVector(WaterPrimaryMaterial.WAVESPEED, new Vector4(19, 9, -16, -7));\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: WaterPrimaryMaterial = new WaterPrimaryMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n\r\n","import { ShaderDefine } from \"../shader/ShaderDefine\";\r\n\r\nexport class MeshSprite3DShaderDeclaration {\r\n\tstatic SHADERDEFINE_UV0: ShaderDefine;\r\n\tstatic SHADERDEFINE_COLOR: ShaderDefine;\r\n\tstatic SHADERDEFINE_UV1: ShaderDefine;\r\n\tstatic SHADERDEFINE_GPU_INSTANCE: ShaderDefine;\r\n\tstatic SHADERDEFINE_SPECCUBE_BOX_PROJECTION:ShaderDefine;\r\n}","import { Render } from \"../../renders/Render\";\r\nimport { SingletonList } from \"../component/SingletonList\";\r\nimport { FrustumCulling } from \"../graphics/FrustumCulling\";\r\nimport { MeshRenderStaticBatchManager } from \"../graphics/MeshRenderStaticBatchManager\";\r\nimport { SubMeshInstanceBatch } from \"../graphics/SubMeshInstanceBatch\";\r\nimport { BoundFrustum } from \"../math/BoundFrustum\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { Material } from \"./material/Material\";\r\nimport { BlinnPhongMaterial } from \"./material/BlinnPhongMaterial\";\r\nimport { MeshSprite3D } from \"./MeshSprite3D\";\r\nimport { MeshSprite3DShaderDeclaration } from \"./MeshSprite3DShaderDeclaration\";\r\nimport { BaseRender } from \"./render/BaseRender\";\r\nimport { RenderContext3D } from \"./render/RenderContext3D\";\r\nimport { RenderElement } from \"./render/RenderElement\";\r\nimport { SubMeshRenderElement } from \"./render/SubMeshRenderElement\";\r\nimport { RenderableSprite3D } from \"./RenderableSprite3D\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { Transform3D } from \"./Transform3D\";\r\nimport { VertexBuffer3D } from \"../graphics/VertexBuffer3D\";\r\nimport { ReflectionProbeMode, ReflectionProbe } from \"./reflectionProbe/ReflectionProbe\";\r\nimport { TextureCube } from \"../resource/TextureCube\";\r\n\r\n/**\r\n * <code>MeshRenderer</code> 类用于网格渲染器。\r\n */\r\nexport class MeshRenderer extends BaseRender {\r\n\t/** @internal */\r\n\tprotected _revertStaticBatchDefineUV1: boolean = false;\r\n\t/** @internal */\r\n\tprotected _projectionViewWorldMatrix: Matrix4x4;\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>MeshRender</code> 实例。\r\n\t */\r\n\tconstructor(owner: RenderableSprite3D) {\r\n\t\tsuper(owner);\r\n\t\tthis._projectionViewWorldMatrix = new Matrix4x4();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_createRenderElement(): RenderElement {\r\n\t\treturn new SubMeshRenderElement();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_onMeshChange(mesh: Mesh): void {\r\n\t\tif (mesh) {\r\n\t\t\tvar count: number = mesh.subMeshCount;\r\n\t\t\tthis._renderElements.length = count;\r\n\t\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\t\tvar renderElement: RenderElement = this._renderElements[i];\r\n\t\t\t\tif (!renderElement) {\r\n\t\t\t\t\tvar material: Material = this.sharedMaterials[i];\r\n\t\t\t\t\trenderElement = this._renderElements[i] = this._createRenderElement();\r\n\t\t\t\t\trenderElement.setTransform(this._owner._transform);\r\n\t\t\t\t\trenderElement.render = this;\r\n\t\t\t\t\trenderElement.material = material ? material : BlinnPhongMaterial.defaultMaterial;//确保有材质,由默认材质代替。\r\n\t\t\t\t}\r\n\t\t\t\trenderElement.setGeometry(mesh.getSubMesh(i));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._renderElements.length = 0;\r\n\t\t}\r\n\t\tthis._boundsChange = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _calculateBoundingBox(): void {\r\n\t\tvar sharedMesh: Mesh = ((<MeshSprite3D>this._owner)).meshFilter.sharedMesh;\r\n\t\tif (sharedMesh) {\r\n\t\t\tvar worldMat: Matrix4x4 = ((<MeshSprite3D>this._owner)).transform.worldMatrix;\r\n\t\t\tsharedMesh.bounds._tranform(worldMat, this._bounds);\r\n\t\t}\r\n\t\tif (Render.supportWebGLPlusCulling) {//[NATIVE]\r\n\t\t\tvar min: Vector3 = this._bounds.getMin();\r\n\t\t\tvar max: Vector3 = this._bounds.getMax();\r\n\t\t\tvar buffer: Float32Array = FrustumCulling._cullingBuffer;\r\n\t\t\tbuffer[this._cullingBufferIndex + 1] = min.x;\r\n\t\t\tbuffer[this._cullingBufferIndex + 2] = min.y;\r\n\t\t\tbuffer[this._cullingBufferIndex + 3] = min.z;\r\n\t\t\tbuffer[this._cullingBufferIndex + 4] = max.x;\r\n\t\t\tbuffer[this._cullingBufferIndex + 5] = max.y;\r\n\t\t\tbuffer[this._cullingBufferIndex + 6] = max.z;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\r\n\t\tif (boundFrustum)\r\n\t\t\treturn boundFrustum.intersects(this.bounds._getBoundBox());\r\n\t\telse\r\n\t\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_renderUpdate(context: RenderContext3D, transform: Transform3D): void {\r\n\t\tthis._applyLightMapParams();\r\n\t\tvar element: SubMeshRenderElement = <SubMeshRenderElement>context.renderElement;\r\n\t\tswitch (element.renderType) {\r\n\t\t\tcase RenderElement.RENDERTYPE_NORMAL:\r\n\t\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.WORLDMATRIX, transform.worldMatrix);\r\n\t\t\t\tbreak;\r\n\t\t\tcase RenderElement.RENDERTYPE_STATICBATCH:\r\n\t\t\t\tif (transform)\r\n\t\t\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.WORLDMATRIX, transform.worldMatrix);\r\n\t\t\t\telse\r\n\t\t\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.WORLDMATRIX, Matrix4x4.DEFAULT);\r\n\t\t\t\tif (!this._shaderValues.hasDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1)) {\r\n\t\t\t\t\tthis._shaderValues.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\r\n\t\t\t\t\tthis._revertStaticBatchDefineUV1 = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._revertStaticBatchDefineUV1 = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis._shaderValues.setVector(RenderableSprite3D.LIGHTMAPSCALEOFFSET, BaseRender._defaultLightmapScaleOffset);\r\n\t\t\t\tbreak;\r\n\t\t\tcase RenderElement.RENDERTYPE_VERTEXBATCH:\r\n\t\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.WORLDMATRIX, Matrix4x4.DEFAULT);\r\n\t\t\t\tbreak;\r\n\t\t\tcase RenderElement.RENDERTYPE_INSTANCEBATCH:\r\n\t\t\t\tvar worldMatrixData: Float32Array = SubMeshInstanceBatch.instance.instanceWorldMatrixData;\r\n\t\t\t\tvar insBatches: SingletonList<SubMeshRenderElement> = element.instanceBatchElementList;\r\n\t\t\t\tvar elements: SubMeshRenderElement[] = insBatches.elements;\r\n\t\t\t\tvar count: number = insBatches.length;\r\n\t\t\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\t\t\tworldMatrixData.set(elements[i]._transform.worldMatrix.elements, i * 16);\r\n\r\n\t\t\t\tvar worldBuffer: VertexBuffer3D = SubMeshInstanceBatch.instance.instanceWorldMatrixBuffer;\r\n\t\t\t\tworldBuffer.orphanStorage();// prphan the memory block to avoid sync problem.can improve performance in HUAWEI P10.   TODO:\"WebGL's bufferData(target, size, usage) call is guaranteed to initialize the buffer to 0\"\r\n\t\t\t\tworldBuffer.setData(worldMatrixData.buffer, 0, 0, count * 16 * 4);\r\n\t\t\t\tthis._shaderValues.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t//更新反射探针\r\n\t\tif(!this._probReflection)\r\n\t\treturn;\r\n\t\tif(this._reflectionMode==ReflectionProbeMode.off){\r\n\t\t\tthis._shaderValues.removeDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\r\n\t\t\tthis._shaderValues.setVector(RenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS,ReflectionProbe.defaultTextureHDRDecodeValues);\r\n\t\t\tthis._shaderValues.setTexture(RenderableSprite3D.REFLECTIONTEXTURE,TextureCube.blackTexture);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(!this._probReflection.boxProjection){\r\n\t\t\t\tthis._shaderValues.removeDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis._shaderValues.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\r\n\t\t\t\tthis._shaderValues.setVector3(RenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION,this._probReflection.probePosition);\r\n\t\t\t\tthis._shaderValues.setVector3(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX,this._probReflection.boundsMax);\r\n\t\t\t\tthis._shaderValues.setVector3(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN,this._probReflection.boundsMin);\r\n\t\t\t}\r\n\t\t\tthis._shaderValues.setTexture(RenderableSprite3D.REFLECTIONTEXTURE,this._probReflection.reflectionTexture);\r\n\t\t\tthis._shaderValues.setVector(RenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS,this._probReflection.reflectionHDRParams);\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {\r\n\t\tvar projectionView: Matrix4x4 = context.projectionViewMatrix;\r\n\t\tif (projectionView) {//TODO:是否移除MVP\r\n\t\t\tvar element: SubMeshRenderElement = (<SubMeshRenderElement>context.renderElement);\r\n\t\t\tswitch (element.renderType) {\r\n\t\t\t\tcase RenderElement.RENDERTYPE_NORMAL:\r\n\t\t\t\tcase RenderElement.RENDERTYPE_STATICBATCH:\r\n\t\t\t\tcase RenderElement.RENDERTYPE_VERTEXBATCH:\r\n\t\t\t\t\tif (transform) {\r\n\t\t\t\t\t\tMatrix4x4.multiply(projectionView, transform.worldMatrix, this._projectionViewWorldMatrix);\r\n\t\t\t\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.MVPMATRIX, this._projectionViewWorldMatrix);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.MVPMATRIX, projectionView);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase RenderElement.RENDERTYPE_INSTANCEBATCH:\r\n\t\t\t\t\tvar mvpMatrixData: Float32Array = SubMeshInstanceBatch.instance.instanceMVPMatrixData;\r\n\t\t\t\t\tvar insBatches: SingletonList<SubMeshRenderElement> = element.instanceBatchElementList;\r\n\t\t\t\t\tvar elements: SubMeshRenderElement[] = insBatches.elements;\r\n\t\t\t\t\tvar count: number = insBatches.length;\r\n\t\t\t\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\t\t\t\tvar worldMat: Matrix4x4 = elements[i]._transform.worldMatrix;\r\n\t\t\t\t\t\tUtils3D.mulMatrixByArray(projectionView.elements, 0, worldMat.elements, 0, mvpMatrixData, i * 16);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar mvpBuffer: VertexBuffer3D = SubMeshInstanceBatch.instance.instanceMVPMatrixBuffer;\r\n\t\t\t\t\tmvpBuffer.orphanStorage();// prphan the memory block to avoid sync problem.can improve performance in HUAWEI P10.  TODO:\"WebGL's bufferData(target, size, usage) call is guaranteed to initialize the buffer to 0\"\r\n\t\t\t\t\tmvpBuffer.setData(mvpMatrixData.buffer, 0, 0, count * 16 * 4);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_revertBatchRenderUpdate(context: RenderContext3D): void {\r\n\t\tvar element: SubMeshRenderElement = (<SubMeshRenderElement>context.renderElement);\r\n\t\tswitch (element.renderType) {\r\n\t\t\tcase RenderElement.RENDERTYPE_STATICBATCH:\r\n\t\t\t\tif (this._revertStaticBatchDefineUV1)\r\n\t\t\t\t\tthis._shaderValues.removeDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\r\n\t\t\t\tthis._shaderValues.setVector(RenderableSprite3D.LIGHTMAPSCALEOFFSET, this.lightmapScaleOffset);\r\n\t\t\t\tbreak;\r\n\t\t\tcase RenderElement.RENDERTYPE_INSTANCEBATCH:\r\n\t\t\t\tthis._shaderValues.removeDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_destroy(): void {\r\n\t\t(this._isPartOfStaticBatch) && (MeshRenderStaticBatchManager.instance._removeRenderSprite(this._owner));\r\n\t\tsuper._destroy();\r\n\t}\r\n}\r\n\r\n\r\n","import { VertexMesh } from \"../graphics/Vertex/VertexMesh\";\r\nimport { VertexElement } from \"../graphics/VertexElement\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\nimport { ShaderData } from \"../shader/ShaderData\";\r\nimport { ShaderDefine } from \"../shader/ShaderDefine\";\r\nimport { MeshRenderer } from \"./MeshRenderer\";\r\nimport { MeshSprite3DShaderDeclaration } from \"./MeshSprite3DShaderDeclaration\";\r\nimport { RenderableSprite3D } from \"./RenderableSprite3D\";\r\n\r\n/**\r\n * <code>MeshFilter</code> 类用于创建网格过滤器。\r\n */\r\nexport class MeshFilter {\r\n\t/** @internal */\r\n\tprivate static _meshVerticeDefine: Array<ShaderDefine> = [];\r\n\r\n\t/** @internal */\r\n\tprivate _owner: RenderableSprite3D;\r\n\t/** @internal */\r\n\tprivate _sharedMesh: Mesh;\r\n\r\n\t/**\r\n\t * 共享网格。\r\n\t */\r\n\tget sharedMesh(): Mesh {\r\n\t\treturn this._sharedMesh;\r\n\t}\r\n\r\n\tset sharedMesh(value: Mesh) {\r\n\t\tif (this._sharedMesh !== value) {\r\n\t\t\tvar defineDatas: ShaderData = this._owner._render._shaderValues;\r\n\t\t\tvar lastValue: Mesh = this._sharedMesh;\r\n\t\t\tif (lastValue) {\r\n\t\t\t\tlastValue._removeReference();\r\n\t\t\t\tthis._getMeshDefine(lastValue, MeshFilter._meshVerticeDefine);\r\n\t\t\t\tfor (var i: number = 0, n: number = MeshFilter._meshVerticeDefine.length; i < n; i++)\r\n\t\t\t\t\tdefineDatas.removeDefine(MeshFilter._meshVerticeDefine[i]);\r\n\t\t\t}\r\n\r\n\t\t\tif (value) {\r\n\t\t\t\tvalue._addReference();\r\n\t\t\t\tthis._getMeshDefine(value, MeshFilter._meshVerticeDefine);\r\n\t\t\t\tfor (var i: number = 0, n: number = MeshFilter._meshVerticeDefine.length; i < n; i++)\r\n\t\t\t\t\tdefineDatas.addDefine(MeshFilter._meshVerticeDefine[i]);\r\n\t\t\t}\r\n\r\n\t\t\t((<MeshRenderer>this._owner._render))._onMeshChange(value);\r\n\t\t\tthis._sharedMesh = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>MeshFilter</code> 实例。\r\n\t * @param owner 所属网格精灵。\r\n\t */\r\n\tconstructor(owner: RenderableSprite3D) {\r\n\t\tthis._owner = owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @param mesh \r\n\t * @param out \r\n\t */\r\n\tprivate _getMeshDefine(mesh: Mesh, out: Array<ShaderDefine>): number {\r\n\t\tout.length = 0;\r\n\t\tvar define: number;\r\n\t\tfor (var i: number = 0, n: number = mesh._subMeshes.length; i < n; i++) {\r\n\t\t\tvar subMesh: SubMesh = (<SubMesh>mesh.getSubMesh(i));\r\n\t\t\tvar vertexElements: any[] = subMesh._vertexBuffer._vertexDeclaration._vertexElements;\r\n\t\t\tfor (var j: number = 0, m: number = vertexElements.length; j < m; j++) {\r\n\t\t\t\tvar vertexElement: VertexElement = vertexElements[j];\r\n\t\t\t\tvar name: number = vertexElement._elementUsage;\r\n\t\t\t\tswitch (name) {\r\n\t\t\t\t\tcase VertexMesh.MESH_COLOR0:\r\n\t\t\t\t\t\tout.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase VertexMesh.MESH_TEXTURECOORDINATE0:\r\n\t\t\t\t\t\tout.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase VertexMesh.MESH_TEXTURECOORDINATE1:\r\n\t\t\t\t\t\tout.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn define;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tdestroy(): void {\r\n\t\tthis._owner = null;\r\n\t\t(this._sharedMesh) && (this._sharedMesh._removeReference(), this._sharedMesh = null);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ILaya3D } from \"../../../ILaya3D\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Resource } from \"../../resource/Resource\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { SingletonList } from \"../component/SingletonList\";\r\nimport { BufferState } from \"../core/BufferState\";\r\nimport { GeometryElement } from \"../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\r\nimport { SubMeshRenderElement } from \"../core/render/SubMeshRenderElement\";\r\nimport { Transform3D } from \"../core/Transform3D\";\r\nimport { Vector4 } from \"../math/Vector4\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\nimport { IndexBuffer3D } from \"./IndexBuffer3D\";\r\nimport { VertexMesh } from \"./Vertex/VertexMesh\";\r\nimport { VertexBuffer3D } from \"./VertexBuffer3D\";\r\nimport { VertexDeclaration } from \"./VertexDeclaration\";\r\nimport { VertexElement } from \"./VertexElement\";\r\nimport { IndexFormat } from \"./IndexFormat\";\r\n/**\r\n * @internal\r\n * <code>SubMeshDynamicBatch</code> 类用于网格动态合并。\r\n */\r\nexport class SubMeshDynamicBatch extends GeometryElement {\r\n\t/** @internal\r\n\t * //MI6 (微信) 大于12个顶点微小提升\r\n\t * //MI6 (QQ浏览器8.2 X5内核038230GPU-UU) 大于12个顶点微小提升\r\n\t * //MI6 (chrome63) 大于10个顶点微小提升\r\n\t * //IPHONE7PLUS  IOS11 微信 大于12个顶点微小提升\r\n\t * //IPHONE5s  IOS8 微信 大于12仍有较大提升\r\n\t */\r\n\tstatic maxAllowVertexCount: number = 10;\r\n\t/** @internal */\r\n\tstatic maxAllowAttribueCount: number = 900;//TODO:\r\n\t/** @internal */\r\n\tstatic maxIndicesCount: number = 32000;\r\n\r\n\t/** @internal */\r\n\tstatic instance: SubMeshDynamicBatch;\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __init__(): void {\r\n\t\tSubMeshDynamicBatch.instance = new SubMeshDynamicBatch();\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _vertices: Float32Array;\r\n\t/**@internal */\r\n\tprivate _indices: Int16Array;\r\n\t/**@internal */\r\n\tprivate _positionOffset: number;\r\n\t/**@internal */\r\n\tprivate _normalOffset: number;\r\n\t/**@internal */\r\n\tprivate _colorOffset: number;\r\n\t/**@internal */\r\n\tprivate _uv0Offset: number;\r\n\t/**@internal */\r\n\tprivate _uv1Offset: number;\r\n\t/**@internal */\r\n\tprivate _sTangentOffset: number;\r\n\t/**@internal */\r\n\t_vertexBuffer: VertexBuffer3D;\r\n\t/**@internal */\r\n\t_indexBuffer: IndexBuffer3D;\r\n\t/** @internal */\r\n\tprivate _bufferState: BufferState = new BufferState();\r\n\r\n\t/**\r\n\t * 创建一个 <code>SubMeshDynamicBatch</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar maxVerDec: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,COLOR,UV,UV1,TANGENT\");\r\n\t\tvar maxByteCount: number = maxVerDec.vertexStride * SubMeshDynamicBatch.maxIndicesCount;\r\n\t\tthis._vertices = new Float32Array(maxByteCount / 4);\r\n\t\tthis._vertexBuffer = new VertexBuffer3D(maxByteCount, gl.DYNAMIC_DRAW);\r\n\t\tthis._indices = new Int16Array(SubMeshDynamicBatch.maxIndicesCount);\r\n\t\tthis._indexBuffer = new IndexBuffer3D(IndexFormat.UInt16, this._indices.length, gl.DYNAMIC_DRAW);\r\n\r\n\t\tvar memorySize: number = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;\r\n\t\tResource._addMemory(memorySize, memorySize);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getBatchVertices(vertexDeclaration: VertexDeclaration, batchVertices: Float32Array, batchOffset: number, transform: Transform3D, element: SubMeshRenderElement, subMesh: SubMesh): void {\r\n\t\tvar vertexFloatCount: number = vertexDeclaration.vertexStride / 4;\r\n\t\tvar oriVertexes: Float32Array = subMesh._vertexBuffer.getFloat32Data();\r\n\t\tvar lightmapScaleOffset: Vector4 = element.render.lightmapScaleOffset;\r\n\r\n\t\tvar multiSubMesh: boolean = element._dynamicMultiSubMesh;\r\n\t\tvar vertexCount: number = element._dynamicVertexCount;\r\n\t\telement._computeWorldPositionsAndNormals(this._positionOffset, this._normalOffset, multiSubMesh, vertexCount);\r\n\t\tvar worldPositions: Float32Array = element._dynamicWorldPositions;\r\n\t\tvar worldNormals: Float32Array = element._dynamicWorldNormals;\r\n\t\tvar indices: Uint16Array = subMesh._indices;\r\n\t\tfor (var i: number = 0; i < vertexCount; i++) {\r\n\t\t\tvar index: number = multiSubMesh ? indices[i] : i;\r\n\t\t\tvar oriOffset: number = index * vertexFloatCount;\r\n\t\t\tvar bakeOffset: number = (i + batchOffset) * vertexFloatCount;\r\n\r\n\t\t\tvar oriOff: number = i * 3;\r\n\t\t\tvar bakOff: number = bakeOffset + this._positionOffset;\r\n\t\t\tbatchVertices[bakOff] = worldPositions[oriOff];\r\n\t\t\tbatchVertices[bakOff + 1] = worldPositions[oriOff + 1];\r\n\t\t\tbatchVertices[bakOff + 2] = worldPositions[oriOff + 2];\r\n\r\n\t\t\tif (this._normalOffset !== -1) {\r\n\t\t\t\tbakOff = bakeOffset + this._normalOffset;\r\n\t\t\t\tbatchVertices[bakOff] = worldNormals[oriOff];\r\n\t\t\t\tbatchVertices[bakOff + 1] = worldNormals[oriOff + 1];\r\n\t\t\t\tbatchVertices[bakOff + 2] = worldNormals[oriOff + 2];\r\n\t\t\t}\r\n\r\n\t\t\tif (this._colorOffset !== -1) {\r\n\t\t\t\tbakOff = bakeOffset + this._colorOffset;\r\n\t\t\t\toriOff = oriOffset + this._colorOffset;\r\n\t\t\t\tbatchVertices[bakOff] = oriVertexes[oriOff];\r\n\t\t\t\tbatchVertices[bakOff + 1] = oriVertexes[oriOff + 1];\r\n\t\t\t\tbatchVertices[bakOff + 2] = oriVertexes[oriOff + 2];\r\n\t\t\t\tbatchVertices[bakOff + 3] = oriVertexes[oriOff + 3];\r\n\t\t\t}\r\n\r\n\t\t\tif (this._uv0Offset !== -1) {\r\n\t\t\t\tbakOff = bakeOffset + this._uv0Offset;\r\n\t\t\t\toriOff = oriOffset + this._uv0Offset;\r\n\t\t\t\tbatchVertices[bakOff] = oriVertexes[oriOff];\r\n\t\t\t\tbatchVertices[bakOff + 1] = oriVertexes[oriOff + 1];\r\n\t\t\t}\r\n\r\n\t\t\t//if (lightmapScaleOffset) {//TODO:动态合并光照贴图UV如何处理\r\n\t\t\t//if (_uv1Offset !== -1)\r\n\t\t\t//Utils3D.transformLightingMapTexcoordByUV1Array(oriVertexes, oriOffset + _uv1Offset, lightmapScaleOffset, batchVertices, bakeOffset + _uv1Offset);\r\n\t\t\t//else\r\n\t\t\t//Utils3D.transformLightingMapTexcoordByUV0Array(oriVertexes, oriOffset + _uv0Offset, lightmapScaleOffset, batchVertices, bakeOffset + _uv1Offset);\r\n\t\t\t//}\r\n\r\n\t\t\tif (this._sTangentOffset !== -1) {\r\n\t\t\t\tbakOff = bakeOffset + this._sTangentOffset;\r\n\t\t\t\toriOff = oriOffset + this._sTangentOffset;\r\n\t\t\t\tbatchVertices[bakOff] = oriVertexes[oriOff];\r\n\t\t\t\tbatchVertices[bakOff + 1] = oriVertexes[oriOff + 1];\r\n\t\t\t\tbatchVertices[bakOff + 2] = oriVertexes[oriOff + 2];\r\n\t\t\t\tbatchVertices[bakOff + 3] = oriVertexes[oriOff + 3];\r\n\r\n\t\t\t\tbakOff = bakeOffset + this._sTangentOffset;\r\n\t\t\t\toriOff = oriOffset + this._sTangentOffset;\r\n\t\t\t\tbatchVertices[bakOff] = oriVertexes[oriOff];\r\n\t\t\t\tbatchVertices[bakOff + 1] = oriVertexes[oriOff + 1];\r\n\t\t\t\tbatchVertices[bakOff + 2] = oriVertexes[oriOff + 2];\r\n\t\t\t\tbatchVertices[bakOff + 3] = oriVertexes[oriOff + 3];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getBatchIndices(batchIndices: Int16Array, batchIndexCount: number, batchVertexCount: number, transform: Transform3D, subMesh: SubMesh, multiSubMesh: boolean): void {\r\n\t\tvar subIndices: Uint16Array = subMesh._indices;\r\n\t\tvar k: number, m: number, batchOffset: number;\r\n\t\tvar isInvert: boolean = transform._isFrontFaceInvert;\r\n\t\tif (multiSubMesh) {\r\n\t\t\tif (isInvert) {\r\n\t\t\t\tfor (k = 0, m = subIndices.length; k < m; k += 3) {\r\n\t\t\t\t\tbatchOffset = batchIndexCount + k;\r\n\t\t\t\t\tvar index: number = batchVertexCount + k;\r\n\t\t\t\t\tbatchIndices[batchOffset] = index;\r\n\t\t\t\t\tbatchIndices[batchOffset + 1] = index + 2;\r\n\t\t\t\t\tbatchIndices[batchOffset + 2] = index + 1;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (k = 0, m = subIndices.length; k < m; k += 3) {\r\n\t\t\t\t\tbatchOffset = batchIndexCount + k;\r\n\t\t\t\t\tindex = batchVertexCount + k;\r\n\t\t\t\t\tbatchIndices[batchOffset] = index;\r\n\t\t\t\t\tbatchIndices[batchOffset + 1] = index + 1;\r\n\t\t\t\t\tbatchIndices[batchOffset + 2] = index + 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (isInvert) {\r\n\t\t\t\tfor (k = 0, m = subIndices.length; k < m; k += 3) {\r\n\t\t\t\t\tbatchOffset = batchIndexCount + k;\r\n\t\t\t\t\tbatchIndices[batchOffset] = batchVertexCount + subIndices[k];\r\n\t\t\t\t\tbatchIndices[batchOffset + 1] = batchVertexCount + subIndices[k + 2];\r\n\t\t\t\t\tbatchIndices[batchOffset + 2] = batchVertexCount + subIndices[k + 1];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (k = 0, m = subIndices.length; k < m; k += 3) {\r\n\t\t\t\t\tbatchOffset = batchIndexCount + k;\r\n\t\t\t\t\tbatchIndices[batchOffset] = batchVertexCount + subIndices[k];\r\n\t\t\t\t\tbatchIndices[batchOffset + 1] = batchVertexCount + subIndices[k + 1];\r\n\t\t\t\t\tbatchIndices[batchOffset + 2] = batchVertexCount + subIndices[k + 2];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _flush(vertexCount: number, indexCount: number): void {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tthis._vertexBuffer.setData(this._vertices.buffer, 0, 0, vertexCount * (this._bufferState.vertexDeclaration.vertexStride));\r\n\t\tthis._indexBuffer.setData(this._indices, 0, 0, indexCount);\r\n\t\tgl.drawElements(gl.TRIANGLES, indexCount, gl.UNSIGNED_SHORT, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\tvar element: SubMeshRenderElement = (<SubMeshRenderElement>state.renderElement);\r\n\t\tvar vertexDeclaration: VertexDeclaration = element.vertexBatchVertexDeclaration;\r\n\t\tthis._bufferState = ILaya3D.MeshRenderDynamicBatchManager.instance._getBufferState(vertexDeclaration);\r\n\r\n\t\tthis._positionOffset = vertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_POSITION0)._offset / 4;\r\n\t\tvar normalElement: VertexElement = vertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_NORMAL0);\r\n\t\tthis._normalOffset = normalElement ? normalElement._offset / 4 : -1;\r\n\t\tvar colorElement: VertexElement = vertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_COLOR0);\r\n\t\tthis._colorOffset = colorElement ? colorElement._offset / 4 : -1;\r\n\t\tvar uv0Element: VertexElement = vertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE0);\r\n\t\tthis._uv0Offset = uv0Element ? uv0Element._offset / 4 : -1;\r\n\t\tvar uv1Element: VertexElement = vertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE1);\r\n\t\tthis._uv1Offset = uv1Element ? uv1Element._offset / 4 : -1;\r\n\t\tvar tangentElement: VertexElement = vertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_TANGENT0);\r\n\t\tthis._sTangentOffset = tangentElement ? tangentElement._offset / 4 : -1;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_render(context: RenderContext3D): void {\r\n\t\tthis._bufferState.bind();\r\n\t\tvar element: SubMeshRenderElement = (<SubMeshRenderElement>context.renderElement);\r\n\t\tvar vertexDeclaration: VertexDeclaration = element.vertexBatchVertexDeclaration;\r\n\t\tvar batchElements: SingletonList<SubMeshRenderElement> = element.vertexBatchElementList;\r\n\r\n\t\tvar batchVertexCount: number = 0;\r\n\t\tvar batchIndexCount: number = 0;\r\n\t\tvar floatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\tvar renderBatchCount: number = 0;\r\n\t\tvar elementCount: number = batchElements.length;\r\n\t\tvar elements: SubMeshRenderElement[] = batchElements.elements;\r\n\t\tfor (var i: number = 0; i < elementCount; i++) {\r\n\t\t\tvar subElement: SubMeshRenderElement = elements[i];\r\n\t\t\tvar subMesh: SubMesh = (<SubMesh>subElement._geometry);\r\n\t\t\tvar indexCount: number = subMesh._indexCount;\r\n\t\t\tif (batchIndexCount + indexCount > SubMeshDynamicBatch.maxIndicesCount) {\r\n\t\t\t\tthis._flush(batchVertexCount, batchIndexCount);\r\n\t\t\t\trenderBatchCount++;\r\n\t\t\t\tStat.trianglesFaces += batchIndexCount / 3;\r\n\t\t\t\tbatchVertexCount = batchIndexCount = 0;\r\n\t\t\t}\r\n\t\t\tvar transform: Transform3D = subElement._transform;\r\n\t\t\tthis._getBatchVertices(vertexDeclaration, this._vertices, batchVertexCount, transform, /*(element.render as MeshRender)*/ subElement, subMesh);\r\n\t\t\tthis._getBatchIndices(this._indices, batchIndexCount, batchVertexCount, transform, subMesh, subElement._dynamicMultiSubMesh);\r\n\t\t\tbatchVertexCount += subElement._dynamicVertexCount;\r\n\t\t\tbatchIndexCount += indexCount;\r\n\t\t}\r\n\t\tthis._flush(batchVertexCount, batchIndexCount);\r\n\t\trenderBatchCount++;\r\n\t\tStat.renderBatches += renderBatchCount;\r\n\t\tStat.savedRenderBatches += elementCount - renderBatchCount;\r\n\t\tStat.trianglesFaces += batchIndexCount / 3;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { DynamicBatchManager } from \"./DynamicBatchManager\";\r\nimport { SubMeshDynamicBatch } from \"./SubMeshDynamicBatch\";\r\nimport { VertexDeclaration } from \"./VertexDeclaration\";\r\nimport { VertexBuffer3D } from \"./VertexBuffer3D\";\r\nimport { BufferState } from \"../core/BufferState\"\r\nimport { BatchMark } from \"../core/render/BatchMark\"\r\nimport { RenderElement } from \"../core/render/RenderElement\"\r\nimport { SubMeshRenderElement } from \"../core/render/SubMeshRenderElement\"\r\nimport { SingletonList } from \"../component/SingletonList\";\r\n\r\n/**\r\n * @internal\r\n * <code>MeshSprite3DDynamicBatchManager</code> 类用于网格精灵动态批处理管理。\r\n */\r\nexport class MeshRenderDynamicBatchManager extends DynamicBatchManager {\r\n\t/** @internal */\r\n\tstatic instance: MeshRenderDynamicBatchManager = new MeshRenderDynamicBatchManager();\r\n\r\n\t/**@internal */\r\n\tprivate _instanceBatchOpaqueMarks: any[] = [];\r\n\t/**@internal */\r\n\tprivate _vertexBatchOpaqueMarks: any[] = [];\r\n\r\n\t/**@internal */\r\n\tprivate _cacheBufferStates: BufferState[] = [];\r\n\t/**@internal [只读]*/\r\n\t_updateCountMark: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>MeshSprite3DDynamicBatchManager</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._updateCountMark = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetInstanceBatchOpaquaMark(receiveShadow: boolean, materialID: number, subMeshID: number, invertFace: boolean): BatchMark {\r\n\t\tvar instanceReceiveShadowMarks: any[] = (this._instanceBatchOpaqueMarks[receiveShadow ? 0 : 1]) || (this._instanceBatchOpaqueMarks[receiveShadow ? 0 : 1] = []);\r\n\t\tvar instanceMaterialMarks: any[] = (instanceReceiveShadowMarks[materialID]) || (instanceReceiveShadowMarks[materialID] = []);\r\n\t\tvar instancSubMeshMarks: BatchMark[] = (instanceMaterialMarks[subMeshID]) || (instanceMaterialMarks[subMeshID] = []);\r\n\t\treturn instancSubMeshMarks[invertFace ? 1 : 0] || (instancSubMeshMarks[invertFace ? 1 : 0] = new BatchMark());\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetVertexBatchOpaquaMark(lightMapIndex: number, receiveShadow: boolean, materialID: number, verDecID: number): BatchMark {\r\n\t\tvar dynLightMapMarks: any[] = (this._vertexBatchOpaqueMarks[lightMapIndex]) || (this._vertexBatchOpaqueMarks[lightMapIndex] = []);\r\n\t\tvar dynReceiveShadowMarks: any[] = (dynLightMapMarks[receiveShadow ? 0 : 1]) || (dynLightMapMarks[receiveShadow ? 0 : 1] = []);\r\n\t\tvar dynMaterialMarks: BatchMark[] = (dynReceiveShadowMarks[materialID]) || (dynReceiveShadowMarks[materialID] = []);\r\n\t\treturn dynMaterialMarks[verDecID] || (dynMaterialMarks[verDecID] = new BatchMark());\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getBufferState(vertexDeclaration: VertexDeclaration): BufferState {\r\n\t\tvar bufferState: BufferState = this._cacheBufferStates[vertexDeclaration.id];\r\n\t\tif (!bufferState) {\r\n\t\t\tvar instance: SubMeshDynamicBatch = SubMeshDynamicBatch.instance;\r\n\t\t\tbufferState = new BufferState();\r\n\t\t\tbufferState.bind();\r\n\t\t\tvar vertexBuffer: VertexBuffer3D = instance._vertexBuffer;\r\n\t\t\tvertexBuffer.vertexDeclaration = vertexDeclaration;\r\n\t\t\tbufferState.applyVertexBuffer(vertexBuffer);\r\n\t\t\tbufferState.applyIndexBuffer(instance._indexBuffer);\r\n\t\t\tbufferState.unBind();\r\n\t\t\tthis._cacheBufferStates[vertexDeclaration.id] = bufferState;\r\n\t\t}\r\n\t\treturn bufferState;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_getBatchRenderElementFromPool(): RenderElement {\r\n\t\tvar renderElement: SubMeshRenderElement = (<SubMeshRenderElement>this._batchRenderElementPool[this._batchRenderElementPoolIndex++]);\r\n\t\tif (!renderElement) {\r\n\t\t\trenderElement = new SubMeshRenderElement();\r\n\t\t\tthis._batchRenderElementPool[this._batchRenderElementPoolIndex - 1] = renderElement;\r\n\t\t\trenderElement.vertexBatchElementList = new SingletonList<SubMeshRenderElement>();\r\n\t\t\trenderElement.instanceBatchElementList = new SingletonList<SubMeshRenderElement>();\r\n\t\t}\r\n\t\treturn renderElement;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_clear(): void {\r\n\t\tsuper._clear();\r\n\t\tthis._updateCountMark++;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { RenderableSprite3D } from \"./RenderableSprite3D\";\r\nimport { MeshFilter } from \"./MeshFilter\";\r\nimport { MeshRenderer } from \"./MeshRenderer\";\r\nimport { Material } from \"./material/Material\";\r\nimport { DynamicBatchManager } from \"../graphics/DynamicBatchManager\"\r\nimport { MeshRenderDynamicBatchManager } from \"../graphics/MeshRenderDynamicBatchManager\"\r\nimport { MeshRenderStaticBatchManager } from \"../graphics/MeshRenderStaticBatchManager\"\r\nimport { StaticBatchManager } from \"../graphics/StaticBatchManager\"\r\nimport { Vector4 } from \"../math/Vector4\"\r\nimport { Mesh } from \"../resource/models/Mesh\"\r\nimport { Node } from \"../../display/Node\"\r\nimport { MeshSprite3DShaderDeclaration } from \"./MeshSprite3DShaderDeclaration\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Shader3D } from \"../shader/Shader3D\";\r\n\r\n/**\r\n * <code>MeshSprite3D</code> 类用于创建网格。\r\n */\r\nexport class MeshSprite3D extends RenderableSprite3D {\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tMeshSprite3DShaderDeclaration.SHADERDEFINE_UV0 = Shader3D.getDefineByName(\"UV\");\r\n\t\tMeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR = Shader3D.getDefineByName(\"COLOR\");\r\n\t\tMeshSprite3DShaderDeclaration.SHADERDEFINE_UV1 = Shader3D.getDefineByName(\"UV1\");\r\n\t\tMeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE = Shader3D.getDefineByName(\"GPU_INSTANCE\");\r\n\t\tMeshSprite3DShaderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION = Shader3D.getDefineByName(\"SPECCUBE_BOX_PROJECTION\");\r\n\t\tStaticBatchManager._registerManager(MeshRenderStaticBatchManager.instance);\r\n\t\tDynamicBatchManager._registerManager(MeshRenderDynamicBatchManager.instance);\r\n\t}\r\n\r\n\tprivate _meshFilter: MeshFilter;\r\n\r\n\t/**\r\n\t * 网格过滤器。\r\n\t */\r\n\tget meshFilter(): MeshFilter {\r\n\t\treturn (<MeshFilter>this._meshFilter);\r\n\t}\r\n\r\n\t/**\r\n\t * 网格渲染器。\r\n\t */\r\n\tget meshRenderer(): MeshRenderer {\r\n\t\treturn (<MeshRenderer>this._render);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>MeshSprite3D</code> 实例。\r\n\t * @param mesh 网格,同时会加载网格所用默认材质。\r\n\t * @param name 名字。\r\n\t */\r\n\tconstructor(mesh: Mesh = null, name: string = null) {\r\n\t\tsuper(name);\r\n\t\tthis._meshFilter = new MeshFilter(this);\r\n\t\tthis._render = new MeshRenderer(this);\r\n\t\t(mesh) && (this._meshFilter.sharedMesh = mesh);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tvar render: MeshRenderer = this.meshRenderer;\r\n\t\tvar lightmapIndex: any = data.lightmapIndex;\r\n\t\t(lightmapIndex != null) && (render.lightmapIndex = lightmapIndex);\r\n\t\tvar lightmapScaleOffsetArray: any[] = data.lightmapScaleOffset;\r\n\t\t(lightmapScaleOffsetArray) && (render.lightmapScaleOffset = new Vector4(lightmapScaleOffsetArray[0], lightmapScaleOffsetArray[1], lightmapScaleOffsetArray[2], lightmapScaleOffsetArray[3]));\r\n\t\t(data.meshPath != undefined) && (this.meshFilter.sharedMesh = Loader.getRes(data.meshPath));\r\n\t\t(data.enableRender != undefined) && (render.enable = data.enableRender);\r\n\t\t(data.receiveShadows != undefined) && (render.receiveShadow = data.receiveShadows);\r\n\t\t(data.castShadow != undefined) && (render.castShadow = data.castShadow);\r\n\t\tvar materials: any[] = data.materials;\r\n\t\tif (materials) {\r\n\t\t\tvar sharedMaterials: Material[] = render.sharedMaterials;\r\n\t\t\tvar materialCount: number = materials.length;\r\n\t\t\tsharedMaterials.length = materialCount;\r\n\t\t\tfor (var i: number = 0; i < materialCount; i++) {\r\n\t\t\t\tsharedMaterials[i] = Loader.getRes(materials[i].path);\r\n\t\t\t}\r\n\r\n\t\t\trender.sharedMaterials = sharedMaterials;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_addToInitStaticBatchManager(): void {\r\n\t\tif (this.meshFilter.sharedMesh)//无sharedMesh精灵会报错\r\n\t\t\tMeshRenderStaticBatchManager.instance._addBatchSprite(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(destObject: any, rootSprite: Node, dstSprite: Node): void {\r\n\t\tvar meshSprite3D: MeshSprite3D = (<MeshSprite3D>destObject);\r\n\t\tmeshSprite3D._meshFilter.sharedMesh = this._meshFilter.sharedMesh;\r\n\t\tvar meshRender: MeshRenderer = (<MeshRenderer>this._render);\r\n\t\tvar destMeshRender: MeshRenderer = (<MeshRenderer>meshSprite3D._render);\r\n\t\tdestMeshRender.enable = meshRender.enable;\r\n\t\tdestMeshRender.sharedMaterials = meshRender.sharedMaterials;\r\n\t\tdestMeshRender.castShadow = meshRender.castShadow;\r\n\t\tvar lightmapScaleOffset: Vector4 = meshRender.lightmapScaleOffset;\r\n\t\tlightmapScaleOffset && (destMeshRender.lightmapScaleOffset = lightmapScaleOffset.clone());\r\n\t\tdestMeshRender.lightmapIndex = meshRender.lightmapIndex;\r\n\t\tdestMeshRender.receiveShadow = meshRender.receiveShadow;\r\n\t\tdestMeshRender.sortingFudge = meshRender.sortingFudge;\r\n\t\tsuper._cloneTo(destObject, rootSprite, dstSprite);//父类函数在最后,组件应该最后赋值，否则获取材质默认值等相关函数会有问题\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\t\r\n\t */\r\n\tdestroy(destroyChild: boolean = true): void {\r\n\t\tif (this.destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy(destroyChild);\r\n\t\tthis._meshFilter.destroy();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new MeshSprite3D();\r\n\t}\r\n\r\n}\r\n\r\n","/**\r\n\t * ...\r\n\t * @author ...\r\n\t */\r\nexport class GradientMode {\r\n\t/**\r\n\t * 找到与请求的评估时间相邻的两个键,并线性插值在他们之间,以获得一种混合的颜色。\r\n\t */\r\n\tstatic Blend: number = 0;\r\n\r\n\t/**\r\n\t * 返回一个固定的颜色，通过查找第一个键的时间值大于所请求的评估时间。\r\n\t */\r\n\tstatic Fixed: number = 1;\r\n}\r\n\r\n","import { GradientMode } from \"./GradientMode\";\r\nimport { IClone } from \"./IClone\"\r\nimport { Color } from \"../math/Color\"\r\n\r\n\r\n/**\r\n * <code>Gradient</code> 类用于创建颜色渐变。\r\n */\r\nexport class Gradient implements IClone {\r\n\tprivate _mode: number = 0;\r\n\tprivate _maxColorRGBKeysCount: number = 0;\r\n\tprivate _maxColorAlphaKeysCount: number = 0;\r\n\tprivate _colorRGBKeysCount: number = 0;\r\n\tprivate _colorAlphaKeysCount: number = 0;\r\n\r\n\t/**@internal */\r\n\t_alphaElements: Float32Array = null;\r\n\t/**@internal */\r\n\t_rgbElements: Float32Array = null;\r\n\r\n\t/**\r\n\t * 获取梯度模式。\r\n\t * @return  梯度模式。\r\n\t */\r\n\tget mode(): number {\r\n\t\treturn this._mode;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置梯度模式。\r\n\t * @param value 梯度模式。\r\n\t */\r\n\tset mode(value: number) {\r\n\t\tthis._mode = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色RGB数量。\r\n\t * @return 颜色RGB数量。\r\n\t */\r\n\tget colorRGBKeysCount(): number {\r\n\t\treturn this._colorRGBKeysCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色Alpha数量。\r\n\t * @return 颜色Alpha数量。\r\n\t */\r\n\tget colorAlphaKeysCount(): number {\r\n\t\treturn this._colorAlphaKeysCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取最大颜色RGB帧数量。\r\n\t * @return 最大RGB帧数量。\r\n\t */\r\n\tget maxColorRGBKeysCount(): number {\r\n\t\treturn this._maxColorRGBKeysCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取最大颜色Alpha帧数量。\r\n\t * @return 最大Alpha帧数量。\r\n\t */\r\n\tget maxColorAlphaKeysCount(): number {\r\n\t\treturn this._maxColorAlphaKeysCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Gradient</code> 实例。\r\n\t * @param maxColorRGBKeyCount 最大RGB帧个数。\r\n\t * @param maxColorAlphaKeyCount 最大Alpha帧个数。\r\n\t */\r\n\tconstructor(maxColorRGBKeyCount: number, maxColorAlphaKeyCount: number) {\r\n\t\tthis._maxColorRGBKeysCount = maxColorRGBKeyCount;\r\n\t\tthis._maxColorAlphaKeysCount = maxColorAlphaKeyCount;\r\n\t\tthis._rgbElements = new Float32Array(maxColorRGBKeyCount * 4);\r\n\t\tthis._alphaElements = new Float32Array(maxColorAlphaKeyCount * 2);\r\n\t}\r\n\r\n\t/**\r\n\t * 增加颜色RGB帧。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue RGB值。\r\n\t */\r\n\taddColorRGB(key: number, value: Color): void {\r\n\t\tif (this._colorRGBKeysCount < this._maxColorRGBKeysCount) {\r\n\t\t\tvar offset: number = this._colorRGBKeysCount * 4;\r\n\t\t\tthis._rgbElements[offset] = key;\r\n\t\t\tthis._rgbElements[offset + 1] = value.r;\r\n\t\t\tthis._rgbElements[offset + 2] = value.g;\r\n\t\t\tthis._rgbElements[offset + 3] = value.b;\r\n\t\t\tthis._colorRGBKeysCount++;\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Gradient:warning:data count must lessEqual than \" + this._maxColorRGBKeysCount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 增加颜色Alpha帧。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue Alpha值。\r\n\t */\r\n\taddColorAlpha(key: number, value: number): void {\r\n\t\tif (this._colorAlphaKeysCount < this._maxColorAlphaKeysCount) {\r\n\t\t\tvar offset: number = this._colorAlphaKeysCount * 2;\r\n\t\t\tthis._alphaElements[offset] = key;\r\n\t\t\tthis._alphaElements[offset + 1] = value;\r\n\t\t\tthis._colorAlphaKeysCount++;\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Gradient:warning:data count must lessEqual than \" + this._maxColorAlphaKeysCount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 更新颜色RGB帧。\r\n\t * @param   index 索引。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue RGB值。\r\n\t */\r\n\tupdateColorRGB(index: number, key: number, value: Color): void {//TODO:以key为键自动排序\r\n\t\tif (index < this._colorRGBKeysCount) {\r\n\t\t\tvar offset: number = index * 4;\r\n\t\t\tthis._rgbElements[offset] = key;\r\n\t\t\tthis._rgbElements[offset + 1] = value.r;\r\n\t\t\tthis._rgbElements[offset + 2] = value.g;\r\n\t\t\tthis._rgbElements[offset + 3] = value.b;\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Gradient:warning:index must lessEqual than colorRGBKeysCount:\" + this._colorRGBKeysCount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 更新颜色Alpha帧。\r\n\t * @param   index 索引。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue Alpha值。\r\n\t */\r\n\tupdateColorAlpha(index: number, key: number, value: number): void {\r\n\t\tif (index < this._colorAlphaKeysCount) {\r\n\t\t\tvar offset: number = index * 2;\r\n\t\t\tthis._alphaElements[offset] = key;\r\n\t\t\tthis._alphaElements[offset + 1] = value;\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Gradient:warning:index must lessEqual than colorAlphaKeysCount:\" + this._colorAlphaKeysCount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 通过插值获取RGB颜色。\r\n\t * @param  lerpFactor 插值因子。\r\n\t * @param  out 颜色结果。\r\n\t * @param  开始查找索引。\r\n\t * @return 结果索引。\r\n\t */\r\n\tevaluateColorRGB(lerpFactor: number, out: Color, startSearchIndex: number = 0, reverseSearch: boolean = false): number {\r\n\t\tlerpFactor = Math.min(Math.max(lerpFactor, 0.0), 1.0);\r\n\r\n\t\tvar rgbElements: Float32Array = this._rgbElements;\r\n\t\tvar curIndex: number = startSearchIndex;\r\n\r\n\t\tif (reverseSearch) {\r\n\t\t\tfor (var i: number = curIndex; i >= 0; i--) {\r\n\t\t\t\tvar offset: number = i * 4;\r\n\t\t\t\tvar left: number = rgbElements[offset];\r\n\t\t\t\tif (lerpFactor === left) {\r\n\t\t\t\t\tout.r = rgbElements[offset + 1];\r\n\t\t\t\t\tout.g = rgbElements[offset + 2];\r\n\t\t\t\t\tout.b = rgbElements[offset + 3];\r\n\t\t\t\t\treturn curIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (this._mode) {\r\n\t\t\t\t\tcase GradientMode.Blend:\r\n\t\t\t\t\t\tif (lerpFactor > left) {\r\n\t\t\t\t\t\t\tvar right: number = rgbElements[offset + 4];\r\n\t\t\t\t\t\t\tif (lerpFactor > right)\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tvar diff: number = right - left;\r\n\t\t\t\t\t\t\tvar y1: number = right - lerpFactor;\r\n\t\t\t\t\t\t\tvar y2: number = lerpFactor - left;\r\n\t\t\t\t\t\t\tout.r = (y1 * rgbElements[offset + 1] + y2 * rgbElements[offset + 5]) / diff;\r\n\t\t\t\t\t\t\tout.g = (y1 * rgbElements[offset + 2] + y2 * rgbElements[offset + 6]) / diff;\r\n\t\t\t\t\t\t\tout.b = (y1 * rgbElements[offset + 3] + y2 * rgbElements[offset + 7]) / diff;\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase GradientMode.Fixed:\r\n\t\t\t\t\t\tif (lerpFactor > left) {\r\n\t\t\t\t\t\t\tif (lerpFactor > rgbElements[offset + 4])\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tout.r = rgbElements[offset + 5];\r\n\t\t\t\t\t\t\tout.g = rgbElements[offset + 6];\r\n\t\t\t\t\t\t\tout.b = rgbElements[offset + 7];\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (var i: number = 0, n: number = this._rgbElements.length; i < n; i++) {\r\n\t\t\t\toffset = i * 4;\r\n\t\t\t\tvar right: number = rgbElements[offset];\r\n\t\t\t\tif (lerpFactor === right) {\r\n\t\t\t\t\tout.r = rgbElements[offset + 1];\r\n\t\t\t\t\tout.g = rgbElements[offset + 2];\r\n\t\t\t\t\tout.b = rgbElements[offset + 3];\r\n\t\t\t\t\treturn curIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (this._mode) {\r\n\t\t\t\t\tcase GradientMode.Blend:\r\n\t\t\t\t\t\tif (lerpFactor < right) {\r\n\t\t\t\t\t\t\tvar left: number = rgbElements[offset - 4];\r\n\t\t\t\t\t\t\tif (lerpFactor < left)\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tvar diff: number = right - left;\r\n\t\t\t\t\t\t\tvar y1: number = right - lerpFactor;\r\n\t\t\t\t\t\t\tvar y2: number = lerpFactor - left;\r\n\t\t\t\t\t\t\tout.r = (y1 * rgbElements[offset - 3] + y2 * rgbElements[offset + 1]) / diff;\r\n\t\t\t\t\t\t\tout.g = (y1 * rgbElements[offset - 2] + y2 * rgbElements[offset + 2]) / diff;\r\n\t\t\t\t\t\t\tout.b = (y1 * rgbElements[offset - 1] + y2 * rgbElements[offset + 3]) / diff;\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex++;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase GradientMode.Fixed:\r\n\t\t\t\t\t\tif (lerpFactor < right) {\r\n\t\t\t\t\t\t\tif (lerpFactor < rgbElements[offset - 4])\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tout.r = rgbElements[offset + 1];\r\n\t\t\t\t\t\t\tout.g = rgbElements[offset + 2];\r\n\t\t\t\t\t\t\tout.b = rgbElements[offset + 3];\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex++;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn curIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过插值获取透明值。\r\n\t * @param  lerpFactor 插值因子。\r\n\t * @param  out 颜色结果。\r\n\t * @param  开始查找索引。\r\n\t * @return 结果索引 。\r\n\t */\r\n\tevaluateColorAlpha(lerpFactor: number, outColor: Color, startSearchIndex: number = 0, reverseSearch: boolean = false): number {\r\n\t\tlerpFactor = Math.min(Math.max(lerpFactor, 0.0), 1.0);\r\n\t\tvar alphaElements: Float32Array = this._alphaElements;\r\n\t\tvar curIndex: number = startSearchIndex;\r\n\r\n\t\tif (reverseSearch) {\r\n\t\t\tfor (var i: number = curIndex; i >= 0; i--) {\r\n\t\t\t\tvar offset: number = i * 2;\r\n\t\t\t\tvar left: number = alphaElements[offset];\r\n\t\t\t\tif (lerpFactor === left) {\r\n\t\t\t\t\toutColor.a = alphaElements[offset + 1];\r\n\t\t\t\t\treturn curIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (this._mode) {\r\n\t\t\t\t\tcase GradientMode.Blend:\r\n\t\t\t\t\t\tif (lerpFactor > left) {\r\n\t\t\t\t\t\t\tvar right: number = alphaElements[offset + 2];\r\n\t\t\t\t\t\t\tif (lerpFactor > right)\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\r\n\t\t\t\t\t\t\tvar diff: number = right - left;\r\n\t\t\t\t\t\t\tvar x1: number = right - lerpFactor;\r\n\t\t\t\t\t\t\tvar x2: number = lerpFactor - left;\r\n\t\t\t\t\t\t\toutColor.a = (x1 * alphaElements[offset + 1] + x2 * alphaElements[offset + 3]) / diff;\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase GradientMode.Fixed:\r\n\t\t\t\t\t\tif (lerpFactor > left) {\r\n\t\t\t\t\t\t\tif (lerpFactor > alphaElements[offset + 2])\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\toutColor.a = alphaElements[offset + 3];\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (var i: number = curIndex, n: number = this._alphaElements.length; i < n; i++) {\r\n\t\t\t\tvar offset: number = i * 2;\r\n\t\t\t\tvar right: number = alphaElements[offset];\r\n\t\t\t\tif (lerpFactor === right) {\r\n\t\t\t\t\toutColor.a = alphaElements[offset + 1];\r\n\t\t\t\t\treturn curIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (this._mode) {\r\n\t\t\t\t\tcase GradientMode.Blend:\r\n\t\t\t\t\t\tif (lerpFactor < right) {\r\n\t\t\t\t\t\t\tvar left: number = alphaElements[offset - 2];\r\n\t\t\t\t\t\t\tif (lerpFactor < left)\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tvar diff: number = right - left;\r\n\t\t\t\t\t\t\tvar x1: number = right - lerpFactor;\r\n\t\t\t\t\t\t\tvar x2: number = lerpFactor - left;\r\n\t\t\t\t\t\t\toutColor.a = (x1 * alphaElements[offset - 1] + x2 * alphaElements[offset + 1]) / diff;\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex++;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase GradientMode.Fixed:\r\n\t\t\t\t\t\tif (lerpFactor < right) {\r\n\t\t\t\t\t\t\tif (lerpFactor < alphaElements[offset - 2])\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\toutColor.a = alphaElements[offset + 1];\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex++;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn curIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientDataColor: Gradient = (<Gradient>destObject);\r\n\t\tvar i: number, n: number;\r\n\t\tdestGradientDataColor._colorAlphaKeysCount = this._colorAlphaKeysCount;\r\n\t\tvar destAlphaElements: Float32Array = destGradientDataColor._alphaElements;\r\n\t\tfor (i = 0, n = this._alphaElements.length; i < n; i++)\r\n\t\t\tdestAlphaElements[i] = this._alphaElements[i];\r\n\r\n\t\tdestGradientDataColor._colorRGBKeysCount = this._colorRGBKeysCount;\r\n\t\tvar destRGBElements: Float32Array = destGradientDataColor._rgbElements;\r\n\t\tfor (i = 0, n = this._rgbElements.length; i < n; i++)\r\n\t\t\tdestRGBElements[i] = this._rgbElements[i];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientDataColor: Gradient = new Gradient(this._maxColorRGBKeysCount, this._maxColorAlphaKeysCount);\r\n\t\tthis.cloneTo(destGradientDataColor);\r\n\t\treturn destGradientDataColor;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../IClone\"\r\n\r\n/**\r\n * <code>Burst</code> 类用于粒子的爆裂描述。\r\n */\r\nexport class Burst implements IClone {\r\n\t/** 爆裂时间,单位为秒。*/\r\n\tprivate _time: number;\r\n\t/** 爆裂的最小数量。*/\r\n\tprivate _minCount: number;\r\n\t/** 爆裂的最大数量。*/\r\n\tprivate _maxCount: number;\r\n\r\n\t/**\r\n\t * 获取爆裂时间,单位为秒。\r\n\t * @return 爆裂时间,单位为秒。\r\n\t */\r\n\tget time(): number {\r\n\t\treturn this._time;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取爆裂的最小数量。\r\n\t * @return 爆裂的最小数量。\r\n\t */\r\n\tget minCount(): number {\r\n\t\treturn this._minCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取爆裂的最大数量。\r\n\t * @return 爆裂的最大数量。\r\n\t */\r\n\tget maxCount(): number {\r\n\t\treturn this._maxCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Burst</code> 实例。\r\n\t * @param time 爆裂时间,单位为秒。\r\n\t * @param minCount 爆裂的最小数量。\r\n\t * @param time 爆裂的最大数量。\r\n\t */\r\n\tconstructor(time: number, minCount: number, maxCount: number) {\r\n\t\tthis._time = time;\r\n\t\tthis._minCount = minCount;\r\n\t\tthis._maxCount = maxCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destBurst: Burst = (<Burst>destObject);\r\n\t\tdestBurst._time = this._time;\r\n\t\tdestBurst._minCount = this._minCount;\r\n\t\tdestBurst._maxCount = this._maxCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destBurst: Burst = new Burst(this._time, this._minCount, this._maxCount);\r\n\t\tthis.cloneTo(destBurst);\r\n\t\treturn destBurst;\r\n\t}\r\n}\r\n\r\n","import { Gradient } from \"../../Gradient\"\r\nimport { IClone } from \"../../IClone\"\r\nimport { Vector4 } from \"../../../math/Vector4\"\r\n\r\n/**\r\n * <code>GradientColor</code> 类用于创建渐变颜色。\r\n */\r\nexport class GradientColor implements IClone {\r\n\t/**\r\n\t * 通过固定颜色创建一个 <code>GradientColor</code> 实例。\r\n\t * @param constant 固定颜色。\r\n\t */\r\n\tstatic createByConstant(constant: Vector4): GradientColor {\r\n\t\tvar gradientColor: GradientColor = new GradientColor();\r\n\t\tgradientColor._type = 0;\r\n\t\tgradientColor._constant = constant;\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过渐变颜色创建一个 <code>GradientColor</code> 实例。\r\n\t * @param gradient 渐变色。\r\n\t */\r\n\tstatic createByGradient(gradient: Gradient): GradientColor {\r\n\t\tvar gradientColor: GradientColor = new GradientColor();\r\n\t\tgradientColor._type = 1;\r\n\t\tgradientColor._gradient = gradient;\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双固定颜色创建一个 <code>GradientColor</code> 实例。\r\n\t * @param minConstant 最小固定颜色。\r\n\t * @param maxConstant 最大固定颜色。\r\n\t */\r\n\tstatic createByRandomTwoConstant(minConstant: Vector4, maxConstant: Vector4): GradientColor {\r\n\t\tvar gradientColor: GradientColor = new GradientColor();\r\n\t\tgradientColor._type = 2;\r\n\t\tgradientColor._constantMin = minConstant;\r\n\t\tgradientColor._constantMax = maxConstant;\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双渐变颜色创建一个 <code>GradientColor</code> 实例。\r\n\t * @param minGradient 最小渐变颜色。\r\n\t * @param maxGradient 最大渐变颜色。\r\n\t */\r\n\tstatic createByRandomTwoGradient(minGradient: Gradient, maxGradient: Gradient): GradientColor {\r\n\t\tvar gradientColor: GradientColor = new GradientColor();\r\n\t\tgradientColor._type = 3;\r\n\t\tgradientColor._gradientMin = minGradient;\r\n\t\tgradientColor._gradientMax = maxGradient;\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\r\n\tprivate _constant: Vector4 = null;\r\n\tprivate _constantMin: Vector4 = null;\r\n\tprivate _constantMax: Vector4 = null;\r\n\tprivate _gradient: Gradient = null;\r\n\tprivate _gradientMin: Gradient = null;\r\n\tprivate _gradientMax: Gradient = null;\r\n\r\n\t/**\r\n\t *生命周期颜色类型,0为固定颜色模式,1渐变模式,2为随机双固定颜色模式,3随机双渐变模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t * 固定颜色。\r\n\t */\r\n\tget constant(): Vector4 {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小固定颜色。\r\n\t */\r\n\tget constantMin(): Vector4 {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大固定颜色。\r\n\t */\r\n\tget constantMax(): Vector4 {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变颜色。\r\n\t */\r\n\tget gradient(): Gradient {\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小渐变颜色。\r\n\t */\r\n\tget gradientMin(): Gradient {\r\n\t\treturn this._gradientMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大渐变颜色。\r\n\t */\r\n\tget gradientMax(): Gradient {\r\n\t\treturn this._gradientMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientColor,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientColor: GradientColor = (<GradientColor>destObject);\r\n\t\tdestGradientColor._type = this._type;\r\n\t\tthis._constant.cloneTo(destGradientColor._constant);\r\n\t\tthis._constantMin.cloneTo(destGradientColor._constantMin);\r\n\t\tthis._constantMax.cloneTo(destGradientColor._constantMax);\r\n\t\tthis._gradient.cloneTo(destGradientColor._gradient);\r\n\t\tthis._gradientMin.cloneTo(destGradientColor._gradientMin);\r\n\t\tthis._gradientMax.cloneTo(destGradientColor._gradientMax);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientColor: GradientColor = new GradientColor();\r\n\t\tthis.cloneTo(destGradientColor);\r\n\t\treturn destGradientColor;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientColor } from \"./GradientColor\";\r\n/**\r\n * <code>ColorOverLifetime</code> 类用于粒子的生命周期颜色。\r\n */\r\nexport class ColorOverLifetime {\r\n\tprivate _color: GradientColor;\r\n\r\n\t/**是否启用。*/\r\n\tenable: boolean;\r\n\r\n\t/**\r\n\t *获取颜色。\r\n\t */\r\n\tget color(): GradientColor {\r\n\t\treturn this._color;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>ColorOverLifetime</code> 实例。\r\n\t */\r\n\tconstructor(color: GradientColor) {\r\n\t\tthis._color = color;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destColorOverLifetime: ColorOverLifetime = (<ColorOverLifetime>destObject);\r\n\t\tthis._color.cloneTo(destColorOverLifetime._color);\r\n\t\tdestColorOverLifetime.enable = this.enable;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destColor: GradientColor;\r\n\t\tswitch (this._color.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tdestColor = GradientColor.createByConstant(this._color.constant.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdestColor = GradientColor.createByGradient(this._color.gradient.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tdestColor = GradientColor.createByRandomTwoConstant(this._color.constantMin.clone(), this._color.constantMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tdestColor = GradientColor.createByRandomTwoGradient(this._color.gradientMin.clone(), this._color.gradientMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destColorOverLifetime: ColorOverLifetime = new ColorOverLifetime(destColor);\r\n\t\tdestColorOverLifetime.enable = this.enable;\r\n\t\treturn destColorOverLifetime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientDataInt } from \"./GradientDataInt\";\r\nimport { IClone } from \"../../IClone\"\r\n\r\n\r\n/**\r\n * <code>FrameOverTime</code> 类用于创建时间帧。\r\n */\r\nexport class FrameOverTime implements IClone {\r\n\t/**\r\n\t * 通过固定帧创建一个 <code>FrameOverTime</code> 实例。\r\n\t * @param\tconstant 固定帧。\r\n\t * @return 时间帧。\r\n\t */\r\n\tstatic createByConstant(constant: number = 0): FrameOverTime {\r\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\r\n\t\trotationOverLifetime._type = 0;\r\n\t\trotationOverLifetime._constant = constant;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过时间帧创建一个 <code>FrameOverTime</code> 实例。\r\n\t * @param\toverTime 时间帧。\r\n\t * @return 时间帧。\r\n\t */\r\n\tstatic createByOverTime(overTime: GradientDataInt): FrameOverTime {\r\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\r\n\t\trotationOverLifetime._type = 1;\r\n\t\trotationOverLifetime._overTime = overTime;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双固定帧创建一个 <code>FrameOverTime</code> 实例。\r\n\t * @param\tconstantMin 最小固定帧。\r\n\t * @param\tconstantMax 最大固定帧。\r\n\t * @return 时间帧。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: number = 0, constantMax: number = 0): FrameOverTime {\r\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\r\n\t\trotationOverLifetime._type = 2;\r\n\t\trotationOverLifetime._constantMin = constantMin;\r\n\t\trotationOverLifetime._constantMax = constantMax;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双时间帧创建一个 <code>FrameOverTime</code> 实例。\r\n\t * @param\tgradientFrameMin 最小时间帧。\r\n\t * @param\tgradientFrameMax 最大时间帧。\r\n\t * @return 时间帧。\r\n\t */\r\n\tstatic createByRandomTwoOverTime(gradientFrameMin: GradientDataInt, gradientFrameMax: GradientDataInt): FrameOverTime {\r\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\r\n\t\trotationOverLifetime._type = 3;\r\n\t\trotationOverLifetime._overTimeMin = gradientFrameMin;\r\n\t\trotationOverLifetime._overTimeMax = gradientFrameMax;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\r\n\tprivate _constant: number = 0;\r\n\r\n\tprivate _overTime: GradientDataInt = null;\r\n\r\n\tprivate _constantMin: number = 0;\r\n\tprivate _constantMax: number = 0;\r\n\r\n\tprivate _overTimeMin: GradientDataInt = null;\r\n\tprivate _overTimeMax: GradientDataInt = null;\r\n\r\n\t/**\r\n\t *生命周期旋转类型,0常量模式，1曲线模式，2随机双常量模式，3随机双曲线模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t * 固定帧。\r\n\t */\r\n\tget constant(): number {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * 时间帧。\r\n\t */\r\n\tget frameOverTimeData(): GradientDataInt {\r\n\t\treturn this._overTime;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小固定帧。\r\n\t */\r\n\tget constantMin(): number {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大固定帧。\r\n\t */\r\n\tget constantMax(): number {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小时间帧。\r\n\t */\r\n\tget frameOverTimeDataMin(): GradientDataInt {\r\n\t\treturn this._overTimeMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大时间帧。\r\n\t */\r\n\tget frameOverTimeDataMax(): GradientDataInt {\r\n\t\treturn this._overTimeMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>FrameOverTime,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destFrameOverTime: FrameOverTime = (<FrameOverTime>destObject);\r\n\t\tdestFrameOverTime._type = this._type;\r\n\t\tdestFrameOverTime._constant = this._constant;\r\n\t\t(this._overTime) && (this._overTime.cloneTo(destFrameOverTime._overTime));\r\n\t\tdestFrameOverTime._constantMin = this._constantMin;\r\n\t\tdestFrameOverTime._constantMax = this._constantMax;\r\n\t\t(this._overTimeMin) && (this._overTimeMin.cloneTo(destFrameOverTime._overTimeMin));\r\n\t\t(this._overTimeMax) && (this._overTimeMax.cloneTo(destFrameOverTime._overTimeMax));\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destFrameOverTime: FrameOverTime = new FrameOverTime();\r\n\t\tthis.cloneTo(destFrameOverTime);\r\n\t\treturn destFrameOverTime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientDataNumber } from \"./GradientDataNumber\";\r\nimport { IClone } from \"../../IClone\"\r\nimport { Vector3 } from \"../../../math/Vector3\"\r\n\r\n\r\n/**\r\n * <code>GradientRotation</code> 类用于创建渐变角速度。\r\n */\r\nexport class GradientAngularVelocity implements IClone {\r\n\t/**\r\n\t * 通过固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tconstant 固定角速度。\r\n\t * @return 渐变角速度。\r\n\t */\r\n\tstatic createByConstant(constant: number): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 0;\r\n\t\tgradientAngularVelocity._separateAxes = false;\r\n\t\tgradientAngularVelocity._constant = constant;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过分轴固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tseparateConstant 分轴固定角速度。\r\n\t * @return 渐变角速度。\r\n\t */\r\n\tstatic createByConstantSeparate(separateConstant: Vector3): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 0;\r\n\t\tgradientAngularVelocity._separateAxes = true;\r\n\t\tgradientAngularVelocity._constantSeparate = separateConstant;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tgradient 渐变角速度。\r\n\t * @return 渐变角速度。\r\n\t */\r\n\tstatic createByGradient(gradient: GradientDataNumber): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 1;\r\n\t\tgradientAngularVelocity._separateAxes = false;\r\n\t\tgradientAngularVelocity._gradient = gradient;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过分轴渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tgradientX X轴渐变角速度。\r\n\t * @param\tgradientY Y轴渐变角速度。\r\n\t * @param\tgradientZ Z轴渐变角速度。\r\n\t * @return  渐变角速度。\r\n\t */\r\n\tstatic createByGradientSeparate(gradientX: GradientDataNumber, gradientY: GradientDataNumber, gradientZ: GradientDataNumber): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 1;\r\n\t\tgradientAngularVelocity._separateAxes = true;\r\n\t\tgradientAngularVelocity._gradientX = gradientX;\r\n\t\tgradientAngularVelocity._gradientY = gradientY;\r\n\t\tgradientAngularVelocity._gradientZ = gradientZ;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tconstantMin 最小固定角速度。\r\n\t * @param\tconstantMax 最大固定角速度。\r\n\t * @return 渐变角速度。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: number, constantMax: number): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 2;\r\n\t\tgradientAngularVelocity._separateAxes = false;\r\n\t\tgradientAngularVelocity._constantMin = constantMin;\r\n\t\tgradientAngularVelocity._constantMax = constantMax;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机分轴双固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tseparateConstantMin  最小分轴固定角速度。\r\n\t * @param\tseparateConstantMax  最大分轴固定角速度。\r\n\t * @return  渐变角速度。\r\n\t */\r\n\tstatic createByRandomTwoConstantSeparate(separateConstantMin: Vector3, separateConstantMax: Vector3): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 2;\r\n\t\tgradientAngularVelocity._separateAxes = true;\r\n\t\tgradientAngularVelocity._constantMinSeparate = separateConstantMin;\r\n\t\tgradientAngularVelocity._constantMaxSeparate = separateConstantMax;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tgradientMin 最小渐变角速度。\r\n\t * @param\tgradientMax 最大渐变角速度。\r\n\t * @return  渐变角速度。\r\n\t */\r\n\tstatic createByRandomTwoGradient(gradientMin: GradientDataNumber, gradientMax: GradientDataNumber): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 3;\r\n\t\tgradientAngularVelocity._separateAxes = false;\r\n\t\tgradientAngularVelocity._gradientMin = gradientMin;\r\n\t\tgradientAngularVelocity._gradientMax = gradientMax;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过分轴随机双渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tgradientXMin  最小X轴渐变角速度。\r\n\t * @param\tgradientXMax  最大X轴渐变角速度。\r\n\t * @param\tgradientYMin  最小Y轴渐变角速度。\r\n\t * @param\tgradientYMax  最大Y轴渐变角速度。\r\n\t * @param\tgradientZMin  最小Z轴渐变角速度。\r\n\t * @param\tgradientZMax  最大Z轴渐变角速度。\r\n\t * @return  渐变角速度。\r\n\t */\r\n\tstatic createByRandomTwoGradientSeparate(gradientXMin: GradientDataNumber, gradientXMax: GradientDataNumber, gradientYMin: GradientDataNumber, gradientYMax: GradientDataNumber, gradientZMin: GradientDataNumber, gradientZMax: GradientDataNumber, gradientWMin: GradientDataNumber, gradientWMax: GradientDataNumber): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 3;\r\n\t\tgradientAngularVelocity._separateAxes = true;\r\n\t\tgradientAngularVelocity._gradientXMin = gradientXMin;\r\n\t\tgradientAngularVelocity._gradientXMax = gradientXMax;\r\n\t\tgradientAngularVelocity._gradientYMin = gradientYMin;\r\n\t\tgradientAngularVelocity._gradientYMax = gradientYMax;\r\n\t\tgradientAngularVelocity._gradientZMin = gradientZMin;\r\n\t\tgradientAngularVelocity._gradientZMax = gradientZMax;\r\n\t\tgradientAngularVelocity._gradientWMin = gradientWMin;\r\n\t\tgradientAngularVelocity._gradientWMax = gradientWMax;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\tprivate _separateAxes: boolean = false;\r\n\r\n\tprivate _constant: number = 0;\r\n\tprivate _constantSeparate: Vector3 = null;\r\n\r\n\tprivate _gradient: GradientDataNumber = null;\r\n\tprivate _gradientX: GradientDataNumber = null;\r\n\tprivate _gradientY: GradientDataNumber = null;\r\n\tprivate _gradientZ: GradientDataNumber = null;\r\n\tprivate _gradientW: GradientDataNumber = null;\r\n\r\n\tprivate _constantMin: number = 0;\r\n\tprivate _constantMax: number = 0;\r\n\tprivate _constantMinSeparate: Vector3 = null;\r\n\tprivate _constantMaxSeparate: Vector3 = null;\r\n\r\n\tprivate _gradientMin: GradientDataNumber = null;\r\n\tprivate _gradientMax: GradientDataNumber = null;\r\n\tprivate _gradientXMin: GradientDataNumber = null;\r\n\tprivate _gradientXMax: GradientDataNumber = null;\r\n\tprivate _gradientYMin: GradientDataNumber = null;\r\n\tprivate _gradientYMax: GradientDataNumber = null;\r\n\tprivate _gradientZMin: GradientDataNumber = null;\r\n\tprivate _gradientZMax: GradientDataNumber = null;\r\n\tprivate _gradientWMin: GradientDataNumber = null;\r\n\tprivate _gradientWMax: GradientDataNumber = null;\r\n\r\n\t/**\r\n\t *生命周期角速度类型,0常量模式，1曲线模式，2随机双常量模式，3随机双曲线模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t *是否分轴。\r\n\t */\r\n\tget separateAxes(): boolean {\r\n\t\treturn this._separateAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * 固定角速度。\r\n\t */\r\n\tget constant(): number {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * 分轴固定角速度。\r\n\t */\r\n\tget constantSeparate(): Vector3 {\r\n\t\treturn this._constantSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变角速度。\r\n\t */\r\n\tget gradient(): GradientDataNumber {\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变角角速度X。\r\n\t */\r\n\tget gradientX(): GradientDataNumber {\r\n\t\treturn this._gradientX;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变角速度Y。\r\n\t */\r\n\tget gradientY(): GradientDataNumber {\r\n\t\treturn this._gradientY;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变角速度Z。\r\n\t */\r\n\tget gradientZ(): GradientDataNumber {\r\n\t\treturn this._gradientZ;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变角速度Z。\r\n\t */\r\n\tget gradientW(): GradientDataNumber {\r\n\t\treturn this._gradientW;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小随机双固定角速度。\r\n\t */\r\n\tget constantMin(): number {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大随机双固定角速度。\r\n\t */\r\n\tget constantMax(): number {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小分轴随机双固定角速度。\r\n\t */\r\n\tget constantMinSeparate(): Vector3 {\r\n\t\treturn this._constantMinSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大分轴随机双固定角速度。\r\n\t */\r\n\tget constantMaxSeparate(): Vector3 {\r\n\t\treturn this._constantMaxSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t *最小渐变角速度。\r\n\t */\r\n\tget gradientMin(): GradientDataNumber {\r\n\t\treturn this._gradientMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大渐变角速度。\r\n\t */\r\n\tget gradientMax(): GradientDataNumber {\r\n\t\treturn this._gradientMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小渐变角速度X。\r\n\t */\r\n\tget gradientXMin(): GradientDataNumber {\r\n\t\treturn this._gradientXMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大渐变角速度X。\r\n\t */\r\n\tget gradientXMax(): GradientDataNumber {\r\n\t\treturn this._gradientXMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小渐变角速度Y。\r\n\t */\r\n\tget gradientYMin(): GradientDataNumber {\r\n\t\treturn this._gradientYMin;\r\n\t}\r\n\r\n\t/**\r\n\t *最大渐变角速度Y。\r\n\t */\r\n\tget gradientYMax(): GradientDataNumber {\r\n\t\treturn this._gradientYMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小渐变角速度Z。\r\n\t */\r\n\tget gradientZMin(): GradientDataNumber {\r\n\t\treturn this._gradientZMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大渐变角速度Z。\r\n\t */\r\n\tget gradientZMax(): GradientDataNumber {\r\n\t\treturn this._gradientZMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小渐变角速度Z。\r\n\t */\r\n\tget gradientWMin(): GradientDataNumber {\r\n\t\treturn this._gradientWMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大渐变角速度Z。\r\n\t */\r\n\tget gradientWMax(): GradientDataNumber {\r\n\t\treturn this._gradientWMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientAngularVelocity,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientAngularVelocity: GradientAngularVelocity = (<GradientAngularVelocity>destObject);\r\n\t\tdestGradientAngularVelocity._type = this._type;\r\n\t\tdestGradientAngularVelocity._separateAxes = this._separateAxes;\r\n\t\tdestGradientAngularVelocity._constant = this._constant;\r\n\t\tthis._constantSeparate.cloneTo(destGradientAngularVelocity._constantSeparate);\r\n\t\tthis._gradient.cloneTo(destGradientAngularVelocity._gradient);\r\n\t\tthis._gradientX.cloneTo(destGradientAngularVelocity._gradientX);\r\n\t\tthis._gradientY.cloneTo(destGradientAngularVelocity._gradientY);\r\n\t\tthis._gradientZ.cloneTo(destGradientAngularVelocity._gradientZ);\r\n\t\tdestGradientAngularVelocity._constantMin = this._constantMin;\r\n\t\tdestGradientAngularVelocity._constantMax = this._constantMax;\r\n\t\tthis._constantMinSeparate.cloneTo(destGradientAngularVelocity._constantMinSeparate);\r\n\t\tthis._constantMaxSeparate.cloneTo(destGradientAngularVelocity._constantMaxSeparate);\r\n\t\tthis._gradientMin.cloneTo(destGradientAngularVelocity._gradientMin);\r\n\t\tthis._gradientMax.cloneTo(destGradientAngularVelocity._gradientMax);\r\n\t\tthis._gradientXMin.cloneTo(destGradientAngularVelocity._gradientXMin);\r\n\t\tthis._gradientXMax.cloneTo(destGradientAngularVelocity._gradientXMax);\r\n\t\tthis._gradientYMin.cloneTo(destGradientAngularVelocity._gradientYMin);\r\n\t\tthis._gradientYMax.cloneTo(destGradientAngularVelocity._gradientYMax);\r\n\t\tthis._gradientZMin.cloneTo(destGradientAngularVelocity._gradientZMin);\r\n\t\tthis._gradientZMax.cloneTo(destGradientAngularVelocity._gradientZMax);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tthis.cloneTo(destGradientAngularVelocity);\r\n\t\treturn destGradientAngularVelocity;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../IClone\"\r\n\r\n/**\r\n * <code>GradientDataInt</code> 类用于创建整形渐变。\r\n */\r\nexport class GradientDataInt implements IClone {\r\n\tprivate _currentLength: number = 0;\r\n\t/**@internal 开发者禁止修改。*/\r\n\t_elements: Float32Array;//TODO:是否用int\r\n\r\n\t/**整形渐变数量。*/\r\n\tget gradientCount(): number {\r\n\t\treturn this._currentLength / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientDataInt</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._elements = new Float32Array(8);\r\n\t}\r\n\r\n\t/**\r\n\t * 增加整形渐变。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue 整形值。\r\n\t */\r\n\tadd(key: number, value: number): void {\r\n\t\tif (this._currentLength < 8) {\r\n\t\t\tif ((this._currentLength === 6) && ((key !== 1))) {\r\n\t\t\t\tkey = 1;\r\n\t\t\t\tconsole.log(\"Warning:the forth key is  be force set to 1.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis._elements[this._currentLength++] = key;\r\n\t\t\tthis._elements[this._currentLength++] = value;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"Warning:data count must lessEqual than 4\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientDataInt: GradientDataInt = <GradientDataInt>destObject;\r\n\t\tdestGradientDataInt._currentLength = this._currentLength;\r\n\t\tvar destElements: Float32Array = destGradientDataInt._elements;\r\n\t\tfor (var i: number = 0, n: number = this._elements.length; i < n; i++) {\r\n\t\t\tdestElements[i] = this._elements[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientDataInt: GradientDataInt = new GradientDataInt();\r\n\t\tthis.cloneTo(destGradientDataInt);\r\n\t\treturn destGradientDataInt;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../IClone\"\r\n\r\n/**\r\n * <code>GradientDataNumber</code> 类用于创建浮点渐变。\r\n */\r\nexport class GradientDataNumber implements IClone {\r\n\tprivate _currentLength: number = 0;\r\n\t/**@internal 开发者禁止修改。*/\r\n\t_elements: Float32Array;\r\n\r\n\t/**渐变浮点数量。*/\r\n\tget gradientCount(): number {\r\n\t\treturn this._currentLength / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientDataNumber</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._elements = new Float32Array(8);\r\n\t}\r\n\r\n\t/**\r\n\t * 增加浮点渐变。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue 浮点值。\r\n\t */\r\n\tadd(key: number, value: number): void {\r\n\t\tif (this._currentLength < 8) {\r\n\r\n\t\t\tif ((this._currentLength === 6) && ((key !== 1))) {\r\n\t\t\t\tkey = 1;\r\n\t\t\t\tconsole.log(\"GradientDataNumber warning:the forth key is  be force set to 1.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis._elements[this._currentLength++] = key;\r\n\t\t\tthis._elements[this._currentLength++] = value;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"GradientDataNumber warning:data count must lessEqual than 4\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取键。\r\n\t * @param\tindex 索引。\r\n\t * @return\tvalue 键。\r\n\t */\r\n\tgetKeyByIndex(index: number): number {\r\n\t\treturn this._elements[index * 2];\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取值。\r\n\t * @param\tindex 索引。\r\n\t * @return\tvalue 值。\r\n\t */\r\n\tgetValueByIndex(index: number): number {\r\n\t\treturn this._elements[index * 2 + 1];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取平均值。\r\n\t */\r\n\tgetAverageValue(): number {\r\n\t\tvar total: number = 0;\r\n\t\tvar count: number = 0;\r\n\t\tfor (var i: number = 0, n: number = this._currentLength - 2; i < n; i += 2) {\r\n\t\t\tvar subValue: number = this._elements[i + 1];\r\n\t\t\tsubValue += this._elements[i + 3];\r\n\t\t\tsubValue = subValue * (this._elements[i + 2] - this._elements[i]);\r\n\t\t\ttotal += subValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\treturn total / count;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientDataNumber: GradientDataNumber = <GradientDataNumber>destObject;\r\n\t\tdestGradientDataNumber._currentLength = this._currentLength;\r\n\t\tvar destElements: Float32Array = destGradientDataNumber._elements;\r\n\t\tfor (var i: number = 0, n: number = this._elements.length; i < n; i++)\r\n\t\t\tdestElements[i] = this._elements[i];\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientDataNumber: GradientDataNumber = new GradientDataNumber();\r\n\t\tthis.cloneTo(destGradientDataNumber);\r\n\t\treturn destGradientDataNumber;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientDataNumber } from \"./GradientDataNumber\";\r\nimport { IClone } from \"../../IClone\"\r\nimport { Vector3 } from \"../../../math/Vector3\"\r\n\r\n/**\r\n * <code>GradientSize</code> 类用于创建渐变尺寸。\r\n */\r\nexport class GradientSize implements IClone {\r\n\t/**\r\n\t * 通过渐变尺寸创建一个 <code>GradientSize</code> 实例。\r\n\t * @param\tgradient 渐变尺寸。\r\n\t * @return  渐变尺寸。\r\n\t */\r\n\tstatic createByGradient(gradient: GradientDataNumber): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 0;\r\n\t\tgradientSize._separateAxes = false;\r\n\t\tgradientSize._gradient = gradient;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过分轴渐变尺寸创建一个 <code>GradientSize</code> 实例。\r\n\t * @param\tgradientX 渐变尺寸X。\r\n\t * @param\tgradientY 渐变尺寸Y。\r\n\t * @param\tgradientZ 渐变尺寸Z。\r\n\t * @return  渐变尺寸。\r\n\t */\r\n\tstatic createByGradientSeparate(gradientX: GradientDataNumber, gradientY: GradientDataNumber, gradientZ: GradientDataNumber): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 0;\r\n\t\tgradientSize._separateAxes = true;\r\n\t\tgradientSize._gradientX = gradientX;\r\n\t\tgradientSize._gradientY = gradientY;\r\n\t\tgradientSize._gradientZ = gradientZ;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双固定尺寸创建一个 <code>GradientSize</code> 实例。\r\n\t * @param\tconstantMin 最小固定尺寸。\r\n\t * @param\tconstantMax 最大固定尺寸。\r\n\t * @return 渐变尺寸。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: number, constantMax: number): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 1;\r\n\t\tgradientSize._separateAxes = false;\r\n\t\tgradientSize._constantMin = constantMin;\r\n\t\tgradientSize._constantMax = constantMax;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过分轴随机双固定尺寸创建一个 <code>GradientSize</code> 实例。\r\n\t * @param\tconstantMinSeparate 分轴最小固定尺寸.\r\n\t * @param\tconstantMaxSeparate 分轴最大固定尺寸。\r\n\t * @return   渐变尺寸。\r\n\t */\r\n\tstatic createByRandomTwoConstantSeparate(constantMinSeparate: Vector3, constantMaxSeparate: Vector3): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 1;\r\n\t\tgradientSize._separateAxes = true;\r\n\t\tgradientSize._constantMinSeparate = constantMinSeparate;\r\n\t\tgradientSize._constantMaxSeparate = constantMaxSeparate;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双渐变尺寸创建一个 <code>GradientSize</code> 实例。\r\n\t * @param\tgradientMin 最小渐变尺寸。\r\n\t * @param\tgradientMax 最大渐变尺寸。\r\n\t * @return 渐变尺寸。\r\n\t */\r\n\tstatic createByRandomTwoGradient(gradientMin: GradientDataNumber, gradientMax: GradientDataNumber): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 2;\r\n\t\tgradientSize._separateAxes = false;\r\n\t\tgradientSize._gradientMin = gradientMin;\r\n\t\tgradientSize._gradientMax = gradientMax;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过分轴随机双渐变尺寸创建一个 <code>GradientSize</code> 实例。\r\n\t * @param\tgradientXMin X轴最小渐变尺寸。\r\n\t * @param\tgradientXMax X轴最大渐变尺寸。\r\n\t * @param\tgradientYMin Y轴最小渐变尺寸。\r\n\t * @param\tgradientYMax Y轴最大渐变尺寸。\r\n\t * @param\tgradientZMin Z轴最小渐变尺寸。\r\n\t * @param\tgradientZMax Z轴最大渐变尺寸。\r\n\t * @return  渐变尺寸。\r\n\t */\r\n\tstatic createByRandomTwoGradientSeparate(gradientXMin: GradientDataNumber, gradientXMax: GradientDataNumber, gradientYMin: GradientDataNumber, gradientYMax: GradientDataNumber, gradientZMin: GradientDataNumber, gradientZMax: GradientDataNumber): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 2;\r\n\t\tgradientSize._separateAxes = true;\r\n\t\tgradientSize._gradientXMin = gradientXMin;\r\n\t\tgradientSize._gradientXMax = gradientXMax;\r\n\t\tgradientSize._gradientYMin = gradientYMin;\r\n\t\tgradientSize._gradientYMax = gradientYMax;\r\n\t\tgradientSize._gradientZMin = gradientZMin;\r\n\t\tgradientSize._gradientZMax = gradientZMax;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\tprivate _separateAxes: boolean = false;\r\n\r\n\tprivate _gradient: GradientDataNumber = null;\r\n\tprivate _gradientX: GradientDataNumber = null;\r\n\tprivate _gradientY: GradientDataNumber = null;\r\n\tprivate _gradientZ: GradientDataNumber = null;\r\n\r\n\r\n\tprivate _constantMin: number = 0;\r\n\tprivate _constantMax: number = 0;\r\n\tprivate _constantMinSeparate: Vector3 = null;\r\n\tprivate _constantMaxSeparate: Vector3 = null;\r\n\r\n\r\n\tprivate _gradientMin: GradientDataNumber = null;\r\n\tprivate _gradientMax: GradientDataNumber = null;\r\n\tprivate _gradientXMin: GradientDataNumber = null;\r\n\tprivate _gradientXMax: GradientDataNumber = null;\r\n\tprivate _gradientYMin: GradientDataNumber = null;\r\n\tprivate _gradientYMax: GradientDataNumber = null;\r\n\tprivate _gradientZMin: GradientDataNumber = null;\r\n\tprivate _gradientZMax: GradientDataNumber = null;\r\n\r\n\t/**\r\n\t *生命周期尺寸类型，0曲线模式，1随机双常量模式，2随机双曲线模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t *是否分轴。\r\n\t */\r\n\tget separateAxes(): boolean {\r\n\t\treturn this._separateAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变尺寸。\r\n\t */\r\n\tget gradient(): GradientDataNumber {\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变尺寸X。\r\n\t */\r\n\tget gradientX(): GradientDataNumber {\r\n\t\treturn this._gradientX;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变尺寸Y。\r\n\t */\r\n\tget gradientY(): GradientDataNumber {\r\n\t\treturn this._gradientY;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变尺寸Z。\r\n\t */\r\n\tget gradientZ(): GradientDataNumber {\r\n\t\treturn this._gradientZ;\r\n\t}\r\n\r\n\t/**\r\n\t *最小随机双固定尺寸。\r\n\t */\r\n\tget constantMin(): number {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大随机双固定尺寸。\r\n\t */\r\n\tget constantMax(): number {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小分轴随机双固定尺寸。\r\n\t */\r\n\tget constantMinSeparate(): Vector3 {\r\n\t\treturn this._constantMinSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t *  最小分轴随机双固定尺寸。\r\n\t */\r\n\tget constantMaxSeparate(): Vector3 {\r\n\t\treturn this._constantMaxSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变最小尺寸。\r\n\t */\r\n\tget gradientMin(): GradientDataNumber {\r\n\t\treturn this._gradientMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最大尺寸。\r\n\t */\r\n\tget gradientMax(): GradientDataNumber {\r\n\t\treturn this._gradientMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最小尺寸X。\r\n\t */\r\n\tget gradientXMin(): GradientDataNumber {\r\n\t\treturn this._gradientXMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最大尺寸X。\r\n\t */\r\n\tget gradientXMax(): GradientDataNumber {\r\n\t\treturn this._gradientXMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最小尺寸Y。\r\n\t */\r\n\tget gradientYMin(): GradientDataNumber {\r\n\t\treturn this._gradientYMin;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变最大尺寸Y。\r\n\t */\r\n\tget gradientYMax(): GradientDataNumber {\r\n\t\treturn this._gradientYMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最小尺寸Z。\r\n\t */\r\n\tget gradientZMin(): GradientDataNumber {\r\n\t\treturn this._gradientZMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最大尺寸Z。\r\n\t */\r\n\tget gradientZMax(): GradientDataNumber {\r\n\t\treturn this._gradientZMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientSize,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * 获取最大尺寸。\r\n\t */\r\n\tgetMaxSizeInGradient(meshMode: boolean = false): number {\r\n\t\tvar i: number, n: number;\r\n\t\tvar maxSize: number = -Number.MAX_VALUE;\r\n\t\tswitch (this._type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (this._separateAxes) {\r\n\t\t\t\t\tfor (i = 0, n = this._gradientX.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientX.getValueByIndex(i));\r\n\t\t\t\t\tfor (i = 0, n = this._gradientY.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientY.getValueByIndex(i));\r\n\t\t\t\t\tif (meshMode) {\r\n\t\t\t\t\t\tfor (i = 0, n = this._gradientZ.gradientCount; i < n; i++) {\r\n\t\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZ.getValueByIndex(i));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (i = 0, n = this._gradient.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradient.getValueByIndex(i));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (this._separateAxes) {\r\n\t\t\t\t\tmaxSize = Math.max(this._constantMinSeparate.x, this._constantMaxSeparate.x);\r\n\t\t\t\t\tmaxSize = Math.max(maxSize, this._constantMinSeparate.y);\r\n\t\t\t\t\tif (meshMode) {\r\n\t\t\t\t\t\tmaxSize = maxSize = Math.max(maxSize, this._constantMaxSeparate.z);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmaxSize = Math.max(this._constantMin, this._constantMax);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (this._separateAxes) {\r\n\t\t\t\t\tfor (i = 0, n = this._gradientXMin.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientXMin.getValueByIndex(i));\r\n\t\t\t\t\tfor (i = 0, n = this._gradientXMax.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientXMax.getValueByIndex(i));\r\n\r\n\t\t\t\t\tfor (i = 0, n = this._gradientYMin.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientYMin.getValueByIndex(i));\r\n\t\t\t\t\tfor (i = 0, n = this._gradientZMax.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZMax.getValueByIndex(i));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (meshMode) {\r\n\t\t\t\t\t\tfor (i = 0, n = this._gradientZMin.gradientCount; i < n; i++) {\r\n\t\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZMin.getValueByIndex(i));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (i = 0, n = this._gradientZMax.gradientCount; i < n; i++) {\r\n\t\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZMax.getValueByIndex(i));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (i = 0, n = this._gradientMin.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientMin.getValueByIndex(i));\r\n\t\t\t\t\tfor (i = 0, n = this._gradientMax.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientMax.getValueByIndex(i));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn maxSize;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientSize: GradientSize = (<GradientSize>destObject);\r\n\t\tdestGradientSize._type = this._type;\r\n\t\tdestGradientSize._separateAxes = this._separateAxes;\r\n\t\tthis._gradient.cloneTo(destGradientSize._gradient);\r\n\t\tthis._gradientX.cloneTo(destGradientSize._gradientX);\r\n\t\tthis._gradientY.cloneTo(destGradientSize._gradientY);\r\n\t\tthis._gradientZ.cloneTo(destGradientSize._gradientZ);\r\n\t\tdestGradientSize._constantMin = this._constantMin;\r\n\t\tdestGradientSize._constantMax = this._constantMax;\r\n\t\tthis._constantMinSeparate.cloneTo(destGradientSize._constantMinSeparate);\r\n\t\tthis._constantMaxSeparate.cloneTo(destGradientSize._constantMaxSeparate);\r\n\t\tthis._gradientMin.cloneTo(destGradientSize._gradientMin);\r\n\t\tthis._gradientMax.cloneTo(destGradientSize._gradientMax);\r\n\t\tthis._gradientXMin.cloneTo(destGradientSize._gradientXMin);\r\n\t\tthis._gradientXMax.cloneTo(destGradientSize._gradientXMax);\r\n\t\tthis._gradientYMin.cloneTo(destGradientSize._gradientYMin);\r\n\t\tthis._gradientYMax.cloneTo(destGradientSize._gradientYMax);\r\n\t\tthis._gradientZMin.cloneTo(destGradientSize._gradientZMin);\r\n\t\tthis._gradientZMax.cloneTo(destGradientSize._gradientZMax);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientSize: GradientSize = new GradientSize();\r\n\t\tthis.cloneTo(destGradientSize);\r\n\t\treturn destGradientSize;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientDataNumber } from \"./GradientDataNumber\";\r\nimport { IClone } from \"../../IClone\"\r\nimport { Vector3 } from \"../../../math/Vector3\"\r\n\r\n/**\r\n * <code>GradientVelocity</code> 类用于创建渐变速度。\r\n */\r\nexport class GradientVelocity implements IClone {\r\n\t/**\r\n\t * 通过固定速度创建一个 <code>GradientVelocity</code> 实例。\r\n\t * @param\tconstant 固定速度。\r\n\t * @return 渐变速度。\r\n\t */\r\n\tstatic createByConstant(constant: Vector3): GradientVelocity {\r\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tgradientVelocity._type = 0;\r\n\t\tgradientVelocity._constant = constant;\r\n\t\treturn gradientVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过渐变速度创建一个 <code>GradientVelocity</code> 实例。\r\n\t * @param\tgradientX 渐变速度X。\r\n\t * @param\tgradientY 渐变速度Y。\r\n\t * @param\tgradientZ 渐变速度Z。\r\n\t * @return  渐变速度。\r\n\t */\r\n\tstatic createByGradient(gradientX: GradientDataNumber, gradientY: GradientDataNumber, gradientZ: GradientDataNumber): GradientVelocity {\r\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tgradientVelocity._type = 1;\r\n\t\tgradientVelocity._gradientX = gradientX;\r\n\t\tgradientVelocity._gradientY = gradientY;\r\n\t\tgradientVelocity._gradientZ = gradientZ;\r\n\t\treturn gradientVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双固定速度创建一个 <code>GradientVelocity</code> 实例。\r\n\t * @param\tconstantMin 最小固定角速度。\r\n\t * @param\tconstantMax 最大固定角速度。\r\n\t * @return 渐变速度。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: Vector3, constantMax: Vector3): GradientVelocity {\r\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tgradientVelocity._type = 2;\r\n\t\tgradientVelocity._constantMin = constantMin;\r\n\t\tgradientVelocity._constantMax = constantMax;\r\n\t\treturn gradientVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双渐变速度创建一个 <code>GradientVelocity</code> 实例。\r\n\t * @param\tgradientXMin X轴最小渐变速度。\r\n\t * @param\tgradientXMax X轴最大渐变速度。\r\n\t * @param\tgradientYMin Y轴最小渐变速度。\r\n\t * @param\tgradientYMax Y轴最大渐变速度。\r\n\t * @param\tgradientZMin Z轴最小渐变速度。\r\n\t * @param\tgradientZMax Z轴最大渐变速度。\r\n\t * @return  渐变速度。\r\n\t */\r\n\tstatic createByRandomTwoGradient(gradientXMin: GradientDataNumber, gradientXMax: GradientDataNumber, gradientYMin: GradientDataNumber, gradientYMax: GradientDataNumber, gradientZMin: GradientDataNumber, gradientZMax: GradientDataNumber): GradientVelocity {\r\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tgradientVelocity._type = 3;\r\n\t\tgradientVelocity._gradientXMin = gradientXMin;\r\n\t\tgradientVelocity._gradientXMax = gradientXMax;\r\n\t\tgradientVelocity._gradientYMin = gradientYMin;\r\n\t\tgradientVelocity._gradientYMax = gradientYMax;\r\n\t\tgradientVelocity._gradientZMin = gradientZMin;\r\n\t\tgradientVelocity._gradientZMax = gradientZMax;\r\n\t\treturn gradientVelocity;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\tprivate _constant: Vector3 = null;\r\n\r\n\t\r\n\tprivate _gradientX: GradientDataNumber = null;\r\n\tprivate _gradientY: GradientDataNumber = null;\r\n\tprivate _gradientZ: GradientDataNumber = null;\r\n\r\n\t\r\n\tprivate _constantMin: Vector3 = null;\r\n\tprivate _constantMax: Vector3 = null;\r\n\r\n\t\r\n\tprivate _gradientXMin: GradientDataNumber = null;\r\n\tprivate _gradientXMax: GradientDataNumber = null;\r\n\tprivate _gradientYMin: GradientDataNumber = null;\r\n\tprivate _gradientYMax: GradientDataNumber = null;\r\n\tprivate _gradientZMin: GradientDataNumber = null;\r\n\tprivate _gradientZMax: GradientDataNumber = null;\r\n\r\n\t/**\r\n\t *生命周期速度类型，0常量模式，1曲线模式，2随机双常量模式，3随机双曲线模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**固定速度。*/\r\n\tget constant(): Vector3 {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变速度X。\r\n\t */\r\n\tget gradientX(): GradientDataNumber {\r\n\t\treturn this._gradientX;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变速度Y。\r\n\t */\r\n\tget gradientY(): GradientDataNumber {\r\n\t\treturn this._gradientY;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变速度Z。\r\n\t */\r\n\tget gradientZ(): GradientDataNumber {\r\n\t\treturn this._gradientZ;\r\n\t}\r\n\r\n\t/**最小固定速度。*/\r\n\tget constantMin(): Vector3 {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**最大固定速度。*/\r\n\tget constantMax(): Vector3 {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最小速度X。\r\n\t */\r\n\tget gradientXMin(): GradientDataNumber {\r\n\t\treturn this._gradientXMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最大速度X。\r\n\t */\r\n\tget gradientXMax(): GradientDataNumber {\r\n\t\treturn this._gradientXMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最小速度Y。\r\n\t */\r\n\tget gradientYMin(): GradientDataNumber {\r\n\t\treturn this._gradientYMin;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变最大速度Y。\r\n\t */\r\n\tget gradientYMax(): GradientDataNumber {\r\n\t\treturn this._gradientYMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最小速度Z。\r\n\t */\r\n\tget gradientZMin(): GradientDataNumber {\r\n\t\treturn this._gradientZMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最大速度Z。\r\n\t */\r\n\tget gradientZMax(): GradientDataNumber {\r\n\t\treturn this._gradientZMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientVelocity,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientVelocity: GradientVelocity = (<GradientVelocity>destObject);\r\n\t\tdestGradientVelocity._type = this._type;\r\n\t\tthis._constant.cloneTo(destGradientVelocity._constant);\r\n\t\tthis._gradientX.cloneTo(destGradientVelocity._gradientX);\r\n\t\tthis._gradientY.cloneTo(destGradientVelocity._gradientY);\r\n\t\tthis._gradientZ.cloneTo(destGradientVelocity._gradientZ);\r\n\t\tthis._constantMin.cloneTo(destGradientVelocity._constantMin);\r\n\t\tthis._constantMax.cloneTo(destGradientVelocity._constantMax);\r\n\t\tthis._gradientXMin.cloneTo(destGradientVelocity._gradientXMin);\r\n\t\tthis._gradientXMax.cloneTo(destGradientVelocity._gradientXMax);\r\n\t\tthis._gradientYMin.cloneTo(destGradientVelocity._gradientYMin);\r\n\t\tthis._gradientYMax.cloneTo(destGradientVelocity._gradientYMax);\r\n\t\tthis._gradientZMin.cloneTo(destGradientVelocity._gradientZMin);\r\n\t\tthis._gradientZMax.cloneTo(destGradientVelocity._gradientZMax);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tthis.cloneTo(destGradientVelocity);\r\n\t\treturn destGradientVelocity;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientAngularVelocity } from \"./GradientAngularVelocity\";\r\nimport { IClone } from \"../../IClone\"\r\nimport { Vector3 } from \"../../../math/Vector3\"\r\n\r\n/**\r\n * <code>RotationOverLifetime</code> 类用于粒子的生命周期旋转。\r\n */\r\nexport class RotationOverLifetime implements IClone {\r\n\tprivate _angularVelocity: GradientAngularVelocity;\r\n\r\n\t/**是否启用*/\r\n\tenable: boolean;\r\n\r\n\t/**\r\n\t *获取角速度。\r\n\t */\r\n\tget angularVelocity(): GradientAngularVelocity {\r\n\t\treturn this._angularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>RotationOverLifetime,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor(angularVelocity: GradientAngularVelocity) {\r\n\t\tthis._angularVelocity = angularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destRotationOverLifetime: RotationOverLifetime = (<RotationOverLifetime>destObject);\r\n\t\tthis._angularVelocity.cloneTo(destRotationOverLifetime._angularVelocity);\r\n\t\tdestRotationOverLifetime.enable = this.enable;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destAngularVelocity: GradientAngularVelocity;\r\n\t\tswitch (this._angularVelocity.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (this._angularVelocity.separateAxes)\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByConstantSeparate(this._angularVelocity.constantSeparate.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByConstant(this._angularVelocity.constant);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (this._angularVelocity.separateAxes)\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByGradientSeparate(this._angularVelocity.gradientX.clone(), this._angularVelocity.gradientY.clone(), this._angularVelocity.gradientZ.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByGradient(this._angularVelocity.gradient.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (this._angularVelocity.separateAxes)\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoConstantSeparate(this._angularVelocity.constantMinSeparate.clone(), this._angularVelocity.constantMaxSeparate.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoConstant(this._angularVelocity.constantMin, this._angularVelocity.constantMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tif (this._angularVelocity.separateAxes)\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoGradientSeparate(this._angularVelocity.gradientXMin.clone(), this._angularVelocity.gradientYMin.clone(), this._angularVelocity.gradientZMin.clone(), this._angularVelocity.gradientWMin.clone(), this._angularVelocity.gradientXMax.clone(), this._angularVelocity.gradientYMax.clone(), this._angularVelocity.gradientZMax.clone(), this._angularVelocity.gradientWMax.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoGradient(this._angularVelocity.gradientMin.clone(), this._angularVelocity.gradientMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destRotationOverLifetime: RotationOverLifetime = new RotationOverLifetime(destAngularVelocity);\r\n\t\tdestRotationOverLifetime.enable = this.enable;\r\n\t\treturn destRotationOverLifetime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../../IClone\"\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector2 } from \"../../../../math/Vector2\"\r\nimport { Vector3 } from \"../../../../math/Vector3\"\r\n\r\nexport enum ParticleSystemShapeType {\r\n\tBox = 0,\r\n\tCircle = 1,\r\n\tCone = 2,\r\n\tHemisphere = 3,\r\n\tSphere = 4\r\n}\r\n\r\n\r\n/**\r\n * <code>BaseShape</code> 类用于粒子形状。\r\n */\r\nexport class BaseShape implements IClone {\r\n\t/**是否启用。*/\r\n\tenable: boolean=true;\r\n\t/**随机方向。*/\r\n\trandomDirection: number=0;\r\n\r\n\t/**粒子类型 */\r\n\tshapeType: ParticleSystemShapeType;\r\n\r\n\t/**\r\n\t * 创建一个 <code>BaseShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tthrow new Error(\"BaseShape: must override it.\");\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tthrow new Error(\"BaseShape: must override it.\");\r\n\t}\r\n\r\n\t/**\r\n\t * 用于生成粒子初始位置和方向。\r\n\t * @param\tposition 粒子位置。\r\n\t * @param\tdirection 粒子方向。\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tthrow new Error(\"BaseShape: must override it.\");\r\n\t}\r\n\r\n\t/** \r\n\t * @internal \r\n\t */\r\n\t_calculateProceduralBounds(boundBox: BoundBox, emitterPosScale: Vector3, minMaxBounds: Vector2): void {\r\n\t\tthis._getShapeBoundBox(boundBox);\r\n\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tVector3.multiply(min, emitterPosScale, min);\r\n\t\tVector3.multiply(max, emitterPosScale, max);\r\n\r\n\t\tvar speedBounds: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\t\tif (this.randomDirection/* && (m_Type != kCone) && (m_Type != kConeShell)*/)//TODO:randomDirection应换成0到1\r\n\t\t{\r\n\t\t\tspeedBounds.min = new Vector3(-1, -1, -1);\r\n\t\t\tspeedBounds.max = new Vector3(1, 1, 1);\r\n\t\t\t//minMaxBounds = Abs(minMaxBounds);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._getSpeedBoundBox(speedBounds);\r\n\t\t}\r\n\r\n\r\n\t\tvar maxSpeedBound: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\t\tvar maxSpeedMin: Vector3 = maxSpeedBound.min;\r\n\t\tvar maxSpeedMax: Vector3 = maxSpeedBound.max;\r\n\t\tVector3.scale(speedBounds.min, minMaxBounds.y, maxSpeedMin);\r\n\t\tVector3.scale(speedBounds.max, minMaxBounds.y, maxSpeedMax);\r\n\t\tVector3.add(boundBox.min, maxSpeedMin, maxSpeedMin);\r\n\t\tVector3.add(boundBox.max, maxSpeedMax, maxSpeedMax);\r\n\r\n\t\tVector3.min(boundBox.min, maxSpeedMin, boundBox.min);\r\n\t\tVector3.max(boundBox.max, maxSpeedMin, boundBox.max);\r\n\r\n\r\n\t\tvar minSpeedBound: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\t\tvar minSpeedMin: Vector3 = minSpeedBound.min;\r\n\t\tvar minSpeedMax: Vector3 = minSpeedBound.max;\r\n\t\tVector3.scale(speedBounds.min, minMaxBounds.x, minSpeedMin);\r\n\t\tVector3.scale(speedBounds.max, minMaxBounds.x, minSpeedMax);\r\n\r\n\t\tVector3.min(minSpeedBound.min, minSpeedMax, maxSpeedMin);\r\n\t\tVector3.max(minSpeedBound.min, minSpeedMax, maxSpeedMax);\r\n\r\n\t\tVector3.min(boundBox.min, maxSpeedMin, boundBox.min);\r\n\t\tVector3.max(boundBox.max, maxSpeedMin, boundBox.max);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destShape: BaseShape = (<BaseShape>destObject);\r\n\t\tdestShape.enable = this.enable;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: BaseShape = new BaseShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Rand } from \"../../../../math/Rand\"\r\nimport { Vector2 } from \"../../../../math/Vector2\"\r\nimport { Vector3 } from \"../../../../math/Vector3\"\r\n\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nexport class ShapeUtils {\r\n\tstatic _randomPointUnitArcCircle(arc: number, out: Vector2, rand: Rand = null): void {\r\n\t\tvar angle: number;\r\n\t\tif (rand)\r\n\t\t\tangle = rand.getFloat() * arc;\r\n\t\telse\r\n\t\t\tangle = Math.random() * arc;\r\n\t\tout.x = Math.cos(angle);\r\n\t\tout.y = Math.sin(angle);\r\n\t}\r\n\r\n\tstatic _randomPointInsideUnitArcCircle(arc: number, out: Vector2, rand: Rand = null): void {\r\n\t\tShapeUtils._randomPointUnitArcCircle(arc, out, rand);\r\n\t\tvar range: number;\r\n\t\tif (rand)\r\n\t\t\trange = Math.pow(rand.getFloat(), 1.0 / 2.0);\r\n\t\telse\r\n\t\t\trange = Math.pow(Math.random(), 1.0 / 2.0);\r\n\t\tout.x = out.x * range;\r\n\t\tout.y = out.y * range;\r\n\t}\r\n\r\n\tstatic _randomPointUnitCircle(out: Vector2, rand: Rand = null): void {\r\n\t\tvar angle: number;\r\n\t\tif (rand)\r\n\t\t\tangle = rand.getFloat() * Math.PI * 2;\r\n\t\telse\r\n\t\t\tangle = Math.random() * Math.PI * 2;\r\n\t\tout.x = Math.cos(angle);\r\n\t\tout.y = Math.sin(angle);\r\n\t}\r\n\r\n\tstatic _randomPointInsideUnitCircle(out: Vector2, rand: Rand = null): void {\r\n\t\tShapeUtils._randomPointUnitCircle(out);\r\n\t\tvar range: number;\r\n\t\tif (rand)\r\n\t\t\trange = Math.pow(rand.getFloat(), 1.0 / 2.0);\r\n\t\telse\r\n\t\t\trange = Math.pow(Math.random(), 1.0 / 2.0);\r\n\t\tout.x = out.x * range;\r\n\t\tout.y = out.y * range;\r\n\t}\r\n\r\n\tstatic _randomPointUnitSphere(out: Vector3, rand: Rand = null): void {\r\n\t\tvar z: number;\r\n\t\tvar a: number;\r\n\t\tif (rand) {\r\n\t\t\tz = out.z = rand.getFloat() * 2 - 1.0;\r\n\t\t\ta = rand.getFloat() * Math.PI * 2;\r\n\t\t} else {\r\n\t\t\tz = out.z = Math.random() * 2 - 1.0;\r\n\t\t\ta = Math.random() * Math.PI * 2;\r\n\t\t}\r\n\r\n\t\tvar r: number = Math.sqrt(1.0 - z * z);\r\n\r\n\t\tout.x = r * Math.cos(a);\r\n\t\tout.y = r * Math.sin(a);\r\n\t}\r\n\r\n\tstatic _randomPointInsideUnitSphere(out: Vector3, rand: Rand = null): void {\r\n\t\t;\r\n\t\tShapeUtils._randomPointUnitSphere(out);\r\n\t\tvar range: number;\r\n\t\tif (rand)\r\n\t\t\trange = Math.pow(rand.getFloat(), 1.0 / 3.0);\r\n\t\telse\r\n\t\t\trange = Math.pow(Math.random(), 1.0 / 3.0);\r\n\t\tout.x = out.x * range;\r\n\t\tout.y = out.y * range;\r\n\t\tout.z = out.z * range;\r\n\t}\r\n\r\n\tstatic _randomPointInsideHalfUnitBox(out: Vector3, rand: Rand = null): void {\r\n\t\tif (rand) {\r\n\t\t\tout.x = (rand.getFloat() - 0.5);\r\n\t\t\tout.y = (rand.getFloat() - 0.5);\r\n\t\t\tout.z = (rand.getFloat() - 0.5);\r\n\t\t} else {\r\n\t\t\tout.x = (Math.random() - 0.5);\r\n\t\t\tout.y = (Math.random() - 0.5);\r\n\t\t\tout.z = (Math.random() - 0.5);\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor() {\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector3 } from \"../../../../math/Vector3\"\r\n\r\n/**\r\n * <code>BoxShape</code> 类用于创建球形粒子形状。\r\n */\r\nexport class BoxShape extends BaseShape {\r\n\t/**发射器X轴长度。*/\r\n\tx: number;\r\n\t/**发射器Y轴长度。*/\r\n\ty: number;\r\n\t/**发射器Z轴长度。*/\r\n\tz: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>BoxShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Box;\r\n\t\tthis.x = 1.0;\r\n\t\tthis.y = 1.0;\r\n\t\tthis.z = 1.0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = -this.x * 0.5;\r\n\t\tmin.y = -this.y * 0.5;\r\n\t\tmin.z = -this.z * 0.5;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = this.x * 0.5;\r\n\t\tmax.y = this.y * 0.5;\r\n\t\tmax.z = this.z * 0.5;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = 0.0;\r\n\t\tmin.y = 0.0;\r\n\t\tmin.z = 0.0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = 0.0;\r\n\t\tmax.y = 1.0;\r\n\t\tmax.z = 0.0;\r\n\t}\r\n\r\n\t/**\r\n\t *  用于生成粒子初始位置和方向。\r\n\t * @param\tposition 粒子位置。\r\n\t * @param\tdirection 粒子方向。\r\n\t * @override\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[16];\r\n\t\t\tShapeUtils._randomPointInsideHalfUnitBox(position, rand);\r\n\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t} else {\r\n\t\t\tShapeUtils._randomPointInsideHalfUnitBox(position);\r\n\t\t}\r\n\t\tposition.x = this.x * position.x;\r\n\t\tposition.y = this.y * position.y;\r\n\t\tposition.z = this.z * position.z;\r\n\t\tif (this.randomDirection) {\r\n\t\t\tif (rand) {\r\n\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t} else {\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdirection.x = 0.0;\r\n\t\t\tdirection.y = 0.0;\r\n\t\t\tdirection.z = 1.0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param destObject \r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: BoxShape = (<BoxShape>destObject);\r\n\t\tdestShape.x = this.x;\r\n\t\tdestShape.y = this.y;\r\n\t\tdestShape.z = this.z;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: BoxShape = new BoxShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector2 } from \"../../../../math/Vector2\"\r\nimport { Vector3 } from \"../../../../math/Vector3\"\r\n\r\n/**\r\n * <code>CircleShape</code> 类用于创建环形粒子形状。\r\n */\r\nexport class CircleShape extends BaseShape {\r\n\t/** @internal */\r\n\tprotected static _tempPositionPoint: Vector2 = new Vector2();\r\n\r\n\t/**发射器半径。*/\r\n\tradius: number;\r\n\t/**环形弧度。*/\r\n\tarc: number;\r\n\t/**从边缘发射。*/\r\n\temitFromEdge: boolean;\r\n\r\n\t/**\r\n\t * 创建一个 <code>CircleShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Circle;\r\n\t\tthis.radius = 1.0;\r\n\t\tthis.arc = 360.0 / 180.0 * Math.PI;\r\n\t\tthis.emitFromEdge = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.z = -this.radius;\r\n\t\tmin.y = 0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.z = this.radius;\r\n\t\tmax.y = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = -1;\r\n\t\tmin.z = 0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = 1;\r\n\t\tmax.z = 0;\r\n\t}\r\n\r\n\t/**\r\n\t *  用于生成粒子初始位置和方向。\r\n\t * @param\tposition 粒子位置。\r\n\t * @param\tdirection 粒子方向。\r\n\t * @override\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tvar positionPoint: Vector2 = CircleShape._tempPositionPoint;\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[16];\r\n\t\t\tif (this.emitFromEdge)\r\n\t\t\t\tShapeUtils._randomPointUnitArcCircle(this.arc, CircleShape._tempPositionPoint, rand);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitArcCircle(this.arc, CircleShape._tempPositionPoint, rand);\r\n\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t} else {\r\n\t\t\tif (this.emitFromEdge)\r\n\t\t\t\tShapeUtils._randomPointUnitArcCircle(this.arc, CircleShape._tempPositionPoint);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitArcCircle(this.arc, CircleShape._tempPositionPoint);\r\n\t\t}\r\n\r\n\t\tposition.x = -positionPoint.x;\r\n\t\tposition.y = positionPoint.y;\r\n\t\tposition.z = 0;\r\n\r\n\t\tVector3.scale(position, this.radius, position);\r\n\r\n\t\tif (this.randomDirection) {\r\n\t\t\tif (rand) {\r\n\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t} else {\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tposition.cloneTo(direction);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param destObject \r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: CircleShape = (<CircleShape>destObject);\r\n\t\tdestShape.radius = this.radius;\r\n\t\tdestShape.arc = this.arc;\r\n\t\tdestShape.emitFromEdge = this.emitFromEdge;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: CircleShape = new CircleShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector2 } from \"../../../../math/Vector2\"\r\nimport { Vector3 } from \"../../../../math/Vector3\"\r\n\r\n/**\r\n * <code>ConeShape</code> 类用于创建锥形粒子形状。\r\n */\r\nexport class ConeShape extends BaseShape {\r\n\t/** @internal */\r\n\tprotected static _tempPositionPoint: Vector2 = new Vector2();\r\n\t/** @internal */\r\n\tprotected static _tempDirectionPoint: Vector2 = new Vector2();\r\n\r\n\t/**发射角度。*/\r\n\tangle: number;\r\n\t/**发射器半径。*/\r\n\tradius: number;\r\n\t/**椎体长度。*/\r\n\tlength: number;\r\n\t/**发射类型,0为Base,1为BaseShell,2为Volume,3为VolumeShell。*/\r\n\temitType: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>ConeShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Cone;\r\n\t\tthis.angle = 25.0 / 180.0 * Math.PI;\r\n\t\tthis.radius = 1.0;\r\n\t\tthis.length = 5.0;\r\n\t\tthis.emitType = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tconst coneRadius2: number = this.radius + this.length * Math.sin(this.angle);\r\n\t\tconst coneLength: number = this.length * Math.cos(this.angle);\r\n\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = -coneRadius2;\r\n\t\tmin.z = 0;\r\n\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = coneRadius2;\r\n\t\tmax.z = coneLength;//TODO:是否为负\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tconst sinA: number = Math.sin(this.angle);\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = -sinA;\r\n\t\tmin.z = 0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = sinA;\r\n\t\tmax.z = 1;\r\n\t}\r\n\r\n\t/**\r\n\t *  用于生成粒子初始位置和方向。\r\n\t * @param\tposition 粒子位置。\r\n\t * @param\tdirection 粒子方向。\r\n\t * @override\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tvar positionPointE: Vector2 = ConeShape._tempPositionPoint;\r\n\t\tvar positionX: number;\r\n\t\tvar positionY: number;\r\n\t\tvar directionPointE: Vector2;\r\n\r\n\t\tvar dirCosA: number = Math.cos(this.angle);\r\n\t\tvar dirSinA: number = Math.sin(this.angle);\r\n\t\tswitch (this.emitType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\trand.seed = randomSeeds[16];\r\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint, rand);\r\n\t\t\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint);\r\n\t\t\t\t}\r\n\t\t\t\tpositionX = positionPointE.x;\r\n\t\t\t\tpositionY = positionPointE.y;\r\n\t\t\t\tposition.x = positionX * this.radius;\r\n\t\t\t\tposition.y = positionY * this.radius;\r\n\t\t\t\tposition.z = 0;\r\n\r\n\t\t\t\tif (this.randomDirection) {\r\n\t\t\t\t\tif (rand) {\r\n\t\t\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint, rand);\r\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdirectionPointE = ConeShape._tempDirectionPoint;\r\n\t\t\t\t\tdirection.x = directionPointE.x * dirSinA;\r\n\t\t\t\t\tdirection.y = directionPointE.y * dirSinA;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdirection.x = positionX * dirSinA;\r\n\t\t\t\t\tdirection.y = positionY * dirSinA;\r\n\t\t\t\t}\r\n\t\t\t\tdirection.z = dirCosA;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\trand.seed = randomSeeds[16];\r\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint, rand);\r\n\t\t\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint);\r\n\t\t\t\t}\r\n\t\t\t\tpositionX = positionPointE.x;\r\n\t\t\t\tpositionY = positionPointE.y;\r\n\t\t\t\tposition.x = positionX * this.radius;\r\n\t\t\t\tposition.y = positionY * this.radius;\r\n\t\t\t\tposition.z = 0;\r\n\r\n\t\t\t\tif (this.randomDirection) {\r\n\t\t\t\t\tif (rand) {\r\n\t\t\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint, rand);\r\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdirectionPointE = ConeShape._tempDirectionPoint;\r\n\t\t\t\t\tdirection.x = directionPointE.x * dirSinA;\r\n\t\t\t\t\tdirection.y = directionPointE.y * dirSinA;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdirection.x = positionX * dirSinA;\r\n\t\t\t\t\tdirection.y = positionY * dirSinA;\r\n\t\t\t\t}\r\n\t\t\t\tdirection.z = dirCosA;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\trand.seed = randomSeeds[16];\r\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint, rand);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint);\r\n\t\t\t\t}\r\n\t\t\t\tpositionX = positionPointE.x;\r\n\t\t\t\tpositionY = positionPointE.y;\r\n\t\t\t\tposition.x = positionX * this.radius;\r\n\t\t\t\tposition.y = positionY * this.radius;\r\n\t\t\t\tposition.z = 0;\r\n\r\n\t\t\t\tdirection.x = positionX * dirSinA;\r\n\t\t\t\tdirection.y = positionY * dirSinA;\r\n\t\t\t\tdirection.z = dirCosA;\r\n\r\n\t\t\t\tVector3.normalize(direction, direction);\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\tVector3.scale(direction, this.length * rand.getFloat(), direction);\r\n\t\t\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tVector3.scale(direction, this.length * Math.random(), direction);\r\n\t\t\t\t}\r\n\t\t\t\tVector3.add(position, direction, position);\r\n\r\n\t\t\t\tif (this.randomDirection) {\r\n\t\t\t\t\tif (rand) {\r\n\t\t\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\trand.seed = randomSeeds[16];\r\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint, rand);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpositionX = positionPointE.x;\r\n\t\t\t\tpositionY = positionPointE.y;\r\n\t\t\t\tposition.x = positionX * this.radius;\r\n\t\t\t\tposition.y = positionY * this.radius;\r\n\t\t\t\tposition.z = 0;\r\n\r\n\t\t\t\tdirection.x = positionX * dirSinA;\r\n\t\t\t\tdirection.y = positionY * dirSinA;\r\n\t\t\t\tdirection.z = dirCosA;\r\n\r\n\t\t\t\tVector3.normalize(direction, direction);\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\tVector3.scale(direction, this.length * rand.getFloat(), direction);\r\n\t\t\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tVector3.scale(direction, this.length * Math.random(), direction);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tVector3.add(position, direction, position);\r\n\r\n\t\t\t\tif (this.randomDirection) {\r\n\t\t\t\t\tif (rand) {\r\n\t\t\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"ConeShape:emitType is invalid.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: ConeShape = (<ConeShape>destObject);\r\n\t\tdestShape.angle = this.angle;\r\n\t\tdestShape.radius = this.radius;\r\n\t\tdestShape.length = this.length;\r\n\t\tdestShape.emitType = this.emitType;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: ConeShape = new ConeShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector3 } from \"../../../../math/Vector3\"\r\n\r\n\r\n/**\r\n * <code>HemisphereShape</code> 类用于创建半球形粒子形状。\r\n */\r\nexport class HemisphereShape extends BaseShape {\r\n\t/**发射器半径。*/\r\n\tradius: number;\r\n\t/**从外壳发射。*/\r\n\temitFromShell: boolean;\r\n\r\n\t/**\r\n\t * 创建一个 <code>HemisphereShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Hemisphere;\r\n\t\tthis.radius = 1.0;\r\n\t\tthis.emitFromShell = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = min.z = -this.radius;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = this.radius;\r\n\t\tmax.z = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = -1;\r\n\t\tmin.z = 0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = max.z = 1;\r\n\t}\r\n\r\n\t/**\r\n\t *  用于生成粒子初始位置和方向。\r\n\t * @param\tposition 粒子位置。\r\n\t * @param\tdirection 粒子方向。\r\n\t * @override\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[16];\r\n\t\t\tif (this.emitFromShell)\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(position, rand);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position, rand);\r\n\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t} else {\r\n\t\t\tif (this.emitFromShell)\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(position);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position);\r\n\t\t}\r\n\r\n\t\tVector3.scale(position, this.radius, position);\r\n\r\n\t\tvar z: number = position.z;\r\n\t\t(z < 0.0) && (position.z = z * -1.0);\r\n\r\n\t\tif (this.randomDirection) {\r\n\t\t\tif (rand) {\r\n\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t} else {\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tposition.cloneTo(direction);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: HemisphereShape = (<HemisphereShape>destObject);\r\n\t\tdestShape.radius = this.radius;\r\n\t\tdestShape.emitFromShell = this.emitFromShell;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: HemisphereShape = new HemisphereShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector3 } from \"../../../../math/Vector3\"\r\n\r\n/**\r\n * <code>SphereShape</code> 类用于创建球形粒子形状。\r\n */\r\nexport class SphereShape extends BaseShape {\r\n\t/**发射器半径。*/\r\n\tradius: number;\r\n\t/**从外壳发射。*/\r\n\temitFromShell: boolean;\r\n\r\n\t/**\r\n\t * 创建一个 <code>SphereShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Sphere;\r\n\t\tthis.radius = 1.0;\r\n\t\tthis.emitFromShell = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = min.z = -this.radius;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = max.z = this.radius;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = min.z = -1;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = max.z = 1;\r\n\t}\r\n\r\n\t/**\r\n\t *  用于生成粒子初始位置和方向。\r\n\t * @param\tposition 粒子位置。\r\n\t * @param\tdirection 粒子方向。\r\n\t * @override\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[16];\r\n\t\t\tif (this.emitFromShell)\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(position, rand);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position, rand);\r\n\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t} else {\r\n\t\t\tif (this.emitFromShell)\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(position);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position);\r\n\t\t}\r\n\r\n\t\tVector3.scale(position, this.radius, position);\r\n\r\n\t\tif (this.randomDirection) {\r\n\t\t\tif (rand) {\r\n\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t} else {\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tposition.cloneTo(direction);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: SphereShape = (<SphereShape>destObject);\r\n\t\tdestShape.radius = this.radius;\r\n\t\tdestShape.emitFromShell = this.emitFromShell;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: SphereShape = new SphereShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n}\r\n\r\n\r\n","import { GradientSize } from \"./GradientSize\";\r\nimport { IClone } from \"../../IClone\"\r\nimport { Vector3 } from \"../../../math/Vector3\"\r\n\r\n/**\r\n * <code>SizeOverLifetime</code> 类用于粒子的生命周期尺寸。\r\n */\r\nexport class SizeOverLifetime implements IClone {\r\n\tprivate _size: GradientSize;\r\n\r\n\t/**是否启用*/\r\n\tenable: boolean;\r\n\r\n\t/**\r\n\t *获取尺寸。\r\n\t */\r\n\tget size(): GradientSize {\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SizeOverLifetime</code> 实例。\r\n\t */\r\n\tconstructor(size: GradientSize) {\r\n\t\tthis._size = size;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destSizeOverLifetime: SizeOverLifetime = (<SizeOverLifetime>destObject);\r\n\t\tthis._size.cloneTo(destSizeOverLifetime._size);\r\n\t\tdestSizeOverLifetime.enable = this.enable;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destSize: GradientSize;\r\n\t\tswitch (this._size.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (this._size.separateAxes)\r\n\t\t\t\t\tdestSize = GradientSize.createByGradientSeparate(this._size.gradientX.clone(), this._size.gradientY.clone(), this._size.gradientZ.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestSize = GradientSize.createByGradient(this._size.gradient.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (this._size.separateAxes)\r\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoConstantSeparate(this._size.constantMinSeparate.clone(), this._size.constantMaxSeparate.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoConstant(this._size.constantMin, this._size.constantMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (this._size.separateAxes)\r\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoGradientSeparate(this._size.gradientXMin.clone(), this._size.gradientYMin.clone(), this._size.gradientZMin.clone(), this._size.gradientXMax.clone(), this._size.gradientYMax.clone(), this._size.gradientZMax.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoGradient(this._size.gradientMin.clone(), this._size.gradientMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destSizeOverLifetime: SizeOverLifetime = new SizeOverLifetime(destSize);\r\n\t\tdestSizeOverLifetime.enable = this.enable;\r\n\t\treturn destSizeOverLifetime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../IClone\"\r\n\r\n/**\r\n * <code>StartFrame</code> 类用于创建开始帧。\r\n */\r\nexport class StartFrame implements IClone {\r\n\t/**\r\n\t * 通过随机常量旋转创建一个 <code>StartFrame</code> 实例。\r\n\t * @param\tconstant  固定帧。\r\n\t * @return 开始帧。\r\n\t */\r\n\tstatic createByConstant(constant: number = 0): StartFrame {\r\n\t\tvar rotationOverLifetime: StartFrame = new StartFrame();\r\n\t\trotationOverLifetime._type = 0;\r\n\t\trotationOverLifetime._constant = constant;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\t/**\r\n\t *  通过随机双常量旋转创建一个 <code>StartFrame</code> 实例。\r\n\t * @param\tconstantMin 最小固定帧。\r\n\t * @param\tconstantMax 最大固定帧。\r\n\t * @return 开始帧。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: number = 0, constantMax: number = 0): StartFrame {\r\n\t\tvar rotationOverLifetime: StartFrame = new StartFrame();\r\n\t\trotationOverLifetime._type = 1;\r\n\t\trotationOverLifetime._constantMin = constantMin;\r\n\t\trotationOverLifetime._constantMax = constantMax;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\r\n\tprivate _type: number = 0;\r\n\tprivate _constant: number = 0;\r\n\tprivate _constantMin: number = 0;\r\n\tprivate _constantMax: number = 0;\r\n\r\n\t/**\r\n\t *开始帧类型,0常量模式，1随机双常量模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t * 固定帧。\r\n\t */\r\n\tget constant(): number {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小固定帧。\r\n\t */\r\n\tget constantMin(): number {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大固定帧。\r\n\t */\r\n\tget constantMax(): number {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>StartFrame,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destStartFrame: StartFrame = (<StartFrame>destObject);\r\n\t\tdestStartFrame._type = this._type;\r\n\t\tdestStartFrame._constant = this._constant;\r\n\t\tdestStartFrame._constantMin = this._constantMin;\r\n\t\tdestStartFrame._constantMax = this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destStartFrame: StartFrame = new StartFrame();\r\n\t\tthis.cloneTo(destStartFrame);\r\n\t\treturn destStartFrame;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { FrameOverTime } from \"./FrameOverTime\";\r\nimport { StartFrame } from \"./StartFrame\";\r\nimport { IClone } from \"../../IClone\"\r\nimport { Vector2 } from \"../../../math/Vector2\"\r\n\r\n/**\r\n * <code>TextureSheetAnimation</code> 类用于创建粒子帧动画。\r\n */\r\nexport class TextureSheetAnimation implements IClone {\r\n\t/**@internal */\r\n\tprivate _frame: FrameOverTime;\r\n\t/**@internal */\r\n\tprivate _startFrame: StartFrame;\r\n\r\n\t/**纹理平铺。*/\r\n\ttiles: Vector2;\r\n\t/**类型,0为whole sheet、1为singal row。*/\r\n\ttype: number = 0;\r\n\t/**是否随机行，type为1时有效。*/\r\n\trandomRow: boolean = false;\r\n\t/**行索引,type为1时有效。*/\r\n\trowIndex: number = 0;\r\n\t/**循环次数。*/\r\n\tcycles: number = 0;\r\n\t/**UV通道类型,0为Noting,1为Everything,待补充,暂不支持。*/\r\n\tenableUVChannels: number = 0;\r\n\t/**是否启用*/\r\n\tenable: boolean = false;\r\n\r\n\t/**获取时间帧率。*/\r\n\tget frame(): FrameOverTime {\r\n\t\treturn this._frame;\r\n\t}\r\n\r\n\t/**获取开始帧率。*/\r\n\tget startFrame(): StartFrame {\r\n\t\treturn this._startFrame;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>TextureSheetAnimation</code> 实例。\r\n\t * @param frame 动画帧。\r\n\t * @param  startFrame 开始帧。\r\n\t */\r\n\tconstructor(frame: FrameOverTime, startFrame: StartFrame) {\r\n\t\tthis.tiles = new Vector2(1, 1);\r\n\t\tthis.type = 0;\r\n\t\tthis.randomRow = true;\r\n\t\tthis.rowIndex = 0;\r\n\t\tthis.cycles = 1;\r\n\t\tthis.enableUVChannels = 1;//TODO:待补充\r\n\t\tthis._frame = frame;\r\n\t\tthis._startFrame = startFrame;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destTextureSheetAnimation: TextureSheetAnimation = (<TextureSheetAnimation>destObject);\r\n\t\tthis.tiles.cloneTo(destTextureSheetAnimation.tiles);\r\n\t\tdestTextureSheetAnimation.type = this.type;\r\n\t\tdestTextureSheetAnimation.randomRow = this.randomRow;\r\n\t\tdestTextureSheetAnimation.rowIndex = this.rowIndex;\r\n\t\tdestTextureSheetAnimation.cycles = this.cycles;\r\n\t\tdestTextureSheetAnimation.enableUVChannels = this.enableUVChannels;\r\n\t\tdestTextureSheetAnimation.enable = this.enable;\r\n\t\tthis._frame.cloneTo(destTextureSheetAnimation._frame);\r\n\t\tthis._startFrame.cloneTo(destTextureSheetAnimation._startFrame);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destFrame: FrameOverTime;\r\n\t\tswitch (this._frame.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tdestFrame = FrameOverTime.createByConstant(this._frame.constant);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdestFrame = FrameOverTime.createByOverTime(this._frame.frameOverTimeData.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tdestFrame = FrameOverTime.createByRandomTwoConstant(this._frame.constantMin, this._frame.constantMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tdestFrame = FrameOverTime.createByRandomTwoOverTime(this._frame.frameOverTimeDataMin.clone(), this._frame.frameOverTimeDataMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destStartFrame: StartFrame;\r\n\t\tswitch (this._startFrame.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tdestStartFrame = StartFrame.createByConstant(this._startFrame.constant);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdestStartFrame = StartFrame.createByRandomTwoConstant(this._startFrame.constantMin, this._startFrame.constantMax);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destTextureSheetAnimation: TextureSheetAnimation = new TextureSheetAnimation(destFrame, destStartFrame);\r\n\t\tthis.cloneTo(destTextureSheetAnimation);\r\n\t\treturn destTextureSheetAnimation;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../IClone\";\r\nimport { GradientVelocity } from \"./GradientVelocity\";\r\n\r\n/**\r\n * <code>VelocityOverLifetime</code> 类用于粒子的生命周期速度。\r\n */\r\nexport class VelocityOverLifetime implements IClone {\r\n\t/**@internal */\r\n\tprivate _velocity: GradientVelocity;\r\n\r\n\t/**是否启用*/\r\n\tenable: boolean = false;\r\n\t/**速度空间,0为local,1为world。*/\r\n\tspace: number = 0;\r\n\r\n\t/**\r\n\t *获取尺寸。\r\n\t */\r\n\tget velocity(): GradientVelocity {\r\n\t\treturn this._velocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>VelocityOverLifetime</code> 实例。\r\n\t */\r\n\tconstructor(velocity: GradientVelocity) {\r\n\t\tthis._velocity = velocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destVelocityOverLifetime: VelocityOverLifetime = (<VelocityOverLifetime>destObject);\r\n\t\tthis._velocity.cloneTo(destVelocityOverLifetime._velocity);\r\n\t\tdestVelocityOverLifetime.enable = this.enable;\r\n\t\tdestVelocityOverLifetime.space = this.space;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destVelocity: GradientVelocity;\r\n\t\tswitch (this._velocity.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tdestVelocity = GradientVelocity.createByConstant(this._velocity.constant.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdestVelocity = GradientVelocity.createByGradient(this._velocity.gradientX.clone(), this._velocity.gradientY.clone(), this._velocity.gradientZ.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tdestVelocity = GradientVelocity.createByRandomTwoConstant(this._velocity.constantMin.clone(), this._velocity.constantMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tdestVelocity = GradientVelocity.createByRandomTwoGradient(this._velocity.gradientXMin.clone(), this._velocity.gradientYMin.clone(), this._velocity.gradientZMin.clone(), this._velocity.gradientXMax.clone(), this._velocity.gradientYMax.clone(), this._velocity.gradientZMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tvar destVelocityOverLifetime: VelocityOverLifetime = new VelocityOverLifetime(destVelocity);\r\n\t\tdestVelocityOverLifetime.enable = this.enable;\r\n\t\tdestVelocityOverLifetime.space = this.space;\r\n\t\treturn destVelocityOverLifetime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Shader3D } from \"../../../d3/shader/Shader3D\";\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\n\r\nexport class ShuriKenParticle3DShaderDeclaration {\r\n\tstatic SHADERDEFINE_RENDERMODE_BILLBOARD: ShaderDefine;\r\n\tstatic SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD: ShaderDefine;\r\n\tstatic SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD: ShaderDefine;\r\n\tstatic SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD: ShaderDefine;\r\n\r\n\tstatic SHADERDEFINE_COLOROVERLIFETIME: ShaderDefine;\r\n\tstatic SHADERDEFINE_RANDOMCOLOROVERLIFETIME: ShaderDefine;\r\n\tstatic SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT: ShaderDefine;\r\n\tstatic SHADERDEFINE_VELOCITYOVERLIFETIMECURVE: ShaderDefine;\r\n\tstatic SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT: ShaderDefine;\r\n\tstatic SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE: ShaderDefine;\r\n\tstatic SHADERDEFINE_TEXTURESHEETANIMATIONCURVE: ShaderDefine;\r\n\tstatic SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE: ShaderDefine;\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIME: ShaderDefine;\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE: ShaderDefine;\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT: ShaderDefine;\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMECURVE: ShaderDefine;\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS: ShaderDefine;\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES: ShaderDefine;\r\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMECURVE: ShaderDefine;\r\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE: ShaderDefine;\r\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES: ShaderDefine;\r\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE: ShaderDefine;\r\n\tstatic SHADERDEFINE_RENDERMODE_MESH: ShaderDefine;\r\n\tstatic SHADERDEFINE_SHAPE: ShaderDefine;\r\n\r\n\r\n\t//Base\r\n\tstatic WORLDPOSITION: number = Shader3D.propertyNameToID(\"u_WorldPosition\");\r\n\tstatic WORLDROTATION: number = Shader3D.propertyNameToID(\"u_WorldRotation\");\r\n\tstatic POSITIONSCALE: number = Shader3D.propertyNameToID(\"u_PositionScale\");\r\n\tstatic SIZESCALE: number = Shader3D.propertyNameToID(\"u_SizeScale\");\r\n\tstatic SCALINGMODE: number = Shader3D.propertyNameToID(\"u_ScalingMode\");\r\n\tstatic GRAVITY: number = Shader3D.propertyNameToID(\"u_Gravity\");\r\n\tstatic THREEDSTARTROTATION: number = Shader3D.propertyNameToID(\"u_ThreeDStartRotation\");\r\n\tstatic STRETCHEDBILLBOARDLENGTHSCALE: number = Shader3D.propertyNameToID(\"u_StretchedBillboardLengthScale\");\r\n\tstatic STRETCHEDBILLBOARDSPEEDSCALE: number = Shader3D.propertyNameToID(\"u_StretchedBillboardSpeedScale\");\r\n\tstatic SIMULATIONSPACE: number = Shader3D.propertyNameToID(\"u_SimulationSpace\");\r\n\tstatic CURRENTTIME: number = Shader3D.propertyNameToID(\"u_CurrentTime\");\r\n\r\n\t//VelocityOverLifetime\r\n\tstatic VOLVELOCITYCONST: number = Shader3D.propertyNameToID(\"u_VOLVelocityConst\");\r\n\tstatic VOLVELOCITYGRADIENTX: number = Shader3D.propertyNameToID(\"u_VOLVelocityGradientX\");\r\n\tstatic VOLVELOCITYGRADIENTY: number = Shader3D.propertyNameToID(\"u_VOLVelocityGradientY\");\r\n\tstatic VOLVELOCITYGRADIENTZ: number = Shader3D.propertyNameToID(\"u_VOLVelocityGradientZ\");\r\n\tstatic VOLVELOCITYCONSTMAX: number = Shader3D.propertyNameToID(\"u_VOLVelocityConstMax\");\r\n\tstatic VOLVELOCITYGRADIENTXMAX: number = Shader3D.propertyNameToID(\"u_VOLVelocityGradientMaxX\");\r\n\tstatic VOLVELOCITYGRADIENTYMAX: number = Shader3D.propertyNameToID(\"u_VOLVelocityGradientMaxY\");\r\n\tstatic VOLVELOCITYGRADIENTZMAX: number = Shader3D.propertyNameToID(\"u_VOLVelocityGradientMaxZ\");\r\n\tstatic VOLSPACETYPE: number = Shader3D.propertyNameToID(\"u_VOLSpaceType\");\r\n\r\n\t//ColorOverLifetime\r\n\tstatic COLOROVERLIFEGRADIENTALPHAS: number = Shader3D.propertyNameToID(\"u_ColorOverLifeGradientAlphas\");\r\n\tstatic COLOROVERLIFEGRADIENTCOLORS: number = Shader3D.propertyNameToID(\"u_ColorOverLifeGradientColors\");\r\n\tstatic MAXCOLOROVERLIFEGRADIENTALPHAS: number = Shader3D.propertyNameToID(\"u_MaxColorOverLifeGradientAlphas\");\r\n\tstatic MAXCOLOROVERLIFEGRADIENTCOLORS: number = Shader3D.propertyNameToID(\"u_MaxColorOverLifeGradientColors\");\r\n\r\n\t//SizeOverLifetime\r\n\tstatic SOLSIZEGRADIENT: number = Shader3D.propertyNameToID(\"u_SOLSizeGradient\");\r\n\tstatic SOLSIZEGRADIENTX: number = Shader3D.propertyNameToID(\"u_SOLSizeGradientX\");\r\n\tstatic SOLSIZEGRADIENTY: number = Shader3D.propertyNameToID(\"u_SOLSizeGradientY\");\r\n\tstatic SOLSizeGradientZ: number = Shader3D.propertyNameToID(\"u_SOLSizeGradientZ\");\r\n\tstatic SOLSizeGradientMax: number = Shader3D.propertyNameToID(\"u_SOLSizeGradientMax\");\r\n\tstatic SOLSIZEGRADIENTXMAX: number = Shader3D.propertyNameToID(\"u_SOLSizeGradientMaxX\");\r\n\tstatic SOLSIZEGRADIENTYMAX: number = Shader3D.propertyNameToID(\"u_SOLSizeGradientMaxY\");\r\n\tstatic SOLSizeGradientZMAX: number = Shader3D.propertyNameToID(\"u_SOLSizeGradientMaxZ\");\r\n\r\n\t//RotationOverLifetime\r\n\tstatic ROLANGULARVELOCITYCONST: number = Shader3D.propertyNameToID(\"u_ROLAngularVelocityConst\");\r\n\tstatic ROLANGULARVELOCITYCONSTSEPRARATE: number = Shader3D.propertyNameToID(\"u_ROLAngularVelocityConstSeprarate\");\r\n\tstatic ROLANGULARVELOCITYGRADIENT: number = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradient\");\r\n\tstatic ROLANGULARVELOCITYGRADIENTX: number = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientX\");\r\n\tstatic ROLANGULARVELOCITYGRADIENTY: number = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientY\");\r\n\tstatic ROLANGULARVELOCITYGRADIENTZ: number = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientZ\");\r\n\tstatic ROLANGULARVELOCITYCONSTMAX: number = Shader3D.propertyNameToID(\"u_ROLAngularVelocityConstMax\");\r\n\tstatic ROLANGULARVELOCITYCONSTMAXSEPRARATE: number = Shader3D.propertyNameToID(\"u_ROLAngularVelocityConstMaxSeprarate\");\r\n\tstatic ROLANGULARVELOCITYGRADIENTMAX: number = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMax\");\r\n\tstatic ROLANGULARVELOCITYGRADIENTXMAX: number = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxX\");\r\n\tstatic ROLANGULARVELOCITYGRADIENTYMAX: number = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxY\");\r\n\tstatic ROLANGULARVELOCITYGRADIENTZMAX: number = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxZ\");\r\n\tstatic ROLANGULARVELOCITYGRADIENTWMAX: number = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxW\");\r\n\r\n\t//TextureSheetAnimation\r\n\tstatic TEXTURESHEETANIMATIONCYCLES: number = Shader3D.propertyNameToID(\"u_TSACycles\");\r\n\tstatic TEXTURESHEETANIMATIONSUBUVLENGTH: number = Shader3D.propertyNameToID(\"u_TSASubUVLength\");\r\n\tstatic TEXTURESHEETANIMATIONGRADIENTUVS: number = Shader3D.propertyNameToID(\"u_TSAGradientUVs\");\r\n\tstatic TEXTURESHEETANIMATIONGRADIENTMAXUVS: number = Shader3D.propertyNameToID(\"u_TSAMaxGradientUVs\");\r\n}","import { Material } from \"../material/Material\"\r\nimport { RenderState } from \"../material/RenderState\"\r\nimport { Vector4 } from \"../../math/Vector4\"\r\nimport { Shader3D } from \"../../shader/Shader3D\"\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\"\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\n\r\n\r\n/**\r\n * <code>ShurikenParticleMaterial</code> 类用于实现粒子材质。\r\n */\r\nexport class ShurikenParticleMaterial extends Material {\r\n\t/**渲染状态_透明混合。*/\r\n\tstatic RENDERMODE_ALPHABLENDED: number = 0;\r\n\t/**渲染状态_加色法混合。*/\r\n\tstatic RENDERMODE_ADDTIVE: number = 1;\r\n\r\n\r\n\tstatic SHADERDEFINE_DIFFUSEMAP: ShaderDefine;\r\n\tstatic SHADERDEFINE_TINTCOLOR: ShaderDefine;\r\n\tstatic SHADERDEFINE_TILINGOFFSET: ShaderDefine;\r\n\tstatic SHADERDEFINE_ADDTIVEFOG: ShaderDefine;\r\n\r\n\tstatic DIFFUSETEXTURE: number = Shader3D.propertyNameToID(\"u_texture\");\r\n\tstatic TINTCOLOR: number = Shader3D.propertyNameToID(\"u_Tintcolor\");\r\n\tstatic TILINGOFFSET: number = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n\tstatic CULL: number = Shader3D.propertyNameToID(\"s_Cull\");\r\n\tstatic BLEND: number = Shader3D.propertyNameToID(\"s_Blend\");\r\n\tstatic BLEND_SRC: number = Shader3D.propertyNameToID(\"s_BlendSrc\");\r\n\tstatic BLEND_DST: number = Shader3D.propertyNameToID(\"s_BlendDst\");\r\n\tstatic DEPTH_TEST: number = Shader3D.propertyNameToID(\"s_DepthTest\");\r\n\tstatic DEPTH_WRITE: number = Shader3D.propertyNameToID(\"s_DepthWrite\");\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: ShurikenParticleMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP = Shader3D.getDefineByName(\"DIFFUSEMAP\");\r\n\t\tShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR = Shader3D.getDefineByName(\"TINTCOLOR\");\r\n\t\tShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG = Shader3D.getDefineByName(\"ADDTIVEFOG\");\r\n\t\tShurikenParticleMaterial.SHADERDEFINE_TILINGOFFSET = Shader3D.getDefineByName(\"TILINGOFFSET\");\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _color: Vector4;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _TintColor(): Vector4 {\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _TintColor(value: Vector4) {\r\n\t\tthis.color = value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _TintColorR(): number {\r\n\t\treturn this._color.x;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _TintColorR(value: number) {\r\n\t\tthis._color.x = value;\r\n\t\tthis.color = this._color;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _TintColorG(): number {\r\n\t\treturn this._color.y;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _TintColorG(value: number) {\r\n\t\tthis._color.y = value;\r\n\t\tthis.color = this._color;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _TintColorB(): number {\r\n\t\treturn this._color.z;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _TintColorB(value: number) {\r\n\t\tthis._color.z = value;\r\n\t\tthis.color = this._color;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tget _TintColorA(): number {\r\n\t\treturn this._color.w;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _TintColorA(value: number) {\r\n\t\tthis._color.w = value;\r\n\t\tthis.color = this._color;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_ST(): Vector4 {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET)\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_ST(value: Vector4) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.setValue(value.x, value.y, value.z, value.w);\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STX(): number {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).x;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STX(x: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.x = x;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STY(): number {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).y;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STY(y: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.y = y;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STZ(): number {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).z;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STZ(z: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.z = z;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STW(): number {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).w;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STW(w: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.w = w;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * 渲染模式。\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase ShurikenParticleMaterial.RENDERMODE_ADDTIVE:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShurikenParticleMaterial.RENDERMODE_ALPHABLENDED:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"ShurikenParticleMaterial : renderMode value error.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 颜色R分量。\r\n\t */\r\n\tget colorR(): number {\r\n\t\treturn this._TintColorR;\r\n\t}\r\n\r\n\tset colorR(value: number) {\r\n\t\tthis._TintColorR = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 颜色G分量。\r\n\t */\r\n\tget colorG(): number {\r\n\t\treturn this._TintColorG;\r\n\t}\r\n\r\n\tset colorG(value: number) {\r\n\t\tthis._TintColorG = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 颜色B分量。\r\n\t */\r\n\tget colorB(): number {\r\n\t\treturn this._TintColorB;\r\n\t}\r\n\r\n\tset colorB(value: number) {\r\n\t\tthis._TintColorB = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 颜色Z分量。\r\n\t */\r\n\tget colorA(): number {\r\n\t\treturn this._TintColorA;\r\n\t}\r\n\r\n\tset colorA(value: number) {\r\n\t\tthis._TintColorA = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 颜色。\r\n\t */\r\n\tget color(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TINTCOLOR));\r\n\t}\r\n\r\n\tset color(value: Vector4) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR);\r\n\r\n\t\tthis._shaderValues.setVector(ShurikenParticleMaterial.TINTCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移X分量。\r\n\t */\r\n\tget tilingOffsetX(): number {\r\n\t\treturn this._MainTex_STX;\r\n\t}\r\n\r\n\tset tilingOffsetX(x: number) {\r\n\t\tthis._MainTex_STX = x;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移Y分量。\r\n\t */\r\n\tget tilingOffsetY(): number {\r\n\t\treturn this._MainTex_STY;\r\n\t}\r\n\r\n\tset tilingOffsetY(y: number) {\r\n\t\tthis._MainTex_STY = y;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移Z分量。\r\n\t */\r\n\tget tilingOffsetZ(): number {\r\n\t\treturn this._MainTex_STZ;\r\n\t}\r\n\r\n\tset tilingOffsetZ(z: number) {\r\n\t\tthis._MainTex_STZ = z;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移W分量。\r\n\t */\r\n\tget tilingOffsetW(): number {\r\n\t\treturn this._MainTex_STW;\r\n\t}\r\n\r\n\tset tilingOffsetW(w: number) {\r\n\t\tthis._MainTex_STW = w;\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tif (value.x != 1 || value.y != 1 || value.z != 0 || value.w != 0)\r\n\t\t\t\tthis._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t\telse\r\n\t\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t} else {\r\n\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t}\r\n\t\tthis._shaderValues.setVector(ShurikenParticleMaterial.TILINGOFFSET, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 漫反射贴图。\r\n\t */\r\n\tget texture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ShurikenParticleMaterial.DIFFUSETEXTURE);\r\n\t}\r\n\r\n\tset texture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP);\r\n\r\n\t\tthis._shaderValues.setTexture(ShurikenParticleMaterial.DIFFUSETEXTURE, value);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 是否写入深度。\r\n\t */\r\n\tget depthWrite(): boolean {\r\n\t\treturn this._shaderValues.getBool(ShurikenParticleMaterial.DEPTH_WRITE);\r\n\t}\r\n\r\n\tset depthWrite(value: boolean) {\r\n\t\tthis._shaderValues.setBool(ShurikenParticleMaterial.DEPTH_WRITE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 剔除方式。\r\n\t */\r\n\tget cull(): number {\r\n\t\treturn this._shaderValues.getInt(ShurikenParticleMaterial.CULL);\r\n\t}\r\n\r\n\tset cull(value: number) {\r\n\t\tthis._shaderValues.setInt(ShurikenParticleMaterial.CULL, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 混合方式。\r\n\t */\r\n\tget blend(): number {\r\n\t\treturn this._shaderValues.getInt(ShurikenParticleMaterial.BLEND);\r\n\t}\r\n\r\n\tset blend(value: number) {\r\n\t\tthis._shaderValues.setInt(ShurikenParticleMaterial.BLEND, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 混合源。\r\n\t */\r\n\tget blendSrc(): number {\r\n\t\treturn this._shaderValues.getInt(ShurikenParticleMaterial.BLEND_SRC);\r\n\t}\r\n\r\n\tset blendSrc(value: number) {\r\n\t\tthis._shaderValues.setInt(ShurikenParticleMaterial.BLEND_SRC, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 混合目标。\r\n\t */\r\n\tget blendDst(): number {\r\n\t\treturn this._shaderValues.getInt(ShurikenParticleMaterial.BLEND_DST);\r\n\t}\r\n\r\n\tset blendDst(value: number) {\r\n\t\tthis._shaderValues.setInt(ShurikenParticleMaterial.BLEND_DST, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 深度测试方式。\r\n\t */\r\n\tget depthTest(): number {\r\n\t\treturn this._shaderValues.getInt(ShurikenParticleMaterial.DEPTH_TEST);\r\n\t}\r\n\r\n\tset depthTest(value: number) {\r\n\t\tthis._shaderValues.setInt(ShurikenParticleMaterial.DEPTH_TEST, value);\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"PARTICLESHURIKEN\");\r\n\t\tthis._color = new Vector4(1.0, 1.0, 1.0, 1.0);\r\n\t\tthis.renderMode = ShurikenParticleMaterial.RENDERMODE_ALPHABLENDED;//默认加色法会自动加上雾化宏定义，导致非加色法从材质读取完后未移除宏定义。\r\n\t}\r\n\r\n\t/**\r\n\t* 克隆。\r\n\t* @return\t 克隆副本。\r\n\t* @override\r\n\t*/\r\n\tclone(): any {\r\n\t\tvar dest: ShurikenParticleMaterial = new ShurikenParticleMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Render } from \"../../../renders/Render\";\r\nimport { FrustumCulling } from \"../../graphics/FrustumCulling\";\r\nimport { BoundBox } from \"../../math/BoundBox\";\r\nimport { BoundFrustum } from \"../../math/BoundFrustum\";\r\nimport { ContainmentType } from \"../../math/ContainmentType\";\r\nimport { Matrix4x4 } from \"../../math/Matrix4x4\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { ShaderData } from \"../../shader/ShaderData\";\r\nimport { Physics3DUtils } from \"../../utils/Physics3DUtils\";\r\nimport { Bounds } from \"../Bounds\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { ShuriKenParticle3D } from \"./ShuriKenParticle3D\";\r\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\r\nimport { ShuriKenParticle3DShaderDeclaration } from \"./ShuriKenParticle3DShaderDeclaration\";\r\n\r\n\r\n/**\r\n * <code>ShurikenParticleRender</code> 类用于创建3D粒子渲染器。\r\n */\r\nexport class ShurikenParticleRenderer extends BaseRender {\r\n\t/** @internal */\r\n\tprivate _finalGravity: Vector3 = new Vector3();\r\n\r\n\t/** @internal */\r\n\tprivate _tempRotationMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/**@internal */\r\n\tprivate _defaultBoundBox: BoundBox;\r\n\r\n\t///**排序模式,无。*/\r\n\t//public const SORTINGMODE_NONE:int = 0;\r\n\t///**排序模式,通过摄像机距离排序,暂不支持。*/\r\n\t//public const SORTINGMODE_BYDISTANCE:int = 1;\r\n\t///**排序模式,年长的在前绘制,暂不支持。*/\r\n\t//public const SORTINGMODE_OLDESTINFRONT:int = 2;\r\n\t///**排序模式,年轻的在前绘制,暂不支持*/\r\n\t//public const SORTINGMODE_YOUNGESTINFRONT:int = 3;\r\n\r\n\t/**@internal */\r\n\tprivate _renderMode: number;\r\n\t/**@internal */\r\n\tprivate _mesh: Mesh = null;\r\n\r\n\t/**拉伸广告牌模式摄像机速度缩放,暂不支持。*/\r\n\tstretchedBillboardCameraSpeedScale: number = 0;\r\n\t/**拉伸广告牌模式速度缩放。*/\r\n\tstretchedBillboardSpeedScale: number = 0;\r\n\t/**拉伸广告牌模式长度缩放。*/\r\n\tstretchedBillboardLengthScale: number = 2;\r\n\r\n\t///**排序模式。*/\r\n\t//public var sortingMode:int;\r\n\r\n\t/**\r\n\t * 获取渲染模式,0为BILLBOARD、1为STRETCHEDBILLBOARD、2为HORIZONTALBILLBOARD、3为VERTICALBILLBOARD、4为MESH。\r\n\t */\r\n\tget renderMode(): number {\r\n\t\treturn this._renderMode;\r\n\t}\r\n\r\n\tset renderMode(value: number) {\r\n\t\tif (this._renderMode !== value) {\r\n\t\t\tvar defineDatas: ShaderData = this._shaderValues;\r\n\t\t\tswitch (this._renderMode) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tdefineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tdefineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tdefineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tdefineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tdefineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis._renderMode = value;\r\n\t\t\tswitch (value) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tdefineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tdefineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tdefineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tdefineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tdefineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"ShurikenParticleRender: unknown renderMode Value.\");\r\n\t\t\t}\r\n\t\t\tvar parSys: ShurikenParticleSystem = (<ShuriKenParticle3D>this._owner).particleSystem;\r\n\t\t\t(parSys) && (parSys._initBufferDatas());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取网格渲染模式所使用的Mesh,rendderMode为4时生效。\r\n\t */\r\n\tget mesh(): Mesh {\r\n\t\treturn this._mesh;\r\n\t}\r\n\r\n\tset mesh(value: Mesh) {\r\n\t\tif (this._mesh !== value) {\r\n\t\t\t(this._mesh) && (this._mesh._removeReference());\r\n\t\t\tthis._mesh = value;\r\n\t\t\t(value) && (value._addReference());\r\n\t\t\t((<ShuriKenParticle3D>this._owner)).particleSystem._initBufferDatas();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>ShurikenParticleRender</code> 实例。\r\n\t */\r\n\tconstructor(owner: ShuriKenParticle3D) {\r\n\t\tsuper(owner);\r\n\t\tthis._defaultBoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\t\tthis.renderMode = 0;\r\n\t\t//sortingMode = SORTINGMODE_NONE;\r\n\t\tthis._supportOctree = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _calculateBoundingBox(): void {\r\n\r\n\t\tvar particleSystem: ShurikenParticleSystem = (this._owner as ShuriKenParticle3D).particleSystem;\r\n\t\tvar bounds: Bounds;\r\n\t\tif (particleSystem._useCustomBounds) {\r\n\t\t\tbounds = particleSystem.customBounds;\r\n\t\t\tbounds._tranform(this._owner.transform.worldMatrix, this._bounds);\r\n\t\t}\r\n\t\telse if (particleSystem._simulationSupported()) {\r\n\t\t\t// todo need update Bounds\r\n\t\t\tparticleSystem._generateBounds();\r\n\t\t\tbounds = particleSystem._bounds;\r\n\t\t\tbounds._tranform(this._owner.transform.worldMatrix, this._bounds);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar min: Vector3 = this._bounds.getMin();\r\n\t\t\tmin.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\t\t\tthis._bounds.setMin(min);\r\n\t\t\tvar max: Vector3 = this._bounds.getMax();\r\n\t\t\tmax.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\t\t\tthis._bounds.setMax(max);\r\n\t\t}\r\n\r\n\t\tif (Render.supportWebGLPlusCulling) {//[NATIVE]\r\n\t\t\tvar min: Vector3 = this._bounds.getMin();\r\n\t\t\tvar max: Vector3 = this._bounds.getMax();\r\n\t\t\tvar buffer: Float32Array = FrustumCulling._cullingBuffer;\r\n\t\t\tbuffer[this._cullingBufferIndex + 1] = min.x;\r\n\t\t\tbuffer[this._cullingBufferIndex + 2] = min.y;\r\n\t\t\tbuffer[this._cullingBufferIndex + 3] = min.z;\r\n\t\t\tbuffer[this._cullingBufferIndex + 4] = max.x;\r\n\t\t\tbuffer[this._cullingBufferIndex + 5] = max.y;\r\n\t\t\tbuffer[this._cullingBufferIndex + 6] = max.z;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\r\n\t\tif (boundFrustum) {\r\n\t\t\tif (boundFrustum.intersects(this.bounds._getBoundBox())) {\r\n\t\t\t\tif (((<ShuriKenParticle3D>this._owner)).particleSystem.isAlive)\r\n\t\t\t\t\treturn true;\r\n\t\t\t\telse\r\n\t\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_renderUpdate(context: RenderContext3D, transfrom: Transform3D): void {\r\n\t\tvar particleSystem: ShurikenParticleSystem = ((<ShuriKenParticle3D>this._owner)).particleSystem;\r\n\t\tvar sv: ShaderData = this._shaderValues;\r\n\t\tvar transform: Transform3D = this._owner.transform;\r\n\t\tswitch (particleSystem.simulationSpace) {\r\n\t\t\tcase 0: //World\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1: //Local\r\n\t\t\t\tsv.setVector3(ShuriKenParticle3DShaderDeclaration.WORLDPOSITION, transform.position);\r\n\t\t\t\tsv.setQuaternion(ShuriKenParticle3DShaderDeclaration.WORLDROTATION, transform.rotation);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"ShurikenParticleMaterial: SimulationSpace value is invalid.\");\r\n\t\t}\r\n\r\n\t\tswitch (particleSystem.scaleMode) {\r\n\t\t\tcase 0:\r\n\t\t\t\tvar scale: Vector3 = transform.getWorldLossyScale();\r\n\t\t\t\tsv.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, scale);\r\n\t\t\t\tsv.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE, scale);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tvar localScale: Vector3 = transform.localScale;\r\n\t\t\t\tsv.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, localScale);\r\n\t\t\t\tsv.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE, localScale);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tsv.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, transform.getWorldLossyScale());\r\n\t\t\t\tsv.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE, Vector3._ONE);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tVector3.scale(Physics3DUtils.gravity, particleSystem.gravityModifier, this._finalGravity);\r\n\t\tsv.setVector3(ShuriKenParticle3DShaderDeclaration.GRAVITY, this._finalGravity);\r\n\t\tsv.setInt(ShuriKenParticle3DShaderDeclaration.SIMULATIONSPACE, particleSystem.simulationSpace);\r\n\t\tsv.setBool(ShuriKenParticle3DShaderDeclaration.THREEDSTARTROTATION, particleSystem.threeDStartRotation);\r\n\t\tsv.setInt(ShuriKenParticle3DShaderDeclaration.SCALINGMODE, particleSystem.scaleMode);\r\n\t\tsv.setNumber(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDLENGTHSCALE, this.stretchedBillboardLengthScale);\r\n\t\tsv.setNumber(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDSPEEDSCALE, this.stretchedBillboardSpeedScale);\r\n\t\tsv.setNumber(ShuriKenParticle3DShaderDeclaration.CURRENTTIME, particleSystem._currentTime);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tget bounds(): Bounds {\r\n\t\t//if (!(_owner as ShuriKenParticle3DShaderDeclaration).particleSystem.isAlive) {\r\n\t\t//return _defaultBoundBox;\r\n\t\t//} else {\r\n\t\tif (this._boundsChange) {\r\n\t\t\tthis._calculateBoundingBox();\r\n\t\t\tthis._boundsChange = false;\r\n\t\t}\r\n\t\treturn this._bounds;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_destroy(): void {\r\n\t\tsuper._destroy();\r\n\t\t(this._mesh) && (this._mesh._removeReference(), this._mesh = null);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","\r\n\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nexport class VertexShuriKenParticle {\r\n\t//TODO Attribute\r\n\tstatic PARTICLE_CORNERTEXTURECOORDINATE0: number = 5;\r\n\tstatic PARTICLE_POSITION0: number = 1;\r\n\tstatic PARTICLE_COLOR0: number = 2;\r\n\tstatic PARTICLE_TEXTURECOORDINATE0: number = 3;\r\n\tstatic PARTICLE_SHAPEPOSITIONSTARTLIFETIME: number = 4;\r\n\tstatic PARTICLE_DIRECTIONTIME: number = 0;\r\n\tstatic PARTICLE_STARTCOLOR0: number = 6;\r\n\tstatic PARTICLE_ENDCOLOR0: number = 7;\r\n\tstatic PARTICLE_STARTSIZE: number = 8;\r\n\tstatic PARTICLE_STARTROTATION: number = 9;\r\n\tstatic PARTICLE_STARTSPEED: number = 10;\r\n\tstatic PARTICLE_RANDOM0: number = 11;\r\n\tstatic PARTICLE_RANDOM1: number = 12;\r\n\tstatic PARTICLE_SIMULATIONWORLDPOSTION: number = 13;\r\n\tstatic PARTICLE_SIMULATIONWORLDROTATION: number = 14;\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { VertexShuriKenParticle } from \"./VertexShuriKenParticle\";\r\nimport { VertexDeclaration } from \"../VertexDeclaration\"\r\nimport { VertexElement } from \"../VertexElement\"\r\nimport { VertexElementFormat } from \"../VertexElementFormat\"\r\nimport { Vector3 } from \"../../math/Vector3\"\r\nimport { Vector4 } from \"../../math/Vector4\"\r\n\r\n/**\r\n * <code>VertexShurikenParticle</code> 类用于创建粒子顶点结构。\r\n */\r\nexport class VertexShurikenParticleBillboard extends VertexShuriKenParticle {\r\n\t/**@internal */\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleBillboard._vertexDeclaration;\r\n\t}\r\n\r\n\t/**\r\n \t* @internal\r\n \t*/\r\n\tstatic __init__(): void {\r\n\t\tVertexShurikenParticleBillboard._vertexDeclaration = new VertexDeclaration(152, [new VertexElement(0, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0),\r\n\t\tnew VertexElement(16, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\r\n\t\tnew VertexElement(32, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\r\n\t\tnew VertexElement(48, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\r\n\t\tnew VertexElement(64, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\r\n\t\tnew VertexElement(76, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\r\n\t\tnew VertexElement(88, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\r\n\t\tnew VertexElement(92, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\r\n\t\tnew VertexElement(108, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\r\n\t\tnew VertexElement(124, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\r\n\t\tnew VertexElement(136, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION)]);\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _cornerTextureCoordinate: Vector4;\r\n\t/**@internal */\r\n\tprivate _positionStartLifeTime: Vector4;\r\n\t/**@internal */\r\n\tprivate _velocity: Vector3;\r\n\t/**@internal */\r\n\tprivate _startColor: Vector4;\r\n\t/**@internal */\r\n\tprivate _startSize: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation0: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation1: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation2: Vector3;\r\n\t/**@internal */\r\n\tprivate _startLifeTime: number;\r\n\t/**@internal */\r\n\tprivate _time: number;\r\n\t/**@internal */\r\n\tprivate _startSpeed: number;\r\n\t/**@internal */\r\n\tprivate _randoms0: Vector4;\r\n\t/**@internal */\r\n\tprivate _randoms1: Vector4;\r\n\t/**@internal */\r\n\tprivate _simulationWorldPostion: Vector3;\r\n\r\n\tget cornerTextureCoordinate(): Vector4 {\r\n\t\treturn this._cornerTextureCoordinate;\r\n\t}\r\n\r\n\tget positionStartLifeTime(): Vector4 {\r\n\t\treturn this._positionStartLifeTime;\r\n\t}\r\n\r\n\tget velocity(): Vector3 {\r\n\t\treturn this._velocity;\r\n\t}\r\n\r\n\tget startColor(): Vector4 {\r\n\t\treturn this._startColor;\r\n\t}\r\n\r\n\tget startSize(): Vector3 {\r\n\t\treturn this._startSize;\r\n\t}\r\n\r\n\tget startRotation0(): Vector3 {\r\n\t\treturn this._startRotation0;\r\n\t}\r\n\r\n\tget startRotation1(): Vector3 {\r\n\t\treturn this._startRotation1;\r\n\t}\r\n\r\n\tget startRotation2(): Vector3 {\r\n\t\treturn this._startRotation2;\r\n\t}\r\n\r\n\tget startLifeTime(): number {\r\n\t\treturn this._startLifeTime;\r\n\t}\r\n\r\n\tget time(): number {\r\n\t\treturn this._time;\r\n\t}\r\n\r\n\tget startSpeed(): number {\r\n\t\treturn this._startSpeed;\r\n\t}\r\n\r\n\tget random0(): Vector4 {\r\n\t\treturn this._randoms0;\r\n\t}\r\n\r\n\tget random1(): Vector4 {\r\n\t\treturn this._randoms1;\r\n\t}\r\n\r\n\tget simulationWorldPostion(): Vector3 {\r\n\t\treturn this._simulationWorldPostion;\r\n\t}\r\n\r\n\tconstructor(cornerTextureCoordinate: Vector4, positionStartLifeTime: Vector4, velocity: Vector3, startColor: Vector4, startSize: Vector3, startRotation0: Vector3, startRotation1: Vector3, startRotation2: Vector3, ageAddScale: number, time: number, startSpeed: number, randoms0: Vector4, randoms1: Vector4, simulationWorldPostion: Vector3) {\r\n\t\tsuper();\r\n\t\tthis._cornerTextureCoordinate = cornerTextureCoordinate;\r\n\t\tthis._positionStartLifeTime = positionStartLifeTime;\r\n\t\tthis._velocity = velocity;\r\n\t\tthis._startColor = startColor;\r\n\t\tthis._startSize = startSize;\r\n\t\tthis._startRotation0 = startRotation0;\r\n\t\tthis._startRotation1 = startRotation1;\r\n\t\tthis._startRotation2 = startRotation2;\r\n\t\tthis._startLifeTime = ageAddScale;\r\n\t\tthis._time = time;\r\n\t\tthis._startSpeed = startSpeed;\r\n\t\tthis._randoms0 = this.random0;\r\n\t\tthis._randoms1 = this.random1;\r\n\t\tthis._simulationWorldPostion = simulationWorldPostion;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { VertexShuriKenParticle } from \"./VertexShuriKenParticle\";\r\nimport { VertexDeclaration } from \"../VertexDeclaration\"\r\nimport { VertexElement } from \"../VertexElement\"\r\nimport { VertexElementFormat } from \"../VertexElementFormat\"\r\nimport { Vector3 } from \"../../math/Vector3\"\r\nimport { Vector4 } from \"../../math/Vector4\"\r\n\r\n/**\r\n\t/**\r\n\t * <code>VertexShurikenParticle</code> 类用于创建粒子顶点结构。\r\n\t */\r\nexport class VertexShurikenParticleMesh extends VertexShuriKenParticle {\r\n\t/**@internal */\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\t/**\r\n  * @internal\r\n  */\r\n\tstatic __init__(): void {\r\n\t\tVertexShurikenParticleMesh._vertexDeclaration = new VertexDeclaration(172, [new VertexElement(0, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_POSITION0),\r\n\t\tnew VertexElement(12, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_COLOR0),\r\n\t\tnew VertexElement(28, VertexElementFormat.Vector2, VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0),\r\n\t\tnew VertexElement(36, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\r\n\t\tnew VertexElement(52, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\r\n\t\tnew VertexElement(68, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\r\n\t\tnew VertexElement(84, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\r\n\t\tnew VertexElement(96, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\r\n\t\tnew VertexElement(108, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\r\n\t\tnew VertexElement(112, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\r\n\t\tnew VertexElement(128, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\r\n\t\tnew VertexElement(144, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\r\n\t\tnew VertexElement(156, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION)]);\r\n\t}\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleMesh._vertexDeclaration;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _cornerTextureCoordinate: Vector4;\r\n\t/**@internal */\r\n\tprivate _positionStartLifeTime: Vector4;\r\n\t/**@internal */\r\n\tprivate _velocity: Vector3;\r\n\t/**@internal */\r\n\tprivate _startColor: Vector4;\r\n\t/**@internal */\r\n\tprivate _startSize: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation0: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation1: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation2: Vector3;\r\n\t/**@internal */\r\n\tprivate _startLifeTime: number;\r\n\t/**@internal */\r\n\tprivate _time: number;\r\n\t/**@internal */\r\n\tprivate _startSpeed: number;\r\n\t/**@internal */\r\n\tprivate _randoms0: Vector4;\r\n\t/**@internal */\r\n\tprivate _randoms1: Vector4;\r\n\t/**@internal */\r\n\tprivate _simulationWorldPostion: Vector3;\r\n\r\n\tget cornerTextureCoordinate(): Vector4 {\r\n\t\treturn this._cornerTextureCoordinate;\r\n\t}\r\n\r\n\tget position(): Vector4 {\r\n\t\treturn this._positionStartLifeTime;\r\n\t}\r\n\r\n\tget velocity(): Vector3 {\r\n\t\treturn this._velocity;\r\n\t}\r\n\r\n\tget startColor(): Vector4 {\r\n\t\treturn this._startColor;\r\n\t}\r\n\r\n\tget startSize(): Vector3 {\r\n\t\treturn this._startSize;\r\n\t}\r\n\r\n\tget startRotation0(): Vector3 {\r\n\t\treturn this._startRotation0;\r\n\t}\r\n\r\n\tget startRotation1(): Vector3 {\r\n\t\treturn this._startRotation1;\r\n\t}\r\n\r\n\tget startRotation2(): Vector3 {\r\n\t\treturn this._startRotation2;\r\n\t}\r\n\r\n\tget startLifeTime(): number {\r\n\t\treturn this._startLifeTime;\r\n\t}\r\n\r\n\tget time(): number {\r\n\t\treturn this._time;\r\n\t}\r\n\r\n\tget startSpeed(): number {\r\n\t\treturn this._startSpeed;\r\n\t}\r\n\r\n\tget random0(): Vector4 {\r\n\t\treturn this._randoms0;\r\n\t}\r\n\r\n\tget random1(): Vector4 {\r\n\t\treturn this._randoms1;\r\n\t}\r\n\r\n\tget simulationWorldPostion(): Vector3 {\r\n\t\treturn this._simulationWorldPostion;\r\n\t}\r\n\r\n\tconstructor(cornerTextureCoordinate: Vector4, positionStartLifeTime: Vector4, velocity: Vector3, startColor: Vector4, startSize: Vector3, startRotation0: Vector3, startRotation1: Vector3, startRotation2: Vector3, ageAddScale: number, time: number, startSpeed: number, randoms0: Vector4, randoms1: Vector4, simulationWorldPostion: Vector3) {\r\n\t\tsuper();\r\n\t\tthis._cornerTextureCoordinate = cornerTextureCoordinate;\r\n\t\tthis._positionStartLifeTime = positionStartLifeTime;\r\n\t\tthis._velocity = velocity;\r\n\t\tthis._startColor = startColor;\r\n\t\tthis._startSize = startSize;\r\n\t\tthis._startRotation0 = startRotation0;\r\n\t\tthis._startRotation1 = startRotation1;\r\n\t\tthis._startRotation2 = startRotation2;\r\n\t\tthis._startLifeTime = ageAddScale;\r\n\t\tthis._time = time;\r\n\t\tthis._startSpeed = startSpeed;\r\n\t\tthis._randoms0 = this.random0;\r\n\t\tthis._randoms1 = this.random1;\r\n\t\tthis._simulationWorldPostion = simulationWorldPostion;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","/**\r\n\t * <code>Rand</code> 类用于通过32位无符号整型随机种子创建随机数。\r\n\t */\r\nexport class Rand {\r\n\t/**\r\n\t * 通过无符号32位整形，获取32位浮点随机数。\r\n\t * @param 无符号32位整形随机数。\r\n\t * @return 32位浮点随机数。\r\n\t */\r\n\tstatic getFloatFromInt(v: number): number {\r\n\t\t// take 23 bits of integer, and divide by 2^23-1\r\n\t\treturn (v & 0x007FFFFF) * (1.0 / 8388607.0)\r\n\t}\r\n\r\n\t/**\r\n\t * 通过无符号32位整形，获取无符号8位字节随机数。\r\n\t * @param 无符号32位整形随机数。\r\n\t * @return 无符号8位字节随机数。\r\n\t */\r\n\tstatic getByteFromInt(v: number): number {//TODO：待验证函数\r\n\t\t// take the most significant byte from the 23-bit value\r\n\t\treturn (v & 0x007FFFFF) >>> 15/*(23-8)*/;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _temp: Uint32Array = new Uint32Array(1);\r\n\r\n\t/**获取随机种子。*/\r\n\tseeds: Uint32Array = new Uint32Array(4);\r\n\r\n\t/**\r\n\t * 获取随机种子。\r\n\t * @return 随机种子。\r\n\t */\r\n\tget seed(): number {\r\n\t\treturn this.seeds[0];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置随机种子。\r\n\t * @param\tseed 随机种子。\r\n\t */\r\n\tset seed(seed: number) {\r\n\t\tthis.seeds[0] = seed;\r\n\t\tthis.seeds[1] = this.seeds[0] * 0x6C078965/*1812433253U*/ + 1;\r\n\t\tthis.seeds[2] = this.seeds[1] * 0x6C078965/*1812433253U*/ + 1;\r\n\t\tthis.seeds[3] = this.seeds[2] * 0x6C078965/*1812433253U*/ + 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Rand</code> 实例。\r\n\t * @param\tseed  32位无符号整型随机种子。\r\n\t */\r\n\tconstructor(seed: number) {\r\n\t\tthis.seeds[0] = seed;\r\n\t\tthis.seeds[1] = this.seeds[0] * 0x6C078965/*1812433253U*/ + 1;\r\n\t\tthis.seeds[2] = this.seeds[1] * 0x6C078965/*1812433253U*/ + 1;\r\n\t\tthis.seeds[3] = this.seeds[2] * 0x6C078965/*1812433253U*/ + 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取无符号32位整形随机数。\r\n\t * @return 无符号32位整形随机数。\r\n\t */\r\n\tgetUint(): number {\r\n\t\tthis._temp[0] = this.seeds[0] ^ (this.seeds[0] << 11);\r\n\t\tthis.seeds[0] = this.seeds[1];\r\n\t\tthis.seeds[1] = this.seeds[2];\r\n\t\tthis.seeds[2] = this.seeds[3];\r\n\t\tthis.seeds[3] = (this.seeds[3] ^ (this.seeds[3] >>> 19)) ^ (this._temp[0] ^ (this._temp[0] >>> 8));\r\n\t\treturn this.seeds[3];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取0到1之间的浮点随机数。\r\n\t * @return 0到1之间的浮点随机数。\r\n\t */\r\n\tgetFloat(): number {\r\n\t\tthis.getUint();\r\n\t\treturn (this.seeds[3] & 0x007FFFFF) * (1.0 / 8388607.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取-1到1之间的浮点随机数。\r\n\t * @return -1到1之间的浮点随机数。\r\n\t */\r\n\tgetSignedFloat(): number {\r\n\t\treturn this.getFloat() * 2.0 - 1.0;\r\n\t}\r\n\r\n}\r\n\r\n","import { IDestroy } from \"../../../../resource/IDestroy\";\r\nimport { IClone } from \"../../IClone\";\r\nimport { Burst } from \"./Burst\";\r\n\r\n/**\r\n * <code>Emission</code> 类用于粒子发射器。\r\n */\r\nexport class Emission implements IClone, IDestroy {\r\n\t/** @internal */\r\n\tprivate _destroyed: boolean;\r\n\t/** @internal */\r\n\tprivate _emissionRate: number = 10;\r\n\r\n\t/**@internal 粒子的爆裂,不允许修改。*/\r\n\t_bursts: Burst[];\r\n\r\n\t/**是否启用。*/\r\n\tenable: boolean;\r\n\r\n\t/**\r\n\t * 设置粒子发射速率。\r\n\t * @param emissionRate 粒子发射速率 (个/秒)。\r\n\t */\r\n\tset emissionRate(value: number) {\r\n\t\tif (value < 0)\r\n\t\t\tthrow new Error(\"ParticleBaseShape:emissionRate value must large or equal than 0.\");\r\n\t\tthis._emissionRate = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取粒子发射速率。\r\n\t * @return 粒子发射速率 (个/秒)。\r\n\t */\r\n\tget emissionRate(): number {\r\n\t\treturn this._emissionRate;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取是否已销毁。\r\n\t * @return 是否已销毁。\r\n\t */\r\n\tget destroyed(): boolean {\r\n\t\treturn this._destroyed;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Emission</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._destroyed = false;\r\n\t\tthis._bursts = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\tdestroy(): void {\r\n\t\tthis._bursts = null;\r\n\t\tthis._destroyed = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取粒子爆裂个数。\r\n\t * @return 粒子爆裂个数。\r\n\t */\r\n\tgetBurstsCount(): number {\r\n\t\treturn this._bursts.length;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取粒子爆裂。\r\n\t * @param index 爆裂索引。\r\n\t * @return 粒子爆裂。\r\n\t */\r\n\tgetBurstByIndex(index: number): Burst {\r\n\t\treturn this._bursts[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 增加粒子爆裂。\r\n\t * @param burst 爆裂。\r\n\t */\r\n\taddBurst(burst: Burst): void {\r\n\t\tvar burstsCount: number = this._bursts.length;\r\n\t\tif (burstsCount > 0)\r\n\t\t\tfor (var i: number = 0; i < burstsCount; i++) {\r\n\t\t\t\tif (this._bursts[i].time > burst.time)\r\n\t\t\t\t\tthis._bursts.splice(i, 0, burst);\r\n\t\t\t}\r\n\t\tthis._bursts.push(burst);\r\n\t}\r\n\r\n\t/**\r\n\t * 移除粒子爆裂。\r\n\t * @param burst 爆裂。\r\n\t */\r\n\tremoveBurst(burst: Burst): void {\r\n\t\tvar index: number = this._bursts.indexOf(burst);\r\n\t\tif (index !== -1) {\r\n\t\t\tthis._bursts.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引移除粒子爆裂。\r\n\t * @param index 爆裂索引。\r\n\t */\r\n\tremoveBurstByIndex(index: number): void {\r\n\t\tthis._bursts.splice(index, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * 清空粒子爆裂。\r\n\t */\r\n\tclearBurst(): void {\r\n\t\tthis._bursts.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destEmission: Emission = (<Emission>destObject);\r\n\r\n\t\tvar destBursts: Burst[] = destEmission._bursts;\r\n\t\tdestBursts.length = this._bursts.length;\r\n\t\tfor (var i: number = 0, n: number = this._bursts.length; i < n; i++) {\r\n\t\t\tvar destBurst: Burst = destBursts[i];\r\n\t\t\tif (destBurst)\r\n\t\t\t\tthis._bursts[i].cloneTo(destBurst);\r\n\t\t\telse\r\n\t\t\t\tdestBursts[i] = this._bursts[i].clone();\r\n\t\t}\r\n\r\n\t\tdestEmission._emissionRate = this._emissionRate;\r\n\t\tdestEmission.enable = this.enable;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destEmission: Emission = new Emission();\r\n\t\tthis.cloneTo(destEmission);\r\n\t\treturn destEmission;\r\n\t}\r\n}\r\n\r\n\r\n","import { MathUtil } from \"../../../maths/MathUtil\";\r\nimport { Rand } from \"../../math/Rand\";\r\nimport { Vector2 } from \"../../math/Vector2\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { ColorOverLifetime } from \"./module/ColorOverLifetime\";\r\nimport { FrameOverTime } from \"./module/FrameOverTime\";\r\nimport { GradientColor } from \"./module/GradientColor\";\r\nimport { GradientDataNumber } from \"./module/GradientDataNumber\";\r\nimport { GradientSize } from \"./module/GradientSize\";\r\nimport { SizeOverLifetime } from \"./module/SizeOverLifetime\";\r\nimport { StartFrame } from \"./module/StartFrame\";\r\nimport { TextureSheetAnimation } from \"./module/TextureSheetAnimation\";\r\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\r\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\r\n\r\n/**\r\n *  @internal\r\n */\r\nexport class ShurikenParticleData {\r\n\t/**@internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\r\n\tstatic startLifeTime: number;\r\n\tstatic startColor: Vector4 = new Vector4();\r\n\tstatic startSize: Float32Array = new Float32Array(3);\r\n\tstatic startRotation: Float32Array = new Float32Array(3);\r\n\tstatic startUVInfo: Float32Array = new Float32Array(4);\r\n\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _getStartLifetimeFromGradient(startLifeTimeGradient: GradientDataNumber, emissionTime: number): number {\r\n\t\tfor (var i: number = 1, n: number = startLifeTimeGradient.gradientCount; i < n; i++) {\r\n\t\t\tvar key: number = startLifeTimeGradient.getKeyByIndex(i);\r\n\t\t\tif (key >= emissionTime) {\r\n\t\t\t\tvar lastKey: number = startLifeTimeGradient.getKeyByIndex(i - 1);\r\n\t\t\t\tvar age: number = (emissionTime - lastKey) / (key - lastKey);\r\n\t\t\t\treturn MathUtil.lerp(startLifeTimeGradient.getValueByIndex(i - 1), startLifeTimeGradient.getValueByIndex(i), age)\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new Error(\"ShurikenParticleData: can't get value foam startLifeTimeGradient.\");\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _randomInvertRoationArray(rotatonE: Vector3, outE: Vector3, randomizeRotationDirection: number, rand: Rand, randomSeeds: Uint32Array): void {\r\n\t\tvar randDic: number;\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[6];\r\n\t\t\trandDic = rand.getFloat();\r\n\t\t\trandomSeeds[6] = rand.seed;\r\n\t\t} else {\r\n\t\t\trandDic = Math.random();\r\n\t\t}\r\n\t\tif (randDic < randomizeRotationDirection) {\r\n\t\t\toutE.x = -rotatonE.x;\r\n\t\t\toutE.y = -rotatonE.y;\r\n\t\t\toutE.z = -rotatonE.z;\r\n\t\t} else {\r\n\t\t\toutE.x = rotatonE.x;\r\n\t\t\toutE.y = rotatonE.y;\r\n\t\t\toutE.z = rotatonE.z;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _randomInvertRoation(rotaton: number, randomizeRotationDirection: number, rand: Rand, randomSeeds: Uint32Array): number {\r\n\t\tvar randDic: number;\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[6];\r\n\t\t\trandDic = rand.getFloat();\r\n\t\t\trandomSeeds[6] = rand.seed;\r\n\t\t} else {\r\n\t\t\trandDic = Math.random();\r\n\t\t}\r\n\t\tif (randDic < randomizeRotationDirection)\r\n\t\t\trotaton = -rotaton;\r\n\t\treturn rotaton;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic create(particleSystem: ShurikenParticleSystem, particleRender: ShurikenParticleRenderer, transform: Transform3D): void {\r\n\t\tvar autoRandomSeed: boolean = particleSystem.autoRandomSeed;\r\n\t\tvar rand: Rand = particleSystem._rand;\r\n\t\tvar randomSeeds: Uint32Array = particleSystem._randomSeeds;\r\n\r\n\t\t//StartColor\r\n\t\tswitch (particleSystem.startColorType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tvar constantStartColor: Vector4 = particleSystem.startColorConstant;\r\n\t\t\t\tShurikenParticleData.startColor.x = constantStartColor.x;\r\n\t\t\t\tShurikenParticleData.startColor.y = constantStartColor.y;\r\n\t\t\t\tShurikenParticleData.startColor.z = constantStartColor.z;\r\n\t\t\t\tShurikenParticleData.startColor.w = constantStartColor.w;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\tVector4.lerp(particleSystem.startColorConstantMin, particleSystem.startColorConstantMax, Math.random(), ShurikenParticleData.startColor);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[3];\r\n\t\t\t\t\tVector4.lerp(particleSystem.startColorConstantMin, particleSystem.startColorConstantMax, rand.getFloat(), ShurikenParticleData.startColor);\r\n\t\t\t\t\trandomSeeds[3] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tvar colorOverLifetime: ColorOverLifetime = particleSystem.colorOverLifetime;\r\n\t\tif (colorOverLifetime && colorOverLifetime.enable) {\r\n\t\t\tvar color: GradientColor = colorOverLifetime.color;\r\n\t\t\tswitch (color.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tShurikenParticleData.startColor.x = ShurikenParticleData.startColor.x * color.constant.x;\r\n\t\t\t\t\tShurikenParticleData.startColor.y = ShurikenParticleData.startColor.y * color.constant.y;\r\n\t\t\t\t\tShurikenParticleData.startColor.z = ShurikenParticleData.startColor.z * color.constant.z;\r\n\t\t\t\t\tShurikenParticleData.startColor.w = ShurikenParticleData.startColor.w * color.constant.w;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tvar colorRandom: number;\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tcolorRandom = Math.random();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[10];\r\n\t\t\t\t\t\tcolorRandom = rand.getFloat();\r\n\t\t\t\t\t\trandomSeeds[10] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar minConstantColor: Vector4 = color.constantMin;\r\n\t\t\t\t\tvar maxConstantColor: Vector4 = color.constantMax;\r\n\t\t\t\t\tShurikenParticleData.startColor.x = ShurikenParticleData.startColor.x * MathUtil.lerp(minConstantColor.x, maxConstantColor.x, colorRandom);\r\n\t\t\t\t\tShurikenParticleData.startColor.y = ShurikenParticleData.startColor.y * MathUtil.lerp(minConstantColor.y, maxConstantColor.y, colorRandom);\r\n\t\t\t\t\tShurikenParticleData.startColor.z = ShurikenParticleData.startColor.z * MathUtil.lerp(minConstantColor.z, maxConstantColor.z, colorRandom);\r\n\t\t\t\t\tShurikenParticleData.startColor.w = ShurikenParticleData.startColor.w * MathUtil.lerp(minConstantColor.w, maxConstantColor.w, colorRandom);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//StartSize\r\n\t\tvar particleSize: Float32Array = ShurikenParticleData.startSize;\r\n\t\tswitch (particleSystem.startSizeType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (particleSystem.threeDStartSize) {\r\n\t\t\t\t\tvar startSizeConstantSeparate: Vector3 = particleSystem.startSizeConstantSeparate;\r\n\t\t\t\t\tparticleSize[0] = startSizeConstantSeparate.x;\r\n\t\t\t\t\tparticleSize[1] = startSizeConstantSeparate.y;\r\n\t\t\t\t\tparticleSize[2] = startSizeConstantSeparate.z;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tparticleSize[0] = particleSize[1] = particleSize[2] = particleSystem.startSizeConstant;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (particleSystem.threeDStartSize) {\r\n\t\t\t\t\tvar startSizeConstantMinSeparate: Vector3 = particleSystem.startSizeConstantMinSeparate;\r\n\t\t\t\t\tvar startSizeConstantMaxSeparate: Vector3 = particleSystem.startSizeConstantMaxSeparate;\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tparticleSize[0] = MathUtil.lerp(startSizeConstantMinSeparate.x, startSizeConstantMaxSeparate.x, Math.random());\r\n\t\t\t\t\t\tparticleSize[1] = MathUtil.lerp(startSizeConstantMinSeparate.y, startSizeConstantMaxSeparate.y, Math.random());\r\n\t\t\t\t\t\tparticleSize[2] = MathUtil.lerp(startSizeConstantMinSeparate.z, startSizeConstantMaxSeparate.z, Math.random());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[4];\r\n\t\t\t\t\t\tparticleSize[0] = MathUtil.lerp(startSizeConstantMinSeparate.x, startSizeConstantMaxSeparate.x, rand.getFloat());\r\n\t\t\t\t\t\tparticleSize[1] = MathUtil.lerp(startSizeConstantMinSeparate.y, startSizeConstantMaxSeparate.y, rand.getFloat());\r\n\t\t\t\t\t\tparticleSize[2] = MathUtil.lerp(startSizeConstantMinSeparate.z, startSizeConstantMaxSeparate.z, rand.getFloat());\r\n\t\t\t\t\t\trandomSeeds[4] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tparticleSize[0] = particleSize[1] = particleSize[2] = MathUtil.lerp(particleSystem.startSizeConstantMin, particleSystem.startSizeConstantMax, Math.random());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[4];\r\n\t\t\t\t\t\tparticleSize[0] = particleSize[1] = particleSize[2] = MathUtil.lerp(particleSystem.startSizeConstantMin, particleSystem.startSizeConstantMax, rand.getFloat());\r\n\t\t\t\t\t\trandomSeeds[4] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar sizeOverLifetime: SizeOverLifetime = particleSystem.sizeOverLifetime;\r\n\t\tif (sizeOverLifetime && sizeOverLifetime.enable && sizeOverLifetime.size.type === 1) {\r\n\t\t\tvar size: GradientSize = sizeOverLifetime.size;\r\n\t\t\tif (size.separateAxes) {\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\tparticleSize[0] = particleSize[0] * MathUtil.lerp(size.constantMinSeparate.x, size.constantMaxSeparate.x, Math.random());\r\n\t\t\t\t\tparticleSize[1] = particleSize[1] * MathUtil.lerp(size.constantMinSeparate.y, size.constantMaxSeparate.y, Math.random());\r\n\t\t\t\t\tparticleSize[2] = particleSize[2] * MathUtil.lerp(size.constantMinSeparate.z, size.constantMaxSeparate.z, Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[11];\r\n\t\t\t\t\tparticleSize[0] = particleSize[0] * MathUtil.lerp(size.constantMinSeparate.x, size.constantMaxSeparate.x, rand.getFloat());\r\n\t\t\t\t\tparticleSize[1] = particleSize[1] * MathUtil.lerp(size.constantMinSeparate.y, size.constantMaxSeparate.y, rand.getFloat());\r\n\t\t\t\t\tparticleSize[2] = particleSize[2] * MathUtil.lerp(size.constantMinSeparate.z, size.constantMaxSeparate.z, rand.getFloat());\r\n\t\t\t\t\trandomSeeds[11] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar randomSize: number;\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\trandomSize = MathUtil.lerp(size.constantMin, size.constantMax, Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[11];\r\n\t\t\t\t\trandomSize = MathUtil.lerp(size.constantMin, size.constantMax, rand.getFloat());\r\n\t\t\t\t\trandomSeeds[11] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tparticleSize[0] = particleSize[0] * randomSize;\r\n\t\t\t\tparticleSize[1] = particleSize[1] * randomSize;\r\n\t\t\t\tparticleSize[2] = particleSize[2] * randomSize;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//StartRotation//TODO:renderMode2、3模式都不需要旋转，是否移除。\r\n\t\tvar renderMode: number = particleRender.renderMode;\r\n\t\tif (renderMode !== 1) {\r\n\t\t\tswitch (particleSystem.startRotationType) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (particleSystem.threeDStartRotation) {\r\n\t\t\t\t\t\tvar startRotationConstantSeparate: Vector3 = particleSystem.startRotationConstantSeparate;\r\n\t\t\t\t\t\tvar randomRotationE: Vector3 = ShurikenParticleData._tempVector30;\r\n\t\t\t\t\t\tShurikenParticleData._randomInvertRoationArray(startRotationConstantSeparate, randomRotationE, particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[0] = randomRotationE.x;\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[1] = randomRotationE.y;\r\n\t\t\t\t\t\tif (renderMode !== 4)\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = -randomRotationE.z;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = randomRotationE.z;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[0] = ShurikenParticleData._randomInvertRoation(particleSystem.startRotationConstant, particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[1] = 0;\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[2] = 0;//需要置0,否则上次缓存影响数据。TODO:mesh模式下使用Z,但是这里为什么是X\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (particleSystem.threeDStartRotation) {\r\n\t\t\t\t\t\tvar startRotationConstantMinSeparate: Vector3 = particleSystem.startRotationConstantMinSeparate;\r\n\t\t\t\t\t\tvar startRotationConstantMaxSeparate: Vector3 = particleSystem.startRotationConstantMaxSeparate;\r\n\t\t\t\t\t\tvar lerpRoationE: Vector3 = ShurikenParticleData._tempVector30;\r\n\t\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\t\tlerpRoationE.x = MathUtil.lerp(startRotationConstantMinSeparate.x, startRotationConstantMaxSeparate.x, Math.random());\r\n\t\t\t\t\t\t\tlerpRoationE.y = MathUtil.lerp(startRotationConstantMinSeparate.y, startRotationConstantMaxSeparate.y, Math.random());\r\n\t\t\t\t\t\t\tlerpRoationE.z = MathUtil.lerp(startRotationConstantMinSeparate.z, startRotationConstantMaxSeparate.z, Math.random());\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trand.seed = randomSeeds[5];\r\n\t\t\t\t\t\t\tlerpRoationE.x = MathUtil.lerp(startRotationConstantMinSeparate.x, startRotationConstantMaxSeparate.x, rand.getFloat());\r\n\t\t\t\t\t\t\tlerpRoationE.y = MathUtil.lerp(startRotationConstantMinSeparate.y, startRotationConstantMaxSeparate.y, rand.getFloat());\r\n\t\t\t\t\t\t\tlerpRoationE.z = MathUtil.lerp(startRotationConstantMinSeparate.z, startRotationConstantMaxSeparate.z, rand.getFloat());\r\n\t\t\t\t\t\t\trandomSeeds[5] = rand.seed;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tShurikenParticleData._randomInvertRoationArray(lerpRoationE, lerpRoationE, particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[0] = lerpRoationE.x;\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[1] = lerpRoationE.y;\r\n\t\t\t\t\t\tif (renderMode !== 4)\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = -lerpRoationE.z;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = lerpRoationE.z;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[0] = ShurikenParticleData._randomInvertRoation(MathUtil.lerp(particleSystem.startRotationConstantMin, particleSystem.startRotationConstantMax, Math.random()), particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trand.seed = randomSeeds[5];\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[0] = ShurikenParticleData._randomInvertRoation(MathUtil.lerp(particleSystem.startRotationConstantMin, particleSystem.startRotationConstantMax, rand.getFloat()), particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\t\trandomSeeds[5] = rand.seed;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//StartLifetime\r\n\t\tswitch (particleSystem.startLifetimeType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tShurikenParticleData.startLifeTime = particleSystem.startLifetimeConstant;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tShurikenParticleData.startLifeTime = ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradient, particleSystem.emissionTime);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(particleSystem.startLifetimeConstantMin, particleSystem.startLifetimeConstantMax, Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[7];\r\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(particleSystem.startLifetimeConstantMin, particleSystem.startLifetimeConstantMax, rand.getFloat());\r\n\t\t\t\t\trandomSeeds[7] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tvar emissionTime: number = particleSystem.emissionTime;\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMin, emissionTime), ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMax, emissionTime), Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[7];\r\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMin, emissionTime), ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMax, emissionTime), rand.getFloat());\r\n\t\t\t\t\trandomSeeds[7] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\r\n\t\t//StartUV\r\n\t\tvar textureSheetAnimation: TextureSheetAnimation = particleSystem.textureSheetAnimation;\r\n\t\tvar enableSheetAnimation: boolean = textureSheetAnimation && textureSheetAnimation.enable;\r\n\t\tif (enableSheetAnimation) {\r\n\t\t\tvar title: Vector2 = textureSheetAnimation.tiles;\r\n\t\t\tvar titleX: number = title.x, titleY: number = title.y;\r\n\t\t\tvar subU: number = 1.0 / titleX, subV: number = 1.0 / titleY;\r\n\r\n\t\t\tvar startFrameCount: number;\r\n\t\t\tvar startFrame: StartFrame = textureSheetAnimation.startFrame;\r\n\t\t\tswitch (startFrame.type) {\r\n\t\t\t\tcase 0://常量模式\r\n\t\t\t\t\tstartFrameCount = startFrame.constant;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1://随机双常量模式\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tstartFrameCount = MathUtil.lerp(startFrame.constantMin, startFrame.constantMax, Math.random());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[14];\r\n\t\t\t\t\t\tstartFrameCount = MathUtil.lerp(startFrame.constantMin, startFrame.constantMax, rand.getFloat());\r\n\t\t\t\t\t\trandomSeeds[14] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tvar frame: FrameOverTime = textureSheetAnimation.frame;\r\n\t\t\tvar cycles: number = textureSheetAnimation.cycles;\r\n\t\t\tswitch (frame.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tstartFrameCount += frame.constant * cycles;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tstartFrameCount += MathUtil.lerp(frame.constantMin, frame.constantMax, Math.random()) * cycles;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[15];\r\n\t\t\t\t\t\tstartFrameCount += MathUtil.lerp(frame.constantMin, frame.constantMax, rand.getFloat()) * cycles;\r\n\t\t\t\t\t\trandomSeeds[15] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tvar startRow: number = 0;//TODO:case 2 没处理\r\n\t\t\tswitch (textureSheetAnimation.type) {\r\n\t\t\t\tcase 0://Whole Sheet\r\n\t\t\t\t\tstartRow = Math.floor(startFrameCount / titleX);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1://Singal Row\r\n\t\t\t\t\tif (textureSheetAnimation.randomRow) {\r\n\t\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\t\tstartRow = Math.floor(Math.random() * titleY);\r\n\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trand.seed = randomSeeds[13];\r\n\t\t\t\t\t\t\tstartRow = Math.floor(rand.getFloat() * titleY);\r\n\t\t\t\t\t\t\trandomSeeds[13] = rand.seed;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstartRow = textureSheetAnimation.rowIndex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tvar startCol: number = Math.floor(startFrameCount % titleX);\r\n\t\t\tShurikenParticleData.startUVInfo = ShurikenParticleData.startUVInfo;\r\n\t\t\tShurikenParticleData.startUVInfo[0] = subU;\r\n\t\t\tShurikenParticleData.startUVInfo[1] = subV;\r\n\t\t\tShurikenParticleData.startUVInfo[2] = startCol * subU;\r\n\t\t\tShurikenParticleData.startUVInfo[3] = startRow * subV;\r\n\t\t} else {\r\n\t\t\tShurikenParticleData.startUVInfo = ShurikenParticleData.startUVInfo;\r\n\t\t\tShurikenParticleData.startUVInfo[0] = 1.0;\r\n\t\t\tShurikenParticleData.startUVInfo[1] = 1.0;\r\n\t\t\tShurikenParticleData.startUVInfo[2] = 0.0;\r\n\t\t\tShurikenParticleData.startUVInfo[3] = 0.0;\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { MathUtil } from \"../../../maths/MathUtil\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexMesh } from \"../../graphics/Vertex/VertexMesh\";\r\nimport { VertexShurikenParticleBillboard } from \"../../graphics/Vertex/VertexShurikenParticleBillboard\";\r\nimport { VertexShurikenParticleMesh } from \"../../graphics/Vertex/VertexShurikenParticleMesh\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { VertexDeclaration } from \"../../graphics/VertexDeclaration\";\r\nimport { VertexElement } from \"../../graphics/VertexElement\";\r\nimport { BoundBox } from \"../../math/BoundBox\";\r\nimport { BoundSphere } from \"../../math/BoundSphere\";\r\nimport { Matrix4x4 } from \"../../math/Matrix4x4\";\r\nimport { Rand } from \"../../math/Rand\";\r\nimport { Vector2 } from \"../../math/Vector2\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { ShaderData } from \"../../shader/ShaderData\";\r\nimport { BufferState } from \"../BufferState\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { IClone } from \"../IClone\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { Scene3D } from \"../scene/Scene3D\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { Burst } from \"./module/Burst\";\r\nimport { ColorOverLifetime } from \"./module/ColorOverLifetime\";\r\nimport { Emission } from \"./module/Emission\";\r\nimport { FrameOverTime } from \"./module/FrameOverTime\";\r\nimport { GradientAngularVelocity } from \"./module/GradientAngularVelocity\";\r\nimport { GradientColor } from \"./module/GradientColor\";\r\nimport { GradientDataNumber } from \"./module/GradientDataNumber\";\r\nimport { GradientSize } from \"./module/GradientSize\";\r\nimport { GradientVelocity } from \"./module/GradientVelocity\";\r\nimport { RotationOverLifetime } from \"./module/RotationOverLifetime\";\r\nimport { BaseShape, ParticleSystemShapeType } from \"./module/shape/BaseShape\";\r\nimport { SizeOverLifetime } from \"./module/SizeOverLifetime\";\r\nimport { TextureSheetAnimation } from \"./module/TextureSheetAnimation\";\r\nimport { VelocityOverLifetime } from \"./module/VelocityOverLifetime\";\r\nimport { ShuriKenParticle3D } from \"./ShuriKenParticle3D\";\r\nimport { ShuriKenParticle3DShaderDeclaration } from \"./ShuriKenParticle3DShaderDeclaration\";\r\nimport { ShurikenParticleData } from \"./ShurikenParticleData\";\r\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\r\nimport { Quaternion } from \"../../math/Quaternion\";\r\nimport { IndexFormat } from \"../../graphics/IndexFormat\";\r\nimport { Bounds } from \"../Bounds\";\r\nimport { SphereShape } from \"./module/shape/SphereShape\";\r\nimport { HemisphereShape } from \"./module/shape/HemisphereShape\";\r\nimport { ConeShape } from \"./module/shape/ConeShape\";\r\nimport { CircleShape } from \"./module/shape/CircleShape\";\r\nimport { BoxShape } from \"./module/shape/BoxShape\";\r\n\r\n\r\n/**\r\n * <code>ShurikenParticleSystem</code> 类用于创建3D粒子数据模板。\r\n */\r\nexport class ShurikenParticleSystem extends GeometryElement implements IClone {\r\n\t/** @internal 0:Burst,1:预留,2:StartDelay,3:StartColor,4:StartSize,5:StartRotation,6:randomizeRotationDirection,7:StartLifetime,8:StartSpeed,9:VelocityOverLifetime,10:ColorOverLifetime,11:SizeOverLifetime,12:RotationOverLifetime,13-15:TextureSheetAnimation,16-17:Shape*/\r\n\tstatic _RANDOMOFFSET: Uint32Array = new Uint32Array([0x23571a3e, 0xc34f56fe, 0x13371337, 0x12460f3b, 0x6aed452e, 0xdec4aea1, 0x96aa4de3, 0x8d2c8431, 0xf3857f6f, 0xe0fbd834, 0x13740583, 0x591bc05c, 0x40eb95e4, 0xbc524e5f, 0xaf502044, 0xa614b381, 0x1034e524, 0xfc524e5f]);\r\n\r\n\t/** @internal */\r\n\tprivate static halfKSqrtOf2: number = 1.42 * 0.5;\r\n\r\n\t/** @internal */\r\n\tprivate static g: number = 9.8;\r\n\r\n\t/** @internal */\r\n\tstatic _maxElapsedTime: number = 1.0 / 3.0;\r\n\r\n\t/**@internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector31: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector32: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector33: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector34: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector35: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector36: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector37: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector38: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector39: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempPosition: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempDirection: Vector3 = new Vector3();\r\n\r\n\t/**@internal */\r\n\tprivate static _type: number = GeometryElement._typeCounter++;\r\n\r\n\t/** @internal */\r\n\t_boundingSphere: BoundSphere = null;\r\n\t/** @internal */\r\n\t_boundingBox: BoundBox = null;\r\n\t/** @internal */\r\n\t_boundingBoxCorners: Vector3[] = null;\r\n\r\n\t/** @internal */\r\n\t_bounds: Bounds = null;\r\n\r\n\t/** @internal */\r\n\t_customBounds: Bounds = null;\r\n\r\n\t/** @internal */\r\n\t_useCustomBounds: boolean = false;\r\n\r\n\t/** @internal */\r\n\tprivate _owner: ShuriKenParticle3D = null;\r\n\t/** @internal */\r\n\tprivate _ownerRender: ShurikenParticleRenderer = null;\r\n\t/**@internal */\r\n\tprivate _vertices: Float32Array = null;\r\n\t/**@internal */\r\n\tprivate _floatCountPerVertex: number = 0;\r\n\t/**@internal */\r\n\tprivate _startLifeTimeIndex: number = 0;\r\n\t/**@internal */\r\n\tprivate _timeIndex: number = 0;\r\n\t/**@internal */\r\n\tprivate _simulateUpdate: boolean = false;\r\n\r\n\r\n\t/**@internal */\r\n\tprivate _firstActiveElement: number = 0;\r\n\t/**@internal */\r\n\tprivate _firstNewElement: number = 0;\r\n\t/**@internal */\r\n\tprivate _firstFreeElement: number = 0;\r\n\t/**@internal */\r\n\tprivate _firstRetiredElement: number = 0;\r\n\t/**@internal */\r\n\tprivate _drawCounter: number = 0;\r\n\t/**@internal */\r\n\tprivate _bufferMaxParticles: number = 0;\r\n\t/**@internal */\r\n\tprivate _emission: Emission = null;\r\n\t/**@internal */\r\n\tprivate _shape: BaseShape = null;\r\n\r\n\t/**@internal */\r\n\tprivate _isEmitting: boolean = false;\r\n\t/**@internal */\r\n\tprivate _isPlaying: boolean = false;\r\n\t/**@internal */\r\n\tprivate _isPaused: boolean = false;\r\n\t/**@internal */\r\n\tprivate _playStartDelay: number = 0;\r\n\t/**@internal 发射的累计时间。*/\r\n\tprivate _frameRateTime: number = 0;\r\n\t/**@internal 一次循环内的累计时间。*/\r\n\tprivate _emissionTime: number = 0;\r\n\t/**@internal */\r\n\tprivate _totalDelayTime: number = 0;\r\n\t/**@internal */\r\n\tprivate _burstsIndex: number = 0;\r\n\t///**@internal 发射粒子最小时间间隔。*/\r\n\t//private var _minEmissionTime:Number;\r\n\t/**@internal */\r\n\tprivate _velocityOverLifetime: VelocityOverLifetime = null;\r\n\t/**@internal */\r\n\tprivate _colorOverLifetime: ColorOverLifetime = null;\r\n\t/**@internal */\r\n\tprivate _sizeOverLifetime: SizeOverLifetime = null;\r\n\t/**@internal */\r\n\tprivate _rotationOverLifetime: RotationOverLifetime = null;\r\n\t/**@internal */\r\n\tprivate _textureSheetAnimation: TextureSheetAnimation = null;\r\n\t/**@internal */\r\n\tprivate _startLifetimeType: number = 0;\r\n\t/**@internal */\r\n\tprivate _startLifetimeConstant: number = 0;\r\n\t/**@internal */\r\n\tprivate _startLifeTimeGradient: GradientDataNumber = null;\r\n\t/**@internal */\r\n\tprivate _startLifetimeConstantMin: number = 0;\r\n\t/**@internal */\r\n\tprivate _startLifetimeConstantMax: number = 0;\r\n\t/**@internal */\r\n\tprivate _startLifeTimeGradientMin: GradientDataNumber = null;\r\n\t/**@internal */\r\n\tprivate _startLifeTimeGradientMax: GradientDataNumber = null;\r\n\t/**@internal */\r\n\tprivate _maxStartLifetime: number = 0;\r\n\r\n\t/** @internal */\r\n\tprivate _uvLength: Vector2 = new Vector2();//TODO:\r\n\t/** @internal */\r\n\tprivate _vertexStride: number = 0;\r\n\t/** @internal */\r\n\tprivate _indexStride: number = 0;\r\n\t/**@internal */\r\n\tprivate _vertexBuffer: VertexBuffer3D = null;\r\n\t/**@internal */\r\n\tprivate _indexBuffer: IndexBuffer3D = null;\r\n\t/** @internal */\r\n\tprivate _bufferState: BufferState = new BufferState();\r\n\r\n\t/**@internal */\r\n\t_currentTime: number = 0;\r\n\t/**@internal */\r\n\t_startUpdateLoopCount: number = 0;\r\n\t/**@internal */\r\n\t_rand: Rand = null;\r\n\t/**@internal */\r\n\t_randomSeeds: Uint32Array = null;\r\n\r\n\t/**粒子运行的总时长，单位为秒。*/\r\n\tduration: number = 0;\r\n\t/**是否循环。*/\r\n\tlooping: boolean = false;\r\n\t/**是否预热。暂不支持*/\r\n\tprewarm: boolean = false;\r\n\t/**开始延迟类型，0为常量模式,1为随机随机双常量模式，不能和prewarm一起使用。*/\r\n\tstartDelayType: number = 0;\r\n\t/**开始播放延迟，不能和prewarm一起使用。*/\r\n\tstartDelay: number = 0;\r\n\t/**开始播放最小延迟，不能和prewarm一起使用。*/\r\n\tstartDelayMin: number = 0;\r\n\t/**开始播放最大延迟，不能和prewarm一起使用。*/\r\n\tstartDelayMax: number = 0;\r\n\r\n\t/**开始速度模式，0为恒定速度，2为两个恒定速度的随机插值。缺少1、3模式*/\r\n\tstartSpeedType: number = 0;\r\n\t/**开始速度,0模式。*/\r\n\tstartSpeedConstant: number = 0;\r\n\t/**最小开始速度,1模式。*/\r\n\tstartSpeedConstantMin: number = 0;\r\n\t/**最大开始速度,1模式。*/\r\n\tstartSpeedConstantMax: number = 0;\r\n\r\n\t/**开始尺寸是否为3D模式。*/\r\n\tthreeDStartSize: boolean = false;\r\n\t/**开始尺寸模式,0为恒定尺寸，2为两个恒定尺寸的随机插值。缺少1、3模式和对应的二种3D模式*/\r\n\tstartSizeType: number = 0;\r\n\t/**开始尺寸，0模式。*/\r\n\tstartSizeConstant: number = 0;\r\n\t/**开始三维尺寸，0模式。*/\r\n\tstartSizeConstantSeparate: Vector3 = null;\r\n\t/**最小开始尺寸，2模式。*/\r\n\tstartSizeConstantMin: number = 0;\r\n\t/**最大开始尺寸，2模式。*/\r\n\tstartSizeConstantMax: number = 0;\r\n\t/**最小三维开始尺寸，2模式。*/\r\n\tstartSizeConstantMinSeparate: Vector3 = null;\r\n\t/**最大三维开始尺寸，2模式。*/\r\n\tstartSizeConstantMaxSeparate: Vector3 = null;\r\n\r\n\t/**3D开始旋转。*/\r\n\tthreeDStartRotation: boolean = false;\r\n\t/**开始旋转模式,0为恒定尺寸，2为两个恒定旋转的随机插值,缺少2种模式,和对应的四种3D模式。*/\r\n\tstartRotationType: number = 0;\r\n\t/**开始旋转，0模式。*/\r\n\tstartRotationConstant: number = 0;\r\n\t/**开始三维旋转，0模式。*/\r\n\tstartRotationConstantSeparate: Vector3 = null;\r\n\t/**最小开始旋转，1模式。*/\r\n\tstartRotationConstantMin: number = 0;\r\n\t/**最大开始旋转，1模式。*/\r\n\tstartRotationConstantMax: number = 0;\r\n\t/**最小开始三维旋转，1模式。*/\r\n\tstartRotationConstantMinSeparate: Vector3 = null;\r\n\t/**最大开始三维旋转，1模式。*/\r\n\tstartRotationConstantMaxSeparate: Vector3 = null;\r\n\r\n\t/**随机旋转方向，范围为0.0到1.0*/\r\n\trandomizeRotationDirection: number = 0;\r\n\r\n\t/**开始颜色模式，0为恒定颜色，2为两个恒定颜色的随机插值,缺少2种模式。*/\r\n\tstartColorType: number = 0;\r\n\t/**开始颜色，0模式。*/\r\n\tstartColorConstant: Vector4 = new Vector4(1, 1, 1, 1);;\r\n\t/**最小开始颜色，1模式。*/\r\n\tstartColorConstantMin: Vector4 = new Vector4(0, 0, 0, 0);\r\n\t/**最大开始颜色，1模式。*/\r\n\tstartColorConstantMax: Vector4 = new Vector4(1, 1, 1, 1);\r\n\r\n\t/**重力敏感度。*/\r\n\tgravityModifier: number = 0;\r\n\t/**模拟器空间,0为World,1为Local。暂不支持Custom。*/\r\n\tsimulationSpace: number = 0;\r\n\t/**粒子的播放速度。 */\r\n\tsimulationSpeed: number = 1.0;\r\n\t/**缩放模式，0为Hiercachy,1为Local,2为World。*/\r\n\tscaleMode: number = 1;\r\n\t/**激活时是否自动播放。*/\r\n\tplayOnAwake: boolean = false;\r\n\r\n\t/**随机种子,注:play()前设置有效。*/\r\n\trandomSeed: Uint32Array = null;\r\n\t/**是否使用随机种子。 */\r\n\tautoRandomSeed: boolean = false;\r\n\r\n\t/**是否为性能模式,性能模式下会延迟粒子释放。*/\r\n\tisPerformanceMode: boolean = false;\r\n\r\n\t/**最大粒子数。*/\r\n\tget maxParticles(): number {\r\n\t\treturn this._bufferMaxParticles - 1;\r\n\t}\r\n\r\n\tset maxParticles(value: number) {//TODO:是否要重置其它参数\r\n\t\tvar newMaxParticles: number = value + 1;\r\n\t\tif (newMaxParticles !== this._bufferMaxParticles) {\r\n\t\t\tthis._bufferMaxParticles = newMaxParticles;\r\n\t\t\tthis._initBufferDatas();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取发射器。\r\n\t */\r\n\tget emission(): Emission {\r\n\t\treturn this._emission;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 粒子存活个数。\r\n\t */\r\n\tget aliveParticleCount(): number {\r\n\t\tif (this._firstNewElement >= this._firstRetiredElement)\r\n\t\t\treturn this._firstNewElement - this._firstRetiredElement;\r\n\t\telse\r\n\t\t\treturn this._bufferMaxParticles - this._firstRetiredElement + this._firstNewElement;\r\n\t}\r\n\r\n\t/**\r\n\t * 一次循环内的累计时间。\r\n\t */\r\n\tget emissionTime(): number {\r\n\t\treturn this._emissionTime > this.duration ? this.duration : this._emissionTime;\r\n\t}\r\n\r\n\t/**\r\n\t * 形状。\r\n\t */\r\n\tget shape(): BaseShape {\r\n\t\treturn this._shape;\r\n\t}\r\n\r\n\tset shape(value: BaseShape) {\r\n\t\tif (this._shape !== value) {\r\n\t\t\tif (value && value.enable)\r\n\t\t\t\tthis._owner._render._shaderValues.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SHAPE);\r\n\t\t\telse\r\n\t\t\t\tthis._owner._render._shaderValues.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SHAPE);\r\n\t\t\tthis._shape = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 是否存活。\r\n\t */\r\n\tget isAlive(): boolean {\r\n\t\tif (this._isPlaying || this.aliveParticleCount > 0)//TODO:暂时忽略retired\r\n\t\t\treturn true;\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否正在发射。\r\n\t */\r\n\tget isEmitting(): boolean {\r\n\t\treturn this._isEmitting;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否正在播放。\r\n\t */\r\n\tget isPlaying(): boolean {\r\n\t\treturn this._isPlaying;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否已暂停。\r\n\t */\r\n\tget isPaused(): boolean {\r\n\t\treturn this._isPaused;\r\n\t}\r\n\r\n\t/**\r\n\t * 开始生命周期模式,0为固定时间，1为渐变时间，2为两个固定之间的随机插值,3为两个渐变时间的随机插值。\r\n\t */\r\n\tget startLifetimeType(): number {\r\n\t\treturn this._startLifetimeType;\r\n\t}\r\n\r\n\tset startLifetimeType(value: number) {\r\n\t\t//if (value !== _startLifetimeType){\r\n\t\tvar i: number, n: number;\r\n\t\tswitch (this.startLifetimeType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tthis._maxStartLifetime = this.startLifetimeConstant;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tthis._maxStartLifetime = -Number.MAX_VALUE;\r\n\t\t\t\tvar startLifeTimeGradient: GradientDataNumber = startLifeTimeGradient;\r\n\t\t\t\tfor (i = 0, n = startLifeTimeGradient.gradientCount; i < n; i++)\r\n\t\t\t\t\tthis._maxStartLifetime = Math.max(this._maxStartLifetime, startLifeTimeGradient.getValueByIndex(i));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tthis._maxStartLifetime = Math.max(this.startLifetimeConstantMin, this.startLifetimeConstantMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tthis._maxStartLifetime = -Number.MAX_VALUE;\r\n\t\t\t\tvar startLifeTimeGradientMin: GradientDataNumber = startLifeTimeGradientMin;\r\n\t\t\t\tfor (i = 0, n = startLifeTimeGradientMin.gradientCount; i < n; i++)\r\n\t\t\t\t\tthis._maxStartLifetime = Math.max(this._maxStartLifetime, startLifeTimeGradientMin.getValueByIndex(i));\r\n\t\t\t\tvar startLifeTimeGradientMax: GradientDataNumber = startLifeTimeGradientMax;\r\n\t\t\t\tfor (i = 0, n = startLifeTimeGradientMax.gradientCount; i < n; i++)\r\n\t\t\t\t\tthis._maxStartLifetime = Math.max(this._maxStartLifetime, startLifeTimeGradientMax.getValueByIndex(i));\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis._startLifetimeType = value;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * 开始生命周期，0模式,单位为秒。\r\n\t */\r\n\tget startLifetimeConstant(): number {\r\n\t\treturn this._startLifetimeConstant;\r\n\t}\r\n\r\n\tset startLifetimeConstant(value: number) {\r\n\t\tif (this._startLifetimeType === 0)\r\n\t\t\tthis._maxStartLifetime = value;\r\n\t\tthis._startLifetimeConstant = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 开始渐变生命周期，1模式,单位为秒。\r\n\t */\r\n\tget startLifeTimeGradient(): GradientDataNumber {\r\n\t\treturn this._startLifeTimeGradient;\r\n\t}\r\n\r\n\tset startLifeTimeGradient(value: GradientDataNumber) {//无法使用if (_startLifeTimeGradient !== value)过滤，同一个GradientDataNumber可能修改了值,因此所有startLifeTime属性都统一处理\r\n\t\tif (this._startLifetimeType === 1) {\r\n\t\t\tthis._maxStartLifetime = -Number.MAX_VALUE;\r\n\t\t\tfor (var i: number = 0, n: number = value.gradientCount; i < n; i++)\r\n\t\t\t\tthis._maxStartLifetime = Math.max(this._maxStartLifetime, value.getValueByIndex(i));\r\n\t\t}\r\n\t\tthis._startLifeTimeGradient = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小开始生命周期，2模式,单位为秒。\r\n\t */\r\n\tget startLifetimeConstantMin(): number {\r\n\t\treturn this._startLifetimeConstantMin;\r\n\t}\r\n\r\n\tset startLifetimeConstantMin(value: number) {\r\n\t\tif (this._startLifetimeType === 2)\r\n\t\t\tthis._maxStartLifetime = Math.max(value, this._startLifetimeConstantMax);\r\n\t\tthis._startLifetimeConstantMin = value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 最大开始生命周期，2模式,单位为秒。\r\n\t */\r\n\tget startLifetimeConstantMax(): number {\r\n\t\treturn this._startLifetimeConstantMax;\r\n\t}\r\n\r\n\tset startLifetimeConstantMax(value: number) {\r\n\t\tif (this._startLifetimeType === 2)\r\n\t\t\tthis._maxStartLifetime = Math.max(this._startLifetimeConstantMin, value);\r\n\t\tthis._startLifetimeConstantMax = value;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 开始渐变最小生命周期，3模式,单位为秒。\r\n\t */\r\n\tget startLifeTimeGradientMin(): GradientDataNumber {\r\n\t\treturn this._startLifeTimeGradientMin;\r\n\t}\r\n\r\n\tset startLifeTimeGradientMin(value: GradientDataNumber) {\r\n\t\tif (this._startLifetimeType === 3) {\r\n\t\t\tvar i: number, n: number;\r\n\t\t\tthis._maxStartLifetime = -Number.MAX_VALUE;\r\n\t\t\tfor (i = 0, n = value.gradientCount; i < n; i++)\r\n\t\t\t\tthis._maxStartLifetime = Math.max(this._maxStartLifetime, value.getValueByIndex(i));\r\n\t\t\tfor (i = 0, n = this._startLifeTimeGradientMax.gradientCount; i < n; i++)\r\n\t\t\t\tthis._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMax.getValueByIndex(i));\r\n\t\t}\r\n\t\tthis._startLifeTimeGradientMin = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 开始渐变最大生命周期，3模式,单位为秒。\r\n\t */\r\n\tget startLifeTimeGradientMax(): GradientDataNumber {\r\n\t\treturn this._startLifeTimeGradientMax;\r\n\t}\r\n\r\n\tset startLifeTimeGradientMax(value: GradientDataNumber) {\r\n\t\tif (this._startLifetimeType === 3) {\r\n\t\t\tvar i: number, n: number;\r\n\t\t\tthis._maxStartLifetime = -Number.MAX_VALUE;\r\n\t\t\tfor (i = 0, n = this._startLifeTimeGradientMin.gradientCount; i < n; i++)\r\n\t\t\t\tthis._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMin.getValueByIndex(i));\r\n\t\t\tfor (i = 0, n = value.gradientCount; i < n; i++)\r\n\t\t\t\tthis._maxStartLifetime = Math.max(this._maxStartLifetime, value.getValueByIndex(i));\r\n\t\t}\r\n\t\tthis._startLifeTimeGradientMax = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 生命周期速度,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\r\n\t */\r\n\tget velocityOverLifetime(): VelocityOverLifetime {\r\n\t\treturn this._velocityOverLifetime;\r\n\t}\r\n\r\n\tset velocityOverLifetime(value: VelocityOverLifetime) {\r\n\t\tvar shaDat: ShaderData = this._owner._render._shaderValues;\r\n\t\tif (value) {\r\n\t\t\tvar velocity: GradientVelocity = value.velocity;\r\n\t\t\tvar velocityType: number = velocity.type;\r\n\t\t\tif (value.enable) {\r\n\t\t\t\tswitch (velocityType) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT);\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE);\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT);\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);\r\n\t\t\t}\r\n\r\n\t\t\tswitch (velocityType) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tshaDat.setVector3(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONST, velocity.constant);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX, velocity.gradientX._elements);\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY, velocity.gradientY._elements);\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ, velocity.gradientZ._elements);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tshaDat.setVector3(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONST, velocity.constantMin);\r\n\t\t\t\t\tshaDat.setVector3(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONSTMAX, velocity.constantMax);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX, velocity.gradientXMin._elements);\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX, velocity.gradientXMax._elements);\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY, velocity.gradientYMin._elements);\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX, velocity.gradientYMax._elements);\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ, velocity.gradientZMin._elements);\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX, velocity.gradientZMax._elements);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tshaDat.setInt(ShuriKenParticle3DShaderDeclaration.VOLSPACETYPE, value.space);\r\n\t\t} else {\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT);\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE);\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT);\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);\r\n\t\t}\r\n\t\tthis._velocityOverLifetime = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 生命周期颜色,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\r\n\t */\r\n\tget colorOverLifetime(): ColorOverLifetime {\r\n\t\treturn this._colorOverLifetime;\r\n\t}\r\n\r\n\tset colorOverLifetime(value: ColorOverLifetime) {\r\n\t\tvar shaDat: ShaderData = this._owner._render._shaderValues;\r\n\t\tif (value) {\r\n\t\t\tvar color: GradientColor = value.color;\r\n\t\t\tif (value.enable) {\r\n\t\t\t\tswitch (color.type) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLOROVERLIFETIME);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLOROVERLIFETIME);\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);\r\n\t\t\t}\r\n\r\n\t\t\tswitch (color.type) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tvar gradientColor: Gradient = color.gradient;\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, gradientColor._alphaElements);\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, gradientColor._rgbElements);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tvar minGradientColor: Gradient = color.gradientMin;\r\n\t\t\t\t\tvar maxGradientColor: Gradient = color.gradientMax;\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, minGradientColor._alphaElements);\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, minGradientColor._rgbElements);\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS, maxGradientColor._alphaElements);\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS, maxGradientColor._rgbElements);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLOROVERLIFETIME);\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);\r\n\r\n\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, gradientColor._alphaElements);\r\n\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, gradientColor._rgbElements);\r\n\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, minGradientColor._alphaElements);\r\n\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, minGradientColor._rgbElements);\r\n\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS, maxGradientColor._alphaElements);\r\n\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS, maxGradientColor._rgbElements);\r\n\t\t}\r\n\t\tthis._colorOverLifetime = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 生命周期尺寸,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\r\n\t */\r\n\tget sizeOverLifetime(): SizeOverLifetime {\r\n\t\treturn this._sizeOverLifetime;\r\n\t}\r\n\r\n\tset sizeOverLifetime(value: SizeOverLifetime) {\r\n\t\tvar shaDat: ShaderData = this._owner._render._shaderValues;\r\n\t\tif (value) {\r\n\t\t\tvar size: GradientSize = value.size;\r\n\t\t\tvar sizeSeparate: boolean = size.separateAxes;\r\n\t\t\tvar sizeType: number = size.type;\r\n\t\t\tif (value.enable) {\r\n\t\t\t\tswitch (sizeType) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tif (sizeSeparate)\r\n\t\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVE);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tif (sizeSeparate)\r\n\t\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVE);\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE);\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);\r\n\t\t\t}\r\n\r\n\t\t\tswitch (sizeType) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (sizeSeparate) {\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX, size.gradientX._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY, size.gradientY._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ, size.gradientZ._elements);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT, size.gradient._elements);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (sizeSeparate) {\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX, size.gradientXMin._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX, size.gradientXMax._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY, size.gradientYMin._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX, size.gradientYMax._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ, size.gradientZMin._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX, size.gradientZMax._elements);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT, size.gradientMin._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax, size.gradientMax._elements);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVE);\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE);\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);\r\n\t\t}\r\n\t\tthis._sizeOverLifetime = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 生命周期旋转,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\r\n\t */\r\n\tget rotationOverLifetime(): RotationOverLifetime {\r\n\t\treturn this._rotationOverLifetime;\r\n\t}\r\n\r\n\tset rotationOverLifetime(value: RotationOverLifetime) {\r\n\t\tvar shaDat: ShaderData = this._owner._render._shaderValues;\r\n\t\tif (value) {\r\n\t\t\tvar rotation: GradientAngularVelocity = value.angularVelocity;\r\n\r\n\t\t\tif (!rotation)//TODO:兼容代码，RotationOverLifetime未支持全可能为空\r\n\t\t\t\treturn\r\n\r\n\t\t\tvar rotationSeparate: boolean = rotation.separateAxes;\r\n\t\t\tvar rotationType: number = rotation.type;\r\n\t\t\tif (value.enable) {\r\n\t\t\t\tif (rotationSeparate)\r\n\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE);\r\n\t\t\t\telse\r\n\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME);\r\n\t\t\t\tswitch (rotationType) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME);\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE);\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);\r\n\t\t\t}\r\n\r\n\t\t\tswitch (rotationType) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (rotationSeparate) {\r\n\t\t\t\t\t\tshaDat.setVector3(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTSEPRARATE, rotation.constantSeparate);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tshaDat.setNumber(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONST, rotation.constant);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tif (rotationSeparate) {\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX, rotation.gradientX._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY, rotation.gradientY._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ, rotation.gradientZ._elements);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT, rotation.gradient._elements);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (rotationSeparate) {\r\n\t\t\t\t\t\tshaDat.setVector3(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTSEPRARATE, rotation.constantMinSeparate);\r\n\t\t\t\t\t\tshaDat.setVector3(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAXSEPRARATE, rotation.constantMaxSeparate);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tshaDat.setNumber(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONST, rotation.constantMin);\r\n\t\t\t\t\t\tshaDat.setNumber(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAX, rotation.constantMax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tif (rotationSeparate) {\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX, rotation.gradientXMin._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX, rotation.gradientXMax._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY, rotation.gradientYMin._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX, rotation.gradientYMax._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ, rotation.gradientZMin._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX, rotation.gradientZMax._elements);\r\n\t\t\t\t\t\t//shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTW, rotation.gradientWMin._elements);\r\n\t\t\t\t\t\t//shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTWMAX, rotation.gradientWMax._elements);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT, rotation.gradientMin._elements);\r\n\t\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX, rotation.gradientMax._elements);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME);\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE);\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);\r\n\t\t}\r\n\t\tthis._rotationOverLifetime = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 生命周期纹理动画,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\r\n\t */\r\n\tget textureSheetAnimation(): TextureSheetAnimation {\r\n\t\treturn this._textureSheetAnimation;\r\n\t}\r\n\r\n\tset textureSheetAnimation(value: TextureSheetAnimation) {\r\n\t\tvar shaDat: ShaderData = this._owner._render._shaderValues;\r\n\t\tif (value) {\r\n\t\t\tvar frameOverTime: FrameOverTime = value.frame;\r\n\t\t\tvar textureAniType: number = frameOverTime.type;\r\n\t\t\tif (value.enable) {\r\n\t\t\t\tswitch (textureAniType) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tshaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE);\r\n\t\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);\r\n\t\t\t}\r\n\r\n\t\t\tif (textureAniType === 1 || textureAniType === 3) {\r\n\t\t\t\tshaDat.setNumber(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES, value.cycles);\r\n\t\t\t\tvar title: Vector2 = value.tiles;\r\n\t\t\t\tvar _uvLengthE: Vector2 = this._uvLength;\r\n\t\t\t\t_uvLengthE.x = 1.0 / title.x;\r\n\t\t\t\t_uvLengthE.y = 1.0 / title.y;\r\n\t\t\t\tshaDat.setVector2(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH, this._uvLength);\r\n\t\t\t}\r\n\t\t\tswitch (textureAniType) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS, frameOverTime.frameOverTimeData._elements);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS, frameOverTime.frameOverTimeDataMin._elements);\r\n\t\t\t\t\tshaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS, frameOverTime.frameOverTimeDataMax._elements);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE);\r\n\t\t\tshaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);\r\n\t\t}\r\n\t\tthis._textureSheetAnimation = value;\r\n\t}\r\n\r\n\r\n\r\n\tconstructor(owner: ShuriKenParticle3D) {\r\n\t\tsuper();\r\n\t\tthis._firstActiveElement = 0;\r\n\t\tthis._firstNewElement = 0;\r\n\t\tthis._firstFreeElement = 0;\r\n\t\tthis._firstRetiredElement = 0;\r\n\r\n\t\tthis._owner = owner;\r\n\t\tthis._ownerRender = owner.particleRenderer;\r\n\t\tthis._boundingBoxCorners = [];\r\n\t\tthis._boundingSphere = new BoundSphere(new Vector3(), Number.MAX_VALUE);//TODO:\r\n\t\tthis._boundingBox = new BoundBox(new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE));//TODO:\r\n\t\tthis._bounds = new Bounds(this._boundingBox.min, this._boundingBox.max);\r\n\t\tthis._useCustomBounds = false;\r\n\r\n\t\tthis._currentTime = 0;\r\n\r\n\t\tthis._isEmitting = false;\r\n\t\tthis._isPlaying = false;\r\n\t\tthis._isPaused = false;\r\n\t\tthis._burstsIndex = 0;\r\n\t\tthis._frameRateTime = 0;\r\n\t\tthis._emissionTime = 0;\r\n\t\tthis._totalDelayTime = 0;\r\n\t\tthis._simulateUpdate = false;\r\n\r\n\t\tthis._bufferMaxParticles = 1;\r\n\t\tthis.duration = 5.0;\r\n\t\tthis.looping = true;\r\n\t\tthis.prewarm = false;\r\n\t\tthis.startDelayType = 0;\r\n\t\tthis.startDelay = 0.0;\r\n\t\tthis.startDelayMin = 0.0;\r\n\t\tthis.startDelayMax = 0.0;\r\n\r\n\t\tthis._startLifetimeType = 0;\r\n\t\tthis._startLifetimeConstant = 5.0;\r\n\t\tthis._startLifeTimeGradient = new GradientDataNumber();\r\n\t\tthis._startLifetimeConstantMin = 0.0;\r\n\t\tthis._startLifetimeConstantMax = 5.0;\r\n\t\tthis._startLifeTimeGradientMin = new GradientDataNumber();\r\n\t\tthis._startLifeTimeGradientMax = new GradientDataNumber();\r\n\t\tthis._maxStartLifetime = 5.0;//_startLifetimeType默认为0，_startLifetimeConstant为5.0,因此该值为5.0\r\n\r\n\t\tthis.startSpeedType = 0;\r\n\t\tthis.startSpeedConstant = 5.0;\r\n\t\tthis.startSpeedConstantMin = 0.0;\r\n\t\tthis.startSpeedConstantMax = 5.0;\r\n\t\tthis.threeDStartSize = false;\r\n\t\tthis.startSizeType = 0;\r\n\t\tthis.startSizeConstant = 1;\r\n\t\tthis.startSizeConstantSeparate = new Vector3(1, 1, 1);\r\n\t\tthis.startSizeConstantMin = 0;\r\n\t\tthis.startSizeConstantMax = 1;\r\n\t\tthis.startSizeConstantMinSeparate = new Vector3(0, 0, 0);\r\n\t\tthis.startSizeConstantMaxSeparate = new Vector3(1, 1, 1);\r\n\r\n\t\tthis.threeDStartRotation = false;\r\n\t\tthis.startRotationType = 0;\r\n\t\tthis.startRotationConstant = 0;\r\n\t\tthis.startRotationConstantSeparate = new Vector3(0, 0, 0);\r\n\t\tthis.startRotationConstantMin = 0.0;\r\n\t\tthis.startRotationConstantMax = 0.0;\r\n\t\tthis.startRotationConstantMinSeparate = new Vector3(0, 0, 0);\r\n\t\tthis.startRotationConstantMaxSeparate = new Vector3(0, 0, 0);\r\n\r\n\t\tthis.gravityModifier = 0.0;\r\n\t\tthis.simulationSpace = 1;\r\n\t\tthis.scaleMode = 1;\r\n\t\tthis.playOnAwake = true;\r\n\t\tthis._rand = new Rand(0);\r\n\t\tthis.autoRandomSeed = true;\r\n\t\tthis.randomSeed = new Uint32Array(1);\r\n\t\tthis._randomSeeds = new Uint32Array(ShurikenParticleSystem._RANDOMOFFSET.length);\r\n\t\tthis.isPerformanceMode = true;\r\n\r\n\t\tthis._emission = new Emission();\r\n\t\tthis._emission.enable = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getVertexBuffer(index: number = 0): VertexBuffer3D {\r\n\t\tif (index === 0)\r\n\t\t\treturn this._vertexBuffer;\r\n\t\telse\r\n\t\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getIndexBuffer(): IndexBuffer3D {\r\n\t\treturn this._indexBuffer;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_generateBoundingSphere(): void {//TODO：应在本类内部处理。\r\n\t\tvar centerE: Vector3 = this._boundingSphere.center;\r\n\t\tcenterE.x = 0;\r\n\t\tcenterE.y = 0;\r\n\t\tcenterE.z = 0;\r\n\t\tthis._boundingSphere.radius = Number.MAX_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_generateBoundingBox(): void {//TODO：应在本类内部处理。\t\t\t\r\n\t\tvar particle: ShuriKenParticle3D = (<ShuriKenParticle3D>this._owner);\r\n\t\tvar particleRender: ShurikenParticleRenderer = particle.particleRenderer;\r\n\t\tvar boundMin: Vector3 = this._boundingBox.min;\r\n\t\tvar boundMax: Vector3 = this._boundingBox.max;\r\n\t\tvar i: number, n: number;\r\n\r\n\t\t//MaxLifeTime\r\n\t\tvar maxStartLifeTime: number;\r\n\t\tswitch (this.startLifetimeType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tmaxStartLifeTime = this.startLifetimeConstant;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tmaxStartLifeTime = -Number.MAX_VALUE;\r\n\t\t\t\tvar startLifeTimeGradient: GradientDataNumber = startLifeTimeGradient;\r\n\t\t\t\tfor (i = 0, n = startLifeTimeGradient.gradientCount; i < n; i++)\r\n\t\t\t\t\tmaxStartLifeTime = Math.max(maxStartLifeTime, startLifeTimeGradient.getValueByIndex(i));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tmaxStartLifeTime = Math.max(this.startLifetimeConstantMin, this.startLifetimeConstantMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tmaxStartLifeTime = -Number.MAX_VALUE;\r\n\t\t\t\tvar startLifeTimeGradientMin: GradientDataNumber = startLifeTimeGradientMin;\r\n\t\t\t\tfor (i = 0, n = startLifeTimeGradientMin.gradientCount; i < n; i++)\r\n\t\t\t\t\tmaxStartLifeTime = Math.max(maxStartLifeTime, startLifeTimeGradientMin.getValueByIndex(i));\r\n\t\t\t\tvar startLifeTimeGradientMax: GradientDataNumber = startLifeTimeGradientMax;\r\n\t\t\t\tfor (i = 0, n = startLifeTimeGradientMax.gradientCount; i < n; i++)\r\n\t\t\t\t\tmaxStartLifeTime = Math.max(maxStartLifeTime, startLifeTimeGradientMax.getValueByIndex(i));\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//MinMaxSpeed\r\n\t\tvar minStartSpeed: number, maxStartSpeed: number;\r\n\t\tswitch (this.startSpeedType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tminStartSpeed = maxStartSpeed = this.startSpeedConstant;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1: //TODO:\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tminStartSpeed = this.startLifetimeConstantMin;\r\n\t\t\t\tmaxStartSpeed = this.startLifetimeConstantMax;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3: //TODO:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//MinMaxPosition、MinMaxDiection\r\n\t\tvar minPosition: Vector3, maxPosition: Vector3, minDirection: Vector3, maxDirection: Vector3;\r\n\t\tif (this._shape && this._shape.enable) {\r\n\t\t\t//TODO:\r\n\t\t} else {\r\n\t\t\tminPosition = maxPosition = Vector3._ZERO;\r\n\t\t\tminDirection = Vector3._ZERO;\r\n\t\t\tmaxDirection = Vector3._UnitZ;\r\n\t\t}\r\n\r\n\t\tvar startMinVelocity: Vector3 = new Vector3(minDirection.x * minStartSpeed, minDirection.y * minStartSpeed, minDirection.z * minStartSpeed);\r\n\t\tvar startMaxVelocity: Vector3 = new Vector3(maxDirection.x * maxStartSpeed, maxDirection.y * maxStartSpeed, maxDirection.z * maxStartSpeed);\r\n\r\n\t\tif (this._velocityOverLifetime && this._velocityOverLifetime.enable) {\r\n\t\t\tvar lifeMinVelocity: Vector3;\r\n\t\t\tvar lifeMaxVelocity: Vector3;\r\n\t\t\tvar velocity: GradientVelocity = this._velocityOverLifetime.velocity;\r\n\t\t\tswitch (velocity.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tlifeMinVelocity = lifeMaxVelocity = velocity.constant;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tlifeMinVelocity = lifeMaxVelocity = new Vector3(velocity.gradientX.getAverageValue(), velocity.gradientY.getAverageValue(), velocity.gradientZ.getAverageValue());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tlifeMinVelocity = velocity.constantMin;//TODO:Min\r\n\t\t\t\t\tlifeMaxVelocity = velocity.constantMax;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tlifeMinVelocity = new Vector3(velocity.gradientXMin.getAverageValue(), velocity.gradientYMin.getAverageValue(), velocity.gradientZMin.getAverageValue());\r\n\t\t\t\t\tlifeMaxVelocity = new Vector3(velocity.gradientXMax.getAverageValue(), velocity.gradientYMax.getAverageValue(), velocity.gradientZMax.getAverageValue());\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar positionScale: Vector3, velocityScale: Vector3;\r\n\t\tvar transform: Transform3D = this._owner.transform;\r\n\t\tvar worldPosition: Vector3 = transform.position;\r\n\t\tvar sizeScale: Vector3 = ShurikenParticleSystem._tempVector39;\r\n\t\tvar renderMode: number = particleRender.renderMode;\r\n\r\n\t\tswitch (this.scaleMode) {\r\n\t\t\tcase 0:\r\n\t\t\t\tvar scale: Vector3 = transform.getWorldLossyScale();\r\n\t\t\t\tpositionScale = scale;\r\n\t\t\t\tsizeScale.x = scale.x;\r\n\t\t\t\tsizeScale.y = scale.z;\r\n\t\t\t\tsizeScale.z = scale.y;\r\n\t\t\t\t(renderMode === 1) && (velocityScale = scale);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tvar localScale: Vector3 = transform.localScale;\r\n\t\t\t\tpositionScale = localScale;\r\n\t\t\t\tsizeScale.x = localScale.x;\r\n\t\t\t\tsizeScale.y = localScale.z;\r\n\t\t\t\tsizeScale.z = localScale.y;\r\n\t\t\t\t(renderMode === 1) && (velocityScale = localScale);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tpositionScale = transform.getWorldLossyScale();\r\n\t\t\t\tsizeScale.x = sizeScale.y = sizeScale.z = 1;\r\n\t\t\t\t(renderMode === 1) && (velocityScale = Vector3._ONE);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar minStratPosition: Vector3, maxStratPosition: Vector3;\r\n\t\tif (this._velocityOverLifetime && this._velocityOverLifetime.enable) {\r\n\t\t\t//var minLifePosition:Vector3, maxLifePosition:Vector3;\r\n\t\t\t//switch (_velocityOverLifetime.velocity.type) {\r\n\t\t\t//case 0: \r\n\t\t\t//minStratPosition = new Vector3(startMinVelocity.x * maxStartLifeTime, startMinVelocity.y * maxStartLifeTime, startMinVelocity.z * maxStartLifeTime);\r\n\t\t\t//maxStratPosition = new Vector3(startMaxVelocity.x * maxStartLifeTime, startMaxVelocity.y * maxStartLifeTime, startMaxVelocity.z * maxStartLifeTime);\r\n\t\t\t//minLifePosition = new Vector3(lifeMinVelocity.x * maxStartLifeTime, lifeMinVelocity.y * maxStartLifeTime, lifeMinVelocity.z * maxStartLifeTime);\r\n\t\t\t//maxLifePosition = new Vector3(lifeMaxVelocity.x * maxStartLifeTime, lifeMaxVelocity.y * maxStartLifeTime, lifeMaxVelocity.z * maxStartLifeTime);\r\n\t\t\t//break;\r\n\t\t\t//}\r\n\t\t\t////TODO:\r\n\t\t} else {\r\n\t\t\tminStratPosition = new Vector3(startMinVelocity.x * maxStartLifeTime, startMinVelocity.y * maxStartLifeTime, startMinVelocity.z * maxStartLifeTime);\r\n\t\t\tmaxStratPosition = new Vector3(startMaxVelocity.x * maxStartLifeTime, startMaxVelocity.y * maxStartLifeTime, startMaxVelocity.z * maxStartLifeTime);\r\n\r\n\t\t\tif (this.scaleMode != 2) {\r\n\t\t\t\tVector3.add(minPosition, minStratPosition, boundMin);\r\n\t\t\t\tVector3.multiply(positionScale, boundMin, boundMin);\r\n\t\t\t\t//Vector3.transformQuat(boundMin, worldRotation, boundMin);\r\n\r\n\t\t\t\tVector3.add(maxPosition, maxStratPosition, boundMax);\r\n\t\t\t\tVector3.multiply(positionScale, boundMax, boundMax);\r\n\t\t\t\t//Vector3.transformQuat(boundMax, worldRotation, boundMax);\r\n\t\t\t} else {\r\n\t\t\t\tVector3.multiply(positionScale, minPosition, boundMin);\r\n\t\t\t\tVector3.add(boundMin, minStratPosition, boundMin);\r\n\t\t\t\t//Vector3.transformQuat(boundMin, worldRotation, boundMin);\r\n\r\n\t\t\t\tVector3.multiply(positionScale, maxPosition, boundMax);\r\n\t\t\t\tVector3.add(boundMax, maxStratPosition, boundMax);\r\n\t\t\t\t//Vector3.transformQuat(boundMax, worldRotation, boundMax);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswitch (this.simulationSpace) {\r\n\t\t\tcase 0:\r\n\t\t\t\t//TODO:不能用次方法计算\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tVector3.add(boundMin, worldPosition, boundMin);\r\n\t\t\t\tVector3.add(boundMax, worldPosition, boundMax);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t//TODO:重力\r\n\r\n\t\t// 通过粒子最大尺寸扩充包围盒，最大尺寸为粒子对角线。TODO:HORIZONTALBILLBOARD和VERTICALBILLBOARD缩小cos45\r\n\t\tvar maxSize: number, maxSizeY: number;\r\n\t\tswitch (this.startSizeType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (this.threeDStartSize) {\r\n\t\t\t\t\tvar startSizeConstantSeparate: Vector3 = startSizeConstantSeparate;\r\n\t\t\t\t\tmaxSize = Math.max(startSizeConstantSeparate.x, startSizeConstantSeparate.y);//TODO:是否非Mesh模型下不用考虑Z\r\n\t\t\t\t\tif (renderMode === 1)\r\n\t\t\t\t\t\tmaxSizeY = startSizeConstantSeparate.y;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmaxSize = this.startSizeConstant;\r\n\t\t\t\t\tif (renderMode === 1)\r\n\t\t\t\t\t\tmaxSizeY = this.startSizeConstant;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1://TODO:\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (this.threeDStartSize) {\r\n\t\t\t\t\tvar startSizeConstantMaxSeparate: Vector3 = startSizeConstantMaxSeparate;\r\n\t\t\t\t\tmaxSize = Math.max(startSizeConstantMaxSeparate.x, startSizeConstantMaxSeparate.y);\r\n\t\t\t\t\tif (renderMode === 1)\r\n\t\t\t\t\t\tmaxSizeY = startSizeConstantMaxSeparate.y;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmaxSize = this.startSizeConstantMax;//TODO:是否非Mesh模型下不用考虑Z\r\n\t\t\t\t\tif (renderMode === 1)\r\n\t\t\t\t\t\tmaxSizeY = this.startSizeConstantMax;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3://TODO:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (this._sizeOverLifetime && this._sizeOverLifetime.enable) {\r\n\t\t\tvar size: GradientSize = this._sizeOverLifetime.size;\r\n\t\t\tmaxSize *= this._sizeOverLifetime.size.getMaxSizeInGradient();\r\n\t\t}\r\n\r\n\t\tvar threeDMaxSize: Vector3 = ShurikenParticleSystem._tempVector30;\r\n\r\n\t\tvar rotSize: number, nonRotSize: number;\r\n\t\tswitch (renderMode) {\r\n\t\t\tcase 0:\r\n\t\t\t\trotSize = maxSize * ShurikenParticleSystem.halfKSqrtOf2;\r\n\t\t\t\tVector3.scale(sizeScale, maxSize, threeDMaxSize);\r\n\t\t\t\tVector3.subtract(boundMin, threeDMaxSize, boundMin);\r\n\t\t\t\tVector3.add(boundMax, threeDMaxSize, boundMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tvar maxStretchPosition: Vector3 = ShurikenParticleSystem._tempVector31;\r\n\t\t\t\tvar maxStretchVelocity: Vector3 = ShurikenParticleSystem._tempVector32;\r\n\t\t\t\tvar minStretchVelocity: Vector3 = ShurikenParticleSystem._tempVector33;\r\n\t\t\t\tvar minStretchPosition: Vector3 = ShurikenParticleSystem._tempVector34;\r\n\r\n\t\t\t\tif (this._velocityOverLifetime && this._velocityOverLifetime.enable) {\r\n\t\t\t\t\t//TODO:\r\n\t\t\t\t} else {\r\n\t\t\t\t\tVector3.multiply(velocityScale, startMaxVelocity, maxStretchVelocity);\r\n\t\t\t\t\tVector3.multiply(velocityScale, startMinVelocity, minStretchVelocity);\r\n\t\t\t\t}\r\n\t\t\t\tvar sizeStretch: number = maxSizeY * particleRender.stretchedBillboardLengthScale;\r\n\t\t\t\tvar maxStretchLength: number = Vector3.scalarLength(maxStretchVelocity) * particleRender.stretchedBillboardSpeedScale + sizeStretch;\r\n\t\t\t\tvar minStretchLength: number = Vector3.scalarLength(minStretchVelocity) * particleRender.stretchedBillboardSpeedScale + sizeStretch;\r\n\t\t\t\tvar norMaxStretchVelocity: Vector3 = ShurikenParticleSystem._tempVector35;\r\n\t\t\t\tvar norMinStretchVelocity: Vector3 = ShurikenParticleSystem._tempVector36;\r\n\t\t\t\tVector3.normalize(maxStretchVelocity, norMaxStretchVelocity);\r\n\t\t\t\tVector3.scale(norMaxStretchVelocity, maxStretchLength, minStretchPosition);\r\n\t\t\t\tVector3.subtract(maxStratPosition, minStretchPosition, minStretchPosition);\r\n\t\t\t\tVector3.normalize(minStretchVelocity, norMinStretchVelocity);\r\n\t\t\t\tVector3.scale(norMinStretchVelocity, minStretchLength, maxStretchPosition);\r\n\t\t\t\tVector3.add(minStratPosition, maxStretchPosition, maxStretchPosition);\r\n\r\n\t\t\t\trotSize = maxSize * ShurikenParticleSystem.halfKSqrtOf2;\r\n\t\t\t\tVector3.scale(sizeScale, rotSize, threeDMaxSize);\r\n\r\n\t\t\t\tvar halfNorMaxStretchVelocity: Vector3 = ShurikenParticleSystem._tempVector37;\r\n\t\t\t\tvar halfNorMinStretchVelocity: Vector3 = ShurikenParticleSystem._tempVector38;\r\n\t\t\t\tVector3.scale(norMaxStretchVelocity, 0.5, halfNorMaxStretchVelocity);\r\n\t\t\t\tVector3.scale(norMinStretchVelocity, 0.5, halfNorMinStretchVelocity);\r\n\t\t\t\tVector3.multiply(halfNorMaxStretchVelocity, sizeScale, halfNorMaxStretchVelocity);\r\n\t\t\t\tVector3.multiply(halfNorMinStretchVelocity, sizeScale, halfNorMinStretchVelocity);\r\n\r\n\t\t\t\tVector3.add(boundMin, halfNorMinStretchVelocity, boundMin);\r\n\t\t\t\tVector3.min(boundMin, minStretchPosition, boundMin);\r\n\t\t\t\tVector3.subtract(boundMin, threeDMaxSize, boundMin);\r\n\r\n\t\t\t\tVector3.subtract(boundMax, halfNorMaxStretchVelocity, boundMax);\r\n\t\t\t\tVector3.max(boundMax, maxStretchPosition, boundMax);\r\n\t\t\t\tVector3.add(boundMax, threeDMaxSize, boundMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tmaxSize *= Math.cos(0.78539816339744830961566084581988);\r\n\t\t\t\tnonRotSize = maxSize * 0.5;\r\n\t\t\t\tthreeDMaxSize.x = sizeScale.x * nonRotSize;\r\n\t\t\t\tthreeDMaxSize.y = sizeScale.z * nonRotSize;\r\n\t\t\t\tVector3.subtract(boundMin, threeDMaxSize, boundMin);\r\n\t\t\t\tVector3.add(boundMax, threeDMaxSize, boundMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tmaxSize *= Math.cos(0.78539816339744830961566084581988);\r\n\t\t\t\tnonRotSize = maxSize * 0.5;\r\n\t\t\t\tVector3.scale(sizeScale, nonRotSize, threeDMaxSize);\r\n\t\t\t\tVector3.subtract(boundMin, threeDMaxSize, boundMin);\r\n\t\t\t\tVector3.add(boundMax, threeDMaxSize, boundMax);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//TODO:min\r\n\t\t//TODO:max\r\n\t\tthis._boundingBox.getCorners(this._boundingBoxCorners);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_generateBounds(): void {\r\n\t\tvar particle: ShuriKenParticle3D = (<ShuriKenParticle3D>this._owner);\r\n\t\tvar particleRender: ShurikenParticleRenderer = particle.particleRenderer;\r\n\t\tvar boundsMin: Vector3 = this._bounds.getMin();\r\n\t\tvar boundsMax: Vector3 = this._bounds.getMax();\r\n\r\n\t\t// lifeTime\r\n\t\tvar time: number = 0;\r\n\t\tswitch (this.startLifetimeType) {\r\n\t\t\tcase 0: // 固定时间\r\n\t\t\t\ttime = this._startLifetimeConstant;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // 两个固定时间随机值\r\n\t\t\t\ttime = this._startLifetimeConstantMax;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1: // 渐变时间\r\n\t\t\tcase 3: // 两个渐变时间随机值\r\n\t\t\tdefault:\r\n\t\t\t\t// todo 不支持模式\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// speed\r\n\t\tvar speedOrigan: number = 0;\r\n\t\tswitch (this.startSpeedType) {\r\n\t\t\tcase 0: // 恒定速度\r\n\t\t\t\tspeedOrigan = this.startSpeedConstant;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // 两个固定值间\r\n\t\t\t\tspeedOrigan = this.startSpeedConstantMax;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\tcase 3:\r\n\t\t\tdefault:\r\n\t\t\t\t// todo 不支持模式\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// size\r\n\t\tvar maxSizeScale = 0;\r\n\t\tif (this.threeDStartSize) {\r\n\t\t\tswitch (this.startSizeType) {\r\n\t\t\t\tcase 0: // 恒定尺寸\r\n\t\t\t\t\tmaxSizeScale = Math.max(this.startSizeConstantSeparate.x, this.startSizeConstantSeparate.y, this.startSizeConstantSeparate.z);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2: // 两个固定尺寸之间\r\n\t\t\t\t\tmaxSizeScale = Math.max(this.startSizeConstantMaxSeparate.x, this.startSizeConstantMaxSeparate.y, this.startSizeConstantMaxSeparate.z);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\tcase 3:\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// todo 不支持模式\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tswitch (this.startSizeType) {\r\n\t\t\t\tcase 0: // 恒定尺寸\r\n\t\t\t\t\tmaxSizeScale = this.startSizeConstant;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2: // 两个固定尺寸之间\r\n\t\t\t\t\tmaxSizeScale = this.startSizeConstantMax;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\tcase 3:\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// todo 不支持模式\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// shape\r\n\t\tvar zDirectionSpeed: Vector3 = ShurikenParticleSystem._tempVector30;\r\n\t\tvar fDirectionSpeed: Vector3 = ShurikenParticleSystem._tempVector31;\r\n\t\tvar zEmisionOffsetXYZ: Vector3 = ShurikenParticleSystem._tempVector32;\r\n\t\tvar fEmisionOffsetXYZ: Vector3 = ShurikenParticleSystem._tempVector33;\r\n\r\n\t\tzDirectionSpeed.setValue(0, 0, 1);\r\n\t\tfDirectionSpeed.setValue(0, 0, 0);\r\n\t\tzEmisionOffsetXYZ.setValue(0, 0, 0);\r\n\t\tfEmisionOffsetXYZ.setValue(0, 0, 0);\r\n\r\n\t\tif (this.shape && this.shape.enable) {\r\n\t\t\tswitch (this.shape.shapeType) {\r\n\t\t\t\tcase ParticleSystemShapeType.Sphere:\r\n\t\t\t\t\tvar sphere: SphereShape = <SphereShape>this.shape;\r\n\t\t\t\t\tzDirectionSpeed.setValue(1, 1, 1);\r\n\t\t\t\t\tfDirectionSpeed.setValue(1, 1, 1);\r\n\t\t\t\t\tzEmisionOffsetXYZ.setValue(sphere.radius, sphere.radius, sphere.radius);\r\n\t\t\t\t\tfEmisionOffsetXYZ.setValue(sphere.radius, sphere.radius, sphere.radius);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ParticleSystemShapeType.Hemisphere:\r\n\t\t\t\t\tvar hemiShpere: HemisphereShape = <HemisphereShape>this.shape;\r\n\t\t\t\t\tzDirectionSpeed.setValue(1, 1, 1);\r\n\t\t\t\t\tfDirectionSpeed.setValue(1, 1, 1);\r\n\t\t\t\t\tzEmisionOffsetXYZ.setValue(hemiShpere.radius, hemiShpere.radius, hemiShpere.radius);\r\n\t\t\t\t\tfEmisionOffsetXYZ.setValue(hemiShpere.radius, hemiShpere.radius, 0.0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ParticleSystemShapeType.Cone:\r\n\t\t\t\t\tvar cone: ConeShape = <ConeShape>this.shape;\r\n\t\t\t\t\t// Base || BaseShell\r\n\t\t\t\t\tif (cone.emitType == 0 || cone.emitType == 1) {\r\n\t\t\t\t\t\t// todo angle define\r\n\t\t\t\t\t\t// var angle: number = cone.angle * Math.PI / 180;\r\n\t\t\t\t\t\tvar angle: number = cone.angle;\r\n\t\t\t\t\t\tvar sinAngle: number = Math.sin(angle);\r\n\t\t\t\t\t\tzDirectionSpeed.setValue(sinAngle, sinAngle, 1.0);\r\n\t\t\t\t\t\tfDirectionSpeed.setValue(sinAngle, sinAngle, 0.0);\r\n\t\t\t\t\t\tzEmisionOffsetXYZ.setValue(cone.radius, cone.radius, 0.0);\r\n\t\t\t\t\t\tfEmisionOffsetXYZ.setValue(cone.radius, cone.radius, 0.0);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Volume || VolumeShell\r\n\t\t\t\t\telse if (cone.emitType == 2 || cone.emitType == 3) {\r\n\t\t\t\t\t\t// var angle: number = cone.angle * Math.PI / 180;\r\n\t\t\t\t\t\tvar angle: number = cone.angle;\r\n\t\t\t\t\t\tvar sinAngle: number = Math.sin(angle);\r\n\t\t\t\t\t\tvar coneLength: number = cone.length;\r\n\t\t\t\t\t\tzDirectionSpeed.setValue(sinAngle, sinAngle, 1.0);\r\n\t\t\t\t\t\tfDirectionSpeed.setValue(sinAngle, sinAngle, 0.0);\r\n\t\t\t\t\t\tvar tanAngle: number = Math.tan(angle);\r\n\t\t\t\t\t\tvar rPLCT: number = cone.radius + coneLength * tanAngle;\r\n\t\t\t\t\t\tzEmisionOffsetXYZ.setValue(rPLCT, rPLCT, coneLength);\r\n\t\t\t\t\t\tfEmisionOffsetXYZ.setValue(rPLCT, rPLCT, 0.0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ParticleSystemShapeType.Box:\r\n\t\t\t\t\tvar box: BoxShape = <BoxShape>this.shape;\r\n\t\t\t\t\tif (this.shape.randomDirection != 0) {\r\n\t\t\t\t\t\tzDirectionSpeed.setValue(1, 1, 1);\r\n\t\t\t\t\t\tfDirectionSpeed.setValue(1, 1, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tzDirectionSpeed.setValue(0, 0, 0);\r\n\t\t\t\t\t\tfDirectionSpeed.setValue(0, 0, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tzEmisionOffsetXYZ.setValue(box.x / 2, box.y / 2, box.z / 2);\r\n\t\t\t\t\tfEmisionOffsetXYZ.setValue(box.x / 2, box.y / 2, box.z / 2);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ParticleSystemShapeType.Circle:\r\n\t\t\t\t\tvar circle: CircleShape = <CircleShape>this.shape;\r\n\t\t\t\t\tzDirectionSpeed.setValue(1, 1, 1);\r\n\t\t\t\t\tfDirectionSpeed.setValue(1, 1, 1);\r\n\t\t\t\t\tzEmisionOffsetXYZ.setValue(circle.radius, circle.radius, 0);\r\n\t\t\t\t\tfEmisionOffsetXYZ.setValue(circle.radius, circle.radius, 0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// size\r\n\t\tvar meshSize: number = 0;\r\n\t\t// 是否是 mesh 模式\r\n\t\tvar meshMode: boolean = particleRender.renderMode == 4;\r\n\t\tswitch (particleRender.renderMode) {\r\n\t\t\tcase 0: // billboard\r\n\t\t\t\tmeshSize = ShurikenParticleSystem.halfKSqrtOf2;// Math.sqrt(2) / 2.0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4: // mesh\r\n\t\t\t\tvar meshBounds: Bounds = particleRender.mesh.bounds;\r\n\t\t\t\tmeshSize = Math.sqrt(Math.pow(meshBounds.getExtent().x, 2.0) + Math.pow(meshBounds.getExtent().y, 2.0) + Math.pow(meshBounds.getExtent().z, 2.0));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar endSizeOffset: Vector3 = ShurikenParticleSystem._tempVector36;\r\n\t\tif (this.sizeOverLifetime && this.sizeOverLifetime.enable) {\r\n\t\t\tvar gradientSize: GradientSize = this.sizeOverLifetime.size;\r\n\t\t\tvar maxSize: number = gradientSize.getMaxSizeInGradient(meshMode);\r\n\r\n\t\t\tendSizeOffset.setValue(maxSize, maxSize, maxSize);\r\n\t\t}\r\n\r\n\t\tVector3.scale(endSizeOffset, meshSize * maxSizeScale, endSizeOffset);\r\n\r\n\t\t// var distance: number = speedOrigan * time;\r\n\t\tvar speedZOffset: Vector3 = ShurikenParticleSystem._tempVector34;\r\n\t\tvar speedFOffset: Vector3 = ShurikenParticleSystem._tempVector35;\r\n\r\n\t\tif (speedOrigan > 0) {\r\n\t\t\tVector3.scale(zDirectionSpeed, speedOrigan, speedZOffset);\r\n\t\t\tVector3.scale(fDirectionSpeed, speedOrigan, speedFOffset);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tVector3.scale(zDirectionSpeed, -speedOrigan, speedFOffset);\r\n\t\t\tVector3.scale(fDirectionSpeed, -speedOrigan, speedZOffset);\r\n\t\t}\r\n\r\n\t\tif (this.velocityOverLifetime && this.velocityOverLifetime.enable) {\r\n\t\t\tvar gradientVelocity: GradientVelocity = this.velocityOverLifetime.velocity;\r\n\t\t\tvar velocitySpeedOffset: Vector3 = ShurikenParticleSystem._tempVector37;\r\n\t\t\tswitch (gradientVelocity.type) {\r\n\t\t\t\tcase 0: // 常量模式\r\n\t\t\t\t\tgradientVelocity.constant.cloneTo(velocitySpeedOffset);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2: // 随机双常量模式\r\n\t\t\t\t\tgradientVelocity.constantMax.cloneTo(velocitySpeedOffset);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1: // 曲线模式\r\n\t\t\t\t\t// todo 获取 曲线最大值\r\n\t\t\t\t\tvar curveX: number = gradientVelocity.gradientX.getAverageValue();\r\n\t\t\t\t\tvar curveY: number = gradientVelocity.gradientY.getAverageValue();\r\n\t\t\t\t\tvar curveZ: number = gradientVelocity.gradientZ.getAverageValue();\r\n\t\t\t\t\tvelocitySpeedOffset.setValue(curveX, curveY, curveZ);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3: // 随机双曲线模式\r\n\t\t\t\t\tvar xMax: number = gradientVelocity.gradientXMax.getAverageValue();\r\n\t\t\t\t\tvar yMax: number = gradientVelocity.gradientYMax.getAverageValue();\r\n\t\t\t\t\tvar zMax: number = gradientVelocity.gradientZMax.getAverageValue();\r\n\t\t\t\t\tvelocitySpeedOffset.setValue(xMax, yMax, zMax);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// 速度空间 world\r\n\t\t\tif (this.velocityOverLifetime.space == 1) {\r\n\t\t\t\tVector3.transformV3ToV3(velocitySpeedOffset, this._owner.transform.worldMatrix, velocitySpeedOffset);\r\n\t\t\t}\r\n\r\n\t\t\tVector3.add(speedZOffset, velocitySpeedOffset, speedZOffset);\r\n\t\t\tVector3.subtract(speedFOffset, velocitySpeedOffset, speedFOffset);\r\n\r\n\t\t\tVector3.max(speedZOffset, Vector3._ZERO, speedZOffset);\r\n\t\t\tVector3.max(speedFOffset, Vector3._ZERO, speedFOffset);\r\n\t\t}\r\n\r\n\t\tVector3.scale(speedZOffset, time, speedZOffset);\r\n\t\tVector3.scale(speedFOffset, time, speedFOffset);\r\n\r\n\t\t//gravity重力值\r\n\t\tvar gravity: number = this.gravityModifier;\r\n\t\tvar gravityOffset: number = 0.5 * ShurikenParticleSystem.g * gravity * time * time;\r\n\t\tspeedZOffset.y -= gravityOffset;\r\n\t\tspeedFOffset.y += gravityOffset;\r\n\r\n\t\tspeedZOffset.y = speedZOffset.y > 0 ? speedZOffset.y : 0;\r\n\t\tspeedFOffset.y = speedFOffset.y > 0 ? speedFOffset.y : 0;\r\n\r\n\t\t// speedOrigan * directionSpeed * time + directionoffset + size * maxsizeScale\r\n\t\tVector3.add(speedZOffset, endSizeOffset, boundsMax);\r\n\t\tVector3.add(boundsMax, zEmisionOffsetXYZ, boundsMax);\r\n\r\n\t\tVector3.add(speedFOffset, endSizeOffset, boundsMin);\r\n\t\tVector3.add(boundsMin, fEmisionOffsetXYZ, boundsMin);\r\n\t\tVector3.scale(boundsMin, -1, boundsMin);\r\n\r\n\t\tthis._bounds.setMin(boundsMin);\r\n\t\tthis._bounds.setMax(boundsMax);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置 自定义 包围盒\r\n\t */\r\n\tget customBounds(): Bounds {\r\n\t\treturn this._customBounds;\r\n\t}\r\n\r\n\tset customBounds(value: Bounds) {\r\n\t\tif (value) {\r\n\t\t\tthis._useCustomBounds = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._useCustomBounds = false;\r\n\t\t}\r\n\t\tthis._customBounds = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_simulationSupported(): boolean {\r\n\r\n\t\tif (this.simulationSpace == 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// todo other propertys break procedural \r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _updateEmission(): void {\r\n\t\tif (!this.isAlive)\r\n\t\t\treturn;\r\n\t\tif (this._simulateUpdate) {\r\n\t\t\tthis._simulateUpdate = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar elapsedTime: number = (this._startUpdateLoopCount !== Stat.loopCount && !this._isPaused) ? ((<Scene3D>this._owner._scene)).timer._delta / 1000.0 : 0;\r\n\t\t\telapsedTime = Math.min(ShurikenParticleSystem._maxElapsedTime, elapsedTime * this.simulationSpeed);\r\n\t\t\tthis._updateParticles(elapsedTime);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _updateParticles(elapsedTime: number): void {\r\n\t\tif (this._ownerRender.renderMode === 4 && !this._ownerRender.mesh)//renderMode=4且mesh为空时不更新\r\n\t\t\treturn;\r\n\r\n\t\tthis._currentTime += elapsedTime;\r\n\t\tthis._retireActiveParticles();\r\n\t\tthis._freeRetiredParticles();\r\n\r\n\t\t//if (_firstActiveElement === _firstFreeElement){\r\n\t\t//_frameRateTime = 0//TODO:是否一起置零\r\n\t\t//_currentTime = 0;\r\n\t\t//}\r\n\t\t//if (_firstRetiredElement === _firstActiveElement)\r\n\t\t//_drawCounter = 0;\r\n\r\n\t\tthis._totalDelayTime += elapsedTime;\r\n\t\tif (this._totalDelayTime < this._playStartDelay) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\tif (this._emission.enable && this._isEmitting && !this._isPaused)\r\n\t\t\tthis._advanceTime(elapsedTime, this._currentTime);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _updateParticlesSimulationRestart(time: number): void {\r\n\t\tthis._firstActiveElement = 0;\r\n\t\tthis._firstNewElement = 0;\r\n\t\tthis._firstFreeElement = 0;\r\n\t\tthis._firstRetiredElement = 0;\r\n\r\n\t\tthis._burstsIndex = 0;\r\n\t\tthis._frameRateTime = time;//TOD0:零还是time待 验证\r\n\t\tthis._emissionTime = 0;\r\n\t\tthis._totalDelayTime = 0;\r\n\t\tthis._currentTime = time;\r\n\r\n\r\n\t\tvar delayTime: number = time;\r\n\t\tif (delayTime < this._playStartDelay) {\r\n\t\t\tthis._totalDelayTime = delayTime;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._emission.enable)\r\n\t\t\tthis._advanceTime(time, time);//TODO:如果time，time均为零brust无效\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _retireActiveParticles(): void {\r\n\t\tconst epsilon: number = 0.0001;\r\n\t\twhile (this._firstActiveElement != this._firstNewElement) {\r\n\t\t\tvar index: number = this._firstActiveElement * this._floatCountPerVertex * this._vertexStride;\r\n\t\t\tvar timeIndex: number = index + this._timeIndex;//11为Time\r\n\r\n\t\t\tvar particleAge: number = this._currentTime - this._vertices[timeIndex];\r\n\t\t\tif (particleAge + epsilon < this._vertices[index + this._startLifeTimeIndex]/*_maxLifeTime*/)//7为真实lifeTime,particleAge>0为生命周期为负时\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tthis._vertices[timeIndex] = this._drawCounter;\r\n\t\t\tthis._firstActiveElement++;\r\n\t\t\tif (this._firstActiveElement >= this._bufferMaxParticles)\r\n\t\t\t\tthis._firstActiveElement = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _freeRetiredParticles(): void {\r\n\t\twhile (this._firstRetiredElement != this._firstActiveElement) {\r\n\t\t\tvar age: number = this._drawCounter - this._vertices[this._firstRetiredElement * this._floatCountPerVertex * this._vertexStride + this._timeIndex];//11为Time\r\n\r\n\t\t\tif (this.isPerformanceMode)\r\n\t\t\t\tif (age < 3)//GPU从不滞后于CPU两帧，出于显卡驱动BUG等安全因素考虑滞后三帧\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\tthis._firstRetiredElement++;\r\n\t\t\tif (this._firstRetiredElement >= this._bufferMaxParticles)\r\n\t\t\t\tthis._firstRetiredElement = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _burst(fromTime: number, toTime: number): number {\r\n\t\tvar totalEmitCount: number = 0;\r\n\t\tvar bursts: Burst[] = this._emission._bursts;\r\n\t\tfor (var n: number = bursts.length; this._burstsIndex < n; this._burstsIndex++) {//TODO:_burstsIndex问题\r\n\t\t\tvar burst: Burst = bursts[this._burstsIndex];\r\n\t\t\tvar burstTime: number = burst.time;\r\n\t\t\tif (fromTime <= burstTime && burstTime < toTime) {\r\n\t\t\t\tvar emitCount: number;\r\n\t\t\t\tif (this.autoRandomSeed) {\r\n\t\t\t\t\temitCount = MathUtil.lerp(burst.minCount, burst.maxCount, Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._rand.seed = this._randomSeeds[0];\r\n\t\t\t\t\temitCount = MathUtil.lerp(burst.minCount, burst.maxCount, this._rand.getFloat());\r\n\t\t\t\t\tthis._randomSeeds[0] = this._rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\ttotalEmitCount += emitCount;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn totalEmitCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _advanceTime(elapsedTime: number, emitTime: number): void {\r\n\t\tvar i: number;\r\n\t\tvar lastEmissionTime: number = this._emissionTime;\r\n\t\tthis._emissionTime += elapsedTime;\r\n\t\tvar totalEmitCount: number = 0;\r\n\t\tif (this._emissionTime > this.duration) {\r\n\t\t\tif (this.looping) {//TODO:有while\r\n\t\t\t\ttotalEmitCount += this._burst(lastEmissionTime, this._emissionTime);//使用_emissionTime代替duration，否则无法触发time等于duration的burst //爆裂剩余未触发的//TODO:是否可以用_playbackTime代替计算，不必结束再爆裂一次。//TODO:待确认是否累计爆裂\r\n\t\t\t\tthis._emissionTime -= this.duration;\r\n\t\t\t\tthis._burstsIndex = 0;\r\n\t\t\t\ttotalEmitCount += this._burst(0, this._emissionTime);\r\n\t\t\t} else {\r\n\t\t\t\ttotalEmitCount = Math.min(this.maxParticles - this.aliveParticleCount, totalEmitCount);\r\n\t\t\t\tfor (i = 0; i < totalEmitCount; i++)\r\n\t\t\t\t\tthis.emit(emitTime);\r\n\r\n\t\t\t\tthis._isPlaying = false;\r\n\t\t\t\tthis.stop();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttotalEmitCount += this._burst(lastEmissionTime, this._emissionTime);\r\n\t\t}\r\n\r\n\t\ttotalEmitCount = Math.min(this.maxParticles - this.aliveParticleCount, totalEmitCount);\r\n\t\tfor (i = 0; i < totalEmitCount; i++)\r\n\t\t\tthis.emit(emitTime);\r\n\r\n\r\n\t\tvar emissionRate: number = this.emission.emissionRate;\r\n\t\tif (emissionRate > 0) {\r\n\t\t\tvar minEmissionTime: number = 1 / emissionRate;\r\n\t\t\tthis._frameRateTime += minEmissionTime;\r\n\t\t\tthis._frameRateTime = this._currentTime - (this._currentTime - this._frameRateTime) % this._maxStartLifetime;//大于最大声明周期的粒子一定会死亡，所以直接略过,TODO:是否更换机制\r\n\t\t\twhile (this._frameRateTime <= emitTime) {\r\n\t\t\t\tif (this.emit(this._frameRateTime))\r\n\t\t\t\t\tthis._frameRateTime += minEmissionTime;\r\n\t\t\t\telse\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis._frameRateTime = Math.floor(emitTime / minEmissionTime) * minEmissionTime;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_initBufferDatas(): void {\r\n\t\tif (this._vertexBuffer) {//修改了maxCount以及renderMode以及Mesh等需要清空\r\n\t\t\tthis._vertexBuffer.destroy();\r\n\t\t\tthis._indexBuffer.destroy();\r\n\t\t\tvar memorySize: number = this._vertexBuffer._byteLength + this._indexBuffer.indexCount * 2;\r\n\t\t\tResource._addMemory(-memorySize, -memorySize);\r\n\t\t\t//TODO:some time use clone will cause this call twice(from 'maxParticleCount' and 'renderMode'),this should optimization rewrite with special clone fun.\r\n\t\t}\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar render: ShurikenParticleRenderer = this._ownerRender;\r\n\t\tvar renderMode: number = render.renderMode;\r\n\t\tif (renderMode !== -1 && this.maxParticles > 0) {\r\n\t\t\tvar indices: Uint16Array, i: number, j: number, m: number, indexOffset: number, perPartOffset: number, vertexDeclaration: VertexDeclaration;\r\n\t\t\tvar vbMemorySize: number = 0, memorySize: number = 0;\r\n\t\t\tvar mesh: Mesh = render.mesh;\r\n\t\t\tif (renderMode === 4) {\r\n\t\t\t\tif (mesh) {\r\n\t\t\t\t\t// var vertexBufferCount: number = mesh._vertexBuffers.length;\r\n\t\t\t\t\t// if (vertexBufferCount > 1) {\r\n\t\t\t\t\t// \tthrow new Error(\"ShurikenParticleSystem: submesh Count mesh be One or all subMeshes have the same vertexDeclaration.\");\r\n\t\t\t\t\t// } else {\r\n\t\t\t\t\tvertexDeclaration = VertexShurikenParticleMesh.vertexDeclaration;\r\n\t\t\t\t\tthis._floatCountPerVertex = vertexDeclaration.vertexStride / 4;\r\n\t\t\t\t\tthis._startLifeTimeIndex = 12;\r\n\t\t\t\t\tthis._timeIndex = 16;\r\n\t\t\t\t\tthis._vertexStride = mesh._vertexCount;\r\n\t\t\t\t\tvar totalVertexCount: number = this._bufferMaxParticles * this._vertexStride;\r\n\t\t\t\t\tvar vbCount: number = Math.floor(totalVertexCount / 65535) + 1;\r\n\t\t\t\t\tvar lastVBVertexCount: number = totalVertexCount % 65535;\r\n\t\t\t\t\tif (vbCount > 1) {//TODO:随后支持\r\n\t\t\t\t\t\tthrow new Error(\"ShurikenParticleSystem:the maxParticleCount multiply mesh vertexCount is large than 65535.\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvbMemorySize = vertexDeclaration.vertexStride * lastVBVertexCount;\r\n\t\t\t\t\tthis._vertexBuffer = new VertexBuffer3D(vbMemorySize, gl.DYNAMIC_DRAW);\r\n\t\t\t\t\tthis._vertexBuffer.vertexDeclaration = vertexDeclaration;\r\n\t\t\t\t\tthis._vertices = new Float32Array(this._floatCountPerVertex * lastVBVertexCount);\r\n\r\n\r\n\t\t\t\t\tthis._indexStride = mesh._indexBuffer.indexCount;\r\n\t\t\t\t\tvar indexDatas: Uint16Array = mesh._indexBuffer.getData();\r\n\t\t\t\t\tvar indexCount: number = this._bufferMaxParticles * this._indexStride;\r\n\t\t\t\t\tthis._indexBuffer = new IndexBuffer3D(IndexFormat.UInt16, indexCount, gl.STATIC_DRAW);\r\n\t\t\t\t\tindices = new Uint16Array(indexCount);\r\n\r\n\t\t\t\t\tmemorySize = vbMemorySize + indexCount * 2;\r\n\r\n\t\t\t\t\tindexOffset = 0;\r\n\t\t\t\t\tfor (i = 0; i < this._bufferMaxParticles; i++) {\r\n\t\t\t\t\t\tvar indexValueOffset: number = i * this._vertexStride;\r\n\t\t\t\t\t\tfor (j = 0, m = indexDatas.length; j < m; j++)\r\n\t\t\t\t\t\t\tindices[indexOffset++] = indexValueOffset + indexDatas[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._indexBuffer.setData(indices);\r\n\r\n\t\t\t\t\tthis._bufferState.bind();\r\n\t\t\t\t\tthis._bufferState.applyVertexBuffer(this._vertexBuffer);\r\n\t\t\t\t\tthis._bufferState.applyIndexBuffer(this._indexBuffer);\r\n\t\t\t\t\tthis._bufferState.unBind();\r\n\t\t\t\t\t// }\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvertexDeclaration = VertexShurikenParticleBillboard.vertexDeclaration;\r\n\t\t\t\tthis._floatCountPerVertex = vertexDeclaration.vertexStride / 4;\r\n\t\t\t\tthis._startLifeTimeIndex = 7;\r\n\t\t\t\tthis._timeIndex = 11;\r\n\t\t\t\tthis._vertexStride = 4;\r\n\t\t\t\tvbMemorySize = vertexDeclaration.vertexStride * this._bufferMaxParticles * this._vertexStride;\r\n\t\t\t\tthis._vertexBuffer = new VertexBuffer3D(vbMemorySize, gl.DYNAMIC_DRAW);\r\n\t\t\t\tthis._vertexBuffer.vertexDeclaration = vertexDeclaration;\r\n\t\t\t\tthis._vertices = new Float32Array(this._floatCountPerVertex * this._bufferMaxParticles * this._vertexStride);\r\n\r\n\r\n\t\t\t\tfor (i = 0; i < this._bufferMaxParticles; i++) {\r\n\t\t\t\t\tperPartOffset = i * this._floatCountPerVertex * this._vertexStride;\r\n\t\t\t\t\tthis._vertices[perPartOffset] = -0.5;\r\n\t\t\t\t\tthis._vertices[perPartOffset + 1] = -0.5;\r\n\t\t\t\t\tthis._vertices[perPartOffset + 2] = 0;\r\n\t\t\t\t\tthis._vertices[perPartOffset + 3] = 1;\r\n\r\n\t\t\t\t\tperPartOffset += this._floatCountPerVertex;\r\n\t\t\t\t\tthis._vertices[perPartOffset] = 0.5;\r\n\t\t\t\t\tthis._vertices[perPartOffset + 1] = -0.5;\r\n\t\t\t\t\tthis._vertices[perPartOffset + 2] = 1;\r\n\t\t\t\t\tthis._vertices[perPartOffset + 3] = 1;\r\n\r\n\t\t\t\t\tperPartOffset += this._floatCountPerVertex\r\n\t\t\t\t\tthis._vertices[perPartOffset] = 0.5;\r\n\t\t\t\t\tthis._vertices[perPartOffset + 1] = 0.5;\r\n\t\t\t\t\tthis._vertices[perPartOffset + 2] = 1;\r\n\t\t\t\t\tthis._vertices[perPartOffset + 3] = 0;\r\n\r\n\t\t\t\t\tperPartOffset += this._floatCountPerVertex\r\n\t\t\t\t\tthis._vertices[perPartOffset] = -0.5;\r\n\t\t\t\t\tthis._vertices[perPartOffset + 1] = 0.5;\r\n\t\t\t\t\tthis._vertices[perPartOffset + 2] = 0;\r\n\t\t\t\t\tthis._vertices[perPartOffset + 3] = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._indexStride = 6;\r\n\t\t\t\tthis._indexBuffer = new IndexBuffer3D(IndexFormat.UInt16, this._bufferMaxParticles * 6, gl.STATIC_DRAW);\r\n\t\t\t\tindices = new Uint16Array(this._bufferMaxParticles * 6);\r\n\t\t\t\tfor (i = 0; i < this._bufferMaxParticles; i++) {\r\n\t\t\t\t\tindexOffset = i * 6;\r\n\t\t\t\t\tvar firstVertex: number = i * this._vertexStride, secondVertex: number = firstVertex + 2;\r\n\t\t\t\t\tindices[indexOffset++] = firstVertex;\r\n\t\t\t\t\tindices[indexOffset++] = secondVertex;\r\n\t\t\t\t\tindices[indexOffset++] = firstVertex + 1;\r\n\t\t\t\t\tindices[indexOffset++] = firstVertex;\r\n\t\t\t\t\tindices[indexOffset++] = firstVertex + 3;\r\n\t\t\t\t\tindices[indexOffset++] = secondVertex;\r\n\t\t\t\t}\r\n\t\t\t\tthis._indexBuffer.setData(indices);\r\n\r\n\t\t\t\tmemorySize = vbMemorySize + this._bufferMaxParticles * 6 * 2;\r\n\r\n\t\t\t\tthis._bufferState.bind();\r\n\t\t\t\tthis._bufferState.applyVertexBuffer(this._vertexBuffer);\r\n\t\t\t\tthis._bufferState.applyIndexBuffer(this._indexBuffer);\r\n\t\t\t\tthis._bufferState.unBind();\r\n\t\t\t}\r\n\r\n\t\t\tResource._addMemory(memorySize, memorySize);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tvar memorySize: number = this._vertexBuffer._byteLength + this._indexBuffer.indexCount * 2;\r\n\t\tResource._addMemory(-memorySize, -memorySize);\r\n\t\tthis._bufferState.destroy();\r\n\t\tthis._vertexBuffer.destroy();\r\n\t\tthis._indexBuffer.destroy();\r\n\t\tthis._emission.destroy();\r\n\t\tthis._boundingBox = null;\r\n\t\tthis._boundingSphere = null;\r\n\t\tthis._boundingBoxCorners = null;\r\n\t\tthis._bounds = null;\r\n\t\tthis._customBounds = null;\r\n\t\tthis._bufferState = null;\r\n\t\tthis._vertexBuffer = null;\r\n\t\tthis._indexBuffer = null;\r\n\t\tthis._owner = null;\r\n\t\tthis._vertices = null;\r\n\t\tthis._indexBuffer = null;\r\n\t\tthis._emission = null;\r\n\t\tthis._shape = null;\r\n\t\tthis.startLifeTimeGradient = null;\r\n\t\tthis.startLifeTimeGradientMin = null;\r\n\t\tthis.startLifeTimeGradientMax = null;\r\n\t\tthis.startSizeConstantSeparate = null;\r\n\t\tthis.startSizeConstantMinSeparate = null;\r\n\t\tthis.startSizeConstantMaxSeparate = null;\r\n\t\tthis.startRotationConstantSeparate = null;\r\n\t\tthis.startRotationConstantMinSeparate = null;\r\n\t\tthis.startRotationConstantMaxSeparate = null;\r\n\t\tthis.startColorConstant = null;\r\n\t\tthis.startColorConstantMin = null;\r\n\t\tthis.startColorConstantMax = null;\r\n\t\tthis._velocityOverLifetime = null;\r\n\t\tthis._colorOverLifetime = null;\r\n\t\tthis._sizeOverLifetime = null;\r\n\t\tthis._rotationOverLifetime = null;\r\n\t\tthis._textureSheetAnimation = null;\r\n\t}\r\n\r\n\t/**\r\n\t * 发射一个粒子。\r\n\t */\r\n\temit(time: number): boolean {\r\n\t\tvar position: Vector3 = ShurikenParticleSystem._tempPosition;\r\n\t\tvar direction: Vector3 = ShurikenParticleSystem._tempDirection;\r\n\t\tif (this._shape && this._shape.enable) {\r\n\t\t\tif (this.autoRandomSeed)\r\n\t\t\t\tthis._shape.generatePositionAndDirection(position, direction);\r\n\t\t\telse\r\n\t\t\t\tthis._shape.generatePositionAndDirection(position, direction, this._rand, this._randomSeeds);\r\n\t\t} else {\r\n\t\t\tposition.x = position.y = position.z = 0;\r\n\t\t\tdirection.x = direction.y = 0;\r\n\t\t\tdirection.z = 1;\r\n\t\t}\r\n\r\n\t\treturn this.addParticle(position, direction, time);//TODO:提前判断优化\r\n\t}\r\n\r\n\taddParticle(position: Vector3, direction: Vector3, time: number): boolean {//TODO:还需优化\r\n\t\tVector3.normalize(direction, direction);\r\n\t\tvar nextFreeParticle: number = this._firstFreeElement + 1;\r\n\t\tif (nextFreeParticle >= this._bufferMaxParticles)\r\n\t\t\tnextFreeParticle = 0;\r\n\r\n\t\tif (nextFreeParticle === this._firstRetiredElement)\r\n\t\t\treturn false;\r\n\r\n\t\tvar transform: Transform3D = this._owner.transform;\r\n\t\tShurikenParticleData.create(this, this._ownerRender, transform);\r\n\r\n\t\tvar particleAge: number = this._currentTime - time;\r\n\t\tif (particleAge >= ShurikenParticleData.startLifeTime)//如果时间已大于声明周期，则直接跳过,TODO:提前优化\r\n\t\t\treturn true;\r\n\r\n\t\tvar pos: Vector3, rot: Quaternion;\r\n\t\tif (this.simulationSpace == 0) {\r\n\t\t\tpos = transform.position;\r\n\t\t\trot = transform.rotation;\r\n\t\t}\r\n\r\n\t\t//StartSpeed\r\n\t\tvar startSpeed: number;\r\n\t\tswitch (this.startSpeedType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tstartSpeed = this.startSpeedConstant;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (this.autoRandomSeed) {\r\n\t\t\t\t\tstartSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._rand.seed = this._randomSeeds[8];\r\n\t\t\t\t\tstartSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, this._rand.getFloat());\r\n\t\t\t\t\tthis._randomSeeds[8] = this._rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\r\n\t\tvar randomVelocityX: number, randomVelocityY: number, randomVelocityZ: number, randomColor: number, randomSize: number, randomRotation: number, randomTextureAnimation: number;\r\n\t\tvar needRandomVelocity: boolean = this._velocityOverLifetime && this._velocityOverLifetime.enable;\r\n\t\tif (needRandomVelocity) {\r\n\t\t\tvar velocityType: number = this._velocityOverLifetime.velocity.type;\r\n\t\t\tif (velocityType === 2 || velocityType === 3) {\r\n\t\t\t\tif (this.autoRandomSeed) {\r\n\t\t\t\t\trandomVelocityX = Math.random();\r\n\t\t\t\t\trandomVelocityY = Math.random();\r\n\t\t\t\t\trandomVelocityZ = Math.random();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._rand.seed = this._randomSeeds[9];\r\n\t\t\t\t\trandomVelocityX = this._rand.getFloat();\r\n\t\t\t\t\trandomVelocityY = this._rand.getFloat();\r\n\t\t\t\t\trandomVelocityZ = this._rand.getFloat();\r\n\t\t\t\t\tthis._randomSeeds[9] = this._rand.seed;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tneedRandomVelocity = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tneedRandomVelocity = false;\r\n\t\t}\r\n\t\tvar needRandomColor: boolean = this._colorOverLifetime && this._colorOverLifetime.enable;\r\n\t\tif (needRandomColor) {\r\n\t\t\tvar colorType: number = this._colorOverLifetime.color.type;\r\n\t\t\tif (colorType === 3) {\r\n\t\t\t\tif (this.autoRandomSeed) {\r\n\t\t\t\t\trandomColor = Math.random();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._rand.seed = this._randomSeeds[10];\r\n\t\t\t\t\trandomColor = this._rand.getFloat();\r\n\t\t\t\t\tthis._randomSeeds[10] = this._rand.seed;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tneedRandomColor = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tneedRandomColor = false;\r\n\t\t}\r\n\t\tvar needRandomSize: boolean = this._sizeOverLifetime && this._sizeOverLifetime.enable;\r\n\t\tif (needRandomSize) {\r\n\t\t\tvar sizeType: number = this._sizeOverLifetime.size.type;\r\n\t\t\tif (sizeType === 3) {\r\n\t\t\t\tif (this.autoRandomSeed) {\r\n\t\t\t\t\trandomSize = Math.random();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._rand.seed = this._randomSeeds[11];\r\n\t\t\t\t\trandomSize = this._rand.getFloat();\r\n\t\t\t\t\tthis._randomSeeds[11] = this._rand.seed;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tneedRandomSize = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tneedRandomSize = false;\r\n\t\t}\r\n\t\tvar needRandomRotation: boolean = this._rotationOverLifetime && this._rotationOverLifetime.enable;\r\n\t\tif (needRandomRotation) {\r\n\t\t\tvar rotationType: number = this._rotationOverLifetime.angularVelocity.type;\r\n\t\t\tif (rotationType === 2 || rotationType === 3) {\r\n\t\t\t\tif (this.autoRandomSeed) {\r\n\t\t\t\t\trandomRotation = Math.random();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._rand.seed = this._randomSeeds[12];\r\n\t\t\t\t\trandomRotation = this._rand.getFloat();\r\n\t\t\t\t\tthis._randomSeeds[12] = this._rand.seed;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tneedRandomRotation = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tneedRandomRotation = false;\r\n\t\t}\r\n\t\tvar needRandomTextureAnimation: boolean = this._textureSheetAnimation && this._textureSheetAnimation.enable;\r\n\t\tif (needRandomTextureAnimation) {\r\n\t\t\tvar textureAnimationType: number = this._textureSheetAnimation.frame.type;\r\n\t\t\tif (textureAnimationType === 3) {\r\n\t\t\t\tif (this.autoRandomSeed) {\r\n\t\t\t\t\trandomTextureAnimation = Math.random();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._rand.seed = this._randomSeeds[15];\r\n\t\t\t\t\trandomTextureAnimation = this._rand.getFloat();\r\n\t\t\t\t\tthis._randomSeeds[15] = this._rand.seed;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tneedRandomTextureAnimation = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tneedRandomTextureAnimation = false;\r\n\t\t}\r\n\r\n\t\tvar startIndex: number = this._firstFreeElement * this._floatCountPerVertex * this._vertexStride;\r\n\t\tvar subU: number = ShurikenParticleData.startUVInfo[0];\r\n\t\tvar subV: number = ShurikenParticleData.startUVInfo[1];\r\n\t\tvar startU: number = ShurikenParticleData.startUVInfo[2];\r\n\t\tvar startV: number = ShurikenParticleData.startUVInfo[3];\r\n\r\n\t\tvar meshVertices: Float32Array, meshVertexStride: number, meshPosOffset: number, meshCorOffset: number, meshUVOffset: number, meshVertexIndex: number;\r\n\t\tvar render: ShurikenParticleRenderer = this._ownerRender;\r\n\t\tif (render.renderMode === 4) {\r\n\t\t\tvar meshVB: VertexBuffer3D = render.mesh._vertexBuffer;\r\n\t\t\tmeshVertices = meshVB.getFloat32Data();\r\n\t\t\tvar meshVertexDeclaration: VertexDeclaration = meshVB.vertexDeclaration;\r\n\t\t\tmeshPosOffset = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_POSITION0)._offset / 4;\r\n\t\t\tvar colorElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_COLOR0);\r\n\t\t\tmeshCorOffset = colorElement ? colorElement._offset / 4 : -1;\r\n\t\t\tvar uvElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE0);\r\n\t\t\tmeshUVOffset = uvElement ? uvElement._offset / 4 : -1;\r\n\t\t\tmeshVertexStride = meshVertexDeclaration.vertexStride / 4;\r\n\t\t\tmeshVertexIndex = 0;\r\n\t\t} else {\r\n\t\t\tthis._vertices[startIndex + 2] = startU;\r\n\t\t\tthis._vertices[startIndex + 3] = startV + subV;\r\n\t\t\tvar secondOffset: number = startIndex + this._floatCountPerVertex;\r\n\t\t\tthis._vertices[secondOffset + 2] = startU + subU;\r\n\t\t\tthis._vertices[secondOffset + 3] = startV + subV;\r\n\t\t\tvar thirdOffset: number = secondOffset + this._floatCountPerVertex;\r\n\t\t\tthis._vertices[thirdOffset + 2] = startU + subU;\r\n\t\t\tthis._vertices[thirdOffset + 3] = startV;\r\n\t\t\tvar fourthOffset: number = thirdOffset + this._floatCountPerVertex;\r\n\t\t\tthis._vertices[fourthOffset + 2] = startU;\r\n\t\t\tthis._vertices[fourthOffset + 3] = startV;\r\n\t\t}\r\n\r\n\t\tfor (var i: number = startIndex, n: number = startIndex + this._floatCountPerVertex * this._vertexStride; i < n; i += this._floatCountPerVertex) {\r\n\t\t\tvar offset: number;\r\n\t\t\tif (render.renderMode === 4) {\r\n\t\t\t\toffset = i;\r\n\t\t\t\tvar vertexOffset: number = meshVertexStride * (meshVertexIndex++);\r\n\t\t\t\tvar meshOffset: number = vertexOffset + meshPosOffset;\r\n\t\t\t\tthis._vertices[offset++] = meshVertices[meshOffset++];\r\n\t\t\t\tthis._vertices[offset++] = meshVertices[meshOffset++];\r\n\t\t\t\tthis._vertices[offset++] = meshVertices[meshOffset];\r\n\t\t\t\tif (meshCorOffset === -1) {\r\n\t\t\t\t\tthis._vertices[offset++] = 1.0;\r\n\t\t\t\t\tthis._vertices[offset++] = 1.0;\r\n\t\t\t\t\tthis._vertices[offset++] = 1.0;\r\n\t\t\t\t\tthis._vertices[offset++] = 1.0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmeshOffset = vertexOffset + meshCorOffset;\r\n\t\t\t\t\tthis._vertices[offset++] = meshVertices[meshOffset++];\r\n\t\t\t\t\tthis._vertices[offset++] = meshVertices[meshOffset++];\r\n\t\t\t\t\tthis._vertices[offset++] = meshVertices[meshOffset++];\r\n\t\t\t\t\tthis._vertices[offset++] = meshVertices[meshOffset];\r\n\t\t\t\t}\r\n\t\t\t\tif (meshUVOffset === -1) {\r\n\t\t\t\t\tthis._vertices[offset++] = 0.0;\r\n\t\t\t\t\tthis._vertices[offset++] = 0.0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmeshOffset = vertexOffset + meshUVOffset;\r\n\t\t\t\t\tthis._vertices[offset++] = startU + meshVertices[meshOffset++] * subU;\r\n\t\t\t\t\tthis._vertices[offset++] = startV + meshVertices[meshOffset] * subV;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\toffset = i + 4;\r\n\t\t\t}\r\n\r\n\t\t\tthis._vertices[offset++] = position.x;\r\n\t\t\tthis._vertices[offset++] = position.y;\r\n\t\t\tthis._vertices[offset++] = position.z;\r\n\r\n\t\t\tthis._vertices[offset++] = ShurikenParticleData.startLifeTime;\r\n\r\n\t\t\tthis._vertices[offset++] = direction.x;\r\n\t\t\tthis._vertices[offset++] = direction.y;\r\n\t\t\tthis._vertices[offset++] = direction.z;\r\n\t\t\tthis._vertices[offset++] = time;\r\n\r\n\t\t\tthis._vertices[offset++] = ShurikenParticleData.startColor.x;\r\n\t\t\tthis._vertices[offset++] = ShurikenParticleData.startColor.y;\r\n\t\t\tthis._vertices[offset++] = ShurikenParticleData.startColor.z;\r\n\t\t\tthis._vertices[offset++] = ShurikenParticleData.startColor.w;\r\n\r\n\t\t\tthis._vertices[offset++] = ShurikenParticleData.startSize[0];\r\n\t\t\tthis._vertices[offset++] = ShurikenParticleData.startSize[1];\r\n\t\t\tthis._vertices[offset++] = ShurikenParticleData.startSize[2];\r\n\r\n\t\t\tthis._vertices[offset++] = ShurikenParticleData.startRotation[0];\r\n\t\t\tthis._vertices[offset++] = ShurikenParticleData.startRotation[1];\r\n\t\t\tthis._vertices[offset++] = ShurikenParticleData.startRotation[2];\r\n\r\n\t\t\t//StartSpeed\r\n\t\t\tthis._vertices[offset++] = startSpeed;\r\n\r\n\t\t\t// (_vertices[offset] = XX);TODO:29预留\r\n\t\t\tneedRandomColor && (this._vertices[offset + 1] = randomColor);\r\n\t\t\tneedRandomSize && (this._vertices[offset + 2] = randomSize);\r\n\t\t\tneedRandomRotation && (this._vertices[offset + 3] = randomRotation);\r\n\t\t\tneedRandomTextureAnimation && (this._vertices[offset + 4] = randomTextureAnimation);\r\n\t\t\tif (needRandomVelocity) {\r\n\t\t\t\tthis._vertices[offset + 5] = randomVelocityX;\r\n\t\t\t\tthis._vertices[offset + 6] = randomVelocityY;\r\n\t\t\t\tthis._vertices[offset + 7] = randomVelocityZ;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (this.simulationSpace) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\toffset += 8;\r\n\t\t\t\t\tthis._vertices[offset++] = pos.x;\r\n\t\t\t\t\tthis._vertices[offset++] = pos.y;\r\n\t\t\t\t\tthis._vertices[offset++] = pos.z;\r\n\t\t\t\t\tthis._vertices[offset++] = rot.x;\r\n\t\t\t\t\tthis._vertices[offset++] = rot.y;\r\n\t\t\t\t\tthis._vertices[offset++] = rot.z;\r\n\t\t\t\t\tthis._vertices[offset++] = rot.w;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"ShurikenParticleMaterial: SimulationSpace value is invalid.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._firstFreeElement = nextFreeParticle;\r\n\t\treturn true;\r\n\t}\r\n\r\n\taddNewParticlesToVertexBuffer(): void {\r\n\t\tvar start: number;\r\n\t\tvar byteStride: number = this._vertexStride * this._floatCountPerVertex * 4;\r\n\t\tif (this._firstNewElement < this._firstFreeElement) {\r\n\t\t\tstart = this._firstNewElement * byteStride;\r\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, start, start, (this._firstFreeElement - this._firstNewElement) * byteStride);\r\n\r\n\t\t} else {\r\n\t\t\tstart = this._firstNewElement * byteStride;\r\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, start, start, (this._bufferMaxParticles - this._firstNewElement) * byteStride);\r\n\r\n\t\t\tif (this._firstFreeElement > 0) {\r\n\t\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, 0, 0, this._firstFreeElement * byteStride);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._firstNewElement = this._firstFreeElement;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_getType(): number {\r\n\t\treturn ShurikenParticleSystem._type;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\tthis._updateEmission();\r\n\t\t//设备丢失时, setData  here\r\n\t\tif (this._firstNewElement != this._firstFreeElement)\r\n\t\t\tthis.addNewParticlesToVertexBuffer();\r\n\r\n\t\tthis._drawCounter++;\r\n\t\tif (this._firstActiveElement != this._firstFreeElement)\r\n\t\t\treturn true;\r\n\t\telse\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_render(state: RenderContext3D): void {\r\n\t\tthis._bufferState.bind();\r\n\t\tvar indexCount: number;\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tif (this._firstActiveElement < this._firstFreeElement) {\r\n\t\t\tindexCount = (this._firstFreeElement - this._firstActiveElement) * this._indexStride;\r\n\t\t\tgl.drawElements(gl.TRIANGLES, indexCount, gl.UNSIGNED_SHORT, 2 * this._firstActiveElement * this._indexStride);\r\n\t\t\tStat.trianglesFaces += indexCount / 3;\r\n\t\t\tStat.renderBatches++;\r\n\t\t} else {\r\n\t\t\tindexCount = (this._bufferMaxParticles - this._firstActiveElement) * this._indexStride;\r\n\t\t\tgl.drawElements(gl.TRIANGLES, indexCount, gl.UNSIGNED_SHORT, 2 * this._firstActiveElement * this._indexStride);\r\n\t\t\tStat.trianglesFaces += indexCount / 3;\r\n\t\t\tStat.renderBatches++;\r\n\t\t\tif (this._firstFreeElement > 0) {\r\n\t\t\t\tindexCount = this._firstFreeElement * this._indexStride;\r\n\t\t\t\tgl.drawElements(gl.TRIANGLES, indexCount, gl.UNSIGNED_SHORT, 0);\r\n\t\t\t\tStat.trianglesFaces += indexCount / 3;\r\n\t\t\t\tStat.renderBatches++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 开始发射粒子。\r\n\t */\r\n\tplay(): void {\r\n\t\tthis._burstsIndex = 0;\r\n\t\tthis._isEmitting = true;\r\n\t\tthis._isPlaying = true;\r\n\t\tthis._isPaused = false;\r\n\t\tthis._emissionTime = 0;\r\n\t\tthis._totalDelayTime = 0;\r\n\r\n\t\tif (!this.autoRandomSeed) {\r\n\t\t\tfor (var i: number = 0, n: number = this._randomSeeds.length; i < n; i++)\r\n\t\t\t\tthis._randomSeeds[i] = this.randomSeed[0] + ShurikenParticleSystem._RANDOMOFFSET[i];\r\n\t\t}\r\n\r\n\t\tswitch (this.startDelayType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tthis._playStartDelay = this.startDelay;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (this.autoRandomSeed) {\r\n\t\t\t\t\tthis._playStartDelay = MathUtil.lerp(this.startDelayMin, this.startDelayMax, Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._rand.seed = this._randomSeeds[2];\r\n\t\t\t\t\tthis._playStartDelay = MathUtil.lerp(this.startDelayMin, this.startDelayMax, this._rand.getFloat());\r\n\t\t\t\t\tthis._randomSeeds[2] = this._rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Utils3D: startDelayType is invalid.\");\r\n\t\t}\r\n\t\tthis._frameRateTime = this._currentTime + this._playStartDelay;//同步频率模式发射时间,更新函数中小于延迟时间不会更新此时间。\r\n\r\n\t\tthis._startUpdateLoopCount = Stat.loopCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 暂停发射粒子。\r\n\t */\r\n\tpause(): void {\r\n\t\tthis._isPaused = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过指定时间增加粒子播放进度，并暂停播放。\r\n\t * @param time 进度时间.如果restart为true,粒子播放时间会归零后再更新进度。\r\n\t * @param restart 是否重置播放状态。\r\n\t */\r\n\tsimulate(time: number, restart: boolean = true): void {\r\n\t\tthis._simulateUpdate = true;\r\n\r\n\t\tif (restart) {\r\n\t\t\tthis._updateParticlesSimulationRestart(time);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._isPaused = false;//如果当前状态为暂停则无法发射粒子\r\n\t\t\tthis._updateParticles(time);\r\n\t\t}\r\n\r\n\t\tthis.pause();\r\n\t}\r\n\r\n\t/**\r\n\t * 停止发射粒子。\r\n\t */\r\n\tstop(): void {\r\n\t\tthis._burstsIndex = 0;\r\n\t\tthis._isEmitting = false;\r\n\t\tthis._emissionTime = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar dest: ShurikenParticleSystem = (<ShurikenParticleSystem>destObject);\r\n\r\n\t\tdest._useCustomBounds = this._useCustomBounds;\r\n\t\t(this._customBounds) && (this._customBounds.cloneTo(dest._customBounds));\t\t\r\n\r\n\t\tdest.duration = this.duration;\r\n\t\tdest.looping = this.looping;\r\n\t\tdest.prewarm = this.prewarm;\r\n\t\tdest.startDelayType = this.startDelayType;\r\n\t\tdest.startDelay = this.startDelay;\r\n\t\tdest.startDelayMin = this.startDelayMin;\r\n\t\tdest.startDelayMax = this.startDelayMax;\r\n\r\n\t\tdest._maxStartLifetime = this._maxStartLifetime;\r\n\t\tdest.startLifetimeType = this.startLifetimeType;\r\n\t\tdest.startLifetimeConstant = this.startLifetimeConstant;\r\n\t\tthis.startLifeTimeGradient.cloneTo(dest.startLifeTimeGradient);\r\n\t\tdest.startLifetimeConstantMin = this.startLifetimeConstantMin;\r\n\t\tdest.startLifetimeConstantMax = this.startLifetimeConstantMax;\r\n\t\tthis.startLifeTimeGradientMin.cloneTo(dest.startLifeTimeGradientMin);\r\n\t\tthis.startLifeTimeGradientMax.cloneTo(dest.startLifeTimeGradientMax);\r\n\r\n\t\tdest.startSpeedType = this.startSpeedType;\r\n\t\tdest.startSpeedConstant = this.startSpeedConstant;\r\n\t\tdest.startSpeedConstantMin = this.startSpeedConstantMin;\r\n\t\tdest.startSpeedConstantMax = this.startSpeedConstantMax;\r\n\r\n\t\tdest.threeDStartSize = this.threeDStartSize;\r\n\t\tdest.startSizeType = this.startSizeType;\r\n\t\tdest.startSizeConstant = this.startSizeConstant;\r\n\t\tthis.startSizeConstantSeparate.cloneTo(dest.startSizeConstantSeparate);\r\n\t\tdest.startSizeConstantMin = this.startSizeConstantMin;\r\n\t\tdest.startSizeConstantMax = this.startSizeConstantMax;\r\n\t\tthis.startSizeConstantMinSeparate.cloneTo(dest.startSizeConstantMinSeparate);\r\n\t\tthis.startSizeConstantMaxSeparate.cloneTo(dest.startSizeConstantMaxSeparate);\r\n\r\n\t\tdest.threeDStartRotation = this.threeDStartRotation;\r\n\t\tdest.startRotationType = this.startRotationType;\r\n\t\tdest.startRotationConstant = this.startRotationConstant;\r\n\t\tthis.startRotationConstantSeparate.cloneTo(dest.startRotationConstantSeparate);\r\n\t\tdest.startRotationConstantMin = this.startRotationConstantMin;\r\n\t\tdest.startRotationConstantMax = this.startRotationConstantMax;\r\n\t\tthis.startRotationConstantMinSeparate.cloneTo(dest.startRotationConstantMinSeparate);\r\n\t\tthis.startRotationConstantMaxSeparate.cloneTo(dest.startRotationConstantMaxSeparate);\r\n\r\n\t\tdest.randomizeRotationDirection = this.randomizeRotationDirection;\r\n\r\n\t\tdest.startColorType = this.startColorType;\r\n\t\tthis.startColorConstant.cloneTo(dest.startColorConstant);\r\n\t\tthis.startColorConstantMin.cloneTo(dest.startColorConstantMin);\r\n\t\tthis.startColorConstantMax.cloneTo(dest.startColorConstantMax);\r\n\r\n\t\tdest.gravityModifier = this.gravityModifier;\r\n\t\tdest.simulationSpace = this.simulationSpace;\r\n\t\tdest.scaleMode = this.scaleMode;\r\n\t\tdest.playOnAwake = this.playOnAwake;\r\n\t\tdest.autoRandomSeed = this.autoRandomSeed;\r\n\t\tdest.randomSeed[0] = this.randomSeed[0];\r\n\r\n\t\tdest.maxParticles = this.maxParticles;\r\n\r\n\t\t//TODO:可做更优判断\r\n\t\t(this._emission) && (dest._emission = this._emission.clone());\r\n\t\t(this.shape) && (dest.shape = this.shape.clone());\r\n\t\t(this.velocityOverLifetime) && (dest.velocityOverLifetime = this.velocityOverLifetime.clone());\r\n\t\t(this.colorOverLifetime) && (dest.colorOverLifetime = this.colorOverLifetime.clone());\r\n\t\t(this.sizeOverLifetime) && (dest.sizeOverLifetime = this.sizeOverLifetime.clone());\r\n\t\t(this.rotationOverLifetime) && (dest.rotationOverLifetime = this.rotationOverLifetime.clone());\r\n\t\t(this.textureSheetAnimation) && (dest.textureSheetAnimation = this.textureSheetAnimation.clone());\r\n\t\t//\r\n\r\n\t\tdest.isPerformanceMode = this.isPerformanceMode;\r\n\r\n\t\tdest._isEmitting = this._isEmitting;\r\n\t\tdest._isPlaying = this._isPlaying;\r\n\t\tdest._isPaused = this._isPaused;\r\n\t\tdest._playStartDelay = this._playStartDelay;\r\n\t\tdest._frameRateTime = this._frameRateTime;\r\n\t\tdest._emissionTime = this._emissionTime;\r\n\t\tdest._totalDelayTime = this._totalDelayTime;\r\n\t\tdest._burstsIndex = this._burstsIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: ShurikenParticleSystem = new ShurikenParticleSystem(null);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n\r\n","import { Node } from \"../../../display/Node\";\r\nimport { Loader } from \"../../../net/Loader\";\r\nimport { Color } from \"../../math/Color\";\r\nimport { Vector2 } from \"../../math/Vector2\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { RenderElement } from \"../render/RenderElement\";\r\nimport { RenderableSprite3D } from \"../RenderableSprite3D\";\r\nimport { Burst } from \"./module/Burst\";\r\nimport { ColorOverLifetime } from \"./module/ColorOverLifetime\";\r\nimport { Emission } from \"./module/Emission\";\r\nimport { FrameOverTime } from \"./module/FrameOverTime\";\r\nimport { GradientAngularVelocity } from \"./module/GradientAngularVelocity\";\r\nimport { GradientColor } from \"./module/GradientColor\";\r\nimport { GradientDataInt } from \"./module/GradientDataInt\";\r\nimport { GradientDataNumber } from \"./module/GradientDataNumber\";\r\nimport { GradientSize } from \"./module/GradientSize\";\r\nimport { GradientVelocity } from \"./module/GradientVelocity\";\r\nimport { RotationOverLifetime } from \"./module/RotationOverLifetime\";\r\nimport { BaseShape } from \"./module/shape/BaseShape\";\r\nimport { BoxShape } from \"./module/shape/BoxShape\";\r\nimport { CircleShape } from \"./module/shape/CircleShape\";\r\nimport { ConeShape } from \"./module/shape/ConeShape\";\r\nimport { HemisphereShape } from \"./module/shape/HemisphereShape\";\r\nimport { SphereShape } from \"./module/shape/SphereShape\";\r\nimport { SizeOverLifetime } from \"./module/SizeOverLifetime\";\r\nimport { StartFrame } from \"./module/StartFrame\";\r\nimport { TextureSheetAnimation } from \"./module/TextureSheetAnimation\";\r\nimport { VelocityOverLifetime } from \"./module/VelocityOverLifetime\";\r\nimport { ShuriKenParticle3DShaderDeclaration } from \"./ShuriKenParticle3DShaderDeclaration\";\r\nimport { ShurikenParticleMaterial } from \"./ShurikenParticleMaterial\";\r\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\r\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\r\n\r\n/**\r\n * <code>ShuriKenParticle3D</code> 3D粒子。\r\n */\r\nexport class ShuriKenParticle3D extends RenderableSprite3D {\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD = Shader3D.getDefineByName(\"SPHERHBILLBOARD\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD = Shader3D.getDefineByName(\"STRETCHEDBILLBOARD\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD = Shader3D.getDefineByName(\"HORIZONTALBILLBOARD\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD = Shader3D.getDefineByName(\"VERTICALBILLBOARD\");\r\n\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLOROVERLIFETIME = Shader3D.getDefineByName(\"COLOROVERLIFETIME\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME = Shader3D.getDefineByName(\"RANDOMCOLOROVERLIFETIME\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT = Shader3D.getDefineByName(\"VELOCITYOVERLIFETIMECONSTANT\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE = Shader3D.getDefineByName(\"VELOCITYOVERLIFETIMECURVE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT = Shader3D.getDefineByName(\"VELOCITYOVERLIFETIMERANDOMCONSTANT\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE = Shader3D.getDefineByName(\"VELOCITYOVERLIFETIMERANDOMCURVE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE = Shader3D.getDefineByName(\"TEXTURESHEETANIMATIONCURVE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE = Shader3D.getDefineByName(\"TEXTURESHEETANIMATIONRANDOMCURVE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIME\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMESEPERATE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMECONSTANT\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMECURVE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMERANDOMCONSTANTS\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMERANDOMCURVES\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVE = Shader3D.getDefineByName(\"SIZEOVERLIFETIMECURVE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE = Shader3D.getDefineByName(\"SIZEOVERLIFETIMECURVESEPERATE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES = Shader3D.getDefineByName(\"SIZEOVERLIFETIMERANDOMCURVES\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE = Shader3D.getDefineByName(\"SIZEOVERLIFETIMERANDOMCURVESSEPERATE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH = Shader3D.getDefineByName(\"RENDERMODE_MESH\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SHAPE = Shader3D.getDefineByName(\"SHAPE\");\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _particleSystem: ShurikenParticleSystem;\r\n\r\n\t/**\r\n\t * 粒子系统。\r\n\t */\r\n\tget particleSystem(): ShurikenParticleSystem {\r\n\t\treturn this._particleSystem;\r\n\t}\r\n\r\n\t/**\r\n\t * 粒子渲染器。\r\n\t */\r\n\tget particleRenderer(): ShurikenParticleRenderer {\r\n\t\treturn <ShurikenParticleRenderer>this._render;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Particle3D</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(null);\r\n\t\tthis._render = new ShurikenParticleRenderer(this);\r\n\r\n\t\tthis._particleSystem = new ShurikenParticleSystem(this);\r\n\r\n\t\tvar elements: RenderElement[] = this._render._renderElements;\r\n\t\tvar element: RenderElement = elements[0] = new RenderElement();\r\n\t\telement.setTransform(this._transform);\r\n\t\telement.render = this._render;\r\n\t\telement.setGeometry(this._particleSystem);\r\n\t\telement.material = ShurikenParticleMaterial.defaultMaterial;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_parseModule(module: any, moduleData: any): void {\r\n\t\tfor (var t in moduleData) {\r\n\t\t\tswitch (t) {\r\n\t\t\t\tcase \"bases\":\r\n\t\t\t\t\tvar bases: object = moduleData.bases;\r\n\t\t\t\t\tfor (var k in bases)\r\n\t\t\t\t\t\tmodule[k] = bases[k];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"vector2s\":\r\n\t\t\t\t\tvar vector2s: object = moduleData.vector2s;\r\n\t\t\t\t\tfor (var k in vector2s) {\r\n\t\t\t\t\t\tvar vec2: Vector2 = module[k];\r\n\t\t\t\t\t\tvar vec2Data: number[] = vector2s[k];\r\n\t\t\t\t\t\tvec2.setValue(vec2Data[0], vec2Data[1]);\r\n\t\t\t\t\t\tmodule[k] = vec2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"vector3s\":\r\n\t\t\t\t\tvar vector3s: object = moduleData.vector3s;\r\n\t\t\t\t\tfor (var k in vector3s) {\r\n\t\t\t\t\t\tvar vec3: Vector3 = module[k];\r\n\t\t\t\t\t\tvar vec3Data: number[] = vector3s[k];\r\n\t\t\t\t\t\tvec3.setValue(vec3Data[0], vec3Data[1], vec3Data[2]);\r\n\t\t\t\t\t\tmodule[k] = vec3;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"vector4s\":\r\n\t\t\t\t\tvar vector4s: object = moduleData.vector4s;\r\n\t\t\t\t\tfor (var k in vector4s) {\r\n\t\t\t\t\t\tvar vec4: Vector4 = module[k];\r\n\t\t\t\t\t\tvar vec4Data: number[] = vector4s[k];\r\n\t\t\t\t\t\tvec4.setValue(vec4Data[0], vec4Data[1], vec4Data[2], vec4Data[3]);\r\n\t\t\t\t\t\tmodule[k] = vec4;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"gradientDataNumbers\":\r\n\t\t\t\t\tvar gradientDataNumbers: object = moduleData.gradientDataNumbers;\r\n\t\t\t\t\tfor (var k in gradientDataNumbers) {\r\n\t\t\t\t\t\tvar gradientNumber: GradientDataNumber = module[k];\r\n\t\t\t\t\t\tvar gradientNumberData: any[] = moduleData[k];\r\n\t\t\t\t\t\tfor (var i: number = 0, n: number = gradientNumberData.length; i < n; i++) {\r\n\t\t\t\t\t\t\tvar valueData: any = gradientNumberData[i];\r\n\t\t\t\t\t\t\tgradientNumber.add(valueData.key, valueData.value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmodule[k] = gradientNumber;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t// case \"gradientDataInts\":\r\n\t\t\t\t// \tvar gradientDataInts: object = moduleData.gradientDataInts;\r\n\t\t\t\t// \tfor (var k in gradientDataInts) {\r\n\t\t\t\t// \t\tvar gradientInt: GradientDataInt = module[k];\r\n\t\t\t\t// \t\tvar gradientIntData: any[] = moduleData[k];\r\n\t\t\t\t// \t\tfor (var i: number = 0, n: number = gradientIntData.length; i < n; i++) {\r\n\t\t\t\t// \t\t\tvar valueData: any = gradientIntData[i];\r\n\t\t\t\t// \t\t\tgradientInt.add(valueData.key, valueData.value);\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t\tmodule[k] = gradientInt;\r\n\t\t\t\t// \t}\r\n\t\t\t\t// \tbreak;\r\n\t\t\t\t// case \"gradients\":\r\n\t\t\t\t// \tvar gradients: object = moduleData.gradients;\r\n\t\t\t\t// \tfor (var k in gradients) {\r\n\t\t\t\t// \t\tvar gradient: Gradient = module[k];\r\n\t\t\t\t// \t\tvar gradientData: any = moduleData[k];\r\n\t\t\t\t// \t\tvar alphasData: any[] = gradientData.alphas;\r\n\t\t\t\t// \t\tfor (var i: number = 0, n: number = alphasData.length; i < n; i++) {\r\n\t\t\t\t// \t\t\tvar alphaData: any = alphasData[i];\r\n\t\t\t\t// \t\t\tif ((i === 3) && ((alphaData.key !== 1))) {\r\n\t\t\t\t// \t\t\t\talphaData.key = 1;\r\n\t\t\t\t// \t\t\t\tconsole.warn(\"GradientDataColor warning:the forth key is  be force set to 1.\");\r\n\t\t\t\t// \t\t\t}\r\n\t\t\t\t// \t\t\tgradient.addColorAlpha(alphaData.key, alphaData.value);\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t\tvar rgbsData: any[] = gradientData.rgbs;\r\n\t\t\t\t// \t\tfor (var i: number = 0, n: number = rgbsData.length; i < n; i++) {\r\n\t\t\t\t// \t\t\tvar rgbData: any = rgbsData[i];\r\n\t\t\t\t// \t\t\tvar rgbValue: any[] = rgbData.value;\r\n\t\t\t\t// \t\t\tif ((i === 3) && ((rgbData.key !== 1))) {\r\n\t\t\t\t// \t\t\t\trgbData.key = 1;\r\n\t\t\t\t// \t\t\t\tconsole.warn(\"GradientDataColor warning:the forth key is  be force set to 1.\");\r\n\t\t\t\t// \t\t\t}\r\n\t\t\t\t// \t\t\tgradient.addColorRGB(rgbData.key, new Color(rgbValue[0], rgbValue[1], rgbValue[2], 1.0));\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t\tmodule[k] = gradient;\r\n\t\t\t\t// \t}\r\n\t\t\t\t// \tbreak;\r\n\t\t\t\tcase \"resources\":\r\n\t\t\t\t\tvar resources: any = moduleData.resources;\r\n\t\t\t\t\tfor (var k in resources)\r\n\t\t\t\t\t\tmodule[k] = Loader.getRes(resources[k]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"bursts\":\r\n\t\t\t\t\tvar burstsData: any[] = moduleData.bursts;\r\n\t\t\t\t\tfor (var i: number = 0, n: number = burstsData.length; i < n; i++) {\r\n\t\t\t\t\t\tvar brust: any = burstsData[i];\r\n\t\t\t\t\t\tmodule.addBurst(new Burst(brust.time, brust.min, brust.max));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"randomSeed\":\r\n\t\t\t\t\tmodule.randomSeed[0] = moduleData.randomSeed;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"shapeType\"://TODO:remove in the fulther\r\n\t\t\t\tcase \"type\":\r\n\t\t\t\tcase \"color\":\r\n\t\t\t\tcase \"size\":\r\n\t\t\t\tcase \"frame\":\r\n\t\t\t\tcase \"startFrame\":\r\n\t\t\t\tcase \"angularVelocity\":\r\n\t\t\t\tcase \"velocity\":\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"ShurikenParticle3D:unknown type.\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tif (data.main) {\r\n\t\t\tvar particleSystem: ShurikenParticleSystem = this.particleSystem;\r\n\t\t\tvar particleRender: ShurikenParticleRenderer = this.particleRenderer;\r\n\t\t\tthis._parseModule(particleRender, data.renderer);//Renderer\r\n\t\t\tthis._parseModule(particleSystem, data.main);//particleSystem\r\n\t\t\tthis._parseModule(particleSystem.emission, data.emission);//Emission\r\n\r\n\t\t\t//Shape\r\n\t\t\tvar shapeData: any = data.shape;\r\n\t\t\tif (shapeData) {\r\n\t\t\t\tvar shape: BaseShape;\r\n\t\t\t\tswitch (shapeData.shapeType) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tshape = new SphereShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tshape = new HemisphereShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tshape = new ConeShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tshape = new BoxShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\tshape = new CircleShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"ShuriKenParticle3D:unknown shape type.\";\r\n\t\t\t\t}\r\n\t\t\t\tthis._parseModule(shape, shapeData);\r\n\t\t\t\tparticleSystem.shape = shape;\r\n\t\t\t}\r\n\r\n\t\t\t//VelocityOverLifetime\r\n\t\t\tvar velocityOverLifetimeData: any = data.velocityOverLifetime;\r\n\t\t\tif (velocityOverLifetimeData) {\r\n\t\t\t\tvar velocityData: any = velocityOverLifetimeData.velocity;\r\n\t\t\t\tvar velocity: GradientVelocity;\r\n\t\t\t\tswitch (velocityData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tvar constantData: any[] = velocityData.constant;\r\n\t\t\t\t\t\tvelocity = GradientVelocity.createByConstant(constantData ? new Vector3(constantData[0], constantData[1], constantData[2]) : new Vector3(0, 0, 0));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tvelocity = GradientVelocity.createByGradient(this._initParticleVelocity(velocityData.gradientX), this._initParticleVelocity(velocityData.gradientY), this._initParticleVelocity(velocityData.gradientZ));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tvar constantMinData: any[] = velocityData.constantMin;\r\n\t\t\t\t\t\tvar constantMaxData: any[] = velocityData.constantMax;\r\n\t\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoConstant(constantMinData ? new Vector3(constantMinData[0], constantMinData[1], constantMinData[2]) : new Vector3(0, 0, 0), constantMaxData ? new Vector3(constantMaxData[0], constantMaxData[1], constantMaxData[2]) : new Vector3(0, 0, 0));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoGradient(this._initParticleVelocity(velocityData.gradientXMin), this._initParticleVelocity(velocityData.gradientXMax), this._initParticleVelocity(velocityData.gradientYMin), this._initParticleVelocity(velocityData.gradientYMax), this._initParticleVelocity(velocityData.gradientZMin), this._initParticleVelocity(velocityData.gradientZMax));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar velocityOverLifetime: VelocityOverLifetime = new VelocityOverLifetime(velocity);\r\n\t\t\t\tthis._parseModule(velocityOverLifetime, velocityOverLifetimeData);\r\n\t\t\t\tparticleSystem.velocityOverLifetime = velocityOverLifetime;\r\n\t\t\t}\r\n\r\n\t\t\t//ColorOverLifetime\r\n\t\t\tvar colorOverLifetimeData: any = data.colorOverLifetime;\r\n\t\t\tif (colorOverLifetimeData) {\r\n\t\t\t\tvar colorData: any = colorOverLifetimeData.color;\r\n\t\t\t\tvar color: GradientColor;\r\n\t\t\t\tswitch (colorData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tvar constColorData: any[] = colorData.constant;\r\n\t\t\t\t\t\tcolor = GradientColor.createByConstant(constColorData ? new Vector4(constColorData[0], constColorData[1], constColorData[2], constColorData[3]) : new Vector4(0, 0, 0, 0));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tcolor = GradientColor.createByGradient(this._initParticleColor(colorData.gradient));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tvar minConstColorData: any[] = colorData.constantMin;\r\n\t\t\t\t\t\tvar maxConstColorData: any[] = colorData.constantMax;\r\n\t\t\t\t\t\tcolor = GradientColor.createByRandomTwoConstant(minConstColorData ? new Vector4(minConstColorData[0], minConstColorData[1], minConstColorData[2], minConstColorData[3]) : new Vector4(0, 0, 0, 0), minConstColorData ? new Vector4(maxConstColorData[0], maxConstColorData[1], maxConstColorData[2], maxConstColorData[3]) : new Vector4(0, 0, 0, 0));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tcolor = GradientColor.createByRandomTwoGradient(this._initParticleColor(colorData.gradientMin), this._initParticleColor(colorData.gradientMax));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar colorOverLifetime: ColorOverLifetime = new ColorOverLifetime(color);\r\n\t\t\t\tthis._parseModule(colorOverLifetime, colorOverLifetimeData);\r\n\t\t\t\tparticleSystem.colorOverLifetime = colorOverLifetime;\r\n\t\t\t}\r\n\r\n\t\t\t//SizeOverLifetime\r\n\t\t\tvar sizeOverLifetimeData: any = data.sizeOverLifetime;\r\n\t\t\tif (sizeOverLifetimeData) {\r\n\t\t\t\tvar sizeData: any = sizeOverLifetimeData.size;\r\n\t\t\t\tvar size: GradientSize;\r\n\t\t\t\tswitch (sizeData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByGradientSeparate(this._initParticleSize(sizeData.gradientX), this._initParticleSize(sizeData.gradientY), this._initParticleSize(sizeData.gradientZ));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByGradient(this._initParticleSize(sizeData.gradient));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\t\tvar constantMinSeparateData: any[] = sizeData.constantMinSeparate;\r\n\t\t\t\t\t\t\tvar constantMaxSeparateData: any[] = sizeData.constantMaxSeparate;\r\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstantSeparate(constantMinSeparateData ? new Vector3(constantMinSeparateData[0], constantMinSeparateData[1], constantMinSeparateData[2]) : new Vector3(0, 0, 0), constantMaxSeparateData ? new Vector3(constantMaxSeparateData[0], constantMaxSeparateData[1], constantMaxSeparateData[2]) : new Vector3(0, 0, 0));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstant(sizeData.constantMin || 0, sizeData.constantMax || 0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradientSeparate(this._initParticleSize(sizeData.gradientXMin), this._initParticleSize(sizeData.gradientYMin), this._initParticleSize(sizeData.gradientZMin), this._initParticleSize(sizeData.gradientXMax), this._initParticleSize(sizeData.gradientYMax), this._initParticleSize(sizeData.gradientZMax));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradient(this._initParticleSize(sizeData.gradientMin), this._initParticleSize(sizeData.gradientMax));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar sizeOverLifetime: SizeOverLifetime = new SizeOverLifetime(size);\r\n\t\t\t\tthis._parseModule(sizeOverLifetime, sizeOverLifetimeData);\r\n\t\t\t\tparticleSystem.sizeOverLifetime = sizeOverLifetime;\r\n\t\t\t}\r\n\r\n\t\t\t//RotationOverLifetime\r\n\t\t\tvar rotationOverLifetimeData: any = data.rotationOverLifetime;\r\n\t\t\tif (rotationOverLifetimeData) {\r\n\t\t\t\tvar angularVelocityData: any = rotationOverLifetimeData.angularVelocity;\r\n\t\t\t\tvar angularVelocity: GradientAngularVelocity;\r\n\t\t\t\tswitch (angularVelocityData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t\tvar conSep: any[] = angularVelocityData.constantSeparate;\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstantSeparate(conSep ? new Vector3(conSep[0], conSep[1], conSep[2]) : new Vector3(0, 0, Math.PI / 4));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstant(angularVelocityData.constant || Math.PI / 4);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradientSeparate(this._initParticleRotation(angularVelocityData.gradientX), this._initParticleRotation(angularVelocityData.gradientY), this._initParticleRotation(angularVelocityData.gradientZ));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradient(this._initParticleRotation(angularVelocityData.gradient));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t\tvar minSep: any[] = angularVelocityData.constantMinSeparate;//TODO:Y是否要取负数\r\n\t\t\t\t\t\t\tvar maxSep: any[] = angularVelocityData.constantMaxSeparate;//TODO:Y是否要取负数\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstantSeparate(minSep ? new Vector3(minSep[0], minSep[1], minSep[2]) : new Vector3(0, 0, 0), maxSep ? new Vector3(maxSep[0], maxSep[1], maxSep[2]) : new Vector3(0, 0, Math.PI / 4));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstant(angularVelocityData.constantMin || 0, angularVelocityData.constantMax || Math.PI / 4);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t\t//TODO:待补充\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoGradient(this._initParticleRotation(angularVelocityData.gradientMin), this._initParticleRotation(angularVelocityData.gradientMax));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar rotationOverLifetime: RotationOverLifetime = new RotationOverLifetime(angularVelocity);\r\n\t\t\t\tthis._parseModule(rotationOverLifetime, rotationOverLifetimeData);\r\n\t\t\t\tparticleSystem.rotationOverLifetime = rotationOverLifetime;\r\n\t\t\t}\r\n\r\n\t\t\t//TextureSheetAnimation\r\n\t\t\tvar textureSheetAnimationData: any = data.textureSheetAnimation;\r\n\t\t\tif (textureSheetAnimationData) {\r\n\t\t\t\tvar frameData: any = textureSheetAnimationData.frame;\r\n\t\t\t\tvar frameOverTime: FrameOverTime;\r\n\t\t\t\tswitch (frameData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByConstant(frameData.constant);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByOverTime(this._initParticleFrame(frameData.overTime));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoConstant(frameData.constantMin, frameData.constantMax);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoOverTime(this._initParticleFrame(frameData.overTimeMin), this._initParticleFrame(frameData.overTimeMax));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar startFrameData: any = textureSheetAnimationData.startFrame;\r\n\t\t\t\tvar startFrame: StartFrame;\r\n\t\t\t\tswitch (startFrameData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tstartFrame = StartFrame.createByConstant(startFrameData.constant);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tstartFrame = StartFrame.createByRandomTwoConstant(startFrameData.constantMin, startFrameData.constantMax);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar textureSheetAnimation: TextureSheetAnimation = new TextureSheetAnimation(frameOverTime, startFrame);\r\n\t\t\t\tthis._parseModule(textureSheetAnimation, textureSheetAnimationData);\r\n\t\t\t\tparticleSystem.textureSheetAnimation = textureSheetAnimation;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {//legacy\r\n\t\t\tthis._parseOld(data);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_activeHierarchy(activeChangeComponents: any[]): void {\r\n\t\tsuper._activeHierarchy(activeChangeComponents);\r\n\t\t(this.particleSystem.playOnAwake) && (this.particleSystem.play());\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_inActiveHierarchy(activeChangeComponents: any[]): void {\r\n\t\tsuper._inActiveHierarchy(activeChangeComponents);\r\n\t\t(this.particleSystem.isAlive) && (this.particleSystem.simulate(0, true));\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_cloneTo(destObject: any, srcSprite: Node, dstSprite: Node): void {\r\n\t\tvar destShuriKenParticle3D: ShuriKenParticle3D = (<ShuriKenParticle3D>destObject);\r\n\t\tvar destParticleSystem: ShurikenParticleSystem = destShuriKenParticle3D._particleSystem;\r\n\t\tthis._particleSystem.cloneTo(destParticleSystem);\r\n\t\tvar destParticleRender: ShurikenParticleRenderer = (<ShurikenParticleRenderer>destShuriKenParticle3D._render);\r\n\t\tvar particleRender: ShurikenParticleRenderer = (<ShurikenParticleRenderer>this._render);\r\n\t\tdestParticleRender.sharedMaterials = particleRender.sharedMaterials;\r\n\t\tdestParticleRender.enable = particleRender.enable;\r\n\t\tdestParticleRender.renderMode = particleRender.renderMode;\r\n\t\tdestParticleRender.mesh = particleRender.mesh;\r\n\t\tdestParticleRender.stretchedBillboardCameraSpeedScale = particleRender.stretchedBillboardCameraSpeedScale;\r\n\t\tdestParticleRender.stretchedBillboardSpeedScale = particleRender.stretchedBillboardSpeedScale;\r\n\t\tdestParticleRender.stretchedBillboardLengthScale = particleRender.stretchedBillboardLengthScale;\r\n\t\tdestParticleRender.sortingFudge = particleRender.sortingFudge;\r\n\t\tsuper._cloneTo(destObject, srcSprite, dstSprite);//父类函数在最后,组件应该最后赋值，否则获取材质默认值等相关函数会有问题\r\n\t}\r\n\r\n\t/**\r\n\t * <p>销毁此对象。</p>\r\n\t * @param\tdestroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。\r\n\t * @override\r\n\t */\r\n\tdestroy(destroyChild: boolean = true): void {\r\n\t\tif (this.destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy(destroyChild);\r\n\t\tthis._particleSystem.destroy();\r\n\t\tthis._particleSystem = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new ShuriKenParticle3D();\r\n\t}\r\n\r\n\t//--------------------------------------------------------------------Deprecated Code------------------------------------------------------------------------\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _parseOld(data: any): void {\r\n\t\tconst anglelToRad: number = Math.PI / 180.0;\r\n\t\tvar i: number, n: number;\r\n\r\n\t\t//Render\r\n\t\tvar particleRender: ShurikenParticleRenderer = this.particleRenderer;\r\n\t\tvar material: ShurikenParticleMaterial;\r\n\r\n\t\tvar materialData: any = data.material;\r\n\t\t(materialData) && (material = Loader.getRes(materialData.path));\r\n\r\n\t\tparticleRender.sharedMaterial = material;\r\n\t\tvar meshPath: string = data.meshPath;\r\n\t\t(meshPath) && (particleRender.mesh = Loader.getRes(meshPath));\r\n\r\n\t\tparticleRender.renderMode = data.renderMode;\r\n\t\tparticleRender.stretchedBillboardCameraSpeedScale = data.stretchedBillboardCameraSpeedScale;\r\n\t\tparticleRender.stretchedBillboardSpeedScale = data.stretchedBillboardSpeedScale;\r\n\t\tparticleRender.stretchedBillboardLengthScale = data.stretchedBillboardLengthScale;\r\n\t\tparticleRender.sortingFudge = data.sortingFudge ? data.sortingFudge : 0.0;\r\n\r\n\t\t//particleSystem\r\n\t\tvar particleSystem: ShurikenParticleSystem = this.particleSystem;\r\n\t\tparticleSystem.isPerformanceMode = data.isPerformanceMode;\r\n\r\n\t\tparticleSystem.duration = data.duration;\r\n\t\tparticleSystem.looping = data.looping;\r\n\t\tparticleSystem.prewarm = data.prewarm;\r\n\r\n\t\tparticleSystem.startDelayType = data.startDelayType;\r\n\t\tparticleSystem.startDelay = data.startDelay;\r\n\t\tparticleSystem.startDelayMin = data.startDelayMin;\r\n\t\tparticleSystem.startDelayMax = data.startDelayMax;\r\n\r\n\t\tparticleSystem.startLifetimeType = data.startLifetimeType;\r\n\t\tparticleSystem.startLifetimeConstant = data.startLifetimeConstant;\r\n\t\tparticleSystem.startLifeTimeGradient = ShuriKenParticle3D._initStartLife(data.startLifetimeGradient);\r\n\t\tparticleSystem.startLifetimeConstantMin = data.startLifetimeConstantMin;\r\n\t\tparticleSystem.startLifetimeConstantMax = data.startLifetimeConstantMax;\r\n\t\tparticleSystem.startLifeTimeGradientMin = ShuriKenParticle3D._initStartLife(data.startLifetimeGradientMin);\r\n\t\tparticleSystem.startLifeTimeGradientMax = ShuriKenParticle3D._initStartLife(data.startLifetimeGradientMax);\r\n\r\n\t\tparticleSystem.startSpeedType = data.startSpeedType;\r\n\t\tparticleSystem.startSpeedConstant = data.startSpeedConstant;\r\n\t\tparticleSystem.startSpeedConstantMin = data.startSpeedConstantMin;\r\n\t\tparticleSystem.startSpeedConstantMax = data.startSpeedConstantMax;\r\n\r\n\t\tparticleSystem.threeDStartSize = data.threeDStartSize;\r\n\t\tparticleSystem.startSizeType = data.startSizeType;\r\n\t\tparticleSystem.startSizeConstant = data.startSizeConstant;\r\n\t\tvar startSizeConstantSeparateArray: any[] = data.startSizeConstantSeparate;\r\n\t\tvar startSizeConstantSeparateElement: Vector3 = particleSystem.startSizeConstantSeparate;\r\n\t\tstartSizeConstantSeparateElement.x = startSizeConstantSeparateArray[0];\r\n\t\tstartSizeConstantSeparateElement.y = startSizeConstantSeparateArray[1];\r\n\t\tstartSizeConstantSeparateElement.z = startSizeConstantSeparateArray[2];\r\n\t\tparticleSystem.startSizeConstantMin = data.startSizeConstantMin;\r\n\t\tparticleSystem.startSizeConstantMax = data.startSizeConstantMax;\r\n\t\tvar startSizeConstantMinSeparateArray: any[] = data.startSizeConstantMinSeparate;\r\n\t\tvar startSizeConstantMinSeparateElement: Vector3 = particleSystem.startSizeConstantMinSeparate;\r\n\t\tstartSizeConstantMinSeparateElement.x = startSizeConstantMinSeparateArray[0];\r\n\t\tstartSizeConstantMinSeparateElement.y = startSizeConstantMinSeparateArray[1];\r\n\t\tstartSizeConstantMinSeparateElement.z = startSizeConstantMinSeparateArray[2];\r\n\t\tvar startSizeConstantMaxSeparateArray: any[] = data.startSizeConstantMaxSeparate;\r\n\t\tvar startSizeConstantMaxSeparateElement: Vector3 = particleSystem.startSizeConstantMaxSeparate;\r\n\t\tstartSizeConstantMaxSeparateElement.x = startSizeConstantMaxSeparateArray[0];\r\n\t\tstartSizeConstantMaxSeparateElement.y = startSizeConstantMaxSeparateArray[1];\r\n\t\tstartSizeConstantMaxSeparateElement.z = startSizeConstantMaxSeparateArray[2];\r\n\r\n\t\tparticleSystem.threeDStartRotation = data.threeDStartRotation;\r\n\t\tparticleSystem.startRotationType = data.startRotationType;\r\n\t\tparticleSystem.startRotationConstant = data.startRotationConstant * anglelToRad;\r\n\t\tvar startRotationConstantSeparateArray: any[] = data.startRotationConstantSeparate;\r\n\t\tvar startRotationConstantSeparateElement: Vector3 = particleSystem.startRotationConstantSeparate;\r\n\t\tstartRotationConstantSeparateElement.x = startRotationConstantSeparateArray[0] * anglelToRad;\r\n\t\tstartRotationConstantSeparateElement.y = startRotationConstantSeparateArray[1] * anglelToRad;\r\n\t\tstartRotationConstantSeparateElement.z = startRotationConstantSeparateArray[2] * anglelToRad;\r\n\t\tparticleSystem.startRotationConstantMin = data.startRotationConstantMin * anglelToRad;\r\n\t\tparticleSystem.startRotationConstantMax = data.startRotationConstantMax * anglelToRad;\r\n\t\tvar startRotationConstantMinSeparateArray: any[] = data.startRotationConstantMinSeparate;\r\n\t\tvar startRotationConstantMinSeparateElement: Vector3 = particleSystem.startRotationConstantMinSeparate;\r\n\t\tstartRotationConstantMinSeparateElement.x = startRotationConstantMinSeparateArray[0] * anglelToRad;\r\n\t\tstartRotationConstantMinSeparateElement.y = startRotationConstantMinSeparateArray[1] * anglelToRad;\r\n\t\tstartRotationConstantMinSeparateElement.z = startRotationConstantMinSeparateArray[2] * anglelToRad;\r\n\t\tvar startRotationConstantMaxSeparateArray: any[] = data.startRotationConstantMaxSeparate;\r\n\t\tvar startRotationConstantMaxSeparateElement: Vector3 = particleSystem.startRotationConstantMaxSeparate;\r\n\t\tstartRotationConstantMaxSeparateElement.x = startRotationConstantMaxSeparateArray[0] * anglelToRad;\r\n\t\tstartRotationConstantMaxSeparateElement.y = startRotationConstantMaxSeparateArray[1] * anglelToRad;\r\n\t\tstartRotationConstantMaxSeparateElement.z = startRotationConstantMaxSeparateArray[2] * anglelToRad;\r\n\r\n\t\tparticleSystem.randomizeRotationDirection = data.randomizeRotationDirection;\r\n\r\n\t\tparticleSystem.startColorType = data.startColorType;\r\n\t\tvar startColorConstantArray: any[] = data.startColorConstant;\r\n\t\tvar startColorConstantElement: Vector4 = particleSystem.startColorConstant;\r\n\t\tstartColorConstantElement.x = startColorConstantArray[0];\r\n\t\tstartColorConstantElement.y = startColorConstantArray[1];\r\n\t\tstartColorConstantElement.z = startColorConstantArray[2];\r\n\t\tstartColorConstantElement.w = startColorConstantArray[3];\r\n\t\tvar startColorConstantMinArray: any[] = data.startColorConstantMin;\r\n\t\tvar startColorConstantMinElement: Vector4 = particleSystem.startColorConstantMin;\r\n\t\tstartColorConstantMinElement.x = startColorConstantMinArray[0];\r\n\t\tstartColorConstantMinElement.y = startColorConstantMinArray[1];\r\n\t\tstartColorConstantMinElement.z = startColorConstantMinArray[2];\r\n\t\tstartColorConstantMinElement.w = startColorConstantMinArray[3];\r\n\t\tvar startColorConstantMaxArray: any[] = data.startColorConstantMax;\r\n\t\tvar startColorConstantMaxElement: Vector4 = particleSystem.startColorConstantMax;\r\n\t\tstartColorConstantMaxElement.x = startColorConstantMaxArray[0];\r\n\t\tstartColorConstantMaxElement.y = startColorConstantMaxArray[1];\r\n\t\tstartColorConstantMaxElement.z = startColorConstantMaxArray[2];\r\n\t\tstartColorConstantMaxElement.w = startColorConstantMaxArray[3];\r\n\r\n\t\tparticleSystem.gravityModifier = data.gravityModifier;\r\n\r\n\t\tparticleSystem.simulationSpace = data.simulationSpace;\r\n\t\t(data.simulationSpeed !== undefined) && (particleSystem.simulationSpeed = data.simulationSpeed);\r\n\r\n\t\tparticleSystem.scaleMode = data.scaleMode;\r\n\r\n\t\tparticleSystem.playOnAwake = data.playOnAwake;\r\n\t\tparticleSystem.maxParticles = data.maxParticles;\r\n\r\n\t\tvar autoRandomSeed: any = data.autoRandomSeed;\r\n\t\t(autoRandomSeed != null) && (particleSystem.autoRandomSeed = autoRandomSeed);\r\n\t\tvar randomSeed: any = data.randomSeed;\r\n\t\t(randomSeed != null) && (particleSystem.randomSeed[0] = randomSeed);\r\n\r\n\t\t//Emission\r\n\t\tvar emissionData: any = data.emission;\r\n\t\tvar emission: Emission = particleSystem.emission;\r\n\t\tif (emissionData) {\r\n\t\t\temission.emissionRate = emissionData.emissionRate;\r\n\t\t\tvar burstsData: any[] = emissionData.bursts;\r\n\t\t\tif (burstsData)\r\n\t\t\t\tfor (i = 0, n = burstsData.length; i < n; i++) {\r\n\t\t\t\t\tvar brust: any = burstsData[i];\r\n\t\t\t\t\temission.addBurst(new Burst(brust.time, brust.min, brust.max));\r\n\t\t\t\t}\r\n\t\t\temission.enable = emissionData.enable;\r\n\t\t} else {\r\n\t\t\temission.enable = false;\r\n\t\t}\r\n\r\n\t\t//Shape\r\n\t\tvar shapeData: any = data.shape;\r\n\t\tif (shapeData) {\r\n\t\t\tvar shape: BaseShape;\r\n\t\t\tswitch (shapeData.shapeType) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tvar sphereShape: SphereShape;\r\n\t\t\t\t\tshape = sphereShape = new SphereShape();\r\n\t\t\t\t\tsphereShape.radius = shapeData.sphereRadius;\r\n\t\t\t\t\tsphereShape.emitFromShell = shapeData.sphereEmitFromShell;\r\n\t\t\t\t\tsphereShape.randomDirection = shapeData.sphereRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tvar hemiSphereShape: HemisphereShape;\r\n\t\t\t\t\tshape = hemiSphereShape = new HemisphereShape();\r\n\t\t\t\t\themiSphereShape.radius = shapeData.hemiSphereRadius;\r\n\t\t\t\t\themiSphereShape.emitFromShell = shapeData.hemiSphereEmitFromShell;\r\n\t\t\t\t\themiSphereShape.randomDirection = shapeData.hemiSphereRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tvar coneShape: ConeShape;\r\n\t\t\t\t\tshape = coneShape = new ConeShape();\r\n\t\t\t\t\tconeShape.angle = shapeData.coneAngle * anglelToRad;\r\n\t\t\t\t\tconeShape.radius = shapeData.coneRadius;\r\n\t\t\t\t\tconeShape.length = shapeData.coneLength;\r\n\t\t\t\t\tconeShape.emitType = shapeData.coneEmitType;\r\n\t\t\t\t\tconeShape.randomDirection = shapeData.coneRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tvar boxShape: BoxShape;\r\n\t\t\t\t\tshape = boxShape = new BoxShape();\r\n\t\t\t\t\tboxShape.x = shapeData.boxX;\r\n\t\t\t\t\tboxShape.y = shapeData.boxY;\r\n\t\t\t\t\tboxShape.z = shapeData.boxZ;\r\n\t\t\t\t\tboxShape.randomDirection = shapeData.boxRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 7:\r\n\t\t\t\t\tvar circleShape: CircleShape;\r\n\t\t\t\t\tshape = circleShape = new CircleShape();\r\n\t\t\t\t\tcircleShape.radius = shapeData.circleRadius;\r\n\t\t\t\t\tcircleShape.arc = shapeData.circleArc * anglelToRad;\r\n\t\t\t\t\tcircleShape.emitFromEdge = shapeData.circleEmitFromEdge;\r\n\t\t\t\t\tcircleShape.randomDirection = shapeData.circleRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t/**\r\n\t\t\t\t * ------------------------临时调整，待日后完善-------------------------------------\r\n\t\t\t\t */\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tvar tempShape: CircleShape;\r\n\t\t\t\t\tshape = tempShape = new CircleShape();\r\n\t\t\t\t\ttempShape.radius = shapeData.circleRadius;\r\n\t\t\t\t\ttempShape.arc = shapeData.circleArc * anglelToRad;\r\n\t\t\t\t\ttempShape.emitFromEdge = shapeData.circleEmitFromEdge;\r\n\t\t\t\t\ttempShape.randomDirection = shapeData.circleRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tshape.enable = shapeData.enable;\r\n\t\t\tparticleSystem.shape = shape;\r\n\t\t}\r\n\r\n\t\t//VelocityOverLifetime\r\n\t\tvar velocityOverLifetimeData: any = data.velocityOverLifetime;\r\n\t\tif (velocityOverLifetimeData) {\r\n\t\t\tvar velocityData: any = velocityOverLifetimeData.velocity;\r\n\t\t\tvar velocity: GradientVelocity;\r\n\t\t\tswitch (velocityData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tvar constantData: any[] = velocityData.constant;\r\n\t\t\t\t\tvelocity = GradientVelocity.createByConstant(new Vector3(constantData[0], constantData[1], constantData[2]));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tvelocity = GradientVelocity.createByGradient(this._initParticleVelocity(velocityData.gradientX), this._initParticleVelocity(velocityData.gradientY), this._initParticleVelocity(velocityData.gradientZ));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tvar constantMinData: any[] = velocityData.constantMin;\r\n\t\t\t\t\tvar constantMaxData: any[] = velocityData.constantMax;\r\n\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoConstant(new Vector3(constantMinData[0], constantMinData[1], constantMinData[2]), new Vector3(constantMaxData[0], constantMaxData[1], constantMaxData[2]));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoGradient(this._initParticleVelocity(velocityData.gradientXMin), this._initParticleVelocity(velocityData.gradientXMax), this._initParticleVelocity(velocityData.gradientYMin), this._initParticleVelocity(velocityData.gradientYMax), this._initParticleVelocity(velocityData.gradientZMin), this._initParticleVelocity(velocityData.gradientZMax));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar velocityOverLifetime: VelocityOverLifetime = new VelocityOverLifetime(velocity);\r\n\t\t\tvelocityOverLifetime.space = velocityOverLifetimeData.space;\r\n\t\t\tvelocityOverLifetime.enable = velocityOverLifetimeData.enable;\r\n\t\t\tparticleSystem.velocityOverLifetime = velocityOverLifetime;\r\n\t\t}\r\n\r\n\t\t//ColorOverLifetime\r\n\t\tvar colorOverLifetimeData: any = data.colorOverLifetime;\r\n\t\tif (colorOverLifetimeData) {\r\n\t\t\tvar colorData: any = colorOverLifetimeData.color;\r\n\t\t\tvar color: GradientColor;\r\n\t\t\tswitch (colorData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tvar constColorData: any[] = colorData.constant;\r\n\t\t\t\t\tcolor = GradientColor.createByConstant(new Vector4(constColorData[0], constColorData[1], constColorData[2], constColorData[3]));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tcolor = GradientColor.createByGradient(this._initParticleColor(colorData.gradient));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tvar minConstColorData: any[] = colorData.constantMin;\r\n\t\t\t\t\tvar maxConstColorData: any[] = colorData.constantMax;\r\n\t\t\t\t\tcolor = GradientColor.createByRandomTwoConstant(new Vector4(minConstColorData[0], minConstColorData[1], minConstColorData[2], minConstColorData[3]), new Vector4(maxConstColorData[0], maxConstColorData[1], maxConstColorData[2], maxConstColorData[3]));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tcolor = GradientColor.createByRandomTwoGradient(this._initParticleColor(colorData.gradientMin), this._initParticleColor(colorData.gradientMax));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar colorOverLifetime: ColorOverLifetime = new ColorOverLifetime(color);\r\n\t\t\tcolorOverLifetime.enable = colorOverLifetimeData.enable;\r\n\t\t\tparticleSystem.colorOverLifetime = colorOverLifetime;\r\n\t\t}\r\n\r\n\t\t//SizeOverLifetime\r\n\t\tvar sizeOverLifetimeData: any = data.sizeOverLifetime;\r\n\t\tif (sizeOverLifetimeData) {\r\n\t\t\tvar sizeData: any = sizeOverLifetimeData.size;\r\n\t\t\tvar size: GradientSize;\r\n\t\t\tswitch (sizeData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\tsize = GradientSize.createByGradientSeparate(this._initParticleSize(sizeData.gradientX), this._initParticleSize(sizeData.gradientY), this._initParticleSize(sizeData.gradientZ));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsize = GradientSize.createByGradient(this._initParticleSize(sizeData.gradient));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\tvar constantMinSeparateData: any[] = sizeData.constantMinSeparate;\r\n\t\t\t\t\t\tvar constantMaxSeparateData: any[] = sizeData.constantMaxSeparate;\r\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstantSeparate(new Vector3(constantMinSeparateData[0], constantMinSeparateData[1], constantMinSeparateData[2]), new Vector3(constantMaxSeparateData[0], constantMaxSeparateData[1], constantMaxSeparateData[2]));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstant(sizeData.constantMin, sizeData.constantMax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradientSeparate(this._initParticleSize(sizeData.gradientXMin), this._initParticleSize(sizeData.gradientYMin), this._initParticleSize(sizeData.gradientZMin), this._initParticleSize(sizeData.gradientXMax), this._initParticleSize(sizeData.gradientYMax), this._initParticleSize(sizeData.gradientZMax));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradient(this._initParticleSize(sizeData.gradientMin), this._initParticleSize(sizeData.gradientMax));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar sizeOverLifetime: SizeOverLifetime = new SizeOverLifetime(size);\r\n\t\t\tsizeOverLifetime.enable = sizeOverLifetimeData.enable;\r\n\t\t\tparticleSystem.sizeOverLifetime = sizeOverLifetime;\r\n\t\t}\r\n\r\n\t\t//RotationOverLifetime\r\n\t\tvar rotationOverLifetimeData: any = data.rotationOverLifetime;\r\n\t\tif (rotationOverLifetimeData) {\r\n\t\t\tvar angularVelocityData: any = rotationOverLifetimeData.angularVelocity;\r\n\t\t\tvar angularVelocity: GradientAngularVelocity;\r\n\t\t\tswitch (angularVelocityData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\tvar conSep: any[] = angularVelocityData.constantSeparate;\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstantSeparate(new Vector3(conSep[0] * anglelToRad, conSep[1] * anglelToRad, conSep[2] * anglelToRad));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstant(angularVelocityData.constant * anglelToRad);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradientSeparate(this._initParticleRotation(angularVelocityData.gradientX), this._initParticleRotation(angularVelocityData.gradientY), this._initParticleRotation(angularVelocityData.gradientZ));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradient(this._initParticleRotation(angularVelocityData.gradient));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\tvar minSep: any[] = angularVelocityData.constantMinSeparate;//TODO:Y是否要取负数\r\n\t\t\t\t\t\tvar maxSep: any[] = angularVelocityData.constantMaxSeparate;//TODO:Y是否要取负数\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstantSeparate(new Vector3(minSep[0] * anglelToRad, minSep[1] * anglelToRad, minSep[2] * anglelToRad), new Vector3(maxSep[0] * anglelToRad, maxSep[1] * anglelToRad, maxSep[2] * anglelToRad));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstant(angularVelocityData.constantMin * anglelToRad, angularVelocityData.constantMax * anglelToRad);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t//TODO:待补充\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoGradient(this._initParticleRotation(angularVelocityData.gradientMin), this._initParticleRotation(angularVelocityData.gradientMax));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar rotationOverLifetime: RotationOverLifetime = new RotationOverLifetime(angularVelocity);\r\n\t\t\trotationOverLifetime.enable = rotationOverLifetimeData.enable;\r\n\t\t\tparticleSystem.rotationOverLifetime = rotationOverLifetime;\r\n\t\t}\r\n\r\n\t\t//TextureSheetAnimation\r\n\t\tvar textureSheetAnimationData: any = data.textureSheetAnimation;\r\n\t\tif (textureSheetAnimationData) {\r\n\t\t\tvar frameData: any = textureSheetAnimationData.frame;\r\n\t\t\tvar frameOverTime: FrameOverTime;\r\n\t\t\tswitch (frameData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tframeOverTime = FrameOverTime.createByConstant(frameData.constant);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tframeOverTime = FrameOverTime.createByOverTime(this._initParticleFrame(frameData.overTime));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoConstant(frameData.constantMin, frameData.constantMax);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoOverTime(this._initParticleFrame(frameData.overTimeMin), this._initParticleFrame(frameData.overTimeMax));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar startFrameData: any = textureSheetAnimationData.startFrame;\r\n\t\t\tvar startFrame: StartFrame;\r\n\t\t\tswitch (startFrameData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tstartFrame = StartFrame.createByConstant(startFrameData.constant);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tstartFrame = StartFrame.createByRandomTwoConstant(startFrameData.constantMin, startFrameData.constantMax);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar textureSheetAnimation: TextureSheetAnimation = new TextureSheetAnimation(frameOverTime, startFrame);\r\n\t\t\ttextureSheetAnimation.enable = textureSheetAnimationData.enable;\r\n\t\t\tvar tilesData: any[] = textureSheetAnimationData.tiles;\r\n\t\t\ttextureSheetAnimation.tiles = new Vector2(tilesData[0], tilesData[1]);\r\n\t\t\ttextureSheetAnimation.type = textureSheetAnimationData.type;\r\n\t\t\ttextureSheetAnimation.randomRow = textureSheetAnimationData.randomRow;\r\n\t\t\tvar rowIndex: any = textureSheetAnimationData.rowIndex;\r\n\t\t\t(rowIndex !== undefined) && (textureSheetAnimation.rowIndex = rowIndex);\r\n\t\t\ttextureSheetAnimation.cycles = textureSheetAnimationData.cycles;\r\n\t\t\tparticleSystem.textureSheetAnimation = textureSheetAnimation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleColor(gradientColorData: any): Gradient {\r\n\t\tvar gradientColor: Gradient = new Gradient(4, 4);\r\n\t\tif (!gradientColorData) {\r\n\t\t\tgradientColor.addColorAlpha(0, 1);\r\n\t\t\tgradientColor.addColorAlpha(1, 1);\r\n\t\t\tgradientColor.addColorRGB(0, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\t\tgradientColor.addColorRGB(1, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar alphasData: any[] = gradientColorData.alphas;\r\n\t\t\tvar i: number, n: number;\r\n\t\t\tif (!alphasData) {//兼容默认值\r\n\t\t\t\tgradientColor.addColorAlpha(0, 1);\r\n\t\t\t\tgradientColor.addColorAlpha(1, 1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfor (i = 0, n = alphasData.length; i < n; i++) {\r\n\t\t\t\t\tif (i == 3 && n > 4) {\r\n\t\t\t\t\t\ti = n - 1;\r\n\t\t\t\t\t\tconsole.warn(\"GradientDataColor warning:alpha data length is large than 4, will ignore the middle data.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar alphaData: any = alphasData[i];\r\n\t\t\t\t\tgradientColor.addColorAlpha(alphaData.key, alphaData.value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar rgbsData: any[] = gradientColorData.rgbs;\r\n\t\t\tif (!rgbsData) {//兼容默认值\r\n\t\t\t\tgradientColor.addColorRGB(0, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\t\t\tgradientColor.addColorRGB(1, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfor (i = 0, n = rgbsData.length; i < n; i++) {\r\n\t\t\t\t\tif (i == 3 && n > 4) {\r\n\t\t\t\t\t\ti = n - 1;\r\n\t\t\t\t\t\tconsole.warn(\"GradientDataColor warning:rgb data length is large than 4, will ignore the middle data.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar rgbData: any = rgbsData[i];\r\n\t\t\t\t\tvar rgbValue: any[] = rgbData.value;\r\n\t\t\t\t\tgradientColor.addColorRGB(rgbData.key, new Color(rgbValue[0], rgbValue[1], rgbValue[2], 1.0));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleFrame(overTimeFramesData: any): GradientDataInt {\r\n\t\tvar overTimeFrame: GradientDataInt = new GradientDataInt();\r\n\t\tif (overTimeFramesData) {\r\n\t\t\tvar framesData: any[] = overTimeFramesData.frames;\r\n\t\t\tfor (var i: number = 0, n: number = framesData.length; i < n; i++) {\r\n\t\t\t\tvar frameData: any = framesData[i];\r\n\t\t\t\toverTimeFrame.add(frameData.key, frameData.value);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\toverTimeFrame.add(0, 0);\r\n\t\t\toverTimeFrame.add(1, 1);\r\n\t\t}\r\n\r\n\t\treturn overTimeFrame;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate static _initStartLife(gradientData: any): GradientDataNumber {\r\n\t\tvar gradient: GradientDataNumber = new GradientDataNumber();\r\n\t\tvar startLifetimesData: any[] = gradientData.startLifetimes;\r\n\t\tfor (var i: number = 0, n: number = startLifetimesData.length; i < n; i++) {\r\n\t\t\tvar valueData: any = startLifetimesData[i];\r\n\t\t\tgradient.add(valueData.key, valueData.value);\r\n\t\t}\r\n\t\treturn gradient\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleVelocity(gradientData: any): GradientDataNumber {\r\n\t\tvar gradient: GradientDataNumber = new GradientDataNumber();\r\n\t\tvar velocitysData: any[] = gradientData.velocitys;\r\n\t\tfor (var i: number = 0, n: number = velocitysData.length; i < n; i++) {\r\n\t\t\tvar valueData: any = velocitysData[i];\r\n\t\t\tgradient.add(valueData.key, valueData.value);\r\n\t\t}\r\n\t\treturn gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleSize(gradientSizeData: any): GradientDataNumber {\r\n\t\tvar gradientSize: GradientDataNumber = new GradientDataNumber();\r\n\t\tif (gradientSizeData) {\r\n\t\t\tvar sizesData: any[] = gradientSizeData.sizes;\r\n\t\t\tfor (var i: number = 0, n: number = sizesData.length; i < n; i++) {\r\n\t\t\t\tvar valueData: any = sizesData[i];\r\n\t\t\t\tgradientSize.add(valueData.key, valueData.value);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tgradientSize.add(0, 0);\r\n\t\t\tgradientSize.add(1, 1);\r\n\t\t}\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleRotation(gradientData: any): GradientDataNumber {\r\n\t\tvar gradient: GradientDataNumber = new GradientDataNumber();\r\n\t\tvar angularVelocitysData: any[] = gradientData.angularVelocitys;\r\n\t\tfor (var i: number = 0, n: number = angularVelocitysData.length; i < n; i++) {\r\n\t\t\tvar valueData: any = angularVelocitysData[i];\r\n\t\t\tgradient.add(valueData.key, valueData.value / 180.0 * Math.PI);\r\n\t\t}\r\n\t\treturn gradient;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ShaderDefine } from \"../shader/ShaderDefine\";\r\n\r\n\r\nexport class SkinnedMeshSprite3DShaderDeclaration {\r\n\t/**精灵级着色器宏定义,蒙皮动画。*/\r\n\tstatic SHADERDEFINE_BONE: ShaderDefine;\r\n\tstatic SHADERDEFINE_SIMPLEBONE:ShaderDefine;\r\n}","import { Event } from \"../../events/Event\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { AnimationNode } from \"../animation/AnimationNode\";\r\nimport { Animator } from \"../component/Animator\";\r\nimport { FrustumCulling } from \"../graphics/FrustumCulling\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Mesh, skinnedMatrixCache } from \"../resource/models/Mesh\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { Avatar } from \"./Avatar\";\r\nimport { Bounds } from \"./Bounds\";\r\nimport { MeshRenderer } from \"./MeshRenderer\";\r\nimport { RenderableSprite3D } from \"./RenderableSprite3D\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { Transform3D } from \"./Transform3D\";\r\nimport { RenderContext3D } from \"./render/RenderContext3D\";\r\nimport { RenderElement } from \"./render/RenderElement\";\r\nimport { SkinnedMeshSprite3DShaderDeclaration } from \"./SkinnedMeshSprite3DShaderDeclaration\";\r\nimport { Render } from \"../../renders/Render\";\r\nimport { ReflectionProbeMode, ReflectionProbe } from \"./reflectionProbe/ReflectionProbe\";\r\nimport { MeshSprite3DShaderDeclaration } from \"./MeshSprite3DShaderDeclaration\";\r\nimport { TextureCube } from \"../resource/TextureCube\";\r\n/**\r\n * <code>SkinMeshRenderer</code> 类用于蒙皮渲染器。\r\n */\r\nexport class SkinnedMeshRenderer extends MeshRenderer {\r\n\t/**@internal */\r\n\tprivate static _tempMatrix4x4: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/**@internal */\r\n\tprotected _cacheMesh: Mesh;\r\n\t/** @internal */\r\n\tprotected _bones: Sprite3D[] = [];\r\n\t/** @internal */\r\n\t_skinnedData: any[];\r\n\t/** @internal */\r\n\tprivate _skinnedDataLoopMarks: number[] = [];\r\n\t/**@internal */\r\n\tprotected _localBounds: Bounds = new Bounds(Vector3._ZERO, Vector3._ZERO);\r\n\t/**@internal */\r\n\tprotected _cacheAnimator: Animator;\r\n\t/**@internal */\r\n\tprotected _cacheRootBone: Sprite3D;\r\n\r\n\t/**\r\n\t * 局部边界。\r\n\t */\r\n\tget localBounds(): Bounds {\r\n\t\treturn this._localBounds;\r\n\t}\r\n\r\n\tset localBounds(value: Bounds) {\r\n\t\tthis._localBounds = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 根节点。\r\n\t */\r\n\tget rootBone(): Sprite3D {\r\n\t\treturn this._cacheRootBone;\r\n\t}\r\n\r\n\tset rootBone(value: Sprite3D) {\r\n\t\tif (this._cacheRootBone != value) {\r\n\t\t\tif (this._cacheRootBone)\r\n\t\t\t\tthis._cacheRootBone.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n\t\t\telse\r\n\t\t\t\tthis._owner.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n\r\n\t\t\tif (value)\r\n\t\t\t\tvalue.transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n\t\t\telse\r\n\t\t\t\tthis._owner.transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n\r\n\t\t\tthis._cacheRootBone = value;\r\n\t\t\tthis._onWorldMatNeedChange(Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDSCALE);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 用于蒙皮的骨骼。\r\n\t */\r\n\tget bones(): Sprite3D[] {\r\n\t\treturn this._bones;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SkinnedMeshRender</code> 实例。\r\n\t */\r\n\tconstructor(owner: RenderableSprite3D) {\r\n\t\tsuper(owner);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _computeSkinnedData(): void {\r\n\t\tif (this._cacheMesh && this._cacheAvatar/*兼容*/ || this._cacheMesh && !this._cacheAvatar) {\r\n\t\t\tvar bindPoses: Matrix4x4[] = this._cacheMesh._inverseBindPoses;\r\n\t\t\tvar pathMarks: skinnedMatrixCache[] = this._cacheMesh._skinnedMatrixCaches;\r\n\t\t\tfor (var i: number = 0, n: number = this._cacheMesh.subMeshCount; i < n; i++) {\r\n\t\t\t\tvar subMeshBoneIndices: Uint16Array[] = ((<SubMesh>this._cacheMesh.getSubMesh(i)))._boneIndicesList;\r\n\t\t\t\tvar subData: Float32Array[] = this._skinnedData[i];\r\n\t\t\t\tfor (var j: number = 0, m: number = subMeshBoneIndices.length; j < m; j++) {\r\n\t\t\t\t\tvar boneIndices: Uint16Array = subMeshBoneIndices[j];\r\n\t\t\t\t\tthis._computeSubSkinnedData(bindPoses, boneIndices, subData[j], pathMarks);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _computeSubSkinnedData(bindPoses: Matrix4x4[], boneIndices: Uint16Array, data: Float32Array, matrixCaches: skinnedMatrixCache[]): void {\r\n\t\tfor (var k: number = 0, q: number = boneIndices.length; k < q; k++) {\r\n\t\t\tvar index: number = boneIndices[k];\r\n\t\t\tif (this._skinnedDataLoopMarks[index] === Stat.loopCount) {\r\n\t\t\t\tvar c: skinnedMatrixCache = matrixCaches[index];\r\n\t\t\t\tvar preData: Float32Array = this._skinnedData[c.subMeshIndex][c.batchIndex];\r\n\t\t\t\tvar srcIndex: number = c.batchBoneIndex * 16;\r\n\t\t\t\tvar dstIndex: number = k * 16;\r\n\t\t\t\tfor (var d: number = 0; d < 16; d++)\r\n\t\t\t\t\tdata[dstIndex + d] = preData[srcIndex + d];\r\n\t\t\t} else {\r\n\t\t\t\tif (!this._cacheAvatar) {\r\n\t\t\t\t\tUtils3D._mulMatrixArray(this._bones[index].transform.worldMatrix.elements, bindPoses[index].elements,0, data, k * 16);\r\n\t\t\t\t} else {//[兼容代码]\r\n\t\t\t\t\tUtils3D._mulMatrixArray(this._cacheAnimationNode[index].transform.getWorldMatrix(), bindPoses[index].elements,0, data, k * 16);\r\n\t\t\t\t}\r\n\t\t\t\tthis._skinnedDataLoopMarks[index] = Stat.loopCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _onWorldMatNeedChange(flag: number): void {\r\n\t\tthis._boundsChange = true;\r\n\t\tif (this._octreeNode) {\r\n\t\t\tif (this._cacheAvatar) {//兼容性 \r\n\t\t\t\tif (this._indexInOctreeMotionList === -1)//_octreeNode表示在八叉树队列中\r\n\t\t\t\t\tthis._octreeNode._octree.addMotionObject(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tflag &= Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDSCALE;//过滤有用TRANSFORM标记\r\n\t\t\t\tif (flag) {\r\n\t\t\t\t\tif (this._indexInOctreeMotionList === -1)//_octreeNode表示在八叉树队列中\r\n\t\t\t\t\t\tthis._octreeNode._octree.addMotionObject(this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *@inheritDoc\r\n\t *@override\r\n\t *@internal\r\n\t */\r\n\t_createRenderElement(): RenderElement {\r\n\t\treturn new RenderElement();\r\n\t}\r\n\r\n\t/**\r\n\t*@inheritDoc\r\n\t*@override\r\n\t*@internal\r\n\t*/\r\n\t_onMeshChange(value: Mesh): void {\r\n\t\tsuper._onMeshChange(value);\r\n\t\tthis._cacheMesh = (<Mesh>value);\r\n\r\n\t\tvar subMeshCount: number = value.subMeshCount;\r\n\t\tthis._skinnedData = [];\r\n\t\tthis._skinnedDataLoopMarks.length = value._inverseBindPoses.length;\r\n\t\tfor (var i: number = 0; i < subMeshCount; i++) {\r\n\t\t\tvar subBoneIndices: Uint16Array[] = ((<SubMesh>value.getSubMesh(i)))._boneIndicesList;\r\n\t\t\tvar subCount: number = subBoneIndices.length;\r\n\t\t\tvar subData: Float32Array[] = this._skinnedData[i] = [];\r\n\t\t\tfor (var j: number = 0; j < subCount; j++)\r\n\t\t\t\tsubData[j] = new Float32Array(subBoneIndices[j].length * 16);\r\n\t\t}\r\n\r\n\t\t(this._cacheAvatar && value) && (this._getCacheAnimationNodes());//[兼容性]\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setCacheAnimator(animator: Animator): void {\r\n\t\tthis._cacheAnimator = animator;\r\n\t\tthis._shaderValues.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE);\r\n\t\tthis._setRootNode();//[兼容性API]\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _calculateBoundingBox(): void {//TODO:是否可直接在boundingSphere属性计算优化\r\n\t\tif (!this._cacheAvatar) {\r\n\t\t\tif (this._cacheRootBone)\r\n\t\t\t\tthis._localBounds._tranform(this._cacheRootBone.transform.worldMatrix, this._bounds);\r\n\t\t\telse\r\n\t\t\t\tthis._localBounds._tranform(this._owner.transform.worldMatrix, this._bounds);\r\n\r\n\t\t} else {//[兼容性API]\r\n\t\t\tif (this._cacheAnimator && this._rootBone) {\r\n\t\t\t\tvar worldMat: Matrix4x4 = SkinnedMeshRenderer._tempMatrix4x4;\r\n\t\t\t\tUtils3D.matrix4x4MultiplyMFM(((<Sprite3D>this._cacheAnimator.owner)).transform.worldMatrix, this._cacheRootAnimationNode.transform.getWorldMatrix(), worldMat);\r\n\t\t\t\tthis._localBounds._tranform(worldMat, this._bounds);\r\n\t\t\t} else {\r\n\t\t\t\tsuper._calculateBoundingBox();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (Render.supportWebGLPlusCulling) {//[NATIVE]\r\n\t\t\tvar min: Vector3 = this._bounds.getMin();\r\n\t\t\tvar max: Vector3 = this._bounds.getMax();\r\n\t\t\tvar buffer: Float32Array = FrustumCulling._cullingBuffer;\r\n\t\t\tbuffer[this._cullingBufferIndex + 1] = min.x;\r\n\t\t\tbuffer[this._cullingBufferIndex + 2] = min.y;\r\n\t\t\tbuffer[this._cullingBufferIndex + 3] = min.z;\r\n\t\t\tbuffer[this._cullingBufferIndex + 4] = max.x;\r\n\t\t\tbuffer[this._cullingBufferIndex + 5] = max.y;\r\n\t\t\tbuffer[this._cullingBufferIndex + 6] = max.z;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_renderUpdate(context: RenderContext3D, transform: Transform3D): void {\r\n\t\tif (this._cacheAnimator) {\r\n\t\t\tthis._computeSkinnedData();\r\n\t\t\tif (!this._cacheAvatar) {\r\n\t\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.WORLDMATRIX, Matrix4x4.DEFAULT);\r\n\t\t\t} else {//[兼容性]\r\n\t\t\t\tvar aniOwnerTrans: Transform3D = ((<Sprite3D>this._cacheAnimator.owner))._transform;\r\n\t\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.WORLDMATRIX, aniOwnerTrans.worldMatrix);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.WORLDMATRIX, transform.worldMatrix);\r\n\t\t}\r\n\t\t//更新反射探针\r\n\t\tif(!this._probReflection)\r\n\t\treturn;\r\n\t\tif(this._reflectionMode==ReflectionProbeMode.off){\r\n\t\t\tthis._shaderValues.removeDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\r\n\t\t\tthis._shaderValues.setVector(RenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS,ReflectionProbe.defaultTextureHDRDecodeValues);\r\n\t\t\tthis._shaderValues.setTexture(RenderableSprite3D.REFLECTIONTEXTURE,TextureCube.blackTexture);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(!this._probReflection.boxProjection){\r\n\t\t\t\tthis._shaderValues.removeDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis._shaderValues.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\r\n\t\t\t\tthis._shaderValues.setVector3(RenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION,this._probReflection.probePosition);\r\n\t\t\t\tthis._shaderValues.setVector3(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX,this._probReflection.boundsMax);\r\n\t\t\t\tthis._shaderValues.setVector3(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN,this._probReflection.boundsMin);\r\n\t\t\t}\r\n\t\t\tthis._shaderValues.setTexture(RenderableSprite3D.REFLECTIONTEXTURE,this._probReflection.reflectionTexture);\r\n\t\t\tthis._shaderValues.setVector(RenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS,this._probReflection.reflectionHDRParams);\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {\r\n\t\tvar projectionView: Matrix4x4 = context.projectionViewMatrix;\r\n\t\tif (this._cacheAnimator) {\r\n\t\t\tif (!this._cacheAvatar) {\r\n\t\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.MVPMATRIX, projectionView);\r\n\t\t\t}\r\n\t\t\telse {//[兼容性]\r\n\t\t\t\tvar aniOwnerTrans: Transform3D = ((<Sprite3D>this._cacheAnimator.owner))._transform;\r\n\t\t\t\tMatrix4x4.multiply(projectionView, aniOwnerTrans.worldMatrix, this._projectionViewWorldMatrix);\r\n\t\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.MVPMATRIX, this._projectionViewWorldMatrix);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tMatrix4x4.multiply(projectionView, transform.worldMatrix, this._projectionViewWorldMatrix);\r\n\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.MVPMATRIX, this._projectionViewWorldMatrix);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_destroy(): void {\r\n\t\tsuper._destroy();\r\n\t\tif (!this._cacheAvatar) {\r\n\t\t\tif (this._cacheRootBone)\r\n\t\t\t\t(!this._cacheRootBone.destroyed) && (this._cacheRootBone.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));\r\n\t\t\telse\r\n\t\t\t\t(this._owner && !this._owner.destroyed) && (this._owner.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));\r\n\t\t} else {//[兼容性]\r\n\t\t\tif (this._cacheRootAnimationNode)\r\n\t\t\t\tthis._cacheRootAnimationNode.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n\t\t}\r\n\t}\r\n\r\n\t//-----------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\t/**@internal */\r\n\t_rootBone: string;//[兼容性API]\r\n\t/**@internal */\r\n\tprivate _cacheAvatar: Avatar;//[兼容性API]\r\n\t/**@internal */\r\n\tprivate _cacheRootAnimationNode: AnimationNode;//[兼容性API]\r\n\t/** @internal */\r\n\tprivate _cacheAnimationNode: AnimationNode[] = [];//[兼容性]\r\n\r\n\t/**\r\n\t * @override\r\n\t * 包围盒。\r\n\t */\r\n\tget bounds(): Bounds {\r\n\t\tif (this._boundsChange || this._cacheAvatar) {//有this._cacheAvatar模式会导致裁剪后动画不更新。动画不更新包围不更新。包围盒不更新就永远裁掉了\r\n\t\t\tthis._calculateBoundingBox();\r\n\t\t\tthis._boundsChange = false;\r\n\t\t}\r\n\t\treturn this._bounds;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setRootBone(name: string): void {//[兼容性API]\r\n\t\tthis._rootBone = name;\r\n\t\tthis._setRootNode();//[兼容性API]\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _setRootNode(): void {//[兼容性API]\r\n\t\tvar rootNode: AnimationNode;\r\n\t\tif (this._cacheAnimator && this._rootBone && this._cacheAvatar)\r\n\t\t\trootNode = this._cacheAnimator._avatarNodeMap[this._rootBone];\r\n\t\telse\r\n\t\t\trootNode = null;\r\n\r\n\t\tif (this._cacheRootAnimationNode != rootNode) {\r\n\t\t\tthis._onWorldMatNeedChange(Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDSCALE);\r\n\t\t\tthis._owner.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n\t\t\tif (this._cacheRootAnimationNode)\r\n\t\t\t\tthis._cacheRootAnimationNode.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n\t\t\t(rootNode) && (rootNode.transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));\r\n\t\t\tthis._cacheRootAnimationNode = rootNode;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getCacheAnimationNodes(): void {//[兼容性API]\r\n\t\tvar meshBoneNames: string[] = this._cacheMesh._boneNames;\r\n\t\tvar innerBindPoseCount: number = this._cacheMesh._inverseBindPoses.length;\r\n\r\n\t\tif (!Render.supportWebGLPlusAnimation) {\r\n\t\t\tthis._cacheAnimationNode.length = innerBindPoseCount;\r\n\t\t\tvar nodeMap: any = this._cacheAnimator._avatarNodeMap;\r\n\t\t\tfor (var i: number = 0; i < innerBindPoseCount; i++) {\r\n\t\t\t\tvar node: AnimationNode = nodeMap[meshBoneNames[i]];\r\n\t\t\t\tthis._cacheAnimationNode[i] = node;\r\n\t\t\t}\r\n\r\n\t\t} else {//[NATIVE]\r\n\t\t\tthis._cacheAnimationNodeIndices = new Uint16Array(innerBindPoseCount);\r\n\t\t\tvar nodeMapC: any = this._cacheAnimator._avatarNodeMap;\r\n\t\t\tfor (i = 0; i < innerBindPoseCount; i++) {\r\n\t\t\t\tvar nodeC: AnimationNode = nodeMapC[meshBoneNames[i]];\r\n\t\t\t\tthis._cacheAnimationNodeIndices[i] = nodeC ? nodeC._worldMatrixIndex : 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setCacheAvatar(value: Avatar): void {//[兼容性API]\r\n\t\tif (this._cacheAvatar !== value) {\r\n\t\t\tif (this._cacheMesh) {\r\n\t\t\t\tthis._cacheAvatar = value;\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tthis._shaderValues.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE);\r\n\t\t\t\t\tthis._getCacheAnimationNodes();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis._cacheAvatar = value;\r\n\t\t\t}\r\n\t\t\tthis._setRootNode();\r\n\t\t}\r\n\t}\r\n\r\n\t/**@internal [NATIVE]*/\r\n\tprivate _cacheAnimationNodeIndices: Uint16Array;\r\n\r\n\t/**\r\n\t * @internal [NATIVE]\r\n\t */\r\n\tprivate _computeSubSkinnedDataNative(worldMatrixs: Float32Array, cacheAnimationNodeIndices: Uint16Array, inverseBindPosesBuffer: ArrayBuffer, boneIndices: Uint16Array, data: Float32Array): void {\r\n\t\t(<any>LayaGL.instance).computeSubSkinnedData(worldMatrixs, cacheAnimationNodeIndices, inverseBindPosesBuffer, boneIndices, data);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _computeSkinnedDataForNative(): void {\r\n\t\tif (this._cacheMesh && this._cacheAvatar/*兼容*/ || this._cacheMesh && !this._cacheAvatar) {\r\n\t\t\tvar bindPoses: Matrix4x4[] = this._cacheMesh._inverseBindPoses;\r\n\t\t\tvar pathMarks: skinnedMatrixCache[] = this._cacheMesh._skinnedMatrixCaches;\r\n\t\t\tfor (var i: number = 0, n: number = this._cacheMesh.subMeshCount; i < n; i++) {\r\n\t\t\t\tvar subMeshBoneIndices: Uint16Array[] = ((<SubMesh>this._cacheMesh.getSubMesh(i)))._boneIndicesList;\r\n\t\t\t\tvar subData: Float32Array[] = this._skinnedData[i];\r\n\t\t\t\tfor (var j: number = 0, m: number = subMeshBoneIndices.length; j < m; j++) {\r\n\t\t\t\t\tvar boneIndices: Uint16Array = subMeshBoneIndices[j];\r\n\t\t\t\t\tif (this._cacheAvatar && Render.supportWebGLPlusAnimation)//[Native]\r\n\t\t\t\t\t\tthis._computeSubSkinnedDataNative(this._cacheAnimator._animationNodeWorldMatrixs, this._cacheAnimationNodeIndices, this._cacheMesh._inverseBindPosesBuffer, boneIndices, subData[j]);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tthis._computeSubSkinnedData(bindPoses, boneIndices, subData[j], pathMarks);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { Node } from \"../../display/Node\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Animator } from \"../component/Animator\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Vector4 } from \"../math/Vector4\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { Shader3D } from \"../shader/Shader3D\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { Avatar } from \"./Avatar\";\r\nimport { Bounds } from \"./Bounds\";\r\nimport { MeshFilter } from \"./MeshFilter\";\r\nimport { MeshSprite3D } from \"./MeshSprite3D\";\r\nimport { RenderableSprite3D } from \"./RenderableSprite3D\";\r\nimport { SkinnedMeshRenderer } from \"./SkinnedMeshRenderer\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { Material } from \"./material/Material\";\r\nimport { SkinnedMeshSprite3DShaderDeclaration } from \"./SkinnedMeshSprite3DShaderDeclaration\";\r\n\r\n\r\n\r\n/**\r\n * <code>SkinnedMeshSprite3D</code> 类用于绑点骨骼节点精灵。\r\n */\r\nexport class SkinnedMeshSprite3D extends RenderableSprite3D {\r\n\t/**@internal */\r\n\tstatic _tempArray0: any[] = [];\r\n\r\n\t/**着色器变量名，蒙皮动画。*/\r\n\tstatic BONES: number = Shader3D.propertyNameToID(\"u_Bones\");\r\n\t/**简单动画变量名，贴图蒙皮动画*/\r\n\tstatic SIMPLE_SIMPLEANIMATORTEXTURE:number = Shader3D.propertyNameToID(\"u_SimpleAnimatorTexture\");\r\n\tstatic SIMPLE_SIMPLEANIMATORPARAMS:number = Shader3D.propertyNameToID(\"u_SimpleAnimatorParams\");\r\n\tstatic SIMPLE_SIMPLEANIMATORTEXTURESIZE:number = Shader3D.propertyNameToID(\"u_SimpleAnimatorTextureSize\");\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tSkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE = Shader3D.getDefineByName(\"BONE\");\r\n\t\tSkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_SIMPLEBONE = Shader3D.getDefineByName(\"SIMPLEBONE\");\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _meshFilter: MeshFilter;\r\n\r\n\t/**\r\n\t * 网格过滤器。\r\n\t */\r\n\tget meshFilter(): MeshFilter {\r\n\t\treturn this._meshFilter;\r\n\t}\r\n\r\n\t/**\r\n\t * 网格渲染器。\r\n\t */\r\n\tget skinnedMeshRenderer(): SkinnedMeshRenderer {\r\n\t\treturn (<SkinnedMeshRenderer>this._render);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>MeshSprite3D</code> 实例。\r\n\t * @param mesh 网格,同时会加载网格所用默认材质。\r\n\t * @param name 名字。\r\n\t */\r\n\tconstructor(mesh: Mesh = null, name: string = null) {\r\n\t\tsuper(name);\r\n\t\tthis._meshFilter = new MeshFilter(this);\r\n\t\tthis._render = new SkinnedMeshRenderer(this);\r\n\t\t(mesh) && (this._meshFilter.sharedMesh = mesh);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tvar render: SkinnedMeshRenderer = this.skinnedMeshRenderer;\r\n\t\tvar lightmapIndex: any = data.lightmapIndex;\r\n\t\t(lightmapIndex != null) && (render.lightmapIndex = lightmapIndex);\r\n\t\tvar lightmapScaleOffsetArray: any[] = data.lightmapScaleOffset;\r\n\t\t(lightmapScaleOffsetArray) && (render.lightmapScaleOffset = new Vector4(lightmapScaleOffsetArray[0], lightmapScaleOffsetArray[1], lightmapScaleOffsetArray[2], lightmapScaleOffsetArray[3]));\r\n\t\t(data.enableRender != undefined) && (render.enable = data.enableRender);\r\n\t\t(data.receiveShadows != undefined) && (render.receiveShadow = data.receiveShadows);\r\n\t\t(data.castShadow != undefined) && (render.castShadow = data.castShadow);\r\n\t\tvar meshPath: string;\r\n\t\tmeshPath = data.meshPath;\r\n\t\tif (meshPath) {\r\n\t\t\tvar mesh: Mesh = Loader.getRes(meshPath);//加载失败mesh为空\r\n\t\t\t(mesh) && (this.meshFilter.sharedMesh = mesh);\r\n\t\t}\r\n\r\n\t\tvar materials: any[] = data.materials;\r\n\t\tif (materials) {\r\n\t\t\tvar sharedMaterials: Material[] = render.sharedMaterials;\r\n\t\t\tvar materialCount: number = materials.length;\r\n\t\t\tsharedMaterials.length = materialCount;\r\n\t\t\tfor (var i: number = 0; i < materialCount; i++) {\r\n\t\t\t\tsharedMaterials[i] = Loader.getRes(materials[i].path);\r\n\t\t\t}\r\n\t\t\trender.sharedMaterials = sharedMaterials;\r\n\t\t}\r\n\r\n\t\tvar boundBox: any = data.boundBox;\r\n\t\tvar min: any[] = boundBox.min;\r\n\t\tvar max: any[] = boundBox.max;\r\n\t\trender.localBounds.setMin(new Vector3(min[0], min[1], min[2]));\r\n\t\trender.localBounds.setMax(new Vector3(max[0], max[1], max[2]));\r\n\r\n\t\tif (spriteMap) {\r\n\t\t\tvar rootBoneData: number = data.rootBone;\r\n\t\t\trender.rootBone = spriteMap[rootBoneData];\r\n\t\t\tvar bonesData: any[] = data.bones;\r\n\t\t\tvar n: number;\r\n\t\t\tfor (i = 0, n = bonesData.length; i < n; i++)\r\n\t\t\t\trender.bones.push(spriteMap[bonesData[i]]);\r\n\t\t} else {//[兼容代码]\r\n\t\t\t(data.rootBone) && (render._setRootBone(data.rootBone));//[兼容性]\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _changeHierarchyAnimator(animator: Animator): void {\r\n\t\tsuper._changeHierarchyAnimator(animator);\r\n\t\tthis.skinnedMeshRenderer._setCacheAnimator(animator);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _changeAnimatorAvatar(avatar: Avatar): void {\r\n\t\tthis.skinnedMeshRenderer._setCacheAvatar(avatar);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(destObject: any, srcRoot: Node, dstRoot: Node): void {\r\n\t\tvar meshSprite3D: MeshSprite3D = (<MeshSprite3D>destObject);\r\n\t\tmeshSprite3D.meshFilter.sharedMesh = this.meshFilter.sharedMesh;\r\n\t\tvar meshRender: SkinnedMeshRenderer = (<SkinnedMeshRenderer>this._render);\r\n\t\tvar destMeshRender: SkinnedMeshRenderer = (<SkinnedMeshRenderer>meshSprite3D._render);\r\n\t\tdestMeshRender.enable = meshRender.enable;\r\n\t\tdestMeshRender.sharedMaterials = meshRender.sharedMaterials;\r\n\t\tdestMeshRender.castShadow = meshRender.castShadow;\r\n\t\tvar lightmapScaleOffset: Vector4 = meshRender.lightmapScaleOffset;\r\n\t\tlightmapScaleOffset && (destMeshRender.lightmapScaleOffset = lightmapScaleOffset.clone());\r\n\t\tdestMeshRender.receiveShadow = meshRender.receiveShadow;\r\n\t\tdestMeshRender.sortingFudge = meshRender.sortingFudge;\r\n\t\tdestMeshRender._rootBone = meshRender._rootBone;\r\n\r\n\t\tvar bones: Sprite3D[] = meshRender.bones;\r\n\t\tvar destBones: Sprite3D[] = destMeshRender.bones;\r\n\t\tvar bonesCount: number = bones.length;\r\n\t\tdestBones.length = bonesCount;\r\n\r\n\t\tvar rootBone: Sprite3D = meshRender.rootBone;\r\n\t\tif (rootBone) {\r\n\t\t\tvar pathes: any[] = Utils3D._getHierarchyPath(srcRoot, rootBone, SkinnedMeshSprite3D._tempArray0);\r\n\t\t\tif (pathes)\r\n\t\t\t\tdestMeshRender.rootBone = (<Sprite3D>Utils3D._getNodeByHierarchyPath(dstRoot, pathes));\r\n\t\t\telse\r\n\t\t\t\tdestMeshRender.rootBone = rootBone;\r\n\t\t}\r\n\r\n\t\tfor (var i: number = 0; i < bones.length; i++) {\r\n\t\t\tpathes = Utils3D._getHierarchyPath(srcRoot, bones[i], SkinnedMeshSprite3D._tempArray0);\r\n\t\t\tif (pathes)\r\n\t\t\t\tdestBones[i] = (<Sprite3D>Utils3D._getNodeByHierarchyPath(dstRoot, pathes));\r\n\t\t\telse\r\n\t\t\t\tdestBones[i] = bones[i];\r\n\t\t}\r\n\r\n\t\tvar lbb: Bounds = meshRender.localBounds;\r\n\t\t(lbb) && (lbb.cloneTo(destMeshRender.localBounds));\r\n\t\tsuper._cloneTo(destObject, srcRoot, dstRoot);//父类函数在最后,组件应该最后赋值，否则获取材质默认值等相关函数会有问题\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(destroyChild: boolean = true): void {\r\n\t\tif (this.destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy(destroyChild);\r\n\t\tthis._meshFilter.destroy();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new SkinnedMeshSprite3D();\r\n\t}\r\n\r\n}\r\n\r\n","import { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { Material } from \"../material/Material\";\r\nimport { RenderState } from \"../material/RenderState\";\r\nimport { ShaderDefine } from \"../../shader/ShaderDefine\";\r\n\r\n/**\r\n * <code>TrailMaterial</code> 类用于实现拖尾材质。\r\n */\r\nexport class TrailMaterial extends Material {\r\n\t/**渲染状态_透明混合。*/\r\n\tstatic RENDERMODE_ALPHABLENDED: number = 0;\r\n\t/**渲染状态_加色法混合。*/\r\n\tstatic RENDERMODE_ADDTIVE: number = 1;\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: TrailMaterial;\r\n\r\n\tstatic SHADERDEFINE_MAINTEXTURE: ShaderDefine;\r\n\tstatic SHADERDEFINE_TILINGOFFSET: ShaderDefine;\r\n\tstatic SHADERDEFINE_ADDTIVEFOG: ShaderDefine;\r\n\r\n\tstatic MAINTEXTURE: number = Shader3D.propertyNameToID(\"u_MainTexture\");\r\n\tstatic TINTCOLOR: number = Shader3D.propertyNameToID(\"u_MainColor\");\r\n\tstatic TILINGOFFSET: number = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n\tstatic CULL: number = Shader3D.propertyNameToID(\"s_Cull\");\r\n\tstatic BLEND: number = Shader3D.propertyNameToID(\"s_Blend\");\r\n\tstatic BLEND_SRC: number = Shader3D.propertyNameToID(\"s_BlendSrc\");\r\n\tstatic BLEND_DST: number = Shader3D.propertyNameToID(\"s_BlendDst\");\r\n\tstatic DEPTH_TEST: number = Shader3D.propertyNameToID(\"s_DepthTest\");\r\n\tstatic DEPTH_WRITE: number = Shader3D.propertyNameToID(\"s_DepthWrite\");\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tTrailMaterial.SHADERDEFINE_MAINTEXTURE = Shader3D.getDefineByName(\"MAINTEXTURE\");\r\n\t\tTrailMaterial.SHADERDEFINE_TILINGOFFSET = Shader3D.getDefineByName(\"TILINGOFFSET\");\r\n\t\tTrailMaterial.SHADERDEFINE_ADDTIVEFOG = Shader3D.getDefineByName(\"ADDTIVEFOG\");\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _color: Vector4;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _TintColorR(): number {\r\n\t\treturn this._color.x;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _TintColorR(value: number) {\r\n\t\tthis._color.x = value;\r\n\t\tthis.color = this._color;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _TintColorG(): number {\r\n\t\treturn this._color.y;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _TintColorG(value: number) {\r\n\t\tthis._color.y = value;\r\n\t\tthis.color = this._color;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _TintColorB(): number {\r\n\t\treturn this._color.z;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _TintColorB(value: number) {\r\n\t\tthis._color.z = value;\r\n\t\tthis.color = this._color;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tget _TintColorA(): number {\r\n\t\treturn this._color.w;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _TintColorA(value: number) {\r\n\t\tthis._color.w = value;\r\n\t\tthis.color = this._color;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STX(): number {\r\n\t\treturn this._shaderValues.getVector(TrailMaterial.TILINGOFFSET).x;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STX(x: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(TrailMaterial.TILINGOFFSET));\r\n\t\ttilOff.x = x;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STY(): number {\r\n\t\treturn this._shaderValues.getVector(TrailMaterial.TILINGOFFSET).y;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STY(y: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(TrailMaterial.TILINGOFFSET));\r\n\t\ttilOff.y = y;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STZ(): number {\r\n\t\treturn this._shaderValues.getVector(TrailMaterial.TILINGOFFSET).z;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STZ(z: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(TrailMaterial.TILINGOFFSET));\r\n\t\ttilOff.z = z;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STW(): number {\r\n\t\treturn this._shaderValues.getVector(TrailMaterial.TILINGOFFSET).w;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STW(w: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(TrailMaterial.TILINGOFFSET));\r\n\t\ttilOff.w = w;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置渲染模式。\r\n\t * @return 渲染模式。\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase TrailMaterial.RENDERMODE_ADDTIVE:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tthis._shaderValues.addDefine(TrailMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tcase TrailMaterial.RENDERMODE_ALPHABLENDED:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tthis._shaderValues.removeDefine(TrailMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"TrailMaterial : renderMode value error.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色R分量。\r\n\t * @return 颜色R分量。\r\n\t */\r\n\tget colorR(): number {\r\n\t\treturn this._TintColorR;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置颜色R分量。\r\n\t * @param value 颜色R分量。\r\n\t */\r\n\tset colorR(value: number) {\r\n\t\tthis._TintColorR = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色G分量。\r\n\t * @return 颜色G分量。\r\n\t */\r\n\tget colorG(): number {\r\n\t\treturn this._TintColorG;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置颜色G分量。\r\n\t * @param value 颜色G分量。\r\n\t */\r\n\tset colorG(value: number) {\r\n\t\tthis._TintColorG = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色B分量。\r\n\t * @return 颜色B分量。\r\n\t */\r\n\tget colorB(): number {\r\n\t\treturn this._TintColorB;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置颜色B分量。\r\n\t * @param value 颜色B分量。\r\n\t */\r\n\tset colorB(value: number) {\r\n\t\tthis._TintColorB = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色Z分量。\r\n\t * @return 颜色Z分量。\r\n\t */\r\n\tget colorA(): number {\r\n\t\treturn this._TintColorA;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置颜色alpha分量。\r\n\t * @param value 颜色alpha分量。\r\n\t */\r\n\tset colorA(value: number) {\r\n\t\tthis._TintColorA = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色。\r\n\t * @return 颜色。\r\n\t */\r\n\tget color(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(TrailMaterial.TINTCOLOR));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置颜色。\r\n\t * @param value 颜色。\r\n\t */\r\n\tset color(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(TrailMaterial.TINTCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取贴图。\r\n\t * @return 贴图。\r\n\t */\r\n\tget texture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(TrailMaterial.MAINTEXTURE);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置贴图。\r\n\t * @param value 贴图。\r\n\t */\r\n\tset texture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(TrailMaterial.SHADERDEFINE_MAINTEXTURE);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(TrailMaterial.SHADERDEFINE_MAINTEXTURE);\r\n\t\tthis._shaderValues.setTexture(TrailMaterial.MAINTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理平铺和偏移X分量。\r\n\t * @return 纹理平铺和偏移X分量。\r\n\t */\r\n\tget tilingOffsetX(): number {\r\n\t\treturn this._MainTex_STX;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理平铺和偏移X分量。\r\n\t * @param x 纹理平铺和偏移X分量。\r\n\t */\r\n\tset tilingOffsetX(x: number) {\r\n\t\tthis._MainTex_STX = x;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理平铺和偏移Y分量。\r\n\t * @return 纹理平铺和偏移Y分量。\r\n\t */\r\n\tget tilingOffsetY(): number {\r\n\t\treturn this._MainTex_STY;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理平铺和偏移Y分量。\r\n\t * @param y 纹理平铺和偏移Y分量。\r\n\t */\r\n\tset tilingOffsetY(y: number) {\r\n\t\tthis._MainTex_STY = y;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理平铺和偏移Z分量。\r\n\t * @return 纹理平铺和偏移Z分量。\r\n\t */\r\n\tget tilingOffsetZ(): number {\r\n\t\treturn this._MainTex_STZ;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理平铺和偏移Z分量。\r\n\t * @param z 纹理平铺和偏移Z分量。\r\n\t */\r\n\tset tilingOffsetZ(z: number) {\r\n\t\tthis._MainTex_STZ = z;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理平铺和偏移W分量。\r\n\t * @return 纹理平铺和偏移W分量。\r\n\t */\r\n\tget tilingOffsetW(): number {\r\n\t\treturn this._MainTex_STW;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理平铺和偏移W分量。\r\n\t * @param w 纹理平铺和偏移W分量。\r\n\t */\r\n\tset tilingOffsetW(w: number) {\r\n\t\tthis._MainTex_STW = w;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理平铺和偏移。\r\n\t * @return 纹理平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(TrailMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置纹理平铺和偏移。\r\n\t * @param value 纹理平铺和偏移。\r\n\t */\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tif (value.x != 1 || value.y != 1 || value.z != 0 || value.w != 0)\r\n\t\t\t\tthis._shaderValues.addDefine(TrailMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t\telse\r\n\t\t\t\tthis._shaderValues.removeDefine(TrailMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t} else {\r\n\t\t\tthis._shaderValues.removeDefine(TrailMaterial.SHADERDEFINE_TILINGOFFSET);\r\n\t\t}\r\n\t\tthis._shaderValues.setVector(TrailMaterial.TILINGOFFSET, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置是否写入深度。\r\n\t * @param value 是否写入深度。\r\n\t */\r\n\tset depthWrite(value: boolean) {\r\n\t\tthis._shaderValues.setBool(TrailMaterial.DEPTH_WRITE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取是否写入深度。\r\n\t * @return 是否写入深度。\r\n\t */\r\n\tget depthWrite(): boolean {\r\n\t\treturn this._shaderValues.getBool(TrailMaterial.DEPTH_WRITE);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置剔除方式。\r\n\t * @param value 剔除方式。\r\n\t */\r\n\tset cull(value: number) {\r\n\t\tthis._shaderValues.setInt(TrailMaterial.CULL, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取剔除方式。\r\n\t * @return 剔除方式。\r\n\t */\r\n\tget cull(): number {\r\n\t\treturn this._shaderValues.getInt(TrailMaterial.CULL);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置混合方式。\r\n\t * @param value 混合方式。\r\n\t */\r\n\tset blend(value: number) {\r\n\t\tthis._shaderValues.setInt(TrailMaterial.BLEND, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取混合方式。\r\n\t * @return 混合方式。\r\n\t */\r\n\tget blend(): number {\r\n\t\treturn this._shaderValues.getInt(TrailMaterial.BLEND);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置混合源。\r\n\t * @param value 混合源\r\n\t */\r\n\tset blendSrc(value: number) {\r\n\t\tthis._shaderValues.setInt(TrailMaterial.BLEND_SRC, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取混合源。\r\n\t * @return 混合源。\r\n\t */\r\n\tget blendSrc(): number {\r\n\t\treturn this._shaderValues.getInt(TrailMaterial.BLEND_SRC);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置混合目标。\r\n\t * @param value 混合目标\r\n\t */\r\n\tset blendDst(value: number) {\r\n\t\tthis._shaderValues.setInt(TrailMaterial.BLEND_DST, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取混合目标。\r\n\t * @return 混合目标。\r\n\t */\r\n\tget blendDst(): number {\r\n\t\treturn this._shaderValues.getInt(TrailMaterial.BLEND_DST);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置深度测试方式。\r\n\t * @param value 深度测试方式\r\n\t */\r\n\tset depthTest(value: number) {\r\n\t\tthis._shaderValues.setInt(TrailMaterial.DEPTH_TEST, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取深度测试方式。\r\n\t * @return 深度测试方式。\r\n\t */\r\n\tget depthTest(): number {\r\n\t\treturn this._shaderValues.getInt(TrailMaterial.DEPTH_TEST);\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"Trail\");\r\n\t\tthis._color = new Vector4(1.0, 1.0, 1.0, 1.0);\r\n\t\tthis._shaderValues.setVector(TrailMaterial.TINTCOLOR, new Vector4(1.0, 1.0, 1.0, 1.0));\r\n\t\tthis.renderMode = TrailMaterial.RENDERMODE_ALPHABLENDED;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: TrailMaterial = new TrailMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n","\r\nexport class TextureMode {\r\n\t/**\r\n\t * 拉伸模式。\r\n\t */\r\n\tstatic Stretch: number = 0;\r\n\r\n\t/**\r\n\t * 平铺模式。\r\n\t */\r\n\tstatic Tile: number = 1;\r\n\r\n}\r\n\r\n\r\n","export enum TrailAlignment {\r\n    View,\r\n    TransformZ\r\n}\r\n","import { IVertex } from \"../../graphics/IVertex\"\r\nimport { VertexDeclaration } from \"../../graphics/VertexDeclaration\"\r\nimport { VertexElement } from \"../../graphics/VertexElement\"\r\nimport { VertexElementFormat } from \"../../graphics/VertexElementFormat\"\r\n/**\r\n * <code>VertexTrail</code> 类用于创建拖尾顶点结构。\r\n */\r\nexport class VertexTrail implements IVertex {\r\n\tstatic TRAIL_POSITION0: number = 0;\r\n\tstatic TRAIL_OFFSETVECTOR: number = 1;\r\n\tstatic TRAIL_TIME0: number = 2;\r\n\tstatic TRAIL_TEXTURECOORDINATE0Y: number = 3;\r\n\tstatic TRAIL_TEXTURECOORDINATE0X: number = 4;\r\n\tstatic TRAIL_COLOR: number = 5;\r\n\r\n\t/**@internal */\r\n\tprivate static _vertexDeclaration1: VertexDeclaration;\r\n\t/**@internal */\r\n\tprivate static _vertexDeclaration2: VertexDeclaration;\r\n\r\n\tstatic get vertexDeclaration1(): VertexDeclaration {\r\n\t\treturn VertexTrail._vertexDeclaration1;\r\n\t}\r\n\r\n\tstatic get vertexDeclaration2(): VertexDeclaration {\r\n\t\treturn VertexTrail._vertexDeclaration2;\r\n\t}\r\n\r\n\tget vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexTrail._vertexDeclaration1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tVertexTrail._vertexDeclaration1 = new VertexDeclaration(32,\r\n\t\t\t[new VertexElement(0, VertexElementFormat.Vector3, VertexTrail.TRAIL_POSITION0),\r\n\t\t\tnew VertexElement(12, VertexElementFormat.Vector3, VertexTrail.TRAIL_OFFSETVECTOR),\r\n\t\t\tnew VertexElement(24, VertexElementFormat.Single, VertexTrail.TRAIL_TIME0),\r\n\t\t\tnew VertexElement(28, VertexElementFormat.Single, VertexTrail.TRAIL_TEXTURECOORDINATE0Y)]);\r\n\t\tVertexTrail._vertexDeclaration2 = new VertexDeclaration(20,\r\n\t\t\t[new VertexElement(0, VertexElementFormat.Single, VertexTrail.TRAIL_TEXTURECOORDINATE0X),\r\n\t\t\tnew VertexElement(4, VertexElementFormat.Color, VertexTrail.TRAIL_COLOR)]);\r\n\t}\r\n}\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { VertexDeclaration } from \"../../graphics/VertexDeclaration\";\r\nimport { Color } from \"../../math/Color\";\r\nimport { MathUtils3D } from \"../../math/MathUtils3D\";\r\nimport { Matrix4x4 } from \"../../math/Matrix4x4\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Bounds } from \"../Bounds\";\r\nimport { BufferState } from \"../BufferState\";\r\nimport { Camera } from \"../Camera\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { TextureMode } from \"../TextureMode\";\r\nimport { TrailAlignment } from \"./TrailAlignment\";\r\nimport { TrailFilter } from \"./TrailFilter\";\r\nimport { VertexTrail } from \"./VertexTrail\";\r\nimport { Render } from \"../../../renders/Render\"\r\nimport { FrustumCulling } from \"../../graphics/FrustumCulling\"\r\nimport { TrailRenderer } from \"./TrailRenderer\";\r\n\r\n/**\r\n * <code>TrailGeometry</code> 类用于创建拖尾渲染单元。\r\n */\r\nexport class TrailGeometry extends GeometryElement {\r\n\t/** 轨迹准线_面向摄像机。*/\r\n\tstatic ALIGNMENT_VIEW: number = 0;\r\n\t/** 轨迹准线_面向运动方向。*/\r\n\tstatic ALIGNMENT_TRANSFORM_Z: number = 1;\r\n\r\n\t/**@internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector31: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector32: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector33: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector34: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector35: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector36: Vector3 = new Vector3();\r\n\r\n\t/**@internal */\r\n\tprivate static _type: number = GeometryElement._typeCounter++;\r\n\r\n\t/**@internal */\r\n\tprivate _floatCountPerVertices1: number = 8;\r\n\t/**@internal */\r\n\tprivate _floatCountPerVertices2: number = 5;\r\n\t/**@internal */\r\n\tprivate _increaseSegementCount: number = 16;\r\n\t/**@internal */\r\n\tprivate _activeIndex: number = 0;\r\n\t/**@internal */\r\n\tprivate _endIndex: number = 0;\r\n\t/**@internal */\r\n\tprivate _needAddFirstVertex: boolean = false;\r\n\t/**@internal */\r\n\tprivate _isTempEndVertex: boolean = false;\r\n\t/**@internal */\r\n\tprivate _subBirthTime: Float32Array;\r\n\t/**@internal */\r\n\tprivate _subDistance: Float64Array;\r\n\t/**@internal */\r\n\tprivate _segementCount: number;\r\n\t/**@internal */\r\n\tprivate _vertices1: Float32Array = null;\r\n\t/**@internal */\r\n\tprivate _vertices2: Float32Array = null;\r\n\t/**@internal */\r\n\tprivate _vertexBuffer1: VertexBuffer3D;\r\n\t/**@internal */\r\n\tprivate _vertexBuffer2: VertexBuffer3D;\r\n\t/**@internal */\r\n\tprivate _lastFixedVertexPosition: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate _owner: TrailFilter;\r\n\t/** @internal */\r\n\tprivate _bufferState: BufferState = new BufferState();\r\n\r\n\tprivate tmpColor: Color = new Color();\r\n\t/** @private */\r\n\tprivate _disappearBoundsMode: Boolean = false;\r\n\r\n\tconstructor(owner: TrailFilter) {\r\n\t\tsuper();\r\n\t\tthis._owner = owner;\r\n\t\t//初始化_segementCount\r\n\t\tthis._segementCount = this._increaseSegementCount;\r\n\r\n\t\tthis._resizeData(this._segementCount, this._bufferState);\r\n\t\tvar bounds: Bounds = this._owner._owner.trailRenderer.bounds;\r\n\t\tvar sprite3dPosition: Vector3 = this._owner._owner.transform.position;\r\n\t\tbounds.setMin(sprite3dPosition);\r\n\t\tbounds.setMax(sprite3dPosition);\r\n\t\tRender.supportWebGLPlusCulling && this._calculateBoundingBoxForNative();//[NATIVE]\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _resizeData(segementCount: number, bufferState: BufferState): void {\r\n\t\tthis._subBirthTime = new Float32Array(segementCount);\r\n\t\tthis._subDistance = new Float64Array(segementCount);\r\n\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar vertexCount: number = segementCount * 2;\r\n\t\tvar vertexDeclaration1: VertexDeclaration = VertexTrail.vertexDeclaration1;\r\n\t\tvar vertexDeclaration2: VertexDeclaration = VertexTrail.vertexDeclaration2;\r\n\t\tvar vertexBuffers: VertexBuffer3D[] = [];\r\n\t\tvar vertexbuffer1Size: number = vertexCount * vertexDeclaration1.vertexStride;\r\n\t\tvar vertexbuffer2Size: number = vertexCount * vertexDeclaration2.vertexStride;\r\n\t\tvar memorySize: number = vertexbuffer1Size + vertexbuffer2Size;\r\n\t\tthis._vertices1 = new Float32Array(vertexCount * this._floatCountPerVertices1);\r\n\t\tthis._vertices2 = new Float32Array(vertexCount * this._floatCountPerVertices2);\r\n\t\tthis._vertexBuffer1 = new VertexBuffer3D(vertexbuffer1Size, gl.STATIC_DRAW, false);\r\n\t\tthis._vertexBuffer1.vertexDeclaration = vertexDeclaration1;\r\n\t\tthis._vertexBuffer2 = new VertexBuffer3D(vertexbuffer2Size, gl.DYNAMIC_DRAW, false);\r\n\t\tthis._vertexBuffer2.vertexDeclaration = vertexDeclaration2;\r\n\r\n\t\tvertexBuffers.push(this._vertexBuffer1);\r\n\t\tvertexBuffers.push(this._vertexBuffer2);\r\n\t\tbufferState.bind();\r\n\t\tbufferState.applyVertexBuffers(vertexBuffers);\r\n\t\tbufferState.unBind();\r\n\t\tResource._addMemory(memorySize, memorySize);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _resetData(): void {\r\n\t\tvar count: number = this._endIndex - this._activeIndex;\r\n\t\t//提前取出旧数据，否则_resizeData会覆盖\r\n\t\tvar oldVertices1: Float32Array = new Float32Array(this._vertices1.buffer, this._floatCountPerVertices1 * 2 * this._activeIndex * 4, this._floatCountPerVertices1 * 2 * count);\r\n\t\tvar oldVertices2: Float32Array = new Float32Array(this._vertices2.buffer, this._floatCountPerVertices2 * 2 * this._activeIndex * 4, this._floatCountPerVertices2 * 2 * count);\r\n\t\tvar oldSubDistance: Float64Array = new Float64Array(this._subDistance.buffer, this._activeIndex * 8, count);//修改距离数据\r\n\t\tvar oldSubBirthTime: Float32Array = new Float32Array(this._subBirthTime.buffer, this._activeIndex * 4, count);//修改出生时间数据\r\n\r\n\t\tif (count === this._segementCount) {//当前count=_segementCount表示已满,需要扩充\r\n\t\t\tthis._vertexBuffer1.destroy();\r\n\t\t\tthis._vertexBuffer2.destroy();\r\n\t\t\tvar memorySize: number = this._vertexBuffer1._byteLength + this._vertexBuffer2._byteLength;\r\n\t\t\tResource._addMemory(-memorySize, -memorySize);\r\n\t\t\tthis._segementCount += this._increaseSegementCount;\r\n\t\t\tthis._resizeData(this._segementCount, this._bufferState);\r\n\t\t}\r\n\r\n\t\tthis._vertices1.set(oldVertices1, 0);\r\n\t\tthis._vertices2.set(oldVertices2, 0);\r\n\t\tthis._subDistance.set(oldSubDistance, 0);\r\n\t\tthis._subBirthTime.set(oldSubBirthTime, 0);\r\n\r\n\t\tthis._endIndex = count;\r\n\t\tthis._activeIndex = 0;\r\n\t\tthis._vertexBuffer1.setData(this._vertices1.buffer, 0, this._floatCountPerVertices1 * 2 * this._activeIndex * 4, this._floatCountPerVertices1 * 2 * count * 4);\r\n\t\tthis._vertexBuffer2.setData(this._vertices2.buffer, 0, this._floatCountPerVertices2 * 2 * this._activeIndex * 4, this._floatCountPerVertices2 * 2 * count * 4);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 更新Trail数据\r\n\t */\r\n\t_updateTrail(camera: Camera, lastPosition: Vector3, position: Vector3): void {\r\n\t\tif (!Vector3.equals(lastPosition, position)) {//位置不变不产生分段\r\n\t\t\tif ((this._endIndex - this._activeIndex) === 0)\r\n\t\t\t\tthis._addTrailByFirstPosition(camera, position);//当前分段全部消失时,需要添加一个首分段\r\n\t\t\telse\r\n\t\t\t\tthis._addTrailByNextPosition(camera, position);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 通过起始位置添加TrailRenderElement起始数据\r\n\t */\r\n\tprivate _addTrailByFirstPosition(camera: Camera, position: Vector3): void {\r\n\t\t(this._endIndex === this._segementCount) && (this._resetData());\r\n\t\tthis._subDistance[this._endIndex] = 0;\r\n\t\tthis._subBirthTime[this._endIndex] = this._owner._curtime;\r\n\t\tthis._endIndex++;\r\n\t\tposition.cloneTo(this._lastFixedVertexPosition);\r\n\t\tthis._needAddFirstVertex = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 通过位置更新TrailRenderElement数据\r\n\t */\r\n\tprivate _addTrailByNextPosition(camera: Camera, position: Vector3): void {\r\n\t\tvar delVector3: Vector3 = TrailGeometry._tempVector30;\r\n\t\tvar pointAtoBVector3: Vector3 = TrailGeometry._tempVector31;\r\n\t\tswitch (this._owner.alignment) {\r\n\t\t\tcase TrailAlignment.View:\r\n\t\t\t\tvar cameraMatrix: Matrix4x4 = camera.viewMatrix;\r\n\t\t\t\tVector3.transformCoordinate(position, cameraMatrix, TrailGeometry._tempVector33);\r\n\t\t\t\tVector3.transformCoordinate(this._lastFixedVertexPosition, cameraMatrix, TrailGeometry._tempVector34);\r\n\t\t\t\tVector3.subtract(TrailGeometry._tempVector33, TrailGeometry._tempVector34, delVector3);\r\n\t\t\t\tVector3.cross(TrailGeometry._tempVector33, delVector3, pointAtoBVector3);\r\n\t\t\t\tbreak;\r\n\t\t\tcase TrailAlignment.TransformZ:\r\n\t\t\t\tVector3.subtract(position, this._lastFixedVertexPosition, delVector3);\r\n\t\t\t\tvar forward: Vector3 = TrailGeometry._tempVector32;\r\n\t\t\t\tthis._owner._owner.transform.getForward(forward);\r\n\t\t\t\tVector3.cross(delVector3, forward, pointAtoBVector3);//实时更新模式需要和view一样根据当前forward重新计算\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tVector3.normalize(pointAtoBVector3, pointAtoBVector3);\r\n\t\tVector3.scale(pointAtoBVector3, this._owner.widthMultiplier / 2, pointAtoBVector3);\r\n\r\n\t\tvar delLength: number = Vector3.scalarLength(delVector3);\r\n\t\tvar tempEndIndex: number;\r\n\t\tvar offset: number;\r\n\r\n\t\tif (this._needAddFirstVertex) {\r\n\t\t\tthis._updateVerticesByPositionData(position, pointAtoBVector3, this._endIndex - 1);//延迟更新首分段数据\r\n\t\t\tthis._needAddFirstVertex = false;\r\n\t\t}\r\n\r\n\t\tif (delLength - this._owner.minVertexDistance >= MathUtils3D.zeroTolerance) {//大于最小距离产生新分段\r\n\t\t\tif (this._isTempEndVertex) {\r\n\t\t\t\ttempEndIndex = this._endIndex - 1;\r\n\t\t\t\toffset = delLength - this._subDistance[tempEndIndex];\r\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, tempEndIndex);\r\n\t\t\t\tthis._owner._totalLength += offset;//不产生新分段要通过差值更新总距离\r\n\t\t\t} else {\r\n\t\t\t\t(this._endIndex === this._segementCount) && (this._resetData());\r\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, this._endIndex);\r\n\t\t\t\tthis._owner._totalLength += delLength;\r\n\t\t\t\tthis._endIndex++;\r\n\t\t\t}\r\n\t\t\tposition.cloneTo(this._lastFixedVertexPosition);\r\n\t\t\tthis._isTempEndVertex = false;\r\n\t\t} else {\r\n\t\t\tif (this._isTempEndVertex) {\r\n\t\t\t\ttempEndIndex = this._endIndex - 1;\r\n\t\t\t\toffset = delLength - this._subDistance[tempEndIndex];\r\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, tempEndIndex);\r\n\t\t\t\tthis._owner._totalLength += offset;//不产生新分段要通过差值更新总距离\r\n\t\t\t} else {\r\n\t\t\t\t(this._endIndex === this._segementCount) && (this._resetData());\r\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, this._endIndex);\r\n\t\t\t\tthis._owner._totalLength += delLength;\r\n\t\t\t\tthis._endIndex++;\r\n\t\t\t}\r\n\t\t\tthis._isTempEndVertex = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 通过位置更新顶点数据\r\n\t */\r\n\tprivate _updateVerticesByPositionData(position: Vector3, pointAtoBVector3: Vector3, index: number): void {\r\n\t\tvar vertexOffset: number = this._floatCountPerVertices1 * 2 * index;\r\n\t\tvar curtime: number = this._owner._curtime;\r\n\t\tthis._vertices1[vertexOffset] = position.x;\r\n\t\tthis._vertices1[vertexOffset + 1] = position.y;\r\n\t\tthis._vertices1[vertexOffset + 2] = position.z;\r\n\t\tthis._vertices1[vertexOffset + 3] = -pointAtoBVector3.x;\r\n\t\tthis._vertices1[vertexOffset + 4] = -pointAtoBVector3.y;\r\n\t\tthis._vertices1[vertexOffset + 5] = -pointAtoBVector3.z;\r\n\t\tthis._vertices1[vertexOffset + 6] = curtime;\r\n\t\tthis._vertices1[vertexOffset + 7] = 1.0;\r\n\r\n\t\tthis._vertices1[vertexOffset + 8] = position.x;\r\n\t\tthis._vertices1[vertexOffset + 9] = position.y;\r\n\t\tthis._vertices1[vertexOffset + 10] = position.z;\r\n\t\tthis._vertices1[vertexOffset + 11] = pointAtoBVector3.x;\r\n\t\tthis._vertices1[vertexOffset + 12] = pointAtoBVector3.y;\r\n\t\tthis._vertices1[vertexOffset + 13] = pointAtoBVector3.z;\r\n\t\tthis._vertices1[vertexOffset + 14] = curtime;\r\n\t\tthis._vertices1[vertexOffset + 15] = 0.0;\r\n\r\n\t\t//添加新的顶点时，需要更新包围盒\r\n\t\tvar bounds: Bounds = this._owner._owner.trailRenderer.bounds;\r\n\t\tvar min: Vector3 = bounds.getMin();\r\n\t\tvar max: Vector3 = bounds.getMax();\r\n\t\tvar up: Vector3 = TrailGeometry._tempVector35;\r\n\t\tvar down: Vector3 = TrailGeometry._tempVector36;\r\n\t\tvar out: Vector3 = TrailGeometry._tempVector32;\r\n\t\tVector3.add(position, pointAtoBVector3, up);\r\n\t\tVector3.subtract(position, pointAtoBVector3, down);\r\n\r\n\t\tVector3.min(down, up, out);\r\n\t\tVector3.min(min, out, min);\r\n\t\tbounds.setMin(min);\r\n\r\n\t\tVector3.max(up, down, out);\r\n\t\tVector3.max(max, out, max);\r\n\t\tbounds.setMax(max);\r\n\r\n\t\tRender.supportWebGLPlusCulling && this._calculateBoundingBoxForNative();//[NATIVE]\r\n\r\n\t\tvar floatCount: number = this._floatCountPerVertices1 * 2;\r\n\t\tthis._vertexBuffer1.setData(this._vertices1.buffer, vertexOffset * 4, vertexOffset * 4, floatCount * 4);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 通过位置更新顶点数据、距离、出生时间\r\n\t */\r\n\tprivate _updateVerticesByPosition(position: Vector3, pointAtoBVector3: Vector3, delDistance: number, index: number): void {\r\n\t\tthis._updateVerticesByPositionData(position, pointAtoBVector3, index);\r\n\t\tthis._subDistance[index] = delDistance;\r\n\t\tthis._subBirthTime[index] = this._owner._curtime;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 更新VertexBuffer2数据\r\n\t */\r\n\t_updateVertexBufferUV(): void {\r\n\t\tvar bounds: Bounds;\r\n\t\tvar min: Vector3, max: Vector3;\r\n\t\tif (this._disappearBoundsMode) {//如果有顶点消失时候，需要重新计算包围盒\r\n\t\t\tbounds = this._owner._owner.trailRenderer.bounds;\r\n\t\t\tvar sprite3dPosition: Vector3 = this._owner._owner.transform.position;\r\n\t\t\tbounds.setMin(sprite3dPosition);\r\n\t\t\tbounds.setMax(sprite3dPosition);\r\n\t\t\tmin = bounds.getMin();\r\n\t\t\tmax = bounds.getMax();\r\n\t\t\tRender.supportWebGLPlusCulling && this._calculateBoundingBoxForNative();//[NATIVE]\r\n\t\t}\r\n\t\tvar vertexCount: number = this._endIndex;\r\n\t\tvar curLength: number = 0;\r\n\r\n\t\tvar gradient: Gradient = this._owner.colorGradient;\r\n\t\tvar startAlphaIndex: number = gradient.colorAlphaKeysCount - 1;\r\n\t\tvar startColorIndex: number = gradient.colorRGBKeysCount - 1;\r\n\r\n\t\tvar totalLength: number = this._owner._totalLength;\r\n\t\tvar stride: number = this._floatCountPerVertices2 * 2;\r\n\t\tfor (var i: number = this._activeIndex; i < vertexCount; i++) {\r\n\t\t\t(i !== this._activeIndex) && (curLength += this._subDistance[i]);\r\n\t\t\tvar uvX: number;\r\n\t\t\tvar lerpFactor: number;\r\n\t\t\tif (this._owner.textureMode == TextureMode.Stretch) {\r\n\t\t\t\tuvX = 1.0 - curLength / totalLength;\r\n\t\t\t\tlerpFactor = uvX;\r\n\t\t\t} else {\r\n\t\t\t\tlerpFactor = 1.0 - curLength / totalLength;\r\n\t\t\t\tuvX = 1.0 - (totalLength - curLength);\r\n\t\t\t}\r\n\r\n\t\t\tstartColorIndex = gradient.evaluateColorRGB(lerpFactor, this.tmpColor, startColorIndex, true);\r\n\t\t\tstartAlphaIndex = gradient.evaluateColorAlpha(lerpFactor, this.tmpColor, startAlphaIndex, true);\r\n\r\n\t\t\tvar index: number = i * stride;\r\n\t\t\tthis._vertices2[index + 0] = uvX;\r\n\t\t\tthis._vertices2[index + 1] = this.tmpColor.r;\r\n\t\t\tthis._vertices2[index + 2] = this.tmpColor.g;\r\n\t\t\tthis._vertices2[index + 3] = this.tmpColor.b;\r\n\t\t\tthis._vertices2[index + 4] = this.tmpColor.a;\r\n\r\n\t\t\tthis._vertices2[index + 5] = uvX;\r\n\t\t\tthis._vertices2[index + 6] = this.tmpColor.r;\r\n\t\t\tthis._vertices2[index + 7] = this.tmpColor.g;\r\n\t\t\tthis._vertices2[index + 8] = this.tmpColor.b;\r\n\t\t\tthis._vertices2[index + 9] = this.tmpColor.a;\r\n\r\n\t\t\tif (this._disappearBoundsMode) {\r\n\t\t\t\tvar posOffset = this._floatCountPerVertices1 * 2 * i;\r\n\t\t\t\tvar pos: Vector3 = TrailGeometry._tempVector32;\r\n\t\t\t\tvar up: Vector3 = TrailGeometry._tempVector33;\r\n\t\t\t\tvar side: Vector3 = TrailGeometry._tempVector34;\r\n\r\n\t\t\t\tpos.setValue(this._vertices1[posOffset + 0], this._vertices1[posOffset + 1], this._vertices1[posOffset + 2]);\r\n\t\t\t\tup.setValue(this._vertices1[posOffset + 3], this._vertices1[posOffset + 4], this._vertices1[posOffset + 5]);\r\n\r\n\t\t\t\tVector3.add(pos, up, side);\r\n\t\t\t\tVector3.min(side, min, min);\r\n\t\t\t\tVector3.max(side, max, max);\r\n\t\t\t\tVector3.subtract(pos, up, side);\r\n\t\t\t\tVector3.min(side, min, min);\r\n\t\t\t\tVector3.max(side, max, max);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this._disappearBoundsMode) {\r\n\t\t\tbounds.setMin(min);\r\n\t\t\tbounds.setMax(max);\r\n\t\t\tthis._disappearBoundsMode = false;\r\n\t\t\tRender.supportWebGLPlusCulling && this._calculateBoundingBoxForNative();//[NATIVE]\r\n\t\t}\r\n\t\tvar offset: number = this._activeIndex * stride;\r\n\t\tthis._vertexBuffer2.setData(this._vertices2.buffer, offset * 4, offset * 4, (vertexCount * stride - offset) * 4);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateDisappear(): void {\r\n\t\tvar count: number = this._endIndex;\r\n\t\tfor (var i: number = this._activeIndex; i < count; i++) {\r\n\t\t\tif (this._owner._curtime - this._subBirthTime[i] >= this._owner.time + MathUtils3D.zeroTolerance) {\r\n\t\t\t\tvar nextIndex: number = i + 1;\r\n\t\t\t\tif (nextIndex !== count)\r\n\t\t\t\t\tthis._owner._totalLength -= this._subDistance[nextIndex];//移除分段要减去下一分段到当前分段的距离\r\n\r\n\t\t\t\tif (this._isTempEndVertex && (nextIndex === count - 1)) {//如果只剩最后一分段要将其转化为固定分段\r\n\t\t\t\t\tvar offset: number = this._floatCountPerVertices1 * i * 2;\r\n\t\t\t\t\tvar fixedPos: Vector3 = this._lastFixedVertexPosition;\r\n\t\t\t\t\tfixedPos.x = this._vertices1[0];\r\n\t\t\t\t\tfixedPos.y = this._vertices1[1];\r\n\t\t\t\t\tfixedPos.z = this._vertices1[2];\r\n\t\t\t\t\tthis._isTempEndVertex = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis._activeIndex++;\r\n\t\t\t\tthis._disappearBoundsMode = true;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_getType(): number {\r\n\t\treturn TrailGeometry._type;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\treturn this._endIndex - this._activeIndex > 1;//当前分段为0或1时不渲染\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_render(state: RenderContext3D): void {\r\n\t\tthis._bufferState.bind();\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar start: number = this._activeIndex * 2;\r\n\t\tvar count: number = this._endIndex * 2 - start;\r\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, start, count);\r\n\t\tStat.renderBatches++;\r\n\t\tStat.trianglesFaces += count - 2;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tvar memorySize: number = this._vertexBuffer1._byteLength + this._vertexBuffer2._byteLength;\r\n\t\tResource._addMemory(-memorySize, -memorySize);\r\n\t\tthis._bufferState.destroy();\r\n\t\tthis._vertexBuffer1.destroy();\r\n\t\tthis._vertexBuffer2.destroy();\r\n\r\n\t\tthis._bufferState = null;\r\n\t\tthis._vertices1 = null;\r\n\t\tthis._vertexBuffer1 = null;\r\n\t\tthis._vertices2 = null;\r\n\t\tthis._vertexBuffer2 = null;\r\n\t\tthis._subBirthTime = null;\r\n\t\tthis._subDistance = null;\r\n\t\tthis._lastFixedVertexPosition = null;\r\n\t\tthis._disappearBoundsMode = false;\r\n\t}\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\t_calculateBoundingBoxForNative(): void {\r\n\t\tvar trail: TrailRenderer = this._owner._owner.trailRenderer;\r\n\t\tvar bounds: Bounds = trail.bounds;\r\n\t\tvar min: Vector3 = bounds.getMin();\r\n\t\tvar max: Vector3 = bounds.getMax();\r\n\t\tvar buffer: Float32Array = FrustumCulling._cullingBuffer;\r\n\t\tbuffer[trail._cullingBufferIndex + 1] = min.x;\r\n\t\tbuffer[trail._cullingBufferIndex + 2] = min.y;\r\n\t\tbuffer[trail._cullingBufferIndex + 3] = min.z;\r\n\t\tbuffer[trail._cullingBufferIndex + 4] = max.x;\r\n\t\tbuffer[trail._cullingBufferIndex + 5] = max.y;\r\n\t\tbuffer[trail._cullingBufferIndex + 6] = max.z;\r\n\t}\r\n\r\n\tclear(): void {\r\n\t\tthis._activeIndex = 0;\r\n\t\tthis._endIndex = 0;\r\n\t\tthis._disappearBoundsMode = false;\r\n\t\tthis._subBirthTime.fill(0);\r\n\t\tthis._subDistance.fill(0);\r\n\t\tthis._segementCount = 0;\r\n\t\tthis._isTempEndVertex = false;\r\n\t\tthis._needAddFirstVertex = false;\r\n\t\tthis._lastFixedVertexPosition.setValue(0, 0, 0);\r\n\t}\r\n}\r\n\r\n","import { Color } from \"../../math/Color\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Camera } from \"../Camera\";\r\nimport { FloatKeyframe } from \"../FloatKeyframe\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { GradientMode } from \"../GradientMode\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { RenderElement } from \"../render/RenderElement\";\r\nimport { Scene3D } from \"../scene/Scene3D\";\r\nimport { TextureMode } from \"../TextureMode\";\r\nimport { TrailGeometry } from \"./TrailGeometry\";\r\nimport { TrailMaterial } from \"./TrailMaterial\";\r\nimport { TrailRenderer } from \"./TrailRenderer\";\r\nimport { TrailSprite3D } from \"./TrailSprite3D\";\r\nimport { Shader3D } from \"../../../d3/shader/Shader3D\";\r\n\r\n/**\r\n * <code>TrailFilter</code> 类用于创建拖尾过滤器。\r\n */\r\nexport class TrailFilter {\r\n\tstatic CURTIME: number = Shader3D.propertyNameToID(\"u_CurTime\");\r\n\tstatic LIFETIME: number = Shader3D.propertyNameToID(\"u_LifeTime\");\r\n\tstatic WIDTHCURVE: number = Shader3D.propertyNameToID(\"u_WidthCurve\");\r\n\tstatic WIDTHCURVEKEYLENGTH: number = Shader3D.propertyNameToID(\"u_WidthCurveKeyLength\");\r\n\r\n\t/**@internal */\r\n\tprivate _minVertexDistance: number;\r\n\t/**@internal */\r\n\tprivate _widthMultiplier: number;\r\n\t/**@internal */\r\n\tprivate _time: number;\r\n\t/**@internal */\r\n\tprivate _widthCurve: FloatKeyframe[];\r\n\t/**@internal */\r\n\tprivate _colorGradient: Gradient;\r\n\t/**@internal */\r\n\tprivate _textureMode: number;\r\n\t/**@internal */\r\n\tprivate _trialGeometry: GeometryElement;\r\n\t/**@internal 拖尾总长度*/\r\n\t_totalLength: number = 0;\r\n\r\n\t_owner: TrailSprite3D;\r\n\t_lastPosition: Vector3 = new Vector3();\r\n\r\n\t_curtime: number = 0;\r\n\r\n\t/**轨迹准线。*/\r\n\talignment: number = TrailFilter.ALIGNMENT_VIEW;\r\n\r\n\t/**\r\n\t * 获取淡出时间。\r\n\t * @return  淡出时间。\r\n\t */\r\n\tget time(): number {\r\n\t\treturn this._time;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置淡出时间。\r\n\t * @param value 淡出时间。\r\n\t */\r\n\tset time(value: number) {\r\n\t\tthis._time = value;\r\n\t\tthis._owner._render._shaderValues.setNumber(TrailFilter.LIFETIME, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取新旧顶点之间最小距离。\r\n\t * @return  新旧顶点之间最小距离。\r\n\t */\r\n\tget minVertexDistance(): number {\r\n\t\treturn this._minVertexDistance;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置新旧顶点之间最小距离。\r\n\t * @param value 新旧顶点之间最小距离。\r\n\t */\r\n\tset minVertexDistance(value: number) {\r\n\t\tthis._minVertexDistance = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取宽度倍数。\r\n\t * @return  宽度倍数。\r\n\t */\r\n\tget widthMultiplier(): number {\r\n\t\treturn this._widthMultiplier;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置宽度倍数。\r\n\t * @param value 宽度倍数。\r\n\t */\r\n\tset widthMultiplier(value: number) {\r\n\t\tthis._widthMultiplier = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取宽度曲线。\r\n\t * @return  宽度曲线。\r\n\t */\r\n\tget widthCurve(): FloatKeyframe[] {\r\n\t\treturn this._widthCurve;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置宽度曲线。\r\n\t * @param value 宽度曲线。\r\n\t */\r\n\tset widthCurve(value: FloatKeyframe[]) {\r\n\t\tthis._widthCurve = value;\r\n\t\tvar widthCurveFloatArray: Float32Array = new Float32Array(value.length * 4);\r\n\t\tvar i: number, j: number, index: number = 0;\r\n\t\tfor (i = 0, j = value.length; i < j; i++) {\r\n\t\t\twidthCurveFloatArray[index++] = value[i].time;\r\n\t\t\twidthCurveFloatArray[index++] = value[i].inTangent;\r\n\t\t\twidthCurveFloatArray[index++] = value[i].outTangent;\r\n\t\t\twidthCurveFloatArray[index++] = value[i].value;\r\n\t\t}\r\n\t\tthis._owner._render._shaderValues.setBuffer(TrailFilter.WIDTHCURVE, widthCurveFloatArray);\r\n\t\tthis._owner._render._shaderValues.setInt(TrailFilter.WIDTHCURVEKEYLENGTH, value.length);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色梯度。\r\n\t * @return  颜色梯度。\r\n\t */\r\n\tget colorGradient(): Gradient {\r\n\t\treturn this._colorGradient;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置颜色梯度。\r\n\t * @param value 颜色梯度。\r\n\t */\r\n\tset colorGradient(value: Gradient) {\r\n\t\tthis._colorGradient = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理模式。\r\n\t * @return  纹理模式。\r\n\t */\r\n\tget textureMode(): number {\r\n\t\treturn this._textureMode;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置纹理模式。\r\n\t * @param value 纹理模式。\r\n\t */\r\n\tset textureMode(value: number) {\r\n\t\tthis._textureMode = value;\r\n\t}\r\n\r\n\tconstructor(owner: TrailSprite3D) {\r\n\t\tthis._owner = owner;\r\n\t\tthis._initDefaultData();\r\n\t\tthis.addRenderElement();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\taddRenderElement(): void {\r\n\t\tvar render: TrailRenderer = (<TrailRenderer>this._owner._render);\r\n\t\tvar elements: RenderElement[] = render._renderElements;\r\n\t\tvar material: TrailMaterial = (<TrailMaterial>render.sharedMaterials[0]);\r\n\t\t(material) || (material = TrailMaterial.defaultMaterial);\r\n\t\tvar element: RenderElement = new RenderElement();\r\n\t\telement.setTransform(this._owner._transform);\r\n\t\telement.render = render;\r\n\t\telement.material = material;\r\n\t\tthis._trialGeometry = new TrailGeometry(this);\r\n\t\telement.setGeometry(this._trialGeometry);\r\n\t\telements.push(element);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_update(state: RenderContext3D): void {\r\n\t\tvar render: BaseRender = this._owner._render;\r\n\t\tthis._curtime += ((<Scene3D>state.scene)).timer._delta / 1000;\r\n\t\trender._shaderValues.setNumber(TrailFilter.CURTIME, this._curtime);\r\n\r\n\t\tvar curPos: Vector3 = this._owner.transform.position;\r\n\t\tvar element: TrailGeometry = (<TrailGeometry>render._renderElements[0]._geometry);\r\n\t\telement._updateDisappear();\r\n\t\telement._updateTrail((<Camera>state.camera), this._lastPosition, curPos);\r\n\t\telement._updateVertexBufferUV();\r\n\t\tcurPos.cloneTo(this._lastPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_initDefaultData(): void {\r\n\t\tthis.time = 5.0;\r\n\t\tthis.minVertexDistance = 0.1;\r\n\t\tthis.widthMultiplier = 1;\r\n\t\tthis.textureMode = TextureMode.Stretch;\r\n\r\n\t\tvar widthKeyFrames: FloatKeyframe[] = [];\r\n\t\tvar widthKeyFrame1: FloatKeyframe = new FloatKeyframe();\r\n\t\twidthKeyFrame1.time = 0;\r\n\t\twidthKeyFrame1.inTangent = 0;\r\n\t\twidthKeyFrame1.outTangent = 0;\r\n\t\twidthKeyFrame1.value = 1;\r\n\t\twidthKeyFrames.push(widthKeyFrame1);\r\n\t\tvar widthKeyFrame2: FloatKeyframe = new FloatKeyframe();\r\n\t\twidthKeyFrame2.time = 1;\r\n\t\twidthKeyFrame2.inTangent = 0;\r\n\t\twidthKeyFrame2.outTangent = 0;\r\n\t\twidthKeyFrame2.value = 1;\r\n\t\twidthKeyFrames.push(widthKeyFrame2);\r\n\t\tthis.widthCurve = widthKeyFrames;\r\n\r\n\t\tvar gradient: Gradient = new Gradient(2, 2);\r\n\t\tgradient.mode = GradientMode.Blend;\r\n\t\tgradient.addColorRGB(0, Color.WHITE);\r\n\t\tgradient.addColorRGB(1, Color.WHITE);\r\n\t\tgradient.addColorAlpha(0, 1);\r\n\t\tgradient.addColorAlpha(1, 1);\r\n\t\tthis.colorGradient = gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tdestroy(): void {\r\n\t\tthis._trialGeometry.destroy();\r\n\t\tthis._trialGeometry = null;\r\n\t\tthis._widthCurve = null;\r\n\t\tthis._colorGradient = null;\r\n\t}\r\n\r\n\tclear(): void {\r\n\t\t(<TrailGeometry>this._trialGeometry).clear();\r\n\t\tthis._lastPosition.setValue(0, 0, 0);\r\n\t\tthis._curtime = 0;\r\n\t\tthis._totalLength = 0;\r\n\t}\r\n\r\n\t//--------------------------------------------------兼容---------------------------------------------------------------------\r\n\t/** 轨迹准线_面向摄像机。*/\r\n\tstatic ALIGNMENT_VIEW: number = 0;\r\n\t/** 轨迹准线_面向运动方向。*/\r\n\tstatic ALIGNMENT_TRANSFORM_Z: number = 1;\r\n}\r\n\r\n","import { TrailSprite3D } from \"./TrailSprite3D\";\r\nimport { Sprite3D } from \"../Sprite3D\"\r\nimport { Transform3D } from \"../Transform3D\"\r\nimport { BaseRender } from \"../render/BaseRender\"\r\nimport { RenderContext3D } from \"../render/RenderContext3D\"\r\nimport { BoundFrustum } from \"../../math/BoundFrustum\"\r\nimport { Matrix4x4 } from \"../../math/Matrix4x4\"\r\nimport { Vector3 } from \"../../math/Vector3\"\r\nimport { Render } from \"../../../renders/Render\"\r\nimport { FrustumCulling } from \"../../graphics/FrustumCulling\"\r\n\r\n/**\r\n * <code>TrailRenderer</code> 类用于创建拖尾渲染器。\r\n */\r\nexport class TrailRenderer extends BaseRender {\r\n\tconstructor(owner: TrailSprite3D) {\r\n\t\tsuper(owner);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _calculateBoundingBox(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_needRender(boundFrustum: BoundFrustum,context: RenderContext3D): boolean {\r\n\t\t(<TrailSprite3D>this._owner).trailFilter._update(context);\r\n\t\tif (boundFrustum)\r\n\t\t\treturn boundFrustum.intersects(this.bounds._getBoundBox());\r\n\t\telse\r\n\t\t\treturn true;\r\n\t}\r\n\t/**\r\n\t *@internal [NATIVE]\r\n\t */\r\n\t_updateForNative(context: RenderContext3D): void {\r\n\t\t(<TrailSprite3D>this._owner).trailFilter._update(context);\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_renderUpdate(state: RenderContext3D, transform: Transform3D): void {\r\n\t\tsuper._renderUpdate(state, transform);\r\n\t}\r\n\tprotected _projectionViewWorldMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {\r\n\t\tvar projectionView: Matrix4x4 = context.projectionViewMatrix;\r\n\t\tif (transform) {\r\n\t\t\tMatrix4x4.multiply(projectionView, transform.worldMatrix, this._projectionViewWorldMatrix);\r\n\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.MVPMATRIX, this._projectionViewWorldMatrix);\r\n\t\t} else {\r\n\t\t\tthis._shaderValues.setMatrix4x4(Sprite3D.MVPMATRIX, projectionView);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { TrailFilter } from \"./TrailFilter\";\r\nimport { TrailRenderer } from \"./TrailRenderer\";\r\nimport { FloatKeyframe } from \"../FloatKeyframe\"\r\nimport { Gradient } from \"../Gradient\"\r\nimport { RenderableSprite3D } from \"../RenderableSprite3D\"\r\nimport { Material } from \"../material/Material\"\r\nimport { Color } from \"../../math/Color\"\r\nimport { Node } from \"../../../display/Node\"\r\nimport { Loader } from \"../../../net/Loader\"\r\n\r\n/**\r\n * <code>TrailSprite3D</code> 类用于创建拖尾渲染精灵。\r\n */\r\nexport class TrailSprite3D extends RenderableSprite3D {\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _geometryFilter: TrailFilter;\r\n\r\n\t/**\r\n\t * Trail过滤器。\r\n\t */\r\n\tget trailFilter(): TrailFilter {\r\n\t\treturn (<TrailFilter>this._geometryFilter);\r\n\t}\r\n\r\n\t/**\r\n\t * Trail渲染器。\r\n\t */\r\n\tget trailRenderer(): TrailRenderer {\r\n\t\treturn (<TrailRenderer>this._render);\r\n\t}\r\n\r\n\tconstructor(name: string = null) {\r\n\t\tsuper(name);\r\n\t\tthis._render = new TrailRenderer(this);\r\n\t\tthis._geometryFilter = new TrailFilter(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tvar render: TrailRenderer = (<TrailRenderer>this._render);\r\n\t\tvar filter: TrailFilter = (<TrailFilter>this._geometryFilter);\r\n\t\tvar i: number, j: number;\r\n\t\tvar materials: any[] = data.materials;\r\n\t\tif (materials) {\r\n\t\t\tvar sharedMaterials: Material[] = render.sharedMaterials;\r\n\t\t\tvar materialCount: number = materials.length;\r\n\t\t\tsharedMaterials.length = materialCount;\r\n\t\t\tfor (i = 0; i < materialCount; i++)\r\n\t\t\t\tsharedMaterials[i] = Loader.getRes(materials[i].path);\r\n\t\t\trender.sharedMaterials = sharedMaterials;\r\n\t\t}\r\n\t\tfilter.time = data.time;\r\n\t\tfilter.minVertexDistance = data.minVertexDistance;\r\n\t\tfilter.widthMultiplier = data.widthMultiplier;\r\n\t\tfilter.textureMode = data.textureMode;\r\n\t\t(data.alignment != null) && (filter.alignment = data.alignment);\r\n\t\t//widthCurve\r\n\t\tvar widthCurve: FloatKeyframe[] = [];\r\n\t\tvar widthCurveData: any[] = data.widthCurve;\r\n\t\tfor (i = 0, j = widthCurveData.length; i < j; i++) {\r\n\t\t\tvar trailkeyframe: FloatKeyframe = new FloatKeyframe();\r\n\t\t\ttrailkeyframe.time = widthCurveData[i].time;\r\n\t\t\ttrailkeyframe.inTangent = widthCurveData[i].inTangent;\r\n\t\t\ttrailkeyframe.outTangent = widthCurveData[i].outTangent;\r\n\t\t\ttrailkeyframe.value = widthCurveData[i].value;\r\n\t\t\twidthCurve.push(trailkeyframe);\r\n\t\t}\r\n\t\tfilter.widthCurve = widthCurve;\r\n\t\t//colorGradient\r\n\t\tvar colorGradientData: any = data.colorGradient;\r\n\t\tvar colorKeys: any[] = colorGradientData.colorKeys;\r\n\t\tvar alphaKeys: any[] = colorGradientData.alphaKeys;\r\n\t\tvar colorGradient: Gradient = new Gradient(colorKeys.length, alphaKeys.length);\r\n\t\tcolorGradient.mode = colorGradientData.mode;\r\n\r\n\t\tfor (i = 0, j = colorKeys.length; i < j; i++) {\r\n\t\t\tvar colorKey: any = colorKeys[i];\r\n\t\t\tcolorGradient.addColorRGB(colorKey.time, new Color(colorKey.value[0], colorKey.value[1], colorKey.value[2], 1.0));\r\n\t\t}\r\n\r\n\t\tfor (i = 0, j = alphaKeys.length; i < j; i++) {\r\n\t\t\tvar alphaKey: any = alphaKeys[i];\r\n\t\t\tcolorGradient.addColorAlpha(alphaKey.time, alphaKey.value);\r\n\t\t}\r\n\t\tfilter.colorGradient = colorGradient;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onActive(): void {\r\n\t\tsuper._onActive();\r\n\t\tthis._transform.position.cloneTo(this._geometryFilter._lastPosition);//激活时需要重置上次位置\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(destObject: any, srcSprite: Node, dstSprite: Node): void {\r\n\t\tsuper._cloneTo(destObject, srcSprite, dstSprite);\r\n\t\tvar i: number, j: number;\r\n\t\tvar destTrailSprite3D: TrailSprite3D = (<TrailSprite3D>destObject);\r\n\r\n\t\tvar destTrailFilter: TrailFilter = destTrailSprite3D.trailFilter;\r\n\t\tdestTrailFilter.time = this.trailFilter.time;\r\n\t\tdestTrailFilter.minVertexDistance = this.trailFilter.minVertexDistance;\r\n\t\tdestTrailFilter.widthMultiplier = this.trailFilter.widthMultiplier;\r\n\t\tdestTrailFilter.textureMode = this.trailFilter.textureMode;\r\n\t\tdestTrailFilter.alignment = this.trailFilter.alignment;\r\n\r\n\t\tvar widthCurveData: FloatKeyframe[] = this.trailFilter.widthCurve;\r\n\t\tvar widthCurve: FloatKeyframe[] = [];\r\n\t\tfor (i = 0, j = widthCurveData.length; i < j; i++) {\r\n\t\t\tvar keyFrame: FloatKeyframe = new FloatKeyframe();\r\n\t\t\twidthCurveData[i].cloneTo(keyFrame);\r\n\t\t\twidthCurve.push(keyFrame);\r\n\t\t}\r\n\t\tdestTrailFilter.widthCurve = widthCurve;\r\n\r\n\t\tvar destColorGradient: Gradient = new Gradient(this.trailFilter.colorGradient.maxColorRGBKeysCount, this.trailFilter.colorGradient.maxColorAlphaKeysCount);\r\n\t\tthis.trailFilter.colorGradient.cloneTo(destColorGradient);\r\n\t\tdestTrailFilter.colorGradient = destColorGradient;\r\n\r\n\t\tvar destTrailRender: TrailRenderer = destTrailSprite3D.trailRenderer;\r\n\t\tdestTrailRender.sharedMaterial = this.trailRenderer.sharedMaterial;\r\n\t}\r\n\r\n\t/**\r\n\t * <p>销毁此对象。</p>\r\n\t * @param\tdestroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。\r\n\t * @override\r\n\t */\r\n\tdestroy(destroyChild: boolean = true): void {\r\n\t\tif (this.destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy(destroyChild);\r\n\t\t((<TrailFilter>this._geometryFilter)).destroy();\r\n\t\tthis._geometryFilter = null;\r\n\t}\r\n\r\n\tclear(): void {\r\n\t\t(<TrailFilter>this._geometryFilter).clear();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new TrailSprite3D();\r\n\t}\r\n}\r\n\r\n","import { IVertex } from \"../IVertex\"\r\nimport { VertexDeclaration } from \"../VertexDeclaration\"\r\nimport { VertexElement } from \"../VertexElement\"\r\nimport { VertexElementFormat } from \"../VertexElementFormat\"\r\nimport { Vector2 } from \"../../math/Vector2\"\r\nimport { Vector3 } from \"../../math/Vector3\"\r\n\r\n/**\r\n * <code>VertexPositionTerrain</code> 类用于创建位置、法线、纹理1、纹理2顶点结构。\r\n */\r\nexport class VertexPositionTerrain implements IVertex {\r\n\tstatic TERRAIN_POSITION0: number = 0;\r\n\tstatic TERRAIN_NORMAL0: number = 1;\r\n\tstatic TERRAIN_TEXTURECOORDINATE0: number = 2;\r\n\tstatic TERRAIN_TEXTURECOORDINATE1: number = 3;\r\n\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tVertexPositionTerrain._vertexDeclaration = new VertexDeclaration(40, [new VertexElement(0, VertexElementFormat.Vector3, VertexPositionTerrain.TERRAIN_POSITION0),\r\n\t\tnew VertexElement(12, VertexElementFormat.Vector3, VertexPositionTerrain.TERRAIN_NORMAL0),\r\n\t\tnew VertexElement(24, VertexElementFormat.Vector2, VertexPositionTerrain.TERRAIN_TEXTURECOORDINATE0),\r\n\t\tnew VertexElement(32, VertexElementFormat.Vector2, VertexPositionTerrain.TERRAIN_TEXTURECOORDINATE1)]);\r\n\t}\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexPositionTerrain._vertexDeclaration;\r\n\t}\r\n\r\n\tprivate _position: Vector3;\r\n\tprivate _normal: Vector3;\r\n\tprivate _textureCoord0: Vector2;\r\n\tprivate _textureCoord1: Vector2;\r\n\r\n\tget position(): Vector3 {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tget normal(): Vector3 {\r\n\t\treturn this._normal;\r\n\t}\r\n\r\n\tget textureCoord0(): Vector2 {\r\n\t\treturn this._textureCoord0;\r\n\t}\r\n\r\n\tget textureCoord1(): Vector2 {\r\n\t\treturn this._textureCoord1;\r\n\t}\r\n\r\n\tget vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexPositionTerrain._vertexDeclaration;\r\n\t}\r\n\r\n\tconstructor(position: Vector3, normal: Vector3, textureCoord0: Vector2, textureCoord1: Vector2) {\r\n\t\tthis._position = position;\r\n\t\tthis._normal = normal;\r\n\t\tthis._textureCoord0 = textureCoord0;\r\n\t\tthis._textureCoord1 = textureCoord1;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Rigidbody3D } from \"./Rigidbody3D\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\";\r\n\r\nexport class BulletInteractive {\r\n    /**@internal */\r\n    static _interactive: object = {\r\n        //Dynamic刚体,初始化时调用一次,Kinematic刚体,每次物理tick时调用(如果未进入睡眠状态),让物理引擎知道刚体位置。\r\n        \"getWorldTransform\": (rigidBodyID: number, worldTransPointer: number) => {\r\n            //已调整机制,引擎会统一处理通过Transform修改坐标更新包围盒队列\r\n            //var rigidBody:Rigidbody3D = __JS__(\"this._rigidbody\");\r\n            //if (!rigidBody._colliderShape)//Dynamic刚体初始化时没有colliderShape需要跳过\r\n            //return;\r\n            //\r\n            //rigidBody._simulation._updatedRigidbodies++;\r\n            //var physics3D:* = Laya3D._physics3D;\r\n            //var worldTrans:* = physics3D.wrapPointer(worldTransPointer, physics3D.btTransform);\r\n            //rigidBody._innerDerivePhysicsTransformation(worldTrans, true);\r\n        },\r\n        //Dynamic刚体,物理引擎每帧调用一次,用于更新渲染矩阵。\r\n        \"setWorldTransform\": (rigidBodyID: number, worldTransPointer: number) => {\r\n            var rigidBody: Rigidbody3D = PhysicsComponent._physicObjectsMap[rigidBodyID];\r\n            rigidBody._simulation._updatedRigidbodies++;\r\n            rigidBody._updateTransformComponent(worldTransPointer);\r\n        }\r\n    };\r\n}","import { Sprite3D } from \"../core/Sprite3D\";\r\nimport { Transform3D } from \"../core/Transform3D\";\r\nimport { Physics3DUtils } from \"../utils/Physics3DUtils\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\";\r\nimport { PhysicsTriggerComponent } from \"./PhysicsTriggerComponent\";\r\nimport { Physics3D } from \"./Physics3D\";\r\n\r\n/**\r\n * <code>PhysicsCollider</code> 类用于创建物理碰撞器。\r\n */\r\nexport class PhysicsCollider extends PhysicsTriggerComponent {\r\n\r\n\t/**\r\n\t * 创建一个 <code>PhysicsCollider</code> 实例。\r\n\t * @param collisionGroup 所属碰撞组。\r\n\t * @param canCollideWith 可产生碰撞的碰撞组。\r\n\t */\r\n\tconstructor(collisionGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER, canCollideWith: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER) {\r\n\t\tsuper(collisionGroup, canCollideWith);\r\n\t\tthis._enableProcessCollisions = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_addToSimulation(): void {\r\n\t\tthis._simulation._addPhysicsCollider(this, this._collisionGroup, this._canCollideWith);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_removeFromSimulation(): void {\r\n\t\tthis._simulation._removePhysicsCollider(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any): void {\r\n\t\t(data.friction != null) && (this.friction = data.friction);\r\n\t\t(data.rollingFriction != null) && (this.rollingFriction = data.rollingFriction);\r\n\t\t(data.restitution != null) && (this.restitution = data.restitution);\r\n\t\t(data.isTrigger != null) && (this.isTrigger = data.isTrigger);\r\n\t\tsuper._parse(data);\r\n\t\tthis._parseShape(data.shapes);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_onAdded(): void {\r\n\t\tvar bt: any = Physics3D._bullet;\r\n\t\tvar btColObj: number = bt.btCollisionObject_create();\r\n\t\tbt.btCollisionObject_setUserIndex(btColObj, this.id);\r\n\t\tbt.btCollisionObject_forceActivationState(btColObj, PhysicsComponent.ACTIVATIONSTATE_DISABLE_SIMULATION);//prevent simulation\r\n\r\n\t\tvar flags: number = bt.btCollisionObject_getCollisionFlags(btColObj);\r\n\t\tif (((<Sprite3D>this.owner)).isStatic) {//TODO:\r\n\t\t\tif ((flags & PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT) > 0)\r\n\t\t\t\tflags = flags ^ PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT;\r\n\t\t\tflags = flags | PhysicsComponent.COLLISIONFLAGS_STATIC_OBJECT;\r\n\t\t} else {\r\n\t\t\tif ((flags & PhysicsComponent.COLLISIONFLAGS_STATIC_OBJECT) > 0)\r\n\t\t\t\tflags = flags ^ PhysicsComponent.COLLISIONFLAGS_STATIC_OBJECT;\r\n\t\t\tflags = flags | PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT;\r\n\t\t}\r\n\t\tbt.btCollisionObject_setCollisionFlags(btColObj, flags);\r\n\t\tthis._btColliderObject = btColObj;\r\n\t\tsuper._onAdded();\r\n\t}\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { GeometryElement } from \"../../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { SkinnedMeshRenderer } from \"../../core/SkinnedMeshRenderer\";\r\nimport { SkinnedMeshSprite3D } from \"../../core/SkinnedMeshSprite3D\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Mesh } from \"./Mesh\";\r\nimport { LayaGPU } from \"../../../webgl/LayaGPU\";\r\nimport { IndexFormat } from \"../../graphics/IndexFormat\";\r\n\r\n\r\n/**\r\n * <code>SubMesh</code> 类用于创建子网格数据模板。\r\n */\r\nexport class SubMesh extends GeometryElement {\r\n\t/** @internal */\r\n\tprivate static _uniqueIDCounter: number = 0;\r\n\t/**@internal */\r\n\tprivate static _type: number = GeometryElement._typeCounter++;\r\n\r\n\t/** @internal */\r\n\t_mesh: Mesh;\r\n\r\n\t/** @internal */\r\n\t_boneIndicesList: Uint16Array[];\r\n\t/** @internal */\r\n\t_subIndexBufferStart: number[];\r\n\t/** @internal */\r\n\t_subIndexBufferCount: number[];\r\n\t/** @internal */\r\n\t_skinAnimationDatas: Float32Array[];\r\n\r\n\t/** @internal */\r\n\t_indexInMesh: number;\r\n\r\n\t/** @internal */\r\n\t_vertexStart: number;\r\n\t/** @internal */\r\n\t_indexStart: number;\r\n\t/** @internal */\r\n\t_indexCount: number;\r\n\t/** @internal */\r\n\t_indices: Uint16Array;\r\n\t/**@internal [只读]*/\r\n\t_vertexBuffer: VertexBuffer3D;\r\n\t/**@internal [只读]*/\r\n\t_indexBuffer: IndexBuffer3D;\r\n\r\n\t/** @internal */\r\n\t_id: number;\r\n\r\n\t/**\r\n\t * 获取索引数量。\r\n\t */\r\n\tget indexCount(): number {\r\n\t\treturn this._indexCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SubMesh</code> 实例。\r\n\t * @param\tmesh  网格数据模板。\r\n\t */\r\n\tconstructor(mesh: Mesh) {\r\n\t\tsuper();\r\n\t\tthis._id = ++SubMesh._uniqueIDCounter;\r\n\t\tthis._mesh = mesh;\r\n\t\tthis._boneIndicesList = [];\r\n\t\tthis._subIndexBufferStart = [];\r\n\t\tthis._subIndexBufferCount = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setIndexRange(indexStart: number, indexCount: number): void {\r\n\t\tthis._indexStart = indexStart;\r\n\t\tthis._indexCount = indexCount;\r\n\t\tthis._indices = new Uint16Array(this._indexBuffer.getData().buffer, indexStart * 2, indexCount);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_getType(): number {\r\n\t\treturn SubMesh._type;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\tthis._mesh._uploadVerticesData();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_render(state: RenderContext3D): void {\r\n\t\tvar mesh: Mesh = this._mesh;\r\n\t\tif (mesh.indexFormat === IndexFormat.UInt32 && !LayaGL.layaGPUInstance.supportElementIndexUint32()) {\r\n\t\t\tconsole.warn(\"SubMesh:this device do not support IndexFormat.UInt32.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar skinnedDatas: any[] = (<SkinnedMeshRenderer>state.renderElement.render)._skinnedData;\r\n\t\tvar glIndexFormat: number;\r\n\t\tvar byteCount:number;\r\n\t\tswitch (mesh.indexFormat) {\r\n\t\t\tcase IndexFormat.UInt32:\r\n\t\t\t\tglIndexFormat = gl.UNSIGNED_INT;\r\n\t\t\t\tbyteCount = 4;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt16:\r\n\t\t\t\tglIndexFormat = gl.UNSIGNED_SHORT;\r\n\t\t\t\tbyteCount = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt8:\r\n\t\t\t\tglIndexFormat = gl.UNSIGNED_BYTE;\r\n\t\t\t\tbyteCount = 1;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tmesh._bufferState.bind();\r\n\t\tif (skinnedDatas) {\r\n\t\t\tvar subSkinnedDatas: Float32Array[] = skinnedDatas[this._indexInMesh];\r\n\t\t\tfor (var i: number = 0, n: number = this._boneIndicesList.length; i < n; i++) {\r\n\t\t\t\tstate.shader.uploadCustomUniform(SkinnedMeshSprite3D.BONES, subSkinnedDatas[i]);\r\n\t\t\t\tgl.drawElements(gl.TRIANGLES, this._subIndexBufferCount[i], glIndexFormat, this._subIndexBufferStart[i] * byteCount);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tgl.drawElements(gl.TRIANGLES, this._indexCount, glIndexFormat, this._indexStart * byteCount);\r\n\t\t}\r\n\t\tStat.trianglesFaces += this._indexCount / 3;\r\n\t\tStat.renderBatches++;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 拷贝并获取子网格索引数据的副本。\r\n\t */\r\n\tgetIndices(): Uint16Array {\r\n\t\tif (this._mesh._isReadable)\r\n\t\t\treturn this._indices.slice();\r\n\t\telse\r\n\t\t\tthrow \"SubMesh:can't get indices on subMesh,mesh's isReadable must be true.\";\r\n\t}\r\n\r\n\t/**\r\n\t * 设置子网格索引。\r\n\t * @param indices \r\n\t */\r\n\tsetIndices(indices: Uint16Array): void {\r\n\t\tthis._indexBuffer.setData(indices, this._indexStart, 0, this._indexCount);\r\n\t}\r\n\r\n\t/**\r\n\t * {@inheritDoc GeometryElement.destroy}\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy();\r\n\t\tthis._indexBuffer.destroy();\r\n\t\tthis._indexBuffer = null;\r\n\t\tthis._mesh = null;\r\n\t\tthis._boneIndicesList = null;\r\n\t\tthis._subIndexBufferStart = null;\r\n\t\tthis._subIndexBufferCount = null;\r\n\t\tthis._skinAnimationDatas = null;\r\n\t}\r\n}\r\n\r\n","import { ILaya } from \"../../../../ILaya\";\r\nimport { Physics3D } from \"../../../d3/physics/Physics3D\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { Handler } from \"../../../utils/Handler\";\r\nimport { Bounds } from \"../../core/Bounds\";\r\nimport { BufferState } from \"../../core/BufferState\";\r\nimport { IClone } from \"../../core/IClone\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { IndexFormat } from \"../../graphics/IndexFormat\";\r\nimport { SubMeshInstanceBatch } from \"../../graphics/SubMeshInstanceBatch\";\r\nimport { VertexMesh } from \"../../graphics/Vertex/VertexMesh\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { VertexDeclaration } from \"../../graphics/VertexDeclaration\";\r\nimport { VertexElement } from \"../../graphics/VertexElement\";\r\nimport { VertexElementFormat } from \"../../graphics/VertexElementFormat\";\r\nimport { Color } from \"../../math/Color\";\r\nimport { Matrix4x4 } from \"../../math/Matrix4x4\";\r\nimport { Vector2 } from \"../../math/Vector2\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { SubMesh } from \"./SubMesh\";\r\n\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class skinnedMatrixCache {\r\n\treadonly subMeshIndex: number;\r\n\treadonly batchIndex: number;\r\n\treadonly batchBoneIndex: number;\r\n\tconstructor(subMeshIndex: number, batchIndex: number, batchBoneIndex: number) {\r\n\t\tthis.subMeshIndex = subMeshIndex;\r\n\t\tthis.batchIndex = batchIndex;\r\n\t\tthis.batchBoneIndex = batchBoneIndex;\r\n\t}\r\n}\r\n\r\n/**\r\n * <code>Mesh</code> 类用于创建文件网格数据模板。\r\n */\r\nexport class Mesh extends Resource implements IClone {\r\n\t/**Mesh资源。*/\r\n\tstatic MESH: string = \"MESH\";\r\n\t\r\n\tstatic MESH_INSTANCEBUFFER_TYPE_NORMAL:number = 0;\r\n\r\n\tstatic MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR:number = 1;\r\n\r\n\t/** @internal */\r\n\tprivate _tempVector30: Vector3 = new Vector3()\r\n\t/** @internal */\r\n\tprivate _tempVector31: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _tempVector32: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _nativeTempVector30: number;\r\n\t/** @internal */\r\n\tprivate static _nativeTempVector31: number;\r\n\t/** @internal */\r\n\tprivate static _nativeTempVector32: number;\r\n\r\n\t/**\r\n \t* @internal\r\n \t*/\r\n\tstatic __init__(): void {\r\n\t\tvar physics3D: any = Physics3D._bullet;\r\n\t\tif (physics3D) {\r\n\t\t\tMesh._nativeTempVector30 = physics3D.btVector3_create(0, 0, 0);\r\n\t\t\tMesh._nativeTempVector31 = physics3D.btVector3_create(0, 0, 0);\r\n\t\t\tMesh._nativeTempVector32 = physics3D.btVector3_create(0, 0, 0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 加载网格模板。\r\n\t * @param url 模板地址。\r\n\t * @param complete 完成回调。\r\n\t */\r\n\tstatic load(url: string, complete: Handler): void {\r\n\t\tILaya.loader.create(url, complete, null, Mesh.MESH);\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _btTriangleMesh: number;\r\n\t/** @internal */\r\n\tprivate _minVerticesUpdate: number = -1;\r\n\t/** @internal */\r\n\tprivate _maxVerticesUpdate: number = -1;\r\n\t/** @internal */\r\n\tprivate _needUpdateBounds: boolean = true;\r\n\t/** @internal */\r\n\tprivate _bounds: Bounds = new Bounds(new Vector3(), new Vector3());\r\n\r\n\t/** @internal */\r\n\t_isReadable: boolean;\r\n\t/** @internal */\r\n\t_bufferState: BufferState = new BufferState();\r\n\t/** @internal */\r\n\t_instanceBufferState: BufferState = new BufferState();\r\n\t/** @internal */\r\n\t_instanceBufferStateType:number = 0;\r\n\t/** @internal */\r\n\t_subMeshes: SubMesh[];\r\n\t/** @internal */\r\n\t_vertexBuffer: VertexBuffer3D = null;\r\n\t/** @internal */\r\n\t_indexBuffer: IndexBuffer3D = null;\r\n\r\n\t/** @internal */\r\n\t_boneNames: string[];\r\n\t/** @internal */\r\n\t_inverseBindPoses: Matrix4x4[];\r\n\t/** @internal */\r\n\t_skinnedMatrixCaches: skinnedMatrixCache[] = [];\r\n\t/** @internal */\r\n\t_vertexCount: number = 0;\r\n\t/** @internal */\r\n\t_indexFormat: IndexFormat = IndexFormat.UInt16;\r\n\r\n\t/**\r\n\t * 网格的全局默认绑定动作逆矩阵。\r\n\t */\r\n\tget inverseAbsoluteBindPoses(): Matrix4x4[] {\r\n\t\treturn this._inverseBindPoses;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取顶点个数。\r\n\t */\r\n\tget vertexCount(): number {\r\n\t\treturn this._vertexCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取索引个数。\r\n\t */\r\n\tget indexCount(): number {\r\n\t\treturn this._indexBuffer.indexCount;\r\n\t}\r\n\r\n\t/**\r\n\t * SubMesh的个数。\r\n\t */\r\n\tget subMeshCount(): number {\r\n\t\treturn this._subMeshes.length;\r\n\t}\r\n\r\n\t/**\r\n\t * 边界。\r\n\t */\r\n\tget bounds(): Bounds {\r\n\t\treturn this._bounds;\r\n\t}\r\n\r\n\tset bounds(value: Bounds) {\r\n\t\tif (this._bounds !== value)\r\n\t\t\tvalue.cloneTo(this._bounds);\r\n\t}\r\n\r\n\t/**\r\n\t * 索引格式。\r\n\t */\r\n\tget indexFormat(): IndexFormat {\r\n\t\treturn this._indexFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Mesh</code> 实例,禁止使用。\r\n\t * @param isReadable 是否可读。\r\n\t */\r\n\tconstructor(isReadable: boolean = true) {\r\n\t\tsuper();\r\n\t\tthis._isReadable = isReadable;\r\n\t\tthis._subMeshes = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getPositionElement(vertexBuffer: VertexBuffer3D): VertexElement {\r\n\t\tvar vertexElements: any[] = vertexBuffer.vertexDeclaration._vertexElements;\r\n\t\tfor (var i: number = 0, n: number = vertexElements.length; i < n; i++) {\r\n\t\t\tvar vertexElement: VertexElement = vertexElements[i];\r\n\t\t\tif (vertexElement._elementFormat === VertexElementFormat.Vector3 && vertexElement._elementUsage === VertexMesh.MESH_POSITION0)\r\n\t\t\t\treturn vertexElement;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getVerticeElementData(data: Array<Vector2 | Vector3 | Vector4 | Color>, elementUsage: number): void {\r\n\t\tdata.length = this._vertexCount;\r\n\t\tvar verDec: VertexDeclaration = this._vertexBuffer.vertexDeclaration;\r\n\t\tvar element: VertexElement = verDec.getVertexElementByUsage(elementUsage);\r\n\t\tif (element) {\r\n\t\t\tvar uint8Vertices: Uint8Array = this._vertexBuffer.getUint8Data();\r\n\t\t\tvar floatVertices: Float32Array = this._vertexBuffer.getFloat32Data();\r\n\t\t\tvar uint8VerStr: number = verDec.vertexStride;\r\n\t\t\tvar floatVerStr: number = uint8VerStr / 4;\r\n\t\t\tvar uint8EleOffset: number = element._offset;\r\n\t\t\tvar floatEleOffset: number = uint8EleOffset / 4;\r\n\r\n\t\t\tswitch (elementUsage) {\r\n\t\t\t\tcase VertexMesh.MESH_TEXTURECOORDINATE0:\r\n\t\t\t\tcase VertexMesh.MESH_TEXTURECOORDINATE1:\r\n\t\t\t\t\tfor (var i: number = 0; i < this._vertexCount; i++) {\r\n\t\t\t\t\t\tvar offset: number = floatVerStr * i + floatEleOffset;\r\n\t\t\t\t\t\tdata[i] = new Vector2(floatVertices[offset], floatVertices[offset + 1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase VertexMesh.MESH_POSITION0:\r\n\t\t\t\tcase VertexMesh.MESH_NORMAL0:\r\n\t\t\t\t\tfor (var i: number = 0; i < this._vertexCount; i++) {\r\n\t\t\t\t\t\tvar offset: number = floatVerStr * i + floatEleOffset;\r\n\t\t\t\t\t\tdata[i] = new Vector3(floatVertices[offset], floatVertices[offset + 1], floatVertices[offset + 2]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase VertexMesh.MESH_TANGENT0:\r\n\t\t\t\tcase VertexMesh.MESH_BLENDWEIGHT0:\r\n\t\t\t\t\tfor (var i: number = 0; i < this._vertexCount; i++) {\r\n\t\t\t\t\t\tvar offset: number = floatVerStr * i + floatEleOffset;\r\n\t\t\t\t\t\tdata[i] = new Vector4(floatVertices[offset], floatVertices[offset + 1], floatVertices[offset + 2], floatVertices[offset + 3]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase VertexMesh.MESH_COLOR0:\r\n\t\t\t\t\tfor (var i: number = 0; i < this._vertexCount; i++) {\r\n\t\t\t\t\t\tvar offset: number = floatVerStr * i + floatEleOffset;\r\n\t\t\t\t\t\tdata[i] = new Color(floatVertices[offset], floatVertices[offset + 1], floatVertices[offset + 2], floatVertices[offset + 3]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase VertexMesh.MESH_BLENDINDICES0:\r\n\t\t\t\t\tfor (var i: number = 0; i < this._vertexCount; i++) {\r\n\t\t\t\t\t\tvar offset: number = uint8VerStr * i + uint8EleOffset;\r\n\t\t\t\t\t\tdata[i] = new Vector4(uint8Vertices[offset], uint8Vertices[offset + 1], uint8Vertices[offset + 2], uint8Vertices[offset + 3]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"Mesh:Unknown elementUsage.\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _setVerticeElementData(data: Array<Vector2 | Vector3 | Vector4 | Color>, elementUsage: number): void {\r\n\t\tvar verDec: VertexDeclaration = this._vertexBuffer.vertexDeclaration;\r\n\t\tvar element: VertexElement = verDec.getVertexElementByUsage(elementUsage);\r\n\t\tif (element) {\r\n\t\t\tvar uint8Vertices: Uint8Array = this._vertexBuffer.getUint8Data();\r\n\t\t\tvar floatVertices: Float32Array = this._vertexBuffer.getFloat32Data();\r\n\t\t\tvar uint8VerStr: number = verDec.vertexStride;\r\n\t\t\tvar float8VerStr: number = uint8VerStr / 4;\r\n\t\t\tvar uint8EleOffset: number = element._offset;\r\n\t\t\tvar floatEleOffset: number = uint8EleOffset / 4;\r\n\t\t\tswitch (elementUsage) {\r\n\t\t\t\tcase VertexMesh.MESH_TEXTURECOORDINATE0:\r\n\t\t\t\tcase VertexMesh.MESH_TEXTURECOORDINATE1:\r\n\t\t\t\t\tfor (var i: number = 0, n: number = data.length; i < n; i++) {\r\n\t\t\t\t\t\tvar offset: number = float8VerStr * i + floatEleOffset;\r\n\t\t\t\t\t\tvar vec2: Vector2 = <Vector2>data[i];\r\n\t\t\t\t\t\tfloatVertices[offset] = vec2.x;\r\n\t\t\t\t\t\tfloatVertices[offset + 1] = vec2.y;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase VertexMesh.MESH_POSITION0:\r\n\t\t\t\tcase VertexMesh.MESH_NORMAL0:\r\n\t\t\t\t\tfor (var i: number = 0, n: number = data.length; i < n; i++) {\r\n\t\t\t\t\t\tvar offset: number = float8VerStr * i + floatEleOffset;\r\n\t\t\t\t\t\tvar vec3: Vector3 = <Vector3>data[i];\r\n\t\t\t\t\t\tfloatVertices[offset] = vec3.x;\r\n\t\t\t\t\t\tfloatVertices[offset + 1] = vec3.y;\r\n\t\t\t\t\t\tfloatVertices[offset + 2] = vec3.z;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase VertexMesh.MESH_TANGENT0:\r\n\t\t\t\tcase VertexMesh.MESH_BLENDWEIGHT0:\r\n\t\t\t\t\tfor (var i: number = 0, n: number = data.length; i < n; i++) {\r\n\t\t\t\t\t\tvar offset: number = float8VerStr * i + floatEleOffset;\r\n\t\t\t\t\t\tvar vec4: Vector4 = <Vector4>data[i];\r\n\t\t\t\t\t\tfloatVertices[offset] = vec4.x;\r\n\t\t\t\t\t\tfloatVertices[offset + 1] = vec4.y;\r\n\t\t\t\t\t\tfloatVertices[offset + 2] = vec4.z;\r\n\t\t\t\t\t\tfloatVertices[offset + 3] = vec4.w;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase VertexMesh.MESH_COLOR0:\r\n\t\t\t\t\tfor (var i: number = 0, n: number = data.length; i < n; i++) {\r\n\t\t\t\t\t\tvar offset: number = float8VerStr * i + floatEleOffset;\r\n\t\t\t\t\t\tvar cor: Color = <Color>data[i];\r\n\t\t\t\t\t\tfloatVertices[offset] = cor.r;\r\n\t\t\t\t\t\tfloatVertices[offset + 1] = cor.g;\r\n\t\t\t\t\t\tfloatVertices[offset + 2] = cor.b;\r\n\t\t\t\t\t\tfloatVertices[offset + 3] = cor.a;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase VertexMesh.MESH_BLENDINDICES0:\r\n\t\t\t\t\tfor (var i: number = 0, n: number = data.length; i < n; i++) {\r\n\t\t\t\t\t\tvar offset: number = uint8VerStr * i + uint8EleOffset;\r\n\t\t\t\t\t\tvar vec4: Vector4 = <Vector4>data[i];\r\n\t\t\t\t\t\tuint8Vertices[offset] = vec4.x;\r\n\t\t\t\t\t\tuint8Vertices[offset + 1] = vec4.y;\r\n\t\t\t\t\t\tuint8Vertices[offset + 2] = vec4.z;\r\n\t\t\t\t\t\tuint8Vertices[offset + 3] = vec4.w;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"Mesh:Unknown elementUsage.\";\r\n\t\t\t}\r\n\t\t\tthis._minVerticesUpdate = 0;\r\n\t\t\tthis._maxVerticesUpdate = Number.MAX_SAFE_INTEGER;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.warn(\"Mesh: the mesh don't have  this VertexElement.\");\r\n\t\t\t//TODO:vertexBuffer结构发生变化\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _disposeResource(): void {\r\n\t\tfor (var i: number = 0, n: number = this._subMeshes.length; i < n; i++)\r\n\t\t\tthis._subMeshes[i].destroy();\r\n\t\tthis._btTriangleMesh && Physics3D._bullet.btStridingMeshInterface_destroy(this._btTriangleMesh);\r\n\t\tthis._vertexBuffer.destroy();\r\n\t\tthis._indexBuffer.destroy();\r\n\t\tthis._bufferState.destroy();\r\n\t\tthis._instanceBufferState.destroy();\r\n\t\tthis._setCPUMemory(0);\r\n\t\tthis._setGPUMemory(0);\r\n\t\tthis._bufferState = null;\r\n\t\tthis._instanceBufferState = null;\r\n\t\tthis._vertexBuffer = null;\r\n\t\tthis._indexBuffer = null;\r\n\t\tthis._subMeshes = null;\r\n\t\tthis._btTriangleMesh = null;\r\n\t\tthis._indexBuffer = null;\r\n\t\tthis._boneNames = null;\r\n\t\tthis._inverseBindPoses = null;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\t_setSubMeshes(subMeshes: SubMesh[]): void {\r\n\t\tthis._subMeshes = subMeshes\r\n\t\tfor (var i: number = 0, n: number = subMeshes.length; i < n; i++)\r\n\t\t\tsubMeshes[i]._indexInMesh = i;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setBuffer(vertexBuffer: VertexBuffer3D, indexBuffer: IndexBuffer3D): void {\r\n\t\tvar bufferState: BufferState = this._bufferState;\r\n\t\tbufferState.bind();\r\n\t\tbufferState.applyVertexBuffer(vertexBuffer);\r\n\t\tbufferState.applyIndexBuffer(indexBuffer);\r\n\t\tbufferState.unBind();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setInstanceBuffer(instanceBufferStateType:number){\r\n\t\tvar instanceBufferState: BufferState = this._instanceBufferState;\r\n\t\tinstanceBufferState.bind();\r\n\t\tinstanceBufferState.applyVertexBuffer(this._vertexBuffer);\r\n\t\tinstanceBufferState.applyInstanceVertexBuffer(SubMeshInstanceBatch.instance.instanceWorldMatrixBuffer);\r\n\t\tinstanceBufferState.applyInstanceVertexBuffer(SubMeshInstanceBatch.instance.instanceMVPMatrixBuffer);\r\n\t\tswitch(instanceBufferStateType){\r\n\t\t\tcase Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR:\r\n\t\t\t\tinstanceBufferState.applyInstanceVertexBuffer(SubMeshInstanceBatch.instance.instanceSimpleAnimatorBuffer)\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tinstanceBufferState.applyIndexBuffer(this._indexBuffer);\r\n\t\tinstanceBufferState.unBind();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getPhysicMesh(): any {\r\n\t\tif (!this._btTriangleMesh) {\r\n\t\t\tvar bt: any = Physics3D._bullet;\r\n\t\t\tvar triangleMesh: number = bt.btTriangleMesh_create();//TODO:独立抽象btTriangleMesh,增加内存复用\r\n\t\t\tvar nativePositio0: number = Mesh._nativeTempVector30;\r\n\t\t\tvar nativePositio1: number = Mesh._nativeTempVector31;\r\n\t\t\tvar nativePositio2: number = Mesh._nativeTempVector32;\r\n\t\t\tvar position0: Vector3 = this._tempVector30;\r\n\t\t\tvar position1: Vector3 = this._tempVector31;\r\n\t\t\tvar position2: Vector3 = this._tempVector32;\r\n\r\n\t\t\tvar vertexBuffer: VertexBuffer3D = this._vertexBuffer;\r\n\t\t\tvar positionElement: VertexElement = this._getPositionElement(vertexBuffer);\r\n\t\t\tvar verticesData: Float32Array = vertexBuffer.getFloat32Data();\r\n\t\t\tvar floatCount: number = vertexBuffer.vertexDeclaration.vertexStride / 4;\r\n\t\t\tvar posOffset: number = positionElement._offset / 4;\r\n\r\n\t\t\tvar indices: Uint16Array = this._indexBuffer.getData();//TODO:API修改问题\r\n\t\t\tfor (var i: number = 0, n: number = indices.length; i < n; i += 3) {\r\n\t\t\t\tvar p0Index: number = indices[i] * floatCount + posOffset;\r\n\t\t\t\tvar p1Index: number = indices[i + 1] * floatCount + posOffset;\r\n\t\t\t\tvar p2Index: number = indices[i + 2] * floatCount + posOffset;\r\n\t\t\t\tposition0.setValue(verticesData[p0Index], verticesData[p0Index + 1], verticesData[p0Index + 2]);\r\n\t\t\t\tposition1.setValue(verticesData[p1Index], verticesData[p1Index + 1], verticesData[p1Index + 2]);\r\n\t\t\t\tposition2.setValue(verticesData[p2Index], verticesData[p2Index + 1], verticesData[p2Index + 2]);\r\n\r\n\t\t\t\tUtils3D._convertToBulletVec3(position0, nativePositio0, true);\r\n\t\t\t\tUtils3D._convertToBulletVec3(position1, nativePositio1, true);\r\n\t\t\t\tUtils3D._convertToBulletVec3(position2, nativePositio2, true);\r\n\t\t\t\tbt.btTriangleMesh_addTriangle(triangleMesh, nativePositio0, nativePositio1, nativePositio2, true);\r\n\t\t\t}\r\n\t\t\tthis._btTriangleMesh = triangleMesh;\r\n\t\t}\r\n\t\treturn this._btTriangleMesh;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_uploadVerticesData(): void {\r\n\t\tvar min: number = this._minVerticesUpdate;\r\n\t\tvar max: number = this._maxVerticesUpdate;\r\n\t\tif (min !== -1 && max !== -1) {\r\n\t\t\tvar offset: number = min;\r\n\t\t\tthis._vertexBuffer.setData(this._vertexBuffer.getUint8Data().buffer, offset, offset, max - min);\r\n\t\t\tthis._minVerticesUpdate = -1;\r\n\t\t\tthis._maxVerticesUpdate = -1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 根据获取子网格。\r\n\t * @param index 索引。\r\n\t */\r\n\tgetSubMesh(index: number): SubMesh {\r\n\t\treturn this._subMeshes[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 拷贝并填充位置数据至数组。\r\n\t * @param positions 位置数组。\r\n\t * @remark 该方法为拷贝操作，比较耗费性能。\r\n\t */\r\n\tgetPositions(positions: Vector3[]): void {\r\n\t\tif (this._isReadable)\r\n\t\t\tthis._getVerticeElementData(positions, VertexMesh.MESH_POSITION0);\r\n\t\telse\r\n\t\t\tthrow \"Mesh:can't get positions on mesh,isReadable must be true.\";\r\n\t}\r\n\r\n\t/**\r\n\t * 设置位置数据。\r\n\t * @param positions 位置。\r\n\t */\r\n\tsetPositions(positions: Vector3[]): void {\r\n\t\tif (this._isReadable) {\r\n\t\t\tthis._setVerticeElementData(positions, VertexMesh.MESH_POSITION0);\r\n\t\t\tthis._needUpdateBounds = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow \"Mesh:setPosition() need isReadable must be true or use setVertices().\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 拷贝并填充颜色数据至数组。\r\n\t * @param colors 颜色数组。\r\n\t * @remark 该方法为拷贝操作，比较耗费性能。\r\n\t */\r\n\tgetColors(colors: Color[]): void {\r\n\t\tif (this._isReadable)\r\n\t\t\tthis._getVerticeElementData(colors, VertexMesh.MESH_COLOR0);\r\n\t\telse\r\n\t\t\tthrow \"Mesh:can't get colors on mesh,isReadable must be true.\";\r\n\t}\r\n\r\n\t/**\r\n\t * 设置颜色数据。\r\n\t * @param colors  颜色。\r\n\t */\r\n\tsetColors(colors: Color[]): void {\r\n\t\tif (this._isReadable)\r\n\t\t\tthis._setVerticeElementData(colors, VertexMesh.MESH_COLOR0);\r\n\t\telse\r\n\t\t\tthrow \"Mesh:setColors() need isReadable must be true or use setVertices().\";\r\n\t}\r\n\r\n\t/**\r\n\t * 拷贝并填充纹理坐标数据至数组。\r\n\t * @param uvs 纹理坐标数组。\r\n\t * @param channel 纹理坐标通道。\r\n\t * @remark 该方法为拷贝操作，比较耗费性能。\r\n\t */\r\n\tgetUVs(uvs: Vector2[], channel: number = 0): void {\r\n\t\tif (this._isReadable) {\r\n\t\t\tswitch (channel) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tthis._getVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis._getVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"Mesh:Invalid channel.\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow \"Mesh:can't get uvs on mesh,isReadable must be true.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 设置纹理坐标数据。\r\n\t * @param uvs 纹理坐标。\r\n\t * @param channel 纹理坐标通道。\r\n\t */\r\n\tsetUVs(uvs: Vector2[], channel: number = 0): void {\r\n\t\tif (this._isReadable) {\r\n\t\t\tswitch (channel) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tthis._setVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis._setVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"Mesh:Invalid channel.\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow \"Mesh:setUVs() need isReadable must be true or use setVertices().\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 拷贝并填充法线数据至数组。\r\n\t * @param normals 法线数组。\r\n\t * @remark 该方法为拷贝操作，比较耗费性能。\r\n\t */\r\n\tgetNormals(normals: Vector3[]): void {\r\n\t\tif (this._isReadable)\r\n\t\t\tthis._getVerticeElementData(normals, VertexMesh.MESH_NORMAL0);\r\n\t\telse\r\n\t\t\tthrow \"Mesh:can't get colors on mesh,isReadable must be true.\";\r\n\t}\r\n\r\n\t/**\r\n\t * 设置法线数据。\r\n\t * @param normals 法线。 \r\n\t */\r\n\tsetNormals(normals: Vector3[]): void {\r\n\t\tif (this._isReadable)\r\n\t\t\tthis._setVerticeElementData(normals, VertexMesh.MESH_NORMAL0);\r\n\t\telse\r\n\t\t\tthrow \"Mesh:setNormals() need must be true or use setVertices().\";\r\n\t}\r\n\r\n\t/**\r\n\t * 拷贝并填充切线数据至数组。\r\n\t * @param tangents 切线。\r\n\t */\r\n\tgetTangents(tangents: Vector4[]): void {\r\n\t\tif (this._isReadable)\r\n\t\t\tthis._getVerticeElementData(tangents, VertexMesh.MESH_TANGENT0);\r\n\t\telse\r\n\t\t\tthrow \"Mesh:can't get colors on mesh,isReadable must be true.\";\r\n\t}\r\n\r\n\t/**\r\n\t * 设置切线数据。\r\n\t * @param tangents 切线。\r\n\t */\r\n\tsetTangents(tangents: Vector4[]): void {\r\n\t\tif (this._isReadable)\r\n\t\t\tthis._setVerticeElementData(tangents, VertexMesh.MESH_TANGENT0);\r\n\t\telse\r\n\t\t\tthrow \"Mesh:setTangents() need isReadable must be true or use setVertices().\";\r\n\t}\r\n\r\n\t/**\r\n\t* 获取骨骼权重。\r\n\t* @param boneWeights 骨骼权重。\r\n\t*/\r\n\tgetBoneWeights(boneWeights: Vector4[]): void {\r\n\t\tif (this._isReadable)\r\n\t\t\tthis._getVerticeElementData(boneWeights, VertexMesh.MESH_BLENDWEIGHT0);\r\n\t\telse\r\n\t\t\tthrow \"Mesh:can't get boneWeights on mesh,isReadable must be true.\";\r\n\t}\r\n\r\n\t/**\r\n\t* 拷贝并填充骨骼权重数据至数组。\r\n\t* @param boneWeights 骨骼权重。\r\n\t*/\r\n\tsetBoneWeights(boneWeights: Vector4[]): void {\r\n\t\tif (this._isReadable)\r\n\t\t\tthis._setVerticeElementData(boneWeights, VertexMesh.MESH_BLENDWEIGHT0);\r\n\t\telse\r\n\t\t\tthrow \"Mesh:setBoneWeights() need isReadable must be true or use setVertices().\";\r\n\t}\r\n\r\n\t/**\r\n\t* 获取骨骼索引。\r\n\t* @param boneIndices 骨骼索引。\r\n\t*/\r\n\tgetBoneIndices(boneIndices: Vector4[]): void {\r\n\t\tif (this._isReadable)\r\n\t\t\tthis._getVerticeElementData(boneIndices, VertexMesh.MESH_BLENDINDICES0);\r\n\t\telse\r\n\t\t\tthrow \"Mesh:can't get boneIndices on mesh,isReadable must be true.\";\r\n\t}\r\n\r\n\t/**\r\n\t* 拷贝并填充骨骼索引数据至数组。\r\n\t* @param boneWeights 骨骼索引。\r\n\t*/\r\n\tsetBoneIndices(boneIndices: Vector4[]): void {\r\n\t\tif (this._isReadable)\r\n\t\t\tthis._setVerticeElementData(boneIndices, VertexMesh.MESH_BLENDINDICES0);\r\n\t\telse\r\n\t\t\tthrow \"Mesh:setBoneIndices() need isReadable must be true or use setVertices().\";\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 将Mesh标记为不可读,可减少内存，标记后不可再调用相关读取方法。\r\n\t */\r\n\tmarkAsUnreadbale(): void {\r\n\t\tthis._uploadVerticesData();\r\n\t\tthis._vertexBuffer.markAsUnreadbale();\r\n\t\tthis._isReadable = false;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取顶点声明。\r\n\t */\r\n\tgetVertexDeclaration(): VertexDeclaration {\r\n\t\treturn this._vertexBuffer._vertexDeclaration;\r\n\t}\r\n\r\n\t/**\r\n\t* 拷贝并获取顶点数据的副本。\r\n\t* @return 顶点数据。\r\n\t*/\r\n\tgetVertices(): ArrayBuffer {\r\n\t\tif (this._isReadable)\r\n\t\t\treturn this._vertexBuffer.getUint8Data().buffer.slice(0);\r\n\t\telse\r\n\t\t\tthrow \"Mesh:can't get vertices on mesh,isReadable must be true.\";\r\n\t}\r\n\r\n\t/**\r\n\t* 设置顶点数据。\r\n\t* @param vertices 顶点数据。\r\n\t*/\r\n\tsetVertices(vertices: ArrayBuffer): void {\r\n\t\tthis._vertexBuffer.setData(vertices);\r\n\t\tthis._needUpdateBounds = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 拷贝并获取网格索引的副本。\r\n\t * @return 网格索引。\r\n\t */\r\n\tgetIndices(): Uint8Array | Uint16Array | Uint32Array {\r\n\t\tif (this._isReadable)\r\n\t\t\treturn this._indexBuffer.getData().slice();\r\n\t\telse\r\n\t\t\tthrow \"Mesh:can't get indices on subMesh,mesh's isReadable must be true.\";\r\n\t}\r\n\r\n\t/**\r\n\t * 设置网格索引。\r\n\t * @param indices 网格索引。\r\n\t */\r\n\tsetIndices(indices: Uint8Array | Uint16Array | Uint32Array): void {\r\n\t\tvar format: IndexFormat;\r\n\t\tif (indices instanceof Uint32Array)\r\n\t\t\tformat = IndexFormat.UInt32;\r\n\t\telse if (indices instanceof Uint16Array)\r\n\t\t\tformat = IndexFormat.UInt16;\r\n\t\telse if (indices instanceof Uint8Array)\r\n\t\t\tformat = IndexFormat.UInt8;\r\n\r\n\t\tvar indexBuffer: IndexBuffer3D = this._indexBuffer;\r\n\t\tif (this._indexFormat !== format || indexBuffer.indexCount !== indices.length) {//format chang and length chang will recreate the indexBuffer\r\n\t\t\tindexBuffer.destroy();\r\n\t\t\tthis._indexBuffer = indexBuffer = new IndexBuffer3D(format, indices.length, LayaGL.instance.STATIC_DRAW, this._isReadable);\r\n\t\t}\r\n\t\tindexBuffer.setData(indices);\r\n\t\tthis._indexFormat = format;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 从模型位置数据生成包围盒。\r\n\t */\r\n\tcalculateBounds(): void {\r\n\t\tif (this._isReadable) {\r\n\t\t\tif (this._needUpdateBounds) {\r\n\t\t\t\tvar min: Vector3 = this._tempVector30;\r\n\t\t\t\tvar max: Vector3 = this._tempVector31;\r\n\t\t\t\tmin.x = min.y = min.z = Number.MAX_VALUE;\r\n\t\t\t\tmax.x = max.y = max.z = -Number.MAX_VALUE;\r\n\r\n\t\t\t\tvar vertexBuffer: VertexBuffer3D = this._vertexBuffer;\r\n\t\t\t\tvar positionElement: VertexElement = this._getPositionElement(vertexBuffer);\r\n\t\t\t\tvar verticesData: Float32Array = vertexBuffer.getFloat32Data();\r\n\t\t\t\tvar floatCount: number = vertexBuffer.vertexDeclaration.vertexStride / 4;\r\n\t\t\t\tvar posOffset: number = positionElement._offset / 4;\r\n\t\t\t\tfor (var j: number = 0, m: number = verticesData.length; j < m; j += floatCount) {\r\n\t\t\t\t\tvar ofset: number = j + posOffset;\r\n\t\t\t\t\tvar pX: number = verticesData[ofset];\r\n\t\t\t\t\tvar pY: number = verticesData[ofset + 1];\r\n\t\t\t\t\tvar pZ: number = verticesData[ofset + 2];\r\n\t\t\t\t\tmin.x = Math.min(min.x, pX);\r\n\t\t\t\t\tmin.y = Math.min(min.y, pY);\r\n\t\t\t\t\tmin.z = Math.min(min.z, pZ);\r\n\t\t\t\t\tmax.x = Math.max(max.x, pX);\r\n\t\t\t\t\tmax.y = Math.max(max.y, pY);\r\n\t\t\t\t\tmax.z = Math.max(max.z, pZ);\r\n\t\t\t\t}\r\n\t\t\t\tthis._bounds.setMin(min);\r\n\t\t\t\tthis._bounds.setMax(max);\r\n\t\t\t\tthis._needUpdateBounds = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow \"Mesh:can't calculate bounds on subMesh,mesh's isReadable must be true.\";\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {//[实现IClone接口]\r\n\t\tvar destMesh: Mesh = <Mesh>destObject;\r\n\t\tvar vb: VertexBuffer3D = this._vertexBuffer;\r\n\t\tvar destVB: VertexBuffer3D = new VertexBuffer3D(vb._byteLength, vb.bufferUsage, vb.canRead);\r\n\t\tdestVB.vertexDeclaration = vb.vertexDeclaration;\r\n\t\tdestVB.setData(vb.getUint8Data().slice().buffer);\r\n\t\tdestMesh._vertexBuffer = destVB;\r\n\t\tdestMesh._vertexCount = this._vertexCount;\r\n\t\tvar ib: IndexBuffer3D = this._indexBuffer;\r\n\t\tvar destIB: IndexBuffer3D = new IndexBuffer3D(IndexFormat.UInt16, ib.indexCount, ib.bufferUsage, ib.canRead);\r\n\t\tdestIB.setData(ib.getData().slice());\r\n\t\tdestMesh._indexBuffer = destIB;\r\n\r\n\t\tdestMesh._setBuffer(destMesh._vertexBuffer, destIB);\r\n\t\tdestMesh._setInstanceBuffer(this._instanceBufferStateType);\r\n\t\tdestMesh._setCPUMemory(this.cpuMemory);\r\n\t\tdestMesh._setGPUMemory(this.gpuMemory);\r\n\r\n\t\tvar i: number;\r\n\t\tvar boneNames: string[] = this._boneNames;\r\n\t\tif (boneNames) {\r\n\t\t\tvar destBoneNames: string[] = destMesh._boneNames = [];\r\n\t\t\tfor (i = 0; i < boneNames.length; i++)\r\n\t\t\t\tdestBoneNames[i] = boneNames[i];\r\n\t\t}\r\n\r\n\t\tvar inverseBindPoses: Matrix4x4[] = this._inverseBindPoses;\r\n\t\tif (inverseBindPoses) {\r\n\t\t\tvar destInverseBindPoses: Matrix4x4[] = destMesh._inverseBindPoses = [];\r\n\t\t\tfor (i = 0; i < inverseBindPoses.length; i++)\r\n\t\t\t\tdestInverseBindPoses[i] = inverseBindPoses[i];\r\n\t\t}\r\n\r\n\t\tvar cacheLength: number = this._skinnedMatrixCaches.length;\r\n\t\tdestMesh._skinnedMatrixCaches.length = cacheLength;\r\n\t\tfor (i = 0; i < cacheLength; i++) {\r\n\t\t\tvar skinnedCache: skinnedMatrixCache = this._skinnedMatrixCaches[i];\r\n\t\t\tdestMesh._skinnedMatrixCaches[i] = new skinnedMatrixCache(skinnedCache.subMeshIndex, skinnedCache.batchIndex, skinnedCache.batchBoneIndex);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < this.subMeshCount; i++) {\r\n\t\t\tvar subMesh: SubMesh = this._subMeshes[i];\r\n\t\t\tvar subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\r\n\t\t\tvar subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\r\n\t\t\tvar boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\r\n\t\t\tvar destSubmesh: SubMesh = new SubMesh(destMesh);\r\n\r\n\t\t\tdestSubmesh._subIndexBufferStart.length = subIndexBufferStart.length;\r\n\t\t\tdestSubmesh._subIndexBufferCount.length = subIndexBufferCount.length;\r\n\t\t\tdestSubmesh._boneIndicesList.length = boneIndicesList.length;\r\n\r\n\t\t\tfor (var j: number = 0; j < subIndexBufferStart.length; j++)\r\n\t\t\t\tdestSubmesh._subIndexBufferStart[j] = subIndexBufferStart[j];\r\n\t\t\tfor (j = 0; j < subIndexBufferCount.length; j++)\r\n\t\t\t\tdestSubmesh._subIndexBufferCount[j] = subIndexBufferCount[j];\r\n\t\t\tfor (j = 0; j < boneIndicesList.length; j++)\r\n\t\t\t\tdestSubmesh._boneIndicesList[j] = new Uint16Array(boneIndicesList[j]);\r\n\r\n\t\t\tdestSubmesh._indexBuffer = destIB;\r\n\t\t\tdestSubmesh._indexStart = subMesh._indexStart;\r\n\t\t\tdestSubmesh._indexCount = subMesh._indexCount;\r\n\t\t\tdestSubmesh._indices = new Uint16Array(destIB.getData().buffer, subMesh._indexStart * 2, subMesh._indexCount);\r\n\t\t\tvar vertexBuffer: VertexBuffer3D = destMesh._vertexBuffer;\r\n\t\t\tdestSubmesh._vertexBuffer = vertexBuffer;\r\n\t\t\tdestMesh._subMeshes.push(destSubmesh);\r\n\t\t}\r\n\t\tdestMesh._setSubMeshes(destMesh._subMeshes);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {//[实现IClone接口]\r\n\t\tvar dest: Mesh = new Mesh();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\r\n\r\n\t//------------------------------------------NATIVE----------------------------------------------------\r\n\t/** @internal */\r\n\t_inverseBindPosesBuffer: ArrayBuffer;\r\n}\r\n\r\n\r\n\r\n","import { WebGLContext } from \"../../../webgl/WebGLContext\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexMesh } from \"../../graphics/Vertex/VertexMesh\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { VertexDeclaration } from \"../../graphics/VertexDeclaration\";\r\nimport { Quaternion } from \"../../math/Quaternion\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Mesh } from \"./Mesh\";\r\nimport { SubMesh } from \"./SubMesh\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { IndexFormat } from \"../../graphics/IndexFormat\";\r\n\r\n/**\r\n * <code>PrimitiveMesh</code> 类用于创建简单网格。\r\n */\r\nexport class PrimitiveMesh {\r\n\r\n\tstatic __init__(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 创建自定义网格\r\n\t */\r\n\tstatic _createMesh(vertexDeclaration: VertexDeclaration, vertices: Float32Array, indices: Uint16Array): Mesh {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar mesh: Mesh = new Mesh();\r\n\t\tvar subMesh: SubMesh = new SubMesh(mesh);\r\n\r\n\t\tvar vertexBuffer: VertexBuffer3D = new VertexBuffer3D(vertices.length * 4, gl.STATIC_DRAW, true);\r\n\t\tvertexBuffer.vertexDeclaration = vertexDeclaration;\r\n\t\tvertexBuffer.setData(vertices.buffer);\r\n\t\tmesh._vertexBuffer = vertexBuffer;\r\n\t\tmesh._vertexCount = vertexBuffer._byteLength / vertexDeclaration.vertexStride;\r\n\t\tvar indexBuffer: IndexBuffer3D = new IndexBuffer3D(IndexFormat.UInt16, indices.length, gl.STATIC_DRAW, true);\r\n\t\tindexBuffer.setData(indices);\r\n\t\tmesh._indexBuffer = indexBuffer;\r\n\r\n\t\tmesh._setBuffer(vertexBuffer, indexBuffer);\r\n\t\tmesh._setInstanceBuffer(mesh._instanceBufferStateType);\r\n\t\tsubMesh._vertexBuffer = vertexBuffer;\r\n\t\tsubMesh._indexBuffer = indexBuffer;\r\n\t\tsubMesh._setIndexRange(0, indexBuffer.indexCount);\r\n\r\n\t\tvar subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\r\n\t\tvar subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\r\n\t\tvar boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\r\n\t\tsubIndexBufferStart.length = 1;\r\n\t\tsubIndexBufferCount.length = 1;\r\n\t\tboneIndicesList.length = 1;\r\n\t\tsubIndexBufferStart[0] = 0;\r\n\t\tsubIndexBufferCount[0] = indexBuffer.indexCount;\r\n\r\n\t\tvar subMeshes: SubMesh[] = [];\r\n\t\tsubMeshes.push(subMesh);\r\n\t\tmesh._setSubMeshes(subMeshes);\r\n\t\tmesh.calculateBounds();\r\n\t\tvar memorySize: number = vertexBuffer._byteLength + indexBuffer._byteLength;\r\n\t\tmesh._setCPUMemory(memorySize);\r\n\t\tmesh._setGPUMemory(memorySize);\r\n\t\treturn mesh;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建Box网格。\r\n\t * @param long 半径\r\n\t * @param height 垂直层数\r\n\t * @param width 水平层数\r\n\t * @return\r\n\t */\r\n\tstatic createBox(long: number = 1, height: number = 1, width: number = 1): Mesh {\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\r\n\t\tvar halfLong: number = long / 2;\r\n\t\tvar halfHeight: number = height / 2;\r\n\t\tvar halfWidth: number = width / 2;\r\n\r\n\t\tvar vertices: Float32Array = new Float32Array([\r\n\t\t\t//上\r\n\t\t\t-halfLong, halfHeight, -halfWidth, 0, 1, 0, 0, 0, halfLong, halfHeight, -halfWidth, 0, 1, 0, 1, 0, halfLong, halfHeight, halfWidth, 0, 1, 0, 1, 1, -halfLong, halfHeight, halfWidth, 0, 1, 0, 0, 1,\r\n\t\t\t//下\r\n\t\t\t-halfLong, -halfHeight, -halfWidth, 0, -1, 0, 0, 1, halfLong, -halfHeight, -halfWidth, 0, -1, 0, 1, 1, halfLong, -halfHeight, halfWidth, 0, -1, 0, 1, 0, -halfLong, -halfHeight, halfWidth, 0, -1, 0, 0, 0,\r\n\t\t\t//左\r\n\t\t\t-halfLong, halfHeight, -halfWidth, -1, 0, 0, 0, 0, -halfLong, halfHeight, halfWidth, -1, 0, 0, 1, 0, -halfLong, -halfHeight, halfWidth, -1, 0, 0, 1, 1, -halfLong, -halfHeight, -halfWidth, -1, 0, 0, 0, 1,\r\n\t\t\t//右\r\n\t\t\thalfLong, halfHeight, -halfWidth, 1, 0, 0, 1, 0, halfLong, halfHeight, halfWidth, 1, 0, 0, 0, 0, halfLong, -halfHeight, halfWidth, 1, 0, 0, 0, 1, halfLong, -halfHeight, -halfWidth, 1, 0, 0, 1, 1,\r\n\t\t\t//前\r\n\t\t\t-halfLong, halfHeight, halfWidth, 0, 0, 1, 0, 0, halfLong, halfHeight, halfWidth, 0, 0, 1, 1, 0, halfLong, -halfHeight, halfWidth, 0, 0, 1, 1, 1, -halfLong, -halfHeight, halfWidth, 0, 0, 1, 0, 1,\r\n\t\t\t//后\r\n\t\t\t-halfLong, halfHeight, -halfWidth, 0, 0, -1, 1, 0, halfLong, halfHeight, -halfWidth, 0, 0, -1, 0, 0, halfLong, -halfHeight, -halfWidth, 0, 0, -1, 0, 1, -halfLong, -halfHeight, -halfWidth, 0, 0, -1, 1, 1]);\r\n\r\n\t\tvar indices: Uint16Array = new Uint16Array([\r\n\t\t\t//上\r\n\t\t\t0, 1, 2, 2, 3, 0,\r\n\t\t\t//下\r\n\t\t\t4, 7, 6, 6, 5, 4,\r\n\t\t\t//左\r\n\t\t\t8, 9, 10, 10, 11, 8,\r\n\t\t\t//右\r\n\t\t\t12, 15, 14, 14, 13, 12,\r\n\t\t\t//前\r\n\t\t\t16, 17, 18, 18, 19, 16,\r\n\t\t\t//后\r\n\t\t\t20, 23, 22, 22, 21, 20]);\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个胶囊体模型\r\n\t * @param radius 半径\r\n\t * @param height 高度\r\n\t * @param stacks 水平层数,一般设为垂直层数的一半\r\n\t * @param slices 垂直层数\r\n\t */\r\n\tstatic createCapsule(radius: number = 0.5, height: number = 2, stacks: number = 16, slices: number = 32): Mesh {\r\n\t\tvar vertexCount: number = (stacks + 1) * (slices + 1) * 2 + (slices + 1) * 2;\r\n\t\tvar indexCount: number = (3 * stacks * (slices + 1)) * 2 * 2 + 2 * slices * 3;\r\n\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\t//单个顶点数据个数,总共字节数/单个字节数\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\t//顶点\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\t\t//顶点索引\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\r\n\t\tvar stackAngle: number = (Math.PI / 2.0) / stacks;\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\r\n\r\n\t\t//圆柱体高度的一半\r\n\t\tvar hcHeight: number = height / 2 - radius;\r\n\r\n\t\tvar posX: number = 0;\r\n\t\tvar posY: number = 0;\r\n\t\tvar posZ: number = 0;\r\n\r\n\t\tvar vc: number = 0;\r\n\t\tvar ic: number = 0;\r\n\r\n\t\tvar verticeCount: number = 0;\r\n\r\n\t\tvar stack: number, slice: number;\r\n\r\n\t\t//顶部半球\r\n\t\tfor (stack = 0; stack <= stacks; stack++) {\r\n\r\n\t\t\tfor (slice = 0; slice <= slices; slice++) {\r\n\r\n\t\t\t\tposX = radius * Math.cos(stack * stackAngle) * Math.cos(slice * sliceAngle + Math.PI);\r\n\t\t\t\tposY = radius * Math.sin(stack * stackAngle);\r\n\t\t\t\tposZ = radius * Math.cos(stack * stackAngle) * Math.sin(slice * sliceAngle + Math.PI);\r\n\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = posX;\r\n\t\t\t\tvertices[vc++] = posY + hcHeight;\r\n\t\t\t\tvertices[vc++] = posZ;\r\n\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = posX;\r\n\t\t\t\tvertices[vc++] = posY;\r\n\t\t\t\tvertices[vc++] = posZ;\r\n\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 1 - slice / slices;\r\n\t\t\t\tvertices[vc++] = (1 - stack / stacks) * ((Math.PI * radius / 2) / (height + Math.PI * radius));\r\n\r\n\t\t\t\tif (stack < stacks) {\r\n\r\n\t\t\t\t\t// First\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + (slices + 1);\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice;\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + 1;\r\n\t\t\t\t\t// Second\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + (slices);\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice;\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + (slices + 1);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tverticeCount += (stacks + 1) * (slices + 1);\r\n\r\n\t\t//底部半球\r\n\t\tfor (stack = 0; stack <= stacks; stack++) {\r\n\r\n\t\t\tfor (slice = 0; slice <= slices; slice++) {\r\n\r\n\t\t\t\tposX = radius * Math.cos(stack * stackAngle) * Math.cos(slice * sliceAngle + Math.PI);\r\n\t\t\t\tposY = radius * Math.sin(-stack * stackAngle);\r\n\t\t\t\tposZ = radius * Math.cos(stack * stackAngle) * Math.sin(slice * sliceAngle + Math.PI);\r\n\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = posX;\r\n\t\t\t\tvertices[vc++] = posY - hcHeight;\r\n\t\t\t\tvertices[vc++] = posZ;\r\n\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = posX;\r\n\t\t\t\tvertices[vc++] = posY;\r\n\t\t\t\tvertices[vc++] = posZ;\r\n\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 1 - slice / slices;\r\n\t\t\t\tvertices[vc++] = ((stack / stacks) * (Math.PI * radius / 2) + (height + Math.PI * radius / 2)) / (height + Math.PI * radius);\r\n\r\n\t\t\t\tif (stack < stacks) {\r\n\r\n\t\t\t\t\t// First\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice;\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + (slices + 1);\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + 1;\r\n\t\t\t\t\t// Second\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice;\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + (slices);\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + (slices + 1);\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tverticeCount += (stacks + 1) * (slices + 1);\r\n\r\n\t\t//侧壁\r\n\t\tfor (slice = 0; slice <= slices; slice++) {\r\n\t\t\tposX = radius * Math.cos(slice * sliceAngle + Math.PI);\r\n\t\t\tposY = hcHeight;\r\n\t\t\tposZ = radius * Math.sin(slice * sliceAngle + Math.PI);\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = -posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 0;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\t\t\t//uv    \r\n\t\t\tvertices[vc++] = 1 - slice * 1 / slices;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1 - slice * 1 / slices;\r\n\t\t\tvertices[vc++] = (Math.PI * radius / 2) / (height + Math.PI * radius);\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = (Math.PI * radius / 2 + height) / (height + Math.PI * radius);\r\n\t\t}\r\n\r\n\t\tfor (slice = 0; slice < slices; slice++) {\r\n\r\n\t\t\tindices[ic++] = slice + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = slice + verticeCount + 1;\r\n\t\t\tindices[ic++] = slice + verticeCount;\r\n\r\n\t\t\tindices[ic++] = slice + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = slice + verticeCount + (slices + 1) + 1;\r\n\t\t\tindices[ic++] = slice + verticeCount + 1;\r\n\t\t}\r\n\r\n\t\tverticeCount += 2 * (slices + 1);\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个圆锥体模型\r\n\t * @param radius 半径\r\n\t * @param height 高度\r\n\t * @param slices 分段数\r\n\t */\r\n\tstatic createCone(radius: number = 0.5, height: number = 1, slices: number = 32): Mesh {\r\n\t\t//(this._released) || (dispose());//如果已存在，则释放资源\r\n\t\tvar vertexCount: number = (slices + 1 + 1) + (slices + 1) * 2;\r\n\t\tvar indexCount: number = 6 * slices + 3 * slices;\r\n\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\t//单个顶点数据个数,总共字节数/单个字节数\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\t//顶点\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\t\t//顶点索引\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\r\n\r\n\t\tvar halfHeight: number = height / 2;\r\n\t\tvar curAngle: number = 0;\r\n\t\tvar verticeCount: number = 0;\r\n\r\n\t\tvar posX: number = 0;\r\n\t\tvar posY: number = 0;\r\n\t\tvar posZ: number = 0;\r\n\r\n\t\tvar normal: Vector3 = new Vector3();\r\n\t\tvar downV3: Vector3 = new Vector3(0, -1, 0);\r\n\t\tvar upPoint: Vector3 = new Vector3(0, halfHeight, 0);\r\n\t\tvar downPoint: Vector3 = new Vector3();\r\n\t\tvar v3: Vector3 = new Vector3();\r\n\t\tvar q4: Quaternion = new Quaternion();\r\n\t\tvar rotateAxis: Vector3 = new Vector3();\r\n\t\tvar rotateRadius: number;\r\n\r\n\t\tvar vc: number = 0;\r\n\t\tvar ic: number = 0;\r\n\r\n\t\t//壁\r\n\t\tfor (var rv: number = 0; rv <= slices; rv++) {\r\n\t\t\tcurAngle = rv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\r\n\t\t\tposY = halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = -posY;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\r\n\t\t\tnormal.x = posX;\r\n\t\t\tnormal.y = 0;\r\n\t\t\tnormal.z = posZ;\r\n\t\t\tdownPoint.x = posX;\r\n\t\t\tdownPoint.y = -posY;\r\n\t\t\tdownPoint.z = posZ;\r\n\t\t\tVector3.subtract(downPoint, upPoint, v3);\r\n\t\t\tVector3.normalize(v3, v3);\r\n\t\t\trotateRadius = Math.acos(Vector3.dot(downV3, v3));\r\n\t\t\tVector3.cross(downV3, v3, rotateAxis);\r\n\t\t\tVector3.normalize(rotateAxis, rotateAxis);\r\n\t\t\tQuaternion.createFromAxisAngle(rotateAxis, rotateRadius, q4);\r\n\t\t\tVector3.normalize(normal, normal);\r\n\t\t\tVector3.transformQuat(normal, q4, normal);\r\n\t\t\tVector3.normalize(normal, normal);\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = normal.x;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = normal.x;\r\n\t\t\tvertices[vc++] = normal.y;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = normal.y;\r\n\t\t\tvertices[vc++] = normal.z;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = normal.z;\r\n\t\t\t//uv    \r\n\t\t\tvertices[vc++] = 1 - rv * 1 / slices;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1 - rv * 1 / slices;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tvc += (slices + 1) * 8;\r\n\r\n\t\tfor (var ri: number = 0; ri < slices; ri++) {\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = ri + verticeCount + 1;\r\n\t\t\tindices[ic++] = ri + verticeCount;\r\n\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1) + 1;\r\n\t\t\tindices[ic++] = ri + verticeCount + 1;\r\n\r\n\t\t}\r\n\r\n\t\tverticeCount += 2 * (slices + 1);\r\n\r\n\t\t//底\r\n\t\tfor (var bv: number = 0; bv <= slices; bv++) {\r\n\t\t\tif (bv === 0) {\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = -halfHeight;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = -1;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tcurAngle = bv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\r\n\t\t\tposY = -halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc++] = -1;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\t//uv\r\n\t\t\tvertices[vc++] = 0.5 + Math.cos(curAngle) * 0.5;\r\n\t\t\tvertices[vc++] = 0.5 + Math.sin(curAngle) * 0.5;\r\n\r\n\t\t}\r\n\r\n\t\tfor (var bi: number = 0; bi < slices; bi++) {\r\n\t\t\tindices[ic++] = 0 + verticeCount;\r\n\t\t\tindices[ic++] = bi + 2 + verticeCount;\r\n\t\t\tindices[ic++] = bi + 1 + verticeCount;\r\n\t\t}\r\n\r\n\t\tverticeCount += slices + 1 + 1;\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个圆柱体模型\r\n\t * @param radius 半径\r\n\t * @param height 高度\r\n\t * @param slices 垂直层数\r\n\t */\r\n\tstatic createCylinder(radius: number = 0.5, height: number = 2, slices: number = 32): Mesh {\r\n\t\t//(this._released) || (dispose());//如果已存在，则释放资源\r\n\t\tvar vertexCount: number = (slices + 1 + 1) + (slices + 1) * 2 + (slices + 1 + 1);\r\n\t\tvar indexCount: number = 3 * slices + 6 * slices + 3 * slices;\r\n\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\t//单个顶点数据个数,总共字节数/单个字节数\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\t//顶点\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\t\t//顶点索引\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\r\n\r\n\t\tvar halfHeight: number = height / 2;\r\n\t\tvar curAngle: number = 0;\r\n\t\tvar verticeCount: number = 0;\r\n\t\tvar posX: number = 0;\r\n\t\tvar posY: number = 0;\r\n\t\tvar posZ: number = 0;\r\n\r\n\t\tvar vc: number = 0;\r\n\t\tvar ic: number = 0;\r\n\r\n\t\t//顶\r\n\t\tfor (var tv: number = 0; tv <= slices; tv++) {\r\n\r\n\t\t\tif (tv === 0) {\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = halfHeight;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = 1;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurAngle = tv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle) * radius;\r\n\t\t\tposY = halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc++] = 1;\r\n\t\t\tvertices[vc++] = 0;\r\n\r\n\t\t\t//uv\r\n\t\t\tvertices[vc++] = 0.5 + Math.cos(curAngle) * 0.5;\r\n\t\t\tvertices[vc++] = 0.5 + Math.sin(curAngle) * 0.5;\r\n\t\t}\r\n\r\n\t\tfor (var ti: number = 0; ti < slices; ti++) {\r\n\t\t\tindices[ic++] = 0;\r\n\t\t\tindices[ic++] = ti + 1;\r\n\t\t\tindices[ic++] = ti + 2;\r\n\t\t}\r\n\t\tverticeCount += slices + 1 + 1;\r\n\r\n\t\t//壁\r\n\t\tfor (var rv: number = 0; rv <= slices; rv++) {\r\n\t\t\tcurAngle = rv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\r\n\t\t\tposY = halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = -posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 0;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\t\t\t//uv    \r\n\t\t\tvertices[vc++] = 1 - rv * 1 / slices;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1 - rv * 1 / slices;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tvc += (slices + 1) * 8;\r\n\r\n\t\tfor (var ri: number = 0; ri < slices; ri++) {\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = ri + verticeCount + 1;\r\n\t\t\tindices[ic++] = ri + verticeCount;\r\n\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1) + 1;\r\n\t\t\tindices[ic++] = ri + verticeCount + 1;\r\n\r\n\t\t}\r\n\r\n\t\tverticeCount += 2 * (slices + 1);\r\n\r\n\t\t//底\r\n\t\tfor (var bv: number = 0; bv <= slices; bv++) {\r\n\t\t\tif (bv === 0) {\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = -halfHeight;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = -1;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurAngle = bv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\r\n\t\t\tposY = -halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc++] = -1;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\t//uv\r\n\t\t\tvertices[vc++] = 0.5 + Math.cos(curAngle) * 0.5;\r\n\t\t\tvertices[vc++] = 0.5 + Math.sin(curAngle) * 0.5;\r\n\r\n\t\t}\r\n\r\n\t\tfor (var bi: number = 0; bi < slices; bi++) {\r\n\t\t\tindices[ic++] = 0 + verticeCount;\r\n\t\t\tindices[ic++] = bi + 2 + verticeCount;\r\n\t\t\tindices[ic++] = bi + 1 + verticeCount;\r\n\t\t}\r\n\r\n\t\tverticeCount += slices + 1 + 1;\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个平面模型\r\n\t * @param long  长\r\n\t * @param width 宽\r\n\t */\r\n\tstatic createPlane(long: number = 10, width: number = 10, stacks: number = 10, slices: number = 10): Mesh {\r\n\t\tvar vertexCount: number = (stacks + 1) * (slices + 1);\r\n\t\tvar indexCount: number = stacks * slices * 2 * 3;\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\t//单个顶点数据个数,总共字节数/单个字节数\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\t//顶点数组长度\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\r\n\t\tvar halfLong: number = long / 2;\r\n\t\tvar halfWidth: number = width / 2;\r\n\t\tvar stacksLong: number = long / stacks;\r\n\t\tvar slicesWidth: number = width / slices;\r\n\r\n\t\tvar verticeCount: number = 0;\r\n\r\n\t\tfor (var i: number = 0; i <= slices; i++) {\r\n\r\n\t\t\tfor (var j: number = 0; j <= stacks; j++) {\r\n\r\n\t\t\t\tvertices[verticeCount++] = j * stacksLong - halfLong;\r\n\t\t\t\tvertices[verticeCount++] = 0;\r\n\t\t\t\tvertices[verticeCount++] = i * slicesWidth - halfWidth;\r\n\t\t\t\tvertices[verticeCount++] = 0;\r\n\t\t\t\tvertices[verticeCount++] = 1;\r\n\t\t\t\tvertices[verticeCount++] = 0;\r\n\t\t\t\tvertices[verticeCount++] = j * 1 / stacks;\r\n\t\t\t\tvertices[verticeCount++] = i * 1 / slices;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar indiceIndex: number = 0;\r\n\r\n\t\tfor (i = 0; i < slices; i++) {\r\n\r\n\t\t\tfor (j = 0; j < stacks; j++) {\r\n\r\n\t\t\t\tindices[indiceIndex++] = (i + 1) * (stacks + 1) + j;\r\n\t\t\t\tindices[indiceIndex++] = i * (stacks + 1) + j;\r\n\t\t\t\tindices[indiceIndex++] = (i + 1) * (stacks + 1) + j + 1;\r\n\r\n\t\t\t\tindices[indiceIndex++] = i * (stacks + 1) + j;\r\n\t\t\t\tindices[indiceIndex++] = i * (stacks + 1) + j + 1;\r\n\t\t\t\tindices[indiceIndex++] = (i + 1) * (stacks + 1) + j + 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个四边形模型\r\n\t * @param long  长\r\n\t * @param width 宽\r\n\t */\r\n\tstatic createQuad(long: number = 1, width: number = 1): Mesh {\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\tvar halfLong: number = long / 2;\r\n\t\tvar halfWidth: number = width / 2;\r\n\r\n\t\tvar vertices: Float32Array = new Float32Array([-halfLong, halfWidth, 0, 0, 0, 1, 0, 0, halfLong, halfWidth, 0, 0, 0, 1, 1, 0, -halfLong, -halfWidth, 0, 0, 0, 1, 0, 1, halfLong, -halfWidth, 0, 0, 0, 1, 1, 1]);\r\n\t\tvar indices: Uint16Array = new Uint16Array([0, 1, 2, 3, 2, 1]);\r\n\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个球体模型\r\n\t * @param radius 半径\r\n\t * @param stacks 水平层数\r\n\t * @param slices 垂直层数\r\n\t */\r\n\tstatic createSphere(radius: number = 0.5, stacks: number = 32, slices: number = 32): Mesh {\r\n\t\tvar vertexCount: number = (stacks + 1) * (slices + 1);\r\n\t\tvar indexCount: number = (3 * stacks * (slices + 1)) * 2;\r\n\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\r\n\t\tvar stackAngle: number = Math.PI / stacks;\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\r\n\r\n\t\t// Generate the group of Stacks for the sphere  \r\n\t\tvar vertexIndex: number = 0;\r\n\t\tvertexCount = 0;\r\n\t\tindexCount = 0;\r\n\r\n\t\tfor (var stack: number = 0; stack < (stacks + 1); stack++) {\r\n\t\t\tvar r: number = Math.sin(stack * stackAngle);\r\n\t\t\tvar y: number = Math.cos(stack * stackAngle);\r\n\r\n\t\t\t// Generate the group of segments for the current Stack  \r\n\t\t\tfor (var slice: number = 0; slice < (slices + 1); slice++) {\r\n\t\t\t\tvar x: number = r * Math.sin(slice * sliceAngle + Math.PI * 1 / 2);\r\n\t\t\t\tvar z: number = r * Math.cos(slice * sliceAngle + Math.PI * 1 / 2);\r\n\t\t\t\tvertices[vertexCount + 0] = x * radius;\r\n\t\t\t\tvertices[vertexCount + 1] = y * radius;\r\n\t\t\t\tvertices[vertexCount + 2] = z * radius;\r\n\r\n\t\t\t\tvertices[vertexCount + 3] = x;\r\n\t\t\t\tvertices[vertexCount + 4] = y;\r\n\t\t\t\tvertices[vertexCount + 5] = z;\r\n\r\n\t\t\t\tvertices[vertexCount + 6] = slice / slices;\r\n\t\t\t\tvertices[vertexCount + 7] = stack / stacks;\r\n\t\t\t\tvertexCount += vertexFloatStride;\r\n\t\t\t\tif (stack != (stacks - 1)) {\r\n\t\t\t\t\t// First Face\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (slices + 1);\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + 1;\r\n\t\t\t\t\t// Second \r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (slices);\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (slices + 1);\r\n\t\t\t\t\tvertexIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n}\r\n\r\n","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\nuniform sampler2D u_MainTex;\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main() {\r\n\tgl_FragColor = texture2D(u_MainTex, v_Texcoord0);\r\n}\r\n\r\n","#include \"Lighting.glsl\";\r\n\r\nattribute vec4 a_PositionTexcoord;\r\nuniform vec4 u_OffsetScale;\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main() {\t\r\n\tgl_Position = vec4(u_OffsetScale.x*2.0-1.0+(a_PositionTexcoord.x+1.0)*u_OffsetScale.z,(1.0-((u_OffsetScale.y*2.0-1.0+(-a_PositionTexcoord.y+1.0)*u_OffsetScale.w)+1.0)/2.0)*2.0-1.0, 0.0, 1.0);\t\r\n\tv_Texcoord0 = a_PositionTexcoord.zw;\r\n\tgl_Position = remapGLPositionZ(gl_Position);\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#ifdef COLOR\r\n\tvarying vec4 v_Color;\r\n#endif\r\nvarying vec2 v_Texcoord0;\r\n\r\n#ifdef MAINTEXTURE\r\n\tuniform sampler2D u_AlbedoTexture;\r\n#endif\r\n\r\nuniform vec4 u_AlbedoColor;\r\n\r\n#ifdef FOG\r\n\tuniform float u_FogStart;\r\n\tuniform float u_FogRange;\r\n\t#ifdef ADDTIVEFOG\r\n\t#else\r\n\t\tuniform vec3 u_FogColor;\r\n\t#endif\r\n#endif\r\n\r\nvoid main()\r\n{\r\n\tvec4 color =  2.0 * u_AlbedoColor;\r\n\t#ifdef COLOR\r\n\t\tcolor *= v_Color;\r\n\t#endif\r\n\t#ifdef MAINTEXTURE\r\n\t\tcolor *= texture2D(u_AlbedoTexture, v_Texcoord0);\r\n\t#endif\r\n\t\r\n\tgl_FragColor = color;\r\n\t\r\n\t#ifdef FOG\r\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\r\n\t\t#ifdef ADDTIVEFOG\r\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), lerpFact);\r\n\t\t#else\r\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\r\n\t\t#endif\r\n\t#endif\r\n}\r\n\r\n","#include \"Lighting.glsl\";\r\n\r\nattribute vec4 a_Position;\r\nattribute vec4 a_Color;\r\nattribute vec2 a_Texcoord0;\r\n\r\n#ifdef GPU_INSTANCE\r\n\tattribute mat4 a_MvpMatrix;\r\n#else\r\n\tuniform mat4 u_MvpMatrix;\r\n#endif\r\n\r\n#ifdef COLOR\r\n\tvarying vec4 v_Color;\r\n#endif\r\nvarying vec2 v_Texcoord0;\r\n\r\n#ifdef TILINGOFFSET\r\n\tuniform vec4 u_TilingOffset;\r\n#endif\r\n\r\n#ifdef BONE\r\n\tconst int c_MaxBoneCount = 24;\r\n\tattribute vec4 a_BoneIndices;\r\n\tattribute vec4 a_BoneWeights;\r\n\tuniform mat4 u_Bones[c_MaxBoneCount];\r\n#endif\r\n\r\nvoid main()\r\n{\r\n\tvec4 position;\r\n\t#ifdef BONE\r\n\t\tmat4 skinTransform;\r\n\t \t#ifdef SIMPLEBONE\r\n\t\t\tfloat currentPixelPos;\r\n\t\t\t#ifdef GPU_INSTANCE\r\n\t\t\t\tcurrentPixelPos = a_SimpleTextureParams.x+a_SimpleTextureParams.y;\r\n\t\t\t#else\r\n\t\t\t\tcurrentPixelPos = u_SimpleAnimatorParams.x+u_SimpleAnimatorParams.y;\r\n\t\t\t#endif\r\n\t\t\tfloat offset = 1.0/u_SimpleAnimatorTextureSize;\r\n\t\t\tskinTransform =  loadMatFromTexture(currentPixelPos,int(a_BoneIndices.x),offset) * a_BoneWeights.x;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.y),offset) * a_BoneWeights.y;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.z),offset) * a_BoneWeights.z;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.w),offset) * a_BoneWeights.w;\r\n\t\t#else\r\n\t\t\tskinTransform =  u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\t#endif\r\n\t\tposition=skinTransform*a_Position;\r\n\t#else\r\n\t\tposition=a_Position;\r\n\t#endif\r\n\t#ifdef GPU_INSTANCE\r\n\t\tgl_Position = a_MvpMatrix * position;\r\n\t#else\r\n\t\tgl_Position = u_MvpMatrix * position;\r\n\t#endif\r\n\t\r\n\t#ifdef TILINGOFFSET\r\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\r\n\t#else\r\n\t\tv_Texcoord0=a_Texcoord0;\r\n\t#endif\r\n\t\t\r\n\t#ifdef COLOR\r\n\t\tv_Color = a_Color;\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include \"Lighting.glsl\";\r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)\r\n\tuniform vec3 u_CameraPos;\r\n\tvarying vec3 v_Normal;\r\n\tvarying vec3 v_PositionWorld;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tuniform float u_FogStart;\r\n\tuniform float u_FogRange;\r\n\tuniform vec3 u_FogColor;\r\n#endif\r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tuniform DirectionLight u_DirectionLight;\r\n\t\t#endif\r\n\t\t#ifdef POINTLIGHT\r\n\t\t\tuniform PointLight u_PointLight;\r\n\t\t#endif\r\n\t\t#ifdef SPOTLIGHT\r\n\t\t\tuniform SpotLight u_SpotLight;\r\n\t\t#endif\r\n\t#else\r\n\t\tuniform mat4 u_View;\r\n\t\tuniform vec4 u_ProjectionParams;\r\n\t\tuniform vec4 u_Viewport;\r\n\t\tuniform int u_DirationLightCount;\r\n\t\tuniform sampler2D u_LightBuffer;\r\n\t\tuniform sampler2D u_LightClusterBuffer;\r\n\t#endif\r\n#endif\r\n\r\n#include \"Shadow.glsl\"\r\n#ifdef CALCULATE_SHADOWS\r\n\tvarying vec4 v_ShadowCoord;\r\n#endif\r\nvarying float v_posViewZ;\r\n\r\nuniform vec3 u_AmbientColor;\r\n\r\nuniform sampler2D u_SplatAlphaTexture;\r\n\r\nuniform sampler2D u_DiffuseTexture1;\r\nuniform sampler2D u_DiffuseTexture2;\r\nuniform sampler2D u_DiffuseTexture3;\r\nuniform sampler2D u_DiffuseTexture4;\r\nuniform sampler2D u_DiffuseTexture5;\r\n\r\nuniform vec4 u_DiffuseScaleOffset1;\r\nuniform vec4 u_DiffuseScaleOffset2;\r\nuniform vec4 u_DiffuseScaleOffset3;\r\nuniform vec4 u_DiffuseScaleOffset4;\r\nuniform vec4 u_DiffuseScaleOffset5;\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n#ifdef LIGHTMAP\r\n\tuniform sampler2D u_LightMap;\r\n\tvarying vec2 v_LightMapUV;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n\tvec4 splatAlpha = vec4(1.0);\r\n\t#ifdef ExtendTerrain_DETAIL_NUM1\r\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\r\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\r\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r;\r\n\t#endif\r\n\t#ifdef ExtendTerrain_DETAIL_NUM2\r\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\r\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\r\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\r\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r + color2.xyz * (1.0 - splatAlpha.r);\r\n\t#endif\r\n\t#ifdef ExtendTerrain_DETAIL_NUM3\r\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\r\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\r\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\r\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\r\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * (1.0 - splatAlpha.r - splatAlpha.g);\r\n\t#endif\r\n\t#ifdef ExtendTerrain_DETAIL_NUM4\r\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\r\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\r\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\r\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\r\n\t\tvec4 color4 = texture2D(u_DiffuseTexture4, v_Texcoord0 * u_DiffuseScaleOffset4.xy);\r\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * splatAlpha.b + color4.xyz * (1.0 - splatAlpha.r - splatAlpha.g - splatAlpha.b);\r\n\t#endif\r\n\t#ifdef ExtendTerrain_DETAIL_NUM5\r\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\r\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\r\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\r\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\r\n\t\tvec4 color4 = texture2D(u_DiffuseTexture4, v_Texcoord0 * u_DiffuseScaleOffset4.xy);\r\n\t\tvec4 color5 = texture2D(u_DiffuseTexture5, v_Texcoord0 * u_DiffuseScaleOffset5.xy);\r\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * splatAlpha.b + color4.xyz * splatAlpha.a + color5.xyz * (1.0 - splatAlpha.r - splatAlpha.g - splatAlpha.b - splatAlpha.a);\r\n\t#endif\r\n\t\tgl_FragColor.w = splatAlpha.a;\r\n\t\t\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\tvec3 normal = v_Normal;\r\n\t\tvec3 dif, spe;\r\n\t#endif\r\n\r\n\tvec3 diffuse = vec3(0.0);\r\n\tvec3 specular= vec3(0.0);\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)\r\n\t\tvec3 toEye;\r\n\t\t#ifdef FOG\r\n\t\t\ttoEye=u_CameraPos-v_PositionWorld;\r\n\t\t\tfloat toEyeLength=length(toEye);\r\n\t\t\ttoEye/=toEyeLength;\r\n\t\t#else\r\n\t\t\ttoEye=normalize(u_CameraPos-v_PositionWorld);\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tLayaAirBlinnPhongDiectionLight(vec3(0.0),1.0,normal,vec3(1.0),toEye,u_DirectionLight,dif,spe);\r\n\t\t\tdiffuse+=dif;\r\n\t\t\tspecular+=spe;\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef POINTLIGHT\r\n\t\t\tLayaAirBlinnPhongPointLight(v_PositionWorld,vec3(0.0),1.0,normal,vec3(1.0),toEye,u_PointLight,dif,spe);\r\n\t\t\tdiffuse+=dif;\r\n\t\t\tspecular+=spe;\r\n\t\t#endif\r\n\r\n\t\t#ifdef SPOTLIGHT\r\n\t\t\tLayaAirBlinnPhongSpotLight(v_PositionWorld,vec3(0.0),1.0,normal,vec3(1.0),toEye,u_SpotLight,dif,spe);\r\n\t\t\tdiffuse+=dif;\r\n\t\t\tspecular+=spe;\r\n\t\t#endif\r\n\t#else\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t{\r\n\t\t\t\tif(i >= u_DirationLightCount)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tDirectionLight directionLight = getDirectionLight(u_LightBuffer,i);\r\n\t\t\t\tLayaAirBlinnPhongDiectionLight(vec3(0.0),1.0,normal,vec3(1.0),toEye,directionLight,dif,spe);\r\n\t\t\t\tdiffuse+=dif;\r\n\t\t\t\tspecular+=spe;\r\n\t\t\t}\r\n\t\t#endif\r\n\t\t#if defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\t\tivec4 clusterInfo =getClusterInfo(u_LightClusterBuffer,u_View,u_Viewport, v_PositionWorld,gl_FragCoord,u_ProjectionParams);\r\n\t\t\t#ifdef POINTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tif(i >= clusterInfo.x)//PointLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tPointLight pointLight = getPointLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\tLayaAirBlinnPhongPointLight(v_PositionWorld,vec3(0.0),1.0,normal,vec3(1.0),toEye,pointLight,dif,spe);\r\n\t\t\t\t\tdiffuse+=dif;\r\n\t\t\t\t\tspecular+=spe;\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t\t#ifdef SPOTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tif(i >= clusterInfo.y)//SpotLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tSpotLight spotLight = getSpotLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\tLayaAirBlinnPhongSpotLight(v_PositionWorld,vec3(0.0),1.0,normal,vec3(1.0),toEye\t,spotLight,dif,spe);\r\n\t\t\t\t\tdiffuse+=dif;\r\n\t\t\t\t\tspecular+=spe;\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t#endif\r\n\r\nvec3 globalDiffuse = u_AmbientColor;\r\n#ifdef LIGHTMAP\r\n\tglobalDiffuse += decodeHDR(texture2D(u_LightMap, v_LightMapUV),5.0);\r\n#endif\r\n\r\n#ifdef CALCULATE_SHADOWS\r\n\tfloat shadowValue = shadowValue = sampleShadowmap(v_ShadowCoord);\r\n\tgl_FragColor = vec4(gl_FragColor.rgb * (globalDiffuse + diffuse) * shadowValue, gl_FragColor.a);\r\n#else\r\n\tgl_FragColor = vec4(gl_FragColor.rgb * (globalDiffuse + diffuse), gl_FragColor.a);\r\n#endif\r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t#ifdef CALCULATE_SHADOWS\r\n\t\tgl_FragColor.rgb += specular * shadowValue;\r\n\t#else\r\n\t\tgl_FragColor.rgb += specular;\r\n\t#endif\r\n#endif\r\n\r\n#ifdef FOG\r\n\tfloat lerpFact=clamp((toEyeLength-u_FogStart)/u_FogRange,0.0,1.0);\r\n\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\r\n#endif\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","#include \"Lighting.glsl\";\r\n\r\nattribute vec4 a_Position;\r\nattribute vec2 a_Texcoord0;\r\n\r\nuniform mat4 u_MvpMatrix;\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(LIGHTMAP)\r\n\tattribute vec3 a_Normal;\r\n\tvarying vec3 v_Normal;\r\n#endif\r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)||(defined(CALCULATE_SHADOWS)&&defined(SHADOWMAP_PSSM1))\r\n\tuniform mat4 u_WorldMat;\r\n\tvarying vec3 v_PositionWorld;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tvarying vec2 v_LightMapUV;\r\n\tuniform vec4 u_LightmapScaleOffset;\r\n#endif\r\n\r\n#ifdef CALCULATE_SHADOWS\r\n\tvarying vec4 v_ShadowCoord;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n\tgl_Position = u_MvpMatrix * a_Position;\r\n  \r\n\tv_Texcoord0 = a_Texcoord0;\r\n  \r\n\t#ifdef LIGHTMAP\r\n\t\tv_LightMapUV = vec2(a_Texcoord0.x, 1.0 - a_Texcoord0.y) * u_LightmapScaleOffset.xy + u_LightmapScaleOffset.zw;\r\n\t\tv_LightMapUV.y = 1.0 - v_LightMapUV.y;\r\n\t#endif\r\n  \r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\tv_Normal = a_Normal;\r\n\t#endif\r\n\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)||(defined(CALCULATE_SHADOWS)&&defined(SHADOWMAP_PSSM1))\r\n\t\tv_PositionWorld=(u_WorldMat*a_Position).xyz;\r\n\t#endif\r\n\r\n\t#ifdef CALCULATE_SHADOWS\r\n\t\tv_ShadowCoord = getShadowCoord(vec4(v_PositionWorld));\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}","struct LayaGIInput\r\n{\r\n\tvec2 lightmapUV;\r\n\tvec3 worldPos;\r\n};\r\n\r\n#define LAYA_SPECCUBE_LOD_STEPS 6.0\r\n\r\nuniform vec3 u_AmbientColor;\r\n\r\n#if defined(GI_AMBIENT_SH)\r\n\tuniform vec4 u_AmbientSHAr;\r\n\tuniform vec4 u_AmbientSHAg;\r\n\tuniform vec4 u_AmbientSHAb;\r\n\tuniform vec4 u_AmbientSHBr;\r\n\tuniform vec4 u_AmbientSHBg;\r\n\tuniform vec4 u_AmbientSHBb;\r\n\tuniform vec4 u_AmbientSHC;\r\n#endif\r\n\r\nuniform samplerCube u_ReflectTexture;\r\nuniform vec4 u_ReflectCubeHDRParams;\r\n\r\n#ifdef SPECCUBE_BOX_PROJECTION\r\n\tuniform vec3 u_SpecCubeProbePosition;\r\n\tuniform vec3 u_SpecCubeBoxMax;\r\n\tuniform vec3 u_SpecCubeBoxMin;\r\n#endif\r\n\r\n\r\n#ifdef GI_AMBIENT_SH\r\n\tmediump vec3 shEvalLinearL0L1(mediump vec4 normal)\r\n\t{\r\n\t\tmediump vec3 x;\r\n\t\t// Linear (L1) + constant (L0) polynomial terms\r\n\t\tx.r = dot(u_AmbientSHAr, normal);\r\n\t\tx.g = dot(u_AmbientSHAg, normal);\r\n\t\tx.b = dot(u_AmbientSHAb, normal);\r\n\t\treturn x;\r\n\t}\r\n\r\n\tmediump vec3 shEvalLinearL2(mediump vec4 normal)\r\n\t{\r\n\t\tmediump vec3 x1,x2;\r\n\t\t// 4 of the quadratic (L2) polynomials\r\n\t\tmediump vec4 vB = normal.xyzz * normal.yzzx;\r\n\t\tx1.r = dot(u_AmbientSHBr, vB);\r\n\t\tx1.g = dot(u_AmbientSHBg, vB);\r\n\t\tx1.b = dot(u_AmbientSHBb, vB);\r\n\r\n\t\t// Final (5th) quadratic (L2) polynomial\r\n\t\tmediump float vC = normal.x*normal.x - normal.y*normal.y;\r\n\t\tx2 = u_AmbientSHC.rgb * vC;\r\n\r\n\t\treturn x1 + x2;\r\n\t}\r\n\t\r\n\tmediump vec3 shadeSHPerPixel(mediump vec3 normal)\r\n\t{\r\n\t\tmediump vec3 ambientContrib;\r\n\t\tmediump vec4 normalV4=vec4(-normal.x,normal.yz, 1.0);//Note:SH Data is left-hand,so x need inverse\r\n\t\tambientContrib = shEvalLinearL0L1(normalV4);\r\n\t\tambientContrib += shEvalLinearL2(normalV4);\r\n\t\tmediump vec3 ambient = max(vec3(0.0), ambientContrib);\r\n\t\tambient = layaLinearToGammaSpace(ambient);\r\n\t\treturn ambient;\r\n\t}\r\n#endif\r\n\r\n\r\n\r\n mediump vec3 BoxProjectedCubemapDirection(mediump vec3 worldRefl,mediump vec3 worldPos,mediump vec3 cubemapCenter,mediump vec3 boxMin,mediump vec3 boxMax){\r\n\t mediump vec3 nrdir = normalize(worldRefl);\r\n\t mediump vec3 rbmax = (boxMax - worldPos);\r\n\t mediump vec3 rbmin = (boxMin - worldPos);\r\n\t mediump vec3 select = step(vec3(0.0), worldRefl);\r\n\t mediump vec3 rbminmax = mix(rbmin, rbmax, select);\r\n\trbminmax = rbminmax / nrdir;\r\n\tmediump float scalar = min(min(rbminmax.x, rbminmax.y), rbminmax.z);\r\n\t mediump vec3 worldChangeRefl = nrdir * scalar + (worldPos - cubemapCenter);\r\n\treturn worldChangeRefl;\r\n}\r\n\r\n\r\nmediump vec3 layaDecodeDirectionalLightmap (mediump vec3 color, lowp vec4 dirTex, mediump vec3 normalWorld)\r\n{\r\n    // In directional (non-specular) mode Enlighten bakes dominant light direction\r\n    // in a way, that using it for half Lambert and then dividing by a \"rebalancing coefficient\"\r\n    // gives a result close to plain diffuse response lightmaps, but normalmapped.\r\n\r\n    // Note that dir is not unit length on purpose. Its length is \"directionality\", like\r\n    // for the directional specular lightmaps.\r\n\tlowp vec3 directional=dirTex.xyz - 0.5;\r\n\tdirectional.x=-directional.x;//NOTE:because coord System\r\n    mediump float halfLambert = dot(normalWorld,directional) + 0.5;\r\n\r\n    return color * halfLambert / max(1e-4, dirTex.w);\r\n}\r\n\r\nvec3 layaGIBase(LayaGIInput giInput,mediump float occlusion, mediump vec3 normalWorld)\r\n{\r\n\tvec3 indirectDiffuse;\r\n\t#ifdef LIGHTMAP\t\r\n\t\tmediump vec3 bakedColor =decodeHDR(texture2D(u_LightMap, giInput.lightmapUV),5.0);\r\n\t\t#ifdef LIGHTMAP_DIRECTIONAL\r\n\t\t\tlowp vec4 bakedDirTex = texture2D (u_LightMapDirection, giInput.lightmapUV);\r\n            indirectDiffuse = layaDecodeDirectionalLightmap (bakedColor, bakedDirTex, normalWorld);\r\n\t\t#else //unDirectional lightmap\r\n\t\t\tindirectDiffuse = bakedColor;\r\n\t\t#endif\r\n\t#else\r\n\t\t#ifdef GI_AMBIENT_SH\r\n\t\t\tindirectDiffuse = shadeSHPerPixel(normalWorld);\r\n\t\t#else\r\n\t\t\tindirectDiffuse = u_AmbientColor; //already in gamma space\r\n\t\t#endif\r\n\t#endif\r\n\r\n\tindirectDiffuse*=occlusion;\r\n\treturn indirectDiffuse;\r\n}\r\n\r\nmediump vec3 layaGlossyEnvironment(mediump vec4 glossIn)\r\n{\r\n\tmediump float perceptualRoughness = glossIn.a;\r\n\r\n\t// use approximation to solve,below is more reasonable,but maybe slow. \r\n\t// float m = perceptualRoughnessToRoughness(perceptualRoughness); // m is the real roughness parameter\r\n    // const float fEps = 1.192092896e-07F;        // smallest such that 1.0+FLT_EPSILON != 1.0  (+1e-4h is NOT good here. is visibly very wrong)\r\n    // float n =  (2.0/max(fEps, m*m))-2.0;        // remap to spec power. See eq. 21 in --> https://dl.dropboxusercontent.com/u/55891920/papers/mm_brdf.pdf\r\n    // n /= 4;                                     // remap from n_dot_h formulatino to n_dot_r. See section \"Pre-convolved Cube Maps vs Path Tracers\" --> https://s3.amazonaws.com/docs.knaldtech.com/knald/1.0.0/lys_power_drops.html\r\n    // perceptualRoughness = pow( 2/(n+2), 0.25);  // remap back to square root of real roughness (0.25 include both the sqrt root of the conversion and sqrt for going from roughness to perceptualRoughness)\r\n\tperceptualRoughness = perceptualRoughness * (1.7 - 0.7*perceptualRoughness);//just a approximation,but fast.\r\n \r\n\tmediump float mip = perceptualRoughness * LAYA_SPECCUBE_LOD_STEPS;\r\n\tmediump vec3 uvw = glossIn.rgb;\r\n\tuvw.x=-uvw.x;//Note:reflectCube is left-hand,so x need inverse\r\n\tmediump vec4 rgbm=textureCubeLodEXT(u_ReflectTexture,uvw,mip);\r\n\treturn decodeHDR(rgbm,u_ReflectCubeHDRParams.x);\r\n}\r\n\r\nmediump vec3 layaGIIndirectSpecular(LayaGIInput giInput,mediump float occlusion, vec4 glossIn)\r\n{\r\n\t#ifdef SPECCUBE_BOX_PROJECTION\r\n\t\tvec3 originalReflUVW = glossIn.xyz;\r\n\t\tglossIn.xyz =BoxProjectedCubemapDirection(originalReflUVW,giInput.worldPos,u_SpecCubeProbePosition,u_SpecCubeBoxMin,u_SpecCubeBoxMax);\r\n\t#endif\r\n\tmediump vec3 specular = layaGlossyEnvironment(glossIn);\r\n\treturn specular * occlusion;\r\n}\r\n\r\n\r\nLayaGI layaGlobalIllumination(LayaGIInput giInput,mediump float occlusion, mediump vec3 normalWorld,mediump vec4 uvwRoughness)\r\n{\r\n\tLayaGI gi;\r\n\tgi.diffuse = layaGIBase(giInput,occlusion, normalWorld);\r\n\tgi.specular = layaGIIndirectSpecular(giInput,occlusion, uvwRoughness);\r\n\treturn gi;\r\n}\r\n\r\n\r\n","#ifdef GRAPHICS_API_GLES3\r\n\t#define INVERSE_MAT(mat) inverse(mat)\r\n#else\r\n\t#define INVERSE_MAT(mat) inverseMat(mat)\r\n#endif\r\n\r\nstruct DirectionLight {\r\n\tvec3 color;\r\n\tvec3 direction;\r\n};\r\n\r\nstruct PointLight {\r\n\tvec3 color;\r\n\tvec3 position;\r\n\tfloat range;\r\n};\r\n\r\nstruct SpotLight {\r\n\tvec3 color;\r\n\tvec3 position;\r\n\tfloat range;\r\n\tvec3 direction;\r\n\tfloat spot;\r\n};\r\n\r\nstruct LayaGI{\r\n\tvec3 diffuse;\r\n\tvec3 specular;\r\n};\r\n\r\nstruct LayaLight{\r\n\tvec3 color;\r\n\tvec3 dir;\r\n};\r\n\r\nconst int c_ClusterBufferWidth = CLUSTER_X_COUNT*CLUSTER_Y_COUNT;\r\nconst int c_ClusterBufferHeight = CLUSTER_Z_COUNT*(1+int(ceil(float(MAX_LIGHT_COUNT_PER_CLUSTER)/4.0)));\r\nconst int c_ClusterBufferFloatWidth = c_ClusterBufferWidth*4;\r\n\r\n#ifndef GRAPHICS_API_GLES3\r\n\tmat3 inverseMat(mat3 m) {\r\n\t\tfloat a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\r\n\t\tfloat a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\r\n\t\tfloat a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\r\n\r\n\t\tfloat b01 = a22 * a11 - a12 * a21;\r\n\t\tfloat b11 = -a22 * a10 + a12 * a20;\r\n\t\tfloat b21 = a21 * a10 - a11 * a20;\r\n\r\n\t\tfloat det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n\t\treturn mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\r\n\t\t\t\t\tb11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\r\n\t\t\t\t\tb21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\r\n\t}\r\n#endif\r\n\r\nivec4 getClusterInfo(sampler2D clusterBuffer,mat4 viewMatrix,vec4 viewport,vec3 position,vec4 fragCoord,vec4 projectParams)\r\n{\r\n\tvec3 viewPos = vec3(viewMatrix*vec4(position, 1.0)); //position in viewspace\r\n\r\n\tint clusterXIndex = int(floor(fragCoord.x/ (float(viewport.z)/float(CLUSTER_X_COUNT))));\r\n    int clusterYIndex = int(floor((viewport.w * (projectParams.z <0.0? 0.0 : 1.0) - fragCoord.y * projectParams.z)/ (float(viewport.w)/float(CLUSTER_Y_COUNT))));//Maybe Flipped ProjectMatrix\r\n\tfloat zSliceParam =float(CLUSTER_Z_COUNT)/log2(projectParams.y / projectParams.x);\r\n \tint clusterZIndex = int(floor(log2(-viewPos.z) * zSliceParam- log2(projectParams.x) * zSliceParam));//projectParams x:cameraNear y:cameraFar\r\n\r\n\tvec2 uv= vec2((float(clusterXIndex + clusterYIndex * CLUSTER_X_COUNT)+0.5)/float(c_ClusterBufferWidth),\r\n\t\t\t\t(float(clusterZIndex)+0.5)/float(c_ClusterBufferHeight));\r\n\tvec4 clusterPixel=texture2D(clusterBuffer, uv);\r\n\treturn ivec4(clusterPixel);//X:Point Count Y:Spot Count Z、W:Light Offset\r\n}\r\n\r\n\r\nint getLightIndex(sampler2D clusterBuffer,int offset,int index) \r\n{\r\n\tint totalOffset=offset+index;\r\n\tint row=totalOffset/c_ClusterBufferFloatWidth;\r\n\tint lastRowFloat=totalOffset-row*c_ClusterBufferFloatWidth;\r\n\tint col=lastRowFloat/4;\r\n\tvec2 uv=vec2((float(col)+0.5)/float(c_ClusterBufferWidth),\r\n\t\t\t\t(float(row)+0.5)/float(c_ClusterBufferHeight));\r\n\tvec4 texel = texture2D(clusterBuffer, uv);\r\n    int pixelComponent = lastRowFloat-col*4;\r\n    if (pixelComponent == 0) \r\n      return int(texel.x);\r\n    else if (pixelComponent == 1) \r\n      return int(texel.y);\r\n    else if (pixelComponent == 2) \r\n      return int(texel.z);\r\n    else //pixelComponent==3\r\n      return int(texel.w);\r\n}\r\n\r\nDirectionLight getDirectionLight(sampler2D lightBuffer,int index) \r\n{\r\n    DirectionLight light;\r\n    float v = (float(index)+0.5)/ float(MAX_LIGHT_COUNT);\r\n    vec4 p1 = texture2D(lightBuffer, vec2(0.125,v));\r\n    vec4 p2 = texture2D(lightBuffer, vec2(0.375,v));\r\n\tlight.color=p1.rgb;\r\n    light.direction = p2.rgb;\r\n    return light;\r\n}\r\n\r\nPointLight getPointLight(sampler2D lightBuffer,sampler2D clusterBuffer,ivec4 clusterInfo,int index) \r\n{\r\n    PointLight light;\r\n\tint pointIndex=getLightIndex(clusterBuffer,clusterInfo.z*c_ClusterBufferFloatWidth+clusterInfo.w,index);\r\n    float v = (float(pointIndex)+0.5)/ float(MAX_LIGHT_COUNT);\r\n    vec4 p1 = texture2D(lightBuffer, vec2(0.125,v));\r\n    vec4 p2 = texture2D(lightBuffer, vec2(0.375,v));\r\n\tlight.color=p1.rgb;\r\n\tlight.range = p1.a;\r\n    light.position = p2.rgb;\r\n    return light;\r\n}\r\n\r\nSpotLight getSpotLight(sampler2D lightBuffer,sampler2D clusterBuffer,ivec4 clusterInfo,int index) \r\n{\r\n    SpotLight light;\r\n\tint spoIndex=getLightIndex(clusterBuffer,clusterInfo.z*c_ClusterBufferFloatWidth+clusterInfo.w,clusterInfo.x+index);\r\n    float v = (float(spoIndex)+0.5)/ float(MAX_LIGHT_COUNT);\r\n    vec4 p1 = texture2D(lightBuffer, vec2(0.125,v));\r\n    vec4 p2 = texture2D(lightBuffer, vec2(0.375,v));\r\n\tvec4 p3 = texture2D(lightBuffer, vec2(0.625,v));\r\n    light.color = p1.rgb;\r\n\tlight.range=p1.a;\r\n    light.position = p2.rgb;\r\n\tlight.spot = p2.a;\r\n\tlight.direction = p3.rgb;\r\n    return light;\r\n}\r\n\r\n// Laya中使用衰减纹理\r\nfloat LayaAttenuation(in vec3 L,in float invLightRadius) {\r\n\tfloat fRatio = clamp(length(L) * invLightRadius,0.0,1.0);\r\n\tfRatio *= fRatio;\r\n\treturn 1.0 / (1.0 + 25.0 * fRatio)* clamp(4.0*(1.0 - fRatio),0.0,1.0); //fade to black as if 4 pixel texture\r\n}\r\n\r\n// Same as Just Cause 2 and Crysis 2 (you can read GPU Pro 1 book for more information)\r\nfloat BasicAttenuation(in vec3 L,in float invLightRadius) {\r\n\tvec3 distance = L * invLightRadius;\r\n\tfloat attenuation = clamp(1.0 - dot(distance, distance),0.0,1.0); // Equals float attenuation = saturate(1.0f - dot(L, L) / (lightRadius *  lightRadius));\r\n\treturn attenuation * attenuation;\r\n}\r\n\r\n// Inspired on http://fools.slindev.com/viewtopic.php?f=11&t=21&view=unread#unread\r\nfloat NaturalAttenuation(in vec3 L,in float invLightRadius) {\r\n\tfloat attenuationFactor = 30.0;\r\n\tvec3 distance = L * invLightRadius;\r\n\tfloat attenuation = dot(distance, distance); // Equals float attenuation = dot(L, L) / (lightRadius *  lightRadius);\r\n\tattenuation = 1.0 / (attenuation * attenuationFactor + 1.0);\r\n\t// Second we move down the function therewith it reaches zero at abscissa 1:\r\n\tattenuationFactor = 1.0 / (attenuationFactor + 1.0); //attenuationFactor contains now the value we have to subtract\r\n\tattenuation = max(attenuation - attenuationFactor, 0.0); // The max fixes a bug.\r\n\t// Finally we expand the equation along the y-axis so that it starts with a function value of 1 again.\r\n\tattenuation /= 1.0 - attenuationFactor;\r\n\treturn attenuation;\r\n}\r\n\r\nvoid LayaAirBlinnPhongLight (in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir,in vec3 lightColor, in vec3 lightVec,out vec3 diffuseColor,out vec3 specularColor) {\r\n\tmediump vec3 h = normalize(viewDir-lightVec);\r\n\tlowp float ln = max (0.0, dot (-lightVec,normal));\r\n\tfloat nh = max (0.0, dot (h,normal));\r\n\tdiffuseColor=lightColor * ln;\r\n\tspecularColor=lightColor *specColor*pow (nh, specColorIntensity*128.0) * gloss;\r\n}\r\n\r\nvoid LayaAirBlinnPhongDiectionLight (in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in DirectionLight light,out vec3 diffuseColor,out vec3 specularColor) {\r\n\tvec3 lightVec=normalize(light.direction);\r\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.color,lightVec,diffuseColor,specularColor);\r\n}\r\n\r\nvoid LayaAirBlinnPhongPointLight (in vec3 pos,in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in PointLight light,out vec3 diffuseColor,out vec3 specularColor) {\r\n\tvec3 lightVec =  pos-light.position;\r\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.color,lightVec/length(lightVec),diffuseColor,specularColor);\r\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.range);\r\n\tdiffuseColor *= attenuate;\r\n\tspecularColor*= attenuate;\r\n}\r\n\r\nvoid LayaAirBlinnPhongSpotLight (in vec3 pos,in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in SpotLight light,out vec3 diffuseColor,out vec3 specularColor) {\r\n\tvec3 lightVec =  pos-light.position;\r\n\tvec3 normalLightVec=lightVec/length(lightVec);\r\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.color,normalLightVec,diffuseColor,specularColor);\r\n\tvec2 cosAngles=cos(vec2(light.spot,light.spot*0.5)*0.5);//ConeAttenuation\r\n\tfloat dl=dot(normalize(light.direction),normalLightVec);\r\n\tdl*=smoothstep(cosAngles[0],cosAngles[1],dl);\r\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.range)*dl;\r\n\tdiffuseColor *=attenuate;\r\n\tspecularColor *=attenuate;\r\n}\r\n\r\nvec3 NormalSampleToWorldSpace(vec3 normalMapSample, vec3 unitNormal, vec3 tangent,vec3 binormal) {\r\n\tvec3 normalT =vec3(2.0*normalMapSample.x - 1.0,1.0-2.0*normalMapSample.y,2.0*normalMapSample.z - 1.0);\r\n\tmediump vec3 N = unitNormal;\r\n\tmediump vec3 T = tangent;\r\n\tmediump vec3 B = binormal;\r\n\tmat3 TBN = mat3(T, B, N);\r\n\r\n\t// Transform from tangent space to world space.\r\n\tvec3 bumpedNormal =normalize(TBN*normalT);\r\n\treturn bumpedNormal;\r\n}\r\n\r\nvec3 NormalSampleToWorldSpace1(vec4 normalMapSample, vec3 tangent, vec3 binormal, vec3 unitNormal) {\r\n\tvec3 normalT;\r\n\tnormalT.x = 2.0 * normalMapSample.x - 1.0;\r\n\tnormalT.y = 1.0 - 2.0 * normalMapSample.y;\r\n\tnormalT.z = sqrt(1.0 - clamp(dot(normalT.xy, normalT.xy), 0.0, 1.0));\r\n\r\n\tvec3 T = normalize(tangent);\r\n\tvec3 B = normalize(binormal);\r\n\tvec3 N = normalize(unitNormal);\r\n\tmat3 TBN = mat3(T, B, N);\r\n\r\n\t// Transform from tangent space to world space.\r\n\tvec3 bumpedNormal = TBN * normalize(normalT);\r\n\r\n\treturn bumpedNormal;\r\n}\r\n\r\nvec3 DecodeLightmap(vec4 color) {\r\n\treturn color.rgb*color.a*5.0;\r\n}\r\n\r\nvec3 decodeHDR(vec4 color,float range) {\r\n\treturn color.rgb*color.a*range;\r\n}\r\n\r\nvec2 TransformUV(vec2 texcoord,vec4 tilingOffset) {\r\n\tvec2 transTexcoord=vec2(texcoord.x,texcoord.y-1.0)*tilingOffset.xy+vec2(tilingOffset.z,-tilingOffset.w);\r\n\ttransTexcoord.y+=1.0;\r\n\treturn transTexcoord;\r\n}\r\n\r\nvec4 remapGLPositionZ(vec4 position) {\r\n\tposition.z=position.z * 2.0 - position.w;\r\n\treturn position;\r\n}\r\n\r\nmediump vec3 layaLinearToGammaSpace (mediump vec3 linRGB)\r\n{\r\n    linRGB = max(linRGB, vec3(0.0));\r\n    // An almost-perfect approximation from http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1\r\n    return max(1.055 * pow(linRGB,vec3(0.416666667)) - 0.055, 0.0);   \r\n}\r\n\r\nLayaLight layaDirectionLightToLight(in DirectionLight light,in float attenuate)\r\n{\r\n\tLayaLight relight;\r\n\trelight.color = light.color*attenuate;\r\n\trelight.dir = light.direction;\r\n\treturn relight;\r\n}\r\n\r\nLayaLight layaPointLightToLight(in vec3 pos,in vec3 normal, in PointLight light,in float attenuate)\r\n{\r\n\tLayaLight relight;\r\n\tvec3 lightVec =  pos-light.position;\r\n\tattenuate *= LayaAttenuation(lightVec, 1.0/light.range);\r\n\trelight.color = light.color*attenuate;\r\n\trelight.dir = normalize(lightVec);\r\n\treturn relight;\r\n}\r\n\r\nLayaLight layaSpotLightToLight(in vec3 pos,in vec3 normal, in SpotLight light,in float attenuate)\r\n{\r\n\tLayaLight relight;\r\n\tvec3 lightVec =  pos-light.position;\r\n\tvec3 normalLightVec=lightVec/length(lightVec);\r\n\tvec2 cosAngles=cos(vec2(light.spot,light.spot*0.5)*0.5);//ConeAttenuation\r\n\tfloat dl=dot(normalize(light.direction),normalLightVec);\r\n\tdl*=smoothstep(cosAngles[0],cosAngles[1],dl);\r\n\tattenuate *= LayaAttenuation(lightVec, 1.0/light.range)*dl;\r\n\trelight.dir = lightVec;\r\n\trelight.color = light.color*attenuate;\r\n\treturn relight;\r\n}\r\n\r\n\r\n\r\n\r\n","// ------------------------------------------------------------------\r\n//  PCF Filtering Tent Functions\r\n// ------------------------------------------------------------------\r\n\r\n// Assuming a isoceles right angled triangle of height \"triangleHeight\" (as drawn below).\r\n// This function return the area of the triangle above the first texel(in Y the first texel).\r\n//\r\n// |\\      <-- 45 degree slop isosceles right angled triangle\r\n// | \\\r\n// ----    <-- length of this side is \"triangleHeight\"\r\n// _ _ _ _ <-- texels\r\nfloat sampleShadowGetIRTriangleTexelArea(float triangleHeight)\r\n{\r\n    return triangleHeight - 0.5;\r\n}\r\n\r\n// Assuming a isoceles triangle of 1.5 texels height and 3 texels wide lying on 4 texels.\r\n// This function return the area of the triangle above each of those texels.\r\n//    |    <-- offset from -0.5 to 0.5, 0 meaning triangle is exactly in the center\r\n//   / \\   <-- 45 degree slop isosceles triangle (ie tent projected in 2D)\r\n//  /   \\\r\n// _ _ _ _ <-- texels\r\n// X Y Z W <-- result indices (in computedArea.xyzw and computedAreaUncut.xyzw)\r\n// Top point at (right,top) in a texel,left bottom point at (middle,middle) in a texel,right bottom point at (middle,middle) in a texel.\r\nvoid sampleShadowGetTexelAreasTent3x3(float offset, out vec4 computedArea, out vec4 computedAreaUncut)\r\n{\r\n    // Compute the exterior areas,a and h is same.\r\n    float a = offset + 0.5;\r\n    float offsetSquaredHalved = a * a * 0.5;\r\n    computedAreaUncut.x = computedArea.x = offsetSquaredHalved - offset;\r\n    computedAreaUncut.w = computedArea.w = offsetSquaredHalved;\r\n\r\n    // Compute the middle areas\r\n    // For Y : We find the area in Y of as if the left section of the isoceles triangle would\r\n    // intersect the axis between Y and Z (ie where offset = 0).\r\n    computedAreaUncut.y = sampleShadowGetIRTriangleTexelArea(1.5 - offset);\r\n    // This area is superior to the one we are looking for if (offset < 0) thus we need to\r\n    // subtract the area of the triangle defined by (0,1.5-offset), (0,1.5+offset), (-offset,1.5).\r\n    float clampedOffsetLeft = min(offset,0.0);\r\n    float areaOfSmallLeftTriangle = clampedOffsetLeft * clampedOffsetLeft;\r\n    computedArea.y = computedAreaUncut.y - areaOfSmallLeftTriangle;\r\n\r\n    // We do the same for the Z but with the right part of the isoceles triangle\r\n    computedAreaUncut.z = sampleShadowGetIRTriangleTexelArea(1.5 + offset);\r\n    float clampedOffsetRight = max(offset,0.0);\r\n    float areaOfSmallRightTriangle = clampedOffsetRight * clampedOffsetRight;\r\n    computedArea.z = computedAreaUncut.z - areaOfSmallRightTriangle;\r\n}\r\n\r\n// Assuming a isoceles triangle of 2.5 texel height and 5 texels wide lying on 6 texels.\r\n// This function return the weight of each texels area relative to the full triangle area.\r\n//  /       \\\r\n// _ _ _ _ _ _ <-- texels\r\n// 0 1 2 3 4 5 <-- computed area indices (in texelsWeights[])\r\n// Top point at (right,top) in a texel,left bottom point at (middle,middle) in a texel,right bottom point at (middle,middle) in a texel.\r\nvoid sampleShadowGetTexelWeightsTent5x5(float offset, out vec3 texelsWeightsA, out vec3 texelsWeightsB)\r\n{\r\n    vec4 areaFrom3texelTriangle;\r\n    vec4 areaUncutFrom3texelTriangle;\r\n    sampleShadowGetTexelAreasTent3x3(offset, areaFrom3texelTriangle, areaUncutFrom3texelTriangle);\r\n\r\n    // Triangle slope is 45 degree thus we can almost reuse the result of the 3 texel wide computation.\r\n    // the 5 texel wide triangle can be seen as the 3 texel wide one but shifted up by one unit/texel.\r\n    // 0.16 is 1/(the triangle area)\r\n    texelsWeightsA.x = 0.16 * (areaFrom3texelTriangle.x);\r\n    texelsWeightsA.y = 0.16 * (areaUncutFrom3texelTriangle.y);\r\n    texelsWeightsA.z = 0.16 * (areaFrom3texelTriangle.y + 1.0);\r\n    texelsWeightsB.x = 0.16 * (areaFrom3texelTriangle.z + 1.0);\r\n    texelsWeightsB.y = 0.16 * (areaUncutFrom3texelTriangle.z);\r\n    texelsWeightsB.z = 0.16 * (areaFrom3texelTriangle.w);\r\n}\r\n\r\n// 5x5 Tent filter (45 degree sloped triangles in U and V)\r\nvoid sampleShadowComputeSamplesTent5x5(vec4 shadowMapTextureTexelSize, vec2 coord, out float fetchesWeights[9], out vec2 fetchesUV[9])\r\n{\r\n    // tent base is 5x5 base thus covering from 25 to 36 texels, thus we need 9 bilinear PCF fetches\r\n    vec2 tentCenterInTexelSpace = coord.xy * shadowMapTextureTexelSize.zw;\r\n    vec2 centerOfFetchesInTexelSpace = floor(tentCenterInTexelSpace + 0.5);\r\n    vec2 offsetFromTentCenterToCenterOfFetches = tentCenterInTexelSpace - centerOfFetchesInTexelSpace;\r\n\r\n    // find the weight of each texel based on the area of a 45 degree slop tent above each of them.\r\n    vec3 texelsWeightsUA, texelsWeightsUB;\r\n    vec3 texelsWeightsVA, texelsWeightsVB;\r\n    sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.x, texelsWeightsUA, texelsWeightsUB);\r\n    sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.y, texelsWeightsVA, texelsWeightsVB);\r\n\r\n    // each fetch will cover a group of 2x2 texels, the weight of each group is the sum of the weights of the texels\r\n    vec3 fetchesWeightsU = vec3(texelsWeightsUA.xz, texelsWeightsUB.y) + vec3(texelsWeightsUA.y, texelsWeightsUB.xz);\r\n    vec3 fetchesWeightsV = vec3(texelsWeightsVA.xz, texelsWeightsVB.y) + vec3(texelsWeightsVA.y, texelsWeightsVB.xz);\r\n\r\n    // move the PCF bilinear fetches to respect texels weights\r\n    vec3 fetchesOffsetsU = vec3(texelsWeightsUA.y, texelsWeightsUB.xz) / fetchesWeightsU.xyz + vec3(-2.5,-0.5,1.5);\r\n    vec3 fetchesOffsetsV = vec3(texelsWeightsVA.y, texelsWeightsVB.xz) / fetchesWeightsV.xyz + vec3(-2.5,-0.5,1.5);\r\n    fetchesOffsetsU *= shadowMapTextureTexelSize.xxx;\r\n    fetchesOffsetsV *= shadowMapTextureTexelSize.yyy;\r\n\r\n    vec2 bilinearFetchOrigin = centerOfFetchesInTexelSpace * shadowMapTextureTexelSize.xy;\r\n    fetchesUV[0] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.x);\r\n    fetchesUV[1] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.x);\r\n    fetchesUV[2] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.x);\r\n    fetchesUV[3] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.y);\r\n    fetchesUV[4] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.y);\r\n    fetchesUV[5] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.y);\r\n    fetchesUV[6] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.z);\r\n    fetchesUV[7] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.z);\r\n    fetchesUV[8] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.z);\r\n\r\n    fetchesWeights[0] = fetchesWeightsU.x * fetchesWeightsV.x;\r\n    fetchesWeights[1] = fetchesWeightsU.y * fetchesWeightsV.x;\r\n    fetchesWeights[2] = fetchesWeightsU.z * fetchesWeightsV.x;\r\n    fetchesWeights[3] = fetchesWeightsU.x * fetchesWeightsV.y;\r\n    fetchesWeights[4] = fetchesWeightsU.y * fetchesWeightsV.y;\r\n    fetchesWeights[5] = fetchesWeightsU.z * fetchesWeightsV.y;\r\n    fetchesWeights[6] = fetchesWeightsU.x * fetchesWeightsV.z;\r\n    fetchesWeights[7] = fetchesWeightsU.y * fetchesWeightsV.z;\r\n    fetchesWeights[8] = fetchesWeightsU.z * fetchesWeightsV.z;\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nvarying vec4 v_Color;\r\nuniform vec4 u_Color;\r\n\r\nvoid main()\r\n{\r\n  gl_FragColor = v_Color * u_Color; \r\n}\r\n\r\n","#include \"Lighting.glsl\";\r\n\r\nattribute vec4 a_Position;\r\nuniform mat4 u_MvpMatrix;\r\nuniform vec4 u_Color;\r\nattribute vec4 a_Color;\r\nvarying vec4 v_Color;\r\n\r\n\r\nvoid main()\r\n{\r\n\tgl_Position = u_MvpMatrix * a_Position;\r\n\tv_Color=a_Color*u_Color;\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n\tprecision highp int;\r\n#else\r\n\tprecision mediump float;\r\n\tprecision mediump int;\r\n#endif\r\n\r\n#include \"Lighting.glsl\";\r\n#include \"Shadow.glsl\"\r\n\r\nuniform vec4 u_DiffuseColor;\r\n\r\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\r\n\tvarying vec4 v_Color;\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n\tuniform float u_AlphaTestValue;\r\n#endif\r\n\r\n#ifdef DIFFUSEMAP\r\n\tuniform sampler2D u_DiffuseTexture;\r\n#endif\r\n\r\n\r\n#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\r\n\tvarying vec2 v_Texcoord0;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tvarying vec2 v_LightMapUV;\r\n\tuniform sampler2D u_LightMap;\r\n#endif\r\n\r\nvarying vec3 v_Normal;\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\tvarying vec3 v_ViewDir; \r\n\r\n\tuniform vec3 u_MaterialSpecular;\r\n\tuniform float u_Shininess;\r\n\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tuniform DirectionLight u_DirectionLight;\r\n\t\t#endif\r\n\t\t#ifdef POINTLIGHT\r\n\t\t\tuniform PointLight u_PointLight;\r\n\t\t#endif\r\n\t\t#ifdef SPOTLIGHT\r\n\t\t\tuniform SpotLight u_SpotLight;\r\n\t\t#endif\r\n\t#else\r\n\t\tuniform mat4 u_View;\r\n\t\tuniform vec4 u_ProjectionParams;\r\n\t\tuniform vec4 u_Viewport;\r\n\t\tuniform int u_DirationLightCount;\r\n\t\tuniform sampler2D u_LightBuffer;\r\n\t\tuniform sampler2D u_LightClusterBuffer;\r\n\t#endif\r\n\r\n\t#ifdef SPECULARMAP \r\n\t\tuniform sampler2D u_SpecularTexture;\r\n\t#endif\r\n#endif\r\n\r\n#ifdef NORMALMAP \r\n\tuniform sampler2D u_NormalTexture;\r\n\tvarying vec3 v_Tangent;\r\n\tvarying vec3 v_Binormal;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tuniform float u_FogStart;\r\n\tuniform float u_FogRange;\r\n\tuniform vec3 u_FogColor;\r\n#endif\r\n\r\n#if defined(POINTLIGHT)||defined(SPOTLIGHT)||(defined(CALCULATE_SHADOWS)&&defined(SHADOW_CASCADE))||defined(CALCULATE_SPOTSHADOWS)\r\n\tvarying vec3 v_PositionWorld;\r\n#endif\r\n\r\n\r\n#include \"GlobalIllumination.glsl\";//\"GlobalIllumination.glsl use uniform should at front of this\r\n\r\n#if defined(CALCULATE_SHADOWS)&&!defined(SHADOW_CASCADE)\r\n\tvarying vec4 v_ShadowCoord;\r\n#endif\r\n\r\n#ifdef CALCULATE_SPOTSHADOWS\r\n\tvarying vec4 v_SpotShadowCoord;\r\n#endif\r\n\r\n\r\nvoid main()\r\n{\r\n\tvec3 normal;//light and SH maybe use normal\r\n\t#if defined(NORMALMAP)\r\n\t\tvec3 normalMapSample = texture2D(u_NormalTexture, v_Texcoord0).rgb;\r\n\t\tnormal = normalize(NormalSampleToWorldSpace(normalMapSample, v_Normal, v_Tangent,v_Binormal));\r\n\t#else\r\n\t\tnormal = normalize(v_Normal);\r\n\t#endif\r\n\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\tvec3 viewDir= normalize(v_ViewDir);\r\n\t#endif\r\n\r\n\tLayaGIInput giInput;\r\n\t#ifdef LIGHTMAP\t\r\n\t\tgiInput.lightmapUV=v_LightMapUV;\r\n\t#endif\r\n\tvec3 globalDiffuse=layaGIBase(giInput,1.0,normal);\r\n\t\r\n\tvec4 mainColor=u_DiffuseColor;\r\n\t#ifdef DIFFUSEMAP\r\n\t\tvec4 difTexColor=texture2D(u_DiffuseTexture, v_Texcoord0);\r\n\t\tmainColor=mainColor*difTexColor;\r\n\t#endif \r\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\r\n\t\tmainColor=mainColor*v_Color;\r\n\t#endif \r\n    \r\n\t#ifdef ALPHATEST\r\n\t\tif(mainColor.a<u_AlphaTestValue)\r\n\t\t\tdiscard;\r\n\t#endif\r\n  \r\n\t\r\n\tvec3 diffuse = vec3(0.0);\r\n\tvec3 specular= vec3(0.0);\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\tvec3 dif,spe;\r\n\t\t#ifdef SPECULARMAP\r\n\t\t\tvec3 gloss=texture2D(u_SpecularTexture, v_Texcoord0).rgb;\r\n\t\t#else\r\n\t\t\t#ifdef DIFFUSEMAP\r\n\t\t\t\tvec3 gloss=vec3(difTexColor.a);\r\n\t\t\t#else\r\n\t\t\t\tvec3 gloss=vec3(1.0);\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t\r\n\t\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tLayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_DirectionLight,dif,spe);\r\n\t\t\t#ifdef CALCULATE_SHADOWS\r\n\t\t\t\t#ifdef SHADOW_CASCADE\r\n\t\t\t\t\tvec4 shadowCoord = getShadowCoord(vec4(v_PositionWorld,1.0));\r\n\t\t\t\t#else\r\n\t\t\t\t\tvec4 shadowCoord = v_ShadowCoord;\r\n\t\t\t\t#endif\r\n\t\t\t\tfloat shadowAttenuation=sampleShadowmap(shadowCoord);\r\n\t\t\t\tdif *= shadowAttenuation;\r\n\t\t\t\tspe *= shadowAttenuation;\r\n\t\t\t#endif\r\n\t\t\tdiffuse+=dif;\r\n\t\t\tspecular+=spe;\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef POINTLIGHT\r\n\t\t\tLayaAirBlinnPhongPointLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_PointLight,dif,spe);\r\n\t\t\tdiffuse+=dif;\r\n\t\t\tspecular+=spe;\r\n\t\t#endif\r\n\r\n\t\t#ifdef SPOTLIGHT\r\n\t\t\tLayaAirBlinnPhongSpotLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_SpotLight,dif,spe);\r\n\t\t\t#ifdef CALCULATE_SPOTSHADOWS\r\n\t\t\t\tvec4 spotShadowcoord = v_SpotShadowCoord;\r\n\t\t\t\tfloat spotShadowAttenuation = sampleSpotShadowmap(spotShadowcoord);\r\n\t\t\t\tdif *= shadowAttenuation;\r\n\t\t\t\tspe *= shadowAttenuation;\r\n\t\t\t#endif\r\n\t\t\tdiffuse+=dif;\r\n\t\t\tspecular+=spe;\r\n\t\t#endif\r\n\t#else\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t{\r\n\t\t\t\tif(i >= u_DirationLightCount)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tDirectionLight directionLight = getDirectionLight(u_LightBuffer,i);\r\n\t\t\t\t#ifdef CALCULATE_SHADOWS\r\n\t\t\t\t\tif(i == 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t#ifdef SHADOW_CASCADE\r\n\t\t\t\t\t\t\tvec4 shadowCoord = getShadowCoord(vec4(v_PositionWorld,1.0));\r\n\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\tvec4 shadowCoord = v_ShadowCoord;\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\tdirectionLight.color *= sampleShadowmap(shadowCoord);\r\n\t\t\t\t\t}\r\n\t\t\t\t#endif\r\n\t\t\t\tLayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,directionLight,dif,spe);\r\n\t\t\t\tdiffuse+=dif;\r\n\t\t\t\tspecular+=spe;\r\n\t\t\t}\r\n\t\t#endif\r\n\t\t#if defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\t\tivec4 clusterInfo =getClusterInfo(u_LightClusterBuffer,u_View,u_Viewport, v_PositionWorld,gl_FragCoord,u_ProjectionParams);\r\n\t\t\t#ifdef POINTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tif(i >= clusterInfo.x)//PointLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tPointLight pointLight = getPointLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\tLayaAirBlinnPhongPointLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,pointLight,dif,spe);\r\n\t\t\t\t\tdiffuse+=dif;\r\n\t\t\t\t\tspecular+=spe;\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t\t#ifdef SPOTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tif(i >= clusterInfo.y)//SpotLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tSpotLight spotLight = getSpotLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\t#ifdef CALCULATE_SPOTSHADOWS\r\n\t\t\t\t\t\tif(i == 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvec4 spotShadowcoord = v_SpotShadowCoord;\r\n\t\t\t\t\t\t\tspotLight.color *= sampleSpotShadowmap(spotShadowcoord);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t#endif\r\n\t\t\t\t\tLayaAirBlinnPhongSpotLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,spotLight,dif,spe);\r\n\t\t\t\t\tdiffuse+=dif;\r\n\t\t\t\t\tspecular+=spe;\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t#endif\r\n\r\n\tgl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse),mainColor.a);\r\n\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\tgl_FragColor.rgb+=specular;\r\n\t#endif\r\n\t  \r\n\t#ifdef FOG\r\n\t\tfloat lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);\r\n\t\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\r\n\t#endif\r\n}\r\n\r\n","#include \"Lighting.glsl\";\r\n#include \"Shadow.glsl\";\r\n\r\nattribute vec4 a_Position;\r\n\r\n#ifdef GPU_INSTANCE\r\n\tattribute mat4 a_MvpMatrix;\r\n#else\r\n\tuniform mat4 u_MvpMatrix;\r\n#endif\r\n\r\n#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))||(defined(LIGHTMAP)&&defined(UV))\r\n\tattribute vec2 a_Texcoord0;\r\n\tvarying vec2 v_Texcoord0;\r\n#endif\r\n\r\n#if defined(LIGHTMAP)&&defined(UV1)\r\n\tattribute vec2 a_Texcoord1;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tuniform vec4 u_LightmapScaleOffset;\r\n\tvarying vec2 v_LightMapUV;\r\n#endif\r\n\r\n#ifdef COLOR\r\n\tattribute vec4 a_Color;\r\n\tvarying vec4 v_Color;\r\n#endif\r\n\r\n#ifdef BONE\r\n\tconst int c_MaxBoneCount = 24;\r\n\tattribute vec4 a_BoneIndices;\r\n\tattribute vec4 a_BoneWeights;\r\n\tuniform mat4 u_Bones[c_MaxBoneCount];\r\n#endif\r\n\r\nattribute vec3 a_Normal;\r\nvarying vec3 v_Normal; \r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\tuniform vec3 u_CameraPos;\r\n\tvarying vec3 v_ViewDir; \r\n#endif\r\n\r\n#if defined(NORMALMAP)\r\n\tattribute vec4 a_Tangent0;\r\n\tvarying vec3 v_Tangent;\r\n\tvarying vec3 v_Binormal;\r\n#endif\r\n\r\n#ifdef GPU_INSTANCE\r\n\tattribute mat4 a_WorldMat;\r\n#else\r\n\tuniform mat4 u_WorldMat;\r\n#endif\r\n\r\n#if defined(POINTLIGHT)||defined(SPOTLIGHT)||(defined(CALCULATE_SHADOWS)&&defined(SHADOW_CASCADE))||defined(CALCULATE_SPOTSHADOWS)\r\n\tvarying vec3 v_PositionWorld;\r\n#endif\r\n\r\n#if defined(CALCULATE_SHADOWS)&&!defined(SHADOW_CASCADE)\r\n\tvarying vec4 v_ShadowCoord;\r\n#endif\r\n\r\n#ifdef CALCULATE_SPOTSHADOWS\r\n\tvarying vec4 v_SpotShadowCoord;\r\n#endif\r\n\r\n#ifdef TILINGOFFSET\r\n\tuniform vec4 u_TilingOffset;\r\n#endif\r\n\r\n#ifdef SIMPLEBONE\r\n\t#ifdef GPU_INSTANCE\r\n\t\tattribute vec4 a_SimpleTextureParams;\r\n\t#else\r\n\t\tuniform vec4 u_SimpleAnimatorParams;\r\n\t#endif\r\n\tuniform sampler2D u_SimpleAnimatorTexture;\r\n\r\n\tuniform float u_SimpleAnimatorTextureSize; \r\n#endif\r\n\r\n\r\n#ifdef SIMPLEBONE\r\nmat4 loadMatFromTexture(float FramePos,int boneIndices,float offset)\r\n{\r\n\tvec2 uv;\r\n\tfloat PixelPos = FramePos+float(boneIndices)*4.0;\r\n\tfloat halfOffset = offset * 0.5;\r\n\tfloat uvoffset = PixelPos/u_SimpleAnimatorTextureSize;\r\n\tuv.y = floor(uvoffset)*offset+halfOffset;\r\n\tuv.x = mod(float(PixelPos),u_SimpleAnimatorTextureSize)*offset+halfOffset;\r\n\tvec4 mat0row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tuv.x+=offset;\r\n\tvec4 mat1row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tuv.x+=offset;\r\n\tvec4 mat2row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tuv.x+=offset;\r\n\tvec4 mat3row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tmat4 m =mat4(mat0row.x,mat0row.y,mat0row.z,mat0row.w,\r\n\t\t\t  mat1row.x,mat1row.y,mat1row.z,mat1row.w,\r\n\t\t\t  mat2row.x,mat2row.y,mat2row.z,mat2row.w,\r\n\t\t\t  mat3row.x,mat3row.y,mat3row.z,mat3row.w);\r\n\treturn m;\r\n}\r\n#endif\r\n\r\nvoid main()\r\n{\r\n\tvec4 position;\r\n\t#ifdef BONE\r\n\t\tmat4 skinTransform;\r\n\t \t#ifdef SIMPLEBONE\r\n\t\t\tfloat currentPixelPos;\r\n\t\t\t#ifdef GPU_INSTANCE\r\n\t\t\t\tcurrentPixelPos = a_SimpleTextureParams.x+a_SimpleTextureParams.y;\r\n\t\t\t#else\r\n\t\t\t\tcurrentPixelPos = u_SimpleAnimatorParams.x+u_SimpleAnimatorParams.y;\r\n\t\t\t#endif\r\n\t\t\tfloat offset = 1.0/u_SimpleAnimatorTextureSize;\r\n\t\t\tskinTransform =  loadMatFromTexture(currentPixelPos,int(a_BoneIndices.x),offset) * a_BoneWeights.x;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.y),offset) * a_BoneWeights.y;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.z),offset) * a_BoneWeights.z;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.w),offset) * a_BoneWeights.w;\r\n\t\t#else\r\n\t\t\tskinTransform =  u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\t#endif\r\n\t\tposition=skinTransform*a_Position;\r\n\t #else\r\n\t\tposition=a_Position;\r\n\t#endif\r\n\r\n\t#ifdef GPU_INSTANCE\r\n\t\tgl_Position = a_MvpMatrix * position;\r\n\t#else\r\n\t\tgl_Position = u_MvpMatrix * position;\r\n\t#endif\r\n\t\r\n\tmat4 worldMat;\r\n\t#ifdef GPU_INSTANCE\r\n\t\tworldMat = a_WorldMat;\r\n\t#else\r\n\t\tworldMat = u_WorldMat;\r\n\t#endif\r\n\r\n\tmat3 worldInvMat;\r\n\t#ifdef BONE\r\n\t\tworldInvMat=INVERSE_MAT(mat3(worldMat*skinTransform));\r\n\t#else\r\n\t\tworldInvMat=INVERSE_MAT(mat3(worldMat));\r\n\t#endif  \r\n\tv_Normal=normalize(a_Normal*worldInvMat);\r\n\t#if defined(NORMALMAP)\r\n\t\tv_Tangent=normalize(a_Tangent0.xyz*worldInvMat);\r\n\t\tv_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\r\n\t#endif\r\n\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||(defined(CALCULATE_SHADOWS)&&defined(SHADOW_CASCADE))||defined(CALCULATE_SPOTSHADOWS)\r\n\t\tvec3 positionWS=(worldMat*position).xyz;\r\n\t\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\t\tv_ViewDir = u_CameraPos-positionWS;\r\n\t\t#endif\r\n\t\t#if defined(POINTLIGHT)||defined(SPOTLIGHT)||(defined(CALCULATE_SHADOWS)&&defined(SHADOW_CASCADE))||defined(CALCULATE_SPOTSHADOWS)\r\n\t\t\tv_PositionWorld = positionWS;\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\r\n\t\t#ifdef TILINGOFFSET\r\n\t\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\r\n\t\t#else\r\n\t\t\tv_Texcoord0=a_Texcoord0;\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t#ifdef LIGHTMAP\r\n\t\t#ifdef UV1\r\n\t\t\tv_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\r\n\t\t#else\r\n\t\t\tv_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\r\n\t\t#endif \r\n\t\tv_LightMapUV.y=1.0-v_LightMapUV.y;\r\n\t#endif\r\n\r\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\r\n\t\tv_Color=a_Color;\r\n\t#endif\r\n\r\n\t#if defined(CALCULATE_SHADOWS)&&!defined(SHADOW_CASCADE)\r\n\t\tv_ShadowCoord =getShadowCoord(vec4(positionWS,1.0));\r\n\t#endif\r\n\r\n\t#ifdef CALCULATE_SPOTSHADOWS\r\n\t\tv_SpotShadowCoord = u_SpotViewProjectMatrix*vec4(positionWS,1.0);\r\n\t#endif\r\n\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n\tprecision highp int;\r\n#else\r\n\tprecision mediump float;\r\n\tprecision mediump int;\r\n#endif\r\n\r\n#include \"ShadowCasterFS.glsl\"\r\n\r\nvoid main()\r\n{\r\n\tgl_FragColor=shadowCasterFragment();\r\n}","#include \"ShadowCasterVS.glsl\"\r\n\r\nvoid main()\r\n{\r\n\tvec4 positionCS =  shadowCasterVertex();\r\n\tgl_Position=remapGLPositionZ(positionCS);\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n  precision highp float;\r\n#else\r\n  precision mediump float;\r\n#endif\r\n\r\nvarying vec4 v_Color;\r\nvarying vec2 v_TextureCoordinate;\r\nuniform sampler2D u_texture;\r\nuniform vec4 u_Tintcolor;\r\n\r\n#ifdef RENDERMODE_MESH\r\n\tvarying vec4 v_MeshColor;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tuniform float u_FogStart;\r\n\tuniform float u_FogRange;\r\n\t#ifdef ADDTIVEFOG\r\n\t#else\r\n\t\tuniform vec3 u_FogColor;\r\n\t#endif\r\n#endif\r\n\r\n\r\nvoid main()\r\n{\t\r\n\t#ifdef RENDERMODE_MESH\r\n\t\tgl_FragColor=v_MeshColor;\r\n\t#else\r\n\t\tgl_FragColor=vec4(1.0);\t\r\n\t#endif\r\n\t\t\r\n\t#ifdef DIFFUSEMAP\r\n\t\t#ifdef TINTCOLOR\r\n\t\t\tgl_FragColor*=texture2D(u_texture,v_TextureCoordinate)*u_Tintcolor*2.0*v_Color;\r\n\t\t#else\r\n\t\t\tgl_FragColor*=texture2D(u_texture,v_TextureCoordinate)*v_Color;\r\n\t\t#endif\r\n\t#else\r\n\t\t#ifdef TINTCOLOR\r\n\t\t\tgl_FragColor*=u_Tintcolor*2.0*v_Color;\r\n\t\t#else\r\n\t\t\tgl_FragColor*=v_Color;\r\n\t\t#endif\r\n\t#endif\r\n\t\r\n\t#ifdef FOG\r\n\t\tfloat lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);\r\n\t\t#ifdef ADDTIVEFOG\r\n\t\t\tgl_FragColor.rgb=mix(gl_FragColor.rgb,vec3(0.0,0.0,0.0),lerpFact);\r\n\t\t#else\r\n\t\t\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\r\n\t\t#endif\r\n\t#endif\r\n}","#include \"Lighting.glsl\";\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n  precision highp float;\r\n#else\r\n  precision mediump float;\r\n#endif\r\n\r\n#if defined(SPHERHBILLBOARD)||defined(STRETCHEDBILLBOARD)||defined(HORIZONTALBILLBOARD)||defined(VERTICALBILLBOARD)\r\n\tattribute vec4 a_CornerTextureCoordinate;\r\n#endif\r\n#ifdef RENDERMODE_MESH\r\n\tattribute vec3 a_MeshPosition;\r\n\tattribute vec4 a_MeshColor;\r\n\tattribute vec2 a_MeshTextureCoordinate;\r\n\tvarying vec4 v_MeshColor;\r\n#endif\r\n\r\nattribute vec4 a_ShapePositionStartLifeTime;\r\nattribute vec4 a_DirectionTime;\r\nattribute vec4 a_StartColor;\r\nattribute vec3 a_StartSize;\r\nattribute vec3 a_StartRotation0;\r\nattribute float a_StartSpeed;\r\n#if defined(COLOROVERLIFETIME)||defined(RANDOMCOLOROVERLIFETIME)||defined(SIZEOVERLIFETIMERANDOMCURVES)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\r\n  attribute vec4 a_Random0;\r\n#endif\r\n#if defined(TEXTURESHEETANIMATIONRANDOMCURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n  attribute vec4 a_Random1;\r\n#endif\r\nattribute vec3 a_SimulationWorldPostion;\r\nattribute vec4 a_SimulationWorldRotation;\r\n\r\nvarying vec4 v_Color;\r\n#ifdef DIFFUSEMAP\r\n\tvarying vec2 v_TextureCoordinate;\r\n#endif\r\n\r\nuniform float u_CurrentTime;\r\nuniform vec3 u_Gravity;\r\n\r\nuniform vec3 u_WorldPosition;\r\nuniform vec4 u_WorldRotation;\r\nuniform bool u_ThreeDStartRotation;\r\nuniform int u_ScalingMode;\r\nuniform vec3 u_PositionScale;\r\nuniform vec3 u_SizeScale;\r\nuniform mat4 u_View;\r\nuniform mat4 u_Projection;\r\n\r\n#ifdef STRETCHEDBILLBOARD\r\n\tuniform vec3 u_CameraPos;\r\n#endif\r\nuniform vec3 u_CameraDirection;//TODO:只有几种广告牌模式需要用\r\nuniform vec3 u_CameraUp;\r\n\r\nuniform  float u_StretchedBillboardLengthScale;\r\nuniform  float u_StretchedBillboardSpeedScale;\r\nuniform int u_SimulationSpace;\r\n\r\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n  uniform  int  u_VOLSpaceType;\r\n#endif\r\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)\r\n  uniform  vec3 u_VOLVelocityConst;\r\n#endif\r\n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n  uniform  vec2 u_VOLVelocityGradientX[4];//x为key,y为速度\r\n  uniform  vec2 u_VOLVelocityGradientY[4];//x为key,y为速度\r\n  uniform  vec2 u_VOLVelocityGradientZ[4];//x为key,y为速度\r\n#endif\r\n#ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\r\n  uniform  vec3 u_VOLVelocityConstMax;\r\n#endif\r\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n  uniform  vec2 u_VOLVelocityGradientMaxX[4];//x为key,y为速度\r\n  uniform  vec2 u_VOLVelocityGradientMaxY[4];//x为key,y为速度\r\n  uniform  vec2 u_VOLVelocityGradientMaxZ[4];//x为key,y为速度\r\n#endif\r\n\r\n#ifdef COLOROVERLIFETIME\r\n  uniform  vec4 u_ColorOverLifeGradientColors[4];//x为key,yzw为Color\r\n  uniform  vec2 u_ColorOverLifeGradientAlphas[4];//x为key,y为Alpha\r\n#endif\r\n#ifdef RANDOMCOLOROVERLIFETIME\r\n  uniform  vec4 u_ColorOverLifeGradientColors[4];//x为key,yzw为Color\r\n  uniform  vec2 u_ColorOverLifeGradientAlphas[4];//x为key,y为Alpha\r\n  uniform  vec4 u_MaxColorOverLifeGradientColors[4];//x为key,yzw为Color\r\n  uniform  vec2 u_MaxColorOverLifeGradientAlphas[4];//x为key,y为Alpha\r\n#endif\r\n\r\n\r\n#if defined(SIZEOVERLIFETIMECURVE)||defined(SIZEOVERLIFETIMERANDOMCURVES)\r\n  uniform  vec2 u_SOLSizeGradient[4];//x为key,y为尺寸\r\n#endif\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n  uniform  vec2 u_SOLSizeGradientMax[4];//x为key,y为尺寸\r\n#endif\r\n#if defined(SIZEOVERLIFETIMECURVESEPERATE)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)\r\n  uniform  vec2 u_SOLSizeGradientX[4];//x为key,y为尺寸\r\n  uniform  vec2 u_SOLSizeGradientY[4];//x为key,y为尺寸\r\n  uniform  vec2 u_SOLSizeGradientZ[4];//x为key,y为尺寸\r\n#endif\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n  uniform  vec2 u_SOLSizeGradientMaxX[4];//x为key,y为尺寸\r\n  uniform  vec2 u_SOLSizeGradientMaxY[4];//x为key,y为尺寸\r\n  uniform  vec2 u_SOLSizeGradientMaxZ[4];//x为key,y为尺寸\r\n#endif\r\n\r\n\r\n#ifdef ROTATIONOVERLIFETIME\r\n  #if defined(ROTATIONOVERLIFETIMECONSTANT)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\r\n    uniform  float u_ROLAngularVelocityConst;\r\n  #endif\r\n  #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n    uniform  float u_ROLAngularVelocityConstMax;\r\n  #endif\r\n  #if defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\r\n    uniform  vec2 u_ROLAngularVelocityGradient[4];//x为key,y为旋转\r\n  #endif\r\n  #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n    uniform  vec2 u_ROLAngularVelocityGradientMax[4];//x为key,y为旋转\r\n  #endif\r\n#endif\r\n#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n  #if defined(ROTATIONOVERLIFETIMECONSTANT)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\r\n    uniform  vec3 u_ROLAngularVelocityConstSeprarate;\r\n  #endif\r\n  #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n    uniform  vec3 u_ROLAngularVelocityConstMaxSeprarate;\r\n  #endif\r\n  #if defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\r\n    uniform  vec2 u_ROLAngularVelocityGradientX[4];\r\n    uniform  vec2 u_ROLAngularVelocityGradientY[4];\r\n    uniform  vec2 u_ROLAngularVelocityGradientZ[4];\r\n  #endif\r\n  #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n    uniform  vec2 u_ROLAngularVelocityGradientMaxX[4];\r\n    uniform  vec2 u_ROLAngularVelocityGradientMaxY[4];\r\n    uniform  vec2 u_ROLAngularVelocityGradientMaxZ[4];\r\n\tuniform  vec2 u_ROLAngularVelocityGradientMaxW[4];\r\n  #endif\r\n#endif\r\n\r\n#if defined(TEXTURESHEETANIMATIONCURVE)||defined(TEXTURESHEETANIMATIONRANDOMCURVE)\r\n  uniform  float u_TSACycles;\r\n  uniform  vec2 u_TSASubUVLength;\r\n  uniform  vec2 u_TSAGradientUVs[4];//x为key,y为frame\r\n#endif\r\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\r\n  uniform  vec2 u_TSAMaxGradientUVs[4];//x为key,y为frame\r\n#endif\r\n\r\n#ifdef TILINGOFFSET\r\n\tuniform vec4 u_TilingOffset;\r\n#endif\r\n\r\nvec3 rotationByEuler(in vec3 vector,in vec3 rot)\r\n{\r\n\tfloat halfRoll = rot.z * 0.5;\r\n    float halfPitch = rot.x * 0.5;\r\n\tfloat halfYaw = rot.y * 0.5;\r\n\r\n\tfloat sinRoll = sin(halfRoll);\r\n\tfloat cosRoll = cos(halfRoll);\r\n\tfloat sinPitch = sin(halfPitch);\r\n\tfloat cosPitch = cos(halfPitch);\r\n\tfloat sinYaw = sin(halfYaw);\r\n\tfloat cosYaw = cos(halfYaw);\r\n\r\n\tfloat quaX = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\r\n\tfloat quaY = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\r\n\tfloat quaZ = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\r\n\tfloat quaW = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\r\n\t\r\n\t//vec4 q=vec4(quaX,quaY,quaZ,quaW);\r\n\t//vec3 temp = cross(q.xyz, vector) + q.w * vector;\r\n\t//return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\r\n\t\r\n\tfloat x = quaX + quaX;\r\n    float y = quaY + quaY;\r\n    float z = quaZ + quaZ;\r\n    float wx = quaW * x;\r\n    float wy = quaW * y;\r\n    float wz = quaW * z;\r\n\tfloat xx = quaX * x;\r\n    float xy = quaX * y;\r\n\tfloat xz = quaX * z;\r\n    float yy = quaY * y;\r\n    float yz = quaY * z;\r\n    float zz = quaZ * z;\r\n\r\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\r\n                ((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\r\n                ((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\r\n\t\r\n}\r\n\r\n//假定axis已经归一化\r\nvec3 rotationByAxis(in vec3 vector,in vec3 axis, in float angle)\r\n{\r\n\tfloat halfAngle = angle * 0.5;\r\n\tfloat sin = sin(halfAngle);\r\n\t\r\n\tfloat quaX = axis.x * sin;\r\n\tfloat quaY = axis.y * sin;\r\n\tfloat quaZ = axis.z * sin;\r\n\tfloat quaW = cos(halfAngle);\r\n\t\r\n\t//vec4 q=vec4(quaX,quaY,quaZ,quaW);\r\n\t//vec3 temp = cross(q.xyz, vector) + q.w * vector;\r\n\t//return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\r\n\t\r\n\tfloat x = quaX + quaX;\r\n    float y = quaY + quaY;\r\n    float z = quaZ + quaZ;\r\n    float wx = quaW * x;\r\n    float wy = quaW * y;\r\n    float wz = quaW * z;\r\n\tfloat xx = quaX * x;\r\n    float xy = quaX * y;\r\n\tfloat xz = quaX * z;\r\n    float yy = quaY * y;\r\n    float yz = quaY * z;\r\n    float zz = quaZ * z;\r\n\r\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\r\n                ((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\r\n                ((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\r\n\t\r\n}\r\n\r\nvec3 rotationByQuaternions(in vec3 v,in vec4 q) \r\n{\r\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\r\n}\r\n\r\n \r\n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)||defined(SIZEOVERLIFETIMECURVE)||defined(SIZEOVERLIFETIMECURVESEPERATE)||defined(SIZEOVERLIFETIMERANDOMCURVES)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)\r\nfloat getCurValueFromGradientFloat(in vec2 gradientNumbers[4],in float normalizedAge)\r\n{\r\n\tfloat curValue;\r\n\tfor(int i=1;i<4;i++)\r\n\t{\r\n\t\tvec2 gradientNumber=gradientNumbers[i];\r\n\t\tfloat key=gradientNumber.x;\r\n\t\tif(key>=normalizedAge)\r\n\t\t{\r\n\t\t\tvec2 lastGradientNumber=gradientNumbers[i-1];\r\n\t\t\tfloat lastKey=lastGradientNumber.x;\r\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\r\n\t\t\tcurValue=mix(lastGradientNumber.y,gradientNumber.y,age);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn curValue;\r\n}\r\n#endif\r\n\r\n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)||defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\r\nfloat getTotalValueFromGradientFloat(in vec2 gradientNumbers[4],in float normalizedAge)\r\n{\r\n\tfloat totalValue=0.0;\r\n\tfor(int i=1;i<4;i++)\r\n\t{\r\n\t\tvec2 gradientNumber=gradientNumbers[i];\r\n\t\tfloat key=gradientNumber.x;\r\n\t\tvec2 lastGradientNumber=gradientNumbers[i-1];\r\n\t\tfloat lastValue=lastGradientNumber.y;\r\n\t\t\r\n\t\tif(key>=normalizedAge){\r\n\t\t\tfloat lastKey=lastGradientNumber.x;\r\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\r\n\t\t\ttotalValue+=(lastValue+mix(lastValue,gradientNumber.y,age))/2.0*a_ShapePositionStartLifeTime.w*(normalizedAge-lastKey);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\telse{\r\n\t\t\ttotalValue+=(lastValue+gradientNumber.y)/2.0*a_ShapePositionStartLifeTime.w*(key-lastGradientNumber.x);\r\n\t\t}\r\n\t}\r\n\treturn totalValue;\r\n}\r\n#endif\r\n\r\n#if defined(COLOROVERLIFETIME)||defined(RANDOMCOLOROVERLIFETIME)\r\nvec4 getColorFromGradient(in vec2 gradientAlphas[4],in vec4 gradientColors[4],in float normalizedAge)\r\n{\r\n\tvec4 overTimeColor;\r\n\tfor(int i=1;i<4;i++)\r\n\t{\r\n\t\tvec2 gradientAlpha=gradientAlphas[i];\r\n\t\tfloat alphaKey=gradientAlpha.x;\r\n\t\tif(alphaKey>=normalizedAge)\r\n\t\t{\r\n\t\t\tvec2 lastGradientAlpha=gradientAlphas[i-1];\r\n\t\t\tfloat lastAlphaKey=lastGradientAlpha.x;\r\n\t\t\tfloat age=(normalizedAge-lastAlphaKey)/(alphaKey-lastAlphaKey);\r\n\t\t\toverTimeColor.a=mix(lastGradientAlpha.y,gradientAlpha.y,age);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor(int i=1;i<4;i++)\r\n\t{\r\n\t\tvec4 gradientColor=gradientColors[i];\r\n\t\tfloat colorKey=gradientColor.x;\r\n\t\tif(colorKey>=normalizedAge)\r\n\t\t{\r\n\t\t\tvec4 lastGradientColor=gradientColors[i-1];\r\n\t\t\tfloat lastColorKey=lastGradientColor.x;\r\n\t\t\tfloat age=(normalizedAge-lastColorKey)/(colorKey-lastColorKey);\r\n\t\t\toverTimeColor.rgb=mix(gradientColors[i-1].yzw,gradientColor.yzw,age);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn overTimeColor;\r\n}\r\n#endif\r\n\r\n\r\n#if defined(TEXTURESHEETANIMATIONCURVE)||defined(TEXTURESHEETANIMATIONRANDOMCURVE)\r\nfloat getFrameFromGradient(in vec2 gradientFrames[4],in float normalizedAge)\r\n{\r\n\tfloat overTimeFrame;\r\n\tfor(int i=1;i<4;i++)\r\n\t{\r\n\t\tvec2 gradientFrame=gradientFrames[i];\r\n\t\tfloat key=gradientFrame.x;\r\n\t\tif(key>=normalizedAge)\r\n\t\t{\r\n\t\t\tvec2 lastGradientFrame=gradientFrames[i-1];\r\n\t\t\tfloat lastKey=lastGradientFrame.x;\r\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\r\n\t\t\toverTimeFrame=mix(lastGradientFrame.y,gradientFrame.y,age);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn floor(overTimeFrame);\r\n}\r\n#endif\r\n\r\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\nvec3 computeParticleLifeVelocity(in float normalizedAge)\r\n{\r\n  vec3 outLifeVelocity;\r\n  #ifdef VELOCITYOVERLIFETIMECONSTANT\r\n\t outLifeVelocity=u_VOLVelocityConst; \r\n  #endif\r\n  #ifdef VELOCITYOVERLIFETIMECURVE\r\n     outLifeVelocity= vec3(getCurValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge));\r\n  #endif\r\n  #ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\r\n\t outLifeVelocity=mix(u_VOLVelocityConst,u_VOLVelocityConstMax,vec3(a_Random1.y,a_Random1.z,a_Random1.w)); \r\n  #endif\r\n  #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n     outLifeVelocity=vec3(mix(getCurValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxX,normalizedAge),a_Random1.y),\r\n\t                 mix(getCurValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxY,normalizedAge),a_Random1.z),\r\n\t\t\t\t\t mix(getCurValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxZ,normalizedAge),a_Random1.w));\r\n  #endif\r\n\t\t\t\t\t\r\n  return outLifeVelocity;\r\n} \r\n#endif\r\n\r\nvec3 computeParticlePosition(in vec3 startVelocity, in vec3 lifeVelocity,in float age,in float normalizedAge,vec3 gravityVelocity,vec4 worldRotation)\r\n{\r\n   vec3 startPosition;\r\n   vec3 lifePosition;\r\n   #if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n\t#ifdef VELOCITYOVERLIFETIMECONSTANT\r\n\t\t  startPosition=startVelocity*age;\r\n\t\t  lifePosition=lifeVelocity*age;\r\n\t#endif\r\n\t#ifdef VELOCITYOVERLIFETIMECURVE\r\n\t\t  startPosition=startVelocity*age;\r\n\t\t  lifePosition=vec3(getTotalValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge));\r\n\t#endif\r\n\t#ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\r\n\t\t  startPosition=startVelocity*age;\r\n\t\t  lifePosition=lifeVelocity*age;\r\n\t#endif\r\n\t#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n\t\t  startPosition=startVelocity*age;\r\n\t\t  lifePosition=vec3(mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxX,normalizedAge),a_Random1.y)\r\n\t      ,mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxY,normalizedAge),a_Random1.z)\r\n\t      ,mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxZ,normalizedAge),a_Random1.w));\r\n\t#endif\r\n\t\r\n\tvec3 finalPosition;\r\n\tif(u_VOLSpaceType==0){\r\n\t  if(u_ScalingMode!=2)\r\n\t   finalPosition =rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition+lifePosition),worldRotation);\r\n\t  else\r\n\t   finalPosition =rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition+lifePosition,worldRotation);\r\n\t}\r\n\telse{\r\n\t  if(u_ScalingMode!=2)\r\n\t    finalPosition = rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition),worldRotation)+lifePosition;\r\n\t  else\r\n\t    finalPosition = rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition,worldRotation)+lifePosition;\r\n\t}\r\n  #else\r\n\t startPosition=startVelocity*age;\r\n\t vec3 finalPosition;\r\n\t if(u_ScalingMode!=2)\r\n\t\t\tfinalPosition = rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition),worldRotation);\r\n\t else\r\n\t   \tfinalPosition = rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition,worldRotation);\r\n  #endif\r\n  \r\n  if(u_SimulationSpace==0)\r\n    finalPosition=finalPosition+a_SimulationWorldPostion;\r\n  else if(u_SimulationSpace==1) \r\n    finalPosition=finalPosition+u_WorldPosition;\r\n  \r\n  finalPosition+=0.5*gravityVelocity*age;\r\n \r\n  return  finalPosition;\r\n}\r\n\r\n\r\nvec4 computeParticleColor(in vec4 color,in float normalizedAge)\r\n{\r\n\t#ifdef COLOROVERLIFETIME\r\n\t  color*=getColorFromGradient(u_ColorOverLifeGradientAlphas,u_ColorOverLifeGradientColors,normalizedAge);\r\n\t#endif\r\n\t\r\n\t#ifdef RANDOMCOLOROVERLIFETIME\r\n\t  color*=mix(getColorFromGradient(u_ColorOverLifeGradientAlphas,u_ColorOverLifeGradientColors,normalizedAge),getColorFromGradient(u_MaxColorOverLifeGradientAlphas,u_MaxColorOverLifeGradientColors,normalizedAge),a_Random0.y);\r\n\t#endif\r\n\r\n    return color;\r\n}\r\n\r\nvec2 computeParticleSizeBillbard(in vec2 size,in float normalizedAge)\r\n{\r\n\t#ifdef SIZEOVERLIFETIMECURVE\r\n\t\tsize*=getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge);\r\n\t#endif\r\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n\t    size*=mix(getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMax,normalizedAge),a_Random0.z); \r\n\t#endif\r\n\t#ifdef SIZEOVERLIFETIMECURVESEPERATE\r\n\t\tsize*=vec2(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge));\r\n\t#endif\r\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n\t    size*=vec2(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxX,normalizedAge),a_Random0.z)\r\n\t    ,mix(getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxY,normalizedAge),a_Random0.z));\r\n\t#endif\r\n\treturn size;\r\n}\r\n\r\n#ifdef RENDERMODE_MESH\r\nvec3 computeParticleSizeMesh(in vec3 size,in float normalizedAge)\r\n{\r\n\t#ifdef SIZEOVERLIFETIMECURVE\r\n\t\tsize*=getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge);\r\n\t#endif\r\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n\t    size*=mix(getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMax,normalizedAge),a_Random0.z); \r\n\t#endif\r\n\t#ifdef SIZEOVERLIFETIMECURVESEPERATE\r\n\t\tsize*=vec3(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientZ,normalizedAge));\r\n\t#endif\r\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n\t    size*=vec3(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxX,normalizedAge),a_Random0.z)\r\n\t    ,mix(getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxY,normalizedAge),a_Random0.z)\r\n\t\t,mix(getCurValueFromGradientFloat(u_SOLSizeGradientZ,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxZ,normalizedAge),a_Random0.z));\r\n\t#endif\r\n\treturn size;\r\n}\r\n#endif\r\n\r\nfloat computeParticleRotationFloat(in float rotation,in float age,in float normalizedAge)\r\n{ \r\n\t#ifdef ROTATIONOVERLIFETIME\r\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\r\n\t\t\tfloat ageRot=u_ROLAngularVelocityConst*age;\r\n\t        rotation+=ageRot;\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\r\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge);\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConst,u_ROLAngularVelocityConstMax,a_Random0.w)*age;\r\n\t        rotation+=ageRot;\r\n\t    #endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,normalizedAge),a_Random0.w);\r\n\t\t#endif\r\n\t#endif\r\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\r\n\t\t\tfloat ageRot=u_ROLAngularVelocityConstSeprarate.z*age;\r\n\t        rotation+=ageRot;\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\r\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge);\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConstSeprarate.z,u_ROLAngularVelocityConstMaxSeprarate.z,a_Random0.w)*age;\r\n\t        rotation+=ageRot;\r\n\t    #endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,normalizedAge),a_Random0.w));\r\n\t\t#endif\r\n\t#endif\r\n\treturn rotation;\r\n}\r\n\r\n#if defined(RENDERMODE_MESH)&&(defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE))\r\nvec3 computeParticleRotationVec3(in vec3 rotation,in float age,in float normalizedAge)\r\n{ \r\n\t#ifdef ROTATIONOVERLIFETIME\r\n\t#ifdef ROTATIONOVERLIFETIMECONSTANT\r\n\t\t\tfloat ageRot=u_ROLAngularVelocityConst*age;\r\n\t        rotation+=ageRot;\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\r\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge);\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConst,u_ROLAngularVelocityConstMax,a_Random0.w)*age;\r\n\t        rotation+=ageRot;\r\n\t    #endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,normalizedAge),a_Random0.w);\r\n\t\t#endif\r\n\t#endif\r\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\r\n\t\t\tvec3 ageRot=u_ROLAngularVelocityConstSeprarate*age;\r\n\t        rotation+=ageRot;\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\r\n\t\t\trotation+=vec3(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge));\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n\t\t\tvec3 ageRot=mix(u_ROLAngularVelocityConstSeprarate,u_ROLAngularVelocityConstMaxSeprarate,a_Random0.w)*age;\r\n\t        rotation+=ageRot;\r\n\t    #endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n\t\t\trotation+=vec3(mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxX,normalizedAge),a_Random0.w)\r\n\t        ,mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxY,normalizedAge),a_Random0.w)\r\n\t        ,mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,normalizedAge),a_Random0.w));\r\n\t\t#endif\r\n\t#endif\r\n\treturn rotation;\r\n}\r\n#endif\r\n\r\nvec2 computeParticleUV(in vec2 uv,in float normalizedAge)\r\n{ \r\n\t#ifdef TEXTURESHEETANIMATIONCURVE\r\n\t\tfloat cycleNormalizedAge=normalizedAge*u_TSACycles;\r\n\t\tfloat frame=getFrameFromGradient(u_TSAGradientUVs,cycleNormalizedAge-floor(cycleNormalizedAge));\r\n\t\tfloat totalULength=frame*u_TSASubUVLength.x;\r\n\t\tfloat floorTotalULength=floor(totalULength);\r\n\t    uv.x+=totalULength-floorTotalULength;\r\n\t\tuv.y+=floorTotalULength*u_TSASubUVLength.y;\r\n    #endif\r\n\t#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\r\n\t\tfloat cycleNormalizedAge=normalizedAge*u_TSACycles;\r\n\t\tfloat uvNormalizedAge=cycleNormalizedAge-floor(cycleNormalizedAge);\r\n\t    float frame=floor(mix(getFrameFromGradient(u_TSAGradientUVs,uvNormalizedAge),getFrameFromGradient(u_TSAMaxGradientUVs,uvNormalizedAge),a_Random1.x));\r\n\t\tfloat totalULength=frame*u_TSASubUVLength.x;\r\n\t\tfloat floorTotalULength=floor(totalULength);\r\n\t    uv.x+=totalULength-floorTotalULength;\r\n\t\tuv.y+=floorTotalULength*u_TSASubUVLength.y;\r\n    #endif\r\n\treturn uv;\r\n}\r\n\r\nvoid main()\r\n{\r\n\tfloat age = u_CurrentTime - a_DirectionTime.w;\r\n\tfloat normalizedAge = age/a_ShapePositionStartLifeTime.w;\r\n\tvec3 lifeVelocity;\r\n\tif(normalizedAge<1.0)\r\n\t{ \r\n\t\tvec3 startVelocity=a_DirectionTime.xyz*a_StartSpeed;\r\n\t\t#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n\t\t\tlifeVelocity= computeParticleLifeVelocity(normalizedAge);//计算粒子生命周期速度\r\n\t\t#endif \r\n\t\tvec3 gravityVelocity=u_Gravity*age;\r\n\t\t\r\n\t\tvec4 worldRotation;\r\n\t\tif(u_SimulationSpace==0)\r\n\t\t\tworldRotation=a_SimulationWorldRotation;\r\n\t\telse\r\n\t\t\tworldRotation=u_WorldRotation;\r\n\t\t\r\n\t\tvec3 center=computeParticlePosition(startVelocity, lifeVelocity, age, normalizedAge,gravityVelocity,worldRotation);//计算粒子位置\r\n\t\r\n\t\r\n\t\t#ifdef SPHERHBILLBOARD\r\n\t\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\r\n\t\t\tvec3 cameraUpVector =normalize(u_CameraUp);//TODO:是否外面归一化\r\n\t\t\tvec3 sideVector = normalize(cross(u_CameraDirection,cameraUpVector));\r\n\t\t\tvec3 upVector = normalize(cross(sideVector,u_CameraDirection));\r\n\t\t\tcorner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\r\n\t\t\t#if defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE)\r\n\t\t\t\tif(u_ThreeDStartRotation){\r\n\t\t\t\t\tvec3 rotation=vec3(a_StartRotation0.xy,computeParticleRotationFloat(a_StartRotation0.z,age,normalizedAge));\r\n\t\t\t\t\tcenter += u_SizeScale.xzy*rotationByEuler(corner.x*sideVector+corner.y*upVector,rotation);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\r\n\t\t\t\t\tfloat c = cos(rot);\r\n\t\t\t\t\tfloat s = sin(rot);\r\n\t\t\t\t\tmat2 rotation= mat2(c, -s, s, c);\r\n\t\t\t\t\tcorner=rotation*corner;\r\n\t\t\t\t\tcenter += u_SizeScale.xzy*(corner.x*sideVector+corner.y*upVector);\r\n\t\t\t\t}\r\n\t\t\t#else\r\n\t\t\t\tif(u_ThreeDStartRotation){\r\n\t\t\t\t\tcenter += u_SizeScale.xzy*rotationByEuler(corner.x*sideVector+corner.y*upVector,a_StartRotation0);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tfloat c = cos(a_StartRotation0.x);\r\n\t\t\t\t\tfloat s = sin(a_StartRotation0.x);\r\n\t\t\t\t\tmat2 rotation= mat2(c, -s, s, c);\r\n\t\t\t\t\tcorner=rotation*corner;\r\n\t\t\t\t\tcenter += u_SizeScale.xzy*(corner.x*sideVector+corner.y*upVector);\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef STRETCHEDBILLBOARD\r\n\t\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\r\n\t\t\tvec3 velocity;\r\n\t\t\t#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n\t\t\t\tif(u_VOLSpaceType==0)\r\n\t\t\t\tvelocity=rotationByQuaternions(u_SizeScale*(startVelocity+lifeVelocity),worldRotation)+gravityVelocity;\r\n\t\t\t\telse\r\n\t\t\t\tvelocity=rotationByQuaternions(u_SizeScale*startVelocity,worldRotation)+lifeVelocity+gravityVelocity;\r\n\t\t\t#else\r\n\t\t\t\tvelocity= rotationByQuaternions(u_SizeScale*startVelocity,worldRotation)+gravityVelocity;\r\n\t\t\t#endif\t\r\n\t\t\tvec3 cameraUpVector = normalize(velocity);\r\n\t\t\tvec3 direction = normalize(center-u_CameraPos);\r\n\t\t\tvec3 sideVector = normalize(cross(direction,normalize(velocity)));\r\n\t\t\t\r\n\t\t\tsideVector=u_SizeScale.xzy*sideVector;\r\n\t\t\tcameraUpVector=length(vec3(u_SizeScale.x,0.0,0.0))*cameraUpVector;\r\n\t\t\t\r\n\t\t\tvec2 size=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\r\n\t\t\t\r\n\t\t\tconst mat2 rotaionZHalfPI=mat2(0.0, -1.0, 1.0, 0.0);\r\n\t\t\tcorner=rotaionZHalfPI*corner;\r\n\t\t\tcorner.y=corner.y-abs(corner.y);\r\n\t\t\t\r\n\t\t\tfloat speed=length(velocity);//TODO:\r\n\t\t\tcenter +=sign(u_SizeScale.x)*(sign(u_StretchedBillboardLengthScale)*size.x*corner.x*sideVector+(speed*u_StretchedBillboardSpeedScale+size.y*u_StretchedBillboardLengthScale)*corner.y*cameraUpVector);\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef HORIZONTALBILLBOARD\r\n\t\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\r\n\t\t\tconst vec3 cameraUpVector=vec3(0.0,0.0,1.0);\r\n\t\t\tconst vec3 sideVector = vec3(-1.0,0.0,0.0);\r\n\t\t\t\r\n\t\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\r\n\t\t\tfloat c = cos(rot);\r\n\t\t\tfloat s = sin(rot);\r\n\t\t\tmat2 rotation= mat2(c, -s, s, c);\r\n\t\t\tcorner=rotation*corner*cos(0.78539816339744830961566084581988);//TODO:临时缩小cos45,不确定U3D原因\r\n\t\t\tcorner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\r\n\t\t\tcenter +=u_SizeScale.xzy*(corner.x*sideVector+ corner.y*cameraUpVector);\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef VERTICALBILLBOARD\r\n\t\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\r\n\t\t\tconst vec3 cameraUpVector =vec3(0.0,1.0,0.0);\r\n\t\t\tvec3 sideVector = normalize(cross(u_CameraDirection,cameraUpVector));\r\n\t\t\t\r\n\t\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\r\n\t\t\tfloat c = cos(rot);\r\n\t\t\tfloat s = sin(rot);\r\n\t\t\tmat2 rotation= mat2(c, -s, s, c);\r\n\t\t\tcorner=rotation*corner*cos(0.78539816339744830961566084581988);//TODO:临时缩小cos45,不确定U3D原因\r\n\t\t\tcorner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\r\n\t\t\tcenter +=u_SizeScale.xzy*(corner.x*sideVector+ corner.y*cameraUpVector);\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef RENDERMODE_MESH\r\n\t\t\tvec3 size=computeParticleSizeMesh(a_StartSize,normalizedAge);\r\n\t\t\t#if defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE)\r\n\t\t\t\tif(u_ThreeDStartRotation){\r\n\t\t\t\t\tvec3 rotation=vec3(a_StartRotation0.xy,computeParticleRotationFloat(a_StartRotation0.z, age,normalizedAge));\r\n\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByEuler(a_MeshPosition*size,rotation),worldRotation);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t#ifdef ROTATIONOVERLIFETIME\r\n\t\t\t\t\t\tfloat angle=computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\r\n\t\t\t\t\t\tif(a_ShapePositionStartLifeTime.x!=0.0||a_ShapePositionStartLifeTime.y!=0.0){\r\n\t\t\t\t\t\t\tcenter+= (rotationByQuaternions(rotationByAxis(u_SizeScale*a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),angle),worldRotation));//已验证\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t#ifdef SHAPE\r\n\t\t\t\t\t\t\t\tcenter+= u_SizeScale.xzy*(rotationByQuaternions(rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),angle),worldRotation));\r\n\t\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\t\tif(u_SimulationSpace==0)\r\n\t\t\t\t\t\t\t\t\tcenter+=rotationByAxis(u_SizeScale*a_MeshPosition*size,vec3(0.0,0.0,-1.0),angle);//已验证\r\n\t\t\t\t\t\t\t\telse if(u_SimulationSpace==1)\r\n\t\t\t\t\t\t\t\t\tcenter+=rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,0.0,-1.0),angle),worldRotation);//已验证\r\n\t\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t#endif\r\n\t\t\t\t\t#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t\t\t\t\t\t//TODO:是否应合并if(u_ThreeDStartRotation)分支代码,待测试\r\n\t\t\t\t\t\tvec3 angle=computeParticleRotationVec3(vec3(0.0,0.0,-a_StartRotation0.x), age,normalizedAge);\r\n\t\t\t\t\t\tcenter+= (rotationByQuaternions(rotationByEuler(u_SizeScale*a_MeshPosition*size,vec3(angle.x,angle.y,angle.z)),worldRotation));//已验证\r\n\t\t\t\t\t#endif\t\t\r\n\t\t\t\t}\r\n\t\t\t#else\r\n\t\t\t\tif(u_ThreeDStartRotation){\r\n\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByEuler(a_MeshPosition*size,a_StartRotation0),worldRotation);//已验证\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(a_ShapePositionStartLifeTime.x!=0.0||a_ShapePositionStartLifeTime.y!=0.0){\r\n\t\t\t\t\t\tif(u_SimulationSpace==0)\r\n\t\t\t\t\t\t\tcenter+= rotationByAxis(u_SizeScale*a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),a_StartRotation0.x);\r\n\t\t\t\t\t\telse if(u_SimulationSpace==1)\r\n\t\t\t\t\t\t\tcenter+= (rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),a_StartRotation0.x),worldRotation));//已验证\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\t#ifdef SHAPE\r\n\t\t\t\t\t\t\tif(u_SimulationSpace==0)\r\n\t\t\t\t\t\t\t\tcenter+= u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),a_StartRotation0.x);\r\n\t\t\t\t\t\t\telse if(u_SimulationSpace==1)\r\n\t\t\t\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),a_StartRotation0.x),worldRotation);\t\r\n\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\tif(u_SimulationSpace==0)\r\n\t\t\t\t\t\t\t\tcenter+= rotationByAxis(u_SizeScale*a_MeshPosition*size,vec3(0.0,0.0,-1.0),a_StartRotation0.x);\r\n\t\t\t\t\t\t\telse if(u_SimulationSpace==1)\r\n\t\t\t\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,0.0,-1.0),a_StartRotation0.x),worldRotation);//已验证\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t\tv_MeshColor=a_MeshColor;\r\n\t\t#endif\r\n\t\r\n\t\tgl_Position=u_Projection*u_View*vec4(center,1.0);\r\n\t\tv_Color = computeParticleColor(a_StartColor, normalizedAge);\r\n\t\t#ifdef DIFFUSEMAP\r\n\t\t\t#if defined(SPHERHBILLBOARD)||defined(STRETCHEDBILLBOARD)||defined(HORIZONTALBILLBOARD)||defined(VERTICALBILLBOARD)\r\n\t\t\t\tv_TextureCoordinate =computeParticleUV(a_CornerTextureCoordinate.zw, normalizedAge);\r\n\t\t\t#endif\r\n\t\t\t#ifdef RENDERMODE_MESH\r\n\t\t\t\tv_TextureCoordinate =computeParticleUV(a_MeshTextureCoordinate, normalizedAge);\r\n\t\t\t#endif\r\n\t\t\t\r\n\t\t\t#ifdef TILINGOFFSET\r\n\t\t\t\tv_TextureCoordinate=TransformUV(v_TextureCoordinate,u_TilingOffset);\r\n\t\t\t#endif\r\n\t\t#endif\r\n   \t}\r\n   \telse\r\n\t{\r\n\t\tgl_Position=vec4(2.0,2.0,2.0,1.0);//Discard use out of X(-1,1),Y(-1,1),Z(0,1)\r\n\t}\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}\r\n\r\n","// allow to explicitly override LAYA_BRDF_GI and LAYA_BRDF_LIGHT in custom shader,default is layaBRDFHighGI and layaBRDFHighLight\r\n#if !defined (LAYA_BRDF_GI) \r\n\t#if defined(LAYA_PBR_BRDF_LOW)\r\n\t\t#define LAYA_BRDF_GI layaBRDFLowGI\r\n\t#elif defined(LAYA_PBR_BRDF_HIGH)\r\n\t\t#define LAYA_BRDF_GI layaBRDFHighGI\r\n\t#endif\r\n#endif\r\n#if !defined (LAYA_BRDF_LIGHT)\r\n\t#if defined(LAYA_PBR_BRDF_LOW)\r\n\t\t#define LAYA_BRDF_LIGHT layaBRDFLowLight\r\n\t#elif defined(LAYA_PBR_BRDF_HIGH)\r\n\t\t#define LAYA_BRDF_LIGHT layaBRDFHighLight\r\n\t#endif\r\n#endif\r\n\r\n#define PI 3.14159265359\r\n#define INV_PI 0.31830988618\r\n\r\nmediump float pow4(mediump float x)\r\n{\r\n\treturn x * x * x * x;\r\n}\r\n\r\nmediump float pow5(mediump float x)\r\n{\r\n\treturn x * x * x * x * x;\r\n}\r\n\r\nmediump vec3 fresnelLerp(mediump vec3 F0,mediump vec3 F90,mediump float cosA)\r\n{\r\n\tfloat t = pow5(1.0 - cosA);   // ala Schlick interpoliation\r\n\treturn mix(F0, F90, t);\r\n}\r\n\r\nmediump vec3 fresnelTerm(mediump vec3 F0,mediump float cosA)\r\n{\r\n\tfloat t = pow5(1.0 - cosA);   // ala Schlick interpoliation\r\n\treturn F0 + (vec3(1.0) - F0) * t;\r\n}\r\n\r\n// approximage Schlick with ^4 instead of ^5\r\nmediump vec3 fresnelLerpFast (mediump vec3 F0, mediump vec3 F90,mediump float cosA)\r\n{\r\n    mediump float t = pow4 (1.0 - cosA);\r\n    return mix (F0, F90, t);\r\n}\r\n\r\nfloat smoothnessToPerceptualRoughness(float smoothness)\r\n{\r\n    return 1.0 - smoothness;\r\n}\r\n\r\nfloat perceptualRoughnessToRoughness(float perceptualRoughness)\r\n{\r\n    return perceptualRoughness * perceptualRoughness;\r\n}\r\n\r\nvec3 safeNormalize(vec3 inVec)\r\n{\r\n\tfloat dp3 = max(0.001,dot(inVec,inVec));\r\n\treturn inVec * inversesqrt(dp3);\r\n}\r\n\r\n// Note: Disney diffuse must be multiply by diffuseAlbedo / PI. This is done outside of this function.\r\nmediump float disneyDiffuse(mediump float NdotV,mediump float NdotL,mediump float LdotH,mediump float perceptualRoughness)\r\n{\r\n\t//https://www.cnblogs.com/herenzhiming/articles/5790389.html\r\n\tmediump float fd90 = 0.5 + 2.0 * LdotH * LdotH * perceptualRoughness;\r\n\t// Two schlick fresnel term\r\n\tmediump float lightScatter = (1.0 + (fd90 - 1.0) * pow5(1.0 - NdotL));\r\n\tmediump float viewScatter = (1.0 + (fd90 - 1.0) * pow5(1.0 - NdotV));\r\n\r\n\treturn lightScatter * viewScatter;\r\n}\r\n\r\n// Ref: http://jcgt.org/published/0003/02/03/paper.pdf\r\nfloat smithJointGGXVisibilityTerm(float NdotL, float NdotV, float roughness)\r\n{\r\n\t// Original formulation:\r\n    // lambda_v    = (-1 + sqrt(a2 * (1 - NdotL2) / NdotL2 + 1)) * 0.5f;\r\n    // lambda_l    = (-1 + sqrt(a2 * (1 - NdotV2) / NdotV2 + 1)) * 0.5f;\r\n    // G           = 1 / (1 + lambda_v + lambda_l);\r\n\r\n\t// scientific code implement:\r\n\t// Reorder code to be more optimal\r\n    // half a          = roughness;\r\n    // half a2         = a * a;\r\n\r\n    // half lambdaV    = NdotL * sqrt((-NdotV * a2 + NdotV) * NdotV + a2);\r\n    // half lambdaL    = NdotV * sqrt((-NdotL * a2 + NdotL) * NdotL + a2);\r\n\r\n    // Simplify visibility term: (2.0f * NdotL * NdotV) /  ((4.0f * NdotL * NdotV) * (lambda_v + lambda_l + 1e-5f));\r\n    // return 0.5f / (lambdaV + lambdaL + 1e-5f);  \r\n\t// This function is not intended to be running on Mobile,therefore epsilon is smaller than can be represented by half\r\n\r\n\t// Approximation of the above formulation (simplify the sqrt, not mathematically correct but close enough)\r\n\tfloat a = roughness;\r\n\tfloat lambdaV = NdotL * (NdotV * (1.0 - a) + a);\r\n\tfloat lambdaL = NdotV * (NdotL * (1.0 - a) + a);\r\n\treturn 0.5 / (lambdaV + lambdaL + 1e-5);\r\n}\r\n\r\nfloat ggxTerm(float NdotH, float roughness)\r\n{\r\n\tfloat a2 = roughness * roughness;\r\n\tfloat d = (NdotH * a2 - NdotH) * NdotH + 1.0; // 2 mad\r\n\treturn INV_PI * a2 / (d * d + 1e-7); // This function is not intended to be running on Mobile,therefore epsilon is smaller than what can be represented by half//返回值小用half来返回\r\n}\r\n\r\n// BRDF1-------------------------------------------------------------------------------------\r\n\r\n// Note: BRDF entry points use smoothness and oneMinusReflectivity for optimization purposes,\r\n// mostly for DX9 SM2.0 level. Most of the math is being done on these (1-x) values, and that saves a few precious ALU slots.\r\n\r\n// Main Physically Based BRDF\r\n// Derived from Disney work and based on Torrance-Sparrow micro-facet model\r\n//\r\n// BRDF = kD / pi + kS * (D * V * F) / 4\r\n// I = BRDF * NdotL\r\n//\r\n// *NDF GGX:\r\n// *Smith for Visiblity term\r\n// *Schlick approximation for Fresnel\r\nmediump vec4 layaBRDFHighLight(mediump vec3 diffColor, mediump vec3 specColor, mediump float oneMinusReflectivity, float perceptualRoughness,float roughness,mediump float nv,vec3 normal, vec3 viewDir,LayaLight light)\r\n{\r\n\tvec3 halfDir = safeNormalize(viewDir-light.dir);\r\n\r\n\tfloat nl = clamp(dot(normal, -light.dir),0.0,1.0);\r\n\tfloat nh = clamp(dot(normal, halfDir),0.0,1.0);\r\n\tmediump float lv = clamp(dot(light.dir, viewDir),0.0,1.0);\r\n\tmediump float lh = clamp(dot(light.dir, -halfDir),0.0,1.0);\r\n\r\n\t// Diffuse term\r\n\tmediump float diffuseTerm = disneyDiffuse(nv, nl, lh, perceptualRoughness) * nl;\r\n\r\n\t// Specular term\r\n    // HACK: theoretically we should divide diffuseTerm by Pi and not multiply specularTerm!\r\n    // BUT that will make shader look significantly darker than Legacy ones\r\n\r\n\t// GGX with roughtness to 0 would mean no specular at all, using max(roughness, 0.002) here to match HDrenderloop roughtness remapping.\r\n\troughness = max(roughness, 0.002);\r\n\tfloat V = smithJointGGXVisibilityTerm(nl, nv, roughness);\r\n\tfloat D = ggxTerm(nh, roughness);\r\n\r\n\tfloat specularTerm = V * D * PI; // Torrance-Sparrow model, Fresnel is applied later\r\n\r\n\t//#ifdef LAYA_COLORSPACE_GAMMA\r\n\tspecularTerm = sqrt(max(1e-4, specularTerm));\r\n\t//#endif\r\n\tspecularTerm = max(0.0, specularTerm * nl);\r\n\t\t\r\n\tmediump vec3 color = diffColor * light.color * diffuseTerm + specularTerm * light.color * fresnelTerm(specColor, lh);\r\n\treturn vec4(color, 1.0);\r\n}\r\n\r\nvec4 layaBRDFHighGI(mediump vec3 diffColor,mediump vec3 specColor,mediump float oneMinusReflectivity,float smoothness ,float perceptualRoughness,float roughness,mediump float nv,vec3 normal, vec3 viewDir,LayaGI gi)\r\n{\r\n\t// surfaceReduction = Int D(NdotH) * NdotH * Id(NdotL>0) dH = 1/(roughness^2+1)\r\n\tfloat surfaceReduction;\r\n\tsurfaceReduction = 1.0 - 0.28*roughness*perceptualRoughness;// 1-0.28*x^3 as approximation for (1/(x^4+1))^(1/2.2) on the domain [0;1]\r\n\tfloat grazingTerm = clamp(smoothness + (1.0 - oneMinusReflectivity),0.0,1.0);\r\n\tmediump vec3 color =diffColor * gi.diffuse + surfaceReduction * gi.specular * fresnelLerp(specColor,vec3(grazingTerm), nv);\r\n\treturn vec4(color,1.0);\r\n}\r\n// BRDF1-------------------------------------------------------------------------------------\r\n\r\n\r\n// BRDF2-------------------------------------------------------------------------------------\r\n// Based on Minimalist CookTorrance BRDF\r\n// Implementation is slightly different from original derivation: http://www.thetenthplanet.de/archives/255\r\n//\r\n// *NDF [Modified] GGX:\r\n// *Modified Kelemen and Szirmay-​Kalos for Visibility term\r\n// *Fresnel approximated with 1/LdotH\r\nmediump vec4 layaBRDFLowLight (mediump vec3 diffColor, mediump vec3 specColor,mediump float oneMinusReflectivity,float perceptualRoughness,float roughness,mediump float nv,vec3 normal,vec3 viewDir,LayaLight light)\r\n{\r\n    vec3 halfDir = safeNormalize (viewDir-light.dir);\r\n    mediump float nl = clamp(dot(normal, -light.dir),0.0,1.0);\r\n    float nh = clamp(dot(normal, halfDir),0.0,1.0);\r\n    float lh = clamp(dot(-light.dir, halfDir),0.0,1.0);\r\n\r\n    // GGX Distribution multiplied by combined approximation of Visibility and Fresnel\r\n    // See \"Optimizing PBR for Mobile\" from Siggraph 2015 moving mobile graphics course\r\n    // https://community.arm.com/events/1155\r\n    mediump float a = roughness;\r\n    float a2 = a*a;\r\n\r\n    float d = nh * nh * (a2 - 1.0) + 1.00001;\r\n\t// #ifdef LAYA_COLORSPACE_GAMMA\r\n\t\t// Tighter approximation for Gamma only rendering mode!\r\n\t\t// DVF = sqrt(DVF);\r\n\t\t// DVF = (a * sqrt(.25)) / (max(sqrt(0.1), lh)*sqrt(roughness + .5) * d);\r\n\t\tfloat specularTerm = a / (max(0.32, lh) * (1.5 + roughness) * d);\r\n\t// #else\r\n\t// \tfloat specularTerm = a2 / (max(0.1f, lh*lh) * (roughness + 0.5f) * (d * d) * 4);\r\n\t// #endif\r\n\r\n    // on mobiles (where half actually means something) denominator have risk of overflow\r\n    // clamp below was added specifically to \"fix\" that, but dx compiler (we convert bytecode to metal/gles)\r\n    // sees that specularTerm have only non-negative terms, so it skips max(0,..) in clamp (leaving only min(100,...))\r\n\r\n\t//#if defined (SHADER_API_MOBILE)\r\n    specularTerm = specularTerm - 1e-4;\r\n\t//#endif\r\n\r\n\t// #else\r\n\t\t// // Legacy\r\n\t\t// half specularPower = PerceptualRoughnessToSpecPower(perceptualRoughness);\r\n\t\t// // Modified with approximate Visibility function that takes roughness into account\r\n\t\t// // Original ((n+1)*N.H^n) / (8*Pi * L.H^3) didn't take into account roughness\r\n\t\t// // and produced extremely bright specular at grazing angles\r\n\r\n\t\t// half invV = lh * lh * smoothness + perceptualRoughness * perceptualRoughness; // approx ModifiedKelemenVisibilityTerm(lh, perceptualRoughness);\r\n\t\t// half invF = lh;\r\n\r\n\t\t// half specularTerm = ((specularPower + 1) * pow (nh, specularPower)) / (8 * invV * invF + 1e-4h);\r\n\r\n\t\t// #ifdef LAYA_COLORSPACE_GAMMA\r\n\t\t// \tspecularTerm = sqrt(max(1e-4f, specularTerm));\r\n\t\t// #endif\r\n\t// #endif\r\n\r\n\t// #if defined (SHADER_API_MOBILE)\r\n\t\tspecularTerm = clamp(specularTerm, 0.0, 100.0); // Prevent FP16 overflow on mobiles\r\n\t// #endif\r\n    \r\n    mediump vec3 color = (diffColor + specularTerm * specColor) * light.color * nl;\r\n\r\n    return vec4(color, 1.0);\r\n}\r\n\r\nmediump vec4 layaBRDFLowGI (mediump vec3 diffColor, mediump vec3 specColor,mediump float oneMinusReflectivity,mediump float smoothness,float perceptualRoughness,float roughness,mediump float nv,vec3 normal,vec3 viewDir,LayaGI gi)\r\n{\r\n\t// surfaceReduction = Int D(NdotH) * NdotH * Id(NdotL>0) dH = 1/(realRoughness^2+1)\r\n\r\n    // 1-0.28*x^3 as approximation for (1/(x^4+1))^(1/2.2) on the domain [0;1]\r\n    // 1-x^3*(0.6-0.08*x)   approximation for 1/(x^4+1)\r\n\t// #ifdef LAYA_COLORSPACE_GAMMA\r\n\t\tmediump float surfaceReduction = 0.28;\r\n\t// #else\r\n\t\t// mediump float surfaceReduction = (0.6-0.08*perceptualRoughness);\r\n\t// #endif\r\n\r\n    surfaceReduction = 1.0 - roughness*perceptualRoughness*surfaceReduction;\r\n\r\n\tmediump float grazingTerm = clamp(smoothness + (1.0-oneMinusReflectivity),0.0,1.0);\r\n\tmediump vec3 color =gi.diffuse * diffColor+ surfaceReduction * gi.specular * fresnelLerpFast (specColor, vec3(grazingTerm), nv);\r\n\r\n    return vec4(color, 1.0);\r\n}\r\n// BRDF2-------------------------------------------------------------------------------------","struct FragmentCommonData{\r\n\tvec3 diffColor;\r\n\tvec3 specColor;\r\n\tfloat oneMinusReflectivity;\r\n\tfloat smoothness;\r\n\t//vec3 eyeVec;TODO:maybe can remove\r\n\t//float alpha;\r\n\t//vec3 reflUVW;\r\n};\r\n\r\n#ifndef SETUP_BRDF_INPUT\r\n    #define SETUP_BRDF_INPUT metallicSetup//default is metallicSetup,also can be other. \r\n#endif\r\n\r\nconst mediump vec4 dielectricSpecularColor = vec4(0.220916301, 0.220916301, 0.220916301, 1.0 - 0.220916301);\r\n\r\nmediump vec3 diffuseAndSpecularFromMetallic(mediump vec3 albedo,mediump float metallic, out mediump vec3 specColor, out mediump float oneMinusReflectivity)\r\n{\r\n\tspecColor = mix(dielectricSpecularColor.rgb, albedo, metallic);\r\n\toneMinusReflectivity= dielectricSpecularColor.a*(1.0-metallic);//diffuse proportion\r\n\treturn albedo * oneMinusReflectivity;\r\n}\r\n\r\nmediump float specularStrength(mediump vec3 specular)\r\n{\r\n    return max (max (specular.r, specular.g), specular.b);\r\n}\r\n\r\n// Diffuse/Spec Energy conservation\r\nmediump vec3 energyConservationBetweenDiffuseAndSpecular (mediump vec3 albedo, mediump vec3 specColor, out mediump float oneMinusReflectivity)\r\n{\r\n\toneMinusReflectivity = 1.0 - specularStrength(specColor);\r\n    return albedo * (vec3(1.0) - specColor);\r\n}\r\n\r\n#ifdef TRANSPARENTBLEND\r\n\tmediump vec3 preMultiplyAlpha (mediump vec3 diffColor, mediump float alpha, mediump float oneMinusReflectivity,out mediump float modifiedAlpha)\r\n\t{\r\n\t\t// Transparency 'removes' from Diffuse component\r\n\t\tdiffColor *= alpha;\r\n\t\t// Reflectivity 'removes' from the rest of components, including Transparency\r\n\t\t// modifiedAlpha = 1.0-(1.0-alpha)*(1.0-reflectivity) = 1.0-(oneMinusReflectivity - alpha*oneMinusReflectivity) = 1.0-oneMinusReflectivity + alpha*oneMinusReflectivity\r\n\t\tmodifiedAlpha = 1.0 - oneMinusReflectivity + alpha*oneMinusReflectivity;\r\n\t\treturn diffColor;\r\n\t}\r\n#endif\r\n\r\nFragmentCommonData metallicSetup(vec2 uv)\r\n{\r\n\tmediump vec2 metallicGloss = getMetallicGloss(uv);\r\n\tmediump float metallic = metallicGloss.x;\r\n\tmediump float smoothness = metallicGloss.y; // this is 1 minus the square root of real roughness m.\r\n\tmediump float oneMinusReflectivity;\r\n\tmediump vec3 specColor;\r\n\tmediump vec3 diffColor = diffuseAndSpecularFromMetallic(albedo(uv), metallic,/*out*/specColor,/*out*/oneMinusReflectivity);\r\n\r\n\tFragmentCommonData o;\r\n\to.diffColor = diffColor;\r\n\to.specColor = specColor;\r\n\to.oneMinusReflectivity = oneMinusReflectivity;\r\n\to.smoothness = smoothness;\r\n\treturn o;\r\n}\r\n\r\nFragmentCommonData specularSetup(vec2 uv)\r\n{\r\n    mediump vec4 specGloss = specularGloss(uv);\r\n    mediump vec3 specColor = specGloss.rgb;\r\n    mediump float smoothness = specGloss.a;\r\n\r\n    mediump float oneMinusReflectivity;\r\n    mediump vec3 diffColor = energyConservationBetweenDiffuseAndSpecular (albedo(uv), specColor, /*out*/ oneMinusReflectivity);\r\n\r\n    FragmentCommonData o;\r\n    o.diffColor = diffColor;\r\n    o.specColor = specColor;\r\n    o.oneMinusReflectivity = oneMinusReflectivity;\r\n    o.smoothness = smoothness;\r\n    return o;\r\n}\r\n\r\nLayaGI fragmentGI(float smoothness,vec3 eyeVec,mediump float occlusion,mediump vec2 lightmapUV,vec3 worldnormal,vec3 worldPos)\r\n{\r\n\tLayaGIInput giInput;\r\n\t#ifdef LIGHTMAP\r\n\t\tgiInput.lightmapUV=lightmapUV;\r\n\t#endif\r\n\tgiInput.worldPos = worldPos;\r\n\r\n\tvec3 worldViewDir = -eyeVec;\r\n\tmediump vec4 uvwRoughness;\r\n\tuvwRoughness.rgb = reflect(worldViewDir, worldnormal);//reflectUVW\r\n\tuvwRoughness.a= smoothnessToPerceptualRoughness(smoothness);//perceptualRoughness\r\n\r\n\treturn layaGlobalIllumination(giInput,occlusion, worldnormal, uvwRoughness);\r\n}\r\n\r\n\r\nvec3 perPixelWorldNormal(vec2 uv,vec3 normal,vec3 binormal,vec3 tangent)\r\n{\r\n\t#ifdef NORMALTEXTURE\r\n\t\tmediump vec3 normalTangent=normalInTangentSpace(uv);\r\n\t\tvec3 normalWorld = normalize(tangent * normalTangent.x + binormal * normalTangent.y + normal * normalTangent.z);\r\n\t#else\r\n\t\tvec3 normalWorld = normalize(normal);\r\n\t#endif\r\n\t\treturn normalWorld;\r\n}\r\n\r\nvoid fragmentForward()\r\n{\r\n\tvec2 uv;\r\n\t#if defined(ALBEDOTEXTURE)||defined(METALLICGLOSSTEXTURE)||defined(NORMALTEXTURE)||defined(EMISSIONTEXTURE)||defined(OCCLUSIONTEXTURE)||defined(PARALLAXTEXTURE)\r\n\t\t#ifdef PARALLAXTEXTURE\r\n\t\t\tuv = parallax(v_Texcoord0,normalize(v_ViewDirForParallax));\r\n\t\t#else\r\n\t\t\tuv = v_Texcoord0;\r\n\t\t#endif\r\n\t#endif\r\n\r\n\tmediump float alpha = getAlpha(uv);\r\n\t#ifdef ALPHATEST\r\n\t\tif(alpha<u_AlphaTestValue)\r\n\t\t\tdiscard;\r\n\t#endif\r\n\r\n\tFragmentCommonData o = SETUP_BRDF_INPUT(uv);\r\n\t\r\n\tvec3 binormal;\r\n\tvec3 tangent;\r\n\t#ifdef NORMALTEXTURE\r\n\t\ttangent = v_Tangent;\r\n\t\tbinormal = v_Binormal;\r\n\t#endif\r\n\r\n\tvec3 normal = v_Normal;\r\n\tvec3 normalWorld = perPixelWorldNormal(uv,normal,binormal,tangent);//In FS if the normal use mediump before normalize will cause precision prolem in mobile device.\r\n\tvec3 eyeVec = normalize(v_EyeVec);\r\n\tvec3 posworld = v_PositionWorld;\r\n\r\n\t#ifdef TRANSPARENTBLEND\r\n\t\to.diffColor=preMultiplyAlpha(o.diffColor,alpha,o.oneMinusReflectivity,/*out*/alpha);// shader relies on pre-multiply alpha-blend (srcBlend = One, dstBlend = OneMinusSrcAlpha)\r\n\t#endif\r\n\r\n\tmediump float occlusion = getOcclusion(uv);\r\n\tmediump vec2 lightMapUV;\r\n\t#ifdef LIGHTMAP\r\n\t\tlightMapUV=v_LightMapUV;\r\n\t#endif\r\n\tfloat perceptualRoughness = smoothnessToPerceptualRoughness(o.smoothness);\r\n\tfloat roughness = perceptualRoughnessToRoughness(perceptualRoughness);\r\n\tfloat nv = abs(dot(normalWorld, eyeVec));\r\n\tLayaGI gi =fragmentGI(o.smoothness,eyeVec,occlusion,lightMapUV,normalWorld,posworld);\r\n\tvec4 color = LAYA_BRDF_GI(o.diffColor,o.specColor,o.oneMinusReflectivity,o.smoothness,perceptualRoughness,roughness,nv,normalWorld,eyeVec,gi);\r\n\t\r\n\tfloat shadowAttenuation = 1.0;\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\t#ifdef CALCULATE_SHADOWS\r\n\t\t\t\t#ifdef SHADOW_CASCADE\r\n\t\t\t\t\tvec4 shadowCoord = getShadowCoord(vec4(v_PositionWorld,1.0));\r\n\t\t\t\t#else\r\n\t\t\t\t\tvec4 shadowCoord = v_ShadowCoord;\r\n\t\t\t\t#endif\r\n\t\t\t\tshadowAttenuation=sampleShadowmap(shadowCoord);\r\n\t\t\t#endif\r\n\t\t\tLayaLight dirLight = layaDirectionLightToLight(u_DirectionLight,shadowAttenuation);\r\n\t\t\tcolor+= LAYA_BRDF_LIGHT(o.diffColor,o.specColor,o.oneMinusReflectivity,perceptualRoughness,roughness,nv,normalWorld,eyeVec,dirLight);\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef POINTLIGHT\r\n\t\t\tshadowAttenuation = 1.0;\r\n\t\t\tLayaLight poiLight = layaPointLightToLight(posworld,normalWorld,u_PointLight,shadowAttenuation);\r\n\t\t\tcolor+= LAYA_BRDF_LIGHT(o.diffColor,o.specColor,o.oneMinusReflectivity,perceptualRoughness,roughness,nv,normalWorld,eyeVec,poiLight);\r\n\t\t#endif\r\n\t\t\r\n\t\t#ifdef SPOTLIGHT\r\n\t\t\tshadowAttenuation = 1.0;\r\n\t\t\t#ifdef CALCULATE_SPOTSHADOWS\r\n\t\t\t\tvec4 spotShadowcoord = v_SpotShadowCoord;\r\n\t\t\t\tshadowAttenuation = sampleSpotShadowmap(spotShadowcoord);\r\n\t\t\t#endif\r\n\t\t    LayaLight spoLight = layaSpotLightToLight(posworld,normalWorld,u_SpotLight,shadowAttenuation);\r\n\t\t\tcolor+= LAYA_BRDF_LIGHT(o.diffColor,o.specColor,o.oneMinusReflectivity,perceptualRoughness,roughness,nv,normalWorld,eyeVec,spoLight);\r\n\t\t#endif\r\n\t#else\r\n\t \t#ifdef DIRECTIONLIGHT\r\n\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t{\r\n\t\t\t\tshadowAttenuation = 1.0;\r\n\t\t\t\tif(i >= u_DirationLightCount)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t#ifdef CALCULATE_SHADOWS\r\n\t\t\t\t\tif(i == 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t#ifdef SHADOW_CASCADE\r\n\t\t\t\t\t\t\tvec4 shadowCoord = getShadowCoord(vec4(v_PositionWorld,1.0));\r\n\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\tvec4 shadowCoord = v_ShadowCoord;\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\tshadowAttenuation *= sampleShadowmap(shadowCoord);\r\n\t\t\t\t\t}\r\n\t\t\t\t#endif\r\n\t\t\t\tDirectionLight directionLight = getDirectionLight(u_LightBuffer,i);\r\n\t\t\t\tLayaLight dirLight = layaDirectionLightToLight(directionLight,shadowAttenuation);\r\n\t\t\t \tcolor+=LAYA_BRDF_LIGHT(o.diffColor,o.specColor,o.oneMinusReflectivity,perceptualRoughness,roughness,nv,normalWorld,eyeVec,dirLight);\r\n\t\t\t}\r\n\t \t#endif\r\n\t\t#if defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\t\tivec4 clusterInfo =getClusterInfo(u_LightClusterBuffer,u_View,u_Viewport, v_PositionWorld,gl_FragCoord,u_ProjectionParams);\r\n\t\t\t#ifdef POINTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tshadowAttenuation = 1.0;\r\n\t\t\t\t\tif(i >= clusterInfo.x)//PointLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tPointLight pointLight = getPointLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\tLayaLight poiLight = layaPointLightToLight(posworld,normalWorld,pointLight,shadowAttenuation);\r\n\t\t\t\t\tcolor+= LAYA_BRDF_LIGHT(o.diffColor,o.specColor,o.oneMinusReflectivity,perceptualRoughness,roughness,nv,normalWorld,eyeVec,poiLight);\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t\t#ifdef SPOTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tshadowAttenuation = 1.0;\r\n\t\t\t\t\tif(i >= clusterInfo.y)//SpotLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t#ifdef CALCULATE_SPOTSHADOWS\r\n\t\t\t\t\t\tif(i == 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvec4 spotShadowcoord = v_SpotShadowCoord;\r\n\t\t\t\t\t\t\tshadowAttenuation= sampleSpotShadowmap(spotShadowcoord);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t#endif\r\n\t\t\t\t\tSpotLight spotLight = getSpotLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\tLayaLight spoLight = layaSpotLightToLight(posworld,normalWorld,spotLight,shadowAttenuation);\r\n\t\t\t\t\tcolor+= LAYA_BRDF_LIGHT(o.diffColor,o.specColor,o.oneMinusReflectivity,perceptualRoughness,roughness,nv,normalWorld,eyeVec,spoLight);\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t #endif\r\n\r\n\t#ifdef EMISSION\r\n\t\tcolor.rgb += emission(uv);\r\n\t#endif\r\n\r\n\t#ifdef FOG\r\n\t\tfloat lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);\r\n\t\tcolor.rgb=mix(color.rgb,u_FogColor,lerpFact);\r\n\t#endif\r\n\t\r\n\tgl_FragColor=vec4(color.rgb,alpha);\r\n}\r\n\r\n\r\n\r\n","attribute vec4 a_Position;\r\n\r\n#ifdef GPU_INSTANCE\r\n\tattribute mat4 a_MvpMatrix;\r\n\tattribute mat4 a_WorldMat;\r\n#else\r\n\tuniform mat4 u_MvpMatrix;\r\n\tuniform mat4 u_WorldMat;\r\n#endif\r\n\r\n#ifdef BONE\r\n\tconst int c_MaxBoneCount = 24;\r\n\tattribute vec4 a_BoneIndices;\r\n\tattribute vec4 a_BoneWeights;\r\n\tuniform mat4 u_Bones[c_MaxBoneCount];\r\n#endif\r\n\r\nattribute vec3 a_Normal;\r\nvarying vec3 v_Normal; \r\n\r\n#if defined(NORMALTEXTURE)||defined(PARALLAXTEXTURE)\r\n\tattribute vec4 a_Tangent0;\r\n\tvarying vec3 v_Tangent;\r\n\tvarying vec3 v_Binormal;\r\n    #ifdef PARALLAXTEXTURE\r\n\t    varying vec3 v_ViewDirForParallax;\r\n    #endif\r\n#endif\r\n\r\n#if defined(ALBEDOTEXTURE)||defined(METALLICGLOSSTEXTURE)||defined(NORMALTEXTURE)||defined(EMISSIONTEXTURE)||defined(OCCLUSIONTEXTURE)||defined(PARALLAXTEXTURE)||(defined(LIGHTMAP)&&defined(UV))\r\n\tattribute vec2 a_Texcoord0;\r\n\tvarying vec2 v_Texcoord0;\r\n#endif\r\n\r\n#if defined(LIGHTMAP)&&defined(UV1)\r\n\tattribute vec2 a_Texcoord1;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tuniform vec4 u_LightmapScaleOffset;\r\n\tvarying vec2 v_LightMapUV;\r\n#endif\r\n\r\nuniform vec3 u_CameraPos;\r\nvarying vec3 v_EyeVec;\r\nvarying vec3 v_PositionWorld;\r\nvarying float v_posViewZ;\r\n\r\n#if defined(CALCULATE_SHADOWS)&&!defined(SHADOW_CASCADE)\r\n\tvarying vec4 v_ShadowCoord;\r\n#endif\r\n\r\n#ifdef CALCULATE_SPOTSHADOWS\r\n\tvarying vec4 v_SpotShadowCoord;\r\n#endif\r\n\r\n#ifdef TILINGOFFSET\r\n\tuniform vec4 u_TilingOffset;\r\n#endif\r\n\r\n\r\n#ifdef SIMPLEBONE\r\n\t#ifdef GPU_INSTANCE\r\n\t\tattribute vec4 a_SimpleTextureParams;\r\n\t#else\r\n\t\tuniform vec4 u_SimpleAnimatorParams;\r\n\t#endif\r\n\tuniform sampler2D u_SimpleAnimatorTexture;\r\n\r\n\tuniform float u_SimpleAnimatorTextureSize; \r\n#endif\r\n\r\n\r\n#ifdef SIMPLEBONE\r\nmat4 loadMatFromTexture(float FramePos,int boneIndices,float offset)\r\n{\r\n\tvec2 uv;\r\n\tfloat PixelPos = FramePos+float(boneIndices)*4.0;\r\n\tfloat halfOffset = offset * 0.5;\r\n\tfloat uvoffset = PixelPos/u_SimpleAnimatorTextureSize;\r\n\tuv.y = floor(uvoffset)*offset+halfOffset;\r\n\tuv.x = mod(float(PixelPos),u_SimpleAnimatorTextureSize)*offset+halfOffset;\r\n\tvec4 mat0row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tuv.x+=offset;\r\n\tvec4 mat1row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tuv.x+=offset;\r\n\tvec4 mat2row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tuv.x+=offset;\r\n\tvec4 mat3row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tmat4 m =mat4(mat0row.x,mat0row.y,mat0row.z,mat0row.w,\r\n\t\t\t  mat1row.x,mat1row.y,mat1row.z,mat1row.w,\r\n\t\t\t  mat2row.x,mat2row.y,mat2row.z,mat2row.w,\r\n\t\t\t  mat3row.x,mat3row.y,mat3row.z,mat3row.w);\r\n\treturn m;\r\n}\r\n#endif","#ifdef ALPHATEST\r\n\tuniform float u_AlphaTestValue;\r\n#endif\r\n\r\nuniform vec4 u_AlbedoColor;\r\n\r\n#ifdef NORMALTEXTURE\r\n\tuniform sampler2D u_NormalTexture;\r\n\tuniform float u_NormalScale;\r\n#endif\r\n\r\n#ifdef ALBEDOTEXTURE\r\n\tuniform sampler2D u_AlbedoTexture;\r\n#endif\r\n\r\n#ifdef METALLICGLOSSTEXTURE\r\n\tuniform sampler2D u_MetallicGlossTexture;\r\n#endif\r\nuniform float u_Metallic;\r\n\r\n#ifdef SPECULARGLOSSTEXTURE\r\n\tuniform sampler2D u_SpecGlossTexture;\r\n#endif\r\nuniform vec3 u_SpecularColor;\r\n\r\nuniform float u_Smoothness;\r\nuniform float u_SmoothnessScale;\r\n\r\n#ifdef PARALLAXTEXTURE\r\n\tuniform sampler2D u_ParallaxTexture;\r\n\tuniform float u_ParallaxScale;\r\n\tvarying vec3 v_ViewDirForParallax;\r\n#endif\r\n\r\n#ifdef OCCLUSIONTEXTURE\r\n\tuniform sampler2D u_OcclusionTexture;\r\n\tuniform float u_occlusionStrength;\r\n#endif\r\n\r\n#ifdef EMISSION \r\n\t#ifdef EMISSIONTEXTURE\r\n\t\tuniform sampler2D u_EmissionTexture;\r\n\t#endif\r\n\tuniform vec4 u_EmissionColor;\r\n#endif\r\n\r\n#if defined(ALBEDOTEXTURE)||defined(METALLICGLOSSTEXTURE)||defined(NORMALTEXTURE)||defined(EMISSIONTEXTURE)||defined(OCCLUSIONTEXTURE)||defined(PARALLAXTEXTURE)\r\n\tvarying vec2 v_Texcoord0;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tvarying vec2 v_LightMapUV;\r\n\tuniform sampler2D u_LightMap;\r\n\t#ifdef LIGHTMAP_DIRECTIONAL\r\n\t\tuniform sampler2D u_LightMapDirection;\r\n\t#endif\r\n#endif\r\n\r\nvarying vec3 v_Normal; \r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tuniform DirectionLight u_DirectionLight;\r\n\t\t#endif\r\n\t\t#ifdef POINTLIGHT\r\n\t\t\tuniform PointLight u_PointLight;\r\n\t\t#endif\r\n\t\t#ifdef SPOTLIGHT\r\n\t\t\tuniform SpotLight u_SpotLight;\r\n\t\t#endif\r\n\t#else\r\n\t\tuniform mat4 u_View;\r\n\t\tuniform vec4 u_ProjectionParams;\r\n\t\tuniform vec4 u_Viewport;\r\n\t\tuniform int u_DirationLightCount;\r\n\t\tuniform sampler2D u_LightBuffer;\r\n\t\tuniform sampler2D u_LightClusterBuffer;\r\n\t#endif\r\n#endif\r\n\r\nvarying vec3 v_EyeVec;\r\n\r\n#ifdef NORMALTEXTURE\r\n\tvarying vec3 v_Tangent;\r\n\tvarying vec3 v_Binormal;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tuniform float u_FogStart;\r\n\tuniform float u_FogRange;\r\n\tuniform vec3 u_FogColor;\r\n#endif\r\n\r\n\r\n//后面考虑宏TODO\r\nvarying vec3 v_PositionWorld;\r\n\r\n#if defined(CALCULATE_SHADOWS)&&!defined(SHADOW_CASCADE)\r\n\tvarying vec4 v_ShadowCoord;\r\n#endif\r\n\r\n#ifdef CALCULATE_SPOTSHADOWS\r\n\tvarying vec4 v_SpotShadowCoord;\r\n#endif\r\n\r\nmediump float lerpOneTo(mediump float b, mediump float t)\r\n{\r\n    mediump float oneMinusT = 1.0 - t;\r\n    return oneMinusT + b * t;\r\n}\r\n\r\n#ifdef EMISSION \r\n\tvec3 emission(vec2 uv)\r\n\t{\r\n\t\t#ifdef EMISSIONTEXTURE\r\n\t\t\treturn texture2D(u_EmissionTexture, uv).rgb * u_EmissionColor.rgb;\r\n\t\t#else\r\n\t\t\treturn u_EmissionColor.rgb;\r\n\t\t#endif\r\n\t}\r\n#endif\r\n\r\nmediump float getAlpha(vec2 uv)\r\n{\r\n\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\t\treturn u_AlbedoColor.a;\r\n\t#else\r\n\t\t#ifdef ALBEDOTEXTURE\r\n\t\t\treturn texture2D(u_AlbedoTexture, uv).a * u_AlbedoColor.a;\r\n\t\t#else\r\n\t\t\treturn u_AlbedoColor.a;\r\n\t\t#endif\r\n\t#endif\r\n}\r\n\r\nmediump float getOcclusion(vec2 uv)\r\n{\r\n\t#ifdef OCCLUSIONTEXTURE\r\n\t\tmediump float occ = texture2D(u_OcclusionTexture, uv).g;\r\n\t\treturn lerpOneTo(occ, u_occlusionStrength);\r\n\t#else\r\n\t\treturn 1.0;\r\n\t#endif\r\n}\r\n\r\nmediump vec3 albedo(vec2 uv)\r\n{\r\n\t#ifdef ALBEDOTEXTURE\r\n\t\treturn u_AlbedoColor.rgb * texture2D(u_AlbedoTexture, uv).rgb;\r\n\t#else\r\n\t\treturn u_AlbedoColor.rgb;\r\n\t#endif\r\n\t//TODO:Detail Texture\r\n}\r\n\r\nmediump vec2 getMetallicGloss(vec2 uv)\r\n{\r\n\tmediump vec2 ms;//x is metallic,y is smoothness\r\n\t#ifdef METALLICGLOSSTEXTURE\r\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\t\t\tms.x = texture2D(u_MetallicGlossTexture, uv).r;\r\n\t\t\t#ifdef ALBEDOTEXTURE\r\n\t\t\t\tms.y = texture2D(u_AlbedoTexture, uv).a*u_SmoothnessScale;\r\n\t\t\t#else\r\n\t\t\t\tms.y = u_SmoothnessScale;\r\n\t\t\t#endif\r\n\t\t#else\r\n\t\t\tms = texture2D(u_MetallicGlossTexture, uv).ra;\r\n\t\t\tms.y *= u_SmoothnessScale;\r\n\t\t#endif\r\n\t#else\r\n\t\tms.x = u_Metallic;\r\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\t\t\t#ifdef ALBEDOTEXTURE\r\n\t\t\t\tms.y = texture2D(u_AlbedoTexture, uv).a * u_SmoothnessScale;\r\n\t\t\t#else\r\n\t\t\t\tms.y = u_SmoothnessScale;\r\n\t\t\t#endif\r\n\t\t#else\r\n\t\t\tms.y = u_Smoothness;\r\n\t\t#endif\r\n\t#endif\r\n\treturn ms;\r\n}\r\n\r\nmediump vec4 specularGloss(vec2 uv)\r\n{\r\n\tmediump vec4 sg;\r\n\t#ifdef SPECULARGLOSSTEXTURE\r\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\t\t\tsg.rgb = texture2D(u_SpecGlossTexture, uv).rgb;\r\n\t\t\t#ifdef ALBEDOTEXTURE\r\n\t\t\t\tsg.a = texture2D(u_AlbedoTexture, uv).a*u_SmoothnessScale;\r\n\t\t\t#else\r\n\t\t\t\tsg.a = u_SmoothnessScale;\r\n\t\t\t#endif\r\n\t\t#else\r\n\t\t\tsg = texture2D(u_SpecGlossTexture, uv);\r\n\t\t\tsg.a *= u_SmoothnessScale;\r\n\t\t#endif\r\n\t#else\r\n\t\tsg.rgb = u_SpecularColor.rgb;\r\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\t\t\t#ifdef ALBEDOTEXTURE\r\n\t\t\t\tsg.a = texture2D(u_AlbedoTexture, uv).a * u_SmoothnessScale;\r\n\t\t\t#else\r\n\t\t\t\tsg.a = u_SmoothnessScale;\r\n\t\t\t#endif\r\n\t\t#else\r\n\t\t\tsg.a = u_Smoothness;\r\n\t\t#endif\r\n\t#endif\r\n\t\treturn sg;\r\n}\r\n\r\n\r\n#ifdef NORMALTEXTURE\r\n\tmediump vec3 unpackScaleNormal(mediump vec3 packednormal, mediump float bumpScale)\r\n\t{\r\n\t\tmediump vec3 normal = packednormal.xyz * 2.0 - 1.0;\r\n\t\tnormal.y=-normal.y;//NOTE:because unity to LayaAir coordSystem.\r\n\t\tnormal.xy *= bumpScale;\r\n\t\treturn normal;\r\n\t}\r\n\t\r\n\tmediump vec3 normalInTangentSpace(vec2 texcoords)\r\n\t{\r\n\t\tmediump vec3 normalTangent = unpackScaleNormal(texture2D(u_NormalTexture, texcoords).rgb,u_NormalScale);\r\n\t\treturn normalTangent;\r\n\t}\r\n#endif\r\n\r\n#ifdef PARALLAXTEXTURE\r\n\tmediump vec2 parallaxOffset1Step(mediump float h, mediump float height, mediump vec3 viewDir)\r\n\t{\r\n\t\th = h * height - height / 2.0;\r\n\t\tviewDir.z += 0.42;\r\n\t\treturn h * (viewDir.xy / viewDir.z);\r\n\t}\r\n\r\n\tvec2 parallax(vec2 texcoords, mediump vec3 viewDir)\r\n\t{\r\n\t\tmediump float h = texture2D(u_ParallaxTexture, texcoords.xy).g;\r\n\t\tvec2 offset = parallaxOffset1Step(h, u_ParallaxScale, viewDir);\r\n\t\treturn texcoords+offset;\r\n\t}\r\n#endif\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","vec2 transformLightMapUV(in vec2 texcoord,in vec4 lightmapScaleOffset)\r\n{\r\n\tvec2 lightMapUV=vec2(texcoord.x,1.0-texcoord.y)*lightmapScaleOffset.xy+lightmapScaleOffset.zw;\r\n\tlightMapUV.y=1.0-lightMapUV.y;\r\n\treturn lightMapUV; \r\n}\r\n\r\nvoid vertexForward()\r\n{\r\n\tvec4 position;\r\n\t#ifdef BONE\r\n\t\tmat4 skinTransform;\r\n\t \t#ifdef SIMPLEBONE\r\n\t\t\tfloat currentPixelPos;\r\n\t\t\t#ifdef GPU_INSTANCE\r\n\t\t\t\tcurrentPixelPos = a_SimpleTextureParams.x+a_SimpleTextureParams.y;\r\n\t\t\t#else\r\n\t\t\t\tcurrentPixelPos = u_SimpleAnimatorParams.x+u_SimpleAnimatorParams.y;\r\n\t\t\t#endif\r\n\t\t\tfloat offset = 1.0/u_SimpleAnimatorTextureSize;\r\n\t\t\tskinTransform =  loadMatFromTexture(currentPixelPos,int(a_BoneIndices.x),offset) * a_BoneWeights.x;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.y),offset) * a_BoneWeights.y;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.z),offset) * a_BoneWeights.z;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.w),offset) * a_BoneWeights.w;\r\n\t\t#else\r\n\t\t\tskinTransform =  u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\t#endif\r\n\t\tposition=skinTransform*a_Position;\r\n\t #else\r\n\t\tposition=a_Position;\r\n\t#endif\r\n\r\n\t#ifdef GPU_INSTANCE\r\n\t\tgl_Position = a_MvpMatrix * position;\r\n\t#else\r\n\t\tgl_Position = u_MvpMatrix * position;\r\n\t#endif\r\n\r\n\tmat4 worldMat;\r\n\t#ifdef GPU_INSTANCE\r\n\t\tworldMat = a_WorldMat;\r\n\t#else\r\n\t\tworldMat = u_WorldMat;\r\n\t#endif\r\n\r\n\tv_PositionWorld=(worldMat*position).xyz;\r\n\r\n\t#if defined(ALBEDOTEXTURE)||defined(METALLICGLOSSTEXTURE)||defined(NORMALTEXTURE)||defined(EMISSIONTEXTURE)||defined(OCCLUSIONTEXTURE)||defined(PARALLAXTEXTURE)\r\n\t\t#ifdef TILINGOFFSET\r\n\t\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\r\n\t\t#else\r\n\t\t\tv_Texcoord0=a_Texcoord0;\r\n\t\t#endif\r\n\t#endif\r\n\r\n\tv_EyeVec =u_CameraPos-v_PositionWorld;//will normalize per-pixel\r\n\r\n\t#ifdef LIGHTMAP\r\n\t\tvec2 texcoord;\r\n\t\t#ifdef UV1\r\n\t\t\ttexcoord=a_Texcoord1;\r\n\t\t#else\r\n\t\t\ttexcoord=a_Texcoord0;\r\n\t\t#endif\r\n\t\tv_LightMapUV=transformLightMapUV(texcoord,u_LightmapScaleOffset);\r\n\t#endif\r\n\r\n\tmat3 worldInvMat;\r\n\t#ifdef BONE\r\n\t\tworldInvMat=INVERSE_MAT(mat3(worldMat*skinTransform));\r\n\t#else\r\n\t\tworldInvMat=INVERSE_MAT(mat3(worldMat));\r\n\t#endif\r\n\r\n\tv_Normal=normalize(a_Normal*worldInvMat);//if no normalize will cause precision problem.\r\n\r\n\t#ifdef NORMALTEXTURE\r\n\t\tv_Tangent=normalize(a_Tangent0.xyz*worldInvMat);\r\n\t\tv_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\r\n\t#endif\r\n\r\n\t#ifdef PARALLAXTEXTURE\r\n\t\tvec3 binormal = cross(a_Normal, a_Tangent0.xyz)*a_Tangent0.w;\r\n\t\tmat3 objectTBN = mat3(a_Tangent0.xyz, binormal, a_Normal);\r\n\t\tv_ViewDirForParallax=(worldInvMat*u_CameraPos-position.xyz)*objectTBN;\r\n\t#endif\r\n\r\n\t#if defined(CALCULATE_SHADOWS)&&!defined(SHADOW_CASCADE)\r\n\t\tv_ShadowCoord = getShadowCoord(vec4(v_PositionWorld,1.0));\r\n\t#endif\r\n\r\n\t#ifdef CALCULATE_SPOTSHADOWS\r\n\t\tv_SpotShadowCoord = u_SpotViewProjectMatrix*vec4(v_PositionWorld,1.0);\r\n\t#endif\r\n}","#include \"Lighting.glsl\";\r\n\r\nattribute vec4 a_PositionTexcoord;\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main() {\r\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\r\n\tv_Texcoord0 = a_PositionTexcoord.zw;\r\n\tgl_Position = remapGLPositionZ(gl_Position);\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform vec4 u_MainTex_TexelSize;\r\n\r\nvoid fragDownsample13() {\r\n\tmediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n\tgl_FragColor = color;\r\n}\r\n\r\nvoid main() {\r\n\tfragDownsample13();\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform vec4 u_MainTex_TexelSize;\r\n\r\nvoid fragDownsample4() {\r\n\tmediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n\tgl_FragColor = color;\r\n}\r\n\r\nvoid main() {\r\n\tfragDownsample4();\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform sampler2D u_AutoExposureTex;\r\nuniform vec4 u_MainTex_TexelSize;\r\nuniform vec4 u_Threshold; // x: threshold value (linear), y: threshold - knee, z: knee * 2, w: 0.25 / knee\r\nuniform vec4 u_Params; // x: clamp, yzw: unused\r\n\r\nmediump vec4 prefilter(mediump vec4 color, vec2 uv) {\r\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, uv).r;\r\n\tcolor *= autoExposure;\r\n\tcolor = min(vec4(u_Params.x), color); // clamp to max\r\n\tcolor = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\r\n\treturn color;\r\n}\r\n\r\nvoid fragPrefilter13() {\r\n\tmediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n\tgl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\r\n}\r\n\r\nvoid main() {\r\n\tfragPrefilter13();\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform sampler2D u_AutoExposureTex;\r\nuniform vec4 u_MainTex_TexelSize;\r\nuniform vec4 u_Threshold; // x: threshold value (linear), y: threshold - knee, z: knee * 2, w: 0.25 / knee\r\nuniform vec4 u_Params; // x: clamp, yzw: unused\r\n\r\nmediump vec4 prefilter(mediump vec4 color, vec2 uv) {\r\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, uv).r;\r\n\tcolor *= autoExposure;\r\n\tcolor = min(vec4(u_Params.x), color); // clamp to max\r\n\tcolor = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\r\n\treturn color;\r\n}\r\n\r\nvoid fragPrefilter4() {\r\n\tmediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n\tgl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\r\n}\r\n\r\nvoid main() {\r\n\tfragPrefilter4();\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform sampler2D u_BloomTex;\r\n\r\nuniform vec4 u_MainTex_TexelSize;\r\nuniform float u_SampleScale;\r\n\r\nmediump vec4 combine(mediump vec4 bloom, vec2 uv) {\r\n\tmediump vec4 color = texture2D(u_BloomTex, uv);\r\n\treturn bloom + color;\r\n}\r\n\r\nvoid fragUpsampleBox() {\r\n\tmediump vec4 bloom = upsampleBox(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\r\n\tgl_FragColor = combine(bloom, v_Texcoord0);\r\n}\r\n\r\nvoid main() {\r\n\tfragUpsampleBox();\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform sampler2D u_BloomTex;\r\n\r\nuniform vec4 u_MainTex_TexelSize;\r\nuniform float u_SampleScale;\r\n\r\nmediump vec4 combine(mediump vec4 bloom, vec2 uv) {\r\n\tmediump vec4 color = texture2D(u_BloomTex, uv);\r\n\treturn bloom + color;\r\n}\r\n\r\nvoid fragUpsampleTent() {\r\n\tmediump vec4 bloom = upsampleTent(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\r\n\tgl_FragColor = combine(bloom, v_Texcoord0);\r\n}\r\n\r\nvoid main() {\r\n\tfragUpsampleTent();\r\n}","#include \"StdLib.glsl\";\r\n\r\n#define EPSILON 1.0e-4\r\n\r\n// Quadratic color thresholding\r\n// curve = (threshold - knee, knee * 2, 0.25 / knee)\r\nmediump vec4 quadraticThreshold(mediump vec4 color, mediump float threshold, mediump vec3 curve) {\r\n\t// Pixel brightness\r\n\tmediump float br = max3(color.r, color.g, color.b);\r\n\r\n\t// Under-threshold part: quadratic curve\r\n\tmediump float rq = clamp(br - curve.x, 0.0, curve.y);\r\n\trq = curve.z * rq * rq;\r\n\r\n\t// Combine and apply the brightness response curve.\r\n\tcolor *= max(rq, br - threshold) / max(br, EPSILON);\r\n\r\n\treturn color;\r\n}\r\n\r\n\r\n\r\n//\r\n// sRGB transfer functions\r\n// Fast path ref: http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1\r\n//\r\nmediump vec3 sRGBToLinear(mediump vec3 c) {\r\n\t#ifdef USE_VERY_FAST_SRGB\r\n\t\treturn c * c;\r\n\t#elif defined(USE_FAST_SRGB)\r\n\t\treturn c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878);\r\n\t#else\r\n\t\tmediump vec3 linearRGBLo = c / 12.92;\r\n\t\tmediump vec3 power=vec3(2.4, 2.4, 2.4);\r\n\t\tmediump vec3 linearRGBHi = positivePow((c + 0.055) / 1.055, power);\r\n\t\tmediump vec3 linearRGB =vec3((c.r<=0.04045) ? linearRGBLo.r : linearRGBHi.r,(c.g<=0.04045) ? linearRGBLo.g : linearRGBHi.g,(c.b<=0.04045) ? linearRGBLo.b : linearRGBHi.b);\r\n\t\treturn linearRGB;\r\n\t#endif\r\n}\r\n\r\nmediump vec4 sRGBToLinear(mediump vec4 c){\r\n    return vec4(sRGBToLinear(c.rgb), c.a);\r\n}\r\n\r\n\r\n\r\nmediump vec3 linearToSRGB(mediump vec3 c) {\r\n\t#ifdef USE_VERY_FAST_SRGB\r\n\t\treturn sqrt(c);\r\n\t#elif defined(USE_FAST_SRGB)\r\n\t\treturn max(1.055 * PositivePow(c, 0.416666667) - 0.055, 0.0);\r\n\t#else\r\n\t\tmediump vec3 sRGBLo = c * 12.92;\r\n\t\tmediump vec3 power=vec3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4);\r\n\t\tmediump vec3 sRGBHi = (positivePow(c, power) * 1.055) - 0.055;\r\n\t\tmediump vec3 sRGB =vec3((c.r<=0.0031308) ? sRGBLo.r : sRGBHi.r,(c.g<=0.0031308) ? sRGBLo.g : sRGBHi.g,(c.b<=0.0031308) ? sRGBLo.b : sRGBHi.b);\r\n\t\treturn sRGB;\r\n\t#endif\r\n}\r\n\r\nmediump vec4 linearToSRGB(mediump vec4 c){\r\n    return vec4(linearToSRGB(c.rgb), c.a);\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform sampler2D u_BloomTex;\r\n\r\nuniform sampler2D u_AutoExposureTex;\r\nuniform sampler2D u_Bloom_DirtTex;\r\nuniform vec4 u_BloomTex_TexelSize;\r\nuniform vec4 u_Bloom_DirtTileOffset; // xy: tiling, zw: offset\r\nuniform mediump vec3 u_Bloom_Settings;// x: sampleScale, y: intensity, z: dirt intensity\r\nuniform mediump vec3 u_Bloom_Color;\r\n\r\nvoid main() {\r\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, v_Texcoord0).r;\r\n\tmediump vec4 color=vec4(0.0);\r\n\tcolor = texture2D(u_MainTex, v_Texcoord0);\r\n\t\r\n\tcolor = sRGBToLinear(color);\r\n\tcolor.rgb *= autoExposure;\r\n\t\r\n\t#if defined(BLOOM)||defined(BLOOM_LOW)\r\n\t\t#ifdef BLOOM\r\n\t\t\tmediump vec4 bloom = upsampleTent(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\r\n\t\t#else\r\n\t\t\tmediump vec4 bloom = upsampleBox(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\r\n\t\t#endif\r\n\r\n\t\t// UVs should be Distort(uv * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw)\r\n\t\t// but considering we use a cover-style scale on the dirt texture the difference\r\n\t\t// isn't massive so we chose to save a few ALUs here instead in case lens distortion\r\n\t\t// is active\r\n\t\tmediump vec4 dirt =vec4(texture2D(u_Bloom_DirtTex, v_Texcoord0 * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw).rgb, 0.0);\r\n\r\n\t\t// Additive bloom (artist friendly)\r\n\t\tbloom *= u_Bloom_Settings.y;\r\n\t\tdirt *= u_Bloom_Settings.z;\r\n\t\tmediump vec4 bloomColor=vec4(u_Bloom_Color, 1.0);\r\n\t\tcolor += bloom * bloomColor;\r\n\t\tcolor += dirt * bloom;\r\n\t#endif\r\n\t\r\n\tmediump vec4 finalColor = color;\r\n\tfinalColor = linearToSRGB(finalColor);\r\n\t//finalColor.rgb = Dither(finalColor.rgb, v_Texcoord0);//TODO:抖动\r\n\tgl_FragColor = finalColor;\r\n}","#include \"Lighting.glsl\";\r\n\r\nattribute vec4 a_PositionTexcoord;\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main() {\r\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\r\n\tv_Texcoord0 = a_PositionTexcoord.zw;\r\n\tgl_Position = remapGLPositionZ(gl_Position);\r\n}","// Better, temporally stable box filtering\r\n// [Jimenez14] http://goo.gl/eomGso\r\n// . . . . . . .\r\n// . A . B . C .\r\n// . . D . E . .\r\n// . F . G . H .\r\n// . . I . J . .\r\n// . K . L . M .\r\n// . . . . . . .\r\nmediump vec4 downsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\r\n{\r\n    mediump vec4 A = texture2D(tex, uv + texelSize * vec2(-1.0, -1.0));\r\n    mediump vec4 B = texture2D(tex, uv + texelSize * vec2( 0.0, -1.0));\r\n    mediump vec4 C = texture2D(tex, uv + texelSize * vec2( 1.0, -1.0));\r\n    mediump vec4 D = texture2D(tex, uv + texelSize * vec2(-0.5, -0.5));\r\n    mediump vec4 E = texture2D(tex, uv + texelSize * vec2( 0.5, -0.5));\r\n    mediump vec4 F = texture2D(tex, uv + texelSize * vec2(-1.0,  0.0));\r\n    mediump vec4 G = texture2D(tex, uv);\r\n    mediump vec4 H = texture2D(tex, uv + texelSize * vec2( 1.0,  0.0));\r\n    mediump vec4 I = texture2D(tex, uv + texelSize * vec2(-0.5,  0.5));\r\n    mediump vec4 J = texture2D(tex, uv + texelSize * vec2( 0.5,  0.5));\r\n    mediump vec4 K = texture2D(tex, uv + texelSize * vec2(-1.0,  1.0));\r\n    mediump vec4 L = texture2D(tex, uv + texelSize * vec2( 0.0,  1.0));\r\n    mediump vec4 M = texture2D(tex, uv + texelSize * vec2( 1.0,  1.0));\r\n\r\n\tmediump vec2 scale= vec2(0.5, 0.125);\r\n    mediump vec2 div = (1.0 / 4.0) * scale;\r\n\r\n    mediump vec4 o = (D + E + I + J) * div.x;\r\n    o += (A + B + G + F) * div.y;\r\n    o += (B + C + H + G) * div.y;\r\n    o += (F + G + L + K) * div.y;\r\n    o += (G + H + M + L) * div.y;\r\n\r\n    return o;\r\n}\r\n\r\n// Standard box filtering\r\nmediump vec4 downsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\r\n\r\n    mediump vec4 s =  texture2D(tex, uv + d.xy);\r\n    s += texture2D(tex, uv + d.zy);\r\n    s += texture2D(tex, uv + d.xw);\r\n    s += texture2D(tex, uv + d.zw);\r\n\r\n    return s * (1.0 / 4.0);\r\n}\r\n\r\n// 9-tap bilinear upsampler (tent filter)\r\n// . . . . . . .\r\n// . 1 . 2 . 1 .\r\n// . . . . . . .\r\n// . 2 . 4 . 2 .\r\n// . . . . . . .\r\n// . 1 . 2 . 1 .\r\n// . . . . . . .\r\nmediump vec4 upsampleTent(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;\r\n\r\n    mediump vec4 s =  texture2D(tex, uv - d.xy);\r\n    s += texture2D(tex, uv - d.wy) * 2.0;\r\n    s += texture2D(tex, uv - d.zy);\r\n\r\n    s += texture2D(tex, uv + d.zw) * 2.0;\r\n    s += texture2D(tex, uv) * 4.0;\r\n    s += texture2D(tex,\tuv + d.xw) * 2.0;\r\n\r\n    s += texture2D(tex, uv + d.zy);\r\n    s += texture2D(tex, uv + d.wy) * 2.0;\r\n    s += texture2D(tex, uv + d.xy);\r\n\r\n    return s * (1.0 / 16.0);\r\n}\r\n\r\n// Standard box filtering\r\nmediump vec4 upsampleBox(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0) * 0.5 * sampleScale;\r\n\r\n    mediump vec4 s =  texture2D(tex, uv + d.xy);\r\n    s += texture2D(tex, uv + d.zy);\r\n    s += texture2D(tex, uv + d.xw);\r\n    s += texture2D(tex, uv + d.zw);\r\n\r\n    return s * (1.0 / 4.0);\r\n}","#define HALF_MAX       65504.0 // (2 - 2^-10) * 2^15\r\n\r\n#define FLT_EPSILON    1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\r\n\r\nmediump vec4 safeHDR(mediump vec4 c)\r\n{\r\n    return min(c, HALF_MAX);\r\n}\r\n\r\nfloat max3(float a, float b, float c)\r\n{\r\n    return max(max(a, b), c);\r\n}\r\n\r\nvec3 positivePow(vec3 base, vec3 power)\r\n{\r\n    return pow(max(abs(base), vec3(FLT_EPSILON, FLT_EPSILON, FLT_EPSILON)), power);\r\n}","#ifndef GRAPHICS_API_GLES3\r\n\t#define NO_NATIVE_SHADOWMAP\r\n#endif\r\n\r\n#ifdef NO_NATIVE_SHADOWMAP\r\n\t#define TEXTURE2D_SHADOW(textureName) uniform mediump sampler2D textureName\r\n\t#define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) (texture2D(textureName,coord3.xy).r<coord3.z?0.0:1.0)\r\n\t#define TEXTURE2D_SHADOW_PARAM(shadowMap) mediump sampler2D shadowMap\r\n#else\r\n\t#define TEXTURE2D_SHADOW(textureName) uniform mediump sampler2DShadow textureName\r\n\t#define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) textureLod(textureName,coord3,0.0)\r\n\t#define TEXTURE2D_SHADOW_PARAM(shadowMap) mediump sampler2DShadow shadowMap\r\n#endif\r\n\r\n#if defined(RECEIVESHADOW)&&defined(SHADOW)\r\n    #define CALCULATE_SHADOWS\r\n#endif\r\n\r\n#if defined(RECEIVESHADOW)&&defined(SHADOW_SPOT)\r\n\t#define CALCULATE_SPOTSHADOWS\r\n#endif\r\n\r\nuniform vec4 u_ShadowBias; // x: depth bias, y: normal bias\r\n\r\n#if defined(CALCULATE_SHADOWS)||defined(CALCULATE_SPOTSHADOWS)\r\n\t#include \"ShadowSampleTent.glsl\"\r\n\tuniform vec4 u_ShadowMapSize;\r\n\tuniform vec4 u_ShadowParams; // x: shadowStrength y: ShadowSpotLightStrength\r\n\r\n\t\r\n\tfloat sampleShdowMapFiltered4(TEXTURE2D_SHADOW_PARAM(shadowMap),vec3 shadowCoord,vec4 shadowMapSize)\r\n\t{\r\n\t\tfloat attenuation;\r\n\t\tvec4 attenuation4;\r\n\t\tvec2 offset=shadowMapSize.xy/2.0;\r\n\t\tvec3 shadowCoord0=shadowCoord + vec3(-offset,0.0);\r\n\t\tvec3 shadowCoord1=shadowCoord + vec3(offset.x,-offset.y,0.0);\r\n\t\tvec3 shadowCoord2=shadowCoord + vec3(-offset.x,offset.y,0.0);\r\n\t\tvec3 shadowCoord3=shadowCoord + vec3(offset,0.0);\r\n\t\tattenuation4.x = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord0);\r\n\t\tattenuation4.y = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord1);\r\n\t\tattenuation4.z = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord2);\r\n\t\tattenuation4.w = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord3);\r\n\t\tattenuation = dot(attenuation4, vec4(0.25));\r\n\t\treturn attenuation;\r\n\t}\r\n\r\n\tfloat sampleShdowMapFiltered9(TEXTURE2D_SHADOW_PARAM(shadowMap),vec3 shadowCoord,vec4 shadowmapSize)\r\n\t{\r\n\t\tfloat attenuation;\r\n\t\tfloat fetchesWeights[9];\r\n\t\tvec2 fetchesUV[9];\r\n\t\tsampleShadowComputeSamplesTent5x5(shadowmapSize, shadowCoord.xy, fetchesWeights, fetchesUV);\r\n\t\tattenuation = fetchesWeights[0] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[0].xy, shadowCoord.z));\r\n\t\tattenuation += fetchesWeights[1] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[1].xy, shadowCoord.z));\r\n\t\tattenuation += fetchesWeights[2] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[2].xy, shadowCoord.z));\r\n\t\tattenuation += fetchesWeights[3] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[3].xy, shadowCoord.z));\r\n\t\tattenuation += fetchesWeights[4] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[4].xy, shadowCoord.z));\r\n\t\tattenuation += fetchesWeights[5] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[5].xy, shadowCoord.z));\r\n\t\tattenuation += fetchesWeights[6] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[6].xy, shadowCoord.z));\r\n\t\tattenuation += fetchesWeights[7] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[7].xy, shadowCoord.z));\r\n\t\tattenuation += fetchesWeights[8] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[8].xy, shadowCoord.z));\r\n\t\treturn attenuation;\r\n\t}\r\n\r\n#endif\r\n\r\n\r\n\r\n\r\n#ifdef CALCULATE_SHADOWS\r\n\r\n\tTEXTURE2D_SHADOW(u_ShadowMap);\r\n\r\n\tuniform mat4 u_ShadowMatrices[4];\r\n\tuniform vec4 u_ShadowSplitSpheres[4];// max cascade is 4\r\n\r\n\tmediump int computeCascadeIndex(vec3 positionWS)\r\n\t{\r\n\t\tvec3 fromCenter0 = positionWS - u_ShadowSplitSpheres[0].xyz;\r\n\t\tvec3 fromCenter1 = positionWS - u_ShadowSplitSpheres[1].xyz;\r\n\t\tvec3 fromCenter2 = positionWS - u_ShadowSplitSpheres[2].xyz;\r\n\t\tvec3 fromCenter3 = positionWS - u_ShadowSplitSpheres[3].xyz;\r\n\r\n\t\tmediump vec4 comparison = vec4(\r\n\t\t\tdot(fromCenter0, fromCenter0)<u_ShadowSplitSpheres[0].w,\r\n\t\t\tdot(fromCenter1, fromCenter1)<u_ShadowSplitSpheres[1].w,\r\n\t\t\tdot(fromCenter2, fromCenter2)<u_ShadowSplitSpheres[2].w,\r\n\t\t\tdot(fromCenter3, fromCenter3)<u_ShadowSplitSpheres[3].w);\r\n\t\tcomparison.yzw = clamp(comparison.yzw - comparison.xyz,0.0,1.0);//keep the nearest\r\n\t\tmediump vec4 indexCoefficient = vec4(4.0,3.0,2.0,1.0);\r\n\t\tmediump int index = 4 - int(dot(comparison, indexCoefficient));\r\n\t\treturn index;\r\n\t}\r\n\r\n\tvec4 getShadowCoord(vec4 positionWS)\r\n\t{\r\n\t\t#ifdef SHADOW_CASCADE\r\n\t\t\tmediump int cascadeIndex = computeCascadeIndex(positionWS.xyz);\r\n\t\t\tif(cascadeIndex > 3)// out of shadow range cascadeIndex is 4.\r\n\t\t\t\treturn vec4(0.0);\r\n\t\t\t\r\n\t\t\t#ifdef GRAPHICS_API_GLES3\r\n\t\t\t\treturn u_ShadowMatrices[cascadeIndex] * positionWS;\r\n\t\t\t#else\r\n\t\t\t\tmat4 shadowMat;\r\n\t\t\t\tif(cascadeIndex == 0)\r\n\t\t\t\t\tshadowMat = u_ShadowMatrices[0];\r\n\t\t\t\telse if(cascadeIndex == 1)\r\n\t\t\t\t\tshadowMat = u_ShadowMatrices[1];\r\n\t\t\t\telse if(cascadeIndex == 2)\r\n\t\t\t\t\tshadowMat = u_ShadowMatrices[2];\r\n\t\t\t\telse\r\n\t\t\t\t\tshadowMat = u_ShadowMatrices[3];\r\n\t\t\t\treturn shadowMat * positionWS;\r\n\t\t\t#endif\r\n\t\t#else\r\n\t\t\treturn u_ShadowMatrices[0] * positionWS;\r\n\t\t#endif\r\n\t}\r\n\r\n\tfloat sampleShadowmap(vec4 shadowCoord)\r\n\t{\r\n\t\tshadowCoord.xyz /= shadowCoord.w;\r\n\t\tfloat attenuation = 1.0;\r\n\t\tif(shadowCoord.z > 0.0 && shadowCoord.z < 1.0)\r\n\t\t{\r\n\t\t\t#if defined(SHADOW_SOFT_SHADOW_HIGH)\r\n\t\t\t\tattenuation = sampleShdowMapFiltered9(u_ShadowMap,shadowCoord.xyz,u_ShadowMapSize);\r\n\t\t\t#elif defined(SHADOW_SOFT_SHADOW_LOW)\r\n\t\t\t\tattenuation = sampleShdowMapFiltered4(u_ShadowMap,shadowCoord.xyz,u_ShadowMapSize);\r\n\t\t\t#else\r\n\t\t\t\tattenuation = SAMPLE_TEXTURE2D_SHADOW(u_ShadowMap,shadowCoord.xyz);\r\n\t\t\t#endif\r\n\t\t\tattenuation = mix(1.0,attenuation,u_ShadowParams.x);//shadowParams.x:shadow strength\r\n\t\t}\r\n\t\treturn attenuation;\r\n\t}\r\n#endif\r\n\r\n#ifdef CALCULATE_SPOTSHADOWS\r\n\tTEXTURE2D_SHADOW(u_SpotShadowMap);\r\n\tuniform mat4 u_SpotViewProjectMatrix;\r\n\tfloat sampleSpotShadowmap(vec4 shadowCoord)\r\n\t{\r\n\t\tshadowCoord.xyz /= shadowCoord.w;\r\n\t\tfloat attenuation = 1.0;\r\n\t\tshadowCoord.xy +=1.0;\r\n\t\tshadowCoord.xy/=2.0; \r\n\t\tif(shadowCoord.z > 0.0 && shadowCoord.z < 1.0)\r\n\t\t{\r\n\t\t\t#if defined(SHADOW_SPOT_SOFT_SHADOW_HIGH)\r\n\t\t\t\tattenuation = sampleShdowMapFiltered9(u_SpotShadowMap,shadowCoord.xyz,u_ShadowMapSize);\r\n\t\t\t#elif defined(SHADOW_SPOT_SOFT_SHADOW_LOW)\r\n\t\t\t\tattenuation = sampleShdowMapFiltered4(u_SpotShadowMap,shadowCoord.xyz,u_ShadowMapSize);\r\n\t\t\t#else\r\n\t\t\t\tattenuation = SAMPLE_TEXTURE2D_SHADOW(u_SpotShadowMap,shadowCoord.xyz);\r\n\t\t\t#endif\r\n\t\t\tattenuation = mix(1.0,attenuation,u_ShadowParams.y);//shadowParams.y:shadow strength\r\n\t\t}\r\n\t\treturn attenuation;\r\n\t}\r\n#endif\r\n\r\nvec3 applyShadowBias(vec3 positionWS, vec3 normalWS, vec3 lightDirection)\r\n{\r\n    float invNdotL = 1.0 - clamp(dot(-lightDirection, normalWS),0.0,1.0);\r\n    float scale = invNdotL * u_ShadowBias.y;\r\n\r\n    // normal bias is negative since we want to apply an inset normal offset\r\n    positionWS += -lightDirection * u_ShadowBias.xxx;\r\n    positionWS += normalWS * vec3(scale);\r\n    return positionWS;\r\n}\r\n","#include \"Lighting.glsl\";\r\n#include \"Shadow.glsl\"\r\n\r\nattribute vec4 a_Position;\r\nattribute vec3 a_Normal;\r\n\r\n#ifdef BONE\r\n\tconst int c_MaxBoneCount = 24;\r\n\tattribute vec4 a_BoneIndices;\r\n\tattribute vec4 a_BoneWeights;\r\n\tuniform mat4 u_Bones[c_MaxBoneCount];\r\n#endif\r\n\r\n#ifdef GPU_INSTANCE\r\n\tattribute mat4 a_WorldMat;\r\n#else\r\n\tuniform mat4 u_WorldMat;\r\n#endif\r\n\r\nuniform mat4 u_ViewProjection;\r\n\r\n#ifdef SHADOW\r\n\tuniform vec3 u_ShadowLightDirection;\r\n#endif\r\n\r\n\r\n\r\n#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))||(defined(LIGHTMAP)&&defined(UV))\r\n\tattribute vec2 a_Texcoord0;\r\n\tvarying vec2 v_Texcoord0;\r\n#endif\r\n\r\nvec4 shadowCasterVertex()\r\n{\r\n\tmat4 worldMat;\r\n\t#ifdef GPU_INSTANCE\r\n\t\tworldMat = a_WorldMat;\r\n\t#else\r\n\t\tworldMat = u_WorldMat;\r\n\t#endif\r\n\t\r\n\t#ifdef BONE\r\n\t\tmat4 skinTransform;\r\n\t \t#ifdef SIMPLEBONE\r\n\t\t\tfloat currentPixelPos;\r\n\t\t\t#ifdef GPU_INSTANCE\r\n\t\t\t\tcurrentPixelPos = a_SimpleTextureParams.x+a_SimpleTextureParams.y;\r\n\t\t\t#else\r\n\t\t\t\tcurrentPixelPos = u_SimpleAnimatorParams.x+u_SimpleAnimatorParams.y;\r\n\t\t\t#endif\r\n\t\t\tfloat offset = 1.0/u_SimpleAnimatorTextureSize;\r\n\t\t\tskinTransform =  loadMatFromTexture(currentPixelPos,int(a_BoneIndices.x),offset) * a_BoneWeights.x;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.y),offset) * a_BoneWeights.y;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.z),offset) * a_BoneWeights.z;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.w),offset) * a_BoneWeights.w;\r\n\t\t#else\r\n\t\t\tskinTransform =  u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\t#endif\r\n\t\tworldMat = worldMat * skinTransform;\r\n\t#endif\r\n\r\n\tvec4 positionWS = worldMat * a_Position;\r\n\tvec3 normalWS = normalize(a_Normal*INVERSE_MAT(mat3(worldMat)));//if no normalize will cause precision problem\r\n\r\n\t#ifdef SHADOW\r\n\t\tpositionWS.xyz = applyShadowBias(positionWS.xyz,normalWS,u_ShadowLightDirection);\r\n\t#endif\r\n\r\n\tvec4 positionCS = u_ViewProjection * positionWS;\r\n\t#ifdef SHADOW_SPOT\r\n\t\tpositionCS.z = positionCS.z-u_ShadowBias.x/positionCS.w;\r\n\t#endif\r\n\tpositionCS.z = max(positionCS.z, 0.0);//min ndc z is 0.0\r\n\t\r\n\t// //TODO没考虑UV动画呢\r\n\t// #if defined(DIFFUSEMAP)&&defined(ALPHATEST)\r\n\t// \tv_Texcoord0=a_Texcoord0;\r\n\t// #endif\r\n    return positionCS;\r\n}\r\n","// #ifdef ALPHATEST\r\n// \tuniform float u_AlphaTestValue;\r\n// #endif\r\n\r\n// #ifdef DIFFUSEMAP\r\n// \tuniform sampler2D u_DiffuseTexture;\r\n// #endif\r\n\r\n// #if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\r\n// \tvarying vec2 v_Texcoord0;\r\n// #endif\r\n\r\nvec4 shadowCasterFragment()\r\n{\r\n    return vec4(0.0);\r\n    // #if defined(DIFFUSEMAP)&&defined(ALPHATEST)\r\n\t// \tfloat alpha = texture2D(u_DiffuseTexture,v_Texcoord0).w;\r\n\t// \tif( alpha < u_AlphaTestValue )\r\n\t// \t{\r\n\t// \t\tdiscard;\r\n\t// \t}\r\n\t// #endif\r\n}\r\n","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nvarying vec3 v_Texcoord;\r\n\r\nuniform samplerCube u_CubeTexture;\r\nuniform float u_Exposure;\r\nuniform vec4 u_TintColor;\r\n\r\n\r\nvoid main()\r\n{\t\r\n\tvec3 color=textureCube(u_CubeTexture, v_Texcoord).rgb*u_TintColor.rgb*u_Exposure*2.0;\r\n\tgl_FragColor=vec4(color,1.0);\r\n}\r\n\r\n","#include \"Lighting.glsl\";\r\n\r\nattribute vec4 a_Position;\r\nuniform mat4 u_ViewProjection;\r\nuniform float u_Rotation;\r\nvarying vec3 v_Texcoord;\r\n\r\n\r\nvec4 rotateAroundYInDegrees (vec4 vertex, float degrees)\r\n{\r\n\tfloat angle = degrees * 3.141593 / 180.0;\r\n\tfloat sina=sin(angle);\r\n\tfloat cosa=cos(angle);\r\n\tmat2 m = mat2(cosa, -sina, sina, cosa);\r\n\treturn vec4(m*vertex.xz, vertex.yw).xzyw;\r\n}\r\n\t\t\r\nvoid main()\r\n{\r\n\tvec4 position=rotateAroundYInDegrees(a_Position,u_Rotation);\r\n\tgl_Position = u_ViewProjection*position;\r\n\tv_Texcoord=vec3(-a_Position.x,a_Position.yz);//转换坐标系\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}\r\n","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include \"Lighting.glsl\";\r\n\r\nconst float MIE_G = -0.990;\r\nconst float MIE_G2 = 0.9801;\r\nconst float SKY_GROUND_THRESHOLD = 0.02;\r\n\r\nuniform float u_SunSize;\r\nuniform float u_SunSizeConvergence;\r\nuniform DirectionLight u_SunLight;\r\n\r\n\r\nvarying vec3 v_GroundColor;\r\nvarying vec3 v_SkyColor;\r\n\r\n\r\n#ifdef SUN_HIGH_QUALITY\r\n\tvarying vec3 v_Vertex;\r\n#elif defined(SUN_SIMPLE)\r\n\tvarying vec3 v_RayDir;\r\n#else\r\n\tvarying float v_SkyGroundFactor;\r\n#endif\r\n\r\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\r\n\tvarying vec3 v_SunColor;\r\n#endif\r\n\r\n// Calculates the Mie phase function\r\nfloat getMiePhase(float eyeCos, float eyeCos2) {\r\n\tfloat temp = 1.0 + MIE_G2 - 2.0 * MIE_G * eyeCos;\r\n\ttemp = pow(temp, pow(u_SunSize,0.65) * 10.0);\r\n\ttemp = max(temp,1.0e-4); // prevent division by zero, esp. in half precision\r\n\ttemp = 1.5 * ((1.0 - MIE_G2) / (2.0 + MIE_G2)) * (1.0 + eyeCos2) / temp;\r\n\treturn temp;\r\n}\r\n\r\n// Calculates the sun shape\r\nfloat calcSunAttenuation(vec3 lightPos, vec3 ray) {\r\n\t#ifdef SUN_HIGH_QUALITY\r\n\t\tfloat focusedEyeCos = pow(clamp(dot(lightPos, ray),0.0,1.0), u_SunSizeConvergence);\r\n\t\treturn getMiePhase(-focusedEyeCos, focusedEyeCos * focusedEyeCos);\r\n\t#else //SUN_SIMPLE\r\n\t\tvec3 delta = lightPos - ray;\r\n\t\tfloat dist = length(delta);\r\n\t\tfloat spot = 1.0 - smoothstep(0.0, u_SunSize, dist);\r\n\t\treturn spot * spot;\r\n\t#endif\r\n}\r\n\r\nvoid main() {\r\n\t// if y > 1 [eyeRay.y < -SKY_GROUND_THRESHOLD] - ground\r\n\t// if y >= 0 and < 1 [eyeRay.y <= 0 and > -SKY_GROUND_THRESHOLD] - horizon\r\n\t// if y < 0 [eyeRay.y > 0] - sky\r\n\tvec3 col = vec3(0.0, 0.0, 0.0);\r\n\r\n\t#ifdef SUN_HIGH_QUALITY\r\n\t\tvec3 ray = normalize(v_Vertex);\r\n\t\tfloat y = ray.y / SKY_GROUND_THRESHOLD;\r\n\t#elif defined(SUN_SIMPLE) \r\n\t\tvec3 ray = v_RayDir;\r\n\t\tfloat y = ray.y / SKY_GROUND_THRESHOLD;\t\r\n\t#else\r\n\t\tfloat y = v_SkyGroundFactor;\r\n\t#endif\r\n\r\n\t// if we did precalculate color in vprog: just do lerp between them\r\n\tcol = mix(v_SkyColor, v_GroundColor, clamp(y,0.0,1.0));\r\n\r\n\t#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\r\n\t\tif (y < 0.0)\r\n\t\t\tcol += v_SunColor * calcSunAttenuation(-u_SunLight.direction, -ray);\r\n\t#endif\r\n\r\n\tcol = sqrt(col);//linear space convert to gamma space\r\n\tgl_FragColor=vec4(col,1.0);\r\n}\r\n\r\n","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include \"Lighting.glsl\";\r\n\r\n#define OUTER_RADIUS 1.025\r\n#define RAYLEIGH (mix(0.0, 0.0025, pow(u_AtmosphereThickness,2.5)))// Rayleigh constant Rayleigh为夜空光和极光亮度单位\r\n#define MIE 0.0010             // Mie constant 米氏散射\r\n#define SUN_BRIGHTNESS 20.0    // Sun brightness\r\n#define MAX_SCATTER 50.0 // Maximum scattering value, to prevent math overflows on Adrenos\r\n\r\nconst float SKY_GROUND_THRESHOLD = 0.02;\r\nconst float outerRadius = OUTER_RADIUS;\r\nconst float outerRadius2 = OUTER_RADIUS*OUTER_RADIUS;\r\nconst float innerRadius = 1.0;\r\nconst float innerRadius2 = 1.0;\r\nconst float cameraHeight = 0.0001;\r\n\r\nconst float HDSundiskIntensityFactor = 15.0;\r\nconst float simpleSundiskIntensityFactor = 27.0;\r\n\r\nconst float sunScale = 400.0 * SUN_BRIGHTNESS;\r\nconst float kmESun = MIE * SUN_BRIGHTNESS;\r\nconst float km4PI = MIE * 4.0 * 3.14159265;\r\nconst float scale = 1.0 / (OUTER_RADIUS - 1.0);\r\nconst float scaleDepth = 0.25;\r\nconst float scaleOverScaleDepth = (1.0 / (OUTER_RADIUS - 1.0)) / 0.25;\r\nconst float samples = 2.0; // THIS IS UNROLLED MANUALLY, DON'T TOUCH\r\n\r\n// RGB wavelengths        .35 (.62=158), .43 (.68=174), .525 (.75=190)\r\nconst vec3 c_DefaultScatteringWavelength = vec3(0.65, 0.57, 0.475);//默认散射波长\r\nconst vec3 c_VariableRangeForScatteringWavelength = vec3(0.15, 0.15, 0.15);//散射播放的可变范围\r\n\r\nattribute vec4 a_Position;\r\n\r\nuniform mat4 u_ViewProjection;\r\nuniform vec3 u_SkyTint;\r\nuniform vec3 u_GroundTint;\r\nuniform float u_Exposure;\r\nuniform float u_AtmosphereThickness;\r\nuniform DirectionLight u_SunLight;\r\n\r\nvarying vec3 v_GroundColor;\r\nvarying vec3 v_SkyColor;\r\n\r\n#ifdef SUN_HIGH_QUALITY\r\n\tvarying vec3 v_Vertex;\r\n#elif defined(SUN_SIMPLE)\r\n\tvarying vec3 v_RayDir;\r\n#else\r\n\tvarying float v_SkyGroundFactor;\r\n#endif\r\n\r\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\r\n\tvarying vec3 v_SunColor;\r\n#endif\r\n\r\n// Calculates the Rayleigh phase function\r\nfloat getRayleighPhase(vec3 light, vec3 ray) \r\n{\r\n\tfloat eyeCos = dot(light, ray);\r\n\treturn 0.75 + 0.75*eyeCos*eyeCos;\r\n}\r\n\r\nfloat scaleAngle(float inCos)\r\n{\r\n\tfloat x = 1.0 - inCos;\r\n\treturn 0.25 * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\r\n}\r\n\r\n\r\nvoid main () {\r\n\tgl_Position = u_ViewProjection*a_Position;\r\n\r\n\tvec3 skyTintInGammaSpace = u_SkyTint;//支持非GAMMA空间后要调整\r\n\tvec3 scatteringWavelength = mix(c_DefaultScatteringWavelength-c_VariableRangeForScatteringWavelength,c_DefaultScatteringWavelength+c_VariableRangeForScatteringWavelength,vec3(1.0) - skyTintInGammaSpace); // using Tint in sRGB+ gamma allows for more visually linear interpolation and to keep (0.5) at (128, gray in sRGB) point\r\n\tvec3 invWavelength = 1.0 / pow(scatteringWavelength, vec3(4.0));\r\n\r\n\tfloat krESun = RAYLEIGH * SUN_BRIGHTNESS;\r\n\tfloat kr4PI = RAYLEIGH * 4.0 * 3.14159265;\r\n\r\n\tvec3 cameraPos = vec3(0.0,innerRadius + cameraHeight,0.0); // The camera's current position\r\n\r\n\t// Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\r\n\tvec3 eyeRay = normalize(a_Position.xyz);\r\n\r\n\tfloat far = 0.0;\r\n\tvec3 cIn, cOut;\r\n\tif (eyeRay.y >= 0.0) {// Sky\r\n\t\t// Calculate the length of the \"atmosphere\"\r\n\t\tfar = sqrt(outerRadius2 + innerRadius2 * eyeRay.y * eyeRay.y - innerRadius2) - innerRadius * eyeRay.y;\r\n\r\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\r\n\t\tfloat height = innerRadius + cameraHeight;\r\n\t\tfloat depth = exp(scaleOverScaleDepth * -cameraHeight);\r\n\t\tfloat startAngle = dot(eyeRay, cameraPos) / height;\r\n\t\tfloat startOffset = depth*scaleAngle(startAngle);\r\n\r\n\t\t// Initialize the scattering loop variables\r\n\t\tfloat sampleLength = far / samples;\r\n\t\tfloat scaledLength = sampleLength * scale;\r\n\t\tvec3 sampleRay = eyeRay * sampleLength;\r\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\r\n\r\n\t\tvec3 frontColor = vec3(0.0);\r\n\t\t//unrolling this manually to avoid some platform for loop slow\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat lightAngle = dot(-u_SunLight.direction, samplePoint) / height;\r\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\r\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\r\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat lightAngle = dot(-u_SunLight.direction, samplePoint) / height;\r\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\r\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\r\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\r\n\t\t// Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\r\n\t\tcIn = frontColor * (invWavelength * krESun);\r\n\t\tcOut = frontColor * kmESun;\r\n\t} else {// Ground\r\n\t\tfar = (-cameraHeight) / (min(-0.001, eyeRay.y));\r\n\t\tvec3 pos = cameraPos + far * eyeRay;\r\n\r\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\r\n\t\tfloat depth = exp((-cameraHeight) * (1.0/scaleDepth));\r\n\t\tfloat cameraAngle = dot(-eyeRay, pos);\r\n\t\tfloat lightAngle = dot(-u_SunLight.direction, pos);\r\n\t\tfloat cameraScale = scaleAngle(cameraAngle);\r\n\t\tfloat lightScale = scaleAngle(lightAngle);\r\n\t\tfloat cameraOffset = depth*cameraScale;\r\n\t\tfloat temp = lightScale + cameraScale;\r\n\r\n\t\t// Initialize the scattering loop variables\r\n\t\tfloat sampleLength = far / samples;\r\n\t\tfloat scaledLength = sampleLength * scale;\r\n\t\tvec3 sampleRay = eyeRay * sampleLength;\r\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\r\n\r\n\t\t// Now loop through the sample rays\r\n\t\tvec3 frontColor = vec3(0.0, 0.0, 0.0);\r\n\t\tvec3 attenuate;\r\n\r\n\t\t// Loop removed because we kept hitting SM2.0 temp variable limits. Doesn't affect the image too much.\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat scatter = depth*temp - cameraOffset;\r\n\t\t\tattenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\r\n\t\tcIn = frontColor * (invWavelength * krESun + kmESun);\r\n\t\tcOut = clamp(attenuate, 0.0, 1.0);\r\n\t}\r\n\r\n\t#ifdef SUN_HIGH_QUALITY\r\n\t\tv_Vertex = -a_Position.xyz;\r\n\t#elif defined(SUN_SIMPLE) \r\n\t\tv_RayDir = -eyeRay;\r\n\t#else\r\n\t\tv_SkyGroundFactor = -eyeRay.y / SKY_GROUND_THRESHOLD;\r\n\t#endif\r\n\r\n\t// if we want to calculate color in vprog:\r\n\t// in case of linear: multiply by _Exposure in here (even in case of lerp it will be common multiplier, so we can skip mul in fshader)\r\n\tv_GroundColor = u_Exposure * (cIn + u_GroundTint*u_GroundTint * cOut);//u_GroundColor*u_GroundColor is gamma space convert to linear space\r\n\tv_SkyColor    = u_Exposure * (cIn * getRayleighPhase(-u_SunLight.direction, -eyeRay));\r\n\r\n\t\r\n\t// The sun should have a stable intensity in its course in the sky. Moreover it should match the highlight of a purely specular material.\r\n\t// This matching was done using the Unity3D standard shader BRDF1 on the 5/31/2017\r\n\t// Finally we want the sun to be always bright even in LDR thus the normalization of the lightColor for low intensity.\r\n\tfloat lightColorIntensity = clamp(length(u_SunLight.color), 0.25, 1.0);\r\n\r\n\t#ifdef SUN_HIGH_QUALITY \r\n\t\tv_SunColor = HDSundiskIntensityFactor * clamp(cOut,0.0,1.0) * u_SunLight.color / lightColorIntensity;\r\n\t#elif defined(SUN_SIMPLE) \r\n\t\tv_SunColor = simpleSundiskIntensityFactor * clamp(cOut * sunScale,0.0,1.0) * u_SunLight.color / lightColorIntensity;\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}\r\n","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\nuniform sampler2D u_MainTexture;\r\nuniform vec4 u_MainColor;\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec4 v_Color;\r\n\r\nvoid main()\r\n{\r\n\tvec4 color = 2.0 * u_MainColor * v_Color;\r\n\t#ifdef MAINTEXTURE\r\n\t\tvec4 mainTextureColor = texture2D(u_MainTexture, v_Texcoord0);\r\n\t\tcolor *= mainTextureColor;\r\n\t#endif\r\n\tgl_FragColor = color;\r\n}\r\n\r\n     ","#include \"Lighting.glsl\";\r\n\r\nattribute vec3 a_Position;\r\nattribute vec3 a_OffsetVector;\r\nattribute vec4 a_Color;\r\nattribute float a_Texcoord0X;\r\nattribute float a_Texcoord0Y;\r\nattribute float a_BirthTime;\r\n\r\nuniform mat4 u_View;\r\nuniform mat4 u_Projection;\r\n\r\nuniform vec4 u_TilingOffset;\r\n\r\nuniform float u_CurTime;\r\nuniform float u_LifeTime;\r\nuniform vec4 u_WidthCurve[10];\r\nuniform int u_WidthCurveKeyLength;\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec4 v_Color;\r\n\r\nfloat hermiteInterpolate(float t, float outTangent, float inTangent, float duration, float value1, float value2)\r\n{\r\n\tfloat t2 = t * t;\r\n\tfloat t3 = t2 * t;\r\n\tfloat a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\tfloat b = t3 - 2.0 * t2 + t;\r\n\tfloat c = t3 - t2;\r\n\tfloat d = -2.0 * t3 + 3.0 * t2;\r\n\treturn a * value1 + b * outTangent * duration + c * inTangent * duration + d * value2;\r\n}\r\n\r\nfloat getCurWidth(in float normalizeTime)\r\n{\r\n\tfloat width;\r\n\tif(normalizeTime == 0.0){\r\n\t\twidth=u_WidthCurve[0].w;\r\n\t}\r\n\telse if(normalizeTime >= 1.0){\r\n\t\twidth=u_WidthCurve[u_WidthCurveKeyLength - 1].w;\r\n\t}\r\n\telse{\r\n\t\tfor(int i = 0; i < 10; i ++ )\r\n\t\t{\r\n\t\t\tif(normalizeTime == u_WidthCurve[i].x){\r\n\t\t\t\twidth=u_WidthCurve[i].w;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvec4 lastFrame = u_WidthCurve[i];\r\n\t\t\tvec4 nextFrame = u_WidthCurve[i + 1];\r\n\t\t\tif(normalizeTime > lastFrame.x && normalizeTime < nextFrame.x)\r\n\t\t\t{\r\n\t\t\t\tfloat duration = nextFrame.x - lastFrame.x;\r\n\t\t\t\tfloat t = (normalizeTime - lastFrame.x) / duration;\r\n\t\t\t\tfloat outTangent = lastFrame.z;\r\n\t\t\t\tfloat inTangent = nextFrame.y;\r\n\t\t\t\tfloat value1 = lastFrame.w;\r\n\t\t\t\tfloat value2 = nextFrame.w;\r\n\t\t\t\twidth=hermiteInterpolate(t, outTangent, inTangent, duration, value1, value2);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn width;\r\n}\t\r\n\r\nvoid main()\r\n{\r\n\tfloat normalizeTime = (u_CurTime - a_BirthTime) / u_LifeTime;\r\n\t\r\n\t#ifdef TILINGOFFSET\r\n\t\tv_Texcoord0 = vec2(a_Texcoord0X, 1.0 - a_Texcoord0Y) * u_TilingOffset.xy + u_TilingOffset.zw;\r\n\t#else\r\n\t\tv_Texcoord0 = vec2(a_Texcoord0X, a_Texcoord0Y);\r\n\t#endif\r\n\t\r\n\tv_Color = a_Color;\r\n\t\r\n\tgl_Position = u_Projection * u_View * vec4(a_Position + a_OffsetVector * getCurWidth(normalizeTime),1.0);\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}\r\n","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\r\n\tvarying vec4 v_Color;\r\n#endif\r\n\r\n#ifdef ALBEDOTEXTURE\r\n\tuniform sampler2D u_AlbedoTexture;\r\n\tvarying vec2 v_Texcoord0;\r\n#endif\r\n\r\nuniform vec4 u_AlbedoColor;\r\n\r\n#ifdef ALPHATEST\r\n\tuniform float u_AlphaTestValue;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tuniform float u_FogStart;\r\n\tuniform float u_FogRange;\r\n\t#ifdef ADDTIVEFOG\r\n\t#else\r\n\t\tuniform vec3 u_FogColor;\r\n\t#endif\r\n#endif\r\n\r\nvoid main()\r\n{\r\n\tvec4 color =  u_AlbedoColor;\r\n\t#ifdef ALBEDOTEXTURE\r\n\t\tcolor *= texture2D(u_AlbedoTexture, v_Texcoord0);\r\n\t#endif\r\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\r\n\t\tcolor *= v_Color;\r\n\t#endif\r\n\t\r\n\t#ifdef ALPHATEST\r\n\t\tif(color.a < u_AlphaTestValue)\r\n\t\t\tdiscard;\r\n\t#endif\r\n\t\r\n\tgl_FragColor = color;\r\n\t\r\n\t#ifdef FOG\r\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\r\n\t\t#ifdef ADDTIVEFOG\r\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), lerpFact);\r\n\t\t#else\r\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\r\n\t\t#endif\r\n\t#endif\r\n\t\r\n}\r\n\r\n","#include \"Lighting.glsl\";\r\n\r\nattribute vec4 a_Position;\r\n\r\nattribute vec2 a_Texcoord0;\r\n\r\n#ifdef GPU_INSTANCE\r\n\tattribute mat4 a_MvpMatrix;\r\n#else\r\n\tuniform mat4 u_MvpMatrix;\r\n#endif\r\n\r\nattribute vec4 a_Color;\r\nvarying vec4 v_Color;\r\nvarying vec2 v_Texcoord0;\r\n\r\n#ifdef TILINGOFFSET\r\n\tuniform vec4 u_TilingOffset;\r\n#endif\r\n\r\n#ifdef BONE\r\n\tconst int c_MaxBoneCount = 24;\r\n\tattribute vec4 a_BoneIndices;\r\n\tattribute vec4 a_BoneWeights;\r\n\tuniform mat4 u_Bones[c_MaxBoneCount];\r\n#endif\r\n\r\n#ifdef SIMPLEBONE\r\n\t#ifdef GPU_INSTANCE\r\n\t\tattribute vec4 a_SimpleTextureParams;\r\n\t#else\r\n\t\tuniform vec4 u_SimpleAnimatorParams;\r\n\t#endif\r\n\tuniform sampler2D u_SimpleAnimatorTexture;\r\n\r\n\tuniform float u_SimpleAnimatorTextureSize; \r\n#endif\r\n\r\n\r\n#ifdef SIMPLEBONE\r\nmat4 loadMatFromTexture(float FramePos,int boneIndices,float offset)\r\n{\r\n\tvec2 uv;\r\n\tfloat PixelPos = FramePos+float(boneIndices)*4.0;\r\n\tfloat halfOffset = offset * 0.5;\r\n\tfloat uvoffset = PixelPos/u_SimpleAnimatorTextureSize;\r\n\tuv.y = floor(uvoffset)*offset+halfOffset;\r\n\tuv.x = mod(float(PixelPos),u_SimpleAnimatorTextureSize)*offset+halfOffset;\r\n\tvec4 mat0row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tuv.x+=offset;\r\n\tvec4 mat1row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tuv.x+=offset;\r\n\tvec4 mat2row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tuv.x+=offset;\r\n\tvec4 mat3row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tmat4 m =mat4(mat0row.x,mat0row.y,mat0row.z,mat0row.w,\r\n\t\t\t  mat1row.x,mat1row.y,mat1row.z,mat1row.w,\r\n\t\t\t  mat2row.x,mat2row.y,mat2row.z,mat2row.w,\r\n\t\t\t  mat3row.x,mat3row.y,mat3row.z,mat3row.w);\r\n\treturn m;\r\n}\r\n#endif\r\nvoid main() {\r\n\tvec4 position;\r\n\t#ifdef BONE\r\n\t\tmat4 skinTransform;\r\n\t \t#ifdef SIMPLEBONE\r\n\t\t\tfloat currentPixelPos;\r\n\t\t\t#ifdef GPU_INSTANCE\r\n\t\t\t\tcurrentPixelPos = a_SimpleTextureParams.x+a_SimpleTextureParams.y;\r\n\t\t\t#else\r\n\t\t\t\tcurrentPixelPos = u_SimpleAnimatorParams.x+u_SimpleAnimatorParams.y;\r\n\t\t\t#endif\r\n\t\t\tfloat offset = 1.0/u_SimpleAnimatorTextureSize;\r\n\t\t\tskinTransform =  loadMatFromTexture(currentPixelPos,int(a_BoneIndices.x),offset) * a_BoneWeights.x;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.y),offset) * a_BoneWeights.y;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.z),offset) * a_BoneWeights.z;\r\n\t\t\tskinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.w),offset) * a_BoneWeights.w;\r\n\t\t#else\r\n\t\t\tskinTransform =  u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\t#endif\r\n\t\tposition=skinTransform*a_Position;\r\n\t #else\r\n\t\tposition=a_Position;\r\n\t#endif\r\n\t#ifdef GPU_INSTANCE\r\n\t\tgl_Position = a_MvpMatrix * position;\r\n\t#else\r\n\t\tgl_Position = u_MvpMatrix * position;\r\n\t#endif\r\n\r\n\t#ifdef TILINGOFFSET\r\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\r\n\t#else\r\n\t\tv_Texcoord0=a_Texcoord0;\r\n\t#endif\r\n\r\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\r\n\t\tv_Color = a_Color;\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#ifdef MAINTEXTURE\r\n\tuniform sampler2D u_MainTexture;\r\n#endif\r\n\r\n#ifdef NORMALTEXTURE\r\n\tuniform sampler2D u_NormalTexture;\r\n#endif\r\n\r\nuniform vec4 u_HorizonColor;\r\n\r\nvarying vec3 v_Normal;\r\nvarying vec3 v_Tangent;\r\nvarying vec3 v_Binormal;\r\nvarying vec3 v_ViewDir;\r\nvarying vec2 v_Texcoord0;\r\nvarying vec2 v_Texcoord1;\r\n\r\n\r\n#include \"Lighting.glsl\"\r\n\r\n\r\n\r\nvec3 NormalSampleToWorldSpace(vec4 normalMapSample) {\r\n\tvec3 normalT;\r\n\tnormalT.x = 2.0 * normalMapSample.x - 1.0;\r\n\tnormalT.y = 1.0 - 2.0 * normalMapSample.y;\r\n\tnormalT.z = sqrt(1.0 - clamp(dot(normalT.xy, normalT.xy), 0.0, 1.0));\r\n\r\n\tvec3 bumpedNormal = normalize(normalT);\r\n\r\n\treturn bumpedNormal;\r\n}\r\n\r\n\r\nvoid main()\r\n{\r\n\tvec4 bumpColor1 = texture2D(u_NormalTexture, v_Texcoord0);\r\n\tvec4 bumpColor2 = texture2D(u_NormalTexture, v_Texcoord1);\r\n\r\n\tvec3 normal1 = NormalSampleToWorldSpace(bumpColor1);\r\n\tvec3 normal2 = NormalSampleToWorldSpace(bumpColor2);\r\n\t\r\n\tvec3 normal = normalize((normal1 + normal2) * 0.5);\r\n\tvec3 viewDir = normalize(v_ViewDir);\r\n\tfloat fresnel = dot(viewDir, normal);\r\n\t\r\n\tvec4 waterColor = texture2D(u_MainTexture, vec2(fresnel, fresnel));\r\n\t\r\n\tvec4 color;\r\n\tcolor.rgb = mix(waterColor.rgb, u_HorizonColor.rgb, vec3(waterColor.a));\r\n\tcolor.a = u_HorizonColor.a;\r\n\t\r\n\tgl_FragColor = color;\r\n}\r\n\r\n\r\n","#include \"Lighting.glsl\";\r\n\r\nattribute vec4 a_Position;\r\nattribute vec3 a_Normal;\r\nattribute vec4 a_Tangent0;\r\n\r\nuniform mat4 u_MvpMatrix;\r\nuniform mat4 u_WorldMat;\r\nuniform vec3 u_CameraPos;\r\nuniform float u_WaveScale;\r\nuniform vec4 u_WaveSpeed;\r\nuniform float u_Time;\r\n\r\nvarying vec3 v_Normal;\r\nvarying vec3 v_Tangent;\r\nvarying vec3 v_Binormal;\r\nvarying vec3 v_ViewDir;\r\nvarying vec2 v_Texcoord0;\r\nvarying vec2 v_Texcoord1;\r\n\r\nvoid main()\r\n{\r\n\tvec4 positionWorld = u_WorldMat * a_Position;\r\n\tvec4 position = u_MvpMatrix * a_Position;\r\n\t\r\n\tvec4 temp = vec4(positionWorld.x, positionWorld.z, positionWorld.x, positionWorld.z) * u_WaveScale + u_WaveSpeed * u_WaveScale * u_Time;\r\n\t\r\n\tv_Texcoord0 = temp.xy * vec2(0.4, 0.45);\r\n\tv_Texcoord1 = temp.wz;\r\n\t\r\n\tmat3 worldMat = mat3(u_WorldMat);\r\n\tv_Normal = worldMat * a_Normal;\r\n\tv_Tangent = worldMat * a_Tangent0.xyz;\r\n\tv_Binormal = cross(v_Normal, v_Tangent) * a_Tangent0.w;\r\n\t\r\n\tv_ViewDir = u_CameraPos - positionWorld.xyz;\r\n\tgl_Position = position;\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}","import { RenderState } from \"../core/material/RenderState\";\r\nimport { VertexTrail } from \"../core/trail/VertexTrail\";\r\nimport { VertexMesh } from \"../graphics/Vertex/VertexMesh\";\r\nimport { VertexShuriKenParticle } from \"../graphics/Vertex/VertexShuriKenParticle\";\r\nimport BlitScreenPS from \"./files/BlitScreen.fs\";\r\nimport BlitScreenVS from \"./files/BlitScreen.vs\";\r\nimport EffectPS from \"./files/Effect.fs\";\r\nimport EffectVS from \"./files/Effect.vs\";\r\nimport extendTerrainPS from \"./files/extendTerrain.fs\";\r\nimport extendTerrainVS from \"./files/extendTerrain.vs\";\r\nimport GlobalIllumination from \"./files/GlobalIllumination.glsl\";\r\nimport LightingGLSL from \"./files/Lighting.glsl\";\r\nimport ShadowSampleTentGLSL from \"./files/ShadowSampleTent.glsl\";\r\nimport linePS from \"./files/line.fs\";\r\nimport lineVS from \"./files/line.vs\";\r\nimport MeshBlinnPhongPS from \"./files/Mesh-BlinnPhong.fs\";\r\nimport MeshBlinnPhongVS from \"./files/Mesh-BlinnPhong.vs\";\r\nimport MeshBlinnPhongShadowCasterPS from \"./files/Mesh-BlinnPhongShadowCaster.fs\";\r\nimport MeshBlinnPhongShadowCasterVS from \"./files/Mesh-BlinnPhongShadowCaster.vs\";\r\nimport ParticleShuriKenPS from \"./files/ParticleShuriKen.fs\";\r\nimport ParticleShuriKenVS from \"./files/ParticleShuriKen.vs\";\r\nimport LayaPBRBRDF from \"./files/PBRLibs/LayaPBRBRDF.glsl\";\r\nimport PBRCore from \"./files/PBRLibs/PBRCore.glsl\";\r\nimport PBRVSInput from \"./files/PBRLibs/PBRVSInput.glsl\";\r\nimport PBRFSInput from \"./files/PBRLibs/PBRFSInput.glsl\";\r\nimport PBRVertex from \"./files/PBRLibs/PBRVertex.glsl\";\r\nimport BloomVS from \"./files/postProcess/Bloom.vs\";\r\nimport BloomDownsample13PS from \"./files/postProcess/BloomDownsample13.fs\";\r\nimport BloomDownsample4PS from \"./files/postProcess/BloomDownsample4.fs\";\r\nimport BloomPrefilter13PS from \"./files/postProcess/BloomPrefilter13.fs\";\r\nimport BloomPrefilter4PS from \"./files/postProcess/BloomPrefilter4.fs\";\r\nimport BloomUpsampleBoxPS from \"./files/postProcess/BloomUpsampleBox.fs\";\r\nimport BloomUpsampleTentPS from \"./files/postProcess/BloomUpsampleTent.fs\";\r\nimport ColorsGLSL from \"./files/postProcess/Colors.glsl\";\r\nimport CompositePS from \"./files/postProcess/Composite.fs\";\r\nimport CompositeVS from \"./files/postProcess/Composite.vs\";\r\nimport SamplingGLSL from \"./files/postProcess/Sampling.glsl\";\r\nimport StdLibGLSL from \"./files/postProcess/StdLib.glsl\";\r\nimport ShadowGLSL from \"./files/Shadow.glsl\";\r\nimport ShadowCasterVSGLSL from \"./files/ShadowCasterVS.glsl\";\r\nimport ShadowCasterFSGLSL from \"./files/ShadowCasterFS.glsl\";\r\nimport SkyBoxPS from \"./files/SkyBox.fs\";\r\nimport SkyBoxVS from \"./files/SkyBox.vs\";\r\nimport SkyBoxProceduralPS from \"./files/SkyBoxProcedural.fs\";\r\nimport SkyBoxProceduralVS from \"./files/SkyBoxProcedural.vs\";\r\nimport TrailPS from \"./files/Trail.fs\";\r\nimport TrailVS from \"./files/Trail.vs\";\r\nimport UnlitPS from \"./files/Unlit.fs\";\r\nimport UnlitVS from \"./files/Unlit.vs\";\r\nimport WaterPrimaryPS from \"./files/WaterPrimary.fs\";\r\nimport WaterPrimaryVS from \"./files/WaterPrimary.vs\";\r\nimport { Shader3D } from \"./Shader3D\";\r\nimport { ShaderPass } from \"./ShaderPass\";\r\nimport { SubShader } from \"./SubShader\";\r\n\r\n\r\n\r\n/**\r\n * @internal\r\n * <code>ShaderInit</code> 类用于初始化内置Shader。\r\n */\r\nexport class ShaderInit3D {\r\n\t/**\r\n\t * 创建一个 <code>ShaderInit</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tShader3D.SHADERDEFINE_LEGACYSINGALLIGHTING = Shader3D.getDefineByName(\"LEGACYSINGLELIGHTING\");\r\n\t\tShader3D.SHADERDEFINE_GRAPHICS_API_GLES2 = Shader3D.getDefineByName(\"GRAPHICS_API_GLES2\");\r\n\t\tShader3D.SHADERDEFINE_GRAPHICS_API_GLES3 = Shader3D.getDefineByName(\"GRAPHICS_API_GLES3\");\r\n\r\n\t\tShader3D.addInclude(\"Lighting.glsl\", LightingGLSL);\r\n\t\tShader3D.addInclude(\"ShadowSampleTent.glsl\", ShadowSampleTentGLSL);\r\n\t\tShader3D.addInclude(\"GlobalIllumination.glsl\", GlobalIllumination)\r\n\t\tShader3D.addInclude(\"Shadow.glsl\", ShadowGLSL);\r\n\t\tShader3D.addInclude(\"ShadowCasterVS.glsl\", ShadowCasterVSGLSL);\r\n\t\tShader3D.addInclude(\"ShadowCasterFS.glsl\", ShadowCasterFSGLSL);\r\n\t\tShader3D.addInclude(\"Colors.glsl\", ColorsGLSL);\r\n\t\tShader3D.addInclude(\"Sampling.glsl\", SamplingGLSL);\r\n\t\tShader3D.addInclude(\"StdLib.glsl\", StdLibGLSL);\r\n\t\tShader3D.addInclude(\"PBRVSInput.glsl\", PBRVSInput);\r\n\t\tShader3D.addInclude(\"PBRFSInput.glsl\", PBRFSInput);\r\n\t\tShader3D.addInclude(\"LayaPBRBRDF.glsl\", LayaPBRBRDF);\r\n\t\tShader3D.addInclude(\"PBRCore.glsl\", PBRCore);\r\n\t\tShader3D.addInclude(\"PBRVertex.glsl\", PBRVertex);\r\n\r\n\t\t//BLINNPHONG\r\n\t\tvar attributeMap: any = {\r\n\t\t\t'a_Position': VertexMesh.MESH_POSITION0,\r\n\t\t\t'a_Color': VertexMesh.MESH_COLOR0,\r\n\t\t\t'a_Normal': VertexMesh.MESH_NORMAL0,\r\n\t\t\t'a_Texcoord0': VertexMesh.MESH_TEXTURECOORDINATE0,\r\n\t\t\t'a_Texcoord1': VertexMesh.MESH_TEXTURECOORDINATE1,\r\n\t\t\t'a_BoneWeights': VertexMesh.MESH_BLENDWEIGHT0,\r\n\t\t\t'a_BoneIndices': VertexMesh.MESH_BLENDINDICES0,\r\n\t\t\t'a_Tangent0': VertexMesh.MESH_TANGENT0,\r\n\t\t\t'a_MvpMatrix': VertexMesh.MESH_MVPMATRIX_ROW0,\r\n\t\t\t'a_WorldMat': VertexMesh.MESH_WORLDMATRIX_ROW0\r\n\t\t};\r\n\t\tvar uniformMap: any = {\r\n\t\t\t'u_Bones': Shader3D.PERIOD_CUSTOM,\r\n\t\t\t'u_DiffuseTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_SpecularTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_NormalTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_AlphaTestValue': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_DiffuseColor': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_MaterialSpecular': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_Shininess': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_TilingOffset': Shader3D.PERIOD_MATERIAL,\r\n\r\n\t\t\t'u_WorldMat': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_MvpMatrix': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_LightmapScaleOffset': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_LightMap': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_LightMapDirection': Shader3D.PERIOD_SPRITE,\r\n\r\n\t\t\t'u_SimpleAnimatorTexture':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SimpleAnimatorParams':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SimpleAnimatorTextureSize':Shader3D.PERIOD_SPRITE,\r\n\r\n\t\t\t'u_CameraPos': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_Viewport': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_ProjectionParams': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_View': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_ViewProjection': Shader3D.PERIOD_CAMERA,\r\n\r\n\t\t\t'u_ReflectTexture': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogStart': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogRange': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogColor': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_DirationLightCount': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_LightBuffer': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_LightClusterBuffer': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientColor': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowBias': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowLightDirection': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowMap': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowParams': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowSplitSpheres': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowMatrices': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowMapSize': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotShadowMap':Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotViewProjectMatrix':Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowLightPosition':Shader3D.PERIOD_SCENE,\r\n\r\n\t\t\t//GI\r\n\t\t\t'u_AmbientSHAr': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHAg': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHAb': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHBr': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHBg': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHBb': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientSHC': Shader3D.PERIOD_SCENE,\r\n\t\t\t\r\n\r\n\t\t\t//legacy lighting\r\n\t\t\t'u_DirectionLight.color': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_DirectionLight.direction': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_PointLight.position': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_PointLight.range': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_PointLight.color': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.position': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.direction': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.range': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.spot': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.color': Shader3D.PERIOD_SCENE\r\n\t\t};\r\n\t\tvar stateMap: any = {\r\n\t\t\t's_Cull': Shader3D.RENDER_STATE_CULL,\r\n\t\t\t's_Blend': Shader3D.RENDER_STATE_BLEND,\r\n\t\t\t's_BlendSrc': Shader3D.RENDER_STATE_BLEND_SRC,\r\n\t\t\t's_BlendDst': Shader3D.RENDER_STATE_BLEND_DST,\r\n\t\t\t's_DepthTest': Shader3D.RENDER_STATE_DEPTH_TEST,\r\n\t\t\t's_DepthWrite': Shader3D.RENDER_STATE_DEPTH_WRITE\r\n\t\t}\r\n\t\tvar shader: Shader3D = Shader3D.add(\"BLINNPHONG\", null, null, true);\r\n\t\tvar subShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tsubShader.addShaderPass(MeshBlinnPhongVS, MeshBlinnPhongPS, stateMap, \"Forward\");\r\n\t\tvar shaderPass: ShaderPass = subShader.addShaderPass(MeshBlinnPhongShadowCasterVS, MeshBlinnPhongShadowCasterPS, stateMap, \"ShadowCaster\");\r\n\r\n\t\t//LineShader\r\n\t\tattributeMap = {\r\n\t\t\t'a_Position': VertexMesh.MESH_POSITION0,\r\n\t\t\t'a_Color': VertexMesh.MESH_COLOR0\r\n\t\t};\r\n\t\tuniformMap = {\r\n\t\t\t'u_MvpMatrix': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_Color': Shader3D.PERIOD_MATERIAL\r\n\t\t};\r\n\t\tstateMap = {\r\n\t\t\t's_Cull': Shader3D.RENDER_STATE_CULL,\r\n\t\t\t's_Blend': Shader3D.RENDER_STATE_BLEND,\r\n\t\t\t's_BlendSrc': Shader3D.RENDER_STATE_BLEND_SRC,\r\n\t\t\t's_BlendDst': Shader3D.RENDER_STATE_BLEND_DST,\r\n\t\t\t's_DepthTest': Shader3D.RENDER_STATE_DEPTH_TEST,\r\n\t\t\t's_DepthWrite': Shader3D.RENDER_STATE_DEPTH_WRITE\r\n\t\t}\r\n\t\tshader = Shader3D.add(\"LineShader\");\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tsubShader.addShaderPass(lineVS, linePS, stateMap);\r\n\r\n\t\t//unlit\r\n\t\tattributeMap = {\r\n\t\t\t'a_Position': VertexMesh.MESH_POSITION0,\r\n\t\t\t'a_Color': VertexMesh.MESH_COLOR0,\r\n\t\t\t'a_Texcoord0': VertexMesh.MESH_TEXTURECOORDINATE0,\r\n\t\t\t'a_BoneWeights': VertexMesh.MESH_BLENDWEIGHT0,\r\n\t\t\t'a_BoneIndices': VertexMesh.MESH_BLENDINDICES0,\r\n\t\t\t'a_MvpMatrix': VertexMesh.MESH_MVPMATRIX_ROW0\r\n\t\t};\r\n\t\tuniformMap = {\r\n\t\t\t'u_Bones': Shader3D.PERIOD_CUSTOM,\r\n\t\t\t'u_AlbedoTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_AlbedoColor': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_TilingOffset': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_AlphaTestValue': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_MvpMatrix': Shader3D.PERIOD_SPRITE,\r\n\r\n\t\t\t'u_SimpleAnimatorTexture':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SimpleAnimatorParams':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SimpleAnimatorTextureSize':Shader3D.PERIOD_SPRITE,\r\n\t\t\t\r\n\t\t\t'u_FogStart': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogRange': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogColor': Shader3D.PERIOD_SCENE\r\n\t\t};\r\n\t\tstateMap = {\r\n\t\t\t's_Cull': Shader3D.RENDER_STATE_CULL,\r\n\t\t\t's_Blend': Shader3D.RENDER_STATE_BLEND,\r\n\t\t\t's_BlendSrc': Shader3D.RENDER_STATE_BLEND_SRC,\r\n\t\t\t's_BlendDst': Shader3D.RENDER_STATE_BLEND_DST,\r\n\t\t\t's_DepthTest': Shader3D.RENDER_STATE_DEPTH_TEST,\r\n\t\t\t's_DepthWrite': Shader3D.RENDER_STATE_DEPTH_WRITE\r\n\t\t}\r\n\t\tshader = Shader3D.add(\"Unlit\", null, null, true);\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tsubShader.addShaderPass(UnlitVS, UnlitPS, stateMap);\r\n\r\n\t\t//meshEffect\r\n\t\tattributeMap = {\r\n\t\t\t'a_Position': VertexMesh.MESH_POSITION0,\r\n\t\t\t'a_Texcoord0': VertexMesh.MESH_TEXTURECOORDINATE0,\r\n\t\t\t'a_BoneWeights': VertexMesh.MESH_BLENDWEIGHT0,\r\n\t\t\t'a_BoneIndices': VertexMesh.MESH_BLENDINDICES0,\r\n\t\t\t'a_MvpMatrix': VertexMesh.MESH_MVPMATRIX_ROW0\r\n\t\t};\r\n\t\tuniformMap = {\r\n\t\t\t'u_Bones': Shader3D.PERIOD_CUSTOM,\r\n\t\t\t'u_AlbedoTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_AlbedoColor': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_TilingOffset': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_AlphaTestValue': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_MvpMatrix': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SimpleAnimatorTexture':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SimpleAnimatorParams':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SimpleAnimatorTextureSize':Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_FogStart': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogRange': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogColor': Shader3D.PERIOD_SCENE\r\n\t\t};\r\n\t\tstateMap = {\r\n\t\t\t's_Cull': Shader3D.RENDER_STATE_CULL,\r\n\t\t\t's_Blend': Shader3D.RENDER_STATE_BLEND,\r\n\t\t\t's_BlendSrc': Shader3D.RENDER_STATE_BLEND_SRC,\r\n\t\t\t's_BlendDst': Shader3D.RENDER_STATE_BLEND_DST,\r\n\t\t\t's_DepthTest': Shader3D.RENDER_STATE_DEPTH_TEST,\r\n\t\t\t's_DepthWrite': Shader3D.RENDER_STATE_DEPTH_WRITE\r\n\t\t}\r\n\t\tshader = Shader3D.add(\"Effect\", null, null, true);\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tsubShader.addShaderPass(EffectVS, EffectPS, stateMap);\r\n\r\n\t\t//ShurikenParticle\r\n\t\tattributeMap = {\r\n\t\t\t'a_CornerTextureCoordinate': VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0,\r\n\t\t\t'a_MeshPosition': VertexShuriKenParticle.PARTICLE_POSITION0,\r\n\t\t\t'a_MeshColor': VertexShuriKenParticle.PARTICLE_COLOR0,\r\n\t\t\t'a_MeshTextureCoordinate': VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0,\r\n\t\t\t'a_ShapePositionStartLifeTime': VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME,\r\n\t\t\t'a_DirectionTime': VertexShuriKenParticle.PARTICLE_DIRECTIONTIME,\r\n\t\t\t'a_StartColor': VertexShuriKenParticle.PARTICLE_STARTCOLOR0,\r\n\t\t\t'a_EndColor': VertexShuriKenParticle.PARTICLE_ENDCOLOR0,\r\n\t\t\t'a_StartSize': VertexShuriKenParticle.PARTICLE_STARTSIZE,\r\n\t\t\t'a_StartRotation0': VertexShuriKenParticle.PARTICLE_STARTROTATION,\r\n\t\t\t'a_StartSpeed': VertexShuriKenParticle.PARTICLE_STARTSPEED,\r\n\t\t\t'a_Random0': VertexShuriKenParticle.PARTICLE_RANDOM0,\r\n\t\t\t'a_Random1': VertexShuriKenParticle.PARTICLE_RANDOM1,\r\n\t\t\t'a_SimulationWorldPostion': VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION,\r\n\t\t\t'a_SimulationWorldRotation': VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION\r\n\t\t};\r\n\t\tuniformMap = {\r\n\t\t\t'u_Tintcolor': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_TilingOffset': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_texture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_WorldPosition': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_WorldRotation': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_PositionScale': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SizeScale': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ScalingMode': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_Gravity': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ThreeDStartRotation': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_StretchedBillboardLengthScale': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_StretchedBillboardSpeedScale': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SimulationSpace': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_CurrentTime': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ColorOverLifeGradientAlphas': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ColorOverLifeGradientColors': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_MaxColorOverLifeGradientAlphas': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_MaxColorOverLifeGradientColors': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_VOLVelocityConst': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_VOLVelocityGradientX': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_VOLVelocityGradientY': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_VOLVelocityGradientZ': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_VOLVelocityConstMax': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_VOLVelocityGradientMaxX': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_VOLVelocityGradientMaxY': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_VOLVelocityGradientMaxZ': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_VOLSpaceType': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SOLSizeGradient': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SOLSizeGradientX': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SOLSizeGradientY': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SOLSizeGradientZ': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SOLSizeGradientMax': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SOLSizeGradientMaxX': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SOLSizeGradientMaxY': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SOLSizeGradientMaxZ': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ROLAngularVelocityConst': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ROLAngularVelocityConstSeprarate': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ROLAngularVelocityGradient': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ROLAngularVelocityGradientX': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ROLAngularVelocityGradientY': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ROLAngularVelocityGradientZ': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ROLAngularVelocityConstMax': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ROLAngularVelocityConstMaxSeprarate': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ROLAngularVelocityGradientMax': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ROLAngularVelocityGradientMaxX': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ROLAngularVelocityGradientMaxY': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ROLAngularVelocityGradientMaxZ': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_ROLAngularVelocityGradientMaxW': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_TSACycles': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_TSASubUVLength': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_TSAGradientUVs': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_TSAMaxGradientUVs': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_CameraPos': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_CameraDirection': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_CameraUp': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_View': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_Projection': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_FogStart': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogRange': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogColor': Shader3D.PERIOD_SCENE\r\n\t\t};\r\n\t\tstateMap = {\r\n\t\t\t's_Cull': Shader3D.RENDER_STATE_CULL,\r\n\t\t\t's_Blend': Shader3D.RENDER_STATE_BLEND,\r\n\t\t\t's_BlendSrc': Shader3D.RENDER_STATE_BLEND_SRC,\r\n\t\t\t's_BlendDst': Shader3D.RENDER_STATE_BLEND_DST,\r\n\t\t\t's_DepthTest': Shader3D.RENDER_STATE_DEPTH_TEST,\r\n\t\t\t's_DepthWrite': Shader3D.RENDER_STATE_DEPTH_WRITE\r\n\t\t};\r\n\t\tshader = Shader3D.add(\"PARTICLESHURIKEN\");\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tsubShader.addShaderPass(ParticleShuriKenVS, ParticleShuriKenPS, stateMap);\r\n\r\n\t\t//SkyBox\r\n\t\tattributeMap = {\r\n\t\t\t'a_Position': VertexMesh.MESH_POSITION0\r\n\t\t};\r\n\t\tuniformMap = {\r\n\t\t\t'u_TintColor': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_Exposure': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_Rotation': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_CubeTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_ViewProjection': Shader3D.PERIOD_CAMERA\r\n\t\t};//TODO:优化\r\n\t\tshader = Shader3D.add(\"SkyBox\");\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tsubShader.addShaderPass(SkyBoxVS, SkyBoxPS);\r\n\r\n\t\t//SkyBoxProcedural\r\n\t\tattributeMap = {\r\n\t\t\t'a_Position': VertexMesh.MESH_POSITION0\r\n\t\t};\r\n\t\tuniformMap = {\r\n\t\t\t'u_SunSize': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_SunSizeConvergence': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_AtmosphereThickness': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_SkyTint': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_GroundTint': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_Exposure': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_ViewProjection': Shader3D.PERIOD_CAMERA,//TODO:优化\r\n\t\t\t'u_SunLight.direction': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SunLight.color': Shader3D.PERIOD_SCENE,\r\n\t\t};\r\n\t\tshader = Shader3D.add(\"SkyBoxProcedural\");\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tsubShader.addShaderPass(SkyBoxProceduralVS, SkyBoxProceduralPS);\r\n\r\n\t\t//extendTerrain的shader\r\n\t\tattributeMap = {\r\n\t\t\t'a_Position': VertexMesh.MESH_POSITION0,\r\n\t\t\t'a_Normal': VertexMesh.MESH_NORMAL0,\r\n\t\t\t'a_Texcoord0': VertexMesh.MESH_TEXTURECOORDINATE0\r\n\t\t};\r\n\t\tuniformMap = {\r\n\t\t\t'u_MvpMatrix': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_WorldMat': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_CameraPos': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_Viewport': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_ProjectionParams': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_View': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_LightmapScaleOffset': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_LightMap': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_SplatAlphaTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_DiffuseTexture1': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_DiffuseTexture2': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_DiffuseTexture3': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_DiffuseTexture4': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_DiffuseTexture5': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_DiffuseScaleOffset1': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_DiffuseScaleOffset2': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_DiffuseScaleOffset3': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_DiffuseScaleOffset4': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_DiffuseScaleOffset5': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_FogStart': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogRange': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_FogColor': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_DirationLightCount': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_LightBuffer': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_LightClusterBuffer': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_AmbientColor': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowMap': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_shadowMap2': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_shadowMap3': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowSplitSpheres': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowMatrices': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_ShadowMapSize': Shader3D.PERIOD_SCENE,\r\n\t\t\t//legacy lighting\r\n\t\t\t'u_DirectionLight.color': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_DirectionLight.direction': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_PointLight.position': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_PointLight.range': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_PointLight.color': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.position': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.direction': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.range': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.spot': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_SpotLight.color': Shader3D.PERIOD_SCENE\r\n\t\t};\r\n\t\tstateMap = {\r\n\t\t\t's_Cull': Shader3D.RENDER_STATE_CULL,\r\n\t\t\t's_Blend': Shader3D.RENDER_STATE_BLEND,\r\n\t\t\t's_BlendSrc': Shader3D.RENDER_STATE_BLEND_SRC,\r\n\t\t\t's_BlendDst': Shader3D.RENDER_STATE_BLEND_DST,\r\n\t\t\t's_DepthTest': Shader3D.RENDER_STATE_DEPTH_TEST,\r\n\t\t\t's_DepthWrite': Shader3D.RENDER_STATE_DEPTH_WRITE\r\n\t\t};\r\n\t\tshader = Shader3D.add(\"ExtendTerrain\");\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tsubShader.addShaderPass(extendTerrainVS, extendTerrainPS, stateMap);\r\n\r\n\t\t//Trail\r\n\t\tattributeMap = {\r\n\t\t\t'a_Position': VertexTrail.TRAIL_POSITION0,\r\n\t\t\t'a_OffsetVector': VertexTrail.TRAIL_OFFSETVECTOR,\r\n\t\t\t'a_Texcoord0X': VertexTrail.TRAIL_TEXTURECOORDINATE0X,\r\n\t\t\t'a_Texcoord0Y': VertexTrail.TRAIL_TEXTURECOORDINATE0Y,\r\n\t\t\t'a_BirthTime': VertexTrail.TRAIL_TIME0,\r\n\t\t\t'a_Color': VertexTrail.TRAIL_COLOR\r\n\t\t};\r\n\t\tuniformMap = {\r\n\t\t\t'u_MvpMatrix': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_View': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_Projection': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_TilingOffset': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_MainTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_MainColor': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_CurTime': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_LifeTime': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_WidthCurve': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_WidthCurveKeyLength': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_GradientColorkey': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_GradientAlphakey': Shader3D.PERIOD_SPRITE\r\n\t\t};\r\n\t\tstateMap = {\r\n\t\t\t's_Cull': Shader3D.RENDER_STATE_CULL,\r\n\t\t\t's_Blend': Shader3D.RENDER_STATE_BLEND,\r\n\t\t\t's_BlendSrc': Shader3D.RENDER_STATE_BLEND_SRC,\r\n\t\t\t's_BlendDst': Shader3D.RENDER_STATE_BLEND_DST,\r\n\t\t\t's_DepthTest': Shader3D.RENDER_STATE_DEPTH_TEST,\r\n\t\t\t's_DepthWrite': Shader3D.RENDER_STATE_DEPTH_WRITE\r\n\t\t};\r\n\t\tshader = Shader3D.add(\"Trail\");\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tsubShader.addShaderPass(TrailVS, TrailPS, stateMap);\r\n\r\n\t\t//WaterPrimary\r\n\t\tattributeMap = {\r\n\t\t\t'a_Position': VertexMesh.MESH_POSITION0,\r\n\t\t\t'a_Normal': VertexMesh.MESH_NORMAL0,\r\n\t\t\t'a_Tangent0': VertexMesh.MESH_TANGENT0\r\n\t\t};\r\n\t\tuniformMap = {\r\n\t\t\t'u_MvpMatrix': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_WorldMat': Shader3D.PERIOD_SPRITE,\r\n\t\t\t'u_CameraPos': Shader3D.PERIOD_CAMERA,\r\n\t\t\t'u_Time': Shader3D.PERIOD_SCENE,\r\n\t\t\t'u_MainTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_NormalTexture': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_HorizonColor': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_WaveScale': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_WaveSpeed': Shader3D.PERIOD_MATERIAL\r\n\t\t};\r\n\t\tshader = Shader3D.add(\"WaterPrimary\");\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tsubShader.addShaderPass(WaterPrimaryVS, WaterPrimaryPS);\r\n\r\n\r\n\t\t//BlitScreen\r\n\t\tattributeMap = {\r\n\t\t\t'a_PositionTexcoord': VertexMesh.MESH_POSITION0\r\n\t\t};\r\n\t\tuniformMap = {\r\n\t\t\t'u_MainTex': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_OffsetScale': Shader3D.PERIOD_MATERIAL\r\n\t\t};\r\n\t\tshader = Shader3D.add(\"BlitScreen\");\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tvar shaderPass: ShaderPass = subShader.addShaderPass(BlitScreenVS, BlitScreenPS);\r\n\t\tvar renderState: RenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\r\n\r\n\t\t//PostProcessBloom\r\n\t\tattributeMap = {\r\n\t\t\t'a_PositionTexcoord': VertexMesh.MESH_POSITION0\r\n\t\t};\r\n\t\tuniformMap = {\r\n\t\t\t'u_MainTex': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_BloomTex': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_AutoExposureTex': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_MainTex_TexelSize': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_SampleScale': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_Threshold': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_Params': Shader3D.PERIOD_MATERIAL\r\n\t\t};\r\n\t\tshader = Shader3D.add(\"PostProcessBloom\");\r\n\t\t//subShader0\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter13PS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader1\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter4PS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader2\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomDownsample13PS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader3\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomDownsample4PS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader4\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleTentPS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader5\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleBoxPS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\r\n\t\t//PostProcessComposite\r\n\t\tattributeMap = {\r\n\t\t\t'a_PositionTexcoord': VertexMesh.MESH_POSITION0\r\n\t\t};\r\n\t\tuniformMap = {\r\n\t\t\t'u_MainTex': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_BloomTex': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_AutoExposureTex': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_Bloom_DirtTileOffset': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_Bloom_DirtTex': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_BloomTex_TexelSize': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_Bloom_Settings': Shader3D.PERIOD_MATERIAL,\r\n\t\t\t'u_Bloom_Color': Shader3D.PERIOD_MATERIAL\r\n\t\t};\r\n\t\tshader = Shader3D.add(\"PostProcessComposite\");\r\n\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(CompositeVS, CompositePS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t}\r\n}\r\n\r\n","import { Vector3 } from \"../../math/Vector3\";\r\nimport { Scene3D } from \"../scene/Scene3D\";\r\nimport { LightSprite, LightType } from \"./LightSprite\";\r\nimport { ShadowCascadesMode } from \"./ShadowCascadesMode\";\r\n\r\n/**\r\n * <code>DirectionLight</code> 类用于创建平行光。\r\n */\r\nexport class DirectionLight extends LightSprite {\r\n\t/** @internal */\r\n\t_direction: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\t_shadowCascadesMode: ShadowCascadesMode = ShadowCascadesMode.NoCascades;\r\n\t/** @internal */\r\n\t_shadowTwoCascadeSplits: number = 1.0 / 3.0;\r\n\t/** @internal */\r\n\t_shadowFourCascadeSplits: Vector3 = new Vector3(1.0 / 15, 3.0 / 15.0, 7.0 / 15.0);\r\n\r\n\t/**\r\n\t * 阴影级联数量。\r\n\t */\r\n\tget shadowCascadesMode(): ShadowCascadesMode {\r\n\t\treturn this._shadowCascadesMode;\r\n\t}\r\n\r\n\tset shadowCascadesMode(value: ShadowCascadesMode) {\r\n\t\tthis._shadowCascadesMode = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 二级级联阴影分割比例。\r\n\t */\r\n\tget shadowTwoCascadeSplits(): number {\r\n\t\treturn this._shadowTwoCascadeSplits;\r\n\t}\r\n\r\n\tset shadowTwoCascadeSplits(value: number) {\r\n\t\tthis._shadowTwoCascadeSplits = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 四级级联阴影分割比例,X、Y、Z依次为其分割比例,Z必须大于Y,Y必须大于X。\r\n\t */\r\n\tget shadowFourCascadeSplits(): Vector3 {\r\n\t\treturn this._shadowFourCascadeSplits;\r\n\t}\r\n\r\n\tset shadowFourCascadeSplits(value: Vector3) {\r\n\t\tif (value.x > value.y || value.y > value.z || value.z > 1.0)\r\n\t\t\tthrow \"DiretionLight:Invalid value.\";\r\n\t\tvalue.cloneTo(this._shadowFourCascadeSplits);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>DirectionLight</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._lightType = LightType.Directional;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _addToLightQueue(): void {\r\n\t\t(<Scene3D>this._scene)._directionLights.add(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _removeFromLightQueue(): void {\r\n\t\t(<Scene3D>this._scene)._directionLights.remove(this);\r\n\t}\r\n\r\n\t//--- LT新增开始\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\t(data.shadowCascadesMode != undefined) && (this.shadowCascadesMode = data.shadowCascadesMode);\r\n\t}\r\n\t//--- LT新增结束\r\n}\r\n\r\n","import { Scene3D } from \"../scene/Scene3D\";\r\nimport { LightSprite, LightType } from \"./LightSprite\";\r\n\r\n/**\r\n * <code>PointLight</code> 类用于创建点光。\r\n */\r\nexport class PointLight extends LightSprite {\r\n\t/** @internal */\r\n\tprivate _range: number;\r\n\r\n\t/**\r\n\t * 点光的范围。\r\n\t * @return 点光的范围。\r\n\t */\r\n\tget range(): number {\r\n\t\treturn this._range;\r\n\t}\r\n\r\n\tset range(value: number) {\r\n\t\tthis._range = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>PointLight</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._range = 6.0;\r\n\t\tthis._lightType = LightType.Point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _addToLightQueue(): void {\r\n\t\t(<Scene3D>this._scene)._pointLights.add(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _removeFromLightQueue(): void {\r\n\t\t(<Scene3D>this._scene)._pointLights.remove(this);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tthis.range = data.range;\r\n\t}\r\n}\r\n\r\n","import { Vector3 } from \"../../math/Vector3\";\r\nimport { Scene3D } from \"../scene/Scene3D\";\r\nimport { LightSprite, LightType } from \"./LightSprite\";\r\n\r\n/**\r\n * <code>SpotLight</code> 类用于创建聚光。\r\n */\r\nexport class SpotLight extends LightSprite {\r\n\t/** @internal */\r\n\tprivate _spotAngle: number;\r\n\t/** @internal */\r\n\tprivate _range: number;\r\n\r\n\t/** @internal */\r\n\tpublic _direction: Vector3;\r\n\r\n\t/**\r\n \t* 聚光灯的锥形角度。\r\n \t*/\r\n\tget spotAngle(): number {\r\n\t\treturn this._spotAngle;\r\n\t}\r\n\r\n\tset spotAngle(value: number) {\r\n\t\tthis._spotAngle = Math.max(Math.min(value, 179), 0);\r\n\t}\r\n\r\n\t/**\r\n\t * 聚光的范围。\r\n\t */\r\n\tget range(): number {\r\n\t\treturn this._range;\r\n\t}\r\n\r\n\tset range(value: number) {\r\n\t\tthis._range = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SpotLight</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._spotAngle = 30.0;\r\n\t\tthis._range = 10.0;\r\n\t\tthis._direction = new Vector3();\r\n\t\tthis._lightType = LightType.Spot;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _addToLightQueue(): void {\r\n\t\t(<Scene3D>this._scene)._spotLights.add(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _removeFromLightQueue(): void {\r\n\t\t(<Scene3D>this._scene)._spotLights.remove(this);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tthis.range = data.range;\r\n\t\tthis.spotAngle = data.spotAngle;\r\n\t}\r\n}\r\n\r\n\r\n","import { Event } from \"../../events/Event\";\r\nimport { SkinnedMeshRenderer } from \"./SkinnedMeshRenderer\";\r\nimport { RenderContext3D } from \"./render/RenderContext3D\";\r\nimport { Transform3D } from \"./Transform3D\";\r\nimport { SubMeshRenderElement } from \"./render/SubMeshRenderElement\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { RenderElement } from \"./render/RenderElement\";\r\nimport { Animator } from \"../component/Animator\";\r\nimport { SkinnedMeshSprite3DShaderDeclaration } from \"./SkinnedMeshSprite3DShaderDeclaration\";\r\nimport { RenderableSprite3D } from \"./RenderableSprite3D\";\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { Texture2D } from \"../../resource/Texture2D\";\r\nimport { Vector4 } from \"../math/Vector4\";\r\nimport { Vector2 } from \"../math/Vector2\";\r\nimport { SubMeshInstanceBatch } from \"../graphics/SubMeshInstanceBatch\";\r\nimport { SingletonList } from \"../component/SingletonList\";\r\nimport { VertexBuffer3D } from \"../graphics/VertexBuffer3D\";\r\nimport { MeshSprite3DShaderDeclaration } from \"./MeshSprite3DShaderDeclaration\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\n\r\nexport class SimpleSkinnedMeshRenderer extends SkinnedMeshRenderer{\r\n    /**@internal 解决循环引用 */\r\n    static SIMPLE_SIMPLEANIMATORTEXTURE:number;\r\n    /**@internal 解决循环引用*/\r\n    static SIMPLE_SIMPLEANIMATORPARAMS:number;\r\n    /**@internal 解决循环引用*/\r\n    static SIMPLE_SIMPLEANIMATORTEXTURESIZE:number;\r\n    \r\n    /**@internal */\r\n    private _simpleAnimatorTexture:Texture2D;\r\n    /**@internal */\r\n    private _simpleAnimatorParams:Vector4;\r\n    /**@internal */\r\n    private _simpleAnimatorTextureSize:number;\r\n    /**@internal  x simpleAnimation offset,y simpleFrameOffset*/\r\n    private _simpleAnimatorOffset:Vector2;\r\n    /**@internal */\r\n    private _bonesNums:number;\r\n    \r\n    /**\r\n     * @internal\r\n\t * 设置动画帧贴图\r\n\t */\r\n    get simpleAnimatorTexture():Texture2D{\r\n        return this._simpleAnimatorTexture;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    set simpleAnimatorTexture(value:Texture2D){\r\n        this._simpleAnimatorTexture = value;\r\n        this._simpleAnimatorTextureSize = value.width;\r\n        this._shaderValues.setTexture(SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURE,value);\r\n        value._addReference();\r\n        this._shaderValues.setNumber(SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURESIZE,this._simpleAnimatorTextureSize);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 设置动画帧数参数\r\n     */\r\n    get simpleAnimatorOffset():Vector2{\r\n        return this._simpleAnimatorOffset;\r\n    }\r\n    \r\n    /**\r\n     * @internal\r\n     */\r\n    set simpleAnimatorOffset(value:Vector2){\r\n        value.cloneTo(this._simpleAnimatorOffset);\r\n    }\r\n\r\n    \r\n    /**\r\n\t * 创建一个 <code>SkinnedMeshRender</code> 实例。\r\n\t */\r\n\tconstructor(owner: RenderableSprite3D) {\r\n        super(owner);\r\n        this._simpleAnimatorParams = new Vector4();\r\n        this._simpleAnimatorOffset = new Vector2();\r\n        //TODO:\r\n        this._shaderValues.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_SIMPLEBONE);\r\n        this._shaderValues.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE);\r\n    }\r\n\r\n    /**\r\n\t * @internal\r\n\t */\r\n\tprivate _computeAnimatorParamsData(): void {\r\n        if(this._cacheMesh){\r\n            this._bonesNums = this.bones.length;\r\n            this._simpleAnimatorParams.x = this._simpleAnimatorOffset.x;\r\n            this._simpleAnimatorParams.y =Math.round(this._simpleAnimatorOffset.y)*this._bonesNums*4;\r\n        }\r\n    }\r\n\r\n    /**\r\n\t *@inheritDoc\r\n\t *@override\r\n\t *@internal\r\n\t */\r\n\t_createRenderElement(): SubMeshRenderElement {\r\n\t\treturn new SubMeshRenderElement();\r\n    }\r\n    /**\r\n\t * @internal\r\n\t */\r\n\t_setCacheAnimator(animator: Animator): void {\r\n\t\tthis._cacheAnimator = animator;\r\n\t\tthis._shaderValues.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_SIMPLEBONE);\r\n    }\r\n    \r\n    /**\r\n\t*@inheritDoc\r\n\t*@override\r\n\t*@internal\r\n\t*/\r\n\t_onMeshChange(value: Mesh): void {\r\n        super._onMeshChange(value);\r\n        this._cacheMesh = (<Mesh>value);\r\n        //TODO:\r\n    }\r\n    /**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_renderUpdate(context: RenderContext3D, transform: Transform3D): void {\r\n        var element: SubMeshRenderElement = <SubMeshRenderElement>context.renderElement;\r\n        switch (element.renderType) {\r\n            case RenderElement.RENDERTYPE_NORMAL:\r\n                if(this._cacheAnimator){\r\n                    var worldMat:Matrix4x4 = (this._cacheAnimator.owner as Sprite3D).transform.worldMatrix;\r\n                    this._shaderValues.setMatrix4x4(Sprite3D.WORLDMATRIX, worldMat);\r\n                }else{\r\n                    this._shaderValues.setMatrix4x4(Sprite3D.WORLDMATRIX, transform.worldMatrix);\r\n                }\r\n                this._computeAnimatorParamsData();\r\n                this._shaderValues.setVector(SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORPARAMS,this._simpleAnimatorParams);\r\n                break;\r\n            case RenderElement.RENDERTYPE_INSTANCEBATCH:\r\n                var worldMatrixData: Float32Array = SubMeshInstanceBatch.instance.instanceWorldMatrixData;\r\n\t\t\t\tvar insBatches: SingletonList<SubMeshRenderElement> = element.instanceBatchElementList;\r\n\t\t\t\tvar elements: SubMeshRenderElement[] = insBatches.elements;\r\n                var count: number = insBatches.length;\r\n                if(this._cacheAnimator){\r\n                    for (var i: number = 0; i < count; i++){\r\n                        var mat:Matrix4x4 = (((elements[i].render) as SimpleSkinnedMeshRenderer)._cacheAnimator.owner as Sprite3D)._transform.worldMatrix;\r\n                        worldMatrixData.set(mat.elements, i * 16);\r\n                    }\r\n                }\r\n                else{\r\n                    for (var i: number = 0; i < count; i++)\r\n                        worldMatrixData.set(elements[i]._transform.worldMatrix.elements, i * 16);\r\n                }\r\n\t\t\t\tvar worldBuffer: VertexBuffer3D = SubMeshInstanceBatch.instance.instanceWorldMatrixBuffer;\r\n\t\t\t\tworldBuffer.orphanStorage();// prphan the memory block to avoid sync problem.can improve performance in HUAWEI P10.   TODO:\"WebGL's bufferData(target, size, usage) call is guaranteed to initialize the buffer to 0\"\r\n\t\t\t\tworldBuffer.setData(worldMatrixData.buffer, 0, 0, count * 16 * 4);\r\n                this._shaderValues.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE);\r\n                //TODO:new Instance\r\n               \r\n                var simpleAnimatorData:Float32Array = SubMeshInstanceBatch.instance.instanceSimpleAnimatorData;\r\n                if(this._cacheAnimator){\r\n                    for (var i: number = 0; i < count; i++){\r\n                        var render:SimpleSkinnedMeshRenderer = (elements[i].render) as SimpleSkinnedMeshRenderer;\r\n                        render._computeAnimatorParamsData();\r\n                        var simpleAnimatorParams:Vector4 = render._simpleAnimatorParams;\r\n                        var offset:number = i*4;\r\n                        simpleAnimatorData[offset] = simpleAnimatorParams.x;\r\n                        simpleAnimatorData[offset+1] = simpleAnimatorParams.y;\r\n                    }\r\n                }\r\n                else{\r\n                    for (var i: number = 0; i < count; i++){\r\n                        simpleAnimatorData[offset] =0;\r\n                        simpleAnimatorData[offset+1] = 0;\r\n                    }\r\n                }\r\n                var simpleAnimatorBuffer:VertexBuffer3D = SubMeshInstanceBatch.instance.instanceSimpleAnimatorBuffer;\r\n                simpleAnimatorBuffer.orphanStorage();\r\n                simpleAnimatorBuffer.setData(simpleAnimatorData.buffer, 0, 0, count * 4 * 4);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {\r\n        var projectionView: Matrix4x4 = context.projectionViewMatrix;\r\n        if (projectionView) {\r\n            var element: SubMeshRenderElement = (<SubMeshRenderElement>context.renderElement);\r\n            switch (element.renderType) {\r\n                case RenderElement.RENDERTYPE_NORMAL:\r\n                    if(this._cacheAnimator){\r\n                        var mat:Matrix4x4 = (this._cacheAnimator.owner as Sprite3D)._transform.worldMatrix;\r\n                        Matrix4x4.multiply(projectionView, mat, this._projectionViewWorldMatrix);\r\n                        this._shaderValues.setMatrix4x4(Sprite3D.MVPMATRIX, this._projectionViewWorldMatrix);\r\n                    }else{\r\n                        Matrix4x4.multiply(projectionView, transform.worldMatrix, this._projectionViewWorldMatrix);\r\n\t\t\t            this._shaderValues.setMatrix4x4(Sprite3D.MVPMATRIX, this._projectionViewWorldMatrix);\r\n                    }\r\n                    break;\r\n                case RenderElement.RENDERTYPE_INSTANCEBATCH:\r\n                    var mvpMatrixData: Float32Array = SubMeshInstanceBatch.instance.instanceMVPMatrixData;\r\n\t\t\t\t\tvar insBatches: SingletonList<SubMeshRenderElement> = element.instanceBatchElementList;\r\n\t\t\t\t\tvar elements: SubMeshRenderElement[] = insBatches.elements;\r\n                    var count: number = insBatches.length;\r\n                    if(this._cacheAnimator){\r\n                        for (var i: number = 0; i < count; i++) {\r\n                            var worldMat: Matrix4x4 = (((elements[i].render) as SimpleSkinnedMeshRenderer)._cacheAnimator.owner as Sprite3D)._transform.worldMatrix;\r\n                            Utils3D.mulMatrixByArray(projectionView.elements, 0, worldMat.elements, 0, mvpMatrixData, i * 16);\r\n                        }\r\n                    }else{\r\n                        for (var i: number = 0; i < count; i++) {\r\n                            var worldMat: Matrix4x4 = elements[i]._transform.worldMatrix;\r\n                            Utils3D.mulMatrixByArray(projectionView.elements, 0, worldMat.elements, 0, mvpMatrixData, i * 16);\r\n                        }\r\n                    }\r\n\t\t\t\t\r\n\t\t\t\t\tvar mvpBuffer: VertexBuffer3D = SubMeshInstanceBatch.instance.instanceMVPMatrixBuffer;\r\n\t\t\t\t\tmvpBuffer.orphanStorage();// prphan the memory block to avoid sync problem.can improve performance in HUAWEI P10.  TODO:\"WebGL's bufferData(target, size, usage) call is guaranteed to initialize the buffer to 0\"\r\n\t\t\t\t\tmvpBuffer.setData(mvpMatrixData.buffer, 0, 0, count * 16 * 4);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除节点\r\n     */\r\n    _destroy():void{\r\n        if (this._cacheRootBone)\r\n        (!this._cacheRootBone.destroyed) && (this._cacheRootBone.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));\r\n        (this._simpleAnimatorTexture)&&this._simpleAnimatorTexture._removeReference();\r\n        this._simpleAnimatorTexture = null;\r\n       \r\n        \r\n    }\r\n\r\n}","import { Node } from \"../../display/Node\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Animator } from \"../component/Animator\";\r\nimport { Vector3 } from \"../math/Vector3\";\r\nimport { Vector4 } from \"../math/Vector4\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { Shader3D } from \"../shader/Shader3D\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { Bounds } from \"./Bounds\";\r\nimport { MeshFilter } from \"./MeshFilter\";\r\nimport { MeshSprite3D } from \"./MeshSprite3D\";\r\nimport { RenderableSprite3D } from \"./RenderableSprite3D\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { Material } from \"./material/Material\";\r\nimport { SimpleSkinnedMeshRenderer } from \"./SimpleSkinnedMeshRenderer\";\r\nimport { Texture2D } from \"../../resource/Texture2D\";\r\n\r\n\r\n\r\n/**\r\n * <code>SkinnedMeshSprite3D</code> 类用于创建网格。\r\n */\r\nexport class SimpleSkinnedMeshSprite3D extends RenderableSprite3D {\r\n\t/**@internal */\r\n\tstatic _tempArray0: any[] = [];\r\n\r\n\t/** */\r\n\tstatic SIMPLE_SIMPLEANIMATORTEXTURE:number = Shader3D.propertyNameToID(\"u_SimpleAnimatorTexture\");\r\n\tstatic SIMPLE_SIMPLEANIMATORPARAMS:number = Shader3D.propertyNameToID(\"u_SimpleAnimatorParams\");\r\n\tstatic SIMPLE_SIMPLEANIMATORTEXTURESIZE:number = Shader3D.propertyNameToID(\"u_SimpleAnimatorTextureSize\");\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tSimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORPARAMS = SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS;\r\n\t\tSimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURE = SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE;\r\n\t\tSimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURESIZE = SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE;\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _meshFilter: MeshFilter;\r\n\r\n\t/**\r\n\t * 网格过滤器。\r\n\t */\r\n\tget meshFilter(): MeshFilter {\r\n\t\treturn this._meshFilter;\r\n\t}\r\n\r\n\t/**\r\n\t * 网格渲染器。\r\n\t */\r\n\tget simpleSkinnedMeshRenderer(): SimpleSkinnedMeshRenderer {\r\n\t\treturn (<SimpleSkinnedMeshRenderer>this._render);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>MeshSprite3D</code> 实例。\r\n\t * @param mesh 网格,同时会加载网格所用默认材质。\r\n\t * @param name 名字。\r\n\t */\r\n\tconstructor(mesh: Mesh = null, name: string = null) {\r\n\t\tsuper(name);\r\n\t\tthis._meshFilter = new MeshFilter(this);\r\n\t\tthis._render = new SimpleSkinnedMeshRenderer(this);\r\n\t\t(mesh) && (this._meshFilter.sharedMesh = mesh);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tvar render: SimpleSkinnedMeshRenderer = this.simpleSkinnedMeshRenderer;\r\n\t\tvar lightmapIndex: any = data.lightmapIndex;\r\n\t\t(lightmapIndex != null) && (render.lightmapIndex = lightmapIndex);\r\n\t\tvar lightmapScaleOffsetArray: any[] = data.lightmapScaleOffset;\r\n\t\t(lightmapScaleOffsetArray) && (render.lightmapScaleOffset = new Vector4(lightmapScaleOffsetArray[0], lightmapScaleOffsetArray[1], lightmapScaleOffsetArray[2], lightmapScaleOffsetArray[3]));\r\n\t\t(data.enableRender != undefined) && (render.enable = data.enableRender);\r\n\t\t(data.receiveShadows != undefined) && (render.receiveShadow = data.receiveShadows);\r\n\t\t(data.castShadow != undefined) && (render.castShadow = data.castShadow);\r\n\t\tvar meshPath: string;\r\n\t\tmeshPath = data.meshPath;\r\n\t\tif (meshPath) {\r\n\t\t\tvar mesh: Mesh = Loader.getRes(meshPath);//加载失败mesh为空\r\n\t\t\t(mesh) && (this.meshFilter.sharedMesh = mesh);\r\n\t\t}\r\n\r\n\t\tvar materials: any[] = data.materials;\r\n\t\tif (materials) {\r\n\t\t\tvar sharedMaterials: Material[] = render.sharedMaterials;\r\n\t\t\tvar materialCount: number = materials.length;\r\n\t\t\tsharedMaterials.length = materialCount;\r\n\t\t\tfor (var i: number = 0; i < materialCount; i++) {\r\n\t\t\t\tsharedMaterials[i] = Loader.getRes(materials[i].path);\r\n\t\t\t}\r\n\t\t\trender.sharedMaterials = sharedMaterials;\r\n\t\t}\r\n\r\n\t\tvar boundBox: any = data.boundBox;\r\n\t\tvar min: any[] = boundBox.min;\r\n\t\tvar max: any[] = boundBox.max;\r\n\t\trender.localBounds.setMin(new Vector3(min[0], min[1], min[2]));\r\n\t\trender.localBounds.setMax(new Vector3(max[0], max[1], max[2]));\r\n\r\n\t\tif (spriteMap) {\r\n\t\t\tvar rootBoneData: number = data.rootBone;\r\n\t\t\trender.rootBone = spriteMap[rootBoneData];\r\n\t\t\tvar bonesData: any[] = data.bones;\r\n\t\t\tvar n: number;\r\n\t\t\tfor (i = 0, n = bonesData.length; i < n; i++)\r\n\t\t\t\trender.bones.push(spriteMap[bonesData[i]]);\r\n\t\t} else {//[兼容代码]\r\n\t\t\t(data.rootBone) && (render._setRootBone(data.rootBone));//[兼容性]\r\n\t\t}\r\n\t\tvar animatorTexture:string = data.animatorTexture;\r\n\t\tif(animatorTexture)\r\n\t\t{\r\n\t\t\tvar animatortexture:Texture2D = Loader.getRes(animatorTexture);\r\n\t\t\t(render as SimpleSkinnedMeshRenderer).simpleAnimatorTexture = animatortexture;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _changeHierarchyAnimator(animator: Animator): void {\r\n\t\tsuper._changeHierarchyAnimator(animator);\r\n\t\tthis.simpleSkinnedMeshRenderer._setCacheAnimator(animator);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(destObject: any, srcRoot: Node, dstRoot: Node): void {\r\n\t\tvar meshSprite3D: MeshSprite3D = (<MeshSprite3D>destObject);\r\n\t\tmeshSprite3D.meshFilter.sharedMesh = this.meshFilter.sharedMesh;\r\n\t\tvar meshRender: SimpleSkinnedMeshRenderer = (<SimpleSkinnedMeshRenderer>this._render);\r\n\t\tvar destMeshRender: SimpleSkinnedMeshRenderer = (<SimpleSkinnedMeshRenderer>meshSprite3D._render);\r\n\t\tdestMeshRender.enable = meshRender.enable;\r\n\t\tdestMeshRender.sharedMaterials = meshRender.sharedMaterials;\r\n\t\tdestMeshRender.castShadow = meshRender.castShadow;\r\n\t\tvar lightmapScaleOffset: Vector4 = meshRender.lightmapScaleOffset;\r\n\t\tlightmapScaleOffset && (destMeshRender.lightmapScaleOffset = lightmapScaleOffset.clone());\r\n\t\tdestMeshRender.receiveShadow = meshRender.receiveShadow;\r\n\t\tdestMeshRender.sortingFudge = meshRender.sortingFudge;\r\n\t\tdestMeshRender._rootBone = meshRender._rootBone;\r\n\r\n\t\tvar bones: Sprite3D[] = meshRender.bones;\r\n\t\tvar destBones: Sprite3D[] = destMeshRender.bones;\r\n\t\tvar bonesCount: number = bones.length;\r\n\t\tdestBones.length = bonesCount;\r\n\r\n\t\tvar rootBone: Sprite3D = meshRender.rootBone;\r\n\t\tif (rootBone) {\r\n\t\t\tvar pathes: any[] = Utils3D._getHierarchyPath(srcRoot, rootBone, SimpleSkinnedMeshSprite3D._tempArray0);\r\n\t\t\tif (pathes)\r\n\t\t\t\tdestMeshRender.rootBone = (<Sprite3D>Utils3D._getNodeByHierarchyPath(dstRoot, pathes));\r\n\t\t\telse\r\n\t\t\t\tdestMeshRender.rootBone = rootBone;\r\n\t\t}\r\n\r\n\t\tfor (var i: number = 0; i < bones.length; i++) {\r\n\t\t\tpathes = Utils3D._getHierarchyPath(srcRoot, bones[i], SimpleSkinnedMeshSprite3D._tempArray0);\r\n\t\t\tif (pathes)\r\n\t\t\t\tdestBones[i] = (<Sprite3D>Utils3D._getNodeByHierarchyPath(dstRoot, pathes));\r\n\t\t\telse\r\n\t\t\t\tdestBones[i] = bones[i];\r\n\t\t}\r\n\r\n\t\tvar lbb: Bounds = meshRender.localBounds;\r\n\t\t(lbb) && (lbb.cloneTo(destMeshRender.localBounds));\r\n\t\t\r\n\t\tdestMeshRender.simpleAnimatorTexture = meshRender.simpleAnimatorTexture;\r\n\r\n\t\tsuper._cloneTo(destObject, srcRoot, dstRoot);//父类函数在最后,组件应该最后赋值，否则获取材质默认值等相关函数会有问题\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(destroyChild: boolean = true): void {\r\n\t\tif (this.destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy(destroyChild);\r\n\t\tthis._meshFilter.destroy();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new SimpleSkinnedMeshSprite3D();\r\n\t}\r\n\r\n}\r\n\r\n","import { Component } from \"../../components/Component\";\r\nimport { Node } from \"../../display/Node\";\r\nimport { Browser } from \"../../utils/Browser\";\r\nimport { Camera } from \"../core/Camera\";\r\nimport { DirectionLight } from \"../core/light/DirectionLight\";\r\nimport { PointLight } from \"../core/light/PointLight\";\r\nimport { SpotLight } from \"../core/light/SpotLight\";\r\nimport { MeshSprite3D } from \"../core/MeshSprite3D\";\r\nimport { ShuriKenParticle3D } from \"../core/particleShuriKen/ShuriKenParticle3D\";\r\nimport { RenderableSprite3D } from \"../core/RenderableSprite3D\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { SkinnedMeshSprite3D } from \"../core/SkinnedMeshSprite3D\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\nimport { TrailSprite3D } from \"../core/trail/TrailSprite3D\";\r\nimport { StaticBatchManager } from \"../graphics/StaticBatchManager\";\r\nimport { ClassUtils } from \"../../utils/ClassUtils\";\r\nimport { SimpleSkinnedMeshSprite3D } from \"../core/SimpleSkinnedMeshSprite3D\";\r\nimport { ReflectionProbe } from \"../core/reflectionProbe/ReflectionProbe\";\r\n\r\n\r\n\r\n/**\r\n * <code>Utils3D</code> 类用于创建3D工具。\r\n */\r\nexport class Scene3DUtils {\r\n\tprivate static _createSprite3DInstance(nodeData: any, spriteMap: any, outBatchSprites: RenderableSprite3D[]): Node {\r\n\t\tvar node: Node;\r\n\t\tswitch (nodeData.type) {\r\n\t\t\tcase \"Scene3D\":\r\n\t\t\t\tnode = new Scene3D();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Sprite3D\":\r\n\t\t\t\tnode = new Sprite3D();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"MeshSprite3D\":\r\n\t\t\t\tnode = new MeshSprite3D();\r\n\t\t\t\t(outBatchSprites && nodeData.props.isStatic) && (outBatchSprites.push(<MeshSprite3D>node));\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SkinnedMeshSprite3D\":\r\n\t\t\t\tnode = new SkinnedMeshSprite3D();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SimpleSkinnedMeshSprite3D\":\r\n\t\t\t\tnode = new SimpleSkinnedMeshSprite3D();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ShuriKenParticle3D\":\r\n\t\t\t\tnode = new ShuriKenParticle3D();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Camera\":\r\n\t\t\t\tnode = new Camera();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"DirectionLight\":\r\n\t\t\t\tnode = new DirectionLight();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PointLight\":\r\n\t\t\t\tnode = new PointLight();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SpotLight\":\r\n\t\t\t\tnode = new SpotLight();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"TrailSprite3D\":\r\n\t\t\t\tnode = new TrailSprite3D();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ReflectionProbe\":\r\n\t\t\t\tnode = new ReflectionProbe();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error(\"未定义的类型\", nodeData);\r\n\t\t\t\tthrow new Error(\"Utils3D:unidentified class type in (.lh) file.\");\r\n\t\t}\r\n\r\n\t\tvar childData: any[] = nodeData.child;\r\n\t\tif (childData) {\r\n\t\t\tfor (var i: number = 0, n: number = childData.length; i < n; i++) {\r\n\t\t\t\tvar child: any = Scene3DUtils._createSprite3DInstance(childData[i], spriteMap, outBatchSprites)\r\n\t\t\t\tnode.addChild(child);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tspriteMap[nodeData.instanceID] = node;\r\n\t\treturn node;\r\n\t}\r\n\r\n\tprivate static _createComponentInstance(nodeData: any, spriteMap: any,interactMap:any): void {\r\n\t\tvar node: Node = spriteMap[nodeData.instanceID];\r\n\t\tnode._parse(nodeData.props, spriteMap);\r\n\r\n\t\tvar childData: any[] = nodeData.child;\r\n\t\tif (childData) {\r\n\t\t\tfor (var i: number = 0, n: number = childData.length; i < n; i++)\r\n\t\t\t\tScene3DUtils._createComponentInstance(childData[i], spriteMap, interactMap)\r\n\t\t}\r\n\r\n\t\tvar componentsData: any[] = nodeData.components;\r\n\t\tif (componentsData) {\r\n\t\t\tfor (var j: number = 0, m: number = componentsData.length; j < m; j++) {\r\n\t\t\t\tvar data: any = componentsData[j];\r\n\t\t\t\tvar clas: any = ClassUtils.getRegClass(data.type);\r\n\t\t\t\tif (clas) {\r\n\t\t\t\t\tvar component: Component = node.addComponent(clas);\r\n\t\t\t\t\tcomponent._parse(data,interactMap);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn(\"Unkown component type.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _createNodeByJson02(nodeData: any, outBatchSprites: RenderableSprite3D[]): Node {\r\n\t\tvar spriteMap: any = {};\r\n\t\tvar interactMap:any = {component:[],data:[]};\r\n\t\tvar node: Node = Scene3DUtils._createSprite3DInstance(nodeData, spriteMap, outBatchSprites);\r\n\t\tScene3DUtils._createComponentInstance(nodeData, spriteMap,interactMap);\r\n\t\tScene3DUtils._createInteractInstance(interactMap,spriteMap);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _createInteractInstance(interatMap:any,spriteMap:any){\r\n\t\tvar components:Component[] = interatMap.component;\r\n\t\tvar data = interatMap.data;\r\n\t\tfor(var i = 0,n = components.length;i<n;i++){\r\n\t\t\tcomponents[i]._parseInteractive(data[i],spriteMap);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tstatic _parse(data: any, propertyParams: any = null, constructParams: any[] = null): Sprite3D {\r\n\t\tvar json: any = data.data;\r\n\t\tvar outBatchSprits: RenderableSprite3D[] = [];\r\n\t\tvar sprite: Sprite3D;\r\n\t\tswitch (data.version) {\r\n\t\t\tcase \"LAYAHIERARCHY:02\":\r\n\t\t\t\tsprite = (<Sprite3D>Scene3DUtils._createNodeByJson02(json, outBatchSprits));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tsprite = (<Sprite3D>Scene3DUtils._createNodeByJson(json, outBatchSprits));\r\n\t\t}\r\n\r\n\t\tStaticBatchManager.combine(sprite, outBatchSprits);\r\n\t\treturn sprite;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tstatic _parseScene(data: any, propertyParams: any = null, constructParams: any[] = null): Scene3D {\r\n\t\tvar json: any = data.data;\r\n\t\tvar outBatchSprits: RenderableSprite3D[] = [];\r\n\t\tvar scene: Scene3D;\r\n\t\tswitch (data.version) {\r\n\t\t\tcase \"LAYASCENE3D:02\":\r\n\t\t\t\tscene = <Scene3D>Scene3DUtils._createNodeByJson02(json, outBatchSprits);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tscene = <Scene3D>Scene3DUtils._createNodeByJson(json, outBatchSprits);\r\n\t\t}\r\n\r\n\t\tStaticBatchManager.combine(null, outBatchSprits);\r\n\t\treturn scene;\r\n\t}\r\n\r\n\t//--------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _createNodeByJson(nodeData: any, outBatchSprites: RenderableSprite3D[]): Node {//兼容代码\r\n\t\tvar node: Node;\r\n\t\tswitch (nodeData.type) {\r\n\t\t\tcase \"Scene3D\":\r\n\t\t\t\tnode = new Scene3D();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Sprite3D\":\r\n\t\t\t\tnode = new Sprite3D();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"MeshSprite3D\":\r\n\t\t\t\tnode = new MeshSprite3D();\r\n\t\t\t\t(outBatchSprites && nodeData.props.isStatic) && (outBatchSprites.push(<MeshSprite3D>node));\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SkinnedMeshSprite3D\":\r\n\t\t\t\tnode = new SkinnedMeshSprite3D();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ShuriKenParticle3D\":\r\n\t\t\t\tnode = new ShuriKenParticle3D();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Camera\":\r\n\t\t\t\tnode = new Camera();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"DirectionLight\":\r\n\t\t\t\tnode = new DirectionLight();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PointLight\":\r\n\t\t\t\tnode = new PointLight();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SpotLight\":\r\n\t\t\t\tnode = new SpotLight();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"TrailSprite3D\":\r\n\t\t\t\tnode = new TrailSprite3D();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Utils3D:unidentified class type in (.lh) file.\");\r\n\t\t}\r\n\r\n\t\tvar childData: any[] = nodeData.child;\r\n\t\tif (childData) {\r\n\t\t\tfor (var i: number = 0, n: number = childData.length; i < n; i++) {\r\n\t\t\t\tvar child: any = Scene3DUtils._createNodeByJson(childData[i], outBatchSprites)\r\n\t\t\t\tnode.addChild(child);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar componentsData: any[] = nodeData.components;\r\n\t\tif (componentsData) {\r\n\t\t\tfor (var j: number = 0, m: number = componentsData.length; j < m; j++) {\r\n\t\t\t\tvar data: any = componentsData[j];\r\n\t\t\t\tvar clas: any = ClassUtils.getRegClass(data.type);\r\n\t\t\t\tif (clas) {\r\n\t\t\t\t\tvar component: Component = node.addComponent(clas);\r\n\t\t\t\t\tcomponent._parse(data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn(\"Unkown component type.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tnode._parse(nodeData.props, null);\r\n\t\treturn node;\r\n\t}\r\n}","\r\nimport { IndexBuffer3D } from \"../graphics/IndexBuffer3D\"\r\nimport { VertexMesh } from \"../graphics/Vertex/VertexMesh\"\r\nimport { VertexBuffer3D } from \"../graphics/VertexBuffer3D\"\r\nimport { VertexDeclaration } from \"../graphics/VertexDeclaration\"\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\"\r\nimport { Mesh, skinnedMatrixCache } from \"../resource/models/Mesh\"\r\nimport { SubMesh } from \"../resource/models/SubMesh\"\r\nimport { Byte } from \"../../utils/Byte\"\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { IndexFormat } from \"../graphics/IndexFormat\"\r\n\r\n/**\r\n * @internal\r\n * <code>LoadModel</code> 类用于模型加载。\r\n */\r\nexport class LoadModelV04 {\r\n\r\n\t/**@internal */\r\n\tprivate static _BLOCK: any = { count: 0 };\r\n\t/**@internal */\r\n\tprivate static _DATA: any = { offset: 0, size: 0 };\r\n\r\n\t/**@internal */\r\n\tprivate static _strings: any[] = [];\r\n\t/**@internal */\r\n\tprivate static _readData: Byte;\r\n\t/**@internal */\r\n\tprivate static _version: string;\r\n\t/**@internal */\r\n\tprivate static _mesh: Mesh;\r\n\t/**@internal */\r\n\tprivate static _subMeshes: SubMesh[];\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic parse(readData: Byte, version: string, mesh: Mesh, subMeshes: SubMesh[]): void {\r\n\t\tLoadModelV04._mesh = mesh;\r\n\t\tLoadModelV04._subMeshes = subMeshes;\r\n\t\tLoadModelV04._version = version;\r\n\t\tLoadModelV04._readData = readData;\r\n\t\tLoadModelV04.READ_DATA();\r\n\t\tLoadModelV04.READ_BLOCK();\r\n\t\tLoadModelV04.READ_STRINGS();\r\n\t\tfor (var i: number = 0, n: number = LoadModelV04._BLOCK.count; i < n; i++) {\r\n\t\t\tLoadModelV04._readData.pos = LoadModelV04._BLOCK.blockStarts[i];\r\n\t\t\tvar index: number = LoadModelV04._readData.getUint16();\r\n\t\t\tvar blockName: string = LoadModelV04._strings[index];\r\n\t\t\tvar fn: Function = LoadModelV04[\"READ_\" + blockName];\r\n\t\t\tif (fn == null)\r\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\r\n\t\t\telse\r\n\t\t\t\tfn.call(null);\r\n\t\t}\r\n\t\tLoadModelV04._strings.length = 0;\r\n\t\tLoadModelV04._readData = null;\r\n\t\tLoadModelV04._version = null;\r\n\t\tLoadModelV04._mesh = null;\r\n\t\tLoadModelV04._subMeshes = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _readString(): string {\r\n\t\treturn LoadModelV04._strings[LoadModelV04._readData.getUint16()];\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_DATA(): void {\r\n\t\tLoadModelV04._DATA.offset = LoadModelV04._readData.getUint32();\r\n\t\tLoadModelV04._DATA.size = LoadModelV04._readData.getUint32();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_BLOCK(): void {\r\n\t\tvar count: number = LoadModelV04._BLOCK.count = LoadModelV04._readData.getUint16();\r\n\t\tvar blockStarts: any[] = LoadModelV04._BLOCK.blockStarts = [];\r\n\t\tvar blockLengths: any[] = LoadModelV04._BLOCK.blockLengths = [];\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tblockStarts.push(LoadModelV04._readData.getUint32());\r\n\t\t\tblockLengths.push(LoadModelV04._readData.getUint32());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_STRINGS(): void {\r\n\t\tvar offset: number = LoadModelV04._readData.getUint32();\r\n\t\tvar count: number = LoadModelV04._readData.getUint16();\r\n\t\tvar prePos: number = LoadModelV04._readData.pos;\r\n\t\tLoadModelV04._readData.pos = offset + LoadModelV04._DATA.offset;\r\n\r\n\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\tLoadModelV04._strings[i] = LoadModelV04._readData.readUTFString();\r\n\r\n\t\tLoadModelV04._readData.pos = prePos;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_MESH(): boolean {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar name: string = LoadModelV04._readString();\r\n\t\tvar arrayBuffer: ArrayBuffer = LoadModelV04._readData.__getBuffer();\r\n\t\tvar i: number, n: number;\r\n\r\n\t\tvar memorySize: number = 0;\r\n\t\tvar vertexBufferCount: number = LoadModelV04._readData.getInt16();\r\n\t\tvar offset: number = LoadModelV04._DATA.offset;\r\n\t\tfor (i = 0; i < vertexBufferCount; i++) {//TODO:始终为1\r\n\t\t\tvar vbStart: number = offset + LoadModelV04._readData.getUint32();\r\n\t\t\tvar vbLength: number = LoadModelV04._readData.getUint32();\r\n\t\t\tvar vbArrayBuffer: ArrayBuffer = arrayBuffer.slice(vbStart, vbStart + vbLength);\r\n\t\t\tvar vbDatas: Float32Array = new Float32Array(vbArrayBuffer);\r\n\t\t\tvar bufferAttribute: string = LoadModelV04._readString();\r\n\t\t\tvar vertexDeclaration: VertexDeclaration;\r\n\t\t\tswitch (LoadModelV04._version) {\r\n\t\t\t\tcase \"LAYAMODEL:0301\":\r\n\t\t\t\tcase \"LAYAMODEL:0400\":\r\n\t\t\t\t\tvertexDeclaration = VertexMesh.getVertexDeclaration(bufferAttribute);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"LAYAMODEL:0401\":\r\n\t\t\t\t\tvertexDeclaration = VertexMesh.getVertexDeclaration(bufferAttribute, false);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"LoadModelV03: unknown version.\");\r\n\t\t\t}\r\n\r\n\t\t\tif (!vertexDeclaration)\r\n\t\t\t\tthrow new Error(\"LoadModelV03: unknown vertexDeclaration.\");\r\n\r\n\t\t\tvar vertexBuffer: VertexBuffer3D = new VertexBuffer3D(vbDatas.length * 4, gl.STATIC_DRAW, true);\r\n\t\t\tvertexBuffer.vertexDeclaration = vertexDeclaration;\r\n\t\t\tvertexBuffer.setData(vbDatas.buffer);\r\n\t\t\tLoadModelV04._mesh._vertexBuffer = vertexBuffer;\r\n\t\t\tLoadModelV04._mesh._vertexCount += vertexBuffer._byteLength / vertexDeclaration.vertexStride;\r\n\t\t\tmemorySize += vbDatas.length * 4;\r\n\t\t}\r\n\r\n\t\tvar ibStart: number = offset + LoadModelV04._readData.getUint32();\r\n\t\tvar ibLength: number = LoadModelV04._readData.getUint32();\r\n\t\tvar ibDatas: Uint16Array = new Uint16Array(arrayBuffer.slice(ibStart, ibStart + ibLength));\r\n\t\tvar indexBuffer: IndexBuffer3D = new IndexBuffer3D(IndexFormat.UInt16, ibLength / 2, gl.STATIC_DRAW, true);\r\n\t\tindexBuffer.setData(ibDatas);\r\n\t\tLoadModelV04._mesh._indexBuffer = indexBuffer;\r\n\t\tmemorySize += indexBuffer.indexCount * 2;\r\n\r\n\t\tLoadModelV04._mesh._setBuffer(LoadModelV04._mesh._vertexBuffer, indexBuffer);\r\n\r\n\t\tLoadModelV04._mesh._setCPUMemory(memorySize);\r\n\t\tLoadModelV04._mesh._setGPUMemory(memorySize);\r\n\r\n\t\tvar boneNames: string[] = LoadModelV04._mesh._boneNames = [];\r\n\t\tvar boneCount: number = LoadModelV04._readData.getUint16();\r\n\t\tboneNames.length = boneCount;\r\n\t\tfor (i = 0; i < boneCount; i++)\r\n\t\t\tboneNames[i] = LoadModelV04._strings[LoadModelV04._readData.getUint16()];\r\n\r\n\t\tLoadModelV04._readData.pos += 8;//TODO:优化\r\n\r\n\t\tvar bindPoseDataStart: number = LoadModelV04._readData.getUint32();\r\n\t\tvar bindPoseDataLength: number = LoadModelV04._readData.getUint32();\r\n\t\tvar bindPoseDatas: Float32Array = new Float32Array(arrayBuffer.slice(offset + bindPoseDataStart, offset + bindPoseDataStart + bindPoseDataLength));\r\n\t\tvar bindPoseFloatCount: number = bindPoseDatas.length;\r\n\t\tvar bindPoseCount: number = bindPoseFloatCount / 16;\r\n\t\tvar bindPoseBuffer: ArrayBuffer = LoadModelV04._mesh._inverseBindPosesBuffer = new ArrayBuffer(bindPoseFloatCount * 4);//TODO:[NATIVE]临时\r\n\t\tLoadModelV04._mesh._inverseBindPoses = [];\r\n\t\tif(bindPoseFloatCount!=0) \r\n\t\t\tLoadModelV04._mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR;\r\n\t\telse\r\n\t\t\tLoadModelV04._mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL;\r\n\t\tLoadModelV04._mesh._setInstanceBuffer(LoadModelV04._mesh._instanceBufferStateType);\r\n\t\tfor (i = 0; i < bindPoseFloatCount; i += 16) {\r\n\t\t\tvar inverseGlobalBindPose: Matrix4x4 = new Matrix4x4(bindPoseDatas[i + 0], bindPoseDatas[i + 1], bindPoseDatas[i + 2], bindPoseDatas[i + 3], bindPoseDatas[i + 4], bindPoseDatas[i + 5], bindPoseDatas[i + 6], bindPoseDatas[i + 7], bindPoseDatas[i + 8], bindPoseDatas[i + 9], bindPoseDatas[i + 10], bindPoseDatas[i + 11], bindPoseDatas[i + 12], bindPoseDatas[i + 13], bindPoseDatas[i + 14], bindPoseDatas[i + 15], new Float32Array(bindPoseBuffer, i * 4, 16));\r\n\t\t\tLoadModelV04._mesh._inverseBindPoses[i / 16] = inverseGlobalBindPose;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_SUBMESH(): boolean {\r\n\t\tvar arrayBuffer: ArrayBuffer = LoadModelV04._readData.__getBuffer();\r\n\t\tvar subMesh: SubMesh = new SubMesh(LoadModelV04._mesh);\r\n\r\n\t\tLoadModelV04._readData.getInt16();//TODO:vbIndex\r\n\t\tLoadModelV04._readData.getUint32();//TODO:vbStart\r\n\t\tLoadModelV04._readData.getUint32();//TODO:vbLength\r\n\r\n\t\tvar ibStart: number = LoadModelV04._readData.getUint32();\r\n\t\tvar ibCount: number = LoadModelV04._readData.getUint32();\r\n\t\tvar indexBuffer: IndexBuffer3D = LoadModelV04._mesh._indexBuffer;\r\n\t\tsubMesh._indexBuffer = indexBuffer;\r\n\t\tsubMesh._setIndexRange(ibStart, ibCount);\r\n\t\tvar vertexBuffer: VertexBuffer3D = LoadModelV04._mesh._vertexBuffer;\r\n\t\tsubMesh._vertexBuffer = vertexBuffer;\r\n\r\n\t\tvar offset: number = LoadModelV04._DATA.offset;\r\n\t\tvar subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\r\n\t\tvar subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\r\n\t\tvar boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\r\n\t\tvar drawCount: number = LoadModelV04._readData.getUint16();\r\n\t\tsubIndexBufferStart.length = drawCount;\r\n\t\tsubIndexBufferCount.length = drawCount;\r\n\t\tboneIndicesList.length = drawCount;\r\n\r\n\t\tvar skinnedCache: skinnedMatrixCache[] = LoadModelV04._mesh._skinnedMatrixCaches;\r\n\t\tvar subMeshIndex: number = LoadModelV04._subMeshes.length;\r\n\t\tskinnedCache.length = LoadModelV04._mesh._inverseBindPoses.length;\r\n\t\tfor (var i: number = 0; i < drawCount; i++) {\r\n\t\t\tsubIndexBufferStart[i] = LoadModelV04._readData.getUint32();\r\n\t\t\tsubIndexBufferCount[i] = LoadModelV04._readData.getUint32();\r\n\t\t\tvar boneDicofs: number = LoadModelV04._readData.getUint32();\r\n\t\t\tvar boneDicCount: number = LoadModelV04._readData.getUint32();\r\n\t\t\tvar boneIndices: Uint16Array = boneIndicesList[i] = new Uint16Array(arrayBuffer.slice(offset + boneDicofs, offset + boneDicofs + boneDicCount));\r\n\t\t\tvar boneIndexCount: number = boneIndices.length;\r\n\t\t\tfor (var j: number = 0; j < boneIndexCount; j++) {\r\n\t\t\t\tvar index: number = boneIndices[j];\r\n\t\t\t\tskinnedCache[index] || (skinnedCache[index] = new skinnedMatrixCache(subMeshIndex, i, j));\r\n\t\t\t}\r\n\t\t}\r\n\t\tLoadModelV04._subMeshes.push(subMesh);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../layagl/LayaGL\"\r\nimport { Byte } from \"../../utils/Byte\"\r\nimport { Bounds } from \"../core/Bounds\"\r\nimport { IndexBuffer3D } from \"../graphics/IndexBuffer3D\"\r\nimport { IndexFormat } from \"../graphics/IndexFormat\"\r\nimport { VertexMesh } from \"../graphics/Vertex/VertexMesh\"\r\nimport { VertexBuffer3D } from \"../graphics/VertexBuffer3D\"\r\nimport { VertexDeclaration } from \"../graphics/VertexDeclaration\"\r\nimport { HalfFloatUtils } from \"../math/HalfFloatUtils\"\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\"\r\nimport { Vector3 } from \"../math/Vector3\"\r\nimport { Mesh, skinnedMatrixCache } from \"../resource/models/Mesh\"\r\nimport { SubMesh } from \"../resource/models/SubMesh\"\r\n\r\n\r\n/**\r\n * @internal\r\n * <code>LoadModelV05</code> 类用于模型加载。\r\n */\r\nexport class LoadModelV05 {\r\n\r\n\t/**@internal */\r\n\tprivate static _BLOCK: any = { count: 0 };\r\n\t/**@internal */\r\n\tprivate static _DATA: any = { offset: 0, size: 0 };\r\n\r\n\t/**@internal */\r\n\tprivate static _strings: any[] = [];\r\n\t/**@internal */\r\n\tprivate static _readData: Byte;\r\n\t/**@internal */\r\n\tprivate static _version: string;\r\n\t/**@internal */\r\n\tprivate static _mesh: Mesh;\r\n\t/**@internal */\r\n\tprivate static _subMeshes: SubMesh[];\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic parse(readData: Byte, version: string, mesh: Mesh, subMeshes: SubMesh[]): void {\r\n\t\tLoadModelV05._mesh = mesh;\r\n\t\tLoadModelV05._subMeshes = subMeshes;\r\n\t\tLoadModelV05._version = version;\r\n\t\tLoadModelV05._readData = readData;\r\n\t\tLoadModelV05.READ_DATA();\r\n\t\tLoadModelV05.READ_BLOCK();\r\n\t\tLoadModelV05.READ_STRINGS();\r\n\t\tfor (var i: number = 0, n: number = LoadModelV05._BLOCK.count; i < n; i++) {\r\n\t\t\tLoadModelV05._readData.pos = LoadModelV05._BLOCK.blockStarts[i];\r\n\t\t\tvar index: number = LoadModelV05._readData.getUint16();\r\n\t\t\tvar blockName: string = LoadModelV05._strings[index];\r\n\t\t\tvar fn: Function = LoadModelV05[\"READ_\" + blockName];\r\n\t\t\tif (fn == null)\r\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\r\n\t\t\telse\r\n\t\t\t\tfn.call(null);\r\n\t\t}\r\n\t\tLoadModelV05._strings.length = 0;\r\n\t\tLoadModelV05._readData = null;\r\n\t\tLoadModelV05._version = null;\r\n\t\tLoadModelV05._mesh = null;\r\n\t\tLoadModelV05._subMeshes = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _readString(): string {\r\n\t\treturn LoadModelV05._strings[LoadModelV05._readData.getUint16()];\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_DATA(): void {\r\n\t\tLoadModelV05._DATA.offset = LoadModelV05._readData.getUint32();\r\n\t\tLoadModelV05._DATA.size = LoadModelV05._readData.getUint32();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_BLOCK(): void {\r\n\t\tvar count: number = LoadModelV05._BLOCK.count = LoadModelV05._readData.getUint16();\r\n\t\tvar blockStarts: any[] = LoadModelV05._BLOCK.blockStarts = [];\r\n\t\tvar blockLengths: any[] = LoadModelV05._BLOCK.blockLengths = [];\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tblockStarts.push(LoadModelV05._readData.getUint32());\r\n\t\t\tblockLengths.push(LoadModelV05._readData.getUint32());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_STRINGS(): void {\r\n\t\tvar offset: number = LoadModelV05._readData.getUint32();\r\n\t\tvar count: number = LoadModelV05._readData.getUint16();\r\n\t\tvar prePos: number = LoadModelV05._readData.pos;\r\n\t\tLoadModelV05._readData.pos = offset + LoadModelV05._DATA.offset;\r\n\r\n\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\tLoadModelV05._strings[i] = LoadModelV05._readData.readUTFString();\r\n\r\n\t\tLoadModelV05._readData.pos = prePos;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_MESH(): boolean {\r\n\t\tvar gl: WebGLRenderingContext = LayaGL.instance;\r\n\t\tvar i: number, n: number;\r\n\t\tvar memorySize: number = 0;\r\n\t\tvar name: string = LoadModelV05._readString();\r\n\t\tvar reader: Byte = LoadModelV05._readData;\r\n\t\tvar arrayBuffer: ArrayBuffer = reader.__getBuffer();\r\n\r\n\r\n\r\n\t\tvar vertexBufferCount: number = reader.getInt16();\r\n\t\tvar offset: number = LoadModelV05._DATA.offset;\r\n\t\tfor (i = 0; i < vertexBufferCount; i++) {//TODO:始终为1\r\n\t\t\tvar vbStart: number = offset + reader.getUint32();\r\n\t\t\tvar vertexCount: number = reader.getUint32();\r\n\t\t\tvar vertexFlag: string = LoadModelV05._readString();\r\n\t\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(vertexFlag, false);\r\n\r\n\t\t\tvar vertexStride: number = vertexDeclaration.vertexStride;\r\n\t\t\tvar vertexData: ArrayBuffer;\r\n\t\t\tvar floatData: Float32Array;\r\n\t\t\tvar uint8Data: Uint8Array;\r\n\r\n\t\t\tvar subVertexFlags: any[] = vertexFlag.split(\",\");\r\n\t\t\tvar subVertexCount: number = subVertexFlags.length;\r\n\t\t\tvar mesh: Mesh = LoadModelV05._mesh;\r\n\r\n\t\t\tswitch (LoadModelV05._version) {\r\n\t\t\t\tcase \"LAYAMODEL:05\":\r\n\t\t\t\tcase \"LAYAMODEL:0501\":\r\n\t\t\t\t\tvertexData = arrayBuffer.slice(vbStart, vbStart + vertexCount * vertexStride);\r\n\t\t\t\t\tfloatData = new Float32Array(vertexData);\r\n\t\t\t\t\tuint8Data = new Uint8Array(vertexData);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"LAYAMODEL:COMPRESSION_05\":\r\n\t\t\t\tcase \"LAYAMODEL:COMPRESSION_0501\":\r\n\t\t\t\t\tvertexData = new ArrayBuffer(vertexStride * vertexCount);\r\n\t\t\t\t\tfloatData = new Float32Array(vertexData);\r\n\t\t\t\t\tuint8Data = new Uint8Array(vertexData);\r\n\t\t\t\t\tvar lastPosition: number = reader.pos;\r\n\t\t\t\t\treader.pos = vbStart;\r\n\r\n\t\t\t\t\tfor (var j: number = 0; j < vertexCount; j++) {\r\n\t\t\t\t\t\tvar subOffset: number;\r\n\t\t\t\t\t\tvar verOffset: number = j * vertexStride;\r\n\t\t\t\t\t\tfor (var k: number = 0; k < subVertexCount; k++) {\r\n\t\t\t\t\t\t\tswitch (subVertexFlags[k]) {\r\n\t\t\t\t\t\t\t\tcase \"POSITION\":\r\n\t\t\t\t\t\t\t\t\tsubOffset = verOffset / 4;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 1] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 2] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tverOffset += 12;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase \"NORMAL\":\r\n\t\t\t\t\t\t\t\t\tsubOffset = verOffset / 4;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset] = reader.getUint8() / 127.5 - 1;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 1] = reader.getUint8() / 127.5 - 1;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 2] = reader.getUint8() / 127.5 - 1;\r\n\t\t\t\t\t\t\t\t\tverOffset += 12;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase \"COLOR\":\r\n\t\t\t\t\t\t\t\t\tsubOffset = verOffset / 4;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset] = reader.getUint8() / 255;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 1] = reader.getUint8() / 255;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 2] = reader.getUint8() / 255;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 3] = reader.getUint8() / 255;\r\n\t\t\t\t\t\t\t\t\tverOffset += 16;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase \"UV\":\r\n\t\t\t\t\t\t\t\t\tsubOffset = verOffset / 4;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 1] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tverOffset += 8;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase \"UV1\":\r\n\t\t\t\t\t\t\t\t\tsubOffset = verOffset / 4;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 1] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\t\tverOffset += 8;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase \"BLENDWEIGHT\":\r\n\t\t\t\t\t\t\t\t\tsubOffset = verOffset / 4;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset] = reader.getUint8() / 255;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 1] = reader.getUint8() / 255;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 2] = reader.getUint8() / 255;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 3] = reader.getUint8() / 255;\r\n\t\t\t\t\t\t\t\t\tverOffset += 16;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase \"BLENDINDICES\":\r\n\t\t\t\t\t\t\t\t\tuint8Data[verOffset] = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tuint8Data[verOffset + 1] = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tuint8Data[verOffset + 2] = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tuint8Data[verOffset + 3] = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tverOffset += 4;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase \"TANGENT\":\r\n\t\t\t\t\t\t\t\t\tsubOffset = verOffset / 4;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset] = reader.getUint8() / 127.5 - 1;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 1] = reader.getUint8() / 127.5 - 1;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 2] = reader.getUint8() / 127.5 - 1;\r\n\t\t\t\t\t\t\t\t\tfloatData[subOffset + 3] = reader.getUint8() / 127.5 - 1;\r\n\t\t\t\t\t\t\t\t\tverOffset += 16;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treader.pos = lastPosition;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tvar vertexBuffer: VertexBuffer3D = new VertexBuffer3D(vertexData.byteLength, gl.STATIC_DRAW, true);\r\n\t\t\tvertexBuffer.vertexDeclaration = vertexDeclaration;\r\n\t\t\tvertexBuffer.setData(vertexData);\r\n\t\t\tvar vertexCount: number = vertexBuffer._byteLength / vertexDeclaration.vertexStride;\r\n\t\t\t//TDDO:是否加标记\r\n\t\t\tif (vertexCount > 65535)\r\n\t\t\t\tmesh._indexFormat = IndexFormat.UInt32;\r\n\t\t\telse\r\n\t\t\t\tmesh._indexFormat = IndexFormat.UInt16;\r\n\t\t\tmesh._vertexBuffer = vertexBuffer;\r\n\t\t\tmesh._vertexCount += vertexCount;\r\n\t\t\tmemorySize += floatData.length * 4;\r\n\t\t}\r\n\r\n\t\tvar ibStart: number = offset + reader.getUint32();\r\n\t\tvar ibLength: number = reader.getUint32();\r\n\r\n\t\tvar ibDatas: Uint16Array | Uint32Array;\r\n\t\tif (mesh.indexFormat == IndexFormat.UInt32)\r\n\t\t\tibDatas = new Uint32Array(arrayBuffer.slice(ibStart, ibStart + ibLength));\r\n\t\telse\r\n\t\t\tibDatas = new Uint16Array(arrayBuffer.slice(ibStart, ibStart + ibLength));\r\n\r\n\t\tvar indexBuffer: IndexBuffer3D = new IndexBuffer3D(mesh.indexFormat, ibDatas.length, gl.STATIC_DRAW, true);\r\n\t\tindexBuffer.setData(ibDatas);\r\n\t\tmesh._indexBuffer = indexBuffer;\r\n\r\n\t\tmesh._setBuffer(mesh._vertexBuffer, indexBuffer);\r\n\r\n\t\tmemorySize += indexBuffer.indexCount * 2;\r\n\t\tmesh._setCPUMemory(memorySize);\r\n\t\tmesh._setGPUMemory(memorySize);\r\n\r\n\t\tif (LoadModelV05._version == \"LAYAMODEL:0501\" || LoadModelV05._version == \"LAYAMODEL:COMPRESSION_0501\") {\r\n\t\t\tvar bounds: Bounds = mesh.bounds;\r\n\t\t\tvar min: Vector3 = bounds.getMin();\r\n\t\t\tvar max: Vector3 = bounds.getMax();\r\n\t\t\tmin.setValue(reader.getFloat32(), reader.getFloat32(), reader.getFloat32());\r\n\t\t\tmax.setValue(reader.getFloat32(), reader.getFloat32(), reader.getFloat32());\r\n\t\t\tbounds.setMin(min);\r\n\t\t\tbounds.setMax(max);\r\n\t\t\tmesh.bounds = bounds;\r\n\t\t}\r\n\r\n\t\tvar boneNames: string[] = mesh._boneNames = [];\r\n\t\tvar boneCount: number = reader.getUint16();\r\n\t\tboneNames.length = boneCount;\r\n\t\tfor (i = 0; i < boneCount; i++)\r\n\t\t\tboneNames[i] = LoadModelV05._strings[reader.getUint16()];//[兼容性]\r\n\r\n\t\tvar bindPoseDataStart: number = reader.getUint32();\r\n\t\tvar bindPoseDataLength: number = reader.getUint32();\r\n\t\tvar bindPoseDatas: Float32Array = new Float32Array(arrayBuffer.slice(offset + bindPoseDataStart, offset + bindPoseDataStart + bindPoseDataLength));\r\n\t\tvar bindPoseFloatCount: number = bindPoseDatas.length;\r\n\t\tvar bindPoseCount: number = bindPoseFloatCount / 16;\r\n\t\tvar bindPoseBuffer: ArrayBuffer = mesh._inverseBindPosesBuffer = new ArrayBuffer(bindPoseFloatCount * 4);//TODO:[NATIVE]临时\r\n\t\tmesh._inverseBindPoses = [];\r\n\t\tif(bindPoseFloatCount!=0) \r\n\t\t\tmesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR;\r\n\t\telse\r\n\t\t\tmesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL;\r\n\t\tmesh._setInstanceBuffer(mesh._instanceBufferStateType);\r\n\t\tfor (i = 0; i < bindPoseFloatCount; i += 16) {\r\n\t\t\tvar inverseGlobalBindPose: Matrix4x4 = new Matrix4x4(bindPoseDatas[i + 0], bindPoseDatas[i + 1], bindPoseDatas[i + 2], bindPoseDatas[i + 3], bindPoseDatas[i + 4], bindPoseDatas[i + 5], bindPoseDatas[i + 6], bindPoseDatas[i + 7], bindPoseDatas[i + 8], bindPoseDatas[i + 9], bindPoseDatas[i + 10], bindPoseDatas[i + 11], bindPoseDatas[i + 12], bindPoseDatas[i + 13], bindPoseDatas[i + 14], bindPoseDatas[i + 15], new Float32Array(bindPoseBuffer, i * 4, 16));\r\n\t\t\tmesh._inverseBindPoses[i / 16] = inverseGlobalBindPose;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_SUBMESH(): boolean {\r\n\t\tvar reader: Byte = LoadModelV05._readData;\r\n\t\tvar arrayBuffer: ArrayBuffer = reader.__getBuffer();\r\n\t\tvar subMesh: SubMesh = new SubMesh(LoadModelV05._mesh);\r\n\r\n\t\treader.getInt16();//TODO:vbIndex\r\n\t\tvar ibStart: number = reader.getUint32();\r\n\t\tvar ibCount: number = reader.getUint32();\r\n\t\tvar indexBuffer: IndexBuffer3D = LoadModelV05._mesh._indexBuffer;\r\n\t\tsubMesh._indexBuffer = indexBuffer;\r\n\t\tsubMesh._setIndexRange(ibStart, ibCount);\r\n\t\tvar vertexBuffer: VertexBuffer3D = LoadModelV05._mesh._vertexBuffer;\r\n\t\tsubMesh._vertexBuffer = vertexBuffer;\r\n\r\n\t\tvar offset: number = LoadModelV05._DATA.offset;\r\n\t\tvar subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\r\n\t\tvar subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\r\n\t\tvar boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\r\n\t\tvar drawCount: number = reader.getUint16();\r\n\t\tsubIndexBufferStart.length = drawCount;\r\n\t\tsubIndexBufferCount.length = drawCount;\r\n\t\tboneIndicesList.length = drawCount;\r\n\r\n\t\tvar skinnedCache: skinnedMatrixCache[] = LoadModelV05._mesh._skinnedMatrixCaches;\r\n\t\tvar subMeshIndex: number = LoadModelV05._subMeshes.length;\r\n\t\tskinnedCache.length = LoadModelV05._mesh._inverseBindPoses.length;\r\n\t\tfor (var i: number = 0; i < drawCount; i++) {\r\n\t\t\tsubIndexBufferStart[i] = reader.getUint32();\r\n\t\t\tsubIndexBufferCount[i] = reader.getUint32();\r\n\t\t\tvar boneDicofs: number = reader.getUint32();\r\n\t\t\tvar boneDicCount: number = reader.getUint32();\r\n\t\t\tvar boneIndices: Uint16Array = boneIndicesList[i] = new Uint16Array(arrayBuffer.slice(offset + boneDicofs, offset + boneDicofs + boneDicCount));\r\n\t\t\tfor (var j: number = 0, m: number = boneIndices.length; j < m; j++) {\r\n\t\t\t\tvar index: number = boneIndices[j];\r\n\t\t\t\tskinnedCache[index] || (skinnedCache[index] = new skinnedMatrixCache(subMeshIndex, i, j));\r\n\t\t\t}\r\n\t\t}\r\n\t\tLoadModelV05._subMeshes.push(subMesh);\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Byte } from \"../../utils/Byte\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\nimport { LoadModelV04 } from \"./LoadModelV04\";\r\nimport { LoadModelV05 } from \"./LoadModelV05\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MeshReader {\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tstatic _parse(data: any, propertyParams: any = null, constructParams: any[] = null): Mesh {\r\n\t\tvar mesh: Mesh = new Mesh();\r\n\t\tMeshReader.read(<ArrayBuffer>data, mesh, mesh._subMeshes);\r\n\t\treturn mesh;\r\n\t}\r\n\r\n\tstatic read(data: ArrayBuffer, mesh: Mesh, subMeshes: SubMesh[]): void {\r\n\t\tvar readData: Byte = new Byte(data);\r\n\t\treadData.pos = 0;\r\n\t\tvar version: string = readData.readUTFString();\r\n\t\tswitch (version) {\r\n\t\t\tcase \"LAYAMODEL:0301\":\r\n\t\t\tcase \"LAYAMODEL:0400\":\r\n\t\t\tcase \"LAYAMODEL:0401\":\r\n\t\t\t\tLoadModelV04.parse(readData, version, mesh, subMeshes);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"LAYAMODEL:05\":\r\n\t\t\tcase \"LAYAMODEL:COMPRESSION_05\":\r\n\t\t\tcase \"LAYAMODEL:0501\":\r\n\t\t\tcase \"LAYAMODEL:COMPRESSION_0501\":\r\n\t\t\t\tLoadModelV05.parse(readData, version, mesh, subMeshes);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"MeshReader: unknown mesh version.\");\r\n\t\t}\r\n\t\tmesh._setSubMeshes(subMeshes);\r\n\t\tif (version != \"LAYAMODEL:0501\" && version != \"LAYAMODEL:COMPRESSION_0501\")//compatible\r\n\t\t\tmesh.calculateBounds();\r\n\t}\r\n}\r\n\r\n","#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#define PI 3.14159265359\r\n#include \"Lighting.glsl\";\r\n\r\nuniform sampler2D u_Texture;\r\nuniform vec4 u_TextureHDRParams;\r\nuniform vec4 u_TintColor;\r\n\r\nvarying vec3 v_Texcoord;\r\nvarying vec2 v_Image180ScaleAndCutoff;\r\nvarying vec4 v_Layout3DScaleAndOffset;\r\n\r\nvec2 ToRadialCoords(vec3 coords)\r\n{\r\n\tvec3 normalizedCoords = normalize(coords);\r\n\tfloat latitude = acos(normalizedCoords.y);\r\n\tfloat longitude = atan(normalizedCoords.z,normalizedCoords.x);\r\n\tvec2 sphereCoords = vec2(longitude, latitude) * vec2(0.5/PI, 1.0/PI);\r\n\treturn vec2(0.5,1.0) - sphereCoords;\r\n}\r\n\r\n\r\nvoid main()\r\n{\t\r\n\tvec2 tc = ToRadialCoords(v_Texcoord);\r\n\tif (tc.x > v_Image180ScaleAndCutoff.y)\r\n\t\tgl_FragColor=vec4(0,0,0,1);\r\n\ttc.x = mod(tc.x*v_Image180ScaleAndCutoff.x, 1.0);\r\n\ttc = (tc + v_Layout3DScaleAndOffset.xy) * v_Layout3DScaleAndOffset.zw;\r\n\r\n\tmediump vec4 tex = texture2D (u_Texture, tc);\r\n\tmediump vec3 c = decodeHDR (tex, u_TextureHDRParams.x);\r\n\tc = c * u_TintColor.rgb * 2.0;//Gamma Space is 2.0,linear space is 4.59479380\r\n\tgl_FragColor=vec4(c, 1.0);\r\n}\r\n\r\n","#include \"Lighting.glsl\";\r\n\r\n#define PI 3.14159265359\r\n\r\nattribute vec4 a_Position;\r\n\r\nuniform mat4 u_ViewProjection;\r\nuniform float u_Rotation;\r\n\r\nvarying vec3 v_Texcoord;\r\nvarying vec2 v_Image180ScaleAndCutoff;\r\nvarying vec4 v_Layout3DScaleAndOffset;\r\n\r\nvec4 rotateAroundYInDegrees (vec4 vertex, float degrees)\r\n{\r\n\tfloat angle = degrees * PI / 180.0;\r\n\tfloat sina=sin(angle);\r\n\tfloat cosa=cos(angle);\r\n\tmat2 m = mat2(cosa, -sina, sina, cosa);\r\n\treturn vec4(m*vertex.xz, vertex.yw).xzyw;\r\n}\r\n\r\n\t\t\r\nvoid main()\r\n{\r\n\tvec4 position = rotateAroundYInDegrees(a_Position, u_Rotation);\r\n\tgl_Position = u_ViewProjection*position;\r\n\r\n\tv_Texcoord=vec3(-a_Position.x,-a_Position.y,a_Position.z);// NOTE: -a_Position.x convert coords system\r\n\r\n\t// Calculate constant horizontal scale and cutoff for 180 (vs 360) image type\r\n\tv_Image180ScaleAndCutoff = vec2(1.0, 1.0);// 360 degree mode\r\n\r\n\t// Calculate constant scale and offset for 3D layouts\r\n\tv_Layout3DScaleAndOffset = vec4(0,0,1,1);\r\n}\r\n","import { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { VertexMesh } from \"../../graphics/Vertex/VertexMesh\";\r\nimport { Vector4 } from \"../../math/Vector4\";\r\nimport SkyPanoramicFS from \"../../shader/files/SkyPanoramic.fs\";\r\nimport SkyPanoramicVS from \"../../shader/files/SkyPanoramic.vs\";\r\nimport { Shader3D } from \"../../shader/Shader3D\";\r\nimport { SubShader } from \"../../shader/SubShader\";\r\nimport { Material } from \"./Material\";\r\nimport { TextureDecodeFormat } from \"../../../resource/TextureDecodeFormat\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { ShaderData } from \"../../shader/ShaderData\";\r\n\r\n/**\r\n * <code>SkyPanoramicMaterial</code> 类用于实现SkyPanoramicMaterial材质。\r\n */\r\nexport class SkyPanoramicMaterial extends Material {\r\n    static TINTCOLOR: number = Shader3D.propertyNameToID(\"u_TintColor\");\r\n    static EXPOSURE: number = Shader3D.propertyNameToID(\"u_Exposure\");\r\n    static ROTATION: number = Shader3D.propertyNameToID(\"u_Rotation\");\r\n    static TEXTURE: number = Shader3D.propertyNameToID(\"u_Texture\");\r\n    static TEXTURE_HDR_PARAMS: number = Shader3D.propertyNameToID(\"u_TextureHDRParams\");\r\n\r\n    /**\r\n\t * @internal\r\n\t */\r\n    static __init__(): void {\r\n        var attributeMap: any = {\r\n            'a_Position': VertexMesh.MESH_POSITION0\r\n        };\r\n        var uniformMap: any = {\r\n            'u_TintColor': Shader3D.PERIOD_MATERIAL,\r\n            'u_TextureHDRParams': Shader3D.PERIOD_MATERIAL,\r\n            'u_Rotation': Shader3D.PERIOD_MATERIAL,\r\n            'u_Texture': Shader3D.PERIOD_MATERIAL,\r\n            'u_ViewProjection': Shader3D.PERIOD_CAMERA\r\n        };\r\n        var shader: Shader3D = Shader3D.add(\"SkyPanoramic\");\r\n        var subShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(subShader);\r\n        subShader.addShaderPass(SkyPanoramicVS, SkyPanoramicFS);\r\n    }\r\n\r\n    /** @internal */\r\n    private _exposure: number = 1.0;\r\n    /** @internal */\r\n    private _textureDecodeFormat: TextureDecodeFormat = TextureDecodeFormat.Normal;\r\n    /** @internal */\r\n    private _textureHDRParams: Vector4 = new Vector4(1.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * 颜色。\r\n     */\r\n    get tintColor(): Vector4 {\r\n        return <Vector4>this._shaderValues.getVector(SkyPanoramicMaterial.TINTCOLOR);\r\n    }\r\n\r\n    set tintColor(value: Vector4) {\r\n        this._shaderValues.setVector(SkyPanoramicMaterial.TINTCOLOR, value);\r\n    }\r\n\r\n\t/**\r\n\t * 曝光强度。\r\n\t */\r\n    get exposure(): number {\r\n        return this._exposure;\r\n    }\r\n\r\n    set exposure(value: number) {\r\n        if (this._exposure !== value) {\r\n            this._exposure = value;\r\n            if (this._textureDecodeFormat == TextureDecodeFormat.RGBM)\r\n                this._textureHDRParams.x = value * BaseTexture._rgbmRange;\r\n            else\r\n                this._textureHDRParams.x = value;\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t * 旋转角度。\r\n\t */\r\n    get rotation(): number {\r\n        return this._shaderValues.getNumber(SkyPanoramicMaterial.ROTATION);\r\n    }\r\n\r\n    set rotation(value: number) {\r\n        this._shaderValues.setNumber(SkyPanoramicMaterial.ROTATION, value);\r\n    }\r\n\r\n\t/**\r\n\t * 全景天空纹理。\r\n\t */\r\n    get panoramicTexture(): Texture2D {\r\n        return <Texture2D>this._shaderValues.getTexture(SkyPanoramicMaterial.TEXTURE);\r\n    }\r\n\r\n    set panoramicTexture(value: Texture2D) {\r\n        this._shaderValues.setTexture(SkyPanoramicMaterial.TEXTURE, value);\r\n    }\r\n\r\n    /**\r\n\t * 全景天空纹理解码格式。\r\n\t */\r\n    get panoramicTextureDecodeFormat(): TextureDecodeFormat {\r\n        return this._textureDecodeFormat;\r\n    }\r\n\r\n    set panoramicTextureDecodeFormat(value: TextureDecodeFormat) {\r\n        if (this._textureDecodeFormat !== value) {\r\n            this._textureDecodeFormat = value;\r\n            if (value == TextureDecodeFormat.RGBM)\r\n                this._textureHDRParams.x = this._exposure * BaseTexture._rgbmRange;\r\n            else\r\n                this._textureHDRParams.x = this._exposure;\r\n        }\r\n    }\r\n\r\n    /**\r\n\t * 创建一个 <code>SkyPanoramicMaterial</code> 实例。\r\n\t */\r\n    constructor() {\r\n        super();\r\n        this.setShaderName(\"SkyPanoramic\");\r\n        var shaderValues: ShaderData = this._shaderValues;\r\n        shaderValues.setVector(SkyPanoramicMaterial.TINTCOLOR, new Vector4(0.5, 0.5, 0.5, 0.5));\r\n        shaderValues.setNumber(SkyPanoramicMaterial.ROTATION, 0.0);\r\n        shaderValues.setVector(SkyPanoramicMaterial.TEXTURE_HDR_PARAMS, this._textureHDRParams);\r\n    }\r\n}","import { Component } from \"../../../components/Component\";\r\nimport { Rigidbody3D } from \"../Rigidbody3D\";\r\nimport { Physics3D } from \"../Physics3D\";\r\nimport { PhysicsSimulation } from \"../PhysicsSimulation\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\n\r\n/**\r\n * <code>ConstraintComponent</code> 类用于创建约束的父类。\r\n */\r\nexport class ConstraintComponent extends Component {\r\n\t/** @internal TODO*/\r\n\tstatic CONSTRAINT_POINT2POINT_CONSTRAINT_TYPE:number = 3;\r\n\t/** @internal TODO*/\r\n\tstatic CONSTRAINT_HINGE_CONSTRAINT_TYPE:number = 4;\r\n\t/** @internal TODO*/\r\n\tstatic CONSTRAINT_CONETWIST_CONSTRAINT_TYPE:number = 5;\r\n\t/** @internal TODO*/\r\n\tstatic CONSTRAINT_D6_CONSTRAINT_TYPE:number = 6;\r\n\t/** @internal TODO*/\r\n\tstatic CONSTRAINT_SLIDER_CONSTRAINT_TYPE:number = 7;\r\n\t/** @internal TODO*/\r\n\tstatic CONSTRAINT_CONTACT_CONSTRAINT_TYPE:number = 8;\r\n\t/** @internal TODO*/\r\n\tstatic CONSTRAINT_D6_SPRING_CONSTRAINT_TYPE:number = 9;\r\n\t/** @internal TODO*/\r\n\tstatic CONSTRAINT_GEAR_CONSTRAINT_TYPE:number = 10;\r\n\t/** @internal */\r\n\tstatic CONSTRAINT_FIXED_CONSTRAINT_TYPE:number = 11;\r\n\t/** @internal TODO*/\r\n\tstatic CONSTRAINT_MAX_CONSTRAINT_TYPE:number = 12;\r\n\t/** @internal error reduction parameter (ERP)*/\r\n\tstatic CONSTRAINT_CONSTRAINT_ERP:number = 1;\r\n\t/** @internal*/\r\n\tstatic CONSTRAINT_CONSTRAINT_STOP_ERP:number = 2;\r\n\t/** @internal constraint force mixing（CFM）*/\r\n\tstatic CONSTRAINT_CONSTRAINT_CFM:number = 3;\r\n\t/** @internal*/\r\n\tstatic CONSTRAINT_CONSTRAINT_STOP_CFM:number = 4;\r\n\t/** @internal */\r\n\tstatic tempForceV3:Vector3 = new Vector3();\r\n\t/**@internal */\r\n\t_btConstraint: any;\r\n\t/** @internal */\r\n\t_simulation: PhysicsSimulation;\r\n\t/**@internal 回调参数*/\r\n\t_btJointFeedBackObj:number; \r\n\t/** @internal */\r\n\t_anchor:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\t_connectAnchor:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\t_btframAPos:number;\r\n\t/** @internal */\r\n\t_btframBPos:number;\r\n\t/** @internal */\r\n\t_btframATrans:number;\r\n\t/** @internal */\r\n\t_btframBTrans:number;\r\n\t/**@internal */\r\n\tprivate _constraintType:number;\r\n\t/**@internal */\r\n\tprivate _connectedBody: Rigidbody3D;\r\n\t/**@internal */\r\n\tprivate _ownBody:Rigidbody3D;\r\n\t/**@internal */\r\n\tprivate _feedbackEnabled: boolean = false;\r\n\t/**@internal */\r\n\tprivate _getJointFeedBack:boolean = false;\r\n\t/**@internal */\r\n\tprivate _currentForce:Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate _currentTorque:Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate _breakForce:number;\r\n\t/**@internal */\r\n\tprivate _breakTorque:number;\r\n\t\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tget enabled(): boolean {\r\n\t\treturn super.enabled;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tset enabled(value: boolean) {\r\n\t\tsuper.enabled = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取应用的冲力。\r\n\t */\r\n\tget appliedImpulse(): number {\r\n\t\tif (!this._feedbackEnabled) {\r\n\t\t\tthis._btConstraint.EnableFeedback(true);\r\n\t\t\tthis._feedbackEnabled = true;\r\n\t\t}\r\n\t\treturn this._btConstraint.AppliedImpulse;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tset connectedBody(value:Rigidbody3D){\r\n\t\tthis._connectedBody = value;\r\n\t\tvalue.constaintRigidbodyB = this;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取连接的刚体B。\r\n\t * @return 已连接刚体B。\r\n\t */\r\n\tget connectedBody(): Rigidbody3D {\r\n\t\treturn this._connectedBody;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 获取连接的刚体A。\r\n\t * @return 已连接刚体A。\r\n\t */\r\n\tget ownBody():Rigidbody3D{\r\n\t\treturn this._ownBody;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tset ownBody(value:Rigidbody3D){\r\n\t\tthis._ownBody = value;\r\n\t\tvalue.constaintRigidbodyA = this;\r\n\t}\r\n\t/**\r\n\t * 获得收到的总力\r\n\t */\r\n\tget currentForce():Vector3{\r\n\t\tif(!this._getJointFeedBack)\r\n\t\t\tthis._getFeedBackInfo();\r\n\t\treturn this._currentForce;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取的总力矩\r\n\t */\r\n\tget currentTorque():Vector3{\r\n\t\tif(!this._getJointFeedBack)\r\n\t\t\tthis._getFeedBackInfo();\r\n\t\treturn this._currentTorque;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置最大承受力\r\n\t * @param value 最大承受力\r\n\t */\r\n\tget breakForce():number{\r\n        return this._breakForce;\r\n    }\r\n    set breakForce(value:number){\r\n        this._breakForce = value;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 设置最大承受力矩\r\n\t * @param value 最大承受力矩\r\n\t */\r\n\tget breakTorque():number{\r\n        return this._breakTorque;\r\n    }\r\n    set breakTorque(value:number){\r\n        this._breakTorque = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置锚点\r\n\t */\r\n\tset anchor(value:Vector3){\r\n\t\tvalue.cloneTo(this._anchor);\r\n\t\tthis.setFrames();\r\n\t}\r\n\r\n\tget anchor(){\r\n\t\treturn this._anchor;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置链接锚点\r\n\t */\r\n\tset connectAnchor(value:Vector3){\r\n\t\tvalue.cloneTo(this._connectAnchor);\r\n\t\tthis.setFrames();\r\n\t}\r\n\r\n\tget connectAnchor():Vector3{\r\n\t\treturn this._connectAnchor;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>ConstraintComponent</code> 实例。\r\n\t */\r\n\tconstructor(constraintType:number) {\r\n\t\tsuper();\r\n\t\tthis._constraintType = constraintType;\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tthis._btframATrans = bt.btTransform_create();\r\n\t\tthis._btframBTrans = bt.btTransform_create();\r\n\t\tbt.btTransform_setIdentity(this._btframATrans);\r\n\t\tbt.btTransform_setIdentity(this._btframBTrans);\r\n\t\tthis._btframAPos = bt.btVector3_create(0, 0, 0);\r\n\t\tthis._btframBPos= bt.btVector3_create(0, 0, 0);\r\n\t\tbt.btTransform_setOrigin(this._btframATrans,  this._btframAPos);\r\n\t\tbt.btTransform_setOrigin(this._btframBTrans,  this._btframBPos);\r\n\t\tthis._breakForce = -1;\r\n\t\tthis._breakTorque = -1;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置迭代的次数，次数越高，越精确\r\n\t * @param overideNumIterations \r\n\t */\r\n\tsetOverrideNumSolverIterations(overideNumIterations:number): void {\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tbt.btTypedConstraint_setOverrideNumSolverIterations(this._btConstraint, overideNumIterations);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置约束是否可用\r\n\t * @param enable \r\n\t */\r\n\tsetConstraintEnabled(enable:boolean): void {\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tbt.btTypedConstraint_setEnabled(this._btConstraint, enable);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_onEnable():void{\r\n\t\tsuper._onEnable();\r\n\t\tthis.enabled = true;\r\n\t}\r\n\r\n\t_onDisable():void{\r\n\t\tsuper._onDisable();\r\n\t\tthis.enabled = false;\r\n\t}\r\n\t/**\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tsetFrames(){\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tbt.btVector3_setValue(this._btframAPos,-this._anchor.x,this.anchor.y,this.anchor.z);\r\n\t\tbt.btVector3_setValue(this._btframBPos,-this._connectAnchor.x,this._connectAnchor.y,this._connectAnchor.z);\r\n\t\tbt.btTransform_setOrigin(this._btframATrans,this._btframAPos);\r\n\t\tbt.btTransform_setOrigin(this._btframBTrans,this._btframBPos);\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addToSimulation(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removeFromSimulation(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_createConstraint():void{\r\n\t}\r\n\r\n\t/**\r\n\t * 设置约束刚体\r\n\t * @param ownerRigid \r\n\t * @param connectRigidBody \r\n\t * @override\r\n\t */\r\n\tsetConnectRigidBody(ownerRigid:Rigidbody3D,connectRigidBody:Rigidbody3D){\r\n\t\tvar ownerCanInSimulation:Boolean = (ownerRigid)&&(!!(ownerRigid._simulation && ownerRigid._enabled && ownerRigid.colliderShape));\r\n\t\tvar connectCanInSimulation:Boolean = (connectRigidBody)&&(!!(connectRigidBody._simulation && connectRigidBody._enabled && connectRigidBody.colliderShape));\r\n\t\tif(!(ownerCanInSimulation&&connectCanInSimulation))\r\n\t\t\tthrow \"ownerRigid or connectRigidBody is not in Simulation\";\r\n\t\tif(ownerRigid!=this._ownBody||connectRigidBody!=this._connectedBody){\r\n\t\t\tvar canInSimulation = !!(this.enabled&&this._simulation);\r\n\t\t\tcanInSimulation && this._removeFromSimulation();\r\n\t\t\tthis._ownBody = ownerRigid;\r\n\t\t\tthis._connectedBody = connectRigidBody;\r\n\t\t\tthis._ownBody.constaintRigidbodyA = this;\r\n\t\t\tthis._connectedBody.constaintRigidbodyB = this;\r\n\t\t\tthis._createConstraint();\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\r\n\t/**\r\n\t * 获得当前力\r\n\t * @param out \r\n\t */\r\n\tgetcurrentForce(out:Vector3){\r\n\t\tif(!this._btJointFeedBackObj)\r\n\t\tthrow \"this Constraint is not simulation\";\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tvar applyForce:number =bt.btJointFeedback_getAppliedForceBodyA(this._btJointFeedBackObj);\r\n\t\tout.setValue(bt.btVector3_x(applyForce),bt.btVector3_y(applyForce),bt.btVector3_z(applyForce));\r\n\t\treturn;\r\n    }\r\n\r\n\t/**\r\n\t * 获得当前力矩\r\n\t * @param out \r\n\t */\r\n    getcurrentTorque(out:Vector3){\r\n\t\tif(!this._btJointFeedBackObj)\r\n\t\tthrow \"this Constraint is not simulation\";\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tvar applyTorque:number =bt.btJointFeedback_getAppliedTorqueBodyA(this._btJointFeedBackObj);\r\n\t\tout.setValue(bt.btVector3_x(applyTorque),bt.btVector3_y(applyTorque),bt.btVector3_z(applyTorque));\r\n\t\treturn;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _onDestroy(): void {\r\n\t\tvar physics3D: any = Physics3D._bullet;\r\n\t\tthis._removeFromSimulation();\r\n\t\tif(this._btConstraint&&this._btJointFeedBackObj&&this._simulation){\r\n\t\t\tphysics3D.btTypedConstraint_destroy(this._btConstraint);\r\n\t\t\tphysics3D.btJointFeedback_destroy(this._btJointFeedBackObj);\r\n\t\t\tthis._btJointFeedBackObj = null;\r\n\t\t\tthis._btConstraint = null;\r\n\t\t}\r\n\t\tsuper._onDisable();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_isBreakConstrained():Boolean{\r\n\t\tthis._getJointFeedBack = false;\r\n\t\tif(this.breakForce==-1&&this.breakTorque==-1)\r\n\t\t\treturn false;\r\n\t\tthis._getFeedBackInfo();\t\r\n\t\tvar isBreakForce:Boolean = this._breakForce!=-1&&(Vector3.scalarLength(this._currentForce)>this._breakForce);\r\n\t\tvar isBreakTorque:Boolean = this._breakTorque!=-1&&(Vector3.scalarLength(this._currentTorque)>this._breakTorque);\r\n\t\tif(isBreakForce||isBreakTorque){\r\n\t\t\tthis._breakConstrained();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_parse(data: any): void {\r\n\t\tthis._anchor.fromArray(data.anchor);\r\n\t\tthis._connectAnchor.fromArray(data.connectAnchor);\r\n\t\tthis.setFrames();\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _getFeedBackInfo(){\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tvar applyForce:number =bt.btJointFeedback_getAppliedForceBodyA(this._btJointFeedBackObj);\r\n\t\tvar applyTorque:number = bt.btJointFeedback_getAppliedTorqueBodyA(this._btJointFeedBackObj);\r\n\t\tthis._currentTorque.setValue(bt.btVector3_x(applyTorque),bt.btVector3_y(applyTorque),bt.btVector3_z(applyTorque));\r\n\t\tthis._currentForce.setValue(bt.btVector3_x(applyForce),bt.btVector3_y(applyForce),bt.btVector3_z(applyForce));\r\n\t\tthis._getJointFeedBack = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_breakConstrained():void{\r\n\t\tthis.ownBody.constaintRigidbodyA=null;\r\n\t\tthis.connectedBody.constaintRigidbodyB=null;\r\n\t\tthis.destroy();\r\n\t}\r\n\t\r\n}\r\n\r\n","import { ConstraintComponent } from \"./ConstraintComponent\";\r\nimport { Component } from \"../../../components/Component\";\r\nimport { Physics3D } from \"../Physics3D\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Rigidbody3D } from \"../Rigidbody3D\";\r\n\r\nexport class FixedConstraint extends ConstraintComponent{\r\n\t/**\r\n\t * 创建一个<code>FixedConstraint</code>实例\r\n\t */\r\n\tconstructor(){\r\n\t\tsuper(ConstraintComponent.CONSTRAINT_FIXED_CONSTRAINT_TYPE);\r\n\t\tthis.breakForce = -1;\r\n\t\tthis.breakTorque = -1;\r\n\t\t\r\n\t\t\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_addToSimulation(): void {\r\n\t\tthis._simulation && this._simulation.addConstraint(this,this.enabled);\r\n    }\r\n    \r\n     /**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n    _removeFromSimulation():void{\r\n\t\tthis._simulation.removeConstraint(this);\r\n\t\tthis._simulation = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_createConstraint():void{\r\n\t\tif(this.ownBody&&this.ownBody._simulation&&this.connectedBody&&this.connectedBody._simulation){\r\n\t\t\tvar bt = Physics3D._bullet;\r\n\t\t\tthis._btConstraint = bt.btFixedConstraint_create(this.ownBody.btColliderObject, this._btframATrans, this.connectedBody.btColliderObject, this._btframBTrans)\r\n\t\t\tthis._btJointFeedBackObj = bt.btJointFeedback_create(this._btConstraint);\t\r\n\t\t\tbt.btTypedConstraint_setJointFeedback(this._btConstraint,this._btJointFeedBackObj);\r\n\t\t\tthis._simulation = ((<Scene3D>this.owner._scene)).physicsSimulation;\r\n\t\t\tthis._addToSimulation();\r\n\t\t\tPhysics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint,true);\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_onAdded(): void {\r\n\t\tsuper._onAdded();\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_onEnable():void{\r\n\t\tif(!this._btConstraint)\r\n\t\t\treturn;\r\n\t\tsuper._onEnable();\r\n\t\tif(this._btConstraint)\r\n\t\tPhysics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint,true);\r\n\t}\r\n\r\n\t_onDisable():void{\r\n\t\tsuper._onDisable();\r\n\t\tif(!this.connectedBody)\r\n\t\t\tthis._removeFromSimulation();\r\n\t\tif(this._btConstraint)\r\n\t\tPhysics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint,false);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _onDestroy(): void {\r\n\t\tsuper._onDestroy();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_parse(data: any,interactMap:any = null): void {\r\n\t\tsuper._parse(data);\r\n\t\tif(data.rigidbodyID!=-1&&data.connectRigidbodyID!=-1){\r\n\t\t\tinteractMap.component.push(this);\r\n\t\t\tinteractMap.data.push(data);\r\n\t\t}\r\n\t\t(data.breakForce != undefined) && (this.breakForce = data.breakForce);\r\n\t\t(data.breakTorque != undefined) && (this.breakTorque = data.breakTorque);\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_parseInteractive(data:any = null,spriteMap:any = null){\r\n\t\tvar rigidBodySprite:Sprite3D = spriteMap[data.rigidbodyID];\r\n\t\tvar rigidBody: Rigidbody3D = rigidBodySprite.getComponent(Rigidbody3D);\r\n\t\tvar connectSprite: Sprite3D = spriteMap[data.connectRigidbodyID];\r\n\t\tvar connectRigidbody: Rigidbody3D = connectSprite.getComponent(Rigidbody3D);\r\n\t\tthis.ownBody = rigidBody;\r\n\t\tthis.connectedBody = connectRigidbody;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(dest: Component): void {\r\n\t\t\r\n\t}\r\n}","import { ConstraintComponent } from \"./ConstraintComponent\";\r\nimport { Component } from \"../../../components/Component\";\r\nimport { Physics3D } from \"../Physics3D\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { Vector3 } from \"../../math/Vector3\";\r\nimport { Rigidbody3D } from \"../Rigidbody3D\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\n\r\n/**\r\n * <code>ConfigurableConstraint</code>类用于可设置的约束组件\r\n */\r\nexport class ConfigurableConstraint extends ConstraintComponent{\r\n\t/** 约束限制模式  完全限制 */\r\n\tstatic CONFIG_MOTION_TYPE_LOCKED:number = 0;\r\n\t/** 约束限制模式  范围限制 */\r\n\tstatic CONFIG_MOTION_TYPE_LIMITED:number = 1;\r\n\t/** 约束限制模式  不限制 */\r\n\tstatic CONFIG_MOTION_TYPE_FREE:number = 2;\r\n\t/** @internal 线性x轴*/\r\n\tstatic MOTION_LINEAR_INDEX_X:number = 0;\r\n\t/** @internal 线性Y轴*/\r\n\tstatic MOTION_LINEAR_INDEX_Y:number = 1;\r\n\t/** @internal 线性Z轴*/\r\n\tstatic MOTION_LINEAR_INDEX_Z:number = 2;\r\n\t/** @internal 旋转X轴*/\r\n\tstatic MOTION_ANGULAR_INDEX_X:number = 3;\r\n\t/** @internal 旋转Y轴*/\r\n\tstatic MOTION_ANGULAR_INDEX_Y:number = 4;\r\n\t/** @internal 旋转Z轴*/\r\n\tstatic MOTION_ANGULAR_INDEX_Z:number = 5;\r\n\t/** @internal */\r\n\tstatic RO_XYZ:number = 0;\r\n\t/** @internal */\r\n\tstatic RO_XZY:number = 1;\r\n\t/** @internal */\r\n\tstatic RO_YXZ:number = 2;\r\n\t/** @internal */\r\n\tstatic RO_YZX:number = 3;\r\n\t/** @internal */\r\n\tstatic RO_ZXY:number = 4;\r\n\t/** @internal */\r\n\tstatic RO_ZYX:number = 5;\r\n\t/** @internal */\r\n\tprivate _btAxis:number;\r\n\t/** @internal */\r\n\tprivate _btSecondaryAxis:number;\r\n\t/** @internal */\r\n\tprivate _axis:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _secondaryAxis:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _minLinearLimit:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _maxLinearLimit:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _minAngularLimit:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _maxAngularLimit:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _linearLimitSpring:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _angularLimitSpring:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _linearBounce:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _angularBounce:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _linearDamp:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _angularDamp:Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate _xMotion:number = 0;\r\n\t/** @internal */\r\n\tprivate _yMotion:number = 0;\r\n\t/** @internal */\r\n\tprivate _zMotion:number = 0;\r\n\t/** @internal */\r\n\tprivate _angularXMotion:number = 0;\r\n\t/** @internal */\r\n\tprivate _angularYMotion:number = 0;\r\n\t/** @internal */\r\n\tprivate _angularZMotion:number = 0;\r\n\t/**\r\n\t * 创建一个<code>ConfigurableConstraint</code>实例\t可设置的约束组件\r\n\t */\r\n\tconstructor(){\r\n\t\tsuper(ConstraintComponent.CONSTRAINT_D6_SPRING_CONSTRAINT_TYPE);\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tthis._btAxis =bt.btVector3_create(-1.0,0.0,0.0);\r\n\t\tthis._btSecondaryAxis = bt.btVector3_create(0.0,1.0,0.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 主轴\r\n\t */\r\n\tget axis():Vector3{\r\n\t\treturn this._axis;\r\n\t}\r\n\r\n\t/**\r\n\t * 副轴\r\n\t */\r\n\tget secondaryAxis():Vector3{\r\n\t\treturn this._secondaryAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * 旋转角度最大值\r\n\t */\r\n\tset maxAngularLimit(value:Vector3){\r\n\t\tvalue.cloneTo(this._maxAngularLimit);\r\n\t}\r\n\r\n\t/**\r\n\t * 旋转角度最小值\r\n\t */\r\n\tset minAngularLimit(value:Vector3){\r\n\t\tvalue.cloneTo(this._minAngularLimit);\r\n\t}\r\n\r\n\tget maxAngularLimit():Vector3{\r\n\t\treturn this._maxAngularLimit;\r\n\t}\r\n\r\n\tget minAngularLimit():Vector3{\r\n\t\treturn this._minAngularLimit;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大线性位置\r\n\t */\r\n\tset maxLinearLimit(value:Vector3){\r\n\t\tvalue.cloneTo(this._maxLinearLimit);\r\n\t}\r\n\r\n\t/**\r\n\t * 最小线性位置\r\n\t */\r\n\tset minLinearLimit(value:Vector3){\r\n\t\tvalue.cloneTo(this._minLinearLimit);\r\n\t}\r\n\r\n\r\n\tget maxLinearLimit():Vector3{\r\n\t\treturn this._maxLinearLimit;\r\n\t}\r\n\r\n\tget minLinearLimit():Vector3{\r\n\t\treturn this._minLinearLimit;\r\n\t}\r\n\t/**\r\n\t * X轴线性约束模式\r\n\t */\r\n\tset XMotion(value:number){\r\n\t\t//坐标系转换\r\n\t\tif(this._xMotion!=value){\r\n\t\t\tthis._xMotion = value;\r\n\t\t\tthis.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_X,value, -this._maxLinearLimit.x,-this._minLinearLimit.x);\r\n\t\t}\r\n\t}\r\n\r\n\tget XMotion():number{\r\n\t\treturn this._xMotion;\r\n\t}\r\n\r\n\t/**\r\n\t * Y轴线性约束模式\r\n\t */\r\n\tset YMotion(value:number){\r\n\t\tif(this._yMotion!=value){\r\n\t\t\tthis._yMotion = value;\r\n\t\t\tthis.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y,value,this._minLinearLimit.y,this._maxLinearLimit.y);\r\n\t\t}\r\n\t\t\t\r\n\t}\r\n\r\n\tget YMotion():number{\r\n\t\treturn this._yMotion;\r\n\t}\r\n\r\n\t/**\r\n\t * Z轴线性约束模式\r\n\t */\r\n\tset ZMotion(value:number){\r\n\t\tif(this._zMotion!=value){\r\n\t\t\tthis._zMotion = value;\r\n\t\t\tthis.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z,value,this._minLinearLimit.z,this._maxLinearLimit.z);\r\n\t\t}\r\n\t}\r\n\r\n\tget ZMotion():number{\r\n\t\treturn this._zMotion;\r\n\t}\r\n\r\n\t/**\r\n\t * X轴旋转约束模式\r\n\t */\r\n\tset angularXMotion(value:number){\r\n\t\t//坐标系转换\r\n\t\tif(this._angularXMotion!=value){\r\n\t\t\tthis._angularXMotion = value;\r\n\t\t\tthis.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X,value,-this._maxAngularLimit.x,-this._minAngularLimit.x);\r\n\t\t}\r\n\t}\r\n\r\n\tget angularXMotion():number{\r\n\t\treturn this._angularXMotion;\r\n\t}\r\n\r\n\t/**\r\n\t * Y轴旋转约束模式\r\n\t */\r\n\tset angularYMotion(value:number){\r\n\t\tif(this._angularYMotion!=value){\r\n\t\t\tthis._angularYMotion = value;\r\n\t\t\tthis.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y,value,this._minAngularLimit.y,this._maxAngularLimit.y);\r\n\t\t}\t\r\n\t}\r\n\r\n\tget angularYMotion():number{\r\n\t\treturn this._angularYMotion;\r\n\t}\r\n\r\n\t/**\r\n\t * Z轴旋转约束模式\r\n\t */\r\n\tset angularZMotion(value:number){\r\n\t\tif(this._angularZMotion!=value){\r\n\t\t\tthis._angularZMotion = value;\r\n\t\t\tthis.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z,value,this._minAngularLimit.z,this._maxAngularLimit.z);\r\n\t\t}\r\n\t}\r\n\r\n\tget angularZMotion():number{\r\n\t\treturn this._angularZMotion;\r\n\t}\r\n\r\n\t/**\r\n\t * 线性弹簧\r\n\t */\r\n\tset linearLimitSpring(value:Vector3){\r\n\t\tif(!Vector3.equals(this._linearLimitSpring,value)){\r\n\t\t\tvalue.cloneTo(this._linearLimitSpring);\r\n\t\t\tthis.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_X,value.x);\r\n\t\t\tthis.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y,value.y);\r\n\t\t\tthis.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z,value.z);\r\n\t\t}\r\n\t}\r\n\r\n\tget linearLimitSpring():Vector3{\r\n\t\treturn this._linearLimitSpring;\r\n\t}\r\n\r\n\t/**\r\n\t * 角度弹簧\r\n\t */\r\n\tset angularLimitSpring(value:Vector3){\r\n\t\tif(!Vector3.equals(this._angularLimitSpring,value)){\r\n\t\t\tvalue.cloneTo(this._angularLimitSpring);\r\n\t\t\tthis.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X,value.x);\r\n\t\t\tthis.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y,value.y);\r\n\t\t\tthis.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z,value.z);\r\n\t\t}\r\n\t}\r\n\r\n\tget angularLimitSpring():Vector3{\r\n\t\treturn this._angularLimitSpring;\r\n\t}\r\n\r\n\t/**\r\n\t * 线性弹力\r\n\t */\r\n\tset linearBounce(value:Vector3){\r\n\t\tif(!Vector3.equals(this._linearBounce,value)){\r\n\t\t\tvalue.cloneTo(this._linearBounce);\r\n\t\t\tthis.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_X,value.x);\r\n\t\t\tthis.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y,value.y);\r\n\t\t\tthis.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z,value.z);\r\n\t\t}\r\n\t}\r\n\r\n\tget linearBounce():Vector3{\r\n\t\treturn this._linearBounce;\r\n\t}\r\n\r\n\t/**\r\n\t * 角度弹力\r\n\t */\r\n\tset angularBounce(value:Vector3){\r\n\t\tif(!Vector3.equals(this._angularBounce,value)){\r\n\t\t\tvalue.cloneTo(this._angularBounce);\r\n\t\t\tthis.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X,value.x);\r\n\t\t\tthis.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y,value.y);\r\n\t\t\tthis.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z,value.z);\r\n\t\t}\r\n\t}\r\n\r\n\tget angularBounce():Vector3{\r\n\t\treturn this._angularBounce;\r\n\t}\r\n\r\n\t/**\r\n\t * 线性阻力\r\n\t */\r\n\tset linearDamp(value:Vector3){\r\n\t\tif(!Vector3.equals(this._linearDamp,value)){\r\n\t\t\tvalue.cloneTo(this._linearDamp);\r\n\t\t\tthis.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_X,value.x);\r\n\t\t\tthis.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y,value.y);\r\n\t\t\tthis.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z,value.z);\r\n\t\t}\r\n\t}\r\n\r\n\tget linearDamp():Vector3{\r\n\t\treturn this._linearDamp;\r\n\t}\r\n\r\n\t/**\r\n\t * 角度阻力\r\n\t */\r\n\tset angularDamp(value:Vector3){\r\n\t\tif(!Vector3.equals(this._angularDamp,value)){\r\n\t\t\tvalue.cloneTo(this._angularDamp);\r\n\t\t\tthis.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X,value.x);\r\n\t\t\tthis.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y,value.y);\r\n\t\t\tthis.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z,value.z);\r\n\t\t}\r\n\t}\r\n\r\n\tget angularDamp():Vector3{\r\n\t\treturn this._angularDamp;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置锚点\r\n\t */\r\n\tset anchor(value:Vector3){\r\n\t\tvalue.cloneTo(this._anchor);\r\n\t\tthis.setFrames();\r\n\t}\r\n\r\n\tget anchor(){\r\n\t\treturn this._anchor;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置链接锚点\r\n\t */\r\n\tset connectAnchor(value:Vector3){\r\n\t\tvalue.cloneTo(this._connectAnchor);\r\n\t\tthis.setFrames();\r\n\t}\r\n\r\n\tget connectAnchor():Vector3{\r\n\t\treturn this._connectAnchor;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置对象自然旋转的局部轴主轴，axis2为副轴\r\n\t * @param axis1 \r\n\t * @param axis2 \r\n\t */\r\n\tsetAxis(axis:Vector3, secondaryAxis:Vector3): void {\r\n\t\tif(!this._btConstraint)\r\n\t\t\treturn;\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tthis._axis.setValue(axis.x,axis.y,axis.y);\r\n\t\tthis._secondaryAxis.setValue(secondaryAxis.x,secondaryAxis.y,secondaryAxis.z);\r\n\t\tthis._btAxis = bt.btVector3_setValue(-axis.x, axis.y, axis.z);\r\n\t\tthis._btSecondaryAxis = bt.btVector3_setValue(-secondaryAxis.x, secondaryAxis.y, secondaryAxis.z);\r\n\t\tbt.btGeneric6DofSpring2Constraint_setAxis(this._btConstraint, this._btAxis, this._btSecondaryAxis);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal \r\n\t */\r\n\tsetLimit(axis:number,motionType:number,low:number, high:number): void {\r\n\t\tif(!this._btConstraint)\r\n\t\t\treturn;\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tswitch(motionType)\r\n\t\t{\r\n\t\t\tcase ConfigurableConstraint.CONFIG_MOTION_TYPE_LOCKED:\r\n\t\t\t\tbt.btGeneric6DofSpring2Constraint_setLimit(this._btConstraint, axis, 0, 0);\r\n\t\t\t\t break;\r\n\t\t\tcase ConfigurableConstraint.CONFIG_MOTION_TYPE_LIMITED:\r\n\t\t\t\tif(low<high)\r\n\t\t\t\tbt.btGeneric6DofSpring2Constraint_setLimit(this._btConstraint, axis, low, high);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ConfigurableConstraint.CONFIG_MOTION_TYPE_FREE:\r\n\t\t\t\tbt.btGeneric6DofSpring2Constraint_setLimit(this._btConstraint, axis, 1, 0);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"No Type of Axis Motion\";\t \r\n\t\t} \r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tsetSpring(axis:number, springValue:number, limitIfNeeded:boolean = true): void {\r\n\t\tif(!this._btConstraint)\r\n\t\t\treturn;\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tvar enableSpring:Boolean = springValue>0;\r\n\t\tbt.btGeneric6DofSpring2Constraint_enableSpring(this._btConstraint, axis, enableSpring);\r\n\t\tif(enableSpring)\r\n\t\tbt.btGeneric6DofSpring2Constraint_setStiffness(this._btConstraint, axis, springValue, limitIfNeeded);\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tsetBounce(axis:number, bounce:number): void {\r\n\t\tif(!this._btConstraint)\r\n\t\t\treturn;\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tbounce = bounce<=0?0:bounce;\r\n\t\tbt.btGeneric6DofSpring2Constraint_setBounce(this._btConstraint, axis, bounce);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tsetDamping(axis:number, damp:number, limitIfNeeded:boolean = true): void {\r\n\t\tif(!this._btConstraint)\r\n\t\t\treturn;\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tdamp = damp<=0?0:damp;\r\n\t\tbt.btGeneric6DofSpring2Constraint_setDamping(this._btConstraint, axis, damp, limitIfNeeded);\r\n\t} \r\n\t/**\r\n\t * TODO\r\n\t * @internal\r\n\t */\r\n\tsetEquilibriumPoint(axis:number, equilibriumPoint:number): void {\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tbt.btGeneric6DofSpring2Constraint_setEquilibriumPoint(this._btConstraint, axis, equilibriumPoint);\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tenableMotor(axis:number, isEnableMotor:boolean): void {\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tbt.btGeneric6DofSpring2Constraint_enableMotor(this._btConstraint, axis, isEnableMotor);\r\n\t}\r\n\t/**\r\n\t * TODO\r\n\t * @internal\r\n\t */\r\n\tsetServo(axis:number, onOff:boolean): void {\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tbt.btGeneric6DofSpring2Constraint_setServo(this._btConstraint, axis, onOff);\r\n\t}\r\n\t/**\r\n\t * TODO\r\n\t * @internal\r\n\t */\r\n\tsetTargetVelocity(axis:number, velocity:number): void {\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tbt.btGeneric6DofSpring2Constraint_setTargetVelocity(this._btConstraint, axis, velocity);\r\n\t}\r\n\t/**\r\n\t * TODO\r\n\t * @internal\r\n\t */\r\n\tsetTargetPosition(axis:number, target:number): void {\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tbt.btGeneric6DofSpring2Constraint_setServoTarget(this._btConstraint, axis, target);\r\n\t}\r\n\t/**\r\n\t * TODO\r\n\t * @internal\r\n\t */\r\n\tsetMaxMotorForce(axis:number, force:number): void {\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tbt.btGeneric6DofSpring2Constraint_setMaxMotorForce(this._btConstraint, axis, force);\r\n\t}\t\r\n\t/**\r\n\t * TODO\r\n\t * @internal\r\n\t */\r\n\tsetParam(axis:number, constraintParams:number, value:number): void {\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tbt.btTypedConstraint_setParam(this._btConstraint, axis, constraintParams, value);\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tsetFrames(): void {\r\n\t\tsuper.setFrames();\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tif(!this._btConstraint)\r\n\t\t\treturn;\r\n\t\tbt.btGeneric6DofSpring2Constraint_setFrames(this._btConstraint, this._btframATrans, this._btframBTrans);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addToSimulation(): void {\r\n\t\tthis._simulation && this._simulation.addConstraint(this,this.enabled);\r\n    }\r\n    \r\n     /**\r\n\t * @internal\r\n\t */\r\n    _removeFromSimulation():void{\r\n\t\tthis._simulation.removeConstraint(this);\r\n\t\tthis._simulation = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_createConstraint():void{\r\n\t\tvar bt = Physics3D._bullet;\r\n\t\tthis._btConstraint = bt.btGeneric6DofSpring2Constraint_create(this.ownBody.btColliderObject, this._btframAPos, this.connectedBody.btColliderObject, this._btframBPos, ConfigurableConstraint.RO_XYZ);\r\n\t\tthis._btJointFeedBackObj = bt.btJointFeedback_create(this._btConstraint);\r\n\t\tbt.btTypedConstraint_setJointFeedback(this._btConstraint,this._btJointFeedBackObj);\r\n\t\tthis._simulation = ((<Scene3D>this.owner._scene)).physicsSimulation;\r\n\t\tthis._initAllConstraintInfo();\r\n\t\tthis._addToSimulation();\r\n\t\tPhysics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint,true);\r\n\t}\r\n\r\n\t_initAllConstraintInfo():void{\r\n\t\t//MotionMode\r\n\t\tthis.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_X,this._xMotion, -this._maxLinearLimit.x,-this._minLinearLimit.x);\r\n\t\tthis.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y,this._yMotion,this._minLinearLimit.y,this._maxLinearLimit.y);\r\n\t\tthis.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z,this._zMotion,this._minLinearLimit.z,this._maxLinearLimit.z);\r\n\t\tthis.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X,this._angularXMotion,-this._maxAngularLimit.x,-this._minAngularLimit.x);\r\n\t\tthis.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y,this._angularYMotion,this._minAngularLimit.y,this._maxAngularLimit.y);\r\n\t\tthis.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z,this._angularZMotion,this._minAngularLimit.z,this._maxAngularLimit.z);\r\n\t\tthis.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_X,this._linearLimitSpring.x);\r\n\t\tthis.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y,this._linearLimitSpring.y);\r\n\t\tthis.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z,this._linearLimitSpring.z);\r\n\t\tthis.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X,this._angularLimitSpring.x);\r\n\t\tthis.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y,this._angularLimitSpring.y);\r\n\t\tthis.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z,this._angularLimitSpring.z);\r\n\t\tthis.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_X,this._linearBounce.x);\r\n\t\tthis.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y,this._linearBounce.y);\r\n\t\tthis.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z,this._linearBounce.z);\r\n\t\tthis.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X,this._angularBounce.x);\r\n\t\tthis.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y,this._angularBounce.y);\r\n\t\tthis.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z,this._angularBounce.z);\r\n\t\tthis.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_X,this._linearDamp.x);\r\n\t\tthis.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y,this._linearDamp.y);\r\n\t\tthis.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z,this._linearDamp.z);\r\n\t\tthis.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X,this._angularDamp.x);\r\n\t\tthis.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y,this._angularDamp.y);\r\n\t\tthis.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z,this._angularDamp.z);\r\n\t\tthis.setFrames();\r\n\t\tthis.setEquilibriumPoint(0,0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_onAdded(): void {\r\n\t\tsuper._onAdded();\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_onEnable():void{\r\n\t\tif(!this._btConstraint)\r\n\t\t\treturn;\r\n\t\tsuper._onEnable();\r\n\r\n\t\r\n\t\tif(this._btConstraint)\r\n\t\tPhysics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint,true);\r\n\t}\r\n\r\n\t_onDisable():void{\r\n\t\tsuper._onDisable();\r\n\t\tif(!this.connectedBody)\r\n\t\t\tthis._removeFromSimulation();\r\n\t\tif(this._btConstraint)\r\n\t\tPhysics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint,false);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_parse(data: any,interactMap:any = null): void {\r\n\t\tsuper._parse(data);\r\n\t\tthis._axis.fromArray(data.axis);\r\n\t\tthis._secondaryAxis.fromArray(data.secondaryAxis);\r\n\t\tvar limitlimit:number = data.linearLimit;\r\n\t\tthis._minLinearLimit.setValue(-limitlimit,-limitlimit,-limitlimit);\r\n\t\tthis._maxLinearLimit.setValue(limitlimit,limitlimit,limitlimit);\r\n\t\tvar limitSpring:number = data.linearLimitSpring;\r\n\t\tthis._linearLimitSpring.setValue(limitSpring,limitSpring,limitSpring);\r\n\t\tvar limitDamp:number = data.linearLimitDamper;\r\n\t\tthis._linearDamp.setValue(limitDamp,limitDamp,limitDamp);\r\n\t\tvar limitBounciness:number = data.linearLimitBounciness;\r\n\t\tthis._linearBounce.setValue(limitBounciness,limitBounciness,limitBounciness);\r\n\t\tvar xlowAngularLimit:number = data.lowAngularXLimit;\r\n\t\tvar xhighAngularLimit:number = data.highAngularXLimit;\r\n\t\tvar yAngularLimit:number = data.angularYLimit;\r\n\t\tvar zAngularLimit:number = data.angularZLimit;\r\n\t\tthis._minAngularLimit.setValue(xlowAngularLimit,-yAngularLimit,-zAngularLimit);\r\n\t\tthis._maxAngularLimit.setValue(xhighAngularLimit,yAngularLimit,zAngularLimit);\r\n\t\tvar xhighAngularBounciness:number = data.highAngularXLimitBounciness;\r\n\t\tvar ybounciness:number = data.angularYLimitBounciness;\r\n\t\tvar zbounciness:number = data.angularZLimitBounciness;\r\n\t\tthis._angularBounce.setValue(xhighAngularBounciness,ybounciness,zbounciness);\r\n\t\tvar xAngularSpring:number = data.angularXLimitSpring;\r\n\t\tvar yzAngularSpriny:number = data.angularYZLimitSpring;\r\n\t\tthis._angularLimitSpring.setValue(xAngularSpring,yzAngularSpriny,yzAngularSpriny);\r\n\t\tvar xAngularDamper:number = data.angularXLimitDamper;\r\n\t\tvar yzAngularDamper:number = data.angularYZLimitDamper;\r\n\t\tthis._angularDamp.setValue(xAngularDamper,yzAngularDamper,yzAngularDamper);\r\n\r\n\t\tthis.XMotion = data.xMotion;\r\n\t\tthis.YMotion = data.yMotion;\r\n\t\tthis.ZMotion = data.zMotion;\r\n\t\tthis.angularXMotion = data.angularXMotion;\r\n\t\tthis.angularYMotion = data.angularYMotion;\r\n\t\tthis.angularZMotion = data.angularZMotion;\t\r\n\t\t\r\n\t\tif(data.rigidbodyID!=-1&&data.connectRigidbodyID!=-1){\r\n\t\t\tinteractMap.component.push(this);\r\n\t\t\tinteractMap.data.push(data);\r\n\t\t}\r\n\t\t(data.breakForce != undefined) && (this.breakForce = data.breakForce);\r\n\t\t(data.breakTorque != undefined) && (this.breakTorque = data.breakTorque);\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_parseInteractive(data:any = null,spriteMap:any = null){\r\n\t\tvar rigidBodySprite:Sprite3D = spriteMap[data.rigidbodyID];\r\n\t\tvar rigidBody: Rigidbody3D = rigidBodySprite.getComponent(Rigidbody3D);\r\n\t\tvar connectSprite: Sprite3D = spriteMap[data.connectRigidbodyID];\r\n\t\tvar connectRigidbody: Rigidbody3D = connectSprite.getComponent(Rigidbody3D);\r\n\t\tthis.ownBody = rigidBody;\r\n\t\tthis.connectedBody = connectRigidbody;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _onDestroy(): void {\r\n\t\tsuper._onDestroy();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(dest: Component): void {\r\n\t\t\r\n\t}\r\n}","import { Config } from \"./Config\";\r\nimport { Config3D } from \"./Config3D\";\r\nimport { ILaya3D } from \"./ILaya3D\";\r\nimport { Laya } from \"./Laya\";\r\nimport { AnimationClip } from \"./laya/d3/animation/AnimationClip\";\r\nimport { Animator } from \"./laya/d3/component/Animator\";\r\nimport { PostProcess } from \"./laya/d3/component/PostProcess\";\r\nimport { Avatar } from \"./laya/d3/core/Avatar\";\r\nimport { BaseMaterial } from \"./laya/d3/core/material/BaseMaterial\";\r\nimport { BlinnPhongMaterial } from \"./laya/d3/core/material/BlinnPhongMaterial\";\r\nimport { EffectMaterial } from \"./laya/d3/core/material/EffectMaterial\";\r\nimport { ExtendTerrainMaterial } from \"./laya/d3/core/material/ExtendTerrainMaterial\";\r\nimport { Material } from \"./laya/d3/core/material/Material\";\r\nimport { PBRMaterial } from \"./laya/d3/core/material/PBRMaterial\";\r\nimport { PBRSpecularMaterial } from \"./laya/d3/core/material/PBRSpecularMaterial\";\r\nimport { PBRStandardMaterial } from \"./laya/d3/core/material/PBRStandardMaterial\";\r\nimport { SkyBoxMaterial } from \"./laya/d3/core/material/SkyBoxMaterial\";\r\nimport { SkyProceduralMaterial } from \"./laya/d3/core/material/SkyProceduralMaterial\";\r\nimport { UnlitMaterial } from \"./laya/d3/core/material/UnlitMaterial\";\r\nimport { WaterPrimaryMaterial } from \"./laya/d3/core/material/WaterPrimaryMaterial\";\r\nimport { MeshRenderer } from \"./laya/d3/core/MeshRenderer\";\r\nimport { MeshSprite3D } from \"./laya/d3/core/MeshSprite3D\";\r\nimport { ShuriKenParticle3D } from \"./laya/d3/core/particleShuriKen/ShuriKenParticle3D\";\r\nimport { ShurikenParticleMaterial } from \"./laya/d3/core/particleShuriKen/ShurikenParticleMaterial\";\r\nimport { PixelLineMaterial } from \"./laya/d3/core/pixelLine/PixelLineMaterial\";\r\nimport { PixelLineVertex } from \"./laya/d3/core/pixelLine/PixelLineVertex\";\r\nimport { Command } from \"./laya/d3/core/render/command/Command\";\r\nimport { RenderContext3D } from \"./laya/d3/core/render/RenderContext3D\";\r\nimport { ScreenQuad } from \"./laya/d3/core/render/ScreenQuad\";\r\nimport { ScreenTriangle } from \"./laya/d3/core/render/ScreenTriangle\";\r\nimport { RenderableSprite3D } from \"./laya/d3/core/RenderableSprite3D\";\r\nimport { Scene3D } from \"./laya/d3/core/scene/Scene3D\";\r\nimport { SkinnedMeshRenderer } from \"./laya/d3/core/SkinnedMeshRenderer\";\r\nimport { SkinnedMeshSprite3D } from \"./laya/d3/core/SkinnedMeshSprite3D\";\r\nimport { Sprite3D } from \"./laya/d3/core/Sprite3D\";\r\nimport { TrailMaterial } from \"./laya/d3/core/trail/TrailMaterial\";\r\nimport { TrailSprite3D } from \"./laya/d3/core/trail/TrailSprite3D\";\r\nimport { VertexTrail } from \"./laya/d3/core/trail/VertexTrail\";\r\nimport { FrustumCulling } from \"./laya/d3/graphics/FrustumCulling\";\r\nimport { MeshRenderDynamicBatchManager } from \"./laya/d3/graphics/MeshRenderDynamicBatchManager\";\r\nimport { MeshRenderStaticBatchManager } from \"./laya/d3/graphics/MeshRenderStaticBatchManager\";\r\nimport { SubMeshDynamicBatch } from \"./laya/d3/graphics/SubMeshDynamicBatch\";\r\nimport { SubMeshInstanceBatch } from \"./laya/d3/graphics/SubMeshInstanceBatch\";\r\nimport { VertexMesh } from \"./laya/d3/graphics/Vertex/VertexMesh\";\r\nimport { VertexPositionTerrain } from \"./laya/d3/graphics/Vertex/VertexPositionTerrain\";\r\nimport { VertexPositionTexture0 } from \"./laya/d3/graphics/Vertex/VertexPositionTexture0\";\r\nimport { VertexShurikenParticleBillboard } from \"./laya/d3/graphics/Vertex/VertexShurikenParticleBillboard\";\r\nimport { VertexShurikenParticleMesh } from \"./laya/d3/graphics/Vertex/VertexShurikenParticleMesh\";\r\nimport { VertexElementFormat } from \"./laya/d3/graphics/VertexElementFormat\";\r\nimport { HalfFloatUtils } from \"./laya/d3/math/HalfFloatUtils\";\r\nimport { Matrix4x4 } from \"./laya/d3/math/Matrix4x4\";\r\nimport { BulletInteractive } from \"./laya/d3/physics/BulletInteractive\";\r\nimport { CharacterController } from \"./laya/d3/physics/CharacterController\";\r\nimport { Physics3D } from \"./laya/d3/physics/Physics3D\";\r\nimport { PhysicsCollider } from \"./laya/d3/physics/PhysicsCollider\";\r\nimport { PhysicsSettings } from \"./laya/d3/physics/PhysicsSettings\";\r\nimport { Rigidbody3D } from \"./laya/d3/physics/Rigidbody3D\";\r\nimport { Mesh } from \"./laya/d3/resource/models/Mesh\";\r\nimport { PrimitiveMesh } from \"./laya/d3/resource/models/PrimitiveMesh\";\r\nimport { SkyBox } from \"./laya/d3/resource/models/SkyBox\";\r\nimport { SkyDome } from \"./laya/d3/resource/models/SkyDome\";\r\nimport { TextureCube } from \"./laya/d3/resource/TextureCube\";\r\nimport { Shader3D } from \"./laya/d3/shader/Shader3D\";\r\nimport { ShaderData } from \"./laya/d3/shader/ShaderData\";\r\nimport { ShaderInit3D } from \"./laya/d3/shader/ShaderInit3D\";\r\nimport { ShaderInstance } from \"./laya/d3/shader/ShaderInstance\";\r\nimport { Scene3DUtils } from \"./laya/d3/utils/Scene3DUtils\";\r\nimport { Utils3D } from \"./laya/d3/utils/Utils3D\";\r\nimport { Node } from \"./laya/display/Node\";\r\nimport { Event } from \"./laya/events/Event\";\r\nimport { CommandEncoder } from \"./laya/layagl/CommandEncoder\";\r\nimport { LayaGL } from \"./laya/layagl/LayaGL\";\r\nimport { LayaGLRunner } from \"./laya/layagl/LayaGLRunner\";\r\nimport { Loader } from \"./laya/net/Loader\";\r\nimport { LoaderManager } from \"./laya/net/LoaderManager\";\r\nimport { URL } from \"./laya/net/URL\";\r\nimport { Render } from \"./laya/renders/Render\";\r\nimport { FilterMode } from \"./laya/resource/FilterMode\";\r\nimport { Resource } from \"./laya/resource/Resource\";\r\nimport { Texture2D } from \"./laya/resource/Texture2D\";\r\nimport { TextureFormat } from \"./laya/resource/TextureFormat\";\r\nimport { WarpMode } from \"./laya/resource/WrapMode\";\r\nimport { Byte } from \"./laya/utils/Byte\";\r\nimport { ClassUtils } from \"./laya/utils/ClassUtils\";\r\nimport { Handler } from \"./laya/utils/Handler\";\r\nimport { RunDriver } from \"./laya/utils/RunDriver\";\r\nimport { SystemUtils } from \"./laya/webgl/SystemUtils\";\r\nimport { WebGL } from \"./laya/webgl/WebGL\";\r\nimport { WebGLContext } from \"./laya/webgl/WebGLContext\";\r\nimport { MeshReader } from \"./laya/d3/loaders/MeshReader\";\r\nimport { SkyPanoramicMaterial } from \"./laya/d3/core/material/SkyPanoramicMaterial\";\r\nimport { ShadowUtils } from \"./laya/d3/core/light/ShadowUtils\";\r\nimport { FixedConstraint } from \"./laya/d3/physics/constraints/FixedConstraint\";\r\nimport { ConfigurableConstraint } from \"./laya/d3/physics/constraints/ConfigurableConstraint\";\r\nimport { Camera } from \"./laya/d3/core/Camera\";\r\nimport { ShadowCasterPass, ShadowLightType } from \"./laya/d3/shadowMap/ShadowCasterPass\";\r\nimport { SimpleSkinnedMeshRenderer } from \"./laya/d3/core/SimpleSkinnedMeshRenderer\";\r\nimport { Utils } from \"./laya/utils/Utils\";\r\nimport { SimpleSkinnedMeshSprite3D } from \"./laya/d3/core/SimpleSkinnedMeshSprite3D\";\r\n/**\r\n * <code>Laya3D</code> 类用于初始化3D设置。\r\n */\r\nexport class Laya3D {\r\n\t/**Hierarchy资源。*/\r\n\tstatic HIERARCHY: string = \"HIERARCHY\";//兼容\r\n\t/**Mesh资源。*/\r\n\tstatic MESH: string = \"MESH\";//兼容\r\n\t/**Material资源。*/\r\n\tstatic MATERIAL: string = \"MATERIAL\";//兼容\r\n\t/**Texture2D资源。*/\r\n\tstatic TEXTURE2D: string = \"TEXTURE2D\";//兼容\r\n\t/**TextureCube资源。*/\r\n\tstatic TEXTURECUBE: string = \"TEXTURECUBE\";//兼容\r\n\t/**TextureCube资源。*/\r\n\tstatic TEXTURECUBEBIN: string = \"TEXTURECUBEBIN\";//兼容\r\n\t/**AnimationClip资源。*/\r\n\tstatic ANIMATIONCLIP: string = \"ANIMATIONCLIP\";//兼容\r\n\t/**Avatar资源。*/\r\n\tstatic AVATAR: string = \"AVATAR\";//兼容\r\n\t/**Terrain资源。*/\r\n\tstatic TERRAINHEIGHTDATA: string = \"TERRAINHEIGHTDATA\";\r\n\t/**Terrain资源。*/\r\n\tstatic TERRAINRES: string = \"TERRAIN\";\r\n\t/**SimpleAnimator资源。 */\r\n\tstatic SIMPLEANIMATORBIN: string = \"SIMPLEANIMATOR\";\r\n\r\n\t/**@internal */\r\n\tprivate static _innerFirstLevelLoaderManager: LoaderManager = new LoaderManager();//Mesh \r\n\t/**@internal */\r\n\tprivate static _innerSecondLevelLoaderManager: LoaderManager = new LoaderManager();//Material\r\n\t/**@internal */\r\n\tprivate static _innerThirdLevelLoaderManager: LoaderManager = new LoaderManager();//TextureCube、TerrainResou\r\n\t/**@internal */\r\n\tprivate static _innerFourthLevelLoaderManager: LoaderManager = new LoaderManager();//Texture2D、Image、Avatar、AnimationClip\r\n\r\n\t/**@internal */\r\n\tprivate static _isInit: boolean = false;\r\n\r\n\r\n\t/**@internal */\r\n\tstatic _editerEnvironment: boolean = false;\r\n\r\n\t/**@private */\r\n\tstatic physicsSettings: PhysicsSettings = new PhysicsSettings();//TODO:\r\n\r\n\t/**\r\n\t * 获取是否可以启用物理。\r\n\t * @param 是否启用物理。\r\n\t */\r\n\tstatic get enablePhysics(): any {\r\n\t\treturn Physics3D._enablePhysics;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tstatic _cancelLoadByUrl(url: string): void {\r\n\t\tLaya.loader.cancelLoadByUrl(url);\r\n\t\tLaya3D._innerFirstLevelLoaderManager.cancelLoadByUrl(url);\r\n\t\tLaya3D._innerSecondLevelLoaderManager.cancelLoadByUrl(url);\r\n\t\tLaya3D._innerThirdLevelLoaderManager.cancelLoadByUrl(url);\r\n\t\tLaya3D._innerFourthLevelLoaderManager.cancelLoadByUrl(url);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _changeWebGLSize(width: number, height: number): void {\r\n\t\tWebGL.onStageResize(width, height);\r\n\t\tRenderContext3D.clientWidth = width;\r\n\t\tRenderContext3D.clientHeight = height;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static __init__(width: number, height: number, config: Config3D): void {\r\n\t\tConfig.isAntialias = config.isAntialias;\r\n\t\tConfig.isAlpha = config.isAlpha;\r\n\t\tConfig.premultipliedAlpha = config.premultipliedAlpha;\r\n\t\tConfig.isStencil = config.isStencil;\r\n\r\n\t\tif (!WebGL.enable()) {\r\n\t\t\talert(\"Laya3D init error,must support webGL!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tRunDriver.changeWebGLSize = Laya3D._changeWebGLSize;\r\n\t\tRender.is3DMode = true;\r\n\t\tLaya.init(width, height);\r\n\t\tif (!Render.supportWebGLPlusRendering) {\r\n\t\t\tLayaGL.instance = WebGLContext.mainContext;\r\n\t\t\t(<any>LayaGL.instance).createCommandEncoder = function (reserveSize: number = 128, adjustSize: number = 64, isSyncToRenderThread: boolean = false): CommandEncoder {\r\n\t\t\t\treturn new CommandEncoder(this, reserveSize, adjustSize, isSyncToRenderThread);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconfig._multiLighting = config.enableMultiLight && SystemUtils.supportTextureFormat(TextureFormat.R32G32B32A32);\r\n\r\n\t\tILaya3D.Shader3D = Shader3D;\r\n\t\tILaya3D.Scene3D = Scene3D;\r\n\t\tILaya3D.MeshRenderStaticBatchManager = MeshRenderStaticBatchManager;\r\n\t\tILaya3D.MeshRenderDynamicBatchManager = MeshRenderDynamicBatchManager;\r\n\t\tILaya3D.SubMeshDynamicBatch = SubMeshDynamicBatch;\r\n\t\tILaya3D.Laya3D = Laya3D;\r\n\t\tILaya3D.Matrix4x4 = Matrix4x4;\r\n\t\tILaya3D.Physics3D = Physics3D;\r\n\t\tILaya3D.ShadowLightType = ShadowLightType;\r\n\t\t//函数里面会有判断isConchApp\r\n\t\tLaya3D.enableNative3D();\r\n\r\n\t\tif(config.isUseCannonPhysicsEngine)\r\n\t\tPhysics3D.__cannoninit__();\r\n\t\t\r\n\t\tPhysics3D.__bulletinit__();\r\n\r\n\t\tVertexElementFormat.__init__();\r\n\t\tVertexMesh.__init__();\r\n\t\tVertexShurikenParticleBillboard.__init__();\r\n\t\tVertexShurikenParticleMesh.__init__();\r\n\t\tVertexPositionTexture0.__init__();\r\n\t\tVertexTrail.__init__();\r\n\t\tVertexPositionTerrain.__init__();\r\n\t\tPixelLineVertex.__init__();\r\n\t\tSubMeshInstanceBatch.__init__();\r\n\t\tSubMeshDynamicBatch.__init__();\r\n\t\tShaderInit3D.__init__();\r\n\t\tShadowUtils.init();\r\n\t\tPBRMaterial.__init__();\r\n\t\tPBRStandardMaterial.__init__();\r\n\t\tPBRSpecularMaterial.__init__();\r\n\t\tSkyPanoramicMaterial.__init__();\r\n\t\tMesh.__init__();\r\n\t\tPrimitiveMesh.__init__();\r\n\t\tSprite3D.__init__();\r\n\t\tRenderableSprite3D.__init__();\r\n\t\tMeshSprite3D.__init__();\r\n\t\tSkinnedMeshSprite3D.__init__();\r\n\t\tSimpleSkinnedMeshSprite3D.__init__();\r\n\t\tShuriKenParticle3D.__init__();\r\n\t\tTrailSprite3D.__init__();\r\n\t\tPostProcess.__init__();\r\n\t\tScene3D.__init__();\r\n\t\tMeshRenderStaticBatchManager.__init__();\r\n\r\n\t\tMaterial.__initDefine__();\r\n\t\tBaseMaterial.__initDefine__();\r\n\t\tBlinnPhongMaterial.__initDefine__();\r\n\t\t// PBRStandardMaterial.__initDefine__();\r\n\t\t// PBRSpecularMaterial.__initDefine__();\r\n\t\tSkyProceduralMaterial.__initDefine__();\r\n\t\tUnlitMaterial.__initDefine__();\r\n\t\tTrailMaterial.__initDefine__();\r\n\t\tEffectMaterial.__initDefine__();\r\n\t\tWaterPrimaryMaterial.__initDefine__();\r\n\t\tShurikenParticleMaterial.__initDefine__();\r\n\t\tExtendTerrainMaterial.__initDefine__();\r\n\t\tPixelLineMaterial.__initDefine__();\r\n\t\tSkyBoxMaterial.__initDefine__();\r\n\r\n\r\n\t\tCommand.__init__();\r\n\r\n\t\t//注册类命,解析的时候需要\r\n\t\tClassUtils.regClass(\"Laya.SkyPanoramicMaterial\", SkyPanoramicMaterial);\r\n\t\tClassUtils.regClass(\"Laya.EffectMaterial\", EffectMaterial);\r\n\t\tClassUtils.regClass(\"Laya.UnlitMaterial\", UnlitMaterial);\r\n\t\tClassUtils.regClass(\"Laya.BlinnPhongMaterial\", BlinnPhongMaterial);\r\n\t\tClassUtils.regClass(\"Laya.SkyProceduralMaterial\", SkyProceduralMaterial);\r\n\t\tClassUtils.regClass(\"Laya.PBRStandardMaterial\", PBRStandardMaterial);\r\n\t\tClassUtils.regClass(\"Laya.PBRSpecularMaterial\", PBRSpecularMaterial);\r\n\t\tClassUtils.regClass(\"Laya.SkyBoxMaterial\", SkyBoxMaterial);\r\n\t\tClassUtils.regClass(\"Laya.WaterPrimaryMaterial\", WaterPrimaryMaterial);\r\n\t\tClassUtils.regClass(\"Laya.ExtendTerrainMaterial\", ExtendTerrainMaterial);\r\n\t\tClassUtils.regClass(\"Laya.ShurikenParticleMaterial\", ShurikenParticleMaterial);\r\n\t\tClassUtils.regClass(\"Laya.TrailMaterial\", TrailMaterial);\r\n\t\tClassUtils.regClass(\"Laya.PhysicsCollider\", PhysicsCollider);\r\n\t\tClassUtils.regClass(\"Laya.Rigidbody3D\", Rigidbody3D);\r\n\t\tClassUtils.regClass(\"Laya.CharacterController\", CharacterController);\r\n\t\tClassUtils.regClass(\"Laya.Animator\", Animator);\r\n\r\n\t\tClassUtils.regClass(\"PhysicsCollider\", PhysicsCollider);\r\n\t\tClassUtils.regClass(\"CharacterController\", CharacterController);\r\n\t\tClassUtils.regClass(\"Animator\", Animator);\r\n\t\tClassUtils.regClass(\"Rigidbody3D\", Rigidbody3D);\r\n\t\tClassUtils.regClass(\"FixedConstraint\", FixedConstraint);\r\n\t\tClassUtils.regClass(\"ConfigurableConstraint\",ConfigurableConstraint);\r\n\r\n\r\n\t\tPixelLineMaterial.defaultMaterial = new PixelLineMaterial();\r\n\t\tBlinnPhongMaterial.defaultMaterial = new BlinnPhongMaterial();\r\n\t\tEffectMaterial.defaultMaterial = new EffectMaterial();\r\n\t\t// PBRStandardMaterial.defaultMaterial = new PBRStandardMaterial();\r\n\t\t// PBRSpecularMaterial.defaultMaterial = new PBRSpecularMaterial();\r\n\t\tUnlitMaterial.defaultMaterial = new UnlitMaterial();\r\n\t\tShurikenParticleMaterial.defaultMaterial = new ShurikenParticleMaterial();\r\n\t\tTrailMaterial.defaultMaterial = new TrailMaterial();\r\n\t\tSkyProceduralMaterial.defaultMaterial = new SkyProceduralMaterial();\r\n\t\tSkyBoxMaterial.defaultMaterial = new SkyBoxMaterial();\r\n\t\tWaterPrimaryMaterial.defaultMaterial = new WaterPrimaryMaterial();\r\n\r\n\t\tPixelLineMaterial.defaultMaterial.lock = true;//todo:\r\n\t\tBlinnPhongMaterial.defaultMaterial.lock = true;\r\n\t\tEffectMaterial.defaultMaterial.lock = true;\r\n\t\t// PBRStandardMaterial.defaultMaterial.lock = true;\r\n\t\t// PBRSpecularMaterial.defaultMaterial.lock = true;\r\n\t\tUnlitMaterial.defaultMaterial.lock = true;\r\n\t\tShurikenParticleMaterial.defaultMaterial.lock = true;\r\n\t\tTrailMaterial.defaultMaterial.lock = true;\r\n\t\tSkyProceduralMaterial.defaultMaterial.lock = true;\r\n\t\tSkyBoxMaterial.defaultMaterial.lock = true;\r\n\t\tWaterPrimaryMaterial.defaultMaterial.lock = true;\r\n\t\tTexture2D.__init__();\r\n\t\tTextureCube.__init__();\r\n\t\tSkyBox.__init__();\r\n\t\tSkyDome.__init__();\r\n\t\tScreenQuad.__init__();\r\n\t\tScreenTriangle.__init__();\r\n\t\tFrustumCulling.__init__();\r\n\t\tHalfFloatUtils.__init__();\r\n\r\n\t\tvar createMap: any = LoaderManager.createMap;\r\n\t\tcreateMap[\"lh\"] = [Laya3D.HIERARCHY, Scene3DUtils._parse];\r\n\t\tcreateMap[\"ls\"] = [Laya3D.HIERARCHY, Scene3DUtils._parseScene];\r\n\t\tcreateMap[\"lm\"] = [Laya3D.MESH, MeshReader._parse];\r\n\t\tcreateMap[\"lmat\"] = [Laya3D.MATERIAL, Material._parse];\r\n\t\tcreateMap[\"jpg\"] = [Laya3D.TEXTURE2D, Texture2D._parse];\r\n\t\tcreateMap[\"jpeg\"] = [Laya3D.TEXTURE2D, Texture2D._parse];\r\n\t\tcreateMap[\"bmp\"] = [Laya3D.TEXTURE2D, Texture2D._parse];\r\n\t\tcreateMap[\"gif\"] = [Laya3D.TEXTURE2D, Texture2D._parse];\r\n\t\tcreateMap[\"png\"] = [Laya3D.TEXTURE2D, Texture2D._parse];\r\n\t\tcreateMap[\"dds\"] = [Laya3D.TEXTURE2D, Texture2D._parse];\r\n\t\tcreateMap[\"ktx\"] = [Laya3D.TEXTURE2D, Texture2D._parse];\r\n\t\tcreateMap[\"pvr\"] = [Laya3D.TEXTURE2D, Texture2D._parse];\r\n\t\tcreateMap[\"lani\"] = [Laya3D.ANIMATIONCLIP, AnimationClip._parse];\r\n\t\tcreateMap[\"lav\"] = [Laya3D.AVATAR, Avatar._parse];\r\n\t\tcreateMap[\"ltc\"] = [Laya3D.TEXTURECUBE, TextureCube._parse];\r\n\t\tcreateMap[\"ltcb\"] = [Laya3D.TEXTURECUBEBIN, TextureCube._parseBin];\r\n\t\t//为其他平台添加的兼容代码,临时TODO：\r\n\t\tcreateMap[\"ltcb.ls\"] = [Laya3D.TEXTURECUBEBIN, TextureCube._parseBin];\r\n\t\tcreateMap[\"lanit.ls\"] = [Laya3D.TEXTURE2D,Texture2D._SimpleAnimatorTextureParse];\r\n\r\n\t\tvar parserMap: any = Loader.parserMap;\r\n\t\tparserMap[Laya3D.HIERARCHY] = Laya3D._loadHierarchy;\r\n\t\tparserMap[Laya3D.MESH] = Laya3D._loadMesh;\r\n\t\tparserMap[Laya3D.MATERIAL] = Laya3D._loadMaterial;\r\n\t\tparserMap[Laya3D.TEXTURECUBE] = Laya3D._loadTextureCube;\r\n\t\tparserMap[Laya3D.TEXTURECUBEBIN] = Laya3D._loadTextureCubeBin;\r\n\t\tparserMap[Laya3D.TEXTURE2D] = Laya3D._loadTexture2D;\r\n\t\tparserMap[Laya3D.ANIMATIONCLIP] = Laya3D._loadAnimationClip;\r\n\t\tparserMap[Laya3D.AVATAR] = Laya3D._loadAvatar;\r\n\t\tparserMap[Laya3D.SIMPLEANIMATORBIN] = Laya3D._loadSimpleAnimator;\r\n\t\t//parserMap[Laya3D.TERRAINRES] = _loadTerrain;\r\n\t\t//parserMap[Laya3D.TERRAINHEIGHTDATA] = _loadTerrain;\r\n\r\n\t\tLaya3D._innerFirstLevelLoaderManager.on(Event.ERROR, null, Laya3D._eventLoadManagerError);\r\n\t\tLaya3D._innerSecondLevelLoaderManager.on(Event.ERROR, null, Laya3D._eventLoadManagerError);\r\n\t\tLaya3D._innerThirdLevelLoaderManager.on(Event.ERROR, null, Laya3D._eventLoadManagerError);\r\n\t\tLaya3D._innerFourthLevelLoaderManager.on(Event.ERROR, null, Laya3D._eventLoadManagerError);\r\n\t}\r\n\r\n\tprivate static enableNative3D(): void {\r\n\t\tvar shaderData: any = ShaderData;\r\n\t\tvar shader3D: any = ShaderInstance;\r\n\t\tvar skinnedMeshRender: any = SkinnedMeshRenderer;\r\n\t\tvar avatar: any = Avatar;\r\n\t\tvar frustumCulling: any = FrustumCulling;\r\n\t\tvar meshRender: any = MeshRenderer;\r\n\t\tif (Render.supportWebGLPlusRendering) {\r\n\t\t\t//替换ShaderData的函数\r\n\t\t\tshaderData.prototype._initData = shaderData.prototype._initDataForNative;\r\n\t\t\tshaderData.prototype.setBool = shaderData.prototype.setBoolForNative;\r\n\t\t\tshaderData.prototype.getBool = shaderData.prototype.getBoolForNative;\r\n\t\t\tshaderData.prototype.setInt = shaderData.prototype.setIntForNative;\r\n\t\t\tshaderData.prototype.getInt = shaderData.prototype.getIntForNative;\r\n\t\t\tshaderData.prototype.setNumber = shaderData.prototype.setNumberForNative;\r\n\t\t\tshaderData.prototype.getNumber = shaderData.prototype.getNumberForNative;\r\n\t\t\tshaderData.prototype.setVector = shaderData.prototype.setVectorForNative;\r\n\t\t\tshaderData.prototype.getVector = shaderData.prototype.getVectorForNative;\r\n\t\t\tshaderData.prototype.setVector2 = shaderData.prototype.setVector2ForNative;\r\n\t\t\tshaderData.prototype.getVector2 = shaderData.prototype.getVector2ForNative;\r\n\t\t\tshaderData.prototype.setVector3 = shaderData.prototype.setVector3ForNative;\r\n\t\t\tshaderData.prototype.getVector3 = shaderData.prototype.getVector3ForNative;\r\n\t\t\tshaderData.prototype.setQuaternion = shaderData.prototype.setQuaternionForNative;\r\n\t\t\tshaderData.prototype.getQuaternion = shaderData.prototype.getQuaternionForNative;\r\n\t\t\tshaderData.prototype.setMatrix4x4 = shaderData.prototype.setMatrix4x4ForNative;\r\n\t\t\tshaderData.prototype.getMatrix4x4 = shaderData.prototype.getMatrix4x4ForNative;\r\n\t\t\tshaderData.prototype.setBuffer = shaderData.prototype.setBufferForNative;\r\n\t\t\tshaderData.prototype.getBuffer = shaderData.prototype.getBufferForNative;\r\n\t\t\tshaderData.prototype.setTexture = shaderData.prototype.setTextureForNative;\r\n\t\t\tshaderData.prototype.getTexture = shaderData.prototype.getTextureForNative;\r\n\t\t\tshaderData.prototype.setAttribute = shaderData.prototype.setAttributeForNative;\r\n\t\t\tshaderData.prototype.getAttribute = shaderData.prototype.getAttributeForNative;\r\n\t\t\tshaderData.prototype.cloneTo = shaderData.prototype.cloneToForNative;\r\n\t\t\tshaderData.prototype.getData = shaderData.prototype.getDataForNative;\r\n\t\t\tshader3D.prototype._uniformMatrix2fv = shader3D.prototype._uniformMatrix2fvForNative;\r\n\t\t\tshader3D.prototype._uniformMatrix3fv = shader3D.prototype._uniformMatrix3fvForNative;\r\n\t\t\tshader3D.prototype._uniformMatrix4fv = shader3D.prototype._uniformMatrix4fvForNative;\r\n\t\t\tLayaGLRunner.uploadShaderUniforms = LayaGLRunner.uploadShaderUniformsForNative;\r\n\t\t}\r\n\r\n\t\tif (Render.supportWebGLPlusCulling) {\r\n\t\t\tfrustumCulling.renderObjectCulling = FrustumCulling.renderObjectCullingNative;\r\n\t\t}\r\n\r\n\t\tif (Render.supportWebGLPlusAnimation) {\r\n\t\t\tavatar.prototype._cloneDatasToAnimator = avatar.prototype._cloneDatasToAnimatorNative;\r\n\t\t\tvar animationClip: any = AnimationClip;\r\n\t\t\tanimationClip.prototype._evaluateClipDatasRealTime = animationClip.prototype._evaluateClipDatasRealTimeForNative;\r\n\t\t\tskinnedMeshRender.prototype._computeSkinnedData = skinnedMeshRender.prototype._computeSkinnedDataForNative;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *@private\r\n\t */\r\n\tprivate static formatRelativePath(base: string, value: string): string {\r\n\t\tvar path: string;\r\n\t\tpath = base + value;\r\n\r\n\t\tvar char1: string = value.charAt(0);\r\n\t\tif (char1 === \".\") {\r\n\t\t\tvar parts: any[] = path.split(\"/\");\r\n\t\t\tfor (var i: number = 0, len: number = parts.length; i < len; i++) {\r\n\t\t\t\tif (parts[i] == '..') {\r\n\t\t\t\t\tvar index: number = i - 1;\r\n\t\t\t\t\tif (index > 0 && parts[index] !== '..') {\r\n\t\t\t\t\t\tparts.splice(index, 2);\r\n\t\t\t\t\t\ti -= 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpath = parts.join('/');\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _endLoad(loader: Loader, content: any = null, subResous: any[] = null): void {\r\n\t\tif (subResous) {\r\n\t\t\tfor (var i: number = 0, n: number = subResous.length; i < n; i++) {\r\n\t\t\t\tvar resou: Resource = (<Resource>Loader.getRes(subResous[i]));\r\n\t\t\t\t(resou) && (resou._removeReference());//加载失败SubResous为空\r\n\t\t\t}\r\n\t\t}\r\n\t\tloader.endLoad(content);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _eventLoadManagerError(msg: string): void {\r\n\t\tLaya.loader.event(Event.ERROR, msg);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _addHierarchyInnerUrls(urls: any[], urlMap: any[], urlVersion: string, hierarchyBasePath: string, path: string, type: string, constructParams: any = null, propertyParams: any = null): string {\r\n\t\tvar formatUrl: string = Laya3D.formatRelativePath(hierarchyBasePath, path);\r\n\t\t(urlVersion) && (formatUrl = formatUrl + urlVersion);\r\n\t\turls.push({ url: formatUrl, type: type, constructParams: constructParams, propertyParams: propertyParams });\r\n\t\turlMap.push(formatUrl);\r\n\t\treturn formatUrl;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _getSprite3DHierarchyInnerUrls(node: any, firstLevelUrls: any[], secondLevelUrls: any[], thirdLevelUrls: any[], fourthLelUrls: any[], subUrls: any[], urlVersion: string, hierarchyBasePath: string): void {\r\n\t\tvar i: number, n: number;\r\n\r\n\t\tvar props: any = node.props;\r\n\t\tswitch (node.type) {\r\n\t\t\tcase \"Scene3D\": //TODO:应该自动序列化类型\r\n\t\t\t\tvar lightmaps: any[] = props.lightmaps;\r\n\t\t\t\tfor (i = 0, n = lightmaps.length; i < n; i++) {\r\n\t\t\t\t\tvar lightMap: any = lightmaps[i];\r\n\t\t\t\t\tif (lightMap.path) {\r\n\t\t\t\t\t\tlightMap.path = Laya3D._addHierarchyInnerUrls(fourthLelUrls, subUrls, urlVersion, hierarchyBasePath, lightMap.path, Laya3D.TEXTURE2D, lightMap.constructParams, lightMap.propertyParams);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvar lightmapColorData: any = lightMap.color;\r\n\t\t\t\t\t\tlightmapColorData.path = Laya3D._addHierarchyInnerUrls(fourthLelUrls, subUrls, urlVersion, hierarchyBasePath, lightmapColorData.path, Laya3D.TEXTURE2D, lightmapColorData.constructParams, lightmapColorData.propertyParams);\r\n\t\t\t\t\t\tvar lightmapDirectionData: any = lightMap.direction;\r\n\t\t\t\t\t\tif (lightmapDirectionData)\r\n\t\t\t\t\t\t\tlightmapDirectionData.path = Laya3D._addHierarchyInnerUrls(fourthLelUrls, subUrls, urlVersion, hierarchyBasePath, lightmapDirectionData.path, Laya3D.TEXTURE2D, lightmapDirectionData.constructParams, lightmapDirectionData.propertyParams);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//兼容\r\n\t\t\t\tvar reflectionTextureData: string = props.reflectionTexture;\r\n\t\t\t\t(reflectionTextureData) && (props.reflection = Laya3D._addHierarchyInnerUrls(thirdLevelUrls, subUrls, urlVersion, hierarchyBasePath, reflectionTextureData, Laya3D.TEXTURECUBE));\r\n\r\n\t\t\t\tvar reflectionData: string = props.reflection;\r\n\t\t\t\t(reflectionData) && (props.reflection = Laya3D._addHierarchyInnerUrls(fourthLelUrls, subUrls, urlVersion, hierarchyBasePath, reflectionData, Laya3D.TEXTURECUBEBIN));\r\n\t\t\t\tif (props.sky) {\r\n\t\t\t\t\tvar skyboxMaterial: any = props.sky.material;\r\n\t\t\t\t\t(skyboxMaterial) && (skyboxMaterial.path = Laya3D._addHierarchyInnerUrls(secondLevelUrls, subUrls, urlVersion, hierarchyBasePath, skyboxMaterial.path, Laya3D.MATERIAL));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Camera\":\r\n\t\t\t\tvar skyboxMatData: any = props.skyboxMaterial;\r\n\t\t\t\t(skyboxMatData) && (skyboxMatData.path = Laya3D._addHierarchyInnerUrls(secondLevelUrls, subUrls, urlVersion, hierarchyBasePath, skyboxMatData.path, Laya3D.MATERIAL));\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"TrailSprite3D\":\r\n\t\t\tcase \"MeshSprite3D\":\r\n\t\t\tcase \"SkinnedMeshSprite3D\":\r\n\t\t\tcase \"SimpleSkinnedMeshSprite3D\":\r\n\t\t\t\tvar meshPath: string = props.meshPath;\r\n\t\t\t\t(meshPath) && (props.meshPath = Laya3D._addHierarchyInnerUrls(firstLevelUrls, subUrls, urlVersion, hierarchyBasePath, meshPath, Laya3D.MESH));\r\n\t\t\t\tvar materials: any[] = props.materials;\r\n\t\t\t\tif (materials)\r\n\t\t\t\t\tfor (i = 0, n = materials.length; i < n; i++)\r\n\t\t\t\t\t\tmaterials[i].path = Laya3D._addHierarchyInnerUrls(secondLevelUrls, subUrls, urlVersion, hierarchyBasePath, materials[i].path, Laya3D.MATERIAL);\r\n\t\t\t\tif(node.type==\"SimpleSkinnedMeshSprite3D\")\r\n\t\t\t\t\tif(props.animatorTexture)\r\n\t\t\t\t\t\tprops.animatorTexture = Laya3D._addHierarchyInnerUrls(fourthLelUrls,subUrls,urlVersion, hierarchyBasePath,props.animatorTexture,Laya3D.SIMPLEANIMATORBIN)\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase \"ShuriKenParticle3D\":\r\n\t\t\t\tif (props.main) {\r\n\t\t\t\t\tvar resources: any = props.renderer.resources;\r\n\t\t\t\t\tvar mesh: string = resources.mesh;\r\n\t\t\t\t\tvar material: string = resources.material;\r\n\t\t\t\t\t(mesh) && (resources.mesh = Laya3D._addHierarchyInnerUrls(firstLevelUrls, subUrls, urlVersion, hierarchyBasePath, mesh, Laya3D.MESH));\r\n\t\t\t\t\t(material) && (resources.material = Laya3D._addHierarchyInnerUrls(secondLevelUrls, subUrls, urlVersion, hierarchyBasePath, material, Laya3D.MATERIAL));\r\n\t\t\t\t}\r\n\t\t\t\telse {//兼容代码\r\n\t\t\t\t\tvar parMeshPath: string = props.meshPath;\r\n\t\t\t\t\t(parMeshPath) && (props.meshPath = Laya3D._addHierarchyInnerUrls(firstLevelUrls, subUrls, urlVersion, hierarchyBasePath, parMeshPath, Laya3D.MESH));\r\n\t\t\t\t\tprops.material.path = Laya3D._addHierarchyInnerUrls(secondLevelUrls, subUrls, urlVersion, hierarchyBasePath, props.material.path, Laya3D.MATERIAL);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Terrain\":\r\n\t\t\t\tLaya3D._addHierarchyInnerUrls(fourthLelUrls, subUrls, urlVersion, hierarchyBasePath, props.dataPath, Laya3D.TERRAINRES);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ReflectionProbe\":\r\n\t\t\t\tvar reflection = props.reflection;\r\n\t\t\t\t(reflection) && (props.reflection = Laya3D._addHierarchyInnerUrls(firstLevelUrls, subUrls, urlVersion, hierarchyBasePath, reflection, Laya3D.TEXTURECUBEBIN));\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar components: any[] = node.components;\r\n\t\tif (components) {\r\n\t\t\tfor (var k: number = 0, p: number = components.length; k < p; k++) {\r\n\t\t\t\tvar component: any = components[k];\r\n\t\t\t\tswitch (component.type) {\r\n\t\t\t\t\tcase \"Animator\":\r\n\t\t\t\t\t\tvar avatarPath: string = component.avatarPath;\r\n\t\t\t\t\t\tvar avatarData: any = component.avatar;\r\n\t\t\t\t\t\t(avatarData) && (avatarData.path = Laya3D._addHierarchyInnerUrls(fourthLelUrls, subUrls, urlVersion, hierarchyBasePath, avatarData.path, Laya3D.AVATAR));\r\n\t\t\t\t\t\tvar clipPaths: string[] = component.clipPaths;\r\n\t\t\t\t\t\tif (!clipPaths) {\r\n\t\t\t\t\t\t\tvar layersData: any[] = component.layers;\r\n\t\t\t\t\t\t\tfor (i = 0; i < layersData.length; i++) {\r\n\t\t\t\t\t\t\t\tvar states: any[] = layersData[i].states;\r\n\t\t\t\t\t\t\t\tfor (var j: number = 0, m: number = states.length; j < m; j++) {\r\n\t\t\t\t\t\t\t\t\tvar clipPath: string = states[j].clipPath;\r\n\t\t\t\t\t\t\t\t\t(clipPath) && (states[j].clipPath = Laya3D._addHierarchyInnerUrls(fourthLelUrls, subUrls, urlVersion, hierarchyBasePath, clipPath, Laya3D.ANIMATIONCLIP));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfor (i = 0, n = clipPaths.length; i < n; i++)\r\n\t\t\t\t\t\t\t\tclipPaths[i] = Laya3D._addHierarchyInnerUrls(fourthLelUrls, subUrls, urlVersion, hierarchyBasePath, clipPaths[i], Laya3D.ANIMATIONCLIP);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"PhysicsCollider\":\r\n\t\t\t\t\tcase \"Rigidbody3D\":\r\n\t\t\t\t\tcase \"CharacterController\":\r\n\t\t\t\t\t\tvar shapes: any[] = component.shapes;\r\n\t\t\t\t\t\tfor (i = 0; i < shapes.length; i++) {\r\n\t\t\t\t\t\t\tvar shape: any = shapes[i];\r\n\t\t\t\t\t\t\tif (shape.type === \"MeshColliderShape\") {\r\n\t\t\t\t\t\t\t\tvar mesh: string = shape.mesh;\r\n\t\t\t\t\t\t\t\t(mesh) && (shape.mesh = Laya3D._addHierarchyInnerUrls(firstLevelUrls, subUrls, urlVersion, hierarchyBasePath, mesh, Laya3D.MESH));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar children: any[] = node.child;\r\n\t\tfor (i = 0, n = children.length; i < n; i++)\r\n\t\t\tLaya3D._getSprite3DHierarchyInnerUrls(children[i], firstLevelUrls, secondLevelUrls, thirdLevelUrls, fourthLelUrls, subUrls, urlVersion, hierarchyBasePath);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _loadHierarchy(loader: Loader): void {\r\n\t\tloader._originType = loader.type;\r\n\t\tloader.on(Event.LOADED, null, Laya3D._onHierarchylhLoaded, [loader]);\r\n\t\tloader.load(loader.url, Loader.JSON, false, null, true);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _onHierarchylhLoaded(loader: Loader, lhData: any): void {\r\n\t\tvar url: string = loader.url;\r\n\t\tvar urlVersion: string = Utils3D.getURLVerion(url);\r\n\t\tvar hierarchyBasePath: string = URL.getPath(url);\r\n\t\tvar firstLevUrls: any[] = [];\r\n\t\tvar secondLevUrls: any[] = [];\r\n\t\tvar thirdLevUrls: any[] = [];\r\n\t\tvar forthLevUrls: any[] = [];\r\n\t\tvar subUrls: any[] = [];\r\n\t\tLaya3D._getSprite3DHierarchyInnerUrls(lhData.data, firstLevUrls, secondLevUrls, thirdLevUrls, forthLevUrls, subUrls, urlVersion, hierarchyBasePath);\r\n\t\tvar urlCount: number = firstLevUrls.length + secondLevUrls.length + forthLevUrls.length;\r\n\t\tvar totalProcessCount: number = urlCount + 1;\r\n\t\tvar weight: number = 1 / totalProcessCount;\r\n\t\tLaya3D._onProcessChange(loader, 0, weight, 1.0);\r\n\t\tif (forthLevUrls.length > 0) {\r\n\t\t\tvar processCeil: number = urlCount / totalProcessCount;\r\n\t\t\tvar processHandler: Handler = Handler.create(null, Laya3D._onProcessChange, [loader, weight, processCeil], false);\r\n\t\t\tLaya3D._innerFourthLevelLoaderManager._create(forthLevUrls, false, Handler.create(null, Laya3D._onHierarchyInnerForthLevResouLoaded, [loader, processHandler, lhData, subUrls, firstLevUrls, secondLevUrls, thirdLevUrls, weight + processCeil * forthLevUrls.length, processCeil]), processHandler, null, null, null, 1, true);\r\n\t\t} else {\r\n\t\t\tLaya3D._onHierarchyInnerForthLevResouLoaded(loader, null, lhData, subUrls, firstLevUrls, secondLevUrls, thirdLevUrls, weight, processCeil);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _onHierarchyInnerForthLevResouLoaded(loader: Loader, processHandler: Handler, lhData: any, subUrls: any[], firstLevUrls: any[], secondLevUrls: any[], thirdLevUrls: any[], processOffset: number, processCeil: number): void {\r\n\t\t(processHandler) && (processHandler.recover());\r\n\t\tif (thirdLevUrls.length > 0) {\r\n\t\t\tvar process: Handler = Handler.create(null, Laya3D._onProcessChange, [loader, processOffset, processCeil], false);\r\n\t\t\tLaya3D._innerThirdLevelLoaderManager._create(thirdLevUrls, false, Handler.create(null, Laya3D._onHierarchyInnerThirdLevResouLoaded, [loader, process, lhData, subUrls, firstLevUrls, secondLevUrls, processOffset + processCeil * secondLevUrls.length, processCeil]), processHandler, null, null, null, 1, true);\r\n\t\t} else {\r\n\t\t\tLaya3D._onHierarchyInnerThirdLevResouLoaded(loader, null, lhData, subUrls, firstLevUrls, secondLevUrls, processOffset, processCeil);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _onHierarchyInnerThirdLevResouLoaded(loader: Loader, processHandler: Handler, lhData: any, subUrls: any[], firstLevUrls: any[], secondLevUrls: any[], processOffset: number, processCeil: number): void {\r\n\t\t(processHandler) && (processHandler.recover());\r\n\t\tif (secondLevUrls.length > 0) {\r\n\t\t\tvar process: Handler = Handler.create(null, Laya3D._onProcessChange, [loader, processOffset, processCeil], false);\r\n\t\t\tLaya3D._innerSecondLevelLoaderManager._create(secondLevUrls, false, Handler.create(null, Laya3D._onHierarchyInnerSecondLevResouLoaded, [loader, process, lhData, subUrls, firstLevUrls, processOffset + processCeil * secondLevUrls.length, processCeil]), processHandler, null, null, null, 1, true);\r\n\t\t} else {\r\n\t\t\tLaya3D._onHierarchyInnerSecondLevResouLoaded(loader, null, lhData, subUrls, firstLevUrls, processOffset, processCeil);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _onHierarchyInnerSecondLevResouLoaded(loader: Loader, processHandler: Handler, lhData: any, subUrls: any[], firstLevUrls: any[], processOffset: number, processCeil: number): void {\r\n\t\t(processHandler) && (processHandler.recover());\r\n\t\tif (firstLevUrls.length > 0) {\r\n\t\t\tvar process: Handler = Handler.create(null, Laya3D._onProcessChange, [loader, processOffset, processCeil], false);\r\n\t\t\tLaya3D._innerFirstLevelLoaderManager._create(firstLevUrls, false, Handler.create(null, Laya3D._onHierarchyInnerFirstLevResouLoaded, [loader, process, lhData, subUrls]), processHandler, null, null, null, 1, true);\r\n\t\t} else {\r\n\t\t\tLaya3D._onHierarchyInnerFirstLevResouLoaded(loader, null, lhData, subUrls);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _onHierarchyInnerFirstLevResouLoaded(loader: Loader, processHandler: Handler, lhData: any, subUrls: any[]): void {\r\n\t\t(processHandler) && (processHandler.recover());\r\n\t\tloader._cache = loader._createCache;\r\n\t\tvar item: Node = lhData.data.type === \"Scene3D\" ? Scene3DUtils._parseScene(lhData, loader._propertyParams, loader._constructParams) : Scene3DUtils._parse(lhData, loader._propertyParams, loader._constructParams);\r\n\t\tLaya3D._endLoad(loader, item, subUrls);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _loadMesh(loader: Loader): void {\r\n\t\tloader.on(Event.LOADED, null, Laya3D._onMeshLmLoaded, [loader]);\r\n\t\tloader.load(loader.url, Loader.BUFFER, false, null, true);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _onMeshLmLoaded(loader: Loader, lmData: ArrayBuffer): void {\r\n\t\tloader._cache = loader._createCache;\r\n\t\tvar mesh: Mesh = MeshReader._parse(lmData, loader._propertyParams, loader._constructParams);\r\n\t\tLaya3D._endLoad(loader, mesh);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _loadMaterial(loader: Loader): void {\r\n\t\tloader.on(Event.LOADED, null, Laya3D._onMaterilLmatLoaded, [loader]);\r\n\t\tloader.load(loader.url, Loader.JSON, false, null, true);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _onMaterilLmatLoaded(loader: Loader, lmatData: any): void {\r\n\t\tvar url: string = loader.url;\r\n\t\tvar urlVersion: string = Utils3D.getURLVerion(url);\r\n\t\tvar materialBasePath: string = URL.getPath(url);\r\n\t\tvar urls: any[] = [];\r\n\t\tvar subUrls: any[] = [];\r\n\t\tvar customProps: any = lmatData.customProps;\r\n\t\tvar formatSubUrl: string;\r\n\t\tvar version: string = lmatData.version;\r\n\t\tswitch (version) {\r\n\t\t\tcase \"LAYAMATERIAL:01\":\r\n\t\t\tcase \"LAYAMATERIAL:02\":\r\n\t\t\t\tvar i: number, n: number;\r\n\t\t\t\tvar textures: any[] = lmatData.props.textures;\r\n\t\t\t\tif (textures) {\r\n\t\t\t\t\tfor (i = 0, n = textures.length; i < n; i++) {\r\n\t\t\t\t\t\tvar tex2D: any = textures[i];\r\n\t\t\t\t\t\tvar tex2DPath: string = tex2D.path;\r\n\t\t\t\t\t\tif (tex2DPath) {\r\n\t\t\t\t\t\t\tformatSubUrl = Laya3D.formatRelativePath(materialBasePath, tex2DPath);\r\n\t\t\t\t\t\t\t(urlVersion) && (formatSubUrl = formatSubUrl + urlVersion);\r\n\r\n\t\t\t\t\t\t\turls.push({ url: formatSubUrl, constructParams: tex2D.constructParams, propertyParams: tex2D.propertyParams });//不指定类型,自动根据后缀判断Texture2D或TextureCube\r\n\t\t\t\t\t\t\tsubUrls.push(formatSubUrl);\r\n\t\t\t\t\t\t\ttex2D.path = formatSubUrl;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Laya3D:unkonwn version.\");\r\n\t\t}\r\n\r\n\t\tvar urlCount: number = urls.length;\r\n\t\tvar totalProcessCount: number = urlCount + 1;\r\n\t\tvar lmatWeight: number = 1 / totalProcessCount;\r\n\t\tLaya3D._onProcessChange(loader, 0, lmatWeight, 1.0);\r\n\t\tif (urlCount > 0) {\r\n\t\t\tvar processHandler: Handler = Handler.create(null, Laya3D._onProcessChange, [loader, lmatWeight, urlCount / totalProcessCount], false);\r\n\t\t\tLaya3D._innerFourthLevelLoaderManager._create(urls, false, Handler.create(null, Laya3D._onMateialTexturesLoaded, [loader, processHandler, lmatData, subUrls]), processHandler, null, null, null, 1, true);//TODO:还有可能是TextureCube,使用三级\r\n\t\t} else {\r\n\t\t\tLaya3D._onMateialTexturesLoaded(loader, null, lmatData, null);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _onMateialTexturesLoaded(loader: Loader, processHandler: Handler, lmatData: any, subUrls: any[]): void {\r\n\t\tloader._cache = loader._createCache;\r\n\t\tvar mat: Material = Material._parse(lmatData, loader._propertyParams, loader._constructParams);\r\n\t\tLaya3D._endLoad(loader, mat, subUrls);\r\n\t\t(processHandler) && (processHandler.recover());\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _loadAvatar(loader: Loader): void {\r\n\t\tloader.on(Event.LOADED, null, function (data: any): void {\r\n\t\t\tloader._cache = loader._createCache;\r\n\t\t\tvar avatar: Avatar = Avatar._parse(data, loader._propertyParams, loader._constructParams);\r\n\t\t\tLaya3D._endLoad(loader, avatar);\r\n\t\t});\r\n\t\tloader.load(loader.url, Loader.JSON, false, null, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t *@internal \r\n\t */\r\n\tprivate static _loadSimpleAnimator(loader:Loader):void{\r\n\t\tloader.on(Event.LOADED,null,function(data:any):void{\r\n\t\t\tloader._cache = loader._createCache;\r\n\t\t\tvar texture: Texture2D = Texture2D._SimpleAnimatorTextureParse(data, loader._propertyParams, loader._constructParams);\r\n\t\t\tLaya3D._endLoad(loader,texture);\r\n\t\t});\r\n\t\tloader.load(loader.url,Loader.BUFFER,false,null,true)\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _loadAnimationClip(loader: Loader): void {\r\n\t\tloader.on(Event.LOADED, null, function (data: any): void {\r\n\t\t\tloader._cache = loader._createCache;\r\n\t\t\tvar clip: AnimationClip = AnimationClip._parse(data, loader._propertyParams, loader._constructParams);\r\n\t\t\tLaya3D._endLoad(loader, clip);\r\n\t\t});\r\n\t\tloader.load(loader.url, Loader.BUFFER, false, null, true);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _loadTexture2D(loader: Loader): void {\r\n\t\tvar url: string = loader.url;\r\n\t\tvar index: number = url.lastIndexOf('.') + 1;\r\n\t\tvar verIndex: number = url.indexOf('?');\r\n\t\tvar endIndex: number = verIndex == -1 ? url.length : verIndex;\r\n\t\tvar ext: string = url.substr(index, endIndex - index);\r\n\t\tvar type: string;\r\n\t\tswitch (ext) {\r\n\t\t\tcase \"jpg\":\r\n\t\t\tcase \"jpeg\":\r\n\t\t\tcase \"bmp\":\r\n\t\t\tcase \"gif\":\r\n\t\t\tcase \"png\":\r\n\t\t\t\ttype = \"nativeimage\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"dds\":\r\n\t\t\tcase \"ktx\":\r\n\t\t\tcase \"pvr\":\r\n\t\t\t\ttype = Loader.BUFFER;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//需要先注册,否则可能同步加载完成没来得及注册就完成\r\n\t\tloader.on(Event.LOADED, null, function (image: any): void {\r\n\t\t\tloader._cache = loader._createCache;\r\n\t\t\tvar tex: Texture2D = Texture2D._parse(image, loader._propertyParams, loader._constructParams);\r\n\t\t\tLaya3D._endLoad(loader, tex);\r\n\t\t});\r\n\t\tloader.load(loader.url, type, false, null, true);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _loadTextureCube(loader: Loader): void {\r\n\t\tloader.on(Event.LOADED, null, Laya3D._onTextureCubeLtcLoaded, [loader]);\r\n\t\tloader.load(loader.url, Loader.JSON, false, null, true);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _loadTextureCubeBin(loader: Loader): void {\r\n\t\tloader.on(Event.LOADED, null, (data: ArrayBuffer) => {\r\n\t\t\tloader._cache = loader._createCache;\r\n\r\n\t\t\tvar byte: Byte = new Byte(data);\r\n\t\t\tvar version: string = byte.readUTFString();\r\n\t\t\tif (version !== \"LAYATEXTURECUBE:0000\")\r\n\t\t\t\tthrow \"Laya3D:unknow version.\";\r\n\t\t\tvar format: TextureFormat = <TextureFormat>byte.readUint8();\r\n\t\t\tvar mipCount: number = byte.getUint8();\r\n\t\t\tvar size: number = byte.readUint16();\r\n\t\t\tvar filterMode: FilterMode = <FilterMode>byte.getUint8();\r\n\t\t\tvar warpModeU: WarpMode = <WarpMode>byte.getUint8();\r\n\t\t\tvar warpModev: WarpMode = <WarpMode>byte.getUint8();\r\n\t\t\tvar anisoLevel: FilterMode = byte.getUint8();\r\n\r\n\t\t\tvar cubemap: TextureCube = new TextureCube(size, format, mipCount > 1 ? true : false);\r\n\t\t\tcubemap.filterMode = filterMode;\r\n\t\t\tcubemap.wrapModeU = warpModeU;\r\n\t\t\tcubemap.wrapModeV = warpModev;\r\n\t\t\tcubemap.anisoLevel = anisoLevel;\r\n\t\t\tvar pos: number = byte.pos;\r\n\t\t\tvar mipSize: number = size;\r\n\t\t\tfor (var i = 0; i < mipCount; i++) {\r\n\t\t\t\tvar uint8Arrays: Array<Uint8Array> = new Array<Uint8Array>(6);\r\n\t\t\t\tvar mipPixelLength: number = mipSize * mipSize * cubemap._getFormatByteCount();\r\n\t\t\t\tfor (var j = 0; j < 6; j++) {\r\n\t\t\t\t\tuint8Arrays[j] = new Uint8Array(data, pos, mipPixelLength);\r\n\t\t\t\t\tpos += mipPixelLength;\r\n\t\t\t\t}\r\n\t\t\t\tcubemap.setSixSidePixels(uint8Arrays, i);\r\n\t\t\t\tmipSize /= 2;\r\n\t\t\t}\r\n\t\t\tLaya3D._endLoad(loader, cubemap);\r\n\t\t});\r\n\t\tloader.load(loader.url, Loader.BUFFER, false, null, true);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _onTextureCubeLtcLoaded(loader: Loader, ltcData: any): void {\r\n\t\tvar ltcBasePath: string = URL.getPath(loader.url);\r\n\t\tvar urls: any[] = [Laya3D.formatRelativePath(ltcBasePath, ltcData.front), Laya3D.formatRelativePath(ltcBasePath, ltcData.back), Laya3D.formatRelativePath(ltcBasePath, ltcData.left), Laya3D.formatRelativePath(ltcBasePath, ltcData.right), Laya3D.formatRelativePath(ltcBasePath, ltcData.up), Laya3D.formatRelativePath(ltcBasePath, ltcData.down)];\r\n\t\tvar ltcWeight: number = 1.0 / 7.0;\r\n\t\tLaya3D._onProcessChange(loader, 0, ltcWeight, 1.0);\r\n\t\tvar processHandler: Handler = Handler.create(null, Laya3D._onProcessChange, [loader, ltcWeight, 6 / 7], false);\r\n\t\tLaya3D._innerFourthLevelLoaderManager.load(urls, Handler.create(null, Laya3D._onTextureCubeImagesLoaded, [loader, urls, processHandler]), processHandler, \"nativeimage\");\r\n\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _onTextureCubeImagesLoaded(loader: Loader, urls: any[], processHandler: Handler): void {\r\n\t\tvar images: any[] = new Array(6);\r\n\t\tfor (var i: number = 0; i < 6; i++)\r\n\t\t\timages[i] = Loader.getRes(urls[i]);\r\n\r\n\t\tloader._cache = loader._createCache;\r\n\t\tvar tex: TextureCube = TextureCube._parse(images, loader._propertyParams, loader._constructParams);\r\n\r\n\t\tprocessHandler.recover();\r\n\t\tfor (i = 0; i < 6; i++)\r\n\t\t\tLoader.clearRes(urls[i]);\r\n\t\tLaya3D._endLoad(loader, tex);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tprivate static _onProcessChange(loader: Loader, offset: number, weight: number, process: number): void {\r\n\t\tprocess = offset + process * weight;\r\n\t\t(process < 1.0) && (loader.event(Event.PROGRESS, process *2/3+ 1/3));\r\n\t}\r\n\r\n\t/**\r\n\t * 初始化Laya3D相关设置。\r\n\t * @param\twidth  3D画布宽度。\r\n\t * @param\theight 3D画布高度。\r\n\t */\r\n\tstatic init(width: number, height: number, config: Config3D = null, compolete: Handler = null): void {\r\n\t\tif (Laya3D._isInit) {\r\n\t\t\tcompolete && compolete.run();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tLaya3D._isInit = true;\r\n\t\t(config) && (config.cloneTo(Config3D._config));\r\n\t\tconfig = Config3D._config;\r\n\t\tFrustumCulling.debugFrustumCulling = config.debugFrustumCulling;\r\n\t\tLaya3D._editerEnvironment = config._editerEnvironment;\r\n\t\tScene3D.octreeCulling = config.octreeCulling;\r\n\t\tScene3D.octreeInitialSize = config.octreeInitialSize;\r\n\t\tScene3D.octreeInitialCenter = config.octreeInitialCenter;\r\n\t\tScene3D.octreeMinNodeSize = config.octreeMinNodeSize;\r\n\t\tScene3D.octreeLooseness = config.octreeLooseness;\r\n\r\n\t\tvar physics3D: Function = (window as any).Physics3D;\r\n\t\tif (physics3D == null||config.isUseCannonPhysicsEngine) {\r\n\t\t\tPhysics3D._enablePhysics = false;\r\n\t\t\tLaya3D.__init__(width, height, config);\r\n\t\t\tcompolete && compolete.run();\r\n\t\t} else {\r\n\t\t\tPhysics3D._enablePhysics = true;\r\n\t\t\t//should convert MB to pages\r\n\t\t\tphysics3D(config.defaultPhysicsMemory * 16, BulletInteractive._interactive).then(function (): void {\r\n\t\t\t\tLaya3D.__init__(width, height, config);\r\n\t\t\t\tcompolete && compolete.run();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Laya3D</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n}\r\n\r\n(window as any).Laya3D = Laya3D;\r\n\r\n","import { SingletonList } from \"./component/SingletonList\"\r\nimport { BaseRender } from \"./core/render/BaseRender\"\r\nimport { ISingletonElement } from \"../resource/ISingletonElement\";\r\n\r\n\r\n/**\r\n\t/**\r\n\t * <code>CastShadowList</code> 类用于实现产生阴影者队列。\r\n\t */\r\n\texport class CastShadowList extends SingletonList<ISingletonElement> {\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个新的 <code>CastShadowList</code> 实例。\r\n\t\t */\r\n\t\tconstructor(){super();\r\n\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @internal\r\n\t\t */\r\n\t\t add(element:BaseRender):void {\r\n\t\t\tvar index:number = element._indexInCastShadowList;\r\n\t\t\tif (index !== -1)\r\n\t\t\t\tthrow \"CastShadowList:element has  in  CastShadowList.\";\r\n\t\t\tthis._add(element);\r\n\t\t\telement._indexInCastShadowList = this.length++;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @internal\r\n\t\t */\r\n\t\t remove(element:BaseRender):void {\r\n\t\t\tvar index:number = element._indexInCastShadowList;\r\n\t\t\tthis.length--;\r\n\t\t\tif (index !== this.length) {\r\n\t\t\t\tvar end:any = this.elements[this.length];\r\n\t\t\t\tthis.elements[index] = end;\r\n\t\t\t\tend._indexInCastShadowList = index;\r\n\t\t\t}\r\n\t\t\telement._indexInCastShadowList = -1;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","/**\r\n * <code>AnimatorStateScript</code> 类用于动画状态脚本的父类,该类为抽象类,不允许实例。\r\n */\r\nexport class AnimatorStateScript {\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>AnimatorStateScript</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 动画状态开始时执行。\r\n\t */\r\n\tonStateEnter(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 动画状态更新时执行。\r\n\t */\r\n\tonStateUpdate(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 动画状态退出时执行。\r\n\t */\r\n\tonStateExit(): void {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","\r\nimport { Component } from \"../../components/Component\"\r\nimport { Sprite3D } from \"../core/Sprite3D\"\r\nimport { Collision } from \"../physics/Collision\"\r\nimport { PhysicsComponent } from \"../physics/PhysicsComponent\"\r\nimport { Event } from \"../../events/Event\"\r\nimport { Laya } from \"../../../Laya\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\n\r\n/**\r\n * <code>Script3D</code> 类用于创建脚本的父类,该类为抽象类,不允许实例。\r\n */\r\nexport class Script3D extends Component {\r\n\t/**@internal*/\r\n\tpublic _indexInPool: number = -1;\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tget isSingleton(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _checkProcessTriggers(): boolean {\r\n\t\tvar prototype: any = Script3D.prototype;\r\n\t\tif (this.onTriggerEnter !== prototype.onTriggerEnter)\r\n\t\t\treturn true;\r\n\t\tif (this.onTriggerStay !== prototype.onTriggerStay)\r\n\t\t\treturn true;\r\n\t\tif (this.onTriggerExit !== prototype.onTriggerExit)\r\n\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _checkProcessCollisions(): boolean {\r\n\t\tvar prototype: any = Script3D.prototype;\r\n\t\tif (this.onCollisionEnter !== prototype.onCollisionEnter)\r\n\t\t\treturn true;\r\n\t\tif (this.onCollisionStay !== prototype.onCollisionStay)\r\n\t\t\treturn true;\r\n\t\tif (this.onCollisionExit !== prototype.onCollisionExit)\r\n\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_onAwake(): void {\r\n\t\tthis.onAwake();\r\n\t\tif (this.onStart !== Script3D.prototype.onStart)\r\n\t\t\tLaya.startTimer.callLater(this, this.onStart);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_onEnable(): void {\r\n\t\t(<Scene3D>this.owner._scene)._addScript(this);\r\n\t\tthis.onEnable();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _onDisable(): void {\r\n\t\t(<Scene3D>this.owner._scene)._removeScript(this);\r\n\t\tthis.owner.offAllCaller(this);\r\n\t\tthis.onDisable();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _onDestroy(): void {\r\n\t\tvar scripts: Script3D[] = ((<Sprite3D>this.owner))._scripts;\r\n\t\tscripts.splice(scripts.indexOf(this), 1);\r\n\r\n\t\tvar sprite: Sprite3D = (<Sprite3D>this.owner);\r\n\t\tsprite._needProcessTriggers = false;\r\n\t\tfor (var i: number = 0, n: number = scripts.length; i < n; i++) {\r\n\t\t\tif (scripts[i]._checkProcessTriggers()) {\r\n\t\t\t\tsprite._needProcessTriggers = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsprite._needProcessCollisions = false;\r\n\t\tfor (i = 0, n = scripts.length; i < n; i++) {\r\n\t\t\tif (scripts[i]._checkProcessCollisions()) {\r\n\t\t\t\tsprite._needProcessCollisions = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.onDestroy();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_isScript(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_onAdded(): void {\r\n\t\tvar sprite: Sprite3D = (<Sprite3D>this.owner);\r\n\t\tvar scripts: Script3D[] = sprite._scripts;\r\n\t\tscripts || (sprite._scripts = scripts = []);\r\n\t\tscripts.push(this);\r\n\r\n\t\tif (!sprite._needProcessCollisions)\r\n\t\t\tsprite._needProcessCollisions = this._checkProcessCollisions();//检查是否需要处理物理碰撞\r\n\r\n\t\tif (!sprite._needProcessTriggers)\r\n\t\t\tsprite._needProcessTriggers = this._checkProcessTriggers();//检查是否需要处理触发器\r\n\t}\r\n\r\n\t/**\r\n\t * 创建后只执行一次\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonAwake(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 每次启动后执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonEnable(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 第一次执行update之前执行，只会执行一次\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonStart(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 开始触发时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonTriggerEnter(other: PhysicsComponent): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 持续触发时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonTriggerStay(other: PhysicsComponent): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 结束触发时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonTriggerExit(other: PhysicsComponent): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 开始碰撞时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonCollisionEnter(collision: Collision): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 持续碰撞时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonCollisionStay(collision: Collision): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 结束碰撞时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonCollisionExit(collision: Collision): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 关节破坏时执行此方法\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonJointBreak():void{\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * 鼠标按下时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonMouseDown(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 鼠标拖拽时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonMouseDrag(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 鼠标点击时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonMouseClick(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 鼠标弹起时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonMouseUp(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 鼠标进入时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonMouseEnter(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 鼠标经过时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonMouseOver(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 鼠标离开时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonMouseOut(): void {\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * 每帧更新时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonUpdate(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 每帧更新时执行，在update之后执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonLateUpdate(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 渲染之前执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonPreRender(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 渲染之后执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonPostRender(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 禁用时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonDisable(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 销毁时执行\r\n\t * 此方法为虚方法，使用时重写覆盖即可\r\n\t */\r\n\tonDestroy(): void {\r\n\r\n\t}\r\n}\r\n\r\n","import { Bounds } from \"./Bounds\";\r\nimport { IndexBuffer3D } from \"../graphics/IndexBuffer3D\"\r\nimport { VertexBuffer3D } from \"../graphics/VertexBuffer3D\"\r\nimport { Ray } from \"../math/Ray\"\r\nimport { Vector2 } from \"../math/Vector2\"\r\nimport { Vector3 } from \"../math/Vector3\"\r\nimport { Mesh } from \"../resource/models/Mesh\"\r\nimport { SubMesh } from \"../resource/models/SubMesh\"\r\nimport { Picker } from \"../utils/Picker\"\r\nimport { Texture2D } from \"../../resource/Texture2D\"\r\n\r\n\r\n/**\r\n * <code>HeightMap</code> 类用于实现高度图数据。\r\n */\r\nexport class HeightMap {\r\n\tprivate static _tempRay: Ray = new Ray(new Vector3(), new Vector3());\r\n\r\n\t/**\r\n\t * 从网格精灵生成高度图。\r\n\t * @param meshSprite 网格精灵。\r\n\t * @param width\t高度图宽度。\r\n\t * @param height 高度图高度。\r\n\t * @param outCellSize 输出 单元尺寸。\r\n\t */\r\n\tstatic creatFromMesh(mesh: Mesh, width: number, height: number, outCellSize: Vector2): HeightMap {\r\n\t\tvar vertices: any[] = [];\r\n\t\tvar indexs: Uint16Array[] = [];\r\n\r\n\t\tvar submesheCount: number = mesh.subMeshCount;\r\n\t\tfor (var i: number = 0; i < submesheCount; i++) {\r\n\t\t\tvar subMesh: SubMesh = (<SubMesh>mesh.getSubMesh(i));\r\n\t\t\tvar vertexBuffer: VertexBuffer3D = subMesh._vertexBuffer;\r\n\t\t\tvar verts: Float32Array =vertexBuffer.getFloat32Data();\r\n\t\t\tvar subMeshVertices: Vector3[] = [];\r\n\r\n\t\t\tfor (var j: number = 0; j < verts.length; j += vertexBuffer.vertexDeclaration.vertexStride / 4) {\r\n\t\t\t\tvar position: Vector3 = new Vector3(verts[j + 0], verts[j + 1], verts[j + 2]);\r\n\t\t\t\tsubMeshVertices.push(position);\r\n\t\t\t}\r\n\t\t\tvertices.push(subMeshVertices);\r\n\r\n\t\t\tvar ib: IndexBuffer3D = subMesh._indexBuffer;\r\n\t\t\tindexs.push(ib.getData());\r\n\t\t}\r\n\r\n\t\tvar bounds: Bounds = mesh.bounds;\r\n\t\tvar minX: number = bounds.getMin().x;\r\n\t\tvar minZ: number = bounds.getMin().z;\r\n\t\tvar maxX: number = bounds.getMax().x;\r\n\t\tvar maxZ: number = bounds.getMax().z;\r\n\t\tvar minY: number = bounds.getMin().y;\r\n\t\tvar maxY: number = bounds.getMax().y;\r\n\r\n\t\tvar widthSize: number = maxX - minX;\r\n\t\tvar heightSize: number = maxZ - minZ;\r\n\t\tvar cellWidth: number = outCellSize.x = widthSize / (width - 1);\r\n\t\tvar cellHeight: number = outCellSize.y = heightSize / (height - 1);\r\n\r\n\t\tvar heightMap: HeightMap = new HeightMap(width, height, minY, maxY);\r\n\r\n\t\tvar ray: Ray = HeightMap._tempRay;\r\n\t\tvar rayDir: Vector3 = ray.direction;//Direction\r\n\t\trayDir.x = 0;\r\n\t\trayDir.y = -1;\r\n\t\trayDir.z = 0;\r\n\r\n\t\tconst heightOffset: number = 0.1;//OriginalY\r\n\t\tvar rayY: number = maxY + heightOffset;\r\n\t\tray.origin.y = rayY;\r\n\r\n\t\tfor (var h: number = 0; h < height; h++) {\r\n\t\t\tvar posZ: number = minZ + h * cellHeight;\r\n\t\t\theightMap._datas[h] = [];\r\n\t\t\tfor (var w: number = 0; w < width; w++) {\r\n\t\t\t\tvar posX: number = minX + w * cellWidth;\r\n\r\n\t\t\t\tvar rayOri: Vector3 = ray.origin;\r\n\t\t\t\trayOri.x = posX;\r\n\t\t\t\trayOri.z = posZ;\r\n\r\n\t\t\t\tvar closestIntersection: number = HeightMap._getPosition(ray, vertices, indexs);\r\n\t\t\t\theightMap._datas[h][w] = (closestIntersection === Number.MAX_VALUE) ? NaN : rayY - closestIntersection;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn heightMap;\r\n\t}\r\n\r\n\t/**\r\n\t * 从图片生成高度图。\r\n\t * @param image 图片。\r\n\t * @param maxHeight 最小高度。\r\n\t * @param maxHeight 最大高度。\r\n\t */\r\n\tstatic createFromImage(texture: Texture2D, minHeight: number, maxHeight: number): HeightMap {//TODO:texture类型，临时修复\r\n\t\tvar textureWidth: number = texture.width;\r\n\t\tvar textureHeight: number = texture.height;\r\n\t\tvar heightMap: HeightMap = new HeightMap(textureWidth, textureHeight, minHeight, maxHeight);\r\n\t\tvar compressionRatio: number = (maxHeight - minHeight) / 254;\r\n\t\tvar pixelsInfo: Uint8Array = <Uint8Array>texture.getPixels();\r\n\r\n\t\tvar index: number = 0;\r\n\t\tfor (var h: number = 0; h < textureHeight; h++) {\r\n\t\t\tvar colDatas: any[] = heightMap._datas[h] = [];\r\n\t\t\tfor (var w: number = 0; w < textureWidth; w++) {\r\n\t\t\t\tvar r: number = pixelsInfo[index++];\r\n\t\t\t\tvar g: number = pixelsInfo[index++];\r\n\t\t\t\tvar b: number = pixelsInfo[index++];\r\n\t\t\t\tvar a: number = pixelsInfo[index++];\r\n\r\n\t\t\t\tif (r == 255 && g == 255 && b == 255 && a == 255)\r\n\t\t\t\t\tcolDatas[w] = NaN;\r\n\t\t\t\telse {\r\n\t\t\t\t\tcolDatas[w] = (r + g + b) / 3 * compressionRatio + minHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn heightMap;\r\n\t}\r\n\r\n\tprivate static _getPosition(ray: Ray, vertices: any[], indexs: Uint16Array[]): number {\r\n\t\tvar closestIntersection: number = Number.MAX_VALUE;\r\n\t\tfor (var i: number = 0; i < vertices.length; i++) {\r\n\t\t\tvar subMeshVertices: Vector3[] = vertices[i];\r\n\t\t\tvar subMeshIndexes: Uint16Array = indexs[i];\r\n\r\n\t\t\tfor (var j: number = 0; j < subMeshIndexes.length; j += 3) {\r\n\t\t\t\tvar vertex1: Vector3 = subMeshVertices[subMeshIndexes[j + 0]];\r\n\t\t\t\tvar vertex2: Vector3 = subMeshVertices[subMeshIndexes[j + 1]];\r\n\t\t\t\tvar vertex3: Vector3 = subMeshVertices[subMeshIndexes[j + 2]];\r\n\r\n\t\t\t\tvar intersection: number = Picker.rayIntersectsTriangle(ray, vertex1, vertex2, vertex3);\r\n\r\n\t\t\t\tif (!isNaN(intersection) && intersection < closestIntersection) {\r\n\t\t\t\t\tclosestIntersection = intersection;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn closestIntersection;\r\n\r\n\t}\r\n\r\n\tprivate _datas: any[];\r\n\tprivate _w: number;\r\n\tprivate _h: number;\r\n\tprivate _minHeight: number;\r\n\tprivate _maxHeight: number;\r\n\r\n\t/**\r\n\t * 获取宽度。\r\n\t * @return value 宽度。\r\n\t */\r\n\tget width(): number {\r\n\t\treturn this._w;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取高度。\r\n\t * @return value 高度。\r\n\t */\r\n\tget height(): number {\r\n\t\treturn this._h;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大高度。\r\n\t * @return value 最大高度。\r\n\t */\r\n\tget maxHeight(): number {\r\n\t\treturn this._maxHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大高度。\r\n\t * @return value 最大高度。\r\n\t */\r\n\tget minHeight(): number {\r\n\t\treturn this._minHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>HeightMap</code> 实例。\r\n\t * @param width 宽度。\r\n\t * @param height 高度。\r\n\t * @param minHeight 最大高度。\r\n\t * @param maxHeight 最大高度。\r\n\t */\r\n\tconstructor(width: number, height: number, minHeight: number, maxHeight: number) {\r\n\t\tthis._datas = [];\r\n\t\tthis._w = width;\r\n\t\tthis._h = height;\r\n\t\tthis._minHeight = minHeight;\r\n\t\tthis._maxHeight = maxHeight;\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _inBounds(row: number, col: number): boolean {\r\n\t\treturn row >= 0 && row < this._h && col >= 0 && col < this._w;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取高度。\r\n\t * @param row 列数。\r\n\t * @param col 行数。\r\n\t * @return 高度。\r\n\t */\r\n\tgetHeight(row: number, col: number): number {\r\n\t\tif (this._inBounds(row, col))\r\n\t\t\treturn this._datas[row][col];\r\n\t\telse\r\n\t\t\treturn NaN;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { MeshSprite3D } from \"./MeshSprite3D\";\r\nimport { HeightMap } from \"./HeightMap\";\r\nimport { Bounds } from \"./Bounds\";\r\nimport { RenderContext3D } from \"./render/RenderContext3D\"\r\nimport { Matrix4x4 } from \"../math/Matrix4x4\"\r\nimport { Quaternion } from \"../math/Quaternion\"\r\nimport { Vector2 } from \"../math/Vector2\"\r\nimport { Vector3 } from \"../math/Vector3\"\r\nimport { Mesh } from \"../resource/models/Mesh\"\r\nimport { Texture2D } from \"../../resource/Texture2D\"\r\n\r\n/**\r\n * <code>TerrainMeshSprite3D</code> 类用于创建网格。\r\n */\r\nexport class MeshTerrainSprite3D extends MeshSprite3D {\r\n\tprivate static _tempVector3: Vector3 = new Vector3();\r\n\tprivate static _tempMatrix4x4: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/**\r\n\t * 从网格创建一个TerrainMeshSprite3D实例和其高度图属性。\r\n\t * @param mesh 网格。\r\n\t * @param heightMapWidth 高度图宽度。\r\n\t * @param heightMapHeight 高度图高度。\r\n\t * @param name 名字。\r\n\t */\r\n\tstatic createFromMesh(mesh: Mesh, heightMapWidth: number, heightMapHeight: number, name: string = null): MeshTerrainSprite3D {\r\n\t\tvar meshTerrainSprite3D: MeshTerrainSprite3D = new MeshTerrainSprite3D(mesh, null, name);\r\n\t\tmeshTerrainSprite3D._initCreateFromMesh(heightMapWidth, heightMapHeight);\r\n\t\treturn meshTerrainSprite3D;\r\n\t}\r\n\r\n\t/**\r\n\t * 从网格创建一个TerrainMeshSprite3D实例、图片读取高度图属性。\r\n\t * @param mesh 网格。\r\n\t * @param image 高度图。\r\n\t * @param name 名字。\r\n\t */\r\n\tstatic createFromMeshAndHeightMap(mesh: Mesh, texture: Texture2D, minHeight: number, maxHeight: number, name: string = null): MeshTerrainSprite3D {\r\n\t\tvar meshTerrainSprite3D: MeshTerrainSprite3D = new MeshTerrainSprite3D(mesh, null, name);\r\n\t\tmeshTerrainSprite3D._initCreateFromMeshHeightMap(texture, minHeight, maxHeight);\r\n\t\treturn meshTerrainSprite3D;\r\n\t}\r\n\r\n\tprivate _minX: number;\r\n\tprivate _minZ: number;\r\n\tprivate _cellSize: Vector2;\r\n\tprivate _heightMap: HeightMap;\r\n\r\n\t/**\r\n\t * 获取地形X轴最小位置。\r\n\t * @return  地形X轴最小位置。\r\n\t */\r\n\tget minX(): number {\r\n\t\tvar worldMat: Matrix4x4 = this.transform.worldMatrix;\r\n\t\tvar worldMatE: Float32Array = worldMat.elements;\r\n\t\treturn this._minX * this._getScaleX() + worldMatE[12];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取地形Z轴最小位置。\r\n\t * @return  地形X轴最小位置。\r\n\t */\r\n\tget minZ(): number {\r\n\t\tvar worldMat: Matrix4x4 = this.transform.worldMatrix;\r\n\t\tvar worldMatE: Float32Array = worldMat.elements;\r\n\t\treturn this._minZ * this._getScaleZ() + worldMatE[14];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取地形X轴长度。\r\n\t * @return  地形X轴长度。\r\n\t */\r\n\tget width(): number {\r\n\t\treturn (this._heightMap.width - 1) * this._cellSize.x * this._getScaleX();\r\n\t}\r\n\r\n\t/**\r\n\t * 获取地形Z轴长度。\r\n\t * @return  地形Z轴长度。\r\n\t */\r\n\tget depth(): number {\r\n\t\treturn (this._heightMap.height - 1) * this._cellSize.y * this._getScaleZ();\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>TerrainMeshSprite3D</code> 实例。\r\n\t * @param mesh 网格。\r\n\t * @param heightMap 高度图。\r\n\t * @param name 名字。\r\n\t */\r\n\tconstructor(mesh: Mesh, heightMap: HeightMap, name: string = null) {\r\n\t\tsuper(mesh, name);\r\n\t\tthis._heightMap = heightMap;\r\n\t\tthis._cellSize = new Vector2();\r\n\t}\r\n\r\n\tprivate _disableRotation(): void {\r\n\t\tvar rotation: Quaternion = this.transform.rotation;\r\n\t\trotation.x = 0;\r\n\t\trotation.y = 0;\r\n\t\trotation.z = 0;\r\n\t\trotation.w = 1;\r\n\t\tthis.transform.rotation = rotation;\r\n\t}\r\n\r\n\tprivate _getScaleX(): number {\r\n\t\tvar worldMat: Matrix4x4 = this.transform.worldMatrix;\r\n\t\tvar worldMatE: Float32Array = worldMat.elements;\r\n\t\tvar m11: number = worldMatE[0];\r\n\t\tvar m12: number = worldMatE[1];\r\n\t\tvar m13: number = worldMatE[2];\r\n\t\treturn Math.sqrt((m11 * m11) + (m12 * m12) + (m13 * m13));\r\n\t}\r\n\r\n\tprivate _getScaleZ(): number {\r\n\t\tvar worldMat: Matrix4x4 = this.transform.worldMatrix;\r\n\t\tvar worldMatE: Float32Array = worldMat.elements;\r\n\t\tvar m31: number = worldMatE[8];\r\n\t\tvar m32: number = worldMatE[9];\r\n\t\tvar m33: number = worldMatE[10];\r\n\t\treturn Math.sqrt((m31 * m31) + (m32 * m32) + (m33 * m33));\r\n\t}\r\n\r\n\tprivate _initCreateFromMesh(heightMapWidth: number, heightMapHeight: number): void {\r\n\t\tthis._heightMap = HeightMap.creatFromMesh((<Mesh>this.meshFilter.sharedMesh), heightMapWidth, heightMapHeight, this._cellSize);\r\n\r\n\t\tvar boundingBox: Bounds = this.meshFilter.sharedMesh.bounds;\r\n\t\tvar min: Vector3 = boundingBox.getMin();\r\n\t\tvar max: Vector3 = boundingBox.getMax();\r\n\t\tthis._minX = min.x;\r\n\t\tthis._minZ = min.z;\r\n\t}\r\n\r\n\tprivate _initCreateFromMeshHeightMap(texture: Texture2D, minHeight: number, maxHeight: number): void {\r\n\t\tvar boundingBox: Bounds = this.meshFilter.sharedMesh.bounds;\r\n\t\tthis._heightMap = HeightMap.createFromImage(texture, minHeight, maxHeight);\r\n\t\tthis._computeCellSize(boundingBox);\r\n\r\n\t\tvar min: Vector3 = boundingBox.getMin();\r\n\t\tvar max: Vector3 = boundingBox.getMax();\r\n\t\tthis._minX = min.x;\r\n\t\tthis._minZ = min.z;\r\n\t}\r\n\r\n\tprivate _computeCellSize(boundingBox: Bounds): void {\r\n\t\tvar min: Vector3 = boundingBox.getMin();\r\n\t\tvar max: Vector3 = boundingBox.getMax();\r\n\t\tvar minX: number = min.x;\r\n\t\tvar minZ: number = min.z;\r\n\t\tvar maxX: number = max.x;\r\n\t\tvar maxZ: number = max.z;\r\n\r\n\t\tvar widthSize: number = maxX - minX;\r\n\t\tvar heightSize: number = maxZ - minZ;\r\n\r\n\t\tthis._cellSize.x = widthSize / (this._heightMap.width - 1);\r\n\t\tthis._cellSize.y = heightSize / (this._heightMap.height - 1);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_update(state: RenderContext3D): void {//TODO:\r\n\t\tthis._disableRotation();\r\n\t\t//super._update(state);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取地形高度。\r\n\t * @param x X轴坐标。\r\n\t * @param z Z轴坐标。\r\n\t */\r\n\tgetHeight(x: number, z: number): number {\r\n\t\tMeshTerrainSprite3D._tempVector3.x = x;\r\n\t\tMeshTerrainSprite3D._tempVector3.y = 0;\r\n\t\tMeshTerrainSprite3D._tempVector3.z = z;\r\n\r\n\t\tthis._disableRotation();\r\n\t\tvar worldMat: Matrix4x4 = this.transform.worldMatrix;\r\n\t\tworldMat.invert(MeshTerrainSprite3D._tempMatrix4x4);\r\n\r\n\t\tVector3.transformCoordinate(MeshTerrainSprite3D._tempVector3, MeshTerrainSprite3D._tempMatrix4x4, MeshTerrainSprite3D._tempVector3);\r\n\t\tx = MeshTerrainSprite3D._tempVector3.x;\r\n\t\tz = MeshTerrainSprite3D._tempVector3.z;\r\n\r\n\t\tvar c: number = (x - this._minX) / this._cellSize.x;\r\n\t\tvar d: number = (z - this._minZ) / this._cellSize.y;\r\n\t\tvar row: number = Math.floor(d);\r\n\t\tvar col: number = Math.floor(c);\r\n\r\n\t\tvar s: number = c - col;\r\n\t\tvar t: number = d - row;\r\n\r\n\t\tvar uy: number;\r\n\t\tvar vy: number;\r\n\t\tvar worldMatE: Float32Array = worldMat.elements;\r\n\t\tvar m21: number = worldMatE[4];\r\n\t\tvar m22: number = worldMatE[5];\r\n\t\tvar m23: number = worldMatE[6];\r\n\t\tvar scaleY: number = Math.sqrt((m21 * m21) + (m22 * m22) + (m23 * m23));\r\n\t\tvar translateY: number = worldMatE[13];\r\n\r\n\t\tvar h01: number = this._heightMap.getHeight(row, col + 1);\r\n\t\tvar h10: number = this._heightMap.getHeight((row + 1), col);\r\n\t\tif (isNaN(h01) || isNaN(h10))\r\n\t\t\treturn NaN;\r\n\r\n\t\tif (s + t <= 1.0) {\r\n\t\t\tvar h00: number = this._heightMap.getHeight(row, col);\r\n\t\t\tif (isNaN(h00))\r\n\t\t\t\treturn NaN;\r\n\r\n\t\t\tuy = h01 - h00;\r\n\t\t\tvy = h10 - h00;\r\n\t\t\treturn (h00 + s * uy + t * vy) * scaleY + translateY;\r\n\t\t} else {\r\n\t\t\tvar h11: number = this._heightMap.getHeight((row + 1), col + 1);\r\n\t\t\tif (isNaN(h11))\r\n\t\t\t\treturn NaN;\r\n\r\n\t\t\tuy = h10 - h11;\r\n\t\t\tvy = h01 - h11;\r\n\t\t\treturn (h11 + (1.0 - s) * uy + (1.0 - t) * vy) * scaleY + translateY;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../IClone\"\r\nimport { Vector2 } from \"../../../math/Vector2\"\r\n\r\n/**\r\n * <code>GradientDataVector2</code> 类用于创建二维向量渐变。\r\n */\r\nexport class GradientDataVector2 implements IClone {\r\n\tprivate _currentLength: number = 0;\r\n\t/**@internal 开发者禁止修改。*/\r\n\t_elements: Float32Array;\r\n\r\n\t/**二维向量渐变数量。*/\r\n\tget gradientCount(): number {\r\n\t\treturn this._currentLength / 3;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientDataVector2</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._elements = new Float32Array(12);\r\n\t}\r\n\r\n\t/**\r\n\t * 增加二维向量渐变。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue 二维向量值。\r\n\t */\r\n\tadd(key: number, value: Vector2): void {\r\n\t\tif (this._currentLength < 8) {\r\n\r\n\t\t\tif ((this._currentLength === 6) && ((key !== 1))) {\r\n\t\t\t\tkey = 1;\r\n\t\t\t\tconsole.log(\"GradientDataVector2 warning:the forth key is  be force set to 1.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis._elements[this._currentLength++] = key;\r\n\t\t\tthis._elements[this._currentLength++] = value.x;\r\n\t\t\tthis._elements[this._currentLength++] = value.y;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"GradientDataVector2 warning:data count must lessEqual than 4\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientDataVector2: GradientDataVector2 = <GradientDataVector2>destObject;\r\n\t\tdestGradientDataVector2._currentLength = this._currentLength;\r\n\t\tvar destElements: Float32Array = destGradientDataVector2._elements;\r\n\t\tfor (var i: number = 0, n: number = this._elements.length; i < n; i++) {\r\n\t\t\tdestElements[i] = this._elements[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientDataVector2: GradientDataVector2 = new GradientDataVector2();\r\n\t\tthis.cloneTo(destGradientDataVector2);\r\n\t\treturn destGradientDataVector2;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Color } from \"../../math/Color\"\r\nimport { Vector3 } from \"../../math/Vector3\"\r\n\r\n/**\r\n * <code>PixelLineData</code> 类用于表示线数据。\r\n */\r\nexport class PixelLineData {\r\n\tstartPosition: Vector3 = new Vector3();\r\n\r\n\tendPosition: Vector3 = new Vector3();\r\n\r\n\tstartColor: Color = new Color();\r\n\r\n\tendColor: Color = new Color();\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: PixelLineData): void {\r\n\t\tthis.startPosition.cloneTo(destObject.startPosition);\r\n\t\tthis.endPosition.cloneTo(destObject.endPosition);\r\n\t\tthis.startColor.cloneTo(destObject.startColor);\r\n\t\tthis.endColor.cloneTo(destObject.endColor);\r\n\t}\r\n}\r\n\r\n","import { PostProcessRenderContext } from \"./PostProcessRenderContext\";\r\n/**\r\n\t * <code>PostProcessEffect</code> 类用于创建后期处理渲染效果。\r\n\t */\r\nexport class PostProcessEffect {\r\n\r\n\t/**\r\n\t * 创建一个 <code>PostProcessEffect</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trender(context: PostProcessRenderContext): void {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { PostProcessEffect } from \"./PostProcessEffect\";\r\nimport { PostProcessRenderContext } from \"./PostProcessRenderContext\";\r\nimport { PostProcess } from \"../../component/PostProcess\"\r\nimport { CommandBuffer } from \"./command/CommandBuffer\"\r\nimport { Color } from \"../../math/Color\"\r\nimport { Vector4 } from \"../../math/Vector4\"\r\nimport { Viewport } from \"../../math/Viewport\"\r\nimport { RenderTexture } from \"../../resource/RenderTexture\"\r\nimport { Shader3D } from \"../../shader/Shader3D\"\r\nimport { ShaderData } from \"../../shader/ShaderData\"\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\"\r\nimport { Texture2D } from \"../../../resource/Texture2D\"\r\nimport { RenderTextureFormat, RenderTextureDepthFormat } from \"../../../resource/RenderTextureFormat\";\r\nimport { FilterMode } from \"../../../resource/FilterMode\";\r\n\r\n/**\r\n * <code>BloomEffect</code> 类用于创建泛光效果。\r\n */\r\nexport class BloomEffect extends PostProcessEffect {\r\n\t/** @internal */\r\n\tstatic SHADERVALUE_MAINTEX: number = Shader3D.propertyNameToID(\"u_MainTex\");\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_AUTOEXPOSURETEX: number = Shader3D.propertyNameToID(\"u_AutoExposureTex\");\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_SAMPLESCALE: number = Shader3D.propertyNameToID(\"u_SampleScale\");\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_THRESHOLD: number = Shader3D.propertyNameToID(\"u_Threshold\");\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_PARAMS: number = Shader3D.propertyNameToID(\"u_Params\");\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_BLOOMTEX: number = Shader3D.propertyNameToID(\"u_BloomTex\");\r\n\r\n\t/**@internal */\r\n\tprivate static SUBSHADER_PREFILTER13: number = 0;\r\n\t/**@internal */\r\n\tprivate static SUBSHADER_PREFILTER4: number = 1;\r\n\t/**@internal */\r\n\tprivate static SUBSHADER_DOWNSAMPLE13: number = 2;\r\n\t/**@internal */\r\n\tprivate static SUBSHADER_DOWNSAMPLE4: number = 3;\r\n\t/**@internal */\r\n\tprivate static SUBSHADER_UPSAMPLETENT: number = 4;\r\n\t/**@internal */\r\n\tprivate static SUBSHADER_UPSAMPLEBOX: number = 5;\r\n\r\n\t/**@internal */\r\n\tprivate static MAXPYRAMIDSIZE: number = 16; // Just to make sure we handle 64k screens... Future-proof!\r\n\r\n\t/**@internal */\r\n\tprivate _shader: Shader3D = null;\r\n\t/**@internal */\r\n\tprivate _shaderData: ShaderData = new ShaderData();\r\n\t/**@internal */\r\n\tprivate _linearColor: Color = new Color();\r\n\t/**@internal */\r\n\tprivate _bloomTextureTexelSize: Vector4 = new Vector4();\r\n\r\n\t/**@internal */\r\n\tprivate _shaderThreshold: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _shaderParams: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _pyramid: any[] = null;\r\n\t/**@internal */\r\n\tprivate _intensity: number = 0.0;\r\n\t/**@internal */\r\n\tprivate _threshold: number = 1.0;\r\n\t/**@internal */\r\n\tprivate _softKnee: number = 0.5;\r\n\t/**@internal */\r\n\tprivate _diffusion: number = 7.0;\r\n\t/**@internal */\r\n\tprivate _anamorphicRatio: number = 0.0;\r\n\t/**@internal */\r\n\tprivate _dirtIntensity: number = 0.0;\r\n\t/**@internal */\r\n\tprivate _shaderSetting: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _dirtTileOffset: Vector4 = new Vector4();\r\n\r\n\t/**限制泛光像素的数量,该值在伽马空间。*/\r\n\tclamp: number = 65472.0;\r\n\t/**泛光颜色。*/\r\n\tcolor: Color = new Color(1.0, 1.0, 1.0, 1.0);\r\n\t/**是否开启快速模式。该模式通过降低质量来提升性能。*/\r\n\tfastMode: boolean = false;\r\n\t/**镜头污渍纹路,用于为泛光特效增加污渍灰尘效果*/\r\n\tdirtTexture: Texture2D = null;\r\n\r\n\t/**\r\n\t * 获取泛光过滤器强度,最小值为0。\r\n\t * @return 强度。\r\n\t */\r\n\tget intensity(): number {\r\n\t\treturn this._intensity;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置泛光过滤器强度,最小值为0。\r\n\t * @param value 强度。\r\n\t */\r\n\tset intensity(value: number) {\r\n\t\tthis._intensity = Math.max(value, 0.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置泛光阈值,在该阈值亮度以下的像素会被过滤掉,该值在伽马空间。\r\n\t * @return 阈值。\r\n\t */\r\n\tget threshold(): number {\r\n\t\treturn this._threshold;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取泛光阈值,在该阈值亮度以下的像素会被过滤掉,该值在伽马空间。\r\n\t * @param value 阈值。\r\n\t */\r\n\tset threshold(value: number) {\r\n\t\tthis._threshold = Math.max(value, 0.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取软膝盖过渡强度,在阈值以下进行渐变过渡(0为完全硬过度,1为完全软过度)。\r\n\t * @return 软膝盖值。\r\n\t */\r\n\tget softKnee(): number {\r\n\t\treturn this._softKnee;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置软膝盖过渡强度,在阈值以下进行渐变过渡(0为完全硬过度,1为完全软过度)。\r\n\t * @param value 软膝盖值。\r\n\t */\r\n\tset softKnee(value: number) {\r\n\t\tthis._softKnee = Math.min(Math.max(value, 0.0), 1.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取扩散值,改变泛光的扩散范围,最好使用整数值保证效果,该值会改变内部的迭代次数,范围是1到10。\r\n\t * @return 光晕的扩散范围。\r\n\t */\r\n\tget diffusion(): number {\r\n\t\treturn this._diffusion;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置扩散值,改变泛光的扩散范围,最好使用整数值保证效果,该值会改变内部的迭代次数,范围是1到10。\r\n\t * @param value 光晕的扩散范围。\r\n\t */\r\n\tset diffusion(value: number) {\r\n\t\tthis._diffusion = Math.min(Math.max(value, 1), 10);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取形变比,通过扭曲泛光产生视觉上形变,负值为垂直扭曲,正值为水平扭曲。\r\n\t * @return 形变比。\r\n\t */\r\n\tget anamorphicRatio(): number {\r\n\t\treturn this._anamorphicRatio;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置形变比,通过扭曲泛光产生视觉上形变,负值为垂直扭曲,正值为水平扭曲。\r\n\t * @param value 形变比。\r\n\t */\r\n\tset anamorphicRatio(value: number) {\r\n\t\tthis._anamorphicRatio = Math.min(Math.max(value, -1.0), 1.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取污渍强度。\r\n\t * @return 污渍强度。\r\n\t */\r\n\tget dirtIntensity(): number {\r\n\t\treturn this._dirtIntensity;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置污渍强度。\r\n\t * @param value 污渍强度。\r\n\t */\r\n\tset dirtIntensity(value: number) {\r\n\t\tthis._dirtIntensity = Math.max(value, 0.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>BloomEffect</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._shader = Shader3D.find(\"PostProcessBloom\");\r\n\t\tthis._pyramid = new Array(BloomEffect.MAXPYRAMIDSIZE * 2);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\trender(context: PostProcessRenderContext): void {\r\n\t\tvar cmd: CommandBuffer = context.command;\r\n\t\tvar viewport: Viewport = context.camera.viewport;\r\n\r\n\t\t//应用自动曝光调整纹理\r\n\t\tthis._shaderData.setTexture(BloomEffect.SHADERVALUE_AUTOEXPOSURETEX, Texture2D.whiteTexture);\r\n\r\n\t\t//获取垂直扭曲和水平扭曲宽高\r\n\t\tvar ratio: number = this._anamorphicRatio;\r\n\t\tvar rw: number = ratio < 0 ? -ratio : 0;\r\n\t\tvar rh: number = ratio > 0 ? ratio : 0;\r\n\r\n\t\t//半分辨率模糊,性效比较高\r\n\t\tvar tw: number = Math.floor(viewport.width / (2 - rw));\r\n\t\tvar th: number = Math.floor(viewport.height / (2 - rh));\r\n\r\n\t\t//计算迭代次数\r\n\t\tvar s: number = Math.max(tw, th);\r\n\t\tvar logs: number;\r\n\t\tlogs = Math.log2(s) + this._diffusion - 10;\r\n\t\tvar logsInt: number = Math.floor(logs);\r\n\t\tvar iterations: number = Math.min(Math.max(logsInt, 1), BloomEffect.MAXPYRAMIDSIZE);\r\n\t\tvar sampleScale: number = 0.5 + logs - logsInt;\r\n\t\tthis._shaderData.setNumber(BloomEffect.SHADERVALUE_SAMPLESCALE, sampleScale);\r\n\r\n\t\t//预过滤参数\r\n\t\tvar lthresh: number = Color.gammaToLinearSpace(this.threshold);\r\n\t\tvar knee: number = lthresh * this._softKnee + 1e-5;\r\n\t\tthis._shaderThreshold.setValue(lthresh, lthresh - knee, knee * 2, 0.25 / knee);\r\n\t\tthis._shaderData.setVector(BloomEffect.SHADERVALUE_THRESHOLD, this._shaderThreshold);\r\n\t\tvar lclamp: number = Color.gammaToLinearSpace(this.clamp);\r\n\r\n\t\tthis._shaderParams.setValue(lclamp, 0, 0, 0);\r\n\t\tthis._shaderData.setVector(BloomEffect.SHADERVALUE_PARAMS, this._shaderParams);\r\n\r\n\t\tvar qualityOffset: number = this.fastMode ? 1 : 0;\r\n\r\n\t\t// Downsample\r\n\t\tvar lastDownTexture: RenderTexture = context.source;\r\n\t\tfor (var i: number = 0; i < iterations; i++) {\r\n\t\t\tvar downIndex: number = i * 2;\r\n\t\t\tvar upIndex: number = downIndex + 1;\r\n\t\t\tvar subShader: number = i == 0 ? BloomEffect.SUBSHADER_PREFILTER13 + qualityOffset : BloomEffect.SUBSHADER_DOWNSAMPLE13 + qualityOffset;\r\n\r\n\t\t\tvar mipDownTexture: RenderTexture = RenderTexture.createFromPool(tw, th, RenderTextureFormat.R8G8B8, RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\r\n\t\t\tmipDownTexture.filterMode = FilterMode.Bilinear;\r\n\t\t\tthis._pyramid[downIndex] = mipDownTexture;\r\n\r\n\t\t\tif (i !== iterations - 1) {\r\n\t\t\t\tvar mipUpTexture: RenderTexture = RenderTexture.createFromPool(tw, th, RenderTextureFormat.R8G8B8, RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\r\n\t\t\t\tmipUpTexture.filterMode = FilterMode.Bilinear;\r\n\t\t\t\tthis._pyramid[upIndex] = mipUpTexture;\r\n\t\t\t}\r\n\r\n\t\t\tcmd.blitScreenTriangle(lastDownTexture, mipDownTexture, null, this._shader, this._shaderData, subShader);\r\n\r\n\t\t\tlastDownTexture = mipDownTexture;\r\n\t\t\ttw = Math.max(Math.floor(tw / 2), 1);\r\n\t\t\tth = Math.max(Math.floor(th / 2), 1);\r\n\t\t}\r\n\t\t// Upsample\r\n\t\tvar lastUpTexture: RenderTexture = this._pyramid[(iterations - 1) * 2];//down\r\n\t\tfor (i = iterations - 2; i >= 0; i--) {\r\n\t\t\tdownIndex = i * 2;\r\n\t\t\tupIndex = downIndex + 1;\r\n\t\t\tmipDownTexture = this._pyramid[downIndex];\r\n\t\t\tmipUpTexture = this._pyramid[upIndex];\r\n\t\t\tcmd.setShaderDataTexture(this._shaderData, BloomEffect.SHADERVALUE_BLOOMTEX, mipDownTexture);//通过指令延迟设置\r\n\t\t\tcmd.blitScreenTriangle(lastUpTexture, mipUpTexture, null, this._shader, this._shaderData, BloomEffect.SUBSHADER_UPSAMPLETENT + qualityOffset);\r\n\t\t\tlastUpTexture = mipUpTexture;\r\n\t\t}\r\n\r\n\t\tvar linearColor: Color = this._linearColor;\r\n\t\tthis.color.toLinear(linearColor);\r\n\t\tvar intensity: number = Math.pow(2, this._intensity / 10.0) - 1.0;\r\n\t\tvar shaderSettings: Vector4 = this._shaderSetting;\r\n\t\tthis._shaderSetting.setValue(sampleScale, intensity, this._dirtIntensity, iterations);\r\n\r\n\t\t//镜头污渍\r\n\t\t//需要保证污渍纹理不变型\r\n\t\tvar dirtTexture: Texture2D = this.dirtTexture ? this.dirtTexture : Texture2D.blackTexture;\r\n\r\n\t\tvar dirtRatio: number = dirtTexture.width / dirtTexture.height;\r\n\t\tvar screenRatio: number = viewport.width / viewport.height;\r\n\t\tvar dirtTileOffset: Vector4 = this._dirtTileOffset;\r\n\t\tif (dirtRatio > screenRatio)\r\n\t\t\tdirtTileOffset.setValue(screenRatio / dirtRatio, 1.0, (1.0 - dirtTileOffset.x) * 0.5, 0.0);\r\n\t\telse if (dirtRatio < screenRatio)\r\n\t\t\tdirtTileOffset.setValue(1.0, dirtRatio / screenRatio, 0.0, (1.0 - dirtTileOffset.y) * 0.5);\r\n\r\n\t\t//合成Shader属性\r\n\t\tvar compositeShaderData: ShaderData = context.compositeShaderData;\r\n\t\tif (this.fastMode)\r\n\t\t\tcompositeShaderData.addDefine(PostProcess.SHADERDEFINE_BLOOM_LOW);\r\n\t\telse\r\n\t\t\tcompositeShaderData.addDefine(PostProcess.SHADERDEFINE_BLOOM);\r\n\r\n\t\tthis._bloomTextureTexelSize.setValue(1.0 / lastUpTexture.width, 1.0 / lastUpTexture.height, lastUpTexture.width, lastUpTexture.height);\r\n\r\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOM_DIRTTILEOFFSET, dirtTileOffset);\r\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOM_SETTINGS, shaderSettings);\r\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOM_COLOR, new Vector4(linearColor.r, linearColor.g, linearColor.b, linearColor.a));//TODO:需要Color支持\r\n\t\tcompositeShaderData.setTexture(PostProcess.SHADERVALUE_BLOOM_DIRTTEX, dirtTexture);\r\n\t\tcompositeShaderData.setTexture(PostProcess.SHADERVALUE_BLOOMTEX, lastUpTexture);\r\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOMTEX_TEXELSIZE, this._bloomTextureTexelSize);\r\n\r\n\r\n\t\t//释放渲染纹理\r\n\t\tfor (i = 0; i < iterations; i++) {\r\n\t\t\tdownIndex = i * 2;\r\n\t\t\tupIndex = downIndex + 1;\r\n\t\t\tRenderTexture.recoverToPool(this._pyramid[downIndex]);\r\n\t\t\t(i !== 0 && i !== iterations - 1) && (RenderTexture.recoverToPool(this._pyramid[upIndex]));//i==0为lastUpTexture,需延迟释放,i==iterations - 1,不存在\r\n\t\t}\r\n\r\n\t\tcontext.deferredReleaseTextures.push(lastUpTexture);//TODO:是否需要改机制\r\n\t}\r\n\r\n}\r\n\r\n\r\n","/**\r\n * ...\r\n * @author ...\r\n */\r\nexport class SceneManager {\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","/**\r\n\t * <code>Rand</code> 类用于通过128位整型种子创建随机数,算法来自:https://github.com/AndreasMadsen/xorshift。\r\n\t */\r\nexport class RandX {\r\n\t/**@internal */\r\n\tprivate static _CONVERTION_BUFFER: DataView = new DataView(new ArrayBuffer(8));\r\n\r\n\t/**@internal */\r\n\tprivate _state0U: number;\r\n\t/**@internal */\r\n\tprivate _state0L: number;\r\n\t/**@internal */\r\n\tprivate _state1U: number;\r\n\t/**@internal */\r\n\tprivate _state1L: number;\r\n\r\n\t/**基于时间种子的随机数。*/\r\n\tstatic defaultRand: RandX = new RandX([0, Date.now() / 65536, 0, Date.now() % 65536]);\r\n\r\n\t/**\r\n\t * 创建一个 <code>Rand</code> 实例。\r\n\t * @param\tseed  随机种子。\r\n\t */\r\n\tconstructor(seed: any[]) {\r\n\t\tif (!(seed instanceof Array) || seed.length !== 4)\r\n\t\t\tthrow new Error('Rand:Seed must be an array with 4 numbers');\r\n\r\n\t\tthis._state0U = seed[0] | 0;\r\n\t\tthis._state0L = seed[1] | 0;\r\n\t\tthis._state1U = seed[2] | 0;\r\n\t\tthis._state1L = seed[3] | 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过2x32位的数组，返回64位的随机数。\r\n\t * @return 64位的随机数。\r\n\t */\r\n\trandomint(): any[] {\r\n\t\t// uint64_t s1 = s[0]\r\n\t\tvar s1U: number = this._state0U, s1L: number = this._state0L;\r\n\t\t// uint64_t s0 = s[1]\r\n\t\tvar s0U: number = this._state1U, s0L: number = this._state1L;\r\n\r\n\t\t// result = s0 + s1\r\n\t\tvar sumL: number = (s0L >>> 0) + (s1L >>> 0);\r\n\t\tvar resU: number = (s0U + s1U + (sumL / 2 >>> 31)) >>> 0;\r\n\t\tvar resL: number = sumL >>> 0;\r\n\r\n\t\t// s[0] = s0\r\n\t\tthis._state0U = s0U;\r\n\t\tthis._state0L = s0L;\r\n\r\n\t\t// - t1 = [0, 0]\r\n\t\tvar t1U: number = 0, t1L: number = 0;\r\n\t\t// - t2 = [0, 0]\r\n\t\tvar t2U: number = 0, t2L: number = 0;\r\n\r\n\t\t// s1 ^= s1 << 23;\r\n\t\t// :: t1 = s1 << 23\r\n\t\tvar a1: number = 23;\r\n\t\tvar m1: number = 0xFFFFFFFF << (32 - a1);\r\n\t\tt1U = (s1U << a1) | ((s1L & m1) >>> (32 - a1));\r\n\t\tt1L = s1L << a1;\r\n\t\t// :: s1 = s1 ^ t1\r\n\t\ts1U = s1U ^ t1U;\r\n\t\ts1L = s1L ^ t1L;\r\n\r\n\t\t// t1 = ( s1 ^ s0 ^ ( s1 >> 17 ) ^ ( s0 >> 26 ) )\r\n\t\t// :: t1 = s1 ^ s0\r\n\t\tt1U = s1U ^ s0U;\r\n\t\tt1L = s1L ^ s0L;\r\n\t\t// :: t2 = s1 >> 18\r\n\t\tvar a2: number = 18;\r\n\t\tvar m2: number = 0xFFFFFFFF >>> (32 - a2);\r\n\t\tt2U = s1U >>> a2;\r\n\t\tt2L = (s1L >>> a2) | ((s1U & m2) << (32 - a2));\r\n\t\t// :: t1 = t1 ^ t2\r\n\t\tt1U = t1U ^ t2U;\r\n\t\tt1L = t1L ^ t2L;\r\n\t\t// :: t2 = s0 >> 5\r\n\t\tvar a3: number = 5;\r\n\t\tvar m3: number = 0xFFFFFFFF >>> (32 - a3);\r\n\t\tt2U = s0U >>> a3;\r\n\t\tt2L = (s0L >>> a3) | ((s0U & m3) << (32 - a3));\r\n\t\t// :: t1 = t1 ^ t2\r\n\t\tt1U = t1U ^ t2U;\r\n\t\tt1L = t1L ^ t2L;\r\n\r\n\t\t// s[1] = t1\r\n\t\tthis._state1U = t1U;\r\n\t\tthis._state1L = t1L;\r\n\r\n\t\t// return result\r\n\t\treturn [resU, resL];\r\n\t}\r\n\r\n\t/**\r\n\t * 返回[0,1)之间的随机数。\r\n\t * @return\r\n\t */\r\n\trandom(): number {\r\n\t\t// :: t2 = randomint()\r\n\t\tvar t2: any[] = this.randomint();\r\n\t\tvar t2U: number = t2[0];\r\n\t\tvar t2L: number = t2[1];\r\n\r\n\t\t// :: e = UINT64_C(0x3FF) << 52\r\n\t\tvar eU: number = 0x3FF << (52 - 32);\r\n\t\tvar eL: number = 0;\r\n\r\n\t\t// :: s = t2 >> 12\r\n\t\tvar a1: number = 12;\r\n\t\tvar m1: number = 0xFFFFFFFF >>> (32 - a1);\r\n\t\tvar sU: number = t2U >>> a1;\r\n\t\tvar sL: number = (t2L >>> a1) | ((t2U & m1) << (32 - a1));\r\n\r\n\t\t// :: x = e | s\r\n\t\tvar xU: number = eU | sU;\r\n\t\tvar xL: number = eL | sL;\r\n\r\n\t\t// :: double d = *((double *)&x)\r\n\t\tRandX._CONVERTION_BUFFER.setUint32(0, xU, false);\r\n\t\tRandX._CONVERTION_BUFFER.setUint32(4, xL, false);\r\n\t\tvar d: number = RandX._CONVERTION_BUFFER.getFloat64(0, false);\r\n\r\n\t\t// :: d - 1\r\n\t\treturn d - 1;\r\n\t}\r\n}\r\n\r\n\r\n","import { Rigidbody3D } from \"./Rigidbody3D\";\r\nimport { PhysicsSimulation } from \"./PhysicsSimulation\"\r\n\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nexport class Constraint3D {\r\n\t/**@internal */\r\n\t_btConstraint: number;\r\n\t/**@internal */\r\n\t_simulation: PhysicsSimulation;\r\n\r\n\t/**获取刚体A。[只读]*/\r\n\trigidbodyA: Rigidbody3D;\r\n\t/**获取刚体A。[只读]*/\r\n\trigidbodyB: Rigidbody3D;\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Vector3 } from \"../../math/Vector3\"\r\n\t\r\n\t/**\r\n\t * <code>Point2PointConstraint</code> 类用于创建物理组件的父类。\r\n\t */\r\n\texport class Point2PointConstraint {\r\n\t\t/**@internal */\r\n\t\tprivate _pivotInA:Vector3 = new Vector3();\r\n\t\t/**@internal */\r\n\t\tprivate _pivotInB:Vector3 = new Vector3();\r\n\t\t/**@internal */\r\n\t\tprivate _damping:number;\r\n\t\t/**@internal */\r\n\t\tprivate _impulseClamp:number;\r\n\t\t/**@internal */\r\n\t\tprivate _tau:number;\r\n\t\t\r\n\t\t get pivotInA():Vector3 {\r\n\t\t\treturn this._pivotInA;\r\n\t\t}\r\n\t\t\r\n\t\t set pivotInA(value:Vector3) {\r\n\t\t\tthis._pivotInA = value;\r\n\t\t}\r\n\t\t\r\n\t\t get pivotInB():Vector3 {\r\n\t\t\treturn this._pivotInB;\r\n\t\t}\r\n\t\t\r\n\t\t set pivotInB(value:Vector3) {\r\n\t\t\tthis._pivotInB = value;\r\n\t\t}\r\n\t\t\r\n\t\t get damping():number {\r\n\t\t\treturn this._damping;\r\n\t\t}\r\n\t\t\r\n\t\t set damping(value:number) {\r\n\t\t\tthis._damping = value;\r\n\t\t}\r\n\t\t\r\n\t\t get impulseClamp():number {\r\n\t\t\treturn this._impulseClamp;\r\n\t\t}\r\n\t\t\r\n\t\t set impulseClamp(value:number) {\r\n\t\t\tthis._impulseClamp = value;\r\n\t\t}\r\n\t\t\r\n\t\t get tau():number {\r\n\t\t\treturn this._tau;\r\n\t\t}\r\n\t\t\r\n\t\t set tau(value:number) {\r\n\t\t\tthis._tau = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个 <code>Point2PointConstraint</code> 实例。\r\n\t\t */\r\n\t\tconstructor(){\r\n\t\t\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","/**\r\n\t * ...\r\n\t * @author ...\r\n\t */\r\nexport class HeightfieldColliderShape {\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IndexBuffer3D } from \"../graphics/IndexBuffer3D\"\r\n\timport { VertexBuffer3D } from \"../graphics/VertexBuffer3D\"\r\n\timport { Color } from \"../math/Color\"\r\n\t\r\n\t/**\r\n\t * <code>TextMesh</code> 类用于创建文本网格。\r\n\t */\r\n\texport class TextMesh {\r\n\t\tprivate static _indexBuffer:IndexBuffer3D;\r\n\t\t\r\n\t\tprivate _vertices:Float32Array;\r\n\t\tprivate _vertexBuffer:VertexBuffer3D;\r\n\t\tprivate _text:string;\r\n\t\tprivate _fontSize:number;\r\n\t\tprivate _color:Color;\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取文本。\r\n\t\t * @return 文本。\r\n\t\t */\r\n\t\t get text():string {\r\n\t\t\treturn this._text;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置文本。\r\n\t\t * @param value 文本。\r\n\t\t */\r\n\t\t set text(value:string) {\r\n\t\t\tthis._text = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取字体尺寸。\r\n\t\t * @param  value 字体尺寸。\r\n\t\t */\r\n\t\t get fontSize():number {\r\n\t\t\treturn this._fontSize;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置字体储存。\r\n\t\t * @return 字体尺寸。\r\n\t\t */\r\n\t\t set fontSize(value:number) {\r\n\t\t\tthis._fontSize = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取颜色。\r\n\t\t * @return 颜色。\r\n\t\t */\r\n\t\t get color():Color {\r\n\t\t\treturn this._color;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置颜色。\r\n\t\t * @param 颜色。\r\n\t\t */\r\n\t\t set color(value:Color) {\r\n\t\t\tthis._color = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个新的 <code>TextMesh</code> 实例。\r\n\t\t */\r\n\t\tconstructor(){\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\r\n\t\tprivate _createVertexBuffer(charCount:number):void {\r\n\t\t\t//var verDec:VertexDeclaration = vertexbu.vertexDeclaration;\r\n\t\t\t//var newVertices:Float32Array = new Float32Array(verticesCount * FLOATCOUNTPERVERTEX);\r\n\t\t\t//var newVertecBuffer:VertexBuffer3D = new VertexBuffer3D(verDec.vertexStride * verticesCount, WebGLContext.DYNAMIC_DRAW, false);\r\n\t\t\t//var bufferState:BufferState = new BufferState();\r\n\t\t\t//newVertecBuffer.vertexDeclaration = verDec;\r\n\t\t\t//\r\n\t\t\t//bufferState.bind();\r\n\t\t\t//bufferState.applyVertexBuffer(newVertecBuffer);\r\n\t\t\t//bufferState.applyIndexBuffer(_indexBuffer);\r\n\t\t\t//bufferState.unBind();\r\n\t\t\t//\r\n\t\t\t//_vertices.push(newVertices);\r\n\t\t\t//_vertexbuffers.push(newVertecBuffer);\r\n\t\t\t//_vertexUpdateFlag.push([2147483647/*int.MAX_VALUE*/, -2147483647/*int.MIN_VALUE*/]);//0:startUpdate,1:endUpdate\r\n\t\t\t//_bufferStates.push(bufferState);\r\n\t\t}\r\n\t\t\r\n\t\r\n\t\tprivate _resizeVertexBuffer(charCount:number):void {\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\r\n\t\tprivate _addChar():void {\r\n\t\t\t//_vertexBuffer\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","import { RenderContext3D } from \"../core/render/RenderContext3D\"\r\n\t\r\n\texport class Size {\r\n\t\t static get fullScreen():Size {\r\n\t\t\treturn new Size(-1, -1);\r\n\t\t}\r\n\t\t\r\n\t\tprivate _width:number = 0;\r\n\t\tprivate _height:number = 0;\r\n\t\t\r\n\t\t get width():number {\r\n\t\t\tif (this._width === -1)\r\n\t\t\t\treturn RenderContext3D.clientWidth;\r\n\t\t\t\r\n\t\t\treturn this._width;\r\n\t\t}\r\n\t\t\r\n\t\t get height():number {\r\n\t\t\tif (this._height === -1)\r\n\t\t\t\treturn RenderContext3D.clientHeight;\r\n\t\t\treturn this._height;\r\n\t\t}\r\n\t\t\r\n\t\tconstructor(width:number, height:number){\r\n\t\t\tthis._width = width;\r\n\t\t\tthis._height = height;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n"],"names":["PBRRenderQuality","LayaGL","EventDispatcher","Event","Component","Loader","Stat","TextureFormat","Texture2D","FilterMode","WarpMode","CannonColliderShape","CannonPhysicsComponent","CannonPhysicsSimulation","CannonBoxColliderShape","CannonRigidbody3D","CannonPhysicsSettings","Render","Resource","Byte","ILaya","BaseTexture","RenderTextureFormat","RenderTextureDepthFormat","WebGLContext","ShaderCompile","Laya","ClassUtils","PBRRenderMode","LayaGLRunner","FrustumCorner","BufferStateBase","IndexFormat","Buffer","Node","URL","ShadowMode","LightType","ShadowCascadesMode","SystemUtils","CameraClearFlags","Point","TextureCubeFace","ReflectionProbeMode","TextureDecodeFormat","ShadowLightType","AmbientMode","Sprite","SubmitKey","VideoTexture","SubmitBase","Context","ShaderNode","WebGL","PBRSpecularSmoothnessSource","PBRMetallicSmoothnessSource","PBRVS","PBRPS","PBRShadowCasterVS","PBRShadowCasterPS","ParticleSystemShapeType","MathUtil","TrailAlignment","Config","RunDriver","CommandEncoder","LoaderManager","Handler"],"mappings":"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GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/D,IAAI,GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SAE/D,IAAI,GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/D,IAAI,GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/D,IAAI,GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SAE/D,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;SACzC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;SACzC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;SAEzC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;SACzC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;SACzC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;SAEzC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;SACzC,CAAC,CAAC,CAAC,CAAC,GAA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GAAG,GAAG,GAAG,CAAC,CAAC;SAC7D,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SAC7D,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SAC7D,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SAC7D,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SAC9D,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SAC9D,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SAC9D,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SAC9D,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SAC9D,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,C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C,CAAC;SACzE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SACzE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SACzE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SACzE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SACzE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SACzE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SACzE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SACzE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;SACzE,CAAC,CAAC,SAAS,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK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E,CAAC,EAAE,CAAC;aAE1M,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;aAE1M,QAAQ,EAAE,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;aAElM,CAAC,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;aAElM,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE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"}