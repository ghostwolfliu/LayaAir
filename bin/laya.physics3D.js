window.Physics3D = function (pages, interactive) {
                function init(initialMemory,interactive,exports){
                var getWorldTransform=interactive.getWorldTransform;
                var setWorldTransform=interactive.setWorldTransform;
                var fd_close=() => { console.log('fd_close')};
                var fd_write=() => { console.log('fd_write')};
                var fd_seek=() => { console.log('fd_seek')};
                if(!window.atob){
                    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
                    window.atob=function atob(input) {
                        var str = (String (input)).replace (/[=]+$/, ''); // #31: ExtendScript bad parse of /=
                        if (str.length % 4 === 1) {
                        throw new InvalidCharacterError ("'atob' failed: The string to be decoded is not correctly encoded.");
                        }
                        for (
                        // initialize result and counters
                        var bc = 0, bs, buffer, idx = 0, output = '';
                        // get next character
                        buffer = str.charAt (idx++); // eslint-disable-line no-cond-assign
                        // character found in table? initialize bit storage and add its ascii value;
                        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
                            // and if not first of each 4 characters,
                            // convert the first 8 bits to one ascii character
                            bc++ % 4) ? output += String.fromCharCode (255 & bs >> (-2 * bc & 6)) : 0
                        ) {
                        // try to find character in table (0-63, not found => -1)
                        buffer = chars.indexOf (buffer);
                        }
                        return output;
                    }
                }






  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[0];
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$1 = env.fd_close;
 var fimport$2 = env.fd_write;
 var fimport$4 = env.getWorldTransform;
 var fimport$5 = env.setWorldTransform;
 var legalimport$fimport$3 = env.fd_seek;
 var global$0 = 90784;
 var global$1 = 90784;
 var i64toi32_i32$HIGH_BITS = 0;
 function $1($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $0 = fimport$1(HEAP32[$0 + 56 >> 2]) | 0;
  $1_1 = 0;
  __inlined_func$0 : {
   if (!$0) {
    break __inlined_func$0
   }
   HEAP32[5856] = $0;
   $1_1 = -1;
  }
  return $1_1 | 0;
 }
 
 function $2($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = -1;
  label$1 : {
   if (($2_1 | 0) <= -1) {
    HEAP32[5856] = 28;
    break label$1;
   }
   $0 = fimport$2($0 | 0, $1_1 | 0, $2_1 | 0, $3_1 + 12 | 0) | 0;
   if ($0) {
    HEAP32[5856] = $0;
    break label$1;
   }
   $4_1 = HEAP32[$3_1 + 12 >> 2];
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1;
 }
 
 function $3($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $2_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  $1_1 = HEAP32[$0 + 24 >> 2];
  HEAP32[$4_1 >> 2] = $1_1;
  $1_1 = HEAP32[$0 + 20 >> 2] - $1_1 | 0;
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $6_1 = 2;
  $7_1 = $1_1 + $2_1 | 0;
  $3_1 = $2(HEAP32[$0 + 56 >> 2], $4_1, 2);
  label$1 : {
   if (($7_1 | 0) != ($3_1 | 0)) {
    $1_1 = $4_1;
    while (1) {
     if (($3_1 | 0) <= -1) {
      HEAP32[$0 + 24 >> 2] = 0;
      HEAP32[$0 + 16 >> 2] = 0;
      HEAP32[$0 + 20 >> 2] = 0;
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
      $0 = 0;
      if (($6_1 | 0) == 2) {
       break label$1
      }
      $0 = $2_1 - HEAP32[$1_1 + 4 >> 2] | 0;
      break label$1;
     }
     $5_1 = HEAP32[$1_1 + 4 >> 2];
     $8_1 = $3_1 >>> 0 > $5_1 >>> 0;
     $1_1 = $8_1 ? $1_1 + 8 | 0 : $1_1;
     $5_1 = $3_1 - ($8_1 ? $5_1 : 0) | 0;
     HEAP32[$1_1 >> 2] = $5_1 + HEAP32[$1_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] - $5_1;
     $7_1 = $7_1 - $3_1 | 0;
     $6_1 = $6_1 - $8_1 | 0;
     $3_1 = $2(HEAP32[$0 + 56 >> 2], $1_1, $6_1);
     if (($7_1 | 0) != ($3_1 | 0)) {
      continue
     }
     break;
    };
   }
   $1_1 = HEAP32[$0 + 40 >> 2];
   HEAP32[$0 + 24 >> 2] = $1_1;
   HEAP32[$0 + 20 >> 2] = $1_1;
   HEAP32[$0 + 16 >> 2] = $1_1 + HEAP32[$0 + 44 >> 2];
   $0 = $2_1;
  }
  $3_1 = $0;
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $4($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $0 = legalimport$fimport$3($0 | 0, $1_1 | 0, $2_1 | 0, $3_1 & 255, $4_1 + 8 | 0) | 0;
  label$1 : {
   if ($0) {
    HEAP32[5856] = ($0 | 0) == 76 ? 70 : $0;
    $2_1 = -1;
    $0 = -1;
    break label$1;
   }
   $2_1 = HEAP32[$4_1 + 12 >> 2];
   $0 = HEAP32[$4_1 + 8 >> 2];
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $2_1;
  return $0;
 }
 
 function $5($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0 = $4(HEAP32[$0 + 56 >> 2], $1_1, $2_1, $3_1);
  return $0 | 0;
 }
 
 function $6($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 60 >> 2];
  HEAP32[$0 + 60 >> 2] = $1_1 + -1 | $1_1;
  $1_1 = HEAP32[$0 >> 2];
  if ($1_1 & 8) {
   HEAP32[$0 >> 2] = $1_1 | 32;
   return -1;
  }
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  $1_1 = HEAP32[$0 + 40 >> 2];
  HEAP32[$0 + 24 >> 2] = $1_1;
  HEAP32[$0 + 20 >> 2] = $1_1;
  HEAP32[$0 + 16 >> 2] = $1_1 + HEAP32[$0 + 44 >> 2];
  return 0;
 }
 
 function $7($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   if (!(!$2_1 | !($1_1 & 3))) {
    while (1) {
     HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
     $3_1 = $2_1 + -1 | 0;
     $0 = $0 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     if (($2_1 | 0) == 1) {
      break label$1
     }
     $2_1 = $3_1;
     if ($1_1 & 3) {
      continue
     }
     break;
    };
    break label$1;
   }
   $3_1 = $2_1;
  }
  $2_1 = $0 & 3;
  label$4 : {
   if (!$2_1) {
    label$6 : {
     if ($3_1 >>> 0 < 16) {
      $2_1 = $3_1;
      break label$6;
     }
     $2_1 = $3_1 + -16 | 0;
     while (1) {
      HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
      HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2];
      $0 = $0 + 16 | 0;
      $1_1 = $1_1 + 16 | 0;
      $3_1 = $3_1 + -16 | 0;
      if ($3_1 >>> 0 > 15) {
       continue
      }
      break;
     };
    }
    if ($2_1 & 8) {
     $3_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0 + 4 >> 2] = $3_1;
     $1_1 = $1_1 + 8 | 0;
     $0 = $0 + 8 | 0;
    }
    if ($2_1 & 4) {
     HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
     $1_1 = $1_1 + 4 | 0;
     $0 = $0 + 4 | 0;
    }
    if ($2_1 & 2) {
     HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
     HEAP8[$0 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
     $1_1 = $1_1 + 2 | 0;
     $0 = $0 + 2 | 0;
    }
    if (!($2_1 & 1)) {
     break label$4
    }
    HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
    return;
   }
   label$12 : {
    if ($3_1 >>> 0 < 32) {
     break label$12
    }
    $2_1 = $2_1 + -1 | 0;
    if ($2_1 >>> 0 > 2) {
     break label$12
    }
    label$13 : {
     switch ($2_1 - 1 | 0) {
     default:
      HEAP8[$0 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
      $4_1 = HEAP32[$1_1 >> 2];
      HEAP8[$0 | 0] = $4_1;
      HEAP8[$0 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
      $7_1 = $3_1 + -3 | 0;
      $8_1 = $0 + 3 | 0;
      $9_1 = $3_1 + -20 & -16;
      $2_1 = 0;
      while (1) {
       $0 = $2_1 + $8_1 | 0;
       $6_1 = $1_1 + $2_1 | 0;
       $5_1 = HEAP32[$6_1 + 4 >> 2];
       HEAP32[$0 >> 2] = $5_1 << 8 | $4_1 >>> 24;
       $4_1 = HEAP32[$6_1 + 8 >> 2];
       HEAP32[$0 + 4 >> 2] = $4_1 << 8 | $5_1 >>> 24;
       $5_1 = HEAP32[$6_1 + 12 >> 2];
       HEAP32[$0 + 8 >> 2] = $5_1 << 8 | $4_1 >>> 24;
       $4_1 = HEAP32[$6_1 + 16 >> 2];
       HEAP32[$0 + 12 >> 2] = $4_1 << 8 | $5_1 >>> 24;
       $2_1 = $2_1 + 16 | 0;
       $7_1 = $7_1 + -16 | 0;
       if ($7_1 >>> 0 > 16) {
        continue
       }
       break;
      };
      $0 = $2_1 + $8_1 | 0;
      $1_1 = ($1_1 + $2_1 | 0) + 3 | 0;
      $3_1 = ($3_1 - $9_1 | 0) + -19 | 0;
      break label$12;
     case 0:
      $4_1 = HEAP32[$1_1 >> 2];
      HEAP8[$0 | 0] = $4_1;
      HEAP8[$0 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
      $7_1 = $3_1 + -2 | 0;
      $8_1 = $0 + 2 | 0;
      $9_1 = $3_1 + -20 & -16;
      $2_1 = 0;
      while (1) {
       $0 = $2_1 + $8_1 | 0;
       $6_1 = $1_1 + $2_1 | 0;
       $5_1 = HEAP32[$6_1 + 4 >> 2];
       HEAP32[$0 >> 2] = $5_1 << 16 | $4_1 >>> 16;
       $4_1 = HEAP32[$6_1 + 8 >> 2];
       HEAP32[$0 + 4 >> 2] = $4_1 << 16 | $5_1 >>> 16;
       $5_1 = HEAP32[$6_1 + 12 >> 2];
       HEAP32[$0 + 8 >> 2] = $5_1 << 16 | $4_1 >>> 16;
       $4_1 = HEAP32[$6_1 + 16 >> 2];
       HEAP32[$0 + 12 >> 2] = $4_1 << 16 | $5_1 >>> 16;
       $2_1 = $2_1 + 16 | 0;
       $7_1 = $7_1 + -16 | 0;
       if ($7_1 >>> 0 > 17) {
        continue
       }
       break;
      };
      $0 = $2_1 + $8_1 | 0;
      $1_1 = ($1_1 + $2_1 | 0) + 2 | 0;
      $3_1 = ($3_1 - $9_1 | 0) + -18 | 0;
      break label$12;
     case 1:
      break label$13;
     };
    }
    $4_1 = HEAP32[$1_1 >> 2];
    HEAP8[$0 | 0] = $4_1;
    $7_1 = $3_1 + -1 | 0;
    $8_1 = $0 + 1 | 0;
    $9_1 = $3_1 + -20 & -16;
    $2_1 = 0;
    while (1) {
     $0 = $2_1 + $8_1 | 0;
     $6_1 = $1_1 + $2_1 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$0 >> 2] = $5_1 << 24 | $4_1 >>> 8;
     $4_1 = HEAP32[$6_1 + 8 >> 2];
     HEAP32[$0 + 4 >> 2] = $4_1 << 24 | $5_1 >>> 8;
     $5_1 = HEAP32[$6_1 + 12 >> 2];
     HEAP32[$0 + 8 >> 2] = $5_1 << 24 | $4_1 >>> 8;
     $4_1 = HEAP32[$6_1 + 16 >> 2];
     HEAP32[$0 + 12 >> 2] = $4_1 << 24 | $5_1 >>> 8;
     $2_1 = $2_1 + 16 | 0;
     $7_1 = $7_1 + -16 | 0;
     if ($7_1 >>> 0 > 18) {
      continue
     }
     break;
    };
    $0 = $2_1 + $8_1 | 0;
    $1_1 = ($1_1 + $2_1 | 0) + 1 | 0;
    $3_1 = ($3_1 - $9_1 | 0) + -17 | 0;
   }
   if ($3_1 & 16) {
    $2_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8;
    HEAP8[$0 | 0] = $2_1;
    HEAP8[$0 + 1 | 0] = $2_1 >>> 8;
    HEAP8[$0 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
    HEAP8[$0 + 3 | 0] = HEAPU8[$1_1 + 3 | 0];
    HEAP8[$0 + 4 | 0] = HEAPU8[$1_1 + 4 | 0];
    HEAP8[$0 + 5 | 0] = HEAPU8[$1_1 + 5 | 0];
    HEAP8[$0 + 6 | 0] = HEAPU8[$1_1 + 6 | 0];
    HEAP8[$0 + 7 | 0] = HEAPU8[$1_1 + 7 | 0];
    HEAP8[$0 + 8 | 0] = HEAPU8[$1_1 + 8 | 0];
    HEAP8[$0 + 9 | 0] = HEAPU8[$1_1 + 9 | 0];
    HEAP8[$0 + 10 | 0] = HEAPU8[$1_1 + 10 | 0];
    HEAP8[$0 + 11 | 0] = HEAPU8[$1_1 + 11 | 0];
    HEAP8[$0 + 12 | 0] = HEAPU8[$1_1 + 12 | 0];
    HEAP8[$0 + 13 | 0] = HEAPU8[$1_1 + 13 | 0];
    HEAP8[$0 + 14 | 0] = HEAPU8[$1_1 + 14 | 0];
    HEAP8[$0 + 15 | 0] = HEAPU8[$1_1 + 15 | 0];
    $1_1 = $1_1 + 16 | 0;
    $0 = $0 + 16 | 0;
   }
   if ($3_1 & 8) {
    HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
    HEAP8[$0 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
    HEAP8[$0 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
    HEAP8[$0 + 3 | 0] = HEAPU8[$1_1 + 3 | 0];
    HEAP8[$0 + 4 | 0] = HEAPU8[$1_1 + 4 | 0];
    HEAP8[$0 + 5 | 0] = HEAPU8[$1_1 + 5 | 0];
    HEAP8[$0 + 6 | 0] = HEAPU8[$1_1 + 6 | 0];
    HEAP8[$0 + 7 | 0] = HEAPU8[$1_1 + 7 | 0];
    $1_1 = $1_1 + 8 | 0;
    $0 = $0 + 8 | 0;
   }
   if ($3_1 & 4) {
    HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
    HEAP8[$0 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
    HEAP8[$0 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
    HEAP8[$0 + 3 | 0] = HEAPU8[$1_1 + 3 | 0];
    $1_1 = $1_1 + 4 | 0;
    $0 = $0 + 4 | 0;
   }
   if ($3_1 & 2) {
    HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
    HEAP8[$0 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
    $1_1 = $1_1 + 2 | 0;
    $0 = $0 + 2 | 0;
   }
   if (!($3_1 & 1)) {
    break label$4
   }
   HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
  }
 }
 
 function $8($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = HEAP32[$2_1 + 16 >> 2];
  label$1 : {
   if (!$3_1) {
    if ($6($2_1)) {
     break label$1
    }
    $3_1 = HEAP32[$2_1 + 16 >> 2];
   }
   $5_1 = HEAP32[$2_1 + 20 >> 2];
   if ($3_1 - $5_1 >>> 0 < $1_1 >>> 0) {
    FUNCTION_TABLE[HEAP32[$2_1 + 32 >> 2]]($2_1, $0, $1_1) | 0;
    return;
   }
   label$4 : {
    if (HEAP32[$2_1 + 64 >> 2] < 0) {
     break label$4
    }
    $3_1 = $0;
    while (1) {
     if (($1_1 | 0) == ($4_1 | 0)) {
      break label$4
     }
     $4_1 = $4_1 + 1 | 0;
     $7_1 = $1_1 + $3_1 | 0;
     $6_1 = $3_1 + -1 | 0;
     $3_1 = $6_1;
     if (HEAPU8[$7_1 + -1 | 0] != 10) {
      continue
     }
     break;
    };
    $3_1 = $0;
    $0 = ($1_1 - $4_1 | 0) + 1 | 0;
    if (FUNCTION_TABLE[HEAP32[$2_1 + 32 >> 2]]($2_1, $3_1, $0) >>> 0 < $0 >>> 0) {
     break label$1
    }
    $0 = ($1_1 + $6_1 | 0) + 1 | 0;
    $5_1 = HEAP32[$2_1 + 20 >> 2];
    $1_1 = $4_1 + -1 | 0;
   }
   $7($5_1, $0, $1_1);
   HEAP32[$2_1 + 20 >> 2] = HEAP32[$2_1 + 20 >> 2] + $1_1;
  }
 }
 
 function $9($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = 3184;
  $3_1 = $0;
  $1_1 = HEAP32[5820];
  label$1 : {
   if (!$1_1) {
    $1_1 = 0;
    if ($6(23264)) {
     break label$1
    }
    $1_1 = HEAP32[5820];
   }
   $4_1 = HEAP32[5821];
   if ($1_1 - $4_1 >>> 0 < $3_1 >>> 0) {
    $1_1 = FUNCTION_TABLE[HEAP32[5824]](23264, 3184, $3_1) | 0;
    break label$1;
   }
   $2_1 = $3_1;
   label$4 : {
    if (HEAP32[5832] < 0) {
     break label$4
    }
    $7_1 = $3_1 + 3184 | 0;
    $1_1 = 0;
    while (1) {
     $2_1 = $3_1;
     if (!($1_1 + $3_1)) {
      break label$4
     }
     $8_1 = $1_1 + $7_1 | 0;
     $2_1 = $1_1 + -1 | 0;
     $1_1 = $2_1;
     if (HEAPU8[$8_1 + -1 | 0] != 10) {
      continue
     }
     break;
    };
    $5_1 = ($3_1 + $2_1 | 0) + 1 | 0;
    $1_1 = FUNCTION_TABLE[HEAP32[5824]](23264, 3184, $5_1) | 0;
    if ($1_1 >>> 0 < $5_1 >>> 0) {
     break label$1
    }
    $6_1 = ($2_1 + $7_1 | 0) + 1 | 0;
    $4_1 = HEAP32[5821];
    $2_1 = $2_1 ^ -1;
   }
   $1_1 = $2_1;
   $7($4_1, $6_1, $1_1);
   HEAP32[5821] = HEAP32[5821] + $1_1;
   $1_1 = $1_1 + $5_1 | 0;
  }
  if (($1_1 | 0) == ($3_1 | 0)) {
   return $0
  }
  return $1_1;
 }
 
 function $12($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  if (!HEAP32[5865]) {
   HEAP32[5865] = 23436
  }
  label$2 : {
   label$3 : {
    while (1) {
     if (($0 | 0) != HEAPU8[$1_1 + 1040 | 0]) {
      $2_1 = 77;
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != 77) {
       continue
      }
      break label$3;
     }
     break;
    };
    $2_1 = $1_1;
    if ($1_1) {
     break label$3
    }
    $0 = 1120;
    break label$2;
   }
   $1_1 = 1120;
   while (1) {
    $3_1 = HEAPU8[$1_1 | 0];
    $0 = $1_1 + 1 | 0;
    $1_1 = $0;
    if ($3_1) {
     continue
    }
    $1_1 = $0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function $13($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = ($1_1 | 0) != 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1) {
      $2_1 = $1_1;
      break label$3;
     }
     if (!($0 & 3)) {
      $2_1 = $1_1;
      break label$3;
     }
     while (1) {
      if (!HEAPU8[$0 | 0]) {
       $2_1 = $1_1;
       break label$2;
      }
      $3_1 = ($1_1 | 0) != 1;
      $2_1 = $1_1 + -1 | 0;
      $0 = $0 + 1 | 0;
      if (($1_1 | 0) == 1) {
       break label$3
      }
      $1_1 = $2_1;
      if ($0 & 3) {
       continue
      }
      break;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$8 : {
    if (!HEAPU8[$0 | 0] | $2_1 >>> 0 < 4) {
     break label$8
    }
    while (1) {
     $1_1 = HEAP32[$0 >> 2];
     if (($1_1 ^ -1) & $1_1 + -16843009 & -2139062144) {
      break label$8
     }
     $0 = $0 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3) {
      continue
     }
     break;
    };
   }
   if (!$2_1) {
    break label$1
   }
   while (1) {
    if (!HEAPU8[$0 | 0]) {
     return $0
    }
    $0 = $0 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  return 0;
 }
 
 function $15($0, $1_1) {
  if ($0) {
   if ($1_1 >>> 0 <= 127) {
    HEAP8[$0 | 0] = $1_1;
    return 1;
   }
   label$3 : {
    if (!HEAP32[5859]) {
     if (($1_1 & -128) != 57216) {
      break label$3
     }
     HEAP8[$0 | 0] = $1_1;
     return 1;
    }
    if ($1_1 >>> 0 <= 2047) {
     HEAP8[$0 + 1 | 0] = $1_1 & 63 | 128;
     HEAP8[$0 | 0] = $1_1 >>> 6 | 192;
     return 2;
    }
    if (!(($1_1 & -8192) != 57344 ? $1_1 >>> 0 >= 55296 : 0)) {
     HEAP8[$0 + 2 | 0] = $1_1 & 63 | 128;
     HEAP8[$0 | 0] = $1_1 >>> 12 | 224;
     HEAP8[$0 + 1 | 0] = $1_1 >>> 6 & 63 | 128;
     return 3;
    }
    if ($1_1 + -65536 >>> 0 <= 1048575) {
     HEAP8[$0 + 3 | 0] = $1_1 & 63 | 128;
     HEAP8[$0 | 0] = $1_1 >>> 18 | 240;
     HEAP8[$0 + 2 | 0] = $1_1 >>> 6 & 63 | 128;
     HEAP8[$0 + 1 | 0] = $1_1 >>> 12 & 63 | 128;
     return 4;
    }
   }
   HEAP32[5856] = 25;
   $0 = -1;
  } else {
   $0 = 1
  }
  return $0;
 }
 
 function $16($0, $1_1) {
  if (!$0) {
   return 0
  }
  return $15($0, $1_1);
 }
 
 function $17($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP8[$0 | 0] = $1_1;
   $3_1 = $0 + $2_1 | 0;
   HEAP8[$3_1 + -1 | 0] = $1_1;
   if ($2_1 >>> 0 < 3) {
    break label$1
   }
   HEAP8[$0 + 2 | 0] = $1_1;
   HEAP8[$0 + 1 | 0] = $1_1;
   HEAP8[$3_1 + -3 | 0] = $1_1;
   HEAP8[$3_1 + -2 | 0] = $1_1;
   if ($2_1 >>> 0 < 7) {
    break label$1
   }
   HEAP8[$0 + 3 | 0] = $1_1;
   HEAP8[$3_1 + -4 | 0] = $1_1;
   if ($2_1 >>> 0 < 9) {
    break label$1
   }
   $3_1 = 0 - $0 & 3;
   $4_1 = $3_1 + $0 | 0;
   $1_1 = Math_imul($1_1 & 255, 16843009);
   HEAP32[$4_1 >> 2] = $1_1;
   $2_1 = $2_1 - $3_1 & -4;
   $3_1 = $2_1 + $4_1 | 0;
   HEAP32[$3_1 + -4 >> 2] = $1_1;
   if ($2_1 >>> 0 < 9) {
    break label$1
   }
   HEAP32[$4_1 + 8 >> 2] = $1_1;
   HEAP32[$4_1 + 4 >> 2] = $1_1;
   HEAP32[$3_1 + -8 >> 2] = $1_1;
   HEAP32[$3_1 + -12 >> 2] = $1_1;
   if ($2_1 >>> 0 < 25) {
    break label$1
   }
   HEAP32[$4_1 + 24 >> 2] = $1_1;
   HEAP32[$4_1 + 20 >> 2] = $1_1;
   HEAP32[$4_1 + 16 >> 2] = $1_1;
   HEAP32[$4_1 + 12 >> 2] = $1_1;
   HEAP32[$3_1 + -16 >> 2] = $1_1;
   HEAP32[$3_1 + -20 >> 2] = $1_1;
   HEAP32[$3_1 + -24 >> 2] = $1_1;
   HEAP32[$3_1 + -28 >> 2] = $1_1;
   $6_1 = $4_1 & 4 | 24;
   $2_1 = $2_1 - $6_1 | 0;
   if ($2_1 >>> 0 < 32) {
    break label$1
   }
   $3_1 = $1_1;
   $5_1 = $1_1;
   $1_1 = $4_1 + $6_1 | 0;
   while (1) {
    HEAP32[$1_1 >> 2] = $5_1;
    HEAP32[$1_1 + 4 >> 2] = $3_1;
    $4_1 = $1_1 + 24 | 0;
    HEAP32[$4_1 >> 2] = $5_1;
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $4_1 = $1_1 + 16 | 0;
    HEAP32[$4_1 >> 2] = $5_1;
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $4_1 = $1_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = $5_1;
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function $18($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  wasm2js_scratch_store_f64(+$0);
  $2_1 = wasm2js_scratch_load_i32(1) | 0;
  $3_1 = wasm2js_scratch_load_i32(0) | 0;
  $4_1 = $2_1;
  $2_1 = $2_1 >>> 20 & 2047;
  if (($2_1 | 0) != 2047) {
   if (!$2_1) {
    if ($0 == 0.0) {
     HEAP32[$1_1 >> 2] = 0;
     return $0;
    }
    $0 = $18($0 * 18446744073709551615.0, $1_1);
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + -64;
    return $0;
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1022;
   wasm2js_scratch_store_i32(0, $3_1 | 0);
   wasm2js_scratch_store_i32(1, $4_1 & -2146435073 | 1071644672);
   $0 = +wasm2js_scratch_load_f64();
  }
  return $0;
 }
 
 function $19() {
  var $0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $0 = 3184;
     if (!($0 & 3)) {
      break label$3
     }
     if (!HEAPU8[3184]) {
      return 0
     }
     $0 = 3185;
     while (1) {
      if (!($0 & 3)) {
       break label$3
      }
      $1_1 = HEAPU8[$0 | 0];
      $2_1 = $0 + 1 | 0;
      $0 = $2_1;
      if ($1_1) {
       continue
      }
      break;
     };
     break label$2;
    }
    $0 = $0 + -4 | 0;
    while (1) {
     $0 = $0 + 4 | 0;
     $1_1 = HEAP32[$0 >> 2];
     if (!(($1_1 ^ -1) & $1_1 + -16843009 & -2139062144)) {
      continue
     }
     break;
    };
    if (!($1_1 & 255)) {
     return $0 - 3184 | 0
    }
    while (1) {
     $2_1 = HEAPU8[$0 + 1 | 0];
     $1_1 = $0 + 1 | 0;
     $0 = $1_1;
     if ($2_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $1_1 = $2_1 + -1 | 0;
  }
  return $1_1 - 3184 | 0;
 }
 
 function $22($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 208 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 204 >> 2] = $2_1;
  $4_1 = $3_1 + 192 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 184 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 176 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 168 >> 2] = 0;
  HEAP32[$3_1 + 172 >> 2] = 0;
  HEAP32[$3_1 + 160 >> 2] = 0;
  HEAP32[$3_1 + 164 >> 2] = 0;
  HEAP32[$3_1 + 200 >> 2] = $2_1;
  if (($23(0, $1_1, $3_1 + 200 | 0, $3_1 + 80 | 0, $3_1 + 160 | 0) | 0) >= 0) {
   $5_1 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 60 >> 2] <= 0) {
    HEAP32[$0 >> 2] = $5_1 & -33
   }
   label$4 : {
    label$5 : {
     label$6 : {
      if (!HEAP32[$0 + 44 >> 2]) {
       HEAP32[$0 + 44 >> 2] = 80;
       HEAP32[$0 + 24 >> 2] = 0;
       HEAP32[$0 + 16 >> 2] = 0;
       HEAP32[$0 + 20 >> 2] = 0;
       $4_1 = HEAP32[$0 + 40 >> 2];
       HEAP32[$0 + 40 >> 2] = $3_1;
       break label$6;
      }
      $4_1 = 0;
      if (HEAP32[$0 + 16 >> 2]) {
       break label$5
      }
     }
     $2_1 = -1;
     if ($6($0)) {
      break label$4
     }
    }
    $2_1 = $23($0, $1_1, $3_1 + 200 | 0, $3_1 + 80 | 0, $3_1 + 160 | 0);
   }
   if ($4_1) {
    FUNCTION_TABLE[HEAP32[$0 + 32 >> 2]]($0, 0, 0) | 0;
    HEAP32[$0 + 44 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = $4_1;
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    $0;
    HEAP32[$0 + 20 >> 2] = 0;
    $2_1 = 0;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $5_1 & 32;
  }
  global$0 = $3_1 + 208 | 0;
 }
 
 function $23($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0.0, $18_1 = 0, $19_1 = 0, $20 = 0, $21 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0.0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = 0, $31_1 = 0, $32 = 0, $33_1 = 0, $34 = 0, $35 = 0, $36_1 = 0, $37_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $10 = global$0 - 880 | 0;
  global$0 = $10;
  $34 = $10 + 336 | 8;
  $35 = $10 + 55 | 0;
  $36_1 = -338 - $10 | 0;
  $31_1 = $10 + 336 | 9;
  $37_1 = $10 + 656 | 0;
  $28_1 = $10 + 336 | 0;
  $33_1 = 0 - ($10 + 336 | 0) | 0;
  $26_1 = $10 + 56 | 0;
  label$1 : {
   label$2 : {
    label$4 : while (1) {
     label$3 : {
      $8_1 = $1_1;
      if (($5_1 | 0) > (2147483647 - $23_1 | 0)) {
       break label$3
      }
      $23_1 = $5_1 + $23_1 | 0;
      label$5 : {
       label$6 : {
        label$7 : {
         $5_1 = HEAPU8[$8_1 | 0];
         if ($5_1) {
          while (1) {
           label$10 : {
            $6_1 = $5_1 & 255;
            label$11 : {
             if ($6_1) {
              if (($6_1 | 0) != 37) {
               break label$10
              }
              $6_1 = $1_1;
              $5_1 = $6_1;
              while (1) {
               if (HEAPU8[$5_1 + 1 | 0] != 37) {
                $1_1 = $5_1;
                break label$11;
               }
               $6_1 = $6_1 + 1 | 0;
               $7_1 = HEAPU8[$5_1 + 2 | 0];
               $1_1 = $5_1 + 2 | 0;
               $5_1 = $1_1;
               if (($7_1 | 0) == 37) {
                continue
               }
               break;
              };
              break label$11;
             }
             $6_1 = $1_1;
            }
            $5_1 = $6_1 - $8_1 | 0;
            $22_1 = 2147483647 - $23_1 | 0;
            if (($5_1 | 0) > ($22_1 | 0)) {
             break label$3
            }
            if (!(!$0 | HEAPU8[$0 | 0] & 32)) {
             $8($8_1, $5_1, $0)
            }
            if ($5_1) {
             continue label$4
            }
            $5_1 = $1_1 + 1 | 0;
            $11 = HEAP8[$1_1 + 1 | 0];
            $6_1 = $11 + -48 | 0;
            $15_1 = -1;
            label$16 : {
             if ($6_1 >>> 0 > 9) {
              break label$16
             }
             $7_1 = HEAPU8[$1_1 + 2 | 0] == 36;
             $5_1 = $7_1 ? $1_1 + 3 | 0 : $5_1;
             $29_1 = $7_1 ? 1 : $29_1;
             $11 = HEAP8[($7_1 ? 3 : 1) + $1_1 | 0];
             $15_1 = $7_1 ? $6_1 : -1;
            }
            $9_1 = 0;
            $1_1 = $11 + -32 | 0;
            label$18 : {
             if ($1_1 >>> 0 > 31) {
              break label$18
             }
             $1_1 = 1 << $1_1;
             if (!($1_1 & 75913)) {
              break label$18
             }
             $7_1 = $5_1 + 1 | 0;
             while (1) {
              $9_1 = $1_1 | $9_1;
              $5_1 = $7_1;
              $11 = HEAP8[$5_1 | 0];
              $1_1 = $11 + -32 | 0;
              if ($1_1 >>> 0 >= 32) {
               break label$18
              }
              $7_1 = $5_1 + 1 | 0;
              $1_1 = 1 << $1_1;
              if ($1_1 & 75913) {
               continue
              }
              break;
             };
            }
            label$20 : {
             if (($11 | 0) == 42) {
              $1_1 = HEAP8[$5_1 + 1 | 0] + -48 | 0;
              label$22 : {
               if (!(HEAPU8[$5_1 + 2 | 0] != 36 | $1_1 >>> 0 > 9)) {
                HEAP32[($1_1 << 2) + $4_1 >> 2] = 10;
                $12_1 = $5_1 + 3 | 0;
                $29_1 = 1;
                $16_1 = HEAP32[((HEAP8[$5_1 + 1 | 0] << 3) + $3_1 | 0) + -384 >> 2];
                break label$22;
               }
               if ($29_1) {
                break label$7
               }
               $12_1 = $5_1 + 1 | 0;
               if (!$0) {
                $29_1 = 0;
                $16_1 = 0;
                break label$20;
               }
               $1_1 = HEAP32[$2_1 >> 2];
               HEAP32[$2_1 >> 2] = $1_1 + 4;
               $29_1 = 0;
               $16_1 = HEAP32[$1_1 >> 2];
              }
              if (($16_1 | 0) > -1) {
               break label$20
              }
              $16_1 = 0 - $16_1 | 0;
              $9_1 = $9_1 | 8192;
              break label$20;
             }
             $16_1 = 0;
             $7_1 = $11 + -48 | 0;
             if ($7_1 >>> 0 > 9) {
              $12_1 = $5_1;
              break label$20;
             }
             $1_1 = 0;
             while (1) {
              $16_1 = -1;
              $6_1 = HEAP8[$5_1 + 1 | 0];
              $12_1 = $5_1 + 1 | 0;
              $5_1 = $12_1;
              if ($1_1 >>> 0 <= 214748364) {
               $1_1 = Math_imul($1_1, 10);
               $16_1 = ($7_1 | 0) > (2147483647 - $1_1 | 0) ? -1 : $1_1 + $7_1 | 0;
              }
              $1_1 = $16_1;
              $7_1 = $6_1 + -48 | 0;
              if ($7_1 >>> 0 < 10) {
               continue
              }
              break;
             };
             if (($16_1 | 0) < 0) {
              break label$3
             }
            }
            $5_1 = 0;
            $11 = -1;
            label$28 : {
             if (HEAPU8[$12_1 | 0] != 46) {
              $1_1 = $12_1;
              $13_1 = 0;
              break label$28;
             }
             $6_1 = HEAP8[$12_1 + 1 | 0];
             if (($6_1 | 0) == 42) {
              $1_1 = HEAP8[$12_1 + 2 | 0] + -48 | 0;
              label$31 : {
               if (!(HEAPU8[$12_1 + 3 | 0] != 36 | $1_1 >>> 0 > 9)) {
                HEAP32[($1_1 << 2) + $4_1 >> 2] = 10;
                $1_1 = $12_1 + 4 | 0;
                $11 = HEAP32[((HEAP8[$12_1 + 2 | 0] << 3) + $3_1 | 0) + -384 >> 2];
                break label$31;
               }
               if ($29_1) {
                break label$7
               }
               $1_1 = $12_1 + 2 | 0;
               $11 = 0;
               if (!$0) {
                break label$31
               }
               $6_1 = HEAP32[$2_1 >> 2];
               HEAP32[$2_1 >> 2] = $6_1 + 4;
               $11 = HEAP32[$6_1 >> 2];
              }
              $13_1 = ($11 ^ -1) >>> 31;
              break label$28;
             }
             $1_1 = $12_1 + 1 | 0;
             $14 = $6_1 + -48 | 0;
             if ($14 >>> 0 > 9) {
              $13_1 = 1;
              $11 = 0;
              break label$28;
             }
             $12_1 = 0;
             $7_1 = $1_1;
             while (1) {
              $11 = -1;
              if ($12_1 >>> 0 <= 214748364) {
               $1_1 = Math_imul($12_1, 10);
               $11 = ($14 | 0) > (2147483647 - $1_1 | 0) ? -1 : $1_1 + $14 | 0;
              }
              $13_1 = 1;
              $6_1 = HEAP8[$7_1 + 1 | 0];
              $1_1 = $7_1 + 1 | 0;
              $7_1 = $1_1;
              $12_1 = $11;
              $14 = $6_1 + -48 | 0;
              if ($14 >>> 0 < 10) {
               continue
              }
              break;
             };
            }
            while (1) {
             $7_1 = $5_1;
             $6_1 = HEAP8[$1_1 | 0] + -65 | 0;
             if ($6_1 >>> 0 > 57) {
              break label$7
             }
             $1_1 = $1_1 + 1 | 0;
             $5_1 = HEAPU8[($6_1 + Math_imul($7_1, 58) | 0) + 2720 | 0];
             if ($5_1 + -1 >>> 0 < 8) {
              continue
             }
             break;
            };
            if (!$5_1) {
             break label$7
            }
            label$38 : {
             label$39 : {
              label$40 : {
               if (($5_1 | 0) == 27) {
                if (($15_1 | 0) <= -1) {
                 break label$40
                }
                break label$7;
               }
               if (($15_1 | 0) < 0) {
                break label$39
               }
               HEAP32[($15_1 << 2) + $4_1 >> 2] = $5_1;
               $5_1 = ($15_1 << 3) + $3_1 | 0;
               $6_1 = HEAP32[$5_1 + 4 >> 2];
               HEAP32[$10 + 56 >> 2] = HEAP32[$5_1 >> 2];
               HEAP32[$10 + 60 >> 2] = $6_1;
              }
              $5_1 = 0;
              if (!$0) {
               continue label$4
              }
              break label$38;
             }
             if (!$0) {
              $23_1 = 0;
              break label$1;
             }
             $24($10 + 56 | 0, $5_1, $2_1);
            }
            $6_1 = $9_1 & -65537;
            $15_1 = $9_1 & 8192 ? $6_1 : $9_1;
            label$43 : {
             label$44 : {
              label$45 : {
               $5_1 = HEAP8[$1_1 + -1 | 0];
               $25 = $7_1 ? (($5_1 & 15) == 3 ? $5_1 & -33 : $5_1) : $5_1;
               $5_1 = $25 + -65 | 0;
               if ($5_1 >>> 0 > 55) {
                break label$45
               }
               label$46 : {
                label$47 : {
                 label$48 : {
                  label$49 : {
                   label$50 : {
                    label$51 : {
                     label$52 : {
                      label$53 : {
                       label$54 : {
                        label$55 : {
                         label$56 : {
                          label$57 : {
                           switch ($5_1 - 1 | 0) {
                           case 51:
                            $14 = 0;
                            $9_1 = HEAP32[$10 + 56 >> 2];
                            $5_1 = HEAP32[$10 + 60 >> 2];
                            $20 = 2694;
                            break label$56;
                           case 44:
                            $5_1 = 0;
                            $6_1 = $7_1 & 255;
                            if ($6_1 >>> 0 > 7) {
                             continue label$4
                            }
                            label$63 : {
                             switch ($6_1 - 1 | 0) {
                             default:
                              HEAP32[HEAP32[$10 + 56 >> 2] >> 2] = $23_1;
                              continue label$4;
                             case 0:
                              HEAP32[HEAP32[$10 + 56 >> 2] >> 2] = $23_1;
                              continue label$4;
                             case 1:
                              $6_1 = HEAP32[$10 + 56 >> 2];
                              HEAP32[$6_1 >> 2] = $23_1;
                              HEAP32[$6_1 + 4 >> 2] = $23_1 >> 31;
                              continue label$4;
                             case 2:
                              HEAP16[HEAP32[$10 + 56 >> 2] >> 1] = $23_1;
                              continue label$4;
                             case 3:
                              HEAP8[HEAP32[$10 + 56 >> 2]] = $23_1;
                              continue label$4;
                             case 5:
                              HEAP32[HEAP32[$10 + 56 >> 2] >> 2] = $23_1;
                              continue label$4;
                             case 4:
                              continue label$4;
                             case 6:
                              break label$63;
                             };
                            }
                            $6_1 = HEAP32[$10 + 56 >> 2];
                            HEAP32[$6_1 >> 2] = $23_1;
                            HEAP32[$6_1 + 4 >> 2] = $23_1 >> 31;
                            continue label$4;
                           case 46:
                            $11 = $11 >>> 0 > 8 ? $11 : 8;
                            $15_1 = $15_1 | 8;
                            $25 = 120;
                           case 22:
                           case 54:
                            $14 = 0;
                            $20 = 2694;
                            $6_1 = HEAP32[$10 + 60 >> 2];
                            $5_1 = $6_1;
                            $9_1 = HEAP32[$10 + 56 >> 2];
                            if (!($5_1 | $9_1)) {
                             $8_1 = $26_1;
                             break label$55;
                            }
                            $6_1 = $25 & 32;
                            $8_1 = $26_1;
                            while (1) {
                             $8_1 = $8_1 + -1 | 0;
                             HEAP8[$8_1 | 0] = $6_1 | HEAPU8[($9_1 & 15) + 3328 | 0];
                             $9_1 = ($5_1 & 15) << 28 | $9_1 >>> 4;
                             $5_1 = $5_1 >>> 4;
                             if ($9_1 | $5_1) {
                              continue
                             }
                             break;
                            };
                            if (!($15_1 & 8) | !(HEAP32[$10 + 56 >> 2] | HEAP32[$10 + 60 >> 2])) {
                             break label$55
                            }
                            $20 = ($25 >> 4) + 2694 | 0;
                            $14 = 2;
                            break label$55;
                           case 45:
                            $8_1 = $26_1;
                            $6_1 = HEAP32[$10 + 60 >> 2];
                            $5_1 = $6_1;
                            $9_1 = HEAP32[$10 + 56 >> 2];
                            if ($5_1 | $9_1) {
                             while (1) {
                              $8_1 = $8_1 + -1 | 0;
                              HEAP8[$8_1 | 0] = $9_1 & 7 | 48;
                              $9_1 = ($5_1 & 7) << 29 | $9_1 >>> 3;
                              $5_1 = $5_1 >>> 3;
                              if ($9_1 | $5_1) {
                               continue
                              }
                              break;
                             }
                            }
                            $14 = 0;
                            $20 = 2694;
                            if (!($15_1 & 8)) {
                             break label$55
                            }
                            $6_1 = $26_1 - $8_1 | 0;
                            $11 = ($11 | 0) > ($6_1 | 0) ? $11 : $6_1 + 1 | 0;
                            break label$55;
                           case 0:
                           case 2:
                           case 6:
                           case 7:
                           case 8:
                           case 9:
                           case 10:
                           case 11:
                           case 12:
                           case 13:
                           case 14:
                           case 15:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 23:
                           case 24:
                           case 25:
                           case 26:
                           case 27:
                           case 28:
                           case 29:
                           case 30:
                           case 32:
                           case 38:
                           case 40:
                           case 41:
                           case 42:
                           case 47:
                           case 48:
                           case 50:
                           case 52:
                           case 53:
                            break label$45;
                           case 1:
                            break label$49;
                           case 17:
                            break label$50;
                           case 49:
                            break label$52;
                           case 43:
                            break label$53;
                           case 33:
                            break label$54;
                           case 34:
                           case 39:
                            break label$57;
                           default:
                            break label$46;
                           };
                          }
                          $6_1 = HEAP32[$10 + 60 >> 2];
                          $5_1 = $6_1;
                          $9_1 = HEAP32[$10 + 56 >> 2];
                          if (!(($5_1 | 0) > -1 ? 1 : ($5_1 | 0) >= -1 ? ($9_1 >>> 0 <= 4294967295 ? 0 : 1) : 0)) {
                           $5_1 = 0 - ((0 < $9_1 >>> 0) + $5_1 | 0) | 0;
                           $9_1 = 0 - $9_1 | 0;
                           HEAP32[$10 + 56 >> 2] = $9_1;
                           HEAP32[$10 + 60 >> 2] = $5_1;
                           $14 = 1;
                           $20 = 2694;
                           break label$56;
                          }
                          if ($15_1 & 2048) {
                           $14 = 1;
                           $20 = 2695;
                           break label$56;
                          }
                          $14 = $15_1 & 1;
                          $20 = $14 ? 2696 : 2694;
                         }
                         label$76 : {
                          if (!(($5_1 | 0) == 1 & $9_1 >>> 0 >= 0 | $5_1 >>> 0 > 1)) {
                           $6_1 = $9_1;
                           $8_1 = $26_1;
                           break label$76;
                          }
                          $8_1 = $26_1;
                          while (1) {
                           $6_1 = __wasm_i64_udiv($9_1, $5_1, 10);
                           $12_1 = i64toi32_i32$HIGH_BITS;
                           $7_1 = $12_1;
                           $8_1 = $8_1 + -1 | 0;
                           (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $9_1 - __wasm_i64_mul($6_1, $7_1, 10, 0) | 48), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
                           $12_1 = ($5_1 | 0) == 9 & $9_1 >>> 0 > 4294967295 | $5_1 >>> 0 > 9;
                           $9_1 = $6_1;
                           $5_1 = $7_1;
                           if ($12_1) {
                            continue
                           }
                           break;
                          };
                         }
                         $5_1 = $6_1;
                         if (!$5_1) {
                          break label$55
                         }
                         while (1) {
                          $8_1 = $8_1 + -1 | 0;
                          $6_1 = ($5_1 >>> 0) / 10 | 0;
                          HEAP8[$8_1 | 0] = $5_1 - Math_imul($6_1, 10) | 48;
                          $7_1 = $5_1 >>> 0 > 9;
                          $5_1 = $6_1;
                          if ($7_1) {
                           continue
                          }
                          break;
                         };
                        }
                        if (($11 | 0) < 0 ? $13_1 : 0) {
                         break label$3
                        }
                        $15_1 = $13_1 ? $15_1 & -65537 : $15_1;
                        $5_1 = HEAP32[$10 + 56 >> 2];
                        $6_1 = HEAP32[$10 + 60 >> 2];
                        if (!(!!($5_1 | $6_1) | $11)) {
                         $8_1 = $26_1;
                         $5_1 = $8_1;
                         $11 = 0;
                         break label$5;
                        }
                        $6_1 = !($5_1 | $6_1) + ($26_1 - $8_1 | 0) | 0;
                        $11 = ($11 | 0) > ($6_1 | 0) ? $11 : $6_1;
                        break label$44;
                       }
                       HEAP8[$10 + 55 | 0] = HEAP32[$10 + 56 >> 2];
                       $14 = 0;
                       $20 = 2694;
                       $11 = 1;
                       $8_1 = $35;
                       $5_1 = $26_1;
                       $15_1 = $6_1;
                       break label$5;
                      }
                      $8_1 = $12(HEAP32[5856]);
                      break label$51;
                     }
                     $5_1 = HEAP32[$10 + 56 >> 2];
                     $8_1 = $5_1 ? $5_1 : 2704;
                    }
                    $14 = 0;
                    $7_1 = ($11 | 0) < 0 ? 2147483647 : $11;
                    $5_1 = $13($8_1, $7_1);
                    $7_1 = $5_1 ? $5_1 - $8_1 | 0 : $7_1;
                    $5_1 = $7_1 + $8_1 | 0;
                    $20 = 2694;
                    if (($11 | 0) <= -1) {
                     break label$43
                    }
                    $15_1 = $6_1;
                    $11 = $7_1;
                    break label$5;
                   }
                   $8_1 = HEAP32[$10 + 56 >> 2];
                   $6_1 = $8_1;
                   if ($11) {
                    break label$48
                   }
                   $5_1 = 0;
                   break label$47;
                  }
                  HEAP32[$10 + 12 >> 2] = 0;
                  HEAP32[$10 + 8 >> 2] = HEAP32[$10 + 56 >> 2];
                  HEAP32[$10 + 56 >> 2] = $10 + 8;
                  $11 = -1;
                  $6_1 = $10 + 8 | 0;
                 }
                 $8_1 = $6_1;
                 $5_1 = 0;
                 $6_1 = $8_1;
                 label$82 : {
                  while (1) {
                   $7_1 = HEAP32[$6_1 >> 2];
                   if (!$7_1) {
                    break label$82
                   }
                   $9_1 = $16($10 + 4 | 0, $7_1);
                   $7_1 = ($9_1 | 0) < 0;
                   if (!($7_1 | $9_1 >>> 0 > $11 - $5_1 >>> 0)) {
                    $6_1 = $6_1 + 4 | 0;
                    $5_1 = $5_1 + $9_1 | 0;
                    if ($11 >>> 0 > $5_1 >>> 0) {
                     continue
                    }
                    break label$82;
                   }
                   break;
                  };
                  if ($7_1) {
                   break label$2
                  }
                 }
                 if (($5_1 | 0) < 0) {
                  break label$3
                 }
                }
                $12_1 = $15_1 & 73728;
                label$85 : {
                 if ($12_1 | ($16_1 | 0) <= ($5_1 | 0)) {
                  break label$85
                 }
                 $14 = $16_1 - $5_1 | 0;
                 $7_1 = $14 >>> 0 < 256;
                 $17($10 - -64 | 0, 32, $7_1 ? $14 : 256);
                 $11 = HEAP32[$0 >> 2];
                 $6_1 = $11 & 32;
                 label$86 : {
                  if (!$7_1) {
                   $6_1 = !$6_1;
                   $7_1 = $14;
                   while (1) {
                    if ($6_1 & 1) {
                     $8($10 - -64 | 0, 256, $0);
                     $11 = HEAP32[$0 >> 2];
                    }
                    $9_1 = $11 & 32;
                    $6_1 = !$9_1;
                    $7_1 = $7_1 + -256 | 0;
                    if ($7_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($9_1) {
                    break label$85
                   }
                   $14 = $14 & 255;
                   break label$86;
                  }
                  if ($6_1) {
                   break label$85
                  }
                 }
                 $8($10 - -64 | 0, $14, $0);
                }
                label$90 : {
                 if (!$5_1) {
                  break label$90
                 }
                 $6_1 = 0;
                 while (1) {
                  $7_1 = HEAP32[$8_1 >> 2];
                  if (!$7_1) {
                   break label$90
                  }
                  $7_1 = $16($10 + 4 | 0, $7_1);
                  $6_1 = $7_1 + $6_1 | 0;
                  if ($6_1 >>> 0 > $5_1 >>> 0) {
                   break label$90
                  }
                  if (!(HEAPU8[$0 | 0] & 32)) {
                   $8($10 + 4 | 0, $7_1, $0)
                  }
                  $8_1 = $8_1 + 4 | 0;
                  if ($6_1 >>> 0 < $5_1 >>> 0) {
                   continue
                  }
                  break;
                 };
                }
                label$93 : {
                 if (($12_1 | 0) != 8192 | ($16_1 | 0) <= ($5_1 | 0)) {
                  break label$93
                 }
                 $9_1 = $16_1 - $5_1 | 0;
                 $7_1 = $9_1 >>> 0 < 256;
                 $17($10 - -64 | 0, 32, $7_1 ? $9_1 : 256);
                 $8_1 = HEAP32[$0 >> 2];
                 $6_1 = $8_1 & 32;
                 label$94 : {
                  if (!$7_1) {
                   $6_1 = !$6_1;
                   $7_1 = $9_1;
                   while (1) {
                    if ($6_1 & 1) {
                     $8($10 - -64 | 0, 256, $0);
                     $8_1 = HEAP32[$0 >> 2];
                    }
                    $12_1 = $8_1 & 32;
                    $6_1 = !$12_1;
                    $7_1 = $7_1 + -256 | 0;
                    if ($7_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($12_1) {
                    break label$93
                   }
                   $9_1 = $9_1 & 255;
                   break label$94;
                  }
                  if ($6_1) {
                   break label$93
                  }
                 }
                 $8($10 - -64 | 0, $9_1, $0);
                }
                $5_1 = ($16_1 | 0) > ($5_1 | 0) ? $16_1 : $5_1;
                continue label$4;
               }
               if ($13_1 ? ($11 | 0) <= -1 : 0) {
                break label$3
               }
               $17_1 = HEAPF64[$10 + 56 >> 3];
               HEAP32[$10 + 364 >> 2] = 0;
               wasm2js_scratch_store_f64(+$17_1);
               $6_1 = wasm2js_scratch_load_i32(1) | 0;
               label$99 : {
                if (!(wasm2js_i32$0 = 1, wasm2js_i32$1 = (wasm2js_i32$3 = wasm2js_scratch_load_i32(0) >>> 0 <= 4294967295 ? 0 : 1, wasm2js_i32$4 = 0, wasm2js_i32$5 = ($6_1 | 0) >= -1, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$2 = ($6_1 | 0) > -1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
                 $17_1 = -$17_1;
                 $27_1 = 1;
                 $30 = 3344;
                 break label$99;
                }
                if ($15_1 & 2048) {
                 $27_1 = 1;
                 $30 = 3347;
                 break label$99;
                }
                $27_1 = $15_1 & 1;
                $30 = $27_1 ? 3350 : 3345;
               }
               $24_1 = Math_abs($17_1);
               label$102 : {
                if (!($24_1 != infinity & $24_1 == $24_1)) {
                 $12_1 = $27_1 + 3 | 0;
                 label$104 : {
                  if ($15_1 & 8192 | ($16_1 | 0) <= ($12_1 | 0)) {
                   break label$104
                  }
                  $9_1 = $16_1 - $12_1 | 0;
                  $5_1 = $9_1 >>> 0 < 256;
                  $17($10 - -64 | 0, 32, $5_1 ? $9_1 : 256);
                  $7_1 = HEAP32[$0 >> 2];
                  $6_1 = $7_1 & 32;
                  label$105 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $9_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $8($10 - -64 | 0, 256, $0);
                      $7_1 = HEAP32[$0 >> 2];
                     }
                     $8_1 = $7_1 & 32;
                     $5_1 = !$8_1;
                     $6_1 = $6_1 + -256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8_1) {
                     break label$104
                    }
                    $9_1 = $9_1 & 255;
                    break label$105;
                   }
                   if ($6_1) {
                    break label$104
                   }
                  }
                  $8($10 - -64 | 0, $9_1, $0);
                 }
                 $6_1 = HEAP32[$0 >> 2];
                 if (!($6_1 & 32)) {
                  $8($30, $27_1, $0);
                  $6_1 = HEAP32[$0 >> 2];
                 }
                 if (!($6_1 & 32)) {
                  $6_1 = ($25 & 32) >>> 5;
                  $8($17_1 != $17_1 ? ($6_1 ? 3371 : 3375) : $6_1 ? 3363 : 3367, 3, $0);
                 }
                 label$111 : {
                  if (($15_1 & 73728) != 8192 | ($16_1 | 0) <= ($12_1 | 0)) {
                   break label$111
                  }
                  $9_1 = $16_1 - $12_1 | 0;
                  $5_1 = $9_1 >>> 0 < 256;
                  $17($10 - -64 | 0, 32, $5_1 ? $9_1 : 256);
                  $7_1 = HEAP32[$0 >> 2];
                  $6_1 = $7_1 & 32;
                  label$112 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $9_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $8($10 - -64 | 0, 256, $0);
                      $7_1 = HEAP32[$0 >> 2];
                     }
                     $8_1 = $7_1 & 32;
                     $5_1 = !$8_1;
                     $6_1 = $6_1 + -256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8_1) {
                     break label$111
                    }
                    $9_1 = $9_1 & 255;
                    break label$112;
                   }
                   if ($6_1) {
                    break label$111
                   }
                  }
                  $8($10 - -64 | 0, $9_1, $0);
                 }
                 $5_1 = ($16_1 | 0) > ($12_1 | 0) ? $16_1 : $12_1;
                 break label$102;
                }
                $24_1 = $18($17_1, $10 + 364 | 0);
                $17_1 = $24_1 + $24_1;
                if ($17_1 != 0.0) {
                 HEAP32[$10 + 364 >> 2] = HEAP32[$10 + 364 >> 2] + -1
                }
                $21 = $25 | 32;
                if (($21 | 0) == 97) {
                 $9_1 = $25 & 32;
                 $18_1 = $9_1 ? $30 + 9 | 0 : $30;
                 label$118 : {
                  if (!(12 - $11) | $11 >>> 0 > 11) {
                   break label$118
                  }
                  $5_1 = $11 + -12 | 0;
                  $24_1 = 16.0;
                  while (1) {
                   $24_1 = $24_1 * 16.0;
                   $6_1 = $5_1 + 1 | 0;
                   $7_1 = $6_1 >>> 0 >= $5_1 >>> 0;
                   $5_1 = $6_1;
                   if ($7_1) {
                    continue
                   }
                   break;
                  };
                  if (HEAPU8[$18_1 | 0] == 45) {
                   $17_1 = -($24_1 + (-$17_1 - $24_1));
                   break label$118;
                  }
                  $17_1 = $17_1 + $24_1 - $24_1;
                 }
                 $7_1 = $28_1;
                 $12_1 = HEAP32[$10 + 364 >> 2];
                 $6_1 = $12_1 >> 31;
                 $5_1 = $6_1 ^ $6_1 + $12_1;
                 label$121 : {
                  if ($5_1) {
                   $6_1 = 0;
                   while (1) {
                    $7_1 = ($5_1 >>> 0) / 10 | 0;
                    HEAP8[($6_1 + $10 | 0) + 335 | 0] = $5_1 - Math_imul($7_1, 10) | 48;
                    $6_1 = $6_1 + -1 | 0;
                    $8_1 = $5_1 >>> 0 > 9;
                    $5_1 = $7_1;
                    if ($8_1) {
                     continue
                    }
                    break;
                   };
                   $7_1 = ($6_1 + $10 | 0) + 336 | 0;
                   if ($6_1) {
                    break label$121
                   }
                  }
                  $7_1 = $7_1 + -1 | 0;
                  HEAP8[$7_1 | 0] = 48;
                 }
                 $14 = $27_1 | 2;
                 $22_1 = $7_1 + -2 | 0;
                 HEAP8[$22_1 | 0] = $25 + 15;
                 HEAP8[$7_1 + -1 | 0] = ($12_1 | 0) < 0 ? 45 : 43;
                 $8_1 = $15_1 & 8;
                 $6_1 = $10 + 336 | 0;
                 while (1) {
                  $5_1 = $6_1;
                  $7_1 = Math_abs($17_1) < 2147483648.0 ? ~~$17_1 : -2147483648;
                  HEAP8[$5_1 | 0] = $9_1 | HEAPU8[$7_1 + 3328 | 0];
                  $6_1 = $5_1 + 1 | 0;
                  $17_1 = ($17_1 - +($7_1 | 0)) * 16.0;
                  if (!(($6_1 - ($10 + 336 | 0) | 0) != 1 | ($17_1 == 0.0 ? !(($11 | 0) > 0 | $8_1) : 0))) {
                   HEAP8[$5_1 + 1 | 0] = 46;
                   $6_1 = $5_1 + 2 | 0;
                  }
                  if ($17_1 != 0.0) {
                   continue
                  }
                  break;
                 };
                 $5_1 = -1;
                 $12_1 = $28_1 - $22_1 | 0;
                 $7_1 = $12_1 + $14 | 0;
                 if ((2147483645 - $7_1 | 0) < ($11 | 0)) {
                  break label$102
                 }
                 $13_1 = $15_1 & 73728;
                 $21 = $6_1 - ($10 + 336 | 0) | 0;
                 $9_1 = $11 ? (($6_1 + $36_1 | 0) < ($11 | 0) ? $11 + 2 | 0 : $21) : $21;
                 $11 = $9_1 + $7_1 | 0;
                 label$129 : {
                  if ($13_1 | ($16_1 | 0) <= ($11 | 0)) {
                   break label$129
                  }
                  $15_1 = $16_1 - $11 | 0;
                  $5_1 = $15_1 >>> 0 < 256;
                  $17($10 - -64 | 0, 32, $5_1 ? $15_1 : 256);
                  $7_1 = HEAP32[$0 >> 2];
                  $6_1 = $7_1 & 32;
                  label$130 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $15_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $8($10 - -64 | 0, 256, $0);
                      $7_1 = HEAP32[$0 >> 2];
                     }
                     $8_1 = $7_1 & 32;
                     $5_1 = !$8_1;
                     $6_1 = $6_1 + -256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8_1) {
                     break label$129
                    }
                    $15_1 = $15_1 & 255;
                    break label$130;
                   }
                   if ($6_1) {
                    break label$129
                   }
                  }
                  $8($10 - -64 | 0, $15_1, $0);
                 }
                 if (!(HEAPU8[$0 | 0] & 32)) {
                  $8($18_1, $14, $0)
                 }
                 label$135 : {
                  if (($13_1 | 0) != 65536 | ($16_1 | 0) <= ($11 | 0)) {
                   break label$135
                  }
                  $14 = $16_1 - $11 | 0;
                  $5_1 = $14 >>> 0 < 256;
                  $17($10 - -64 | 0, 48, $5_1 ? $14 : 256);
                  $7_1 = HEAP32[$0 >> 2];
                  $6_1 = $7_1 & 32;
                  label$136 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $14;
                    while (1) {
                     if ($5_1 & 1) {
                      $8($10 - -64 | 0, 256, $0);
                      $7_1 = HEAP32[$0 >> 2];
                     }
                     $8_1 = $7_1 & 32;
                     $5_1 = !$8_1;
                     $6_1 = $6_1 + -256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8_1) {
                     break label$135
                    }
                    $14 = $14 & 255;
                    break label$136;
                   }
                   if ($6_1) {
                    break label$135
                   }
                  }
                  $8($10 - -64 | 0, $14, $0);
                 }
                 if (!(HEAPU8[$0 | 0] & 32)) {
                  $8($10 + 336 | 0, $21, $0)
                 }
                 $9_1 = $9_1 - $21 | 0;
                 label$141 : {
                  if (($9_1 | 0) < 1) {
                   break label$141
                  }
                  $6_1 = $9_1 >>> 0 < 256;
                  $17($10 - -64 | 0, 48, $6_1 ? $9_1 : 256);
                  $7_1 = HEAP32[$0 >> 2];
                  $5_1 = $7_1 & 32;
                  label$142 : {
                   if (!$6_1) {
                    $5_1 = !$5_1;
                    $6_1 = $9_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $8($10 - -64 | 0, 256, $0);
                      $7_1 = HEAP32[$0 >> 2];
                     }
                     $8_1 = $7_1 & 32;
                     $5_1 = !$8_1;
                     $6_1 = $6_1 + -256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8_1) {
                     break label$141
                    }
                    $9_1 = $9_1 & 255;
                    break label$142;
                   }
                   if ($5_1) {
                    break label$141
                   }
                  }
                  $8($10 - -64 | 0, $9_1, $0);
                 }
                 if (!(HEAPU8[$0 | 0] & 32)) {
                  $8($22_1, $12_1, $0)
                 }
                 label$147 : {
                  if (($13_1 | 0) != 8192 | ($16_1 | 0) <= ($11 | 0)) {
                   break label$147
                  }
                  $9_1 = $16_1 - $11 | 0;
                  $5_1 = $9_1 >>> 0 < 256;
                  $17($10 - -64 | 0, 32, $5_1 ? $9_1 : 256);
                  $7_1 = HEAP32[$0 >> 2];
                  $6_1 = $7_1 & 32;
                  label$148 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $9_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $8($10 - -64 | 0, 256, $0);
                      $7_1 = HEAP32[$0 >> 2];
                     }
                     $8_1 = $7_1 & 32;
                     $5_1 = !$8_1;
                     $6_1 = $6_1 + -256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8_1) {
                     break label$147
                    }
                    $9_1 = $9_1 & 255;
                    break label$148;
                   }
                   if ($6_1) {
                    break label$147
                   }
                  }
                  $8($10 - -64 | 0, $9_1, $0);
                 }
                 $5_1 = ($16_1 | 0) > ($11 | 0) ? $16_1 : $11;
                 break label$102;
                }
                $6_1 = ($11 | 0) < 0;
                label$152 : {
                 if ($17_1 == 0.0) {
                  $8_1 = HEAP32[$10 + 364 >> 2];
                  break label$152;
                 }
                 $8_1 = HEAP32[$10 + 364 >> 2] + -28 | 0;
                 HEAP32[$10 + 364 >> 2] = $8_1;
                 $17_1 = $17_1 * 268435456.0;
                }
                $13_1 = $6_1 ? 6 : $11;
                $22_1 = ($8_1 | 0) < 0 ? $10 + 368 | 0 : $37_1;
                $7_1 = $22_1;
                while (1) {
                 $6_1 = $17_1 < 4294967296.0 & $17_1 >= 0.0 ? ~~$17_1 >>> 0 : 0;
                 HEAP32[$7_1 >> 2] = $6_1;
                 $7_1 = $7_1 + 4 | 0;
                 $17_1 = ($17_1 - +($6_1 >>> 0)) * 1.0e9;
                 if ($17_1 != 0.0) {
                  continue
                 }
                 break;
                };
                label$157 : {
                 if (($8_1 | 0) < 1) {
                  $5_1 = $7_1;
                  $6_1 = $22_1;
                  break label$157;
                 }
                 $6_1 = $22_1;
                 while (1) {
                  $14 = ($8_1 | 0) < 29 ? $8_1 : 29;
                  $5_1 = $7_1 + -4 | 0;
                  label$160 : {
                   if ($5_1 >>> 0 < $6_1 >>> 0) {
                    break label$160
                   }
                   $11 = $14;
                   $9_1 = 0;
                   while (1) {
                    $8_1 = $5_1;
                    $18_1 = HEAP32[$5_1 >> 2];
                    $19_1 = $11 & 31;
                    if (32 <= ($11 & 63) >>> 0) {
                     $12_1 = $18_1 << $19_1;
                     $19_1 = 0;
                    } else {
                     $12_1 = (1 << $19_1) - 1 & $18_1 >>> 32 - $19_1;
                     $19_1 = $18_1 << $19_1;
                    }
                    $18_1 = $19_1 + $9_1 | 0;
                    $9_1 = __wasm_i64_udiv($18_1, $18_1 >>> 0 < $9_1 >>> 0 ? $12_1 + 1 | 0 : $12_1, 1e9);
                    (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $18_1 - __wasm_i64_mul($9_1, i64toi32_i32$HIGH_BITS, 1e9, 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                    $5_1 = $5_1 + -4 | 0;
                    if ($5_1 >>> 0 >= $6_1 >>> 0) {
                     continue
                    }
                    break;
                   };
                   if (!$9_1) {
                    break label$160
                   }
                   $6_1 = $6_1 + -4 | 0;
                   HEAP32[$6_1 >> 2] = $9_1;
                  }
                  while (1) {
                   $5_1 = $7_1;
                   if ($5_1 >>> 0 > $6_1 >>> 0) {
                    $7_1 = $5_1 + -4 | 0;
                    if (!HEAP32[$7_1 >> 2]) {
                     continue
                    }
                   }
                   break;
                  };
                  $8_1 = HEAP32[$10 + 364 >> 2] - $14 | 0;
                  HEAP32[$10 + 364 >> 2] = $8_1;
                  $7_1 = $5_1;
                  if (($8_1 | 0) > 0) {
                   continue
                  }
                  break;
                 };
                }
                if (($8_1 | 0) <= -1) {
                 $14 = (($13_1 + 25 >>> 0) / 9 | 0) + 1 | 0;
                 while (1) {
                  $7_1 = 0 - $8_1 | 0;
                  $18_1 = ($7_1 | 0) < 9 ? $7_1 : 9;
                  label$166 : {
                   if ($6_1 >>> 0 >= $5_1 >>> 0) {
                    $6_1 = HEAP32[$6_1 >> 2] ? $6_1 : $6_1 + 4 | 0;
                    break label$166;
                   }
                   $11 = 1e9 >>> $18_1;
                   $12_1 = -1 << $18_1 ^ -1;
                   $8_1 = 0;
                   $7_1 = $6_1;
                   while (1) {
                    $9_1 = HEAP32[$7_1 >> 2];
                    HEAP32[$7_1 >> 2] = $8_1 + ($9_1 >>> $18_1);
                    $8_1 = Math_imul($11, $9_1 & $12_1);
                    $7_1 = $7_1 + 4 | 0;
                    if ($7_1 >>> 0 < $5_1 >>> 0) {
                     continue
                    }
                    break;
                   };
                   $6_1 = HEAP32[$6_1 >> 2] ? $6_1 : $6_1 + 4 | 0;
                   if (!$8_1) {
                    break label$166
                   }
                   HEAP32[$5_1 >> 2] = $8_1;
                   $5_1 = $5_1 + 4 | 0;
                  }
                  $8_1 = $18_1 + HEAP32[$10 + 364 >> 2] | 0;
                  HEAP32[$10 + 364 >> 2] = $8_1;
                  $7_1 = ($21 | 0) == 102 ? $22_1 : $6_1;
                  $5_1 = $5_1 - $7_1 >> 2 > ($14 | 0) ? $7_1 + ($14 << 2) | 0 : $5_1;
                  if (($8_1 | 0) < 0) {
                   continue
                  }
                  break;
                 };
                }
                $7_1 = 0;
                label$169 : {
                 if ($6_1 >>> 0 >= $5_1 >>> 0) {
                  break label$169
                 }
                 $7_1 = Math_imul($22_1 - $6_1 >> 2, 9);
                 $9_1 = HEAP32[$6_1 >> 2];
                 if ($9_1 >>> 0 < 10) {
                  break label$169
                 }
                 $8_1 = 10;
                 while (1) {
                  $7_1 = $7_1 + 1 | 0;
                  $8_1 = Math_imul($8_1, 10);
                  if ($9_1 >>> 0 >= $8_1 >>> 0) {
                   continue
                  }
                  break;
                 };
                }
                $19_1 = ($21 | 0) == 102 ? 0 : $7_1;
                $21 = ($21 | 0) == 103;
                $18_1 = $21 & ($13_1 | 0) != 0;
                $8_1 = ($13_1 - $19_1 | 0) - $18_1 | 0;
                if (($8_1 | 0) < (Math_imul($5_1 - $22_1 >> 2, 9) + -9 | 0)) {
                 $11 = $8_1 + 9216 | 0;
                 $12_1 = ($11 | 0) / 9 | 0;
                 $14 = $22_1 + ($12_1 << 2) | 0;
                 $9_1 = $14 + -4092 | 0;
                 $8_1 = 10;
                 $12_1 = Math_imul($12_1, 9);
                 if ((($11 - $12_1 | 0) + 1 | 0) <= 8) {
                  $11 = (($18_1 + ($12_1 + $19_1 | 0) | 0) - $13_1 | 0) + -9208 | 0;
                  while (1) {
                   $8_1 = Math_imul($8_1, 10);
                   $11 = $11 + -1 | 0;
                   if ($11) {
                    continue
                   }
                   break;
                  };
                 }
                 $18_1 = HEAP32[$9_1 >> 2];
                 $12_1 = ($18_1 >>> 0) / ($8_1 >>> 0) | 0;
                 $11 = $9_1 + 4 | 0;
                 $19_1 = $18_1 - Math_imul($8_1, $12_1) | 0;
                 label$174 : {
                  if ($19_1 ? 0 : ($5_1 | 0) == ($11 | 0)) {
                   break label$174
                  }
                  label$176 : {
                   if (!($12_1 & 1)) {
                    $17_1 = 9007199254740992.0;
                    if (!(HEAP8[$9_1 + -4 | 0] & 1) | (($8_1 | 0) != 1e9 | $9_1 >>> 0 <= $6_1 >>> 0)) {
                     break label$176
                    }
                   }
                   $17_1 = 9007199254740994.0;
                  }
                  $24_1 = .5;
                  $12_1 = $8_1 >>> 1;
                  if ($19_1 >>> 0 >= $12_1 >>> 0) {
                   $24_1 = ($5_1 | 0) == ($11 | 0) ? (($12_1 | 0) == ($19_1 | 0) ? 1.0 : 1.5) : 1.5
                  }
                  if (!(!$27_1 | HEAPU8[$30 | 0] != 45)) {
                   $17_1 = -$17_1;
                   $24_1 = -$24_1;
                  }
                  $12_1 = $18_1 - $19_1 | 0;
                  HEAP32[$9_1 >> 2] = $12_1;
                  if ($17_1 + $24_1 == $17_1) {
                   break label$174
                  }
                  $7_1 = $8_1 + $12_1 | 0;
                  HEAP32[$9_1 >> 2] = $7_1;
                  if ($7_1 >>> 0 >= 1e9) {
                   $7_1 = $14 + -4096 | 0;
                   while (1) {
                    HEAP32[$7_1 + 4 >> 2] = 0;
                    if ($7_1 >>> 0 < $6_1 >>> 0) {
                     $6_1 = $6_1 + -4 | 0;
                     HEAP32[$6_1 >> 2] = 0;
                    }
                    $8_1 = HEAP32[$7_1 >> 2] + 1 | 0;
                    HEAP32[$7_1 >> 2] = $8_1;
                    $7_1 = $7_1 + -4 | 0;
                    if ($8_1 >>> 0 > 999999999) {
                     continue
                    }
                    break;
                   };
                   $9_1 = $7_1 + 4 | 0;
                  }
                  $7_1 = Math_imul($22_1 - $6_1 >> 2, 9);
                  $12_1 = HEAP32[$6_1 >> 2];
                  if ($12_1 >>> 0 < 10) {
                   break label$174
                  }
                  $8_1 = 10;
                  while (1) {
                   $7_1 = $7_1 + 1 | 0;
                   $8_1 = Math_imul($8_1, 10);
                   if ($12_1 >>> 0 >= $8_1 >>> 0) {
                    continue
                   }
                   break;
                  };
                 }
                 $8_1 = $9_1 + 4 | 0;
                 $5_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $8_1 : $5_1;
                }
                label$184 : {
                 while (1) {
                  $11 = $5_1;
                  $19_1 = 0;
                  if ($5_1 >>> 0 <= $6_1 >>> 0) {
                   break label$184
                  }
                  $5_1 = $11 + -4 | 0;
                  if (!HEAP32[$5_1 >> 2]) {
                   continue
                  }
                  break;
                 };
                 $19_1 = 1;
                }
                label$187 : {
                 if (!$21) {
                  $14 = $15_1 & 8;
                  break label$187;
                 }
                 $8_1 = $13_1 ? $13_1 : 1;
                 $5_1 = ($8_1 | 0) > ($7_1 | 0) & ($7_1 | 0) > -5;
                 $13_1 = ($5_1 ? $7_1 ^ -1 : -1) + $8_1 | 0;
                 $25 = ($5_1 ? -1 : -2) + $25 | 0;
                 $14 = $15_1 & 8;
                 if ($14) {
                  break label$187
                 }
                 $5_1 = 9;
                 label$189 : {
                  if (!$19_1) {
                   break label$189
                  }
                  $9_1 = HEAP32[$11 + -4 >> 2];
                  if (!$9_1) {
                   break label$189
                  }
                  $5_1 = 0;
                  if (($9_1 >>> 0) % 10) {
                   break label$189
                  }
                  $8_1 = 10;
                  while (1) {
                   $5_1 = $5_1 + 1 | 0;
                   $8_1 = Math_imul($8_1, 10);
                   if (!(($9_1 >>> 0) % ($8_1 >>> 0))) {
                    continue
                   }
                   break;
                  };
                 }
                 $8_1 = Math_imul($11 - $22_1 >> 2, 9) + -9 | 0;
                 if (($25 | 32) == 102) {
                  $14 = 0;
                  $5_1 = $8_1 - $5_1 | 0;
                  $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
                  $13_1 = ($13_1 | 0) < ($5_1 | 0) ? $13_1 : $5_1;
                  break label$187;
                 }
                 $14 = 0;
                 $5_1 = ($7_1 + $8_1 | 0) - $5_1 | 0;
                 $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
                 $13_1 = ($13_1 | 0) < ($5_1 | 0) ? $13_1 : $5_1;
                }
                $5_1 = -1;
                $21 = $13_1 | $14;
                if (($13_1 | 0) > (($21 ? 2147483645 : 2147483646) | 0)) {
                 break label$102
                }
                $20 = ((($21 | 0) != 0) + $13_1 | 0) + 1 | 0;
                $18_1 = ($25 | 32) != 102;
                label$192 : {
                 if (!$18_1) {
                  if (($7_1 | 0) > (2147483647 - $20 | 0)) {
                   break label$102
                  }
                  $7_1 = ($7_1 | 0) > 0 ? $7_1 : 0;
                  break label$192;
                 }
                 $8_1 = $28_1;
                 $5_1 = $7_1 >> 31;
                 $5_1 = $5_1 + $7_1 ^ $5_1;
                 if ($5_1) {
                  while (1) {
                   $8_1 = $8_1 + -1 | 0;
                   $9_1 = ($5_1 >>> 0) / 10 | 0;
                   HEAP8[$8_1 | 0] = $5_1 - Math_imul($9_1, 10) | 48;
                   $12_1 = $5_1 >>> 0 > 9;
                   $5_1 = $9_1;
                   if ($12_1) {
                    continue
                   }
                   break;
                  }
                 }
                 if (($28_1 - $8_1 | 0) <= 1) {
                  $5_1 = $8_1 + -1 | 0;
                  while (1) {
                   HEAP8[$5_1 | 0] = 48;
                   $9_1 = $28_1 - $5_1 | 0;
                   $8_1 = $5_1 + -1 | 0;
                   $5_1 = $8_1;
                   if (($9_1 | 0) < 2) {
                    continue
                   }
                   break;
                  };
                  $8_1 = $8_1 + 1 | 0;
                 }
                 $32 = $8_1 + -2 | 0;
                 HEAP8[$32 | 0] = $25;
                 $5_1 = -1;
                 HEAP8[$8_1 + -1 | 0] = ($7_1 | 0) < 0 ? 45 : 43;
                 $7_1 = $28_1 - $32 | 0;
                 if (($7_1 | 0) > (2147483647 - $20 | 0)) {
                  break label$102
                 }
                }
                $7_1 = $7_1 + $20 | 0;
                if (($7_1 | 0) > ($27_1 ^ 2147483647)) {
                 break label$102
                }
                $15_1 = $15_1 & 73728;
                $20 = $7_1 + $27_1 | 0;
                label$198 : {
                 if ($15_1 | ($16_1 | 0) <= ($20 | 0)) {
                  break label$198
                 }
                 $12_1 = $16_1 - $20 | 0;
                 $7_1 = $12_1 >>> 0 < 256;
                 $17($10 - -64 | 0, 32, $7_1 ? $12_1 : 256);
                 $8_1 = HEAP32[$0 >> 2];
                 $5_1 = $8_1 & 32;
                 label$199 : {
                  if (!$7_1) {
                   $5_1 = !$5_1;
                   $7_1 = $12_1;
                   while (1) {
                    if ($5_1 & 1) {
                     $8($10 - -64 | 0, 256, $0);
                     $8_1 = HEAP32[$0 >> 2];
                    }
                    $9_1 = $8_1 & 32;
                    $5_1 = !$9_1;
                    $7_1 = $7_1 + -256 | 0;
                    if ($7_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($9_1) {
                    break label$198
                   }
                   $12_1 = $12_1 & 255;
                   break label$199;
                  }
                  if ($5_1) {
                   break label$198
                  }
                 }
                 $8($10 - -64 | 0, $12_1, $0);
                }
                if (!(HEAPU8[$0 | 0] & 32)) {
                 $8($30, $27_1, $0)
                }
                label$204 : {
                 if (($15_1 | 0) != 65536 | ($16_1 | 0) <= ($20 | 0)) {
                  break label$204
                 }
                 $12_1 = $16_1 - $20 | 0;
                 $7_1 = $12_1 >>> 0 < 256;
                 $17($10 - -64 | 0, 48, $7_1 ? $12_1 : 256);
                 $8_1 = HEAP32[$0 >> 2];
                 $5_1 = $8_1 & 32;
                 label$205 : {
                  if (!$7_1) {
                   $5_1 = !$5_1;
                   $7_1 = $12_1;
                   while (1) {
                    if ($5_1 & 1) {
                     $8($10 - -64 | 0, 256, $0);
                     $8_1 = HEAP32[$0 >> 2];
                    }
                    $9_1 = $8_1 & 32;
                    $5_1 = !$9_1;
                    $7_1 = $7_1 + -256 | 0;
                    if ($7_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($9_1) {
                    break label$204
                   }
                   $12_1 = $12_1 & 255;
                   break label$205;
                  }
                  if ($5_1) {
                   break label$204
                  }
                 }
                 $8($10 - -64 | 0, $12_1, $0);
                }
                label$209 : {
                 if (!$18_1) {
                  $12_1 = $6_1 >>> 0 > $22_1 >>> 0 ? $22_1 : $6_1;
                  $9_1 = $12_1;
                  while (1) {
                   $5_1 = HEAP32[$9_1 >> 2];
                   label$212 : {
                    if (!$5_1) {
                     $6_1 = 0;
                     break label$212;
                    }
                    $6_1 = 0;
                    while (1) {
                     $7_1 = ($5_1 >>> 0) / 10 | 0;
                     HEAP8[$6_1 + $34 | 0] = $5_1 - Math_imul($7_1, 10) | 48;
                     $6_1 = $6_1 + -1 | 0;
                     $8_1 = $5_1 >>> 0 > 9;
                     $5_1 = $7_1;
                     if ($8_1) {
                      continue
                     }
                     break;
                    };
                   }
                   $5_1 = $6_1 + $31_1 | 0;
                   label$215 : {
                    if (($9_1 | 0) != ($12_1 | 0)) {
                     if ($5_1 >>> 0 <= $10 + 336 >>> 0) {
                      break label$215
                     }
                     $17($10 + 336 | 0, 48, $6_1 + 9 | 0);
                     $5_1 = $10 + 336 | 0;
                     break label$215;
                    }
                    if ($6_1) {
                     break label$215
                    }
                    $5_1 = $5_1 + -1 | 0;
                    HEAP8[$5_1 | 0] = 48;
                   }
                   if (!(HEAPU8[$0 | 0] & 32)) {
                    $8($5_1, $31_1 - $5_1 | 0, $0)
                   }
                   $9_1 = $9_1 + 4 | 0;
                   if ($9_1 >>> 0 <= $22_1 >>> 0) {
                    continue
                   }
                   break;
                  };
                  if (!(!$21 | HEAPU8[$0 | 0] & 32)) {
                   $8(3379, 1, $0)
                  }
                  label$219 : {
                   if (($13_1 | 0) < 1 | $9_1 >>> 0 >= $11 >>> 0) {
                    break label$219
                   }
                   while (1) {
                    $5_1 = $31_1;
                    $6_1 = HEAP32[$9_1 >> 2];
                    label$221 : {
                     if ($6_1) {
                      while (1) {
                       $5_1 = $5_1 + -1 | 0;
                       $7_1 = ($6_1 >>> 0) / 10 | 0;
                       HEAP8[$5_1 | 0] = $6_1 - Math_imul($7_1, 10) | 48;
                       $8_1 = $6_1 >>> 0 > 9;
                       $6_1 = $7_1;
                       if ($8_1) {
                        continue
                       }
                       break;
                      };
                      if ($5_1 >>> 0 <= $10 + 336 >>> 0) {
                       break label$221
                      }
                     }
                     $17($10 + 336 | 0, 48, $5_1 + $33_1 | 0);
                     while (1) {
                      $5_1 = $5_1 + -1 | 0;
                      if ($5_1 >>> 0 > $10 + 336 >>> 0) {
                       continue
                      }
                      break;
                     };
                    }
                    if (!(HEAPU8[$0 | 0] & 32)) {
                     $8($5_1, ($13_1 | 0) < 9 ? $13_1 : 9, $0)
                    }
                    $13_1 = $13_1 + -9 | 0;
                    if (($13_1 | 0) < 1) {
                     break label$219
                    }
                    $9_1 = $9_1 + 4 | 0;
                    if ($9_1 >>> 0 < $11 >>> 0) {
                     continue
                    }
                    break;
                   };
                  }
                  if (($13_1 | 0) < 1) {
                   break label$209
                  }
                  $6_1 = $13_1 >>> 0 < 256;
                  $17($10 - -64 | 0, 48, $6_1 ? $13_1 : 256);
                  $7_1 = HEAP32[$0 >> 2];
                  $5_1 = $7_1 & 32;
                  label$226 : {
                   if (!$6_1) {
                    $5_1 = !$5_1;
                    $6_1 = $13_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $8($10 - -64 | 0, 256, $0);
                      $7_1 = HEAP32[$0 >> 2];
                     }
                     $8_1 = $7_1 & 32;
                     $5_1 = !$8_1;
                     $6_1 = $6_1 + -256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8_1) {
                     break label$209
                    }
                    $13_1 = $13_1 & 255;
                    break label$226;
                   }
                   if ($5_1) {
                    break label$209
                   }
                  }
                  $8($10 - -64 | 0, $13_1, $0);
                  break label$209;
                 }
                 label$230 : {
                  if (($13_1 | 0) <= -1) {
                   break label$230
                  }
                  $11 = $19_1 ? $11 : $6_1 + 4 | 0;
                  $9_1 = $6_1;
                  while (1) {
                   $8_1 = $31_1;
                   $5_1 = HEAP32[$9_1 >> 2];
                   label$232 : {
                    if ($5_1) {
                     $7_1 = 0;
                     while (1) {
                      $8_1 = ($5_1 >>> 0) / 10 | 0;
                      HEAP8[($7_1 + $10 | 0) + 344 | 0] = $5_1 - Math_imul($8_1, 10) | 48;
                      $7_1 = $7_1 + -1 | 0;
                      $12_1 = $5_1 >>> 0 > 9;
                      $5_1 = $8_1;
                      if ($12_1) {
                       continue
                      }
                      break;
                     };
                     $8_1 = ($7_1 + $10 | 0) + 345 | 0;
                     if ($7_1) {
                      break label$232
                     }
                    }
                    $8_1 = $8_1 + -1 | 0;
                    HEAP8[$8_1 | 0] = 48;
                   }
                   label$235 : {
                    if (($6_1 | 0) != ($9_1 | 0)) {
                     if ($8_1 >>> 0 <= $10 + 336 >>> 0) {
                      break label$235
                     }
                     $17($10 + 336 | 0, 48, $8_1 + $33_1 | 0);
                     while (1) {
                      $8_1 = $8_1 + -1 | 0;
                      if ($8_1 >>> 0 > $10 + 336 >>> 0) {
                       continue
                      }
                      break;
                     };
                     break label$235;
                    }
                    if (!(HEAPU8[$0 | 0] & 32)) {
                     $8($8_1, 1, $0)
                    }
                    $8_1 = $8_1 + 1 | 0;
                    if (HEAPU8[$0 | 0] & 32 | (($13_1 | 0) < 1 ? !$14 : 0)) {
                     break label$235
                    }
                    $8(3379, 1, $0);
                   }
                   $5_1 = $31_1 - $8_1 | 0;
                   if (!(HEAPU8[$0 | 0] & 32)) {
                    $8($8_1, ($13_1 | 0) > ($5_1 | 0) ? $5_1 : $13_1, $0)
                   }
                   $9_1 = $9_1 + 4 | 0;
                   $13_1 = $13_1 - $5_1 | 0;
                   if (($13_1 | 0) > -1 ? $9_1 >>> 0 < $11 >>> 0 : 0) {
                    continue
                   }
                   break;
                  };
                  if (($13_1 | 0) < 1) {
                   break label$230
                  }
                  $6_1 = $13_1 >>> 0 < 256;
                  $17($10 - -64 | 0, 48, $6_1 ? $13_1 : 256);
                  $7_1 = HEAP32[$0 >> 2];
                  $5_1 = $7_1 & 32;
                  label$242 : {
                   if (!$6_1) {
                    $5_1 = !$5_1;
                    $6_1 = $13_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $8($10 - -64 | 0, 256, $0);
                      $7_1 = HEAP32[$0 >> 2];
                     }
                     $8_1 = $7_1 & 32;
                     $5_1 = !$8_1;
                     $6_1 = $6_1 + -256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8_1) {
                     break label$230
                    }
                    $13_1 = $13_1 & 255;
                    break label$242;
                   }
                   if ($5_1) {
                    break label$230
                   }
                  }
                  $8($10 - -64 | 0, $13_1, $0);
                 }
                 if (HEAPU8[$0 | 0] & 32) {
                  break label$209
                 }
                 $8($32, $28_1 - $32 | 0, $0);
                }
                label$246 : {
                 if (($15_1 | 0) != 8192 | ($16_1 | 0) <= ($20 | 0)) {
                  break label$246
                 }
                 $11 = $16_1 - $20 | 0;
                 $5_1 = $11 >>> 0 < 256;
                 $17($10 - -64 | 0, 32, $5_1 ? $11 : 256);
                 $7_1 = HEAP32[$0 >> 2];
                 $6_1 = $7_1 & 32;
                 label$247 : {
                  if (!$5_1) {
                   $5_1 = !$6_1;
                   $6_1 = $11;
                   while (1) {
                    if ($5_1 & 1) {
                     $8($10 - -64 | 0, 256, $0);
                     $7_1 = HEAP32[$0 >> 2];
                    }
                    $8_1 = $7_1 & 32;
                    $5_1 = !$8_1;
                    $6_1 = $6_1 + -256 | 0;
                    if ($6_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($8_1) {
                    break label$246
                   }
                   $11 = $11 & 255;
                   break label$247;
                  }
                  if ($6_1) {
                   break label$246
                  }
                 }
                 $8($10 - -64 | 0, $11, $0);
                }
                $5_1 = ($16_1 | 0) > ($20 | 0) ? $16_1 : $20;
               }
               if (($5_1 | 0) >= 0) {
                continue label$4
               }
               break label$3;
              }
              $14 = 0;
              $20 = 2694;
             }
             $5_1 = $26_1;
             break label$5;
            }
            $15_1 = $6_1;
            $11 = $7_1;
            if (!HEAPU8[$5_1 | 0]) {
             break label$5
            }
            break label$3;
           }
           $5_1 = HEAPU8[$1_1 + 1 | 0];
           $1_1 = $1_1 + 1 | 0;
           continue;
          }
         }
         if ($0) {
          break label$1
         }
         if (!$29_1) {
          $23_1 = 0;
          break label$1;
         }
         $0 = HEAP32[$4_1 + 4 >> 2];
         $1_1 = 1;
         label$252 : {
          if (!$0) {
           break label$252
          }
          $24($3_1 + 8 | 0, $0, $2_1);
          $0 = HEAP32[$4_1 + 8 >> 2];
          $1_1 = 2;
          if (!$0) {
           break label$252
          }
          $24($3_1 + 16 | 0, $0, $2_1);
          $0 = HEAP32[$4_1 + 12 >> 2];
          $1_1 = 3;
          if (!$0) {
           break label$252
          }
          $24($3_1 + 24 | 0, $0, $2_1);
          $0 = HEAP32[$4_1 + 16 >> 2];
          $1_1 = 4;
          if (!$0) {
           break label$252
          }
          $24($3_1 + 32 | 0, $0, $2_1);
          $0 = HEAP32[$4_1 + 20 >> 2];
          $1_1 = 5;
          if (!$0) {
           break label$252
          }
          $24($3_1 + 40 | 0, $0, $2_1);
          $0 = HEAP32[$4_1 + 24 >> 2];
          $1_1 = 6;
          if (!$0) {
           break label$252
          }
          $24($3_1 + 48 | 0, $0, $2_1);
          $0 = HEAP32[$4_1 + 28 >> 2];
          $1_1 = 7;
          if (!$0) {
           break label$252
          }
          $24($3_1 + 56 | 0, $0, $2_1);
          $0 = HEAP32[$4_1 + 32 >> 2];
          $1_1 = 8;
          if (!$0) {
           break label$252
          }
          $24($3_1 - -64 | 0, $0, $2_1);
          $0 = HEAP32[$4_1 + 36 >> 2];
          if ($0) {
           break label$6
          }
          $1_1 = 9;
         }
         $1_1 = $1_1 << 2;
         while (1) {
          if (HEAP32[$1_1 + $4_1 >> 2]) {
           break label$7
          }
          $1_1 = $1_1 + 4 | 0;
          if (($1_1 | 0) != 40) {
           continue
          }
          break;
         };
         $23_1 = 1;
         break label$1;
        }
        HEAP32[5856] = 28;
        break label$2;
       }
       $24($3_1 + 72 | 0, $0, $2_1);
       $23_1 = 1;
       break label$1;
      }
      $21 = $5_1 - $8_1 | 0;
      $18_1 = ($11 | 0) < ($21 | 0) ? $21 : $11;
      if (($18_1 | 0) > (2147483647 - $14 | 0)) {
       break label$3
      }
      $19_1 = $14 + $18_1 | 0;
      $5_1 = ($16_1 | 0) < ($19_1 | 0) ? $19_1 : $16_1;
      if (($5_1 | 0) > ($22_1 | 0)) {
       break label$3
      }
      $15_1 = $15_1 & 73728;
      label$262 : {
       if ($15_1 | ($19_1 | 0) >= ($16_1 | 0)) {
        break label$262
       }
       $13_1 = $5_1 - $19_1 | 0;
       $7_1 = $13_1 >>> 0 < 256;
       $17($10 - -64 | 0, 32, $7_1 ? $13_1 : 256);
       $9_1 = HEAP32[$0 >> 2];
       $6_1 = $9_1 & 32;
       label$263 : {
        if (!$7_1) {
         $6_1 = !$6_1;
         $7_1 = $13_1;
         while (1) {
          if ($6_1 & 1) {
           $8($10 - -64 | 0, 256, $0);
           $9_1 = HEAP32[$0 >> 2];
          }
          $12_1 = $9_1 & 32;
          $6_1 = !$12_1;
          $7_1 = $7_1 + -256 | 0;
          if ($7_1 >>> 0 > 255) {
           continue
          }
          break;
         };
         if ($12_1) {
          break label$262
         }
         $13_1 = $13_1 & 255;
         break label$263;
        }
        if ($6_1) {
         break label$262
        }
       }
       $8($10 - -64 | 0, $13_1, $0);
      }
      if (!(HEAPU8[$0 | 0] & 32)) {
       $8($20, $14, $0)
      }
      label$268 : {
       if (($15_1 | 0) != 65536 | ($19_1 | 0) >= ($16_1 | 0)) {
        break label$268
       }
       $14 = $5_1 - $19_1 | 0;
       $7_1 = $14 >>> 0 < 256;
       $17($10 - -64 | 0, 48, $7_1 ? $14 : 256);
       $9_1 = HEAP32[$0 >> 2];
       $6_1 = $9_1 & 32;
       label$269 : {
        if (!$7_1) {
         $6_1 = !$6_1;
         $7_1 = $14;
         while (1) {
          if ($6_1 & 1) {
           $8($10 - -64 | 0, 256, $0);
           $9_1 = HEAP32[$0 >> 2];
          }
          $12_1 = $9_1 & 32;
          $6_1 = !$12_1;
          $7_1 = $7_1 + -256 | 0;
          if ($7_1 >>> 0 > 255) {
           continue
          }
          break;
         };
         if ($12_1) {
          break label$268
         }
         $14 = $14 & 255;
         break label$269;
        }
        if ($6_1) {
         break label$268
        }
       }
       $8($10 - -64 | 0, $14, $0);
      }
      label$273 : {
       if (($21 | 0) >= ($11 | 0)) {
        break label$273
       }
       $12_1 = $18_1 - $21 | 0;
       $7_1 = $12_1 >>> 0 < 256;
       $17($10 - -64 | 0, 48, $7_1 ? $12_1 : 256);
       $11 = HEAP32[$0 >> 2];
       $6_1 = $11 & 32;
       label$274 : {
        if (!$7_1) {
         $6_1 = !$6_1;
         $7_1 = $12_1;
         while (1) {
          if ($6_1 & 1) {
           $8($10 - -64 | 0, 256, $0);
           $11 = HEAP32[$0 >> 2];
          }
          $9_1 = $11 & 32;
          $6_1 = !$9_1;
          $7_1 = $7_1 + -256 | 0;
          if ($7_1 >>> 0 > 255) {
           continue
          }
          break;
         };
         if ($9_1) {
          break label$273
         }
         $12_1 = $12_1 & 255;
         break label$274;
        }
        if ($6_1) {
         break label$273
        }
       }
       $8($10 - -64 | 0, $12_1, $0);
      }
      if (!(HEAPU8[$0 | 0] & 32)) {
       $8($8_1, $21, $0)
      }
      if (($15_1 | 0) != 8192 | ($19_1 | 0) >= ($16_1 | 0)) {
       continue
      }
      $11 = $5_1 - $19_1 | 0;
      $7_1 = $11 >>> 0 < 256;
      $17($10 - -64 | 0, 32, $7_1 ? $11 : 256);
      $8_1 = HEAP32[$0 >> 2];
      $6_1 = $8_1 & 32;
      label$279 : {
       if (!$7_1) {
        $6_1 = !$6_1;
        $7_1 = $11;
        while (1) {
         if ($6_1 & 1) {
          $8($10 - -64 | 0, 256, $0);
          $8_1 = HEAP32[$0 >> 2];
         }
         $9_1 = $8_1 & 32;
         $6_1 = !$9_1;
         $7_1 = $7_1 + -256 | 0;
         if ($7_1 >>> 0 > 255) {
          continue
         }
         break;
        };
        if ($9_1) {
         continue
        }
        $11 = $11 & 255;
        break label$279;
       }
       if ($6_1) {
        continue
       }
      }
      $8($10 - -64 | 0, $11, $0);
      continue;
     }
     break;
    };
    HEAP32[5856] = 61;
   }
   $23_1 = -1;
  }
  global$0 = $10 + 880 | 0;
  return $23_1;
 }
 
 function $24($0, $1_1, $2_1) {
  folding_inner4 : {
   folding_inner3 : {
    folding_inner2 : {
     folding_inner1 : {
      folding_inner0 : {
       $1_1 = $1_1 + -9 | 0;
       if ($1_1 >>> 0 <= 17) {
        label$2 : {
         switch ($1_1 - 1 | 0) {
         case 5:
          $1_1 = HEAP32[$2_1 >> 2];
          HEAP32[$2_1 >> 2] = $1_1 + 4;
          $1_1 = HEAP16[$1_1 >> 1];
          HEAP32[$0 >> 2] = $1_1;
          break folding_inner3;
         case 6:
          $1_1 = HEAP32[$2_1 >> 2];
          HEAP32[$2_1 >> 2] = $1_1 + 4;
          HEAP32[$0 >> 2] = HEAPU16[$1_1 >> 1];
          break folding_inner4;
         case 7:
          $1_1 = HEAP32[$2_1 >> 2];
          HEAP32[$2_1 >> 2] = $1_1 + 4;
          $1_1 = HEAP8[$1_1 | 0];
          HEAP32[$0 >> 2] = $1_1;
          break folding_inner3;
         case 8:
          $1_1 = HEAP32[$2_1 >> 2];
          HEAP32[$2_1 >> 2] = $1_1 + 4;
          HEAP32[$0 >> 2] = HEAPU8[$1_1 | 0];
          break folding_inner4;
         case 16:
          $0 = $19();
          $9($0);
          abort();
         case 0:
         case 3:
         case 13:
          break folding_inner0;
         case 1:
         case 4:
         case 10:
         case 14:
          break folding_inner1;
         case 2:
         case 9:
         case 11:
         case 12:
         case 15:
          break folding_inner2;
         default:
          break label$2;
         };
        }
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
       }
       return;
      }
      $1_1 = HEAP32[$2_1 >> 2];
      HEAP32[$2_1 >> 2] = $1_1 + 4;
      $1_1 = HEAP32[$1_1 >> 2];
      HEAP32[$0 >> 2] = $1_1;
      break folding_inner3;
     }
     $1_1 = HEAP32[$2_1 >> 2];
     HEAP32[$2_1 >> 2] = $1_1 + 4;
     HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
     break folding_inner4;
    }
    $1_1 = HEAP32[$2_1 >> 2] + 7 & -8;
    HEAP32[$2_1 >> 2] = $1_1 + 8;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0 + 4 >> 2] = $2_1;
    return;
   }
   HEAP32[$0 + 4 >> 2] = $1_1 >> 31;
   return;
  }
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $26($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $22($0, 3381, 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $27() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 3383;
  HEAP32[$0 + 8 >> 2] = 0;
  $22(HEAP32[256], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]);
  $26(HEAP32[256]);
  abort();
 }
 
 function $28() {
  $27();
  abort();
 }
 
 function $29($0) {
  if (!$0) {
   return __wasm_memory_size() << 16
  }
  if (!($0 & 65535 | ($0 | 0) <= -1)) {
   $0 = __wasm_memory_grow($0 >>> 16);
   if (($0 | 0) == -1) {
    HEAP32[5856] = 48;
    return -1;
   }
   return $0 << 16;
  }
  abort();
 }
 
 function $31($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11 = global$0 - 16 | 0;
  global$0 = $11;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             if ($0 >>> 0 <= 236) {
              $5_1 = HEAP32[5866];
              $6_1 = $0 >>> 0 < 11 ? 16 : $0 + 19 & -16;
              $0 = $6_1 >>> 3;
              $1_1 = $5_1 >>> $0;
              if ($1_1 & 3) {
               $2_1 = ($0 | $1_1 & 1) ^ 1;
               $4_1 = $2_1 << 3;
               $1_1 = HEAP32[$4_1 + 23512 >> 2];
               $0 = $1_1 + 8 | 0;
               $3_1 = HEAP32[$1_1 + 8 >> 2];
               $4_1 = $4_1 + 23504 | 0;
               label$14 : {
                if (($3_1 | 0) == ($4_1 | 0)) {
                 (wasm2js_i32$0 = 23464, wasm2js_i32$1 = __wasm_rotl_i32($2_1) & $5_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                 break label$14;
                }
                HEAP32[$4_1 + 8 >> 2] = $3_1;
                HEAP32[$3_1 + 12 >> 2] = $4_1;
               }
               $2_1 = $2_1 << 3;
               HEAP32[$1_1 + 4 >> 2] = $2_1 | 3;
               $1_1 = $1_1 + $2_1 | 0;
               HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
               break label$1;
              }
              $8_1 = HEAP32[5868];
              if ($6_1 >>> 0 <= $8_1 >>> 0) {
               break label$11
              }
              if ($1_1) {
               $1_1 = $1_1 << $0;
               $0 = 2 << $0;
               $0 = $1_1 & (0 - $0 | $0);
               $0 = (0 - $0 & $0) + -1 | 0;
               $1_1 = $0 >>> 12 & 16;
               $2_1 = $1_1;
               $0 = $0 >>> $1_1;
               $1_1 = $0 >>> 5 & 8;
               $2_1 = $2_1 | $1_1;
               $0 = $0 >>> $1_1;
               $1_1 = $0 >>> 2 & 4;
               $2_1 = $2_1 | $1_1;
               $0 = $0 >>> $1_1;
               $1_1 = $0 >>> 1 & 2;
               $2_1 = $2_1 | $1_1;
               $0 = $0 >>> $1_1;
               $1_1 = $0 >>> 1 & 1;
               $2_1 = ($2_1 | $1_1) + ($0 >>> $1_1) | 0;
               $3_1 = $2_1 << 3;
               $1_1 = HEAP32[$3_1 + 23512 >> 2];
               $0 = HEAP32[$1_1 + 8 >> 2];
               $3_1 = $3_1 + 23504 | 0;
               label$17 : {
                if (($0 | 0) == ($3_1 | 0)) {
                 $5_1 = __wasm_rotl_i32($2_1) & $5_1;
                 HEAP32[5866] = $5_1;
                 break label$17;
                }
                HEAP32[$3_1 + 8 >> 2] = $0;
                HEAP32[$0 + 12 >> 2] = $3_1;
               }
               $0 = $1_1 + 8 | 0;
               HEAP32[$1_1 + 4 >> 2] = $6_1 | 3;
               $2_1 = $2_1 << 3;
               $4_1 = $2_1 - $6_1 | 0;
               HEAP32[$1_1 + $2_1 >> 2] = $4_1;
               $6_1 = $1_1 + $6_1 | 0;
               HEAP32[$6_1 + 4 >> 2] = $4_1 | 1;
               if ($8_1) {
                $3_1 = $8_1 >>> 3;
                $1_1 = ($3_1 << 3) + 23504 | 0;
                $2_1 = HEAP32[5871];
                $3_1 = 1 << $3_1;
                label$20 : {
                 if (!($3_1 & $5_1)) {
                  HEAP32[5866] = $3_1 | $5_1;
                  $3_1 = $1_1;
                  break label$20;
                 }
                 $3_1 = HEAP32[$1_1 + 8 >> 2];
                }
                HEAP32[$3_1 + 12 >> 2] = $2_1;
                HEAP32[$1_1 + 8 >> 2] = $2_1;
                HEAP32[$2_1 + 12 >> 2] = $1_1;
                HEAP32[$2_1 + 8 >> 2] = $3_1;
               }
               HEAP32[5871] = $6_1;
               HEAP32[5868] = $4_1;
               break label$1;
              }
              $10 = HEAP32[5867];
              if (!$10) {
               break label$11
              }
              $0 = ($10 & 0 - $10) + -1 | 0;
              $1_1 = $0 >>> 12 & 16;
              $2_1 = $1_1;
              $0 = $0 >>> $1_1;
              $1_1 = $0 >>> 5 & 8;
              $2_1 = $2_1 | $1_1;
              $0 = $0 >>> $1_1;
              $1_1 = $0 >>> 2 & 4;
              $2_1 = $2_1 | $1_1;
              $0 = $0 >>> $1_1;
              $1_1 = $0 >>> 1 & 2;
              $2_1 = $2_1 | $1_1;
              $0 = $0 >>> $1_1;
              $1_1 = $0 >>> 1 & 1;
              $1_1 = HEAP32[(($2_1 | $1_1) + ($0 >>> $1_1) << 2) + 23768 >> 2];
              $2_1 = (HEAP32[$1_1 + 4 >> 2] & -8) - $6_1 | 0;
              $4_1 = $1_1;
              while (1) {
               label$22 : {
                $0 = HEAP32[$4_1 + 16 >> 2];
                if (!$0) {
                 $0 = HEAP32[$4_1 + 20 >> 2];
                 if (!$0) {
                  break label$22
                 }
                }
                $4_1 = (HEAP32[$0 + 4 >> 2] & -8) - $6_1 | 0;
                $3_1 = $4_1 >>> 0 < $2_1 >>> 0;
                $2_1 = $3_1 ? $4_1 : $2_1;
                $1_1 = $3_1 ? $0 : $1_1;
                $4_1 = $0;
                continue;
               }
               break;
              };
              $9_1 = HEAP32[$1_1 + 24 >> 2];
              $3_1 = HEAP32[$1_1 + 12 >> 2];
              if (($1_1 | 0) != ($3_1 | 0)) {
               $0 = HEAP32[$1_1 + 8 >> 2];
               label$26 : {
                if (HEAPU32[5870] > $0 >>> 0) {
                 break label$26
                }
               }
               HEAP32[$3_1 + 8 >> 2] = $0;
               HEAP32[$0 + 12 >> 2] = $3_1;
               break label$2;
              }
              $4_1 = $1_1 + 20 | 0;
              $0 = HEAP32[$4_1 >> 2];
              if (!$0) {
               $0 = HEAP32[$1_1 + 16 >> 2];
               if (!$0) {
                break label$10
               }
               $4_1 = $1_1 + 16 | 0;
              }
              while (1) {
               $7_1 = $4_1;
               $3_1 = $0;
               $4_1 = $0 + 20 | 0;
               $0 = HEAP32[$4_1 >> 2];
               if ($0) {
                continue
               }
               $4_1 = $3_1 + 16 | 0;
               $0 = HEAP32[$3_1 + 16 >> 2];
               if ($0) {
                continue
               }
               break;
              };
              HEAP32[$7_1 >> 2] = 0;
              break label$2;
             }
             $6_1 = -1;
             if ($0 >>> 0 > 4294967231) {
              break label$11
             }
             $0 = $0 + 19 | 0;
             $6_1 = $0 & -16;
             $8_1 = HEAP32[5867];
             if (!$8_1) {
              break label$11
             }
             $4_1 = 0 - $6_1 | 0;
             $0 = $0 >>> 8;
             $7_1 = 0;
             label$29 : {
              if (!$0) {
               break label$29
              }
              $7_1 = 31;
              if ($6_1 >>> 0 > 16777215) {
               break label$29
              }
              $2_1 = $0 + 1048320 >>> 16 & 8;
              $1_1 = $0 << $2_1;
              $0 = $1_1 + 520192 >>> 16 & 4;
              $3_1 = $1_1 << $0;
              $1_1 = $3_1 + 245760 >>> 16 & 2;
              $0 = ($3_1 << $1_1 >>> 15) - ($1_1 | ($0 | $2_1)) | 0;
              $7_1 = ($0 << 1 | $6_1 >>> $0 + 21 & 1) + 28 | 0;
             }
             $2_1 = HEAP32[($7_1 << 2) + 23768 >> 2];
             label$30 : {
              label$31 : {
               label$32 : {
                if (!$2_1) {
                 $0 = 0;
                 $3_1 = 0;
                 break label$32;
                }
                $1_1 = $6_1 << (($7_1 | 0) == 31 ? 0 : 25 - ($7_1 >>> 1) | 0);
                $0 = 0;
                $3_1 = 0;
                while (1) {
                 label$35 : {
                  $5_1 = (HEAP32[$2_1 + 4 >> 2] & -8) - $6_1 | 0;
                  if ($5_1 >>> 0 >= $4_1 >>> 0) {
                   break label$35
                  }
                  $3_1 = $2_1;
                  $4_1 = $5_1;
                  if ($4_1) {
                   break label$35
                  }
                  $4_1 = 0;
                  $0 = $2_1;
                  break label$31;
                 }
                 $5_1 = HEAP32[$2_1 + 20 >> 2];
                 $2_1 = HEAP32[(($1_1 >>> 29 & 4) + $2_1 | 0) + 16 >> 2];
                 $0 = $5_1 ? (($5_1 | 0) == ($2_1 | 0) ? $0 : $5_1) : $0;
                 $1_1 = $1_1 << (($2_1 | 0) != 0);
                 if ($2_1) {
                  continue
                 }
                 break;
                };
               }
               if (!($0 | $3_1)) {
                $0 = 2 << $7_1;
                $0 = (0 - $0 | $0) & $8_1;
                if (!$0) {
                 break label$11
                }
                $0 = ($0 & 0 - $0) + -1 | 0;
                $1_1 = $0 >>> 12 & 16;
                $2_1 = $1_1;
                $0 = $0 >>> $1_1;
                $1_1 = $0 >>> 5 & 8;
                $2_1 = $2_1 | $1_1;
                $0 = $0 >>> $1_1;
                $1_1 = $0 >>> 2 & 4;
                $2_1 = $2_1 | $1_1;
                $0 = $0 >>> $1_1;
                $1_1 = $0 >>> 1 & 2;
                $2_1 = $2_1 | $1_1;
                $0 = $0 >>> $1_1;
                $1_1 = $0 >>> 1 & 1;
                $0 = HEAP32[(($2_1 | $1_1) + ($0 >>> $1_1) << 2) + 23768 >> 2];
               }
               if (!$0) {
                break label$30
               }
              }
              while (1) {
               $5_1 = (HEAP32[$0 + 4 >> 2] & -8) - $6_1 | 0;
               $1_1 = $5_1 >>> 0 < $4_1 >>> 0;
               $4_1 = $1_1 ? $5_1 : $4_1;
               $3_1 = $1_1 ? $0 : $3_1;
               $2_1 = HEAP32[$0 + 16 >> 2];
               if ($2_1) {
                $0 = $2_1
               } else {
                $0 = HEAP32[$0 + 20 >> 2]
               }
               if ($0) {
                continue
               }
               break;
              };
             }
             if (!$3_1 | $4_1 >>> 0 >= HEAP32[5868] - $6_1 >>> 0) {
              break label$11
             }
             $7_1 = HEAP32[$3_1 + 24 >> 2];
             $1_1 = HEAP32[$3_1 + 12 >> 2];
             if (($1_1 | 0) != ($3_1 | 0)) {
              $0 = HEAP32[$3_1 + 8 >> 2];
              label$40 : {
               if (HEAPU32[5870] > $0 >>> 0) {
                break label$40
               }
              }
              HEAP32[$1_1 + 8 >> 2] = $0;
              HEAP32[$0 + 12 >> 2] = $1_1;
              break label$3;
             }
             $2_1 = $3_1 + 20 | 0;
             $0 = HEAP32[$2_1 >> 2];
             if (!$0) {
              $0 = HEAP32[$3_1 + 16 >> 2];
              if (!$0) {
               break label$9
              }
              $2_1 = $3_1 + 16 | 0;
             }
             while (1) {
              $5_1 = $2_1;
              $1_1 = $0;
              $2_1 = $0 + 20 | 0;
              $0 = HEAP32[$2_1 >> 2];
              if ($0) {
               continue
              }
              $2_1 = $1_1 + 16 | 0;
              $0 = HEAP32[$1_1 + 16 >> 2];
              if ($0) {
               continue
              }
              break;
             };
             HEAP32[$5_1 >> 2] = 0;
             break label$3;
            }
            $1_1 = HEAP32[5868];
            if ($1_1 >>> 0 >= $6_1 >>> 0) {
             $0 = HEAP32[5871];
             $2_1 = $1_1 - $6_1 | 0;
             label$44 : {
              if ($2_1 >>> 0 >= 16) {
               $3_1 = $0 + $6_1 | 0;
               HEAP32[$3_1 + 4 >> 2] = $2_1 | 1;
               HEAP32[5868] = $2_1;
               HEAP32[5871] = $3_1;
               HEAP32[$0 + $1_1 >> 2] = $2_1;
               HEAP32[$0 + 4 >> 2] = $6_1 | 3;
               break label$44;
              }
              HEAP32[$0 + 4 >> 2] = $1_1 | 3;
              $1_1 = $0 + $1_1 | 0;
              HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
              HEAP32[5871] = 0;
              HEAP32[5868] = 0;
             }
             $0 = $0 + 8 | 0;
             break label$1;
            }
            $1_1 = HEAP32[5869];
            if ($1_1 >>> 0 > $6_1 >>> 0) {
             $0 = HEAP32[5872];
             $2_1 = $0 + $6_1 | 0;
             $1_1 = $1_1 - $6_1 | 0;
             HEAP32[$2_1 + 4 >> 2] = $1_1 | 1;
             HEAP32[5869] = $1_1;
             HEAP32[5872] = $2_1;
             HEAP32[$0 + 4 >> 2] = $6_1 | 3;
             $0 = $0 + 8 | 0;
             break label$1;
            }
            $0 = 0;
            if (HEAP32[5984]) {
             $2_1 = HEAP32[5986]
            } else {
             HEAP32[5987] = -1;
             HEAP32[5988] = -1;
             HEAP32[5985] = 65536;
             HEAP32[5986] = 65536;
             HEAP32[5984] = $11 + 12 & -16 ^ 1431655768;
             HEAP32[5989] = 0;
             HEAP32[5977] = 0;
             $2_1 = 65536;
            }
            $4_1 = $6_1 + 71 | 0;
            $5_1 = $2_1 + $4_1 | 0;
            $7_1 = 0 - $2_1 | 0;
            $2_1 = $5_1 & $7_1;
            if ($2_1 >>> 0 <= $6_1 >>> 0) {
             HEAP32[5856] = 48;
             break label$1;
            }
            label$50 : {
             $0 = HEAP32[5976];
             if (!$0) {
              break label$50
             }
             $3_1 = HEAP32[5974];
             $8_1 = $3_1 + $2_1 | 0;
             if ($8_1 >>> 0 <= $0 >>> 0 ? $8_1 >>> 0 > $3_1 >>> 0 : 0) {
              break label$50
             }
             $0 = 0;
             HEAP32[5856] = 48;
             break label$1;
            }
            if (HEAPU8[23908] & 4) {
             break label$6
            }
            label$52 : {
             label$53 : {
              $3_1 = HEAP32[5872];
              if ($3_1) {
               $0 = 23912;
               while (1) {
                $8_1 = HEAP32[$0 >> 2];
                if ($8_1 + HEAP32[$0 + 4 >> 2] >>> 0 > $3_1 >>> 0 ? $8_1 >>> 0 <= $3_1 >>> 0 : 0) {
                 break label$53
                }
                $0 = HEAP32[$0 + 8 >> 2];
                if ($0) {
                 continue
                }
                break;
               };
              }
              $1_1 = $29(0);
              if (($1_1 | 0) == -1) {
               break label$7
              }
              $5_1 = $2_1;
              $0 = HEAP32[5985];
              $3_1 = $0 + -1 | 0;
              if ($3_1 & $1_1) {
               $5_1 = ($2_1 - $1_1 | 0) + ($1_1 + $3_1 & 0 - $0) | 0
              }
              if ($5_1 >>> 0 <= $6_1 >>> 0 | $5_1 >>> 0 > 2147483646) {
               break label$7
              }
              $0 = HEAP32[5976];
              if ($0) {
               $3_1 = HEAP32[5974];
               $7_1 = $3_1 + $5_1 | 0;
               if ($7_1 >>> 0 <= $3_1 >>> 0 | $7_1 >>> 0 > $0 >>> 0) {
                break label$7
               }
              }
              $0 = $29($5_1);
              if (($1_1 | 0) != ($0 | 0)) {
               break label$52
              }
              break label$5;
             }
             $5_1 = $7_1 & $5_1 - $1_1;
             if ($5_1 >>> 0 > 2147483646) {
              break label$7
             }
             $1_1 = $29($5_1);
             if (($1_1 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
              break label$8
             }
             $0 = $1_1;
            }
            $1_1 = $0;
            if (!($6_1 + 72 >>> 0 <= $5_1 >>> 0 | $5_1 >>> 0 > 2147483646 | ($0 | 0) == -1)) {
             $0 = HEAP32[5986];
             $0 = $0 + ($4_1 - $5_1 | 0) & 0 - $0;
             if ($0 >>> 0 > 2147483646) {
              break label$5
             }
             if (($29($0) | 0) != -1) {
              $5_1 = $0 + $5_1 | 0;
              break label$5;
             }
             $29(0 - $5_1 | 0);
             break label$7;
            }
            if (($1_1 | 0) != -1) {
             break label$5
            }
            break label$7;
           }
           $3_1 = 0;
           break label$2;
          }
          $1_1 = 0;
          break label$3;
         }
         if (($1_1 | 0) != -1) {
          break label$5
         }
        }
        HEAP32[5977] = HEAP32[5977] | 4;
       }
       if ($2_1 >>> 0 > 2147483646) {
        break label$4
       }
       $1_1 = $29($2_1);
       $0 = $29(0);
       if ($1_1 >>> 0 >= $0 >>> 0 | ($1_1 | 0) == -1 | ($0 | 0) == -1) {
        break label$4
       }
       $5_1 = $0 - $1_1 | 0;
       if ($5_1 >>> 0 <= $6_1 + 56 >>> 0) {
        break label$4
       }
      }
      $0 = HEAP32[5974] + $5_1 | 0;
      HEAP32[5974] = $0;
      if ($0 >>> 0 > HEAPU32[5975]) {
       HEAP32[5975] = $0
      }
      label$62 : {
       label$63 : {
        label$64 : {
         $7_1 = HEAP32[5872];
         if ($7_1) {
          $0 = 23912;
          while (1) {
           $2_1 = HEAP32[$0 >> 2];
           $3_1 = HEAP32[$0 + 4 >> 2];
           if (($2_1 + $3_1 | 0) == ($1_1 | 0)) {
            break label$64
           }
           $0 = HEAP32[$0 + 8 >> 2];
           if ($0) {
            continue
           }
           break;
          };
          break label$63;
         }
         $0 = HEAP32[5870];
         if (!($1_1 >>> 0 >= $0 >>> 0 ? !!$0 : 0)) {
          HEAP32[5870] = $1_1
         }
         $0 = 0;
         HEAP32[5979] = $5_1;
         HEAP32[5978] = $1_1;
         HEAP32[5874] = -1;
         HEAP32[5875] = HEAP32[5984];
         HEAP32[5981] = 0;
         while (1) {
          $2_1 = $0 + 23504 | 0;
          HEAP32[$0 + 23512 >> 2] = $2_1;
          HEAP32[$0 + 23516 >> 2] = $2_1;
          $0 = $0 + 8 | 0;
          if (($0 | 0) != 256) {
           continue
          }
          break;
         };
         $0 = $1_1 + 8 & 15 ? -8 - $1_1 & 15 : 0;
         $2_1 = $0 + $1_1 | 0;
         $3_1 = $5_1 + -56 | 0;
         $0 = $3_1 - $0 | 0;
         HEAP32[$2_1 + 4 >> 2] = $0 | 1;
         HEAP32[5873] = HEAP32[5988];
         HEAP32[5869] = $0;
         HEAP32[5872] = $2_1;
         HEAP32[($1_1 + $3_1 | 0) + 4 >> 2] = 56;
         break label$62;
        }
        if (HEAPU8[$0 + 12 | 0] & 8 | $1_1 >>> 0 <= $7_1 >>> 0 | $2_1 >>> 0 > $7_1 >>> 0) {
         break label$63
        }
        $1_1 = $7_1 + 8 & 15 ? -8 - $7_1 & 15 : 0;
        $2_1 = $1_1 + $7_1 | 0;
        $4_1 = HEAP32[5869] + $5_1 | 0;
        $1_1 = $4_1 - $1_1 | 0;
        HEAP32[$2_1 + 4 >> 2] = $1_1 | 1;
        HEAP32[$0 + 4 >> 2] = $3_1 + $5_1;
        HEAP32[5873] = HEAP32[5988];
        HEAP32[5869] = $1_1;
        HEAP32[5872] = $2_1;
        HEAP32[($4_1 + $7_1 | 0) + 4 >> 2] = 56;
        break label$62;
       }
       $3_1 = HEAP32[5870];
       if ($1_1 >>> 0 < $3_1 >>> 0) {
        HEAP32[5870] = $1_1;
        $3_1 = $1_1;
       }
       $2_1 = $1_1 + $5_1 | 0;
       $0 = 23912;
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            label$76 : {
             while (1) {
              if (HEAP32[$0 >> 2] != ($2_1 | 0)) {
               $0 = HEAP32[$0 + 8 >> 2];
               if ($0) {
                continue
               }
               break label$76;
              }
              break;
             };
             if (!(HEAPU8[$0 + 12 | 0] & 8)) {
              break label$75
             }
            }
            $0 = 23912;
            while (1) {
             $2_1 = HEAP32[$0 >> 2];
             if ($2_1 >>> 0 <= $7_1 >>> 0) {
              $3_1 = $2_1 + HEAP32[$0 + 4 >> 2] | 0;
              if ($3_1 >>> 0 > $7_1 >>> 0) {
               break label$74
              }
             }
             $0 = HEAP32[$0 + 8 >> 2];
             continue;
            };
           }
           HEAP32[$0 >> 2] = $1_1;
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $5_1;
           $8_1 = ($1_1 + 8 & 15 ? -8 - $1_1 & 15 : 0) + $1_1 | 0;
           HEAP32[$8_1 + 4 >> 2] = $6_1 | 3;
           $1_1 = $2_1 + ($2_1 + 8 & 15 ? -8 - $2_1 & 15 : 0) | 0;
           $0 = ($1_1 - $8_1 | 0) - $6_1 | 0;
           $4_1 = $6_1 + $8_1 | 0;
           if (($1_1 | 0) == ($7_1 | 0)) {
            HEAP32[5872] = $4_1;
            $0 = HEAP32[5869] + $0 | 0;
            HEAP32[5869] = $0;
            HEAP32[$4_1 + 4 >> 2] = $0 | 1;
            break label$72;
           }
           if (($1_1 | 0) == HEAP32[5871]) {
            HEAP32[5871] = $4_1;
            $0 = HEAP32[5868] + $0 | 0;
            HEAP32[5868] = $0;
            HEAP32[$4_1 + 4 >> 2] = $0 | 1;
            HEAP32[$0 + $4_1 >> 2] = $0;
            break label$72;
           }
           $6_1 = HEAP32[$1_1 + 4 >> 2];
           if (($6_1 & 3) == 1) {
            $9_1 = $6_1 & -8;
            label$84 : {
             if ($6_1 >>> 0 <= 255) {
              $2_1 = HEAP32[$1_1 + 12 >> 2];
              $3_1 = HEAP32[$1_1 + 8 >> 2];
              $6_1 = $6_1 >>> 3;
              $5_1 = ($6_1 << 3) + 23504 | 0;
              label$86 : {
               if (($3_1 | 0) == ($5_1 | 0)) {
                break label$86
               }
              }
              if (($2_1 | 0) == ($3_1 | 0)) {
               (wasm2js_i32$0 = 23464, wasm2js_i32$1 = HEAP32[5866] & __wasm_rotl_i32($6_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$84;
              }
              label$88 : {
               if (($2_1 | 0) == ($5_1 | 0)) {
                break label$88
               }
              }
              HEAP32[$2_1 + 8 >> 2] = $3_1;
              HEAP32[$3_1 + 12 >> 2] = $2_1;
              break label$84;
             }
             $7_1 = HEAP32[$1_1 + 24 >> 2];
             $5_1 = HEAP32[$1_1 + 12 >> 2];
             label$89 : {
              if (($5_1 | 0) != ($1_1 | 0)) {
               $2_1 = HEAP32[$1_1 + 8 >> 2];
               label$91 : {
                if ($3_1 >>> 0 > $2_1 >>> 0) {
                 break label$91
                }
               }
               HEAP32[$5_1 + 8 >> 2] = $2_1;
               HEAP32[$2_1 + 12 >> 2] = $5_1;
               break label$89;
              }
              label$92 : {
               $2_1 = $1_1 + 20 | 0;
               $6_1 = HEAP32[$2_1 >> 2];
               if ($6_1) {
                break label$92
               }
               $2_1 = $1_1 + 16 | 0;
               $6_1 = HEAP32[$2_1 >> 2];
               if ($6_1) {
                break label$92
               }
               $5_1 = 0;
               break label$89;
              }
              while (1) {
               $3_1 = $2_1;
               $5_1 = $6_1;
               $2_1 = $5_1 + 20 | 0;
               $6_1 = HEAP32[$2_1 >> 2];
               if ($6_1) {
                continue
               }
               $2_1 = $5_1 + 16 | 0;
               $6_1 = HEAP32[$5_1 + 16 >> 2];
               if ($6_1) {
                continue
               }
               break;
              };
              HEAP32[$3_1 >> 2] = 0;
             }
             if (!$7_1) {
              break label$84
             }
             $2_1 = HEAP32[$1_1 + 28 >> 2];
             $3_1 = ($2_1 << 2) + 23768 | 0;
             label$94 : {
              if (($1_1 | 0) == HEAP32[$3_1 >> 2]) {
               HEAP32[$3_1 >> 2] = $5_1;
               if ($5_1) {
                break label$94
               }
               (wasm2js_i32$0 = 23468, wasm2js_i32$1 = HEAP32[5867] & __wasm_rotl_i32($2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$84;
              }
              HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($1_1 | 0) ? 16 : 20) >> 2] = $5_1;
              if (!$5_1) {
               break label$84
              }
             }
             HEAP32[$5_1 + 24 >> 2] = $7_1;
             $2_1 = HEAP32[$1_1 + 16 >> 2];
             if ($2_1) {
              HEAP32[$5_1 + 16 >> 2] = $2_1;
              HEAP32[$2_1 + 24 >> 2] = $5_1;
             }
             $2_1 = HEAP32[$1_1 + 20 >> 2];
             if (!$2_1) {
              break label$84
             }
             HEAP32[$5_1 + 20 >> 2] = $2_1;
             HEAP32[$2_1 + 24 >> 2] = $5_1;
            }
            $1_1 = $1_1 + $9_1 | 0;
            $0 = $0 + $9_1 | 0;
           }
           HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] & -2;
           HEAP32[$0 + $4_1 >> 2] = $0;
           HEAP32[$4_1 + 4 >> 2] = $0 | 1;
           if ($0 >>> 0 <= 255) {
            $1_1 = $0 >>> 3;
            $0 = ($1_1 << 3) + 23504 | 0;
            $2_1 = HEAP32[5866];
            $1_1 = 1 << $1_1;
            label$98 : {
             if (!($2_1 & $1_1)) {
              HEAP32[5866] = $1_1 | $2_1;
              $2_1 = $0;
              break label$98;
             }
             $2_1 = HEAP32[$0 + 8 >> 2];
            }
            HEAP32[$2_1 + 12 >> 2] = $4_1;
            HEAP32[$0 + 8 >> 2] = $4_1;
            HEAP32[$4_1 + 12 >> 2] = $0;
            HEAP32[$4_1 + 8 >> 2] = $2_1;
            break label$72;
           }
           $5_1 = $4_1;
           $1_1 = $0 >>> 8;
           $2_1 = 0;
           label$100 : {
            if (!$1_1) {
             break label$100
            }
            $2_1 = 31;
            if ($0 >>> 0 > 16777215) {
             break label$100
            }
            $3_1 = $1_1 + 1048320 >>> 16 & 8;
            $2_1 = $1_1 << $3_1;
            $1_1 = $2_1 + 520192 >>> 16 & 4;
            $6_1 = $2_1 << $1_1;
            $2_1 = $6_1 + 245760 >>> 16 & 2;
            $1_1 = ($6_1 << $2_1 >>> 15) - ($2_1 | ($1_1 | $3_1)) | 0;
            $2_1 = ($1_1 << 1 | $0 >>> $1_1 + 21 & 1) + 28 | 0;
           }
           HEAP32[$5_1 + 28 >> 2] = $2_1;
           HEAP32[$4_1 + 16 >> 2] = 0;
           HEAP32[$4_1 + 20 >> 2] = 0;
           $1_1 = ($2_1 << 2) + 23768 | 0;
           $3_1 = HEAP32[5867];
           $6_1 = 1 << $2_1;
           if (!($3_1 & $6_1)) {
            HEAP32[$1_1 >> 2] = $4_1;
            HEAP32[5867] = $3_1 | $6_1;
            HEAP32[$4_1 + 24 >> 2] = $1_1;
            HEAP32[$4_1 + 8 >> 2] = $4_1;
            HEAP32[$4_1 + 12 >> 2] = $4_1;
            break label$72;
           }
           $2_1 = $0 << (($2_1 | 0) == 31 ? 0 : 25 - ($2_1 >>> 1) | 0);
           $1_1 = HEAP32[$1_1 >> 2];
           while (1) {
            $3_1 = $1_1;
            if ((HEAP32[$1_1 + 4 >> 2] & -8) == ($0 | 0)) {
             break label$73
            }
            $1_1 = $2_1 >>> 29;
            $2_1 = $2_1 << 1;
            $6_1 = ($3_1 + ($1_1 & 4) | 0) + 16 | 0;
            $1_1 = HEAP32[$6_1 >> 2];
            if ($1_1) {
             continue
            }
            break;
           };
           HEAP32[$6_1 >> 2] = $4_1;
           HEAP32[$4_1 + 24 >> 2] = $3_1;
           HEAP32[$4_1 + 12 >> 2] = $4_1;
           HEAP32[$4_1 + 8 >> 2] = $4_1;
           break label$72;
          }
          $0 = $1_1 + 8 & 15 ? -8 - $1_1 & 15 : 0;
          $4_1 = $0 + $1_1 | 0;
          $2_1 = $5_1 + -56 | 0;
          $0 = $2_1 - $0 | 0;
          HEAP32[$4_1 + 4 >> 2] = $0 | 1;
          HEAP32[($1_1 + $2_1 | 0) + 4 >> 2] = 56;
          $2_1 = ($3_1 + ($3_1 + -55 & 15 ? 55 - $3_1 & 15 : 0) | 0) + -63 | 0;
          $2_1 = $2_1 >>> 0 < $7_1 + 16 >>> 0 ? $7_1 : $2_1;
          HEAP32[$2_1 + 4 >> 2] = 35;
          HEAP32[5873] = HEAP32[5988];
          HEAP32[5869] = $0;
          HEAP32[5872] = $4_1;
          $4_1 = HEAP32[5981];
          $0 = $2_1 + 16 | 0;
          HEAP32[$0 >> 2] = HEAP32[5980];
          HEAP32[$0 + 4 >> 2] = $4_1;
          $0 = HEAP32[5979];
          HEAP32[$2_1 + 8 >> 2] = HEAP32[5978];
          HEAP32[$2_1 + 12 >> 2] = $0;
          HEAP32[5980] = $2_1 + 8;
          HEAP32[5979] = $5_1;
          HEAP32[5978] = $1_1;
          HEAP32[5981] = 0;
          $0 = $2_1 + 36 | 0;
          while (1) {
           HEAP32[$0 >> 2] = 7;
           $0 = $0 + 4 | 0;
           if ($0 >>> 0 < $3_1 >>> 0) {
            continue
           }
           break;
          };
          if (($2_1 | 0) == ($7_1 | 0)) {
           break label$62
          }
          HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] & -2;
          $3_1 = $2_1 - $7_1 | 0;
          HEAP32[$2_1 >> 2] = $3_1;
          HEAP32[$7_1 + 4 >> 2] = $3_1 | 1;
          if ($3_1 >>> 0 <= 255) {
           $1_1 = $3_1 >>> 3;
           $0 = ($1_1 << 3) + 23504 | 0;
           $2_1 = HEAP32[5866];
           $1_1 = 1 << $1_1;
           label$105 : {
            if (!($2_1 & $1_1)) {
             HEAP32[5866] = $1_1 | $2_1;
             $4_1 = $0;
             break label$105;
            }
            $4_1 = HEAP32[$0 + 8 >> 2];
           }
           HEAP32[$4_1 + 12 >> 2] = $7_1;
           HEAP32[$0 + 8 >> 2] = $7_1;
           HEAP32[$7_1 + 12 >> 2] = $0;
           HEAP32[$7_1 + 8 >> 2] = $4_1;
           break label$62;
          }
          HEAP32[$7_1 + 16 >> 2] = 0;
          HEAP32[$7_1 + 20 >> 2] = 0;
          $5_1 = $7_1 + 28 | 0;
          $1_1 = $3_1 >>> 8;
          $0 = 0;
          label$107 : {
           if (!$1_1) {
            break label$107
           }
           $0 = 31;
           if ($3_1 >>> 0 > 16777215) {
            break label$107
           }
           $2_1 = $1_1 + 1048320 >>> 16 & 8;
           $1_1 = $1_1 << $2_1;
           $0 = $1_1 + 520192 >>> 16 & 4;
           $4_1 = $1_1 << $0;
           $1_1 = $4_1 + 245760 >>> 16 & 2;
           $0 = ($4_1 << $1_1 >>> 15) - ($1_1 | ($0 | $2_1)) | 0;
           $0 = ($0 << 1 | $3_1 >>> $0 + 21 & 1) + 28 | 0;
          }
          HEAP32[$5_1 >> 2] = $0;
          $1_1 = ($0 << 2) + 23768 | 0;
          $2_1 = HEAP32[5867];
          $4_1 = 1 << $0;
          if (!($2_1 & $4_1)) {
           HEAP32[$1_1 >> 2] = $7_1;
           HEAP32[5867] = $2_1 | $4_1;
           HEAP32[$7_1 + 24 >> 2] = $1_1;
           HEAP32[$7_1 + 8 >> 2] = $7_1;
           HEAP32[$7_1 + 12 >> 2] = $7_1;
           break label$62;
          }
          $0 = $3_1 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1) | 0);
          $1_1 = HEAP32[$1_1 >> 2];
          while (1) {
           $2_1 = $1_1;
           if (($3_1 | 0) == (HEAP32[$1_1 + 4 >> 2] & -8)) {
            break label$71
           }
           $1_1 = $0 >>> 29;
           $0 = $0 << 1;
           $4_1 = ($2_1 + ($1_1 & 4) | 0) + 16 | 0;
           $1_1 = HEAP32[$4_1 >> 2];
           if ($1_1) {
            continue
           }
           break;
          };
          HEAP32[$4_1 >> 2] = $7_1;
          HEAP32[$7_1 + 24 >> 2] = $2_1;
          HEAP32[$7_1 + 12 >> 2] = $7_1;
          HEAP32[$7_1 + 8 >> 2] = $7_1;
          break label$62;
         }
         $0 = HEAP32[$3_1 + 8 >> 2];
         HEAP32[$3_1 + 8 >> 2] = $4_1;
         HEAP32[$0 + 12 >> 2] = $4_1;
         HEAP32[$4_1 + 24 >> 2] = 0;
         HEAP32[$4_1 + 8 >> 2] = $0;
         HEAP32[$4_1 + 12 >> 2] = $3_1;
        }
        $0 = $8_1 + 8 | 0;
        break label$1;
       }
       $0 = HEAP32[$2_1 + 8 >> 2];
       HEAP32[$2_1 + 8 >> 2] = $7_1;
       HEAP32[$0 + 12 >> 2] = $7_1;
       HEAP32[$7_1 + 24 >> 2] = 0;
       HEAP32[$7_1 + 8 >> 2] = $0;
       HEAP32[$7_1 + 12 >> 2] = $2_1;
      }
      $1_1 = HEAP32[5869];
      if ($1_1 >>> 0 <= $6_1 >>> 0) {
       break label$4
      }
      $0 = HEAP32[5872];
      $2_1 = $0 + $6_1 | 0;
      $1_1 = $1_1 - $6_1 | 0;
      HEAP32[$2_1 + 4 >> 2] = $1_1 | 1;
      HEAP32[5869] = $1_1;
      HEAP32[5872] = $2_1;
      HEAP32[$0 + 4 >> 2] = $6_1 | 3;
      $0 = $0 + 8 | 0;
      break label$1;
     }
     $0 = 0;
     HEAP32[5856] = 48;
     break label$1;
    }
    label$110 : {
     if (!$7_1) {
      break label$110
     }
     $0 = HEAP32[$3_1 + 28 >> 2];
     $2_1 = ($0 << 2) + 23768 | 0;
     label$111 : {
      if (($3_1 | 0) == HEAP32[$2_1 >> 2]) {
       HEAP32[$2_1 >> 2] = $1_1;
       if ($1_1) {
        break label$111
       }
       $8_1 = __wasm_rotl_i32($0) & $8_1;
       HEAP32[5867] = $8_1;
       break label$110;
      }
      HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($3_1 | 0) ? 16 : 20) >> 2] = $1_1;
      if (!$1_1) {
       break label$110
      }
     }
     HEAP32[$1_1 + 24 >> 2] = $7_1;
     $0 = HEAP32[$3_1 + 16 >> 2];
     if ($0) {
      HEAP32[$1_1 + 16 >> 2] = $0;
      HEAP32[$0 + 24 >> 2] = $1_1;
     }
     $0 = HEAP32[$3_1 + 20 >> 2];
     if (!$0) {
      break label$110
     }
     HEAP32[$1_1 + 20 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $1_1;
    }
    label$114 : {
     if ($4_1 >>> 0 <= 15) {
      $0 = $4_1 + $6_1 | 0;
      HEAP32[$3_1 + 4 >> 2] = $0 | 3;
      $0 = $0 + $3_1 | 0;
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
      break label$114;
     }
     $5_1 = $3_1 + $6_1 | 0;
     HEAP32[$5_1 + 4 >> 2] = $4_1 | 1;
     HEAP32[$3_1 + 4 >> 2] = $6_1 | 3;
     HEAP32[$4_1 + $5_1 >> 2] = $4_1;
     if ($4_1 >>> 0 <= 255) {
      $1_1 = $4_1 >>> 3;
      $0 = ($1_1 << 3) + 23504 | 0;
      $2_1 = HEAP32[5866];
      $1_1 = 1 << $1_1;
      label$117 : {
       if (!($2_1 & $1_1)) {
        HEAP32[5866] = $1_1 | $2_1;
        $2_1 = $0;
        break label$117;
       }
       $2_1 = HEAP32[$0 + 8 >> 2];
      }
      HEAP32[$2_1 + 12 >> 2] = $5_1;
      HEAP32[$0 + 8 >> 2] = $5_1;
      HEAP32[$5_1 + 12 >> 2] = $0;
      HEAP32[$5_1 + 8 >> 2] = $2_1;
      break label$114;
     }
     $7_1 = $5_1;
     $1_1 = $4_1 >>> 8;
     $0 = 0;
     label$119 : {
      if (!$1_1) {
       break label$119
      }
      $0 = 31;
      if ($4_1 >>> 0 > 16777215) {
       break label$119
      }
      $2_1 = $1_1 + 1048320 >>> 16 & 8;
      $1_1 = $1_1 << $2_1;
      $0 = $1_1 + 520192 >>> 16 & 4;
      $6_1 = $1_1 << $0;
      $1_1 = $6_1 + 245760 >>> 16 & 2;
      $0 = ($6_1 << $1_1 >>> 15) - ($1_1 | ($0 | $2_1)) | 0;
      $0 = ($0 << 1 | $4_1 >>> $0 + 21 & 1) + 28 | 0;
     }
     HEAP32[$7_1 + 28 >> 2] = $0;
     HEAP32[$5_1 + 16 >> 2] = 0;
     HEAP32[$5_1 + 20 >> 2] = 0;
     $1_1 = ($0 << 2) + 23768 | 0;
     $2_1 = 1 << $0;
     if (!($2_1 & $8_1)) {
      HEAP32[$1_1 >> 2] = $5_1;
      HEAP32[5867] = $2_1 | $8_1;
      HEAP32[$5_1 + 24 >> 2] = $1_1;
      HEAP32[$5_1 + 8 >> 2] = $5_1;
      HEAP32[$5_1 + 12 >> 2] = $5_1;
      break label$114;
     }
     $0 = $4_1 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1) | 0);
     $6_1 = HEAP32[$1_1 >> 2];
     label$122 : {
      while (1) {
       $1_1 = $6_1;
       if ((HEAP32[$1_1 + 4 >> 2] & -8) == ($4_1 | 0)) {
        break label$122
       }
       $2_1 = $0 >>> 29;
       $0 = $0 << 1;
       $2_1 = ($1_1 + ($2_1 & 4) | 0) + 16 | 0;
       $6_1 = HEAP32[$2_1 >> 2];
       if ($6_1) {
        continue
       }
       break;
      };
      HEAP32[$2_1 >> 2] = $5_1;
      HEAP32[$5_1 + 24 >> 2] = $1_1;
      HEAP32[$5_1 + 12 >> 2] = $5_1;
      HEAP32[$5_1 + 8 >> 2] = $5_1;
      break label$114;
     }
     $0 = HEAP32[$1_1 + 8 >> 2];
     HEAP32[$1_1 + 8 >> 2] = $5_1;
     HEAP32[$0 + 12 >> 2] = $5_1;
     HEAP32[$5_1 + 24 >> 2] = 0;
     HEAP32[$5_1 + 8 >> 2] = $0;
     HEAP32[$5_1 + 12 >> 2] = $1_1;
    }
    $0 = $3_1 + 8 | 0;
    break label$1;
   }
   label$124 : {
    if (!$9_1) {
     break label$124
    }
    $0 = HEAP32[$1_1 + 28 >> 2];
    $4_1 = ($0 << 2) + 23768 | 0;
    label$125 : {
     if (($1_1 | 0) == HEAP32[$4_1 >> 2]) {
      HEAP32[$4_1 >> 2] = $3_1;
      if ($3_1) {
       break label$125
      }
      (wasm2js_i32$0 = 23468, wasm2js_i32$1 = __wasm_rotl_i32($0) & $10), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$124;
     }
     HEAP32[(HEAP32[$9_1 + 16 >> 2] == ($1_1 | 0) ? 16 : 20) + $9_1 >> 2] = $3_1;
     if (!$3_1) {
      break label$124
     }
    }
    HEAP32[$3_1 + 24 >> 2] = $9_1;
    $0 = HEAP32[$1_1 + 16 >> 2];
    if ($0) {
     HEAP32[$3_1 + 16 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $3_1;
    }
    $0 = HEAP32[$1_1 + 20 >> 2];
    if (!$0) {
     break label$124
    }
    HEAP32[$3_1 + 20 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $3_1;
   }
   label$128 : {
    if ($2_1 >>> 0 <= 15) {
     $0 = $2_1 + $6_1 | 0;
     HEAP32[$1_1 + 4 >> 2] = $0 | 3;
     $0 = $0 + $1_1 | 0;
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
     break label$128;
    }
    $7_1 = $1_1 + $6_1 | 0;
    HEAP32[$7_1 + 4 >> 2] = $2_1 | 1;
    HEAP32[$1_1 + 4 >> 2] = $6_1 | 3;
    HEAP32[$2_1 + $7_1 >> 2] = $2_1;
    if ($8_1) {
     $3_1 = $8_1 >>> 3;
     $0 = ($3_1 << 3) + 23504 | 0;
     $4_1 = HEAP32[5871];
     $3_1 = 1 << $3_1;
     label$131 : {
      if (!($3_1 & $5_1)) {
       HEAP32[5866] = $3_1 | $5_1;
       $3_1 = $0;
       break label$131;
      }
      $3_1 = HEAP32[$0 + 8 >> 2];
     }
     HEAP32[$3_1 + 12 >> 2] = $4_1;
     HEAP32[$0 + 8 >> 2] = $4_1;
     HEAP32[$4_1 + 12 >> 2] = $0;
     HEAP32[$4_1 + 8 >> 2] = $3_1;
    }
    HEAP32[5871] = $7_1;
    HEAP32[5868] = $2_1;
   }
   $0 = $1_1 + 8 | 0;
  }
  global$0 = $11 + 16 | 0;
  return $0;
 }
 
 function $33($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $3_1 = $0 + -8 | 0;
   $2_1 = HEAP32[$0 + -4 >> 2];
   $0 = $2_1 & -8;
   $5_1 = $3_1 + $0 | 0;
   label$2 : {
    if ($2_1 & 1) {
     break label$2
    }
    if (!($2_1 & 3)) {
     break label$1
    }
    $1_1 = HEAP32[$3_1 >> 2];
    $3_1 = $3_1 - $1_1 | 0;
    $4_1 = HEAP32[5870];
    if ($3_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0 = $0 + $1_1 | 0;
    if (($3_1 | 0) != HEAP32[5871]) {
     if ($1_1 >>> 0 <= 255) {
      $2_1 = HEAP32[$3_1 + 12 >> 2];
      $4_1 = HEAP32[$3_1 + 8 >> 2];
      $1_1 = $1_1 >>> 3;
      $6_1 = ($1_1 << 3) + 23504 | 0;
      label$5 : {
       if (($4_1 | 0) == ($6_1 | 0)) {
        break label$5
       }
      }
      if (($2_1 | 0) == ($4_1 | 0)) {
       (wasm2js_i32$0 = 23464, wasm2js_i32$1 = HEAP32[5866] & __wasm_rotl_i32($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      label$7 : {
       if (($2_1 | 0) == ($6_1 | 0)) {
        break label$7
       }
      }
      HEAP32[$2_1 + 8 >> 2] = $4_1;
      HEAP32[$4_1 + 12 >> 2] = $2_1;
      break label$2;
     }
     $7_1 = HEAP32[$3_1 + 24 >> 2];
     $2_1 = HEAP32[$3_1 + 12 >> 2];
     label$8 : {
      if (($3_1 | 0) != ($2_1 | 0)) {
       $1_1 = HEAP32[$3_1 + 8 >> 2];
       label$10 : {
        if ($4_1 >>> 0 > $1_1 >>> 0) {
         break label$10
        }
       }
       HEAP32[$2_1 + 8 >> 2] = $1_1;
       HEAP32[$1_1 + 12 >> 2] = $2_1;
       break label$8;
      }
      label$11 : {
       $1_1 = $3_1 + 20 | 0;
       $4_1 = HEAP32[$1_1 >> 2];
       if ($4_1) {
        break label$11
       }
       $1_1 = $3_1 + 16 | 0;
       $4_1 = HEAP32[$1_1 >> 2];
       if ($4_1) {
        break label$11
       }
       $2_1 = 0;
       break label$8;
      }
      while (1) {
       $6_1 = $1_1;
       $2_1 = $4_1;
       $1_1 = $2_1 + 20 | 0;
       $4_1 = HEAP32[$1_1 >> 2];
       if ($4_1) {
        continue
       }
       $1_1 = $2_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 + 16 >> 2];
       if ($4_1) {
        continue
       }
       break;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     $1_1 = HEAP32[$3_1 + 28 >> 2];
     $4_1 = ($1_1 << 2) + 23768 | 0;
     label$13 : {
      if (($3_1 | 0) == HEAP32[$4_1 >> 2]) {
       HEAP32[$4_1 >> 2] = $2_1;
       if ($2_1) {
        break label$13
       }
       (wasm2js_i32$0 = 23468, wasm2js_i32$1 = HEAP32[5867] & __wasm_rotl_i32($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($3_1 | 0) ? 16 : 20) >> 2] = $2_1;
      if (!$2_1) {
       break label$2
      }
     }
     HEAP32[$2_1 + 24 >> 2] = $7_1;
     $1_1 = HEAP32[$3_1 + 16 >> 2];
     if ($1_1) {
      HEAP32[$2_1 + 16 >> 2] = $1_1;
      HEAP32[$1_1 + 24 >> 2] = $2_1;
     }
     $1_1 = HEAP32[$3_1 + 20 >> 2];
     if (!$1_1) {
      break label$2
     }
     HEAP32[$2_1 + 20 >> 2] = $1_1;
     HEAP32[$1_1 + 24 >> 2] = $2_1;
     break label$2;
    }
    $2_1 = HEAP32[$5_1 + 4 >> 2];
    if (($2_1 & 3) != 3) {
     break label$2
    }
    HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
    HEAP32[5868] = $0;
    HEAP32[$0 + $3_1 >> 2] = $0;
    HEAP32[$3_1 + 4 >> 2] = $0 | 1;
    return;
   }
   if ($5_1 >>> 0 <= $3_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[$5_1 + 4 >> 2];
   if (!($2_1 & 1)) {
    break label$1
   }
   label$16 : {
    if (!($2_1 & 2)) {
     if (HEAP32[5872] == ($5_1 | 0)) {
      HEAP32[5872] = $3_1;
      $0 = HEAP32[5869] + $0 | 0;
      HEAP32[5869] = $0;
      HEAP32[$3_1 + 4 >> 2] = $0 | 1;
      if (HEAP32[5871] != ($3_1 | 0)) {
       break label$1
      }
      HEAP32[5868] = 0;
      HEAP32[5871] = 0;
      return;
     }
     if (HEAP32[5871] == ($5_1 | 0)) {
      HEAP32[5871] = $3_1;
      $0 = HEAP32[5868] + $0 | 0;
      HEAP32[5868] = $0;
      HEAP32[$3_1 + 4 >> 2] = $0 | 1;
      HEAP32[$0 + $3_1 >> 2] = $0;
      return;
     }
     $0 = ($2_1 & -8) + $0 | 0;
     label$20 : {
      if ($2_1 >>> 0 <= 255) {
       $1_1 = HEAP32[$5_1 + 12 >> 2];
       $4_1 = HEAP32[$5_1 + 8 >> 2];
       $2_1 = $2_1 >>> 3;
       $6_1 = ($2_1 << 3) + 23504 | 0;
       label$22 : {
        if (($4_1 | 0) == ($6_1 | 0)) {
         break label$22
        }
       }
       if (($1_1 | 0) == ($4_1 | 0)) {
        (wasm2js_i32$0 = 23464, wasm2js_i32$1 = HEAP32[5866] & __wasm_rotl_i32($2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$20;
       }
       label$24 : {
        if (($1_1 | 0) == ($6_1 | 0)) {
         break label$24
        }
       }
       HEAP32[$1_1 + 8 >> 2] = $4_1;
       HEAP32[$4_1 + 12 >> 2] = $1_1;
       break label$20;
      }
      $7_1 = HEAP32[$5_1 + 24 >> 2];
      $2_1 = HEAP32[$5_1 + 12 >> 2];
      label$25 : {
       if (($2_1 | 0) != ($5_1 | 0)) {
        $1_1 = HEAP32[$5_1 + 8 >> 2];
        label$27 : {
         if (HEAPU32[5870] > $1_1 >>> 0) {
          break label$27
         }
        }
        HEAP32[$2_1 + 8 >> 2] = $1_1;
        HEAP32[$1_1 + 12 >> 2] = $2_1;
        break label$25;
       }
       label$28 : {
        $1_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$1_1 >> 2];
        if ($4_1) {
         break label$28
        }
        $1_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[$1_1 >> 2];
        if ($4_1) {
         break label$28
        }
        $2_1 = 0;
        break label$25;
       }
       while (1) {
        $6_1 = $1_1;
        $2_1 = $4_1;
        $1_1 = $2_1 + 20 | 0;
        $4_1 = HEAP32[$1_1 >> 2];
        if ($4_1) {
         continue
        }
        $1_1 = $2_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 + 16 >> 2];
        if ($4_1) {
         continue
        }
        break;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      $1_1 = HEAP32[$5_1 + 28 >> 2];
      $4_1 = ($1_1 << 2) + 23768 | 0;
      label$30 : {
       if (HEAP32[$4_1 >> 2] == ($5_1 | 0)) {
        HEAP32[$4_1 >> 2] = $2_1;
        if ($2_1) {
         break label$30
        }
        (wasm2js_i32$0 = 23468, wasm2js_i32$1 = HEAP32[5867] & __wasm_rotl_i32($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$20;
       }
       HEAP32[$7_1 + (($5_1 | 0) == HEAP32[$7_1 + 16 >> 2] ? 16 : 20) >> 2] = $2_1;
       if (!$2_1) {
        break label$20
       }
      }
      HEAP32[$2_1 + 24 >> 2] = $7_1;
      $1_1 = HEAP32[$5_1 + 16 >> 2];
      if ($1_1) {
       HEAP32[$2_1 + 16 >> 2] = $1_1;
       HEAP32[$1_1 + 24 >> 2] = $2_1;
      }
      $1_1 = HEAP32[$5_1 + 20 >> 2];
      if (!$1_1) {
       break label$20
      }
      HEAP32[$2_1 + 20 >> 2] = $1_1;
      HEAP32[$1_1 + 24 >> 2] = $2_1;
     }
     HEAP32[$0 + $3_1 >> 2] = $0;
     HEAP32[$3_1 + 4 >> 2] = $0 | 1;
     if (HEAP32[5871] != ($3_1 | 0)) {
      break label$16
     }
     HEAP32[5868] = $0;
     return;
    }
    HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
    HEAP32[$0 + $3_1 >> 2] = $0;
    HEAP32[$3_1 + 4 >> 2] = $0 | 1;
   }
   if ($0 >>> 0 <= 255) {
    $2_1 = $0 >>> 3;
    $0 = ($2_1 << 3) + 23504 | 0;
    $1_1 = HEAP32[5866];
    $2_1 = 1 << $2_1;
    label$34 : {
     if (!($1_1 & $2_1)) {
      HEAP32[5866] = $2_1 | $1_1;
      $1_1 = $0;
      break label$34;
     }
     $1_1 = HEAP32[$0 + 8 >> 2];
    }
    HEAP32[$1_1 + 12 >> 2] = $3_1;
    HEAP32[$0 + 8 >> 2] = $3_1;
    HEAP32[$3_1 + 12 >> 2] = $0;
    HEAP32[$3_1 + 8 >> 2] = $1_1;
    return;
   }
   HEAP32[$3_1 + 16 >> 2] = 0;
   HEAP32[$3_1 + 20 >> 2] = 0;
   $5_1 = $3_1 + 28 | 0;
   $2_1 = $0 >>> 8;
   $1_1 = 0;
   label$36 : {
    if (!$2_1) {
     break label$36
    }
    $1_1 = 31;
    if ($0 >>> 0 > 16777215) {
     break label$36
    }
    $4_1 = $2_1 + 1048320 >>> 16 & 8;
    $1_1 = $2_1 << $4_1;
    $2_1 = $1_1 + 520192 >>> 16 & 4;
    $6_1 = $1_1 << $2_1;
    $1_1 = $6_1 + 245760 >>> 16 & 2;
    $2_1 = ($6_1 << $1_1 >>> 15) - ($1_1 | ($2_1 | $4_1)) | 0;
    $1_1 = ($2_1 << 1 | $0 >>> $2_1 + 21 & 1) + 28 | 0;
   }
   HEAP32[$5_1 >> 2] = $1_1;
   $2_1 = ($1_1 << 2) + 23768 | 0;
   $4_1 = HEAP32[5867];
   $6_1 = 1 << $1_1;
   label$37 : {
    if (!($4_1 & $6_1)) {
     HEAP32[$2_1 >> 2] = $3_1;
     HEAP32[5867] = $4_1 | $6_1;
     HEAP32[$3_1 + 24 >> 2] = $2_1;
     HEAP32[$3_1 + 8 >> 2] = $3_1;
     HEAP32[$3_1 + 12 >> 2] = $3_1;
     break label$37;
    }
    $1_1 = $0 << (($1_1 | 0) == 31 ? 0 : 25 - ($1_1 >>> 1) | 0);
    $2_1 = HEAP32[$2_1 >> 2];
    label$39 : {
     while (1) {
      $4_1 = $2_1;
      if ((HEAP32[$2_1 + 4 >> 2] & -8) == ($0 | 0)) {
       break label$39
      }
      $2_1 = $1_1 >>> 29;
      $1_1 = $1_1 << 1;
      $6_1 = ($4_1 + ($2_1 & 4) | 0) + 16 | 0;
      $2_1 = HEAP32[$6_1 >> 2];
      if ($2_1) {
       continue
      }
      break;
     };
     HEAP32[$6_1 >> 2] = $3_1;
     HEAP32[$3_1 + 12 >> 2] = $3_1;
     HEAP32[$3_1 + 24 >> 2] = $4_1;
     HEAP32[$3_1 + 8 >> 2] = $3_1;
     break label$37;
    }
    $0 = HEAP32[$4_1 + 8 >> 2];
    HEAP32[$4_1 + 8 >> 2] = $3_1;
    HEAP32[$0 + 12 >> 2] = $3_1;
    HEAP32[$3_1 + 24 >> 2] = 0;
    HEAP32[$3_1 + 8 >> 2] = $0;
    HEAP32[$3_1 + 12 >> 2] = $4_1;
   }
   $0 = HEAP32[5874] + -1 | 0;
   HEAP32[5874] = $0;
   if ($0) {
    break label$1
   }
   $3_1 = 23920;
   while (1) {
    $0 = HEAP32[$3_1 >> 2];
    $3_1 = $0 + 8 | 0;
    if ($0) {
     continue
    }
    break;
   };
   HEAP32[5874] = -1;
  }
 }
 
 function $36($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  if (!HEAP32[$1_1 + 12 >> 2]) {
   HEAP32[$1_1 + 12 >> 2] = 1
  }
  while (1) {
   label$2 : {
    $0 = $31(HEAP32[$1_1 + 12 >> 2]);
    HEAP32[$1_1 + 8 >> 2] = $0;
    if ($0) {
     break label$2
    }
    $0 = global$0 - 16 | 0;
    HEAP32[$0 + 12 >> 2] = 23960;
    HEAP32[$0 + 8 >> 2] = 2;
    HEAP32[$1_1 + 4 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2];
    if (!HEAP32[$1_1 + 4 >> 2]) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[$1_1 + 4 >> 2]]();
    continue;
   }
   break;
  };
  global$0 = $1_1 + 16 | 0;
  return HEAP32[$1_1 + 8 >> 2];
 }
 
 function $37($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $33(HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $39($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAPU8[$0 | 0];
  $3_1 = HEAPU8[$1_1 | 0];
  label$1 : {
   if (!$2_1 | ($3_1 | 0) != ($2_1 | 0)) {
    break label$1
   }
   $0 = $0 + 1 | 0;
   $1_1 = $1_1 + 1 | 0;
   while (1) {
    $3_1 = HEAPU8[$1_1 | 0];
    $2_1 = HEAPU8[$0 | 0];
    if (!$2_1) {
     break label$1
    }
    $0 = $0 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($2_1 | 0) == ($3_1 | 0)) {
     continue
    }
    break;
   };
  }
  return $2_1 - $3_1 | 0;
 }
 
 function $40($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = HEAP32[$1_1 + 12 >> 2];
  global$0 = $1_1 + 16 | 0;
 }
 
 function $41($0) {
  $0 = $0 | 0;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
 }
 
 function $43($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $0 = HEAP32[$1_1 + 12 >> 2];
  $40($0);
  global$0 = $1_1 + 16 | 0;
  return $0 | 0;
 }
 
 function $44($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $0 = HEAP32[$1_1 + 12 >> 2];
  $43($0);
  $37($0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $45($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $0 = HEAP32[$1_1 + 12 >> 2];
  $43($0);
  global$0 = $1_1 + 16 | 0;
  return $0 | 0;
 }
 
 function $46($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $0 = HEAP32[$1_1 + 12 >> 2];
  $45($0);
  $37($0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $48($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $0 = HEAP32[$1_1 + 12 >> 2];
  $45($0);
  $37($0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $49($0, $1_1, $2_1) {
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 8 >> 2] = $0;
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  HEAP8[$3_1 + 3 | 0] = $2_1;
  label$1 : {
   if (!(HEAP8[$3_1 + 3 | 0] & 1)) {
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $50(HEAP32[$3_1 + 8 >> 2], HEAP32[$3_1 + 4 >> 2]) & 1), HEAP8[wasm2js_i32$0 + 15 | 0] = wasm2js_i32$1;
    break label$1;
   }
   $0 = 1;
   $1_1 = $3_1;
   if (HEAP32[$3_1 + 8 >> 2] != HEAP32[$3_1 + 4 >> 2]) {
    $0 = !$39($51(HEAP32[$3_1 + 8 >> 2]), $51(HEAP32[$3_1 + 4 >> 2]))
   }
   HEAP8[$1_1 + 15 | 0] = $0;
  }
  global$0 = $3_1 + 16 | 0;
  return HEAP8[$3_1 + 15 | 0] & 1;
 }
 
 function $50($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 4 >> 2] = $0;
  HEAP32[$2_1 >> 2] = $1_1;
  $0 = HEAP32[HEAP32[$2_1 >> 2] + 4 >> 2];
  HEAP32[$2_1 + 12 >> 2] = HEAP32[HEAP32[$2_1 + 4 >> 2] + 4 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $0;
  $0 = 1;
  if (HEAP32[$2_1 + 12 >> 2] != HEAP32[$2_1 + 8 >> 2]) {
   $0 = !$39(HEAP32[$2_1 + 12 >> 2], HEAP32[$2_1 + 8 >> 2])
  }
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $51($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAP32[$1_1 + 8 >> 2] = $0;
  HEAP32[$1_1 + 12 >> 2] = HEAP32[HEAP32[$1_1 + 8 >> 2] + 4 >> 2];
  return HEAP32[$1_1 + 12 >> 2];
 }
 
 function $52($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 72 >> 2] = $0;
  HEAP32[$3_1 + 68 >> 2] = $1_1;
  HEAP32[$3_1 + 64 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 72 >> 2];
  label$1 : {
   if ($49($1_1, HEAP32[$3_1 + 68 >> 2], 0) & 1) {
    HEAP8[$3_1 + 79 | 0] = 1;
    break label$1;
   }
   $2_1 = $3_1;
   $0 = HEAP32[$3_1 + 68 >> 2];
   label$3 : {
    if ($0) {
     $0 = $53($0);
     break label$3;
    }
    $0 = 0;
   }
   HEAP32[$2_1 + 60 >> 2] = $0;
   if (!HEAP32[$3_1 + 60 >> 2]) {
    HEAP8[$3_1 + 79 | 0] = 0;
    break label$1;
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 + 60 >> 2];
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$3_1 + 8 >> 2] = $1_1;
   HEAP32[$3_1 + 12 >> 2] = -1;
   HEAP32[$3_1 + 16 >> 2] = 0;
   HEAP32[$3_1 + 20 >> 2] = 0;
   HEAP32[$3_1 + 24 >> 2] = 0;
   HEAP32[$3_1 + 28 >> 2] = 0;
   HEAP32[$3_1 + 32 >> 2] = 0;
   HEAP32[$3_1 + 36 >> 2] = 0;
   HEAP32[$3_1 + 40 >> 2] = 0;
   HEAP32[$3_1 + 44 >> 2] = 0;
   HEAP32[$3_1 + 48 >> 2] = 0;
   HEAP8[$3_1 + 52 | 0] = 0;
   HEAP8[$3_1 + 53 | 0] = 0;
   HEAP8[$3_1 + 54 | 0] = 0;
   HEAP32[$3_1 + 48 >> 2] = 1;
   $0 = HEAP32[$3_1 + 60 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $3_1, HEAP32[HEAP32[$3_1 + 64 >> 2] >> 2], 1);
   if (HEAP32[$3_1 + 24 >> 2] == 1) {
    HEAP32[HEAP32[$3_1 + 64 >> 2] >> 2] = HEAP32[$3_1 + 16 >> 2];
    HEAP8[$3_1 + 79 | 0] = 1;
    break label$1;
   }
   HEAP8[$3_1 + 79 | 0] = 0;
  }
  global$0 = $3_1 + 80 | 0;
  return HEAP8[$3_1 + 79 | 0] & 1;
 }
 
 function $53($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 96 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 92 >> 2] = $0;
  HEAP32[$1_1 + 88 >> 2] = 3472;
  HEAP32[$1_1 + 84 >> 2] = 3520;
  HEAP32[$1_1 + 80 >> 2] = 0;
  HEAP32[$1_1 + 76 >> 2] = HEAP32[HEAP32[$1_1 + 92 >> 2] >> 2];
  HEAP32[$1_1 + 72 >> 2] = HEAP32[HEAP32[$1_1 + 76 >> 2] + -8 >> 2];
  HEAP32[$1_1 + 68 >> 2] = HEAP32[$1_1 + 92 >> 2] + HEAP32[$1_1 + 72 >> 2];
  HEAP32[$1_1 + 64 >> 2] = HEAP32[HEAP32[$1_1 + 76 >> 2] + -4 >> 2];
  HEAP32[$1_1 + 60 >> 2] = 0;
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 84 >> 2];
  HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 92 >> 2];
  HEAP32[$1_1 + 8 >> 2] = HEAP32[$1_1 + 88 >> 2];
  HEAP32[$1_1 + 12 >> 2] = HEAP32[$1_1 + 80 >> 2];
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP32[$1_1 + 20 >> 2] = 0;
  HEAP32[$1_1 + 24 >> 2] = 0;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP32[$1_1 + 32 >> 2] = 0;
  HEAP32[$1_1 + 36 >> 2] = 0;
  HEAP32[$1_1 + 40 >> 2] = 0;
  HEAP32[$1_1 + 44 >> 2] = 0;
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP8[$1_1 + 52 | 0] = 0;
  HEAP8[$1_1 + 53 | 0] = 0;
  HEAP8[$1_1 + 54 | 0] = 0;
  label$1 : {
   if ($49(HEAP32[$1_1 + 64 >> 2], HEAP32[$1_1 + 84 >> 2], 0) & 1) {
    HEAP32[$1_1 + 48 >> 2] = 1;
    $0 = HEAP32[$1_1 + 64 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1_1, HEAP32[$1_1 + 68 >> 2], HEAP32[$1_1 + 68 >> 2], 1, 0);
    if (HEAP32[$1_1 + 24 >> 2] == 1) {
     HEAP32[$1_1 + 60 >> 2] = HEAP32[$1_1 + 68 >> 2]
    }
    break label$1;
   }
   $0 = HEAP32[$1_1 + 64 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1_1, HEAP32[$1_1 + 68 >> 2], 1, 0);
   $0 = HEAP32[$1_1 + 36 >> 2];
   label$4 : {
    if ($0 >>> 0 > 1) {
     break label$4
    }
    if ($0 - 1) {
     if (HEAP32[$1_1 + 40 >> 2] != 1 | HEAP32[$1_1 + 28 >> 2] != 1 | HEAP32[$1_1 + 32 >> 2] != 1) {
      break label$4
     }
     HEAP32[$1_1 + 60 >> 2] = HEAP32[$1_1 + 20 >> 2];
     break label$4;
    }
    if (!(HEAP32[$1_1 + 40 >> 2] | HEAP32[$1_1 + 28 >> 2] != 1 | HEAP32[$1_1 + 32 >> 2] != 1 ? HEAP32[$1_1 + 24 >> 2] != 1 : 0)) {
     HEAP32[$1_1 + 60 >> 2] = HEAP32[$1_1 + 16 >> 2]
    }
   }
  }
  global$0 = $1_1 + 96 | 0;
  return HEAP32[$1_1 + 60 >> 2];
 }
 
 function $54($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[$4_1 + 12 >> 2] = $0;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $3_1;
  label$1 : {
   if (!HEAP32[HEAP32[$4_1 + 8 >> 2] + 16 >> 2]) {
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 16 >> 2] = HEAP32[$4_1 + 4 >> 2];
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 24 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 36 >> 2] = 1;
    break label$1;
   }
   label$3 : {
    if (HEAP32[HEAP32[$4_1 + 8 >> 2] + 16 >> 2] == HEAP32[$4_1 + 4 >> 2]) {
     if (HEAP32[HEAP32[$4_1 + 8 >> 2] + 24 >> 2] == 2) {
      HEAP32[HEAP32[$4_1 + 8 >> 2] + 24 >> 2] = HEAP32[$4_1 >> 2]
     }
     break label$3;
    }
    $0 = HEAP32[$4_1 + 8 >> 2];
    HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 24 >> 2] = 2;
    HEAP8[HEAP32[$4_1 + 8 >> 2] + 54 | 0] = 1;
   }
  }
 }
 
 function $55($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $0;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $3_1;
  $0 = HEAP32[$4_1 + 12 >> 2];
  if ($49($0, HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2], 0) & 1) {
   $54($0, HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 4 >> 2], HEAP32[$4_1 >> 2])
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $56($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $0;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $3_1;
  $0 = HEAP32[$4_1 + 12 >> 2];
  label$1 : {
   if ($49($0, HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2], 0) & 1) {
    $54($0, HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 4 >> 2], HEAP32[$4_1 >> 2]);
    break label$1;
   }
   $0 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 4 >> 2], HEAP32[$4_1 >> 2]);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $57($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 28 >> 2] = $0;
  HEAP32[$4_1 + 24 >> 2] = $1_1;
  HEAP32[$4_1 + 20 >> 2] = $2_1;
  HEAP32[$4_1 + 16 >> 2] = $3_1;
  $0 = HEAP32[$4_1 + 28 >> 2];
  HEAP32[$4_1 + 12 >> 2] = 0;
  if (HEAP32[$4_1 + 20 >> 2]) {
   HEAP32[$4_1 + 12 >> 2] = HEAP32[$0 + 4 >> 2] >> 8;
   if (HEAP32[$0 + 4 >> 2] & 1) {
    HEAP32[$4_1 + 8 >> 2] = HEAP32[HEAP32[$4_1 + 20 >> 2] >> 2];
    HEAP32[$4_1 + 12 >> 2] = HEAP32[HEAP32[$4_1 + 8 >> 2] + HEAP32[$4_1 + 12 >> 2] >> 2];
   }
  }
  $1_1 = HEAP32[$0 >> 2];
  $2_1 = $1_1;
  $3_1 = HEAP32[$4_1 + 24 >> 2];
  $5_1 = HEAP32[$4_1 + 20 >> 2] + HEAP32[$4_1 + 12 >> 2] | 0;
  if (HEAP32[$0 + 4 >> 2] & 2) {
   $0 = HEAP32[$4_1 + 16 >> 2]
  } else {
   $0 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($2_1, $3_1, $5_1, $0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $58($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 28 >> 2] = $0;
  HEAP32[$4_1 + 24 >> 2] = $1_1;
  HEAP32[$4_1 + 20 >> 2] = $2_1;
  HEAP32[$4_1 + 16 >> 2] = $3_1;
  $0 = HEAP32[$4_1 + 28 >> 2];
  label$1 : {
   if ($49($0, HEAP32[HEAP32[$4_1 + 24 >> 2] + 8 >> 2], 0) & 1) {
    $54($0, HEAP32[$4_1 + 24 >> 2], HEAP32[$4_1 + 20 >> 2], HEAP32[$4_1 + 16 >> 2]);
    break label$1;
   }
   HEAP32[$4_1 + 12 >> 2] = ($0 + 16 | 0) + (HEAP32[$0 + 12 >> 2] << 3);
   HEAP32[$4_1 + 8 >> 2] = $0 + 16;
   $57(HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 24 >> 2], HEAP32[$4_1 + 20 >> 2], HEAP32[$4_1 + 16 >> 2]);
   $0 = HEAP32[$4_1 + 8 >> 2] + 8 | 0;
   HEAP32[$4_1 + 8 >> 2] = $0;
   if ($0 >>> 0 < HEAPU32[$4_1 + 12 >> 2]) {
    while (1) {
     $57(HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 24 >> 2], HEAP32[$4_1 + 20 >> 2], HEAP32[$4_1 + 16 >> 2]);
     label$4 : {
      if (HEAP8[HEAP32[$4_1 + 24 >> 2] + 54 | 0] & 1) {
       break label$4
      }
      $0 = HEAP32[$4_1 + 8 >> 2] + 8 | 0;
      HEAP32[$4_1 + 8 >> 2] = $0;
      if ($0 >>> 0 < HEAPU32[$4_1 + 12 >> 2]) {
       continue
      }
     }
     break;
    }
   }
  }
  global$0 = $4_1 + 32 | 0;
 }
 
 function $59($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[$5_1 + 28 >> 2] = $0;
  HEAP32[$5_1 + 24 >> 2] = $1_1;
  HEAP32[$5_1 + 20 >> 2] = $2_1;
  HEAP32[$5_1 + 16 >> 2] = $3_1;
  HEAP32[$5_1 + 12 >> 2] = $4_1;
  HEAP8[HEAP32[$5_1 + 24 >> 2] + 53 | 0] = 1;
  if (HEAP32[$5_1 + 16 >> 2] == HEAP32[HEAP32[$5_1 + 24 >> 2] + 4 >> 2]) {
   HEAP8[HEAP32[$5_1 + 24 >> 2] + 52 | 0] = 1;
   label$2 : {
    if (!HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2]) {
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2] = HEAP32[$5_1 + 20 >> 2];
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] = HEAP32[$5_1 + 12 >> 2];
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 36 >> 2] = 1;
     if (!(HEAP32[HEAP32[$5_1 + 24 >> 2] + 48 >> 2] != 1 | HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] != 1)) {
      HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1
     }
     break label$2;
    }
    label$5 : {
     if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2] == HEAP32[$5_1 + 20 >> 2]) {
      if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] == 2) {
       HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] = HEAP32[$5_1 + 12 >> 2]
      }
      if (!(HEAP32[HEAP32[$5_1 + 24 >> 2] + 48 >> 2] != 1 | HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] != 1)) {
       HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1
      }
      break label$5;
     }
     $0 = HEAP32[$5_1 + 24 >> 2];
     HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
     HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1;
    }
   }
  }
 }
 
 function $60($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[$4_1 + 12 >> 2] = $0;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $3_1;
  if (HEAP32[$4_1 + 4 >> 2] == HEAP32[HEAP32[$4_1 + 8 >> 2] + 4 >> 2]) {
   if (HEAP32[HEAP32[$4_1 + 8 >> 2] + 28 >> 2] != 1) {
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 28 >> 2] = HEAP32[$4_1 >> 2]
   }
  }
 }
 
 function $61($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 44 >> 2] = $0;
  HEAP32[$5_1 + 40 >> 2] = $1_1;
  HEAP32[$5_1 + 36 >> 2] = $2_1;
  HEAP32[$5_1 + 32 >> 2] = $3_1;
  HEAP8[$5_1 + 31 | 0] = $4_1;
  $0 = HEAP32[$5_1 + 44 >> 2];
  label$1 : {
   if ($49($0, HEAP32[HEAP32[$5_1 + 40 >> 2] + 8 >> 2], HEAP8[$5_1 + 31 | 0] & 1) & 1) {
    $60($0, HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2]);
    break label$1;
   }
   label$3 : {
    if ($49($0, HEAP32[HEAP32[$5_1 + 40 >> 2] >> 2], HEAP8[$5_1 + 31 | 0] & 1) & 1) {
     if (!(HEAP32[$5_1 + 36 >> 2] != HEAP32[HEAP32[$5_1 + 40 >> 2] + 20 >> 2] ? HEAP32[$5_1 + 36 >> 2] != HEAP32[HEAP32[$5_1 + 40 >> 2] + 16 >> 2] : 0)) {
      if (HEAP32[$5_1 + 32 >> 2] == 1) {
       HEAP32[HEAP32[$5_1 + 40 >> 2] + 32 >> 2] = 1
      }
      break label$3;
     }
     HEAP32[HEAP32[$5_1 + 40 >> 2] + 32 >> 2] = HEAP32[$5_1 + 32 >> 2];
     HEAP8[$5_1 + 30 | 0] = 0;
     if (HEAP32[HEAP32[$5_1 + 40 >> 2] + 44 >> 2] != 4) {
      HEAP8[$5_1 + 29 | 0] = 0;
      HEAP32[$5_1 + 24 >> 2] = ($0 + 16 | 0) + (HEAP32[$0 + 12 >> 2] << 3);
      HEAP32[$5_1 + 20 >> 2] = $0 + 16;
      while (1) {
       label$10 : {
        if (HEAPU32[$5_1 + 20 >> 2] >= HEAPU32[$5_1 + 24 >> 2]) {
         break label$10
        }
        HEAP8[HEAP32[$5_1 + 40 >> 2] + 52 | 0] = 0;
        HEAP8[HEAP32[$5_1 + 40 >> 2] + 53 | 0] = 0;
        $62(HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 36 >> 2], 1, HEAP8[$5_1 + 31 | 0] & 1);
        if (HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] & 1) {
         break label$10
        }
        if (HEAP8[HEAP32[$5_1 + 40 >> 2] + 53 | 0] & 1) {
         HEAP8[$5_1 + 29 | 0] = 1;
         label$14 : {
          if (HEAP8[HEAP32[$5_1 + 40 >> 2] + 52 | 0] & 1) {
           HEAP8[$5_1 + 30 | 0] = 1;
           if (!(HEAP32[$0 + 8 >> 2] & 2) | HEAP32[HEAP32[$5_1 + 40 >> 2] + 24 >> 2] == 1) {
            break label$10
           }
           break label$14;
          }
          if (!(HEAP32[$0 + 8 >> 2] & 1)) {
           break label$10
          }
         }
        }
        HEAP32[$5_1 + 20 >> 2] = HEAP32[$5_1 + 20 >> 2] + 8;
        continue;
       }
       break;
      };
      label$19 : {
       if (HEAP8[$5_1 + 29 | 0] & 1) {
        HEAP32[HEAP32[$5_1 + 40 >> 2] + 44 >> 2] = 3;
        break label$19;
       }
       HEAP32[HEAP32[$5_1 + 40 >> 2] + 44 >> 2] = 4;
      }
     }
     if (!(HEAP8[$5_1 + 30 | 0] & 1)) {
      HEAP32[HEAP32[$5_1 + 40 >> 2] + 20 >> 2] = HEAP32[$5_1 + 36 >> 2];
      $0 = HEAP32[$5_1 + 40 >> 2];
      HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 1;
      if (!(HEAP32[HEAP32[$5_1 + 40 >> 2] + 36 >> 2] != 1 | HEAP32[HEAP32[$5_1 + 40 >> 2] + 24 >> 2] != 2)) {
       HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] = 1
      }
     }
     break label$3;
    }
    HEAP32[$5_1 + 16 >> 2] = ($0 + 16 | 0) + (HEAP32[$0 + 12 >> 2] << 3);
    HEAP32[$5_1 + 12 >> 2] = $0 + 16;
    $63(HEAP32[$5_1 + 12 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2], HEAP8[$5_1 + 31 | 0] & 1);
    $1_1 = HEAP32[$5_1 + 12 >> 2] + 8 | 0;
    HEAP32[$5_1 + 12 >> 2] = $1_1;
    if ($1_1 >>> 0 < HEAPU32[$5_1 + 16 >> 2]) {
     label$24 : {
      if (!(HEAP32[HEAP32[$5_1 + 40 >> 2] + 36 >> 2] != 1 ? !(HEAP32[$0 + 8 >> 2] & 2) : 0)) {
       while (1) {
        if (!(HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] & 1)) {
         $63(HEAP32[$5_1 + 12 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2], HEAP8[$5_1 + 31 | 0] & 1);
         $0 = HEAP32[$5_1 + 12 >> 2] + 8 | 0;
         HEAP32[$5_1 + 12 >> 2] = $0;
         if ($0 >>> 0 < HEAPU32[$5_1 + 16 >> 2]) {
          continue
         }
        }
        break;
       };
       break label$24;
      }
      label$30 : {
       if (HEAP32[$0 + 8 >> 2] & 1) {
        while (1) {
         if (!(!!(HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] & 1) | !(HEAP32[HEAP32[$5_1 + 40 >> 2] + 36 >> 2] != 1 | HEAP32[HEAP32[$5_1 + 40 >> 2] + 24 >> 2] != 1))) {
          $63(HEAP32[$5_1 + 12 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2], HEAP8[$5_1 + 31 | 0] & 1);
          $0 = HEAP32[$5_1 + 12 >> 2] + 8 | 0;
          HEAP32[$5_1 + 12 >> 2] = $0;
          if ($0 >>> 0 < HEAPU32[$5_1 + 16 >> 2]) {
           continue
          }
         }
         break;
        };
        break label$30;
       }
       while (1) {
        if (!(!!(HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] & 1) | HEAP32[HEAP32[$5_1 + 40 >> 2] + 36 >> 2] == 1)) {
         $63(HEAP32[$5_1 + 12 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2], HEAP8[$5_1 + 31 | 0] & 1);
         $0 = HEAP32[$5_1 + 12 >> 2] + 8 | 0;
         HEAP32[$5_1 + 12 >> 2] = $0;
         if ($0 >>> 0 < HEAPU32[$5_1 + 16 >> 2]) {
          continue
         }
        }
        break;
       };
      }
     }
    }
   }
  }
  global$0 = $5_1 + 48 | 0;
 }
 
 function $62($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 28 >> 2] = $0;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$6_1 + 16 >> 2] = $3_1;
  HEAP32[$6_1 + 12 >> 2] = $4_1;
  HEAP8[$6_1 + 11 | 0] = $5_1;
  $0 = HEAP32[$6_1 + 28 >> 2];
  HEAP32[$6_1 + 4 >> 2] = HEAP32[$0 + 4 >> 2] >> 8;
  if (HEAP32[$0 + 4 >> 2] & 1) {
   HEAP32[$6_1 >> 2] = HEAP32[HEAP32[$6_1 + 16 >> 2] >> 2];
   HEAP32[$6_1 + 4 >> 2] = HEAP32[HEAP32[$6_1 >> 2] + HEAP32[$6_1 + 4 >> 2] >> 2];
  }
  $1_1 = HEAP32[$0 >> 2];
  $2_1 = $1_1;
  $3_1 = HEAP32[$6_1 + 24 >> 2];
  $4_1 = HEAP32[$6_1 + 20 >> 2];
  $5_1 = HEAP32[$6_1 + 16 >> 2] + HEAP32[$6_1 + 4 >> 2] | 0;
  if (HEAP32[$0 + 4 >> 2] & 2) {
   $0 = HEAP32[$6_1 + 12 >> 2]
  } else {
   $0 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($2_1, $3_1, $4_1, $5_1, $0, HEAP8[$6_1 + 11 | 0] & 1);
  global$0 = $6_1 + 32 | 0;
 }
 
 function $63($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 28 >> 2] = $0;
  HEAP32[$5_1 + 24 >> 2] = $1_1;
  HEAP32[$5_1 + 20 >> 2] = $2_1;
  HEAP32[$5_1 + 16 >> 2] = $3_1;
  HEAP8[$5_1 + 15 | 0] = $4_1;
  $0 = HEAP32[$5_1 + 28 >> 2];
  HEAP32[$5_1 + 8 >> 2] = HEAP32[$0 + 4 >> 2] >> 8;
  if (HEAP32[$0 + 4 >> 2] & 1) {
   HEAP32[$5_1 + 4 >> 2] = HEAP32[HEAP32[$5_1 + 20 >> 2] >> 2];
   HEAP32[$5_1 + 8 >> 2] = HEAP32[HEAP32[$5_1 + 4 >> 2] + HEAP32[$5_1 + 8 >> 2] >> 2];
  }
  $1_1 = HEAP32[$0 >> 2];
  $2_1 = $1_1;
  $3_1 = HEAP32[$5_1 + 24 >> 2];
  $4_1 = HEAP32[$5_1 + 20 >> 2] + HEAP32[$5_1 + 8 >> 2] | 0;
  if (HEAP32[$0 + 4 >> 2] & 2) {
   $0 = HEAP32[$5_1 + 16 >> 2]
  } else {
   $0 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($2_1, $3_1, $4_1, $0, HEAP8[$5_1 + 15 | 0] & 1);
  global$0 = $5_1 + 32 | 0;
 }
 
 function $64($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 28 >> 2] = $0;
  HEAP32[$5_1 + 24 >> 2] = $1_1;
  HEAP32[$5_1 + 20 >> 2] = $2_1;
  HEAP32[$5_1 + 16 >> 2] = $3_1;
  HEAP8[$5_1 + 15 | 0] = $4_1;
  $0 = HEAP32[$5_1 + 28 >> 2];
  label$1 : {
   if ($49($0, HEAP32[HEAP32[$5_1 + 24 >> 2] + 8 >> 2], HEAP8[$5_1 + 15 | 0] & 1) & 1) {
    $60($0, HEAP32[$5_1 + 24 >> 2], HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 16 >> 2]);
    break label$1;
   }
   label$3 : {
    if ($49($0, HEAP32[HEAP32[$5_1 + 24 >> 2] >> 2], HEAP8[$5_1 + 15 | 0] & 1) & 1) {
     if (!(HEAP32[$5_1 + 20 >> 2] != HEAP32[HEAP32[$5_1 + 24 >> 2] + 20 >> 2] ? HEAP32[$5_1 + 20 >> 2] != HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2] : 0)) {
      if (HEAP32[$5_1 + 16 >> 2] == 1) {
       HEAP32[HEAP32[$5_1 + 24 >> 2] + 32 >> 2] = 1
      }
      break label$3;
     }
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 32 >> 2] = HEAP32[$5_1 + 16 >> 2];
     HEAP8[$5_1 + 14 | 0] = 0;
     if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 44 >> 2] != 4) {
      HEAP8[$5_1 + 13 | 0] = 0;
      HEAP8[HEAP32[$5_1 + 24 >> 2] + 52 | 0] = 0;
      HEAP8[HEAP32[$5_1 + 24 >> 2] + 53 | 0] = 0;
      $0 = HEAP32[$0 + 8 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$5_1 + 24 >> 2], HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 20 >> 2], 1, HEAP8[$5_1 + 15 | 0] & 1);
      if (HEAP8[HEAP32[$5_1 + 24 >> 2] + 53 | 0] & 1) {
       HEAP8[$5_1 + 13 | 0] = 1;
       if (HEAP8[HEAP32[$5_1 + 24 >> 2] + 52 | 0] & 1) {
        HEAP8[$5_1 + 14 | 0] = 1
       }
      }
      label$12 : {
       if (HEAP8[$5_1 + 13 | 0] & 1) {
        HEAP32[HEAP32[$5_1 + 24 >> 2] + 44 >> 2] = 3;
        break label$12;
       }
       HEAP32[HEAP32[$5_1 + 24 >> 2] + 44 >> 2] = 4;
      }
     }
     if (!(HEAP8[$5_1 + 14 | 0] & 1)) {
      HEAP32[HEAP32[$5_1 + 24 >> 2] + 20 >> 2] = HEAP32[$5_1 + 20 >> 2];
      $0 = HEAP32[$5_1 + 24 >> 2];
      HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 1;
      if (!(HEAP32[HEAP32[$5_1 + 24 >> 2] + 36 >> 2] != 1 | HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] != 2)) {
       HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1
      }
     }
     break label$3;
    }
    $0 = HEAP32[$0 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$5_1 + 24 >> 2], HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 16 >> 2], HEAP8[$5_1 + 15 | 0] & 1);
   }
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $65($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 28 >> 2] = $0;
  HEAP32[$5_1 + 24 >> 2] = $1_1;
  HEAP32[$5_1 + 20 >> 2] = $2_1;
  HEAP32[$5_1 + 16 >> 2] = $3_1;
  HEAP8[$5_1 + 15 | 0] = $4_1;
  $0 = HEAP32[$5_1 + 28 >> 2];
  label$1 : {
   if ($49($0, HEAP32[HEAP32[$5_1 + 24 >> 2] + 8 >> 2], HEAP8[$5_1 + 15 | 0] & 1) & 1) {
    $60($0, HEAP32[$5_1 + 24 >> 2], HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 16 >> 2]);
    break label$1;
   }
   if ($49($0, HEAP32[HEAP32[$5_1 + 24 >> 2] >> 2], HEAP8[$5_1 + 15 | 0] & 1) & 1) {
    label$4 : {
     if (!(HEAP32[$5_1 + 20 >> 2] != HEAP32[HEAP32[$5_1 + 24 >> 2] + 20 >> 2] ? HEAP32[$5_1 + 20 >> 2] != HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2] : 0)) {
      if (HEAP32[$5_1 + 16 >> 2] == 1) {
       HEAP32[HEAP32[$5_1 + 24 >> 2] + 32 >> 2] = 1
      }
      break label$4;
     }
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 32 >> 2] = HEAP32[$5_1 + 16 >> 2];
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 20 >> 2] = HEAP32[$5_1 + 20 >> 2];
     $0 = HEAP32[$5_1 + 24 >> 2];
     HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 1;
     if (!(HEAP32[HEAP32[$5_1 + 24 >> 2] + 36 >> 2] != 1 | HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] != 2)) {
      HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1
     }
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 44 >> 2] = 4;
    }
   }
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $66($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 28 >> 2] = $0;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$6_1 + 16 >> 2] = $3_1;
  HEAP32[$6_1 + 12 >> 2] = $4_1;
  HEAP8[$6_1 + 11 | 0] = $5_1;
  $0 = HEAP32[$6_1 + 28 >> 2];
  label$1 : {
   if ($49($0, HEAP32[HEAP32[$6_1 + 24 >> 2] + 8 >> 2], HEAP8[$6_1 + 11 | 0] & 1) & 1) {
    $59($0, HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2]);
    break label$1;
   }
   HEAP8[$6_1 + 10 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] & 1;
   HEAP8[$6_1 + 9 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] & 1;
   HEAP32[$6_1 + 4 >> 2] = ($0 + 16 | 0) + (HEAP32[$0 + 12 >> 2] << 3);
   HEAP32[$6_1 >> 2] = $0 + 16;
   HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] = 0;
   HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] = 0;
   $62(HEAP32[$6_1 >> 2], HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2], HEAP8[$6_1 + 11 | 0] & 1);
   HEAP8[$6_1 + 10 | 0] = (HEAP8[$6_1 + 10 | 0] & 1 | HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] & 1) != 0;
   HEAP8[$6_1 + 9 | 0] = (HEAP8[$6_1 + 9 | 0] & 1 | HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] & 1) != 0;
   $1_1 = HEAP32[$6_1 >> 2] + 8 | 0;
   HEAP32[$6_1 >> 2] = $1_1;
   if ($1_1 >>> 0 < HEAPU32[$6_1 + 4 >> 2]) {
    while (1) {
     label$4 : {
      if (HEAP8[HEAP32[$6_1 + 24 >> 2] + 54 | 0] & 1) {
       break label$4
      }
      label$7 : {
       if (HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] & 1) {
        if (!(HEAP32[$0 + 8 >> 2] & 2) | HEAP32[HEAP32[$6_1 + 24 >> 2] + 24 >> 2] == 1) {
         break label$4
        }
        break label$7;
       }
       if (HEAP32[$0 + 8 >> 2] & 1 ? 0 : HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] & 1) {
        break label$4
       }
      }
      HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] = 0;
      HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] = 0;
      $62(HEAP32[$6_1 >> 2], HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2], HEAP8[$6_1 + 11 | 0] & 1);
      HEAP8[$6_1 + 10 | 0] = (HEAP8[$6_1 + 10 | 0] & 1 | HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] & 1) != 0;
      HEAP8[$6_1 + 9 | 0] = (HEAP8[$6_1 + 9 | 0] & 1 | HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] & 1) != 0;
      $1_1 = HEAP32[$6_1 >> 2] + 8 | 0;
      HEAP32[$6_1 >> 2] = $1_1;
      if ($1_1 >>> 0 < HEAPU32[$6_1 + 4 >> 2]) {
       continue
      }
     }
     break;
    }
   }
   HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] = HEAP8[$6_1 + 10 | 0] & 1;
   HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] = HEAP8[$6_1 + 9 | 0] & 1;
  }
  global$0 = $6_1 + 32 | 0;
 }
 
 function $67($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 28 >> 2] = $0;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$6_1 + 16 >> 2] = $3_1;
  HEAP32[$6_1 + 12 >> 2] = $4_1;
  HEAP8[$6_1 + 11 | 0] = $5_1;
  $0 = HEAP32[$6_1 + 28 >> 2];
  label$1 : {
   if ($49($0, HEAP32[HEAP32[$6_1 + 24 >> 2] + 8 >> 2], HEAP8[$6_1 + 11 | 0] & 1) & 1) {
    $59($0, HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2]);
    break label$1;
   }
   $0 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2], HEAP8[$6_1 + 11 | 0] & 1);
  }
  global$0 = $6_1 + 32 | 0;
 }
 
 function $68($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 28 >> 2] = $0;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$6_1 + 16 >> 2] = $3_1;
  HEAP32[$6_1 + 12 >> 2] = $4_1;
  HEAP8[$6_1 + 11 | 0] = $5_1;
  $0 = HEAP32[$6_1 + 28 >> 2];
  if ($49($0, HEAP32[HEAP32[$6_1 + 24 >> 2] + 8 >> 2], HEAP8[$6_1 + 11 | 0] & 1) & 1) {
   $59($0, HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2])
  }
  global$0 = $6_1 + 32 | 0;
 }
 
 function $69($0, $1_1) {
  HEAP32[$0 >> 2] = 3764;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $70($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function $71($0) {
  $0 = $0 | 0;
  abort();
 }
 
 function $72($0, $1_1) {
  $69($0, $1_1);
  HEAP32[$0 >> 2] = 3792;
 }
 
 function $75($0) {
  $0 = $0 | 0;
  if ($0) {
   FUNCTION_TABLE[HEAP32[5847]](HEAP32[$0 + -4 >> 2])
  }
 }
 
 function $76($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $0 = FUNCTION_TABLE[HEAP32[5846]](($0 + $1_1 | 0) + 3 | 0) | 0;
  if ($0) {
   $2_1 = ($0 + $1_1 | 0) + 3 & 0 - $1_1;
   HEAP32[$2_1 + -4 >> 2] = $0;
  }
  return $2_1 | 0;
 }
 
 function $77($0) {
  $0 = $0 | 0;
  $33($0);
 }
 
 function $78($0) {
  $0 = $0 | 0;
  return $31($0) | 0;
 }
 
 function $79($0) {
  HEAP32[5991] = HEAP32[5991] + 1;
  return FUNCTION_TABLE[HEAP32[5844]]($0, 16) | 0;
 }
 
 function $80($0) {
  if ($0) {
   HEAP32[5992] = HEAP32[5992] + 1;
   FUNCTION_TABLE[HEAP32[5845]]($0);
  }
 }
 
 function $81($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0;
  $2_1 = global$0 - 32 | 0;
  HEAP32[$2_1 + 24 >> 2] = -8388609;
  HEAP32[$2_1 + 16 >> 2] = -8388609;
  HEAP32[$2_1 + 20 >> 2] = -8388609;
  HEAP32[$2_1 + 8 >> 2] = 2139095039;
  HEAP32[$2_1 >> 2] = 2139095039;
  HEAP32[$2_1 + 4 >> 2] = 2139095039;
  $11 = HEAP32[$1_1 + 4 >> 2];
  label$1 : {
   if (($11 | 0) < 1) {
    $6_1 = Math_fround(3402823466385288598117041.0e14);
    $7_1 = Math_fround(-3402823466385288598117041.0e14);
    $8_1 = Math_fround(-3402823466385288598117041.0e14);
    $4_1 = Math_fround(-3402823466385288598117041.0e14);
    $9_1 = Math_fround(3402823466385288598117041.0e14);
    $5_1 = Math_fround(3402823466385288598117041.0e14);
    break label$1;
   }
   $12_1 = $2_1 + 16 | 0;
   $1_1 = HEAP32[$1_1 + 12 >> 2] + 16 | 0;
   $6_1 = Math_fround(3402823466385288598117041.0e14);
   $7_1 = Math_fround(-3402823466385288598117041.0e14);
   $8_1 = Math_fround(-3402823466385288598117041.0e14);
   $4_1 = Math_fround(-3402823466385288598117041.0e14);
   $9_1 = Math_fround(3402823466385288598117041.0e14);
   $5_1 = Math_fround(3402823466385288598117041.0e14);
   while (1) {
    $3_1 = $1_1 + -16 | 0;
    $10 = HEAPF32[$3_1 >> 2];
    $5_1 = $5_1 > $10 ? $10 : $5_1;
    HEAPF32[$2_1 >> 2] = $5_1;
    $13_1 = $9_1 > HEAPF32[$1_1 + -12 >> 2] ? $3_1 : $2_1;
    $9_1 = HEAPF32[$13_1 + 4 >> 2];
    HEAP32[$2_1 + 4 >> 2] = HEAP32[$13_1 + 4 >> 2];
    $3_1 = $6_1 > HEAPF32[$1_1 + -8 >> 2] ? $3_1 : $2_1;
    $6_1 = HEAPF32[$3_1 + 8 >> 2];
    HEAP32[$2_1 + 8 >> 2] = HEAP32[$3_1 + 8 >> 2];
    $10 = HEAPF32[$1_1 >> 2];
    $4_1 = $4_1 < $10 ? $10 : $4_1;
    HEAPF32[$2_1 + 16 >> 2] = $4_1;
    $3_1 = $8_1 < HEAPF32[$1_1 + 4 >> 2] ? $1_1 : $12_1;
    $8_1 = HEAPF32[$3_1 + 4 >> 2];
    HEAP32[$2_1 + 20 >> 2] = HEAP32[$3_1 + 4 >> 2];
    $3_1 = $7_1 < HEAPF32[$1_1 + 8 >> 2] ? $1_1 : $12_1;
    $7_1 = HEAPF32[$3_1 + 8 >> 2];
    HEAP32[$2_1 + 24 >> 2] = HEAP32[$3_1 + 8 >> 2];
    $1_1 = $1_1 + 36 | 0;
    $14 = $14 + 1 | 0;
    if (($14 | 0) < ($11 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  $7_1 = Math_fround($7_1 + Math_fround(1.0));
  HEAPF32[$0 + 48 >> 2] = $7_1;
  $8_1 = Math_fround($8_1 + Math_fround(1.0));
  HEAPF32[$0 + 44 >> 2] = $8_1;
  $4_1 = Math_fround($4_1 + Math_fround(1.0));
  HEAPF32[$0 + 40 >> 2] = $4_1;
  HEAP32[$0 + 36 >> 2] = 0;
  $6_1 = Math_fround($6_1 - Math_fround(1.0));
  HEAPF32[$0 + 32 >> 2] = $6_1;
  $9_1 = Math_fround($9_1 - Math_fround(1.0));
  HEAPF32[$0 + 28 >> 2] = $9_1;
  $5_1 = Math_fround($5_1 - Math_fround(1.0));
  HEAPF32[$0 + 24 >> 2] = $5_1;
  HEAPF32[$0 - -64 >> 2] = Math_fround(65535.0) / Math_fround($7_1 - $6_1);
  HEAPF32[$0 + 60 >> 2] = Math_fround(65535.0) / Math_fround($8_1 - $9_1);
  HEAPF32[$0 + 56 >> 2] = Math_fround(65535.0) / Math_fround($4_1 - $5_1);
 }
 
 function $82($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0);
  $11 = $2_1 - $1_1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($2_1 | 0) <= ($1_1 | 0)) {
      $6_1 = Math_fround($11 | 0);
      break label$3;
     }
     $3_1 = (HEAP32[$0 + 12 >> 2] + Math_imul($1_1, 36) | 0) + 24 | 0;
     $8_1 = $11;
     while (1) {
      $4_1 = Math_fround($4_1 + Math_fround(Math_fround(HEAPF32[$3_1 + -4 >> 2] + HEAPF32[$3_1 + -20 >> 2]) * Math_fround(.5)));
      $10 = Math_fround($10 + Math_fround(Math_fround(HEAPF32[$3_1 + -8 >> 2] + HEAPF32[$3_1 + -24 >> 2]) * Math_fround(.5)));
      $5_1 = Math_fround($5_1 + Math_fround(Math_fround(HEAPF32[$3_1 >> 2] + HEAPF32[$3_1 + -16 >> 2]) * Math_fround(.5)));
      $3_1 = $3_1 + 36 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue
      }
      break;
     };
     $6_1 = Math_fround($11 | 0);
     if (($2_1 | 0) > ($1_1 | 0)) {
      break label$2
     }
    }
    $5_1 = Math_fround(0.0);
    $4_1 = Math_fround(0.0);
    break label$1;
   }
   $7_1 = Math_fround(Math_fround(1.0) / $6_1);
   $12_1 = Math_fround($7_1 * $5_1);
   $13_1 = Math_fround($7_1 * $4_1);
   $10 = Math_fround($7_1 * $10);
   $8_1 = $2_1 - $1_1 | 0;
   $3_1 = (HEAP32[$0 + 12 >> 2] + Math_imul($1_1, 36) | 0) + 24 | 0;
   $4_1 = Math_fround(0.0);
   $5_1 = Math_fround(0.0);
   $7_1 = Math_fround(0.0);
   while (1) {
    $9_1 = $5_1;
    $5_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 + -4 >> 2] + HEAPF32[$3_1 + -20 >> 2]) * Math_fround(.5)) - $13_1);
    $5_1 = Math_fround($9_1 + Math_fround($5_1 * $5_1));
    $9_1 = $7_1;
    $7_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 + -8 >> 2] + HEAPF32[$3_1 + -24 >> 2]) * Math_fround(.5)) - $10);
    $7_1 = Math_fround($9_1 + Math_fround($7_1 * $7_1));
    $9_1 = $4_1;
    $4_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 >> 2] + HEAPF32[$3_1 + -16 >> 2]) * Math_fround(.5)) - $12_1);
    $4_1 = Math_fround($9_1 + Math_fround($4_1 * $4_1));
    $3_1 = $3_1 + 36 | 0;
    $8_1 = $8_1 + -1 | 0;
    if ($8_1) {
     continue
    }
    break;
   };
  }
  $6_1 = Math_fround(Math_fround(1.0) / Math_fround($6_1 + Math_fround(-1.0)));
  $5_1 = Math_fround($6_1 * $5_1);
  $4_1 = Math_fround($6_1 * $4_1);
  $6_1 = Math_fround($6_1 * $7_1);
  return $6_1 < $5_1 ? ($5_1 < $4_1 ? 2 : 1) : ($6_1 < $4_1) << 1;
 }
 
 function $83($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20 = 0, $21 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0;
  $5_1 = global$0 + -64 | 0;
  $6_1 = $5_1 + 24 | 0;
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$5_1 + 16 >> 2] = 0;
  HEAP32[$5_1 + 20 >> 2] = 0;
  $4_1 = ($2_1 | 0) <= ($1_1 | 0);
  if (!$4_1) {
   $10 = $2_1 - $1_1 | 0;
   $6_1 = (HEAP32[$0 + 12 >> 2] + Math_imul($1_1, 36) | 0) + 24 | 0;
   while (1) {
    $11 = Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 + -4 >> 2] + HEAPF32[$6_1 + -20 >> 2]) * Math_fround(.5)) + $11);
    $16_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 + -8 >> 2] + HEAPF32[$6_1 + -24 >> 2]) * Math_fround(.5)) + $16_1);
    $17_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 >> 2] + HEAPF32[$6_1 + -16 >> 2]) * Math_fround(.5)) + $17_1);
    $6_1 = $6_1 + 36 | 0;
    $10 = $10 + -1 | 0;
    if ($10) {
     continue
    }
    break;
   };
   HEAPF32[$5_1 + 24 >> 2] = $17_1;
   HEAPF32[$5_1 + 20 >> 2] = $11;
   HEAPF32[$5_1 + 16 >> 2] = $16_1;
  }
  $13_1 = $2_1 - $1_1 | 0;
  $18_1 = Math_fround(Math_fround(1.0) / Math_fround($13_1 | 0));
  HEAPF32[$5_1 + 24 >> 2] = $18_1 * $17_1;
  HEAPF32[$5_1 + 20 >> 2] = $18_1 * $11;
  HEAPF32[$5_1 + 16 >> 2] = $18_1 * $16_1;
  $6_1 = $1_1;
  if (!$4_1) {
   $3_1 = $3_1 << 2;
   $11 = HEAPF32[$3_1 + ($5_1 + 16 | 0) >> 2];
   $10 = Math_imul($1_1, 36) + 16 | 0;
   $23_1 = $3_1 + $5_1 | 0;
   $12_1 = $5_1 + 48 | 0;
   $3_1 = $13_1;
   while (1) {
    HEAP32[$5_1 + 12 >> 2] = 0;
    $9_1 = HEAP32[$0 + 12 >> 2];
    $4_1 = $9_1 + $10 | 0;
    $8_1 = $4_1 + 8 | 0;
    HEAPF32[$5_1 + 8 >> 2] = Math_fround(HEAPF32[$8_1 >> 2] + HEAPF32[$4_1 + -8 >> 2]) * Math_fround(.5);
    HEAPF32[$5_1 + 4 >> 2] = Math_fround(HEAPF32[$4_1 + 4 >> 2] + HEAPF32[$4_1 + -12 >> 2]) * Math_fround(.5);
    $7_1 = $4_1 + -16 | 0;
    HEAPF32[$5_1 >> 2] = Math_fround(HEAPF32[$4_1 >> 2] + HEAPF32[$7_1 >> 2]) * Math_fround(.5);
    if (!!(HEAPF32[$23_1 >> 2] > $11)) {
     $24_1 = HEAP32[$7_1 >> 2];
     $25 = HEAP32[$7_1 + 4 >> 2];
     $22_1 = Math_imul($6_1, 36);
     $9_1 = $9_1 + $22_1 | 0;
     $19_1 = HEAP32[$9_1 + 4 >> 2];
     HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $19_1;
     $26_1 = HEAP32[$4_1 >> 2];
     $19_1 = HEAP32[$4_1 + 4 >> 2];
     $14 = $9_1 + 16 | 0;
     $20 = HEAP32[$14 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$14 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $20;
     $14 = HEAP32[$8_1 >> 2];
     $20 = HEAP32[$8_1 + 4 >> 2];
     $15_1 = $9_1 + 24 | 0;
     $21 = HEAP32[$15_1 + 4 >> 2];
     HEAP32[$8_1 >> 2] = HEAP32[$15_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $21;
     $4_1 = $4_1 + 16 | 0;
     $8_1 = HEAP32[$4_1 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$9_1 + 32 >> 2];
     $4_1 = $7_1 + 8 | 0;
     $15_1 = HEAP32[$4_1 >> 2];
     $21 = HEAP32[$4_1 + 4 >> 2];
     $7_1 = $9_1 + 8 | 0;
     $9_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $9_1;
     HEAP32[$12_1 >> 2] = $26_1;
     HEAP32[$12_1 + 4 >> 2] = $19_1;
     $4_1 = $12_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = $14;
     HEAP32[$4_1 + 4 >> 2] = $20;
     $7_1 = $5_1 + 40 | 0;
     $4_1 = $7_1;
     HEAP32[$4_1 >> 2] = $15_1;
     HEAP32[$4_1 + 4 >> 2] = $21;
     $4_1 = HEAP32[$0 + 12 >> 2] + $22_1 | 0;
     HEAP32[$4_1 + 32 >> 2] = $8_1;
     HEAP32[$5_1 + 32 >> 2] = $24_1;
     HEAP32[$5_1 + 36 >> 2] = $25;
     $8_1 = HEAP32[$5_1 + 36 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$5_1 + 32 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $8_1;
     $8_1 = HEAP32[$7_1 + 4 >> 2];
     $9_1 = $4_1 + 8 | 0;
     HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $8_1;
     $7_1 = HEAP32[$12_1 + 4 >> 2];
     $8_1 = $4_1 + 16 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $7_1;
     $7_1 = $5_1 + 56 | 0;
     $8_1 = HEAP32[$7_1 + 4 >> 2];
     $4_1 = $4_1 + 24 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $8_1;
     $6_1 = $6_1 + 1 | 0;
    }
    $10 = $10 + 36 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   };
  }
  $0 = ($13_1 >> 1) + $1_1 | 0;
  $3_1 = $0;
  $0 = ($13_1 | 0) / 3 | 0;
  return ($6_1 | 0) >= (($0 ^ -1) + $2_1 | 0) ? $3_1 : ($6_1 | 0) <= ($0 + $1_1 | 0) ? $3_1 : $6_1;
 }
 
 function $84($0, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, $11 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20 = Math_fround(0), $21 = 0;
  $11 = global$0 - 32 | 0;
  global$0 = $11;
  $19_1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $19_1 + 1;
  $9_1 = $3_1 - $2_1 | 0;
  label$1 : {
   if (($9_1 | 0) == 1) {
    $14 = HEAPF32[$0 + 48 >> 2];
    $4_1 = HEAPF32[$0 + 32 >> 2];
    $1_1 = HEAP32[$1_1 + 12 >> 2] + Math_imul($2_1, 36) | 0;
    $5_1 = HEAPF32[$1_1 + 8 >> 2];
    $5_1 = $5_1 < $4_1 ? $4_1 : $5_1;
    $16_1 = HEAPF32[$0 - -64 >> 2];
    $5_1 = Math_fround(Math_fround(Math_fround(($14 < $5_1 ? $14 : $5_1) - $4_1) * $16_1) + Math_fround(.5));
    label$3 : {
     if ($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0)) {
      $9_1 = ~~$5_1 >>> 0;
      break label$3;
     }
     $9_1 = 0;
    }
    $6_1 = HEAPF32[$1_1 >> 2];
    $8_1 = HEAPF32[$1_1 + 4 >> 2];
    $2_1 = HEAP32[$0 + 16 >> 2] + ($19_1 << 4) | 0;
    HEAP16[$2_1 + 4 >> 1] = $9_1;
    $3_1 = $2_1;
    $7_1 = HEAPF32[$0 + 44 >> 2];
    $5_1 = HEAPF32[$0 + 28 >> 2];
    $8_1 = $8_1 < $5_1 ? $5_1 : $8_1;
    $17_1 = HEAPF32[$0 + 60 >> 2];
    $8_1 = Math_fround(Math_fround(Math_fround(($7_1 < $8_1 ? $7_1 : $8_1) - $5_1) * $17_1) + Math_fround(.5));
    label$5 : {
     if ($8_1 < Math_fround(4294967296.0) & $8_1 >= Math_fround(0.0)) {
      $10 = ~~$8_1 >>> 0;
      break label$5;
     }
     $10 = 0;
    }
    HEAP16[$3_1 + 2 >> 1] = $10;
    $3_1 = $2_1;
    $12_1 = HEAPF32[$0 + 40 >> 2];
    $8_1 = HEAPF32[$0 + 24 >> 2];
    $6_1 = $6_1 < $8_1 ? $8_1 : $6_1;
    $20 = HEAPF32[$0 + 56 >> 2];
    $6_1 = Math_fround(Math_fround(Math_fround(($12_1 < $6_1 ? $12_1 : $6_1) - $8_1) * $20) + Math_fround(.5));
    label$7 : {
     if ($6_1 < Math_fround(4294967296.0) & $6_1 >= Math_fround(0.0)) {
      $0 = ~~$6_1 >>> 0;
      break label$7;
     }
     $0 = 0;
    }
    HEAP16[$3_1 >> 1] = $0;
    $6_1 = HEAPF32[$1_1 + 24 >> 2];
    $6_1 = $6_1 < $4_1 ? $4_1 : $6_1;
    $4_1 = Math_fround(Math_fround($16_1 * Math_fround(($14 < $6_1 ? $14 : $6_1) - $4_1)) + Math_fround(.5));
    label$9 : {
     if ($4_1 < Math_fround(4294967296.0) & $4_1 >= Math_fround(0.0)) {
      $9_1 = ~~$4_1 >>> 0;
      break label$9;
     }
     $9_1 = 0;
    }
    $4_1 = HEAPF32[$1_1 + 16 >> 2];
    $14 = HEAPF32[$1_1 + 20 >> 2];
    HEAP16[$2_1 + 10 >> 1] = $9_1;
    $0 = $2_1 + 8 | 0;
    $14 = $14 < $5_1 ? $5_1 : $14;
    $5_1 = Math_fround(Math_fround($17_1 * Math_fround(($7_1 < $14 ? $7_1 : $14) - $5_1)) + Math_fround(.5));
    label$11 : {
     if ($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0)) {
      $3_1 = ~~$5_1 >>> 0;
      break label$11;
     }
     $3_1 = 0;
    }
    HEAP16[$0 >> 1] = $3_1;
    $0 = $2_1;
    $4_1 = $4_1 < $8_1 ? $8_1 : $4_1;
    $4_1 = Math_fround(Math_fround($20 * Math_fround(($12_1 < $4_1 ? $12_1 : $4_1) - $8_1)) + Math_fround(.5));
    label$13 : {
     if ($4_1 < Math_fround(4294967296.0) & $4_1 >= Math_fround(0.0)) {
      $3_1 = ~~$4_1 >>> 0;
      break label$13;
     }
     $3_1 = 0;
    }
    HEAP16[$0 + 6 >> 1] = $3_1;
    HEAP32[$2_1 + 12 >> 2] = HEAP32[$1_1 + 32 >> 2];
    break label$1;
   }
   $21 = $83($1_1, $2_1, $3_1, $82($1_1, $2_1, $3_1));
   HEAP32[$11 + 24 >> 2] = -8388609;
   HEAP32[$11 + 16 >> 2] = -8388609;
   HEAP32[$11 + 20 >> 2] = -8388609;
   HEAP32[$11 + 8 >> 2] = 2139095039;
   HEAP32[$11 >> 2] = 2139095039;
   HEAP32[$11 + 4 >> 2] = 2139095039;
   label$15 : {
    if (($3_1 | 0) <= ($2_1 | 0)) {
     $4_1 = Math_fround(3402823466385288598117041.0e14);
     $5_1 = Math_fround(-3402823466385288598117041.0e14);
     $8_1 = Math_fround(-3402823466385288598117041.0e14);
     $7_1 = Math_fround(-3402823466385288598117041.0e14);
     $14 = Math_fround(3402823466385288598117041.0e14);
     $12_1 = Math_fround(3402823466385288598117041.0e14);
     break label$15;
    }
    $18_1 = $11 + 16 | 0;
    $10 = (HEAP32[$1_1 + 12 >> 2] + Math_imul($2_1, 36) | 0) + 16 | 0;
    $4_1 = Math_fround(3402823466385288598117041.0e14);
    $5_1 = Math_fround(-3402823466385288598117041.0e14);
    $8_1 = Math_fround(-3402823466385288598117041.0e14);
    $7_1 = Math_fround(-3402823466385288598117041.0e14);
    $14 = Math_fround(3402823466385288598117041.0e14);
    $12_1 = Math_fround(3402823466385288598117041.0e14);
    while (1) {
     $15_1 = $10 + -16 | 0;
     $6_1 = HEAPF32[$15_1 >> 2];
     $12_1 = $12_1 > $6_1 ? $6_1 : $12_1;
     HEAPF32[$11 >> 2] = $12_1;
     $13_1 = $14 > HEAPF32[$10 + -12 >> 2] ? $15_1 : $11;
     $14 = HEAPF32[$13_1 + 4 >> 2];
     HEAP32[$11 + 4 >> 2] = HEAP32[$13_1 + 4 >> 2];
     $15_1 = $4_1 > HEAPF32[$10 + -8 >> 2] ? $15_1 : $11;
     $4_1 = HEAPF32[$15_1 + 8 >> 2];
     HEAP32[$11 + 8 >> 2] = HEAP32[$15_1 + 8 >> 2];
     $6_1 = HEAPF32[$10 >> 2];
     $7_1 = $7_1 < $6_1 ? $6_1 : $7_1;
     HEAPF32[$11 + 16 >> 2] = $7_1;
     $15_1 = $8_1 < HEAPF32[$10 + 4 >> 2] ? $10 : $18_1;
     $8_1 = HEAPF32[$15_1 + 4 >> 2];
     HEAP32[$11 + 20 >> 2] = HEAP32[$15_1 + 4 >> 2];
     $15_1 = $5_1 < HEAPF32[$10 + 8 >> 2] ? $10 : $18_1;
     $5_1 = HEAPF32[$15_1 + 8 >> 2];
     HEAP32[$11 + 24 >> 2] = HEAP32[$15_1 + 8 >> 2];
     $10 = $10 + 36 | 0;
     $9_1 = $9_1 + -1 | 0;
     if ($9_1) {
      continue
     }
     break;
    };
   }
   $15_1 = $19_1 << 4;
   $18_1 = $0 + 16 | 0;
   $10 = $15_1 + HEAP32[$18_1 >> 2] | 0;
   $9_1 = $10;
   $17_1 = HEAPF32[$0 + 56 >> 2];
   $16_1 = HEAPF32[$0 + 40 >> 2];
   $6_1 = HEAPF32[$0 + 24 >> 2];
   $7_1 = $7_1 < $6_1 ? $6_1 : $7_1;
   $7_1 = Math_fround(Math_fround($17_1 * Math_fround(($16_1 < $7_1 ? $16_1 : $7_1) - $6_1)) + Math_fround(.5));
   label$18 : {
    if ($7_1 < Math_fround(4294967296.0) & $7_1 >= Math_fround(0.0)) {
     $13_1 = ~~$7_1 >>> 0;
     break label$18;
    }
    $13_1 = 0;
   }
   HEAP16[$9_1 + 6 >> 1] = $13_1;
   $9_1 = $10;
   $7_1 = $12_1 < $6_1 ? $6_1 : $12_1;
   $7_1 = Math_fround(Math_fround(Math_fround(($16_1 < $7_1 ? $16_1 : $7_1) - $6_1) * $17_1) + Math_fround(.5));
   label$20 : {
    if ($7_1 < Math_fround(4294967296.0) & $7_1 >= Math_fround(0.0)) {
     $13_1 = ~~$7_1 >>> 0;
     break label$20;
    }
    $13_1 = 0;
   }
   HEAP16[$9_1 >> 1] = $13_1;
   $9_1 = $10 + 10 | 0;
   $16_1 = HEAPF32[$0 - -64 >> 2];
   $12_1 = HEAPF32[$0 + 48 >> 2];
   $7_1 = HEAPF32[$0 + 32 >> 2];
   $5_1 = $5_1 < $7_1 ? $7_1 : $5_1;
   $5_1 = Math_fround(Math_fround($16_1 * Math_fround(($12_1 < $5_1 ? $12_1 : $5_1) - $7_1)) + Math_fround(.5));
   label$22 : {
    if ($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0)) {
     $13_1 = ~~$5_1 >>> 0;
     break label$22;
    }
    $13_1 = 0;
   }
   HEAP16[$9_1 >> 1] = $13_1;
   $9_1 = $10 + 8 | 0;
   $17_1 = HEAPF32[$0 + 60 >> 2];
   $6_1 = HEAPF32[$0 + 44 >> 2];
   $5_1 = HEAPF32[$0 + 28 >> 2];
   $8_1 = $8_1 < $5_1 ? $5_1 : $8_1;
   $8_1 = Math_fround(Math_fround($17_1 * Math_fround(($6_1 < $8_1 ? $6_1 : $8_1) - $5_1)) + Math_fround(.5));
   label$24 : {
    if ($8_1 < Math_fround(4294967296.0) & $8_1 >= Math_fround(0.0)) {
     $13_1 = ~~$8_1 >>> 0;
     break label$24;
    }
    $13_1 = 0;
   }
   HEAP16[$9_1 >> 1] = $13_1;
   $9_1 = $10;
   $4_1 = $4_1 < $7_1 ? $7_1 : $4_1;
   $4_1 = Math_fround(Math_fround(Math_fround(($12_1 < $4_1 ? $12_1 : $4_1) - $7_1) * $16_1) + Math_fround(.5));
   label$26 : {
    if ($4_1 < Math_fround(4294967296.0) & $4_1 >= Math_fround(0.0)) {
     $13_1 = ~~$4_1 >>> 0;
     break label$26;
    }
    $13_1 = 0;
   }
   HEAP16[$9_1 + 4 >> 1] = $13_1;
   $4_1 = $14 < $5_1 ? $5_1 : $14;
   $4_1 = Math_fround(Math_fround(Math_fround(($6_1 < $4_1 ? $6_1 : $4_1) - $5_1) * $17_1) + Math_fround(.5));
   label$28 : {
    if ($4_1 < Math_fround(4294967296.0) & $4_1 >= Math_fround(0.0)) {
     $9_1 = ~~$4_1 >>> 0;
     break label$28;
    }
    $9_1 = 0;
   }
   HEAP16[$10 + 2 >> 1] = $9_1;
   $84($0, $1_1, $2_1, $21);
   $84($0, $1_1, $21, $3_1);
   HEAP32[($15_1 + HEAP32[$18_1 >> 2] | 0) + 12 >> 2] = $19_1 - HEAP32[$0 >> 2];
  }
  global$0 = $11 + 32 | 0;
 }
 
 function $85($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $81($0, $1_1);
  HEAP32[$0 >> 2] = 0;
  $2_1 = HEAP32[$0 + 8 >> 2];
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $9_1 = $4_1 << 1;
  if (($2_1 | 0) < ($9_1 | 0)) {
   if (HEAP32[$0 + 12 >> 2] < ($9_1 | 0)) {
    label$3 : {
     if (!$4_1) {
      $3_1 = $2_1;
      break label$3;
     }
     $11 = $79($4_1 << 5);
     $3_1 = HEAP32[$0 + 8 >> 2];
    }
    if (($3_1 | 0) >= 1) {
     while (1) {
      $7_1 = HEAP32[$0 + 16 >> 2] + $5_1 | 0;
      $10 = HEAP32[$7_1 + 4 >> 2];
      $6_1 = $5_1 + $11 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $10;
      $7_1 = $7_1 + 8 | 0;
      $10 = HEAP32[$7_1 + 4 >> 2];
      $6_1 = $6_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $10;
      $5_1 = $5_1 + 16 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       continue
      }
      break;
     }
    }
    $3_1 = HEAP32[$0 + 16 >> 2];
    if ($3_1) {
     if (HEAPU8[$0 + 20 | 0]) {
      $80($3_1)
     }
     HEAP32[$0 + 16 >> 2] = 0;
    }
    HEAP32[$0 + 16 >> 2] = $11;
    HEAP32[$0 + 12 >> 2] = $9_1;
    HEAP8[$0 + 20 | 0] = 1;
   }
   $5_1 = $2_1 << 4;
   $3_1 = $2_1 - ($4_1 << 1) | 0;
   while (1) {
    $4_1 = HEAP32[$8_1 + 4 >> 2];
    $2_1 = HEAP32[$0 + 16 >> 2] + $5_1 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    HEAP32[$2_1 + 8 >> 2] = HEAP32[$8_1 + 8 >> 2];
    HEAP32[$2_1 + 12 >> 2] = 0;
    $5_1 = $5_1 + 16 | 0;
    $2_1 = $3_1 + 1 | 0;
    $4_1 = $2_1 >>> 0 >= $3_1 >>> 0;
    $3_1 = $2_1;
    if ($4_1) {
     continue
    }
    break;
   };
   $4_1 = HEAP32[$1_1 + 4 >> 2];
  }
  HEAP32[$0 + 8 >> 2] = $9_1;
  $84($0, $1_1, 0, $4_1);
  global$0 = $8_1 + 16 | 0;
 }
 
 function $86($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = 0, $21 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$0 >> 2];
  if ($1_1) {
   $20 = $1_1 << 4;
   $21 = $1_1 + 1 | 0;
   $22_1 = HEAP32[$0 + 16 >> 2];
   $23_1 = $2_1 + 16 | 0;
   $24_1 = $2_1 + 48 | 0;
   while (1) {
    $7_1 = $20 + $22_1 | 0;
    $1_1 = HEAP32[$7_1 + -4 >> 2];
    label$3 : {
     if (($1_1 | 0) >= 0) {
      $7_1 = HEAP32[$0 + 72 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 16 >> 2]]($7_1, $1_1, $2_1 + 32 | 0);
      $8_1 = HEAPF32[$2_1 + 32 >> 2];
      $4_1 = HEAPF32[$2_1 + 36 >> 2];
      $22_1 = HEAP32[$0 + 16 >> 2];
      $7_1 = $22_1 + $20 | 0;
      $1_1 = $7_1 + -12 | 0;
      $9_1 = HEAPF32[$0 + 48 >> 2];
      $5_1 = HEAPF32[$0 + 32 >> 2];
      $6_1 = HEAPF32[$2_1 + 40 >> 2];
      $6_1 = $6_1 < $5_1 ? $5_1 : $6_1;
      $14 = HEAPF32[$0 + 64 >> 2];
      $6_1 = Math_fround(Math_fround(Math_fround(($9_1 < $6_1 ? $9_1 : $6_1) - $5_1) * $14) + Math_fround(.5));
      label$5 : {
       if ($6_1 < Math_fround(4294967296.0) & $6_1 >= Math_fround(0.0)) {
        $3_1 = ~~$6_1 >>> 0;
        break label$5;
       }
       $3_1 = 0;
      }
      HEAP16[$1_1 >> 1] = $3_1;
      $1_1 = $7_1 + -14 | 0;
      $11 = HEAPF32[$0 + 44 >> 2];
      $6_1 = HEAPF32[$0 + 28 >> 2];
      $4_1 = $4_1 < $6_1 ? $6_1 : $4_1;
      $15_1 = HEAPF32[$0 + 60 >> 2];
      $4_1 = Math_fround(Math_fround(Math_fround(($11 < $4_1 ? $11 : $4_1) - $6_1) * $15_1) + Math_fround(.5));
      label$7 : {
       if ($4_1 < Math_fround(4294967296.0) & $4_1 >= Math_fround(0.0)) {
        $3_1 = ~~$4_1 >>> 0;
        break label$7;
       }
       $3_1 = 0;
      }
      HEAP16[$1_1 >> 1] = $3_1;
      $1_1 = $7_1 + -16 | 0;
      $10 = HEAPF32[$0 + 40 >> 2];
      $4_1 = HEAPF32[$0 + 24 >> 2];
      $8_1 = $8_1 < $4_1 ? $4_1 : $8_1;
      $16_1 = HEAPF32[$0 + 56 >> 2];
      $8_1 = Math_fround(Math_fround(Math_fround(($10 < $8_1 ? $10 : $8_1) - $4_1) * $16_1) + Math_fround(.5));
      label$9 : {
       if ($8_1 < Math_fround(4294967296.0) & $8_1 >= Math_fround(0.0)) {
        $3_1 = ~~$8_1 >>> 0;
        break label$9;
       }
       $3_1 = 0;
      }
      HEAP16[$1_1 >> 1] = $3_1;
      $8_1 = HEAPF32[$2_1 + 48 >> 2];
      $8_1 = $8_1 < $4_1 ? $4_1 : $8_1;
      $4_1 = Math_fround(Math_fround($16_1 * Math_fround(($10 < $8_1 ? $10 : $8_1) - $4_1)) + Math_fround(.5));
      label$11 : {
       if ($4_1 < Math_fround(4294967296.0) & $4_1 >= Math_fround(0.0)) {
        $1_1 = ~~$4_1 >>> 0;
        break label$11;
       }
       $1_1 = 0;
      }
      $4_1 = HEAPF32[$2_1 + 56 >> 2];
      $10 = HEAPF32[$2_1 + 52 >> 2];
      HEAP16[$7_1 + -10 >> 1] = $1_1;
      $1_1 = $7_1 + -8 | 0;
      $10 = $10 < $6_1 ? $6_1 : $10;
      $6_1 = Math_fround(Math_fround($15_1 * Math_fround(($11 < $10 ? $11 : $10) - $6_1)) + Math_fround(.5));
      label$13 : {
       if ($6_1 < Math_fround(4294967296.0) & $6_1 >= Math_fround(0.0)) {
        $3_1 = ~~$6_1 >>> 0;
        break label$13;
       }
       $3_1 = 0;
      }
      HEAP16[$1_1 >> 1] = $3_1;
      $1_1 = $7_1 + -6 | 0;
      $6_1 = $4_1 < $5_1 ? $5_1 : $4_1;
      $5_1 = Math_fround(Math_fround($14 * Math_fround(($9_1 < $6_1 ? $9_1 : $6_1) - $5_1)) + Math_fround(.5));
      label$15 : {
       if ($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0)) {
        $7_1 = ~~$5_1 >>> 0;
        break label$15;
       }
       $7_1 = 0;
      }
      HEAP16[$1_1 >> 1] = $7_1;
      break label$3;
     }
     HEAP32[$2_1 + 56 >> 2] = -8388609;
     HEAP32[$2_1 + 48 >> 2] = -8388609;
     HEAP32[$2_1 + 52 >> 2] = -8388609;
     HEAP32[$2_1 + 36 >> 2] = 2139095039;
     HEAP32[$2_1 + 40 >> 2] = 2139095039;
     $1_1 = HEAPU16[$7_1 >> 1];
     $3_1 = HEAPU16[$7_1 + 2 >> 1];
     $17_1 = HEAPU16[$7_1 + 4 >> 1];
     HEAP32[$2_1 + 12 >> 2] = 0;
     $14 = HEAPF32[$0 + 64 >> 2];
     $11 = HEAPF32[$0 + 32 >> 2];
     $9_1 = Math_fround(Math_fround(Math_fround($17_1 >>> 0) / $14) + $11);
     HEAPF32[$2_1 + 8 >> 2] = $9_1;
     $15_1 = HEAPF32[$0 + 60 >> 2];
     $10 = HEAPF32[$0 + 28 >> 2];
     $6_1 = Math_fround(Math_fround(Math_fround($3_1 >>> 0) / $15_1) + $10);
     HEAPF32[$2_1 + 4 >> 2] = $6_1;
     $16_1 = HEAPF32[$0 + 56 >> 2];
     $8_1 = HEAPF32[$0 + 24 >> 2];
     $5_1 = Math_fround(Math_fround(Math_fround($1_1 >>> 0) / $16_1) + $8_1);
     HEAPF32[$2_1 >> 2] = $5_1;
     $1_1 = HEAPU16[$7_1 + 6 >> 1];
     $3_1 = HEAPU16[$7_1 + 8 >> 1];
     $17_1 = HEAPU16[$7_1 + 10 >> 1];
     HEAP32[$2_1 + 28 >> 2] = 0;
     $13_1 = Math_fround($11 + Math_fround(Math_fround($17_1 >>> 0) / $14));
     HEAPF32[$2_1 + 24 >> 2] = $13_1;
     $19_1 = Math_fround($10 + Math_fround(Math_fround($3_1 >>> 0) / $15_1));
     HEAPF32[$2_1 + 20 >> 2] = $19_1;
     $4_1 = Math_fround($8_1 + Math_fround(Math_fround($1_1 >>> 0) / $16_1));
     HEAPF32[$2_1 + 16 >> 2] = $4_1;
     $18_1 = $5_1 < Math_fround(3402823466385288598117041.0e14) ? $5_1 : Math_fround(3402823466385288598117041.0e14);
     HEAPF32[$2_1 + 32 >> 2] = $18_1;
     $1_1 = $6_1 < Math_fround(3402823466385288598117041.0e14) ? $2_1 : $2_1 + 32 | 0;
     $6_1 = HEAPF32[$1_1 + 4 >> 2];
     $1_1 = HEAP32[$1_1 + 4 >> 2];
     $3_1 = $9_1 < Math_fround(3402823466385288598117041.0e14) ? $2_1 : $2_1 + 32 | 0;
     $5_1 = HEAPF32[$3_1 + 8 >> 2];
     HEAP32[$2_1 + 40 >> 2] = HEAP32[$3_1 + 8 >> 2];
     $12_1 = $4_1 > Math_fround(-3402823466385288598117041.0e14) ? $4_1 : Math_fround(-3402823466385288598117041.0e14);
     HEAPF32[$2_1 + 48 >> 2] = $12_1;
     HEAP32[$2_1 + 36 >> 2] = $1_1;
     $1_1 = HEAP32[$7_1 + 12 >> 2];
     $3_1 = $19_1 > Math_fround(-3402823466385288598117041.0e14) ? $23_1 : $24_1;
     $4_1 = HEAPF32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 52 >> 2] = HEAP32[$3_1 + 4 >> 2];
     $3_1 = $13_1 > Math_fround(-3402823466385288598117041.0e14) ? $23_1 : $24_1;
     $9_1 = HEAPF32[$3_1 + 8 >> 2];
     HEAP32[$2_1 + 56 >> 2] = HEAP32[$3_1 + 8 >> 2];
     $1_1 = ((($1_1 | 0) > -1 ? $1_1 : -1) - $1_1 | 0) + $21 | 0;
     if ($1_1) {
      $1_1 = ($1_1 << 4) + $22_1 | 0;
      $3_1 = HEAPU16[$1_1 + 2 >> 1];
      $17_1 = HEAPU16[$1_1 + 4 >> 1];
      $29_1 = HEAPU16[$1_1 >> 1];
      HEAP32[$2_1 + 12 >> 2] = 0;
      $13_1 = Math_fround(Math_fround(Math_fround($29_1 >>> 0) / $16_1) + $8_1);
      HEAPF32[$2_1 >> 2] = $13_1;
      $25 = Math_fround(Math_fround(Math_fround($17_1 >>> 0) / $14) + $11);
      HEAPF32[$2_1 + 8 >> 2] = $25;
      $26_1 = Math_fround(Math_fround(Math_fround($3_1 >>> 0) / $15_1) + $10);
      HEAPF32[$2_1 + 4 >> 2] = $26_1;
      $3_1 = HEAPU16[$1_1 + 6 >> 1];
      $17_1 = HEAPU16[$1_1 + 8 >> 1];
      $1_1 = HEAPU16[$1_1 + 10 >> 1];
      HEAP32[$2_1 + 28 >> 2] = 0;
      $27_1 = Math_fround($11 + Math_fround(Math_fround($1_1 >>> 0) / $14));
      HEAPF32[$2_1 + 24 >> 2] = $27_1;
      $28_1 = Math_fround($10 + Math_fround(Math_fround($17_1 >>> 0) / $15_1));
      HEAPF32[$2_1 + 20 >> 2] = $28_1;
      $19_1 = Math_fround($8_1 + Math_fround(Math_fround($3_1 >>> 0) / $16_1));
      HEAPF32[$2_1 + 16 >> 2] = $19_1;
      $1_1 = $26_1 < $6_1 ? $2_1 : $2_1 + 32 | 0;
      $6_1 = HEAPF32[$1_1 + 4 >> 2];
      $1_1 = HEAP32[$1_1 + 4 >> 2];
      $3_1 = $25 < $5_1 ? $2_1 : $2_1 + 32 | 0;
      $5_1 = HEAPF32[$3_1 + 8 >> 2];
      HEAP32[$2_1 + 40 >> 2] = HEAP32[$3_1 + 8 >> 2];
      $12_1 = $12_1 < $19_1 ? $19_1 : $12_1;
      HEAPF32[$2_1 + 48 >> 2] = $12_1;
      $18_1 = $18_1 > $13_1 ? $13_1 : $18_1;
      HEAPF32[$2_1 + 32 >> 2] = $18_1;
      HEAP32[$2_1 + 36 >> 2] = $1_1;
      $1_1 = $28_1 > $4_1 ? $23_1 : $24_1;
      $4_1 = HEAPF32[$1_1 + 4 >> 2];
      HEAP32[$2_1 + 52 >> 2] = HEAP32[$1_1 + 4 >> 2];
      $1_1 = $27_1 > $9_1 ? $23_1 : $24_1;
      $9_1 = HEAPF32[$1_1 + 8 >> 2];
      HEAP32[$2_1 + 56 >> 2] = HEAP32[$1_1 + 8 >> 2];
     }
     $1_1 = $7_1 + -6 | 0;
     $13_1 = HEAPF32[$0 + 48 >> 2];
     $9_1 = $9_1 < $11 ? $11 : $9_1;
     $9_1 = Math_fround(Math_fround($14 * Math_fround(($13_1 < $9_1 ? $13_1 : $9_1) - $11)) + Math_fround(.5));
     label$18 : {
      if ($9_1 < Math_fround(4294967296.0) & $9_1 >= Math_fround(0.0)) {
       $3_1 = ~~$9_1 >>> 0;
       break label$18;
      }
      $3_1 = 0;
     }
     HEAP16[$1_1 >> 1] = $3_1;
     $1_1 = $7_1 + -8 | 0;
     $9_1 = HEAPF32[$0 + 44 >> 2];
     $4_1 = $4_1 < $10 ? $10 : $4_1;
     $4_1 = Math_fround(Math_fround($15_1 * Math_fround(($9_1 < $4_1 ? $9_1 : $4_1) - $10)) + Math_fround(.5));
     label$20 : {
      if ($4_1 < Math_fround(4294967296.0) & $4_1 >= Math_fround(0.0)) {
       $3_1 = ~~$4_1 >>> 0;
       break label$20;
      }
      $3_1 = 0;
     }
     HEAP16[$1_1 >> 1] = $3_1;
     $1_1 = $7_1 + -10 | 0;
     $4_1 = HEAPF32[$0 + 40 >> 2];
     $12_1 = $12_1 < $8_1 ? $8_1 : $12_1;
     $12_1 = Math_fround(Math_fround($16_1 * Math_fround(($4_1 < $12_1 ? $4_1 : $12_1) - $8_1)) + Math_fround(.5));
     label$22 : {
      if ($12_1 < Math_fround(4294967296.0) & $12_1 >= Math_fround(0.0)) {
       $3_1 = ~~$12_1 >>> 0;
       break label$22;
      }
      $3_1 = 0;
     }
     HEAP16[$1_1 >> 1] = $3_1;
     $1_1 = $7_1 + -12 | 0;
     $5_1 = $5_1 < $11 ? $11 : $5_1;
     $5_1 = Math_fround(Math_fround(Math_fround(($13_1 < $5_1 ? $13_1 : $5_1) - $11) * $14) + Math_fround(.5));
     label$24 : {
      if ($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0)) {
       $3_1 = ~~$5_1 >>> 0;
       break label$24;
      }
      $3_1 = 0;
     }
     HEAP16[$1_1 >> 1] = $3_1;
     $1_1 = $7_1 + -14 | 0;
     $5_1 = $6_1 < $10 ? $10 : $6_1;
     $5_1 = Math_fround(Math_fround(Math_fround(($9_1 < $5_1 ? $9_1 : $5_1) - $10) * $15_1) + Math_fround(.5));
     label$26 : {
      if ($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0)) {
       $3_1 = ~~$5_1 >>> 0;
       break label$26;
      }
      $3_1 = 0;
     }
     HEAP16[$1_1 >> 1] = $3_1;
     $1_1 = $7_1 + -16 | 0;
     $5_1 = $18_1 < $8_1 ? $8_1 : $18_1;
     $5_1 = Math_fround(Math_fround(Math_fround(($4_1 < $5_1 ? $4_1 : $5_1) - $8_1) * $16_1) + Math_fround(.5));
     label$28 : {
      if ($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0)) {
       $7_1 = ~~$5_1 >>> 0;
       break label$28;
      }
      $7_1 = 0;
     }
     HEAP16[$1_1 >> 1] = $7_1;
    }
    $20 = $20 + -16 | 0;
    $21 = $21 + -1 | 0;
    if (($21 | 0) != 1) {
     continue
    }
    break;
   };
  }
  global$0 = $2_1 - -64 | 0;
 }
 
 function $87($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  HEAP8[$2_1 + 56 | 0] = 1;
  HEAP32[$2_1 + 44 >> 2] = 0;
  HEAP32[$2_1 + 48 >> 2] = 0;
  HEAP32[$2_1 + 52 >> 2] = 0;
  $1_1 = HEAP32[$0 + 72 >> 2];
  $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1) | 0;
  $4_1 = $2_1 + 32 | 0;
  $1_1 = $4_1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $8_1 = $2_1 + 24 | 0;
  $1_1 = $8_1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 16 | 0;
  $1_1 = $3_1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 0;
  label$1 : {
   if (($6_1 | 0) <= 0) {
    HEAP32[$2_1 + 44 >> 2] = $6_1;
    break label$1;
   }
   $1_1 = $79(Math_imul($6_1, 36));
   HEAP32[$1_1 + 32 >> 2] = 0;
   HEAP32[$2_1 + 52 >> 2] = $1_1;
   HEAP32[$2_1 + 48 >> 2] = $6_1;
   HEAP8[$2_1 + 56 | 0] = 1;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $7_1 = $1_1 + 8 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $5_1;
   $3_1 = HEAP32[$2_1 + 12 >> 2];
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 8 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $3_1;
   $3_1 = HEAP32[$2_1 + 28 >> 2];
   HEAP32[$1_1 + 16 >> 2] = HEAP32[$2_1 + 24 >> 2];
   HEAP32[$1_1 + 20 >> 2] = $3_1;
   $3_1 = HEAP32[$4_1 + 4 >> 2];
   $1_1 = $1_1 + 24 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $3_1;
   if (($6_1 | 0) != 1) {
    $7_1 = $6_1 + -1 | 0;
    $4_1 = 36;
    while (1) {
     $5_1 = HEAP32[$2_1 + 12 >> 2];
     $3_1 = HEAP32[$2_1 + 52 >> 2] + $4_1 | 0;
     $1_1 = $3_1;
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 8 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $5_1;
     $5_1 = $2_1 + 16 | 0;
     $9_1 = HEAP32[$5_1 + 4 >> 2];
     $1_1 = $1_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $9_1;
     $1_1 = $8_1;
     $9_1 = HEAP32[$1_1 + 4 >> 2];
     $5_1 = $3_1 + 16 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $9_1;
     $1_1 = $1_1 + 8 | 0;
     $9_1 = HEAP32[$1_1 + 4 >> 2];
     $5_1 = $3_1 + 24 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $9_1;
     HEAP32[$3_1 + 32 >> 2] = 0;
     $4_1 = $4_1 + 36 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue
     }
     break;
    };
   }
   HEAP32[$2_1 + 44 >> 2] = $6_1;
   if (($6_1 | 0) < 1) {
    break label$1
   }
   $1_1 = 0;
   $4_1 = HEAP32[$2_1 + 52 >> 2];
   while (1) {
    $8_1 = HEAP32[$0 + 72 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 16 >> 2]]($8_1, $1_1, $4_1);
    HEAP32[$4_1 + 32 >> 2] = $1_1;
    $4_1 = $4_1 + 36 | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) < ($6_1 | 0)) {
     continue
    }
    break;
   };
  }
  $85($0, $2_1 + 40 | 0);
  $0 = HEAP32[$2_1 + 52 >> 2];
  if ($0) {
   if (HEAPU8[$2_1 + 56 | 0]) {
    $80($0)
   }
   HEAP32[$2_1 + 52 >> 2] = 0;
  }
  global$0 = $2_1 - -64 | 0;
 }
 
 function $88($0, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0, $20 = 0, $21 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0;
  $16_1 = HEAPF32[$0 - -64 >> 2];
  $5_1 = HEAPF32[$0 + 48 >> 2];
  $3_1 = HEAPF32[$0 + 32 >> 2];
  $4_1 = HEAPF32[$1_1 + 24 >> 2];
  $4_1 = $4_1 < $3_1 ? $3_1 : $4_1;
  $4_1 = Math_fround(Math_fround($16_1 * Math_fround(($5_1 < $4_1 ? $5_1 : $4_1) - $3_1)) + Math_fround(.5));
  label$1 : {
   if ($4_1 < Math_fround(4294967296.0) & $4_1 >= Math_fround(0.0)) {
    $17_1 = ~~$4_1 >>> 0;
    break label$1;
   }
   $17_1 = 0;
  }
  $18_1 = HEAPF32[$0 + 60 >> 2];
  $9_1 = HEAPF32[$0 + 44 >> 2];
  $4_1 = HEAPF32[$0 + 28 >> 2];
  $6_1 = HEAPF32[$1_1 + 20 >> 2];
  $6_1 = $6_1 < $4_1 ? $4_1 : $6_1;
  $6_1 = Math_fround(Math_fround($18_1 * Math_fround(($9_1 < $6_1 ? $9_1 : $6_1) - $4_1)) + Math_fround(.5));
  label$3 : {
   if ($6_1 < Math_fround(4294967296.0) & $6_1 >= Math_fround(0.0)) {
    $19_1 = ~~$6_1 >>> 0;
    break label$3;
   }
   $19_1 = 0;
  }
  $6_1 = HEAPF32[$1_1 + 8 >> 2];
  $6_1 = $6_1 < $3_1 ? $3_1 : $6_1;
  $3_1 = Math_fround(Math_fround(Math_fround(($5_1 < $6_1 ? $5_1 : $6_1) - $3_1) * $16_1) + Math_fround(.5));
  label$5 : {
   if ($3_1 < Math_fround(4294967296.0) & $3_1 >= Math_fround(0.0)) {
    $11 = ~~$3_1 >>> 0;
    break label$5;
   }
   $11 = 0;
  }
  $3_1 = HEAPF32[$1_1 + 4 >> 2];
  $3_1 = $3_1 < $4_1 ? $4_1 : $3_1;
  $3_1 = Math_fround(Math_fround(Math_fround(($9_1 < $3_1 ? $9_1 : $3_1) - $4_1) * $18_1) + Math_fround(.5));
  label$7 : {
   if ($3_1 < Math_fround(4294967296.0) & $3_1 >= Math_fround(0.0)) {
    $20 = ~~$3_1 >>> 0;
    break label$7;
   }
   $20 = 0;
  }
  $9_1 = HEAPF32[$0 + 56 >> 2];
  $4_1 = HEAPF32[$0 + 40 >> 2];
  $3_1 = HEAPF32[$0 + 24 >> 2];
  $5_1 = HEAPF32[$1_1 + 16 >> 2];
  $5_1 = $5_1 < $3_1 ? $3_1 : $5_1;
  $5_1 = Math_fround(Math_fround($9_1 * Math_fround(($4_1 < $5_1 ? $4_1 : $5_1) - $3_1)) + Math_fround(.5));
  label$9 : {
   if ($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0)) {
    $21 = ~~$5_1 >>> 0;
    break label$9;
   }
   $21 = 0;
  }
  $5_1 = HEAPF32[$1_1 >> 2];
  $5_1 = $5_1 < $3_1 ? $3_1 : $5_1;
  $3_1 = Math_fround(Math_fround(Math_fround(($4_1 < $5_1 ? $4_1 : $5_1) - $3_1) * $9_1) + Math_fround(.5));
  label$11 : {
   if ($3_1 < Math_fround(4294967296.0) & $3_1 >= Math_fround(0.0)) {
    $22_1 = ~~$3_1 >>> 0;
    break label$11;
   }
   $22_1 = 0;
  }
  $23_1 = HEAP32[$0 >> 2];
  if (($23_1 | 0) >= 1) {
   $1_1 = 0;
   while (1) {
    $24_1 = $1_1 << 4;
    $7_1 = $24_1 + HEAP32[$0 + 16 >> 2] | 0;
    label$15 : {
     if (!(HEAPU16[$7_1 + 4 >> 1] <= $17_1 >>> 0 ? !(HEAPU16[$7_1 >> 1] > $21 >>> 0 | HEAPU16[$7_1 + 6 >> 1] < $22_1 >>> 0 | (HEAPU16[$7_1 + 8 >> 1] < $20 >>> 0 | HEAPU16[$7_1 + 2 >> 1] > $19_1 >>> 0)) : 0)) {
      $25 = HEAP32[$7_1 + 12 >> 2] > -1;
      $26_1 = 0;
      break label$15;
     }
     $12_1 = HEAP32[$7_1 + 12 >> 2];
     $25 = ($12_1 | 0) > -1;
     $7_1 = HEAPU16[$7_1 + 10 >> 1];
     $26_1 = $7_1 >>> 0 >= $11 >>> 0;
     if (($12_1 | 0) < 0 | $7_1 >>> 0 < $11 >>> 0) {
      break label$15
     }
     $8_1 = HEAP32[$2_1 + 4 >> 2];
     label$18 : {
      if (($8_1 | 0) != HEAP32[$2_1 + 8 >> 2]) {
       break label$18
      }
      $10 = $8_1 ? $8_1 << 1 : 1;
      if (($8_1 | 0) >= ($10 | 0)) {
       break label$18
      }
      label$19 : {
       if (!$10) {
        $7_1 = 0;
        break label$19;
       }
       $7_1 = $79($10 << 2);
       $8_1 = HEAP32[$2_1 + 4 >> 2];
      }
      $13_1 = HEAP32[$2_1 + 12 >> 2];
      label$21 : {
       label$22 : {
        if (($8_1 | 0) >= 1) {
         $14 = $7_1;
         $15_1 = $13_1;
         while (1) {
          HEAP32[$14 >> 2] = HEAP32[$15_1 >> 2];
          $14 = $14 + 4 | 0;
          $15_1 = $15_1 + 4 | 0;
          $8_1 = $8_1 + -1 | 0;
          if ($8_1) {
           continue
          }
          break;
         };
         break label$22;
        }
        if (!$13_1) {
         break label$21
        }
       }
       if (HEAPU8[$2_1 + 16 | 0]) {
        $80($13_1)
       }
       HEAP32[$2_1 + 12 >> 2] = 0;
       $8_1 = HEAP32[$2_1 + 4 >> 2];
      }
      HEAP32[$2_1 + 12 >> 2] = $7_1;
      HEAP8[$2_1 + 16 | 0] = 1;
      HEAP32[$2_1 + 8 >> 2] = $10;
     }
     HEAP32[HEAP32[$2_1 + 12 >> 2] + ($8_1 << 2) >> 2] = $12_1;
     HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] + 1;
    }
    $1_1 = ($25 ? 0 : !$26_1) ? $1_1 - HEAP32[(HEAP32[$0 + 16 >> 2] + $24_1 | 0) + 12 >> 2] | 0 : $1_1 + 1 | 0;
    if (($1_1 | 0) < ($23_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $89($0, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = 0, $21 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0);
  $21 = HEAP32[$0 >> 2];
  if (($21 | 0) >= 1) {
   while (1) {
    $14 = $17_1 << 4;
    $5_1 = $14 + HEAP32[$0 + 16 >> 2] | 0;
    $9_1 = HEAPU16[$5_1 + 4 >> 1];
    $11 = HEAPF32[$0 + 64 >> 2];
    $7_1 = HEAPF32[$0 + 32 >> 2];
    $10 = HEAPU16[$5_1 + 10 >> 1];
    $6_1 = HEAPU16[$5_1 + 2 >> 1];
    $12_1 = HEAPF32[$0 + 60 >> 2];
    $8_1 = HEAPF32[$0 + 28 >> 2];
    $15_1 = HEAPU16[$5_1 + 8 >> 1];
    $13_1 = HEAPF32[$0 + 24 >> 2];
    $4_1 = HEAPF32[$0 + 56 >> 2];
    $16_1 = Math_fround($13_1 + Math_fround(Math_fround(HEAPU16[$5_1 + 6 >> 1]) / $4_1));
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $4_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPU16[$5_1 >> 1]) / $4_1) + $13_1) + $16_1) * Math_fround(.5));
        $13_1 = Math_fround(HEAPF32[$2_1 >> 2] - $4_1);
        $16_1 = Math_fround($16_1 - $4_1);
        label$7 : {
         if (Math_fround($13_1 * HEAPF32[$1_1 >> 2]) >= Math_fround(0.0) ? !!(Math_fround(Math_abs($13_1)) > $16_1) : 0) {
          break label$7
         }
         $4_1 = Math_fround(Math_fround(Math_fround($6_1 >>> 0) / $12_1) + $8_1);
         $8_1 = Math_fround($8_1 + Math_fround(Math_fround($15_1 >>> 0) / $12_1));
         $4_1 = Math_fround(Math_fround($4_1 + $8_1) * Math_fround(.5));
         $12_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] - $4_1);
         $8_1 = Math_fround($8_1 - $4_1);
         if (Math_fround($12_1 * HEAPF32[$1_1 + 4 >> 2]) >= Math_fround(0.0) ? !!(Math_fround(Math_abs($12_1)) > $8_1) : 0) {
          break label$7
         }
         $4_1 = Math_fround(Math_fround(Math_fround($9_1 >>> 0) / $11) + $7_1);
         $7_1 = Math_fround($7_1 + Math_fround(Math_fround($10 >>> 0) / $11));
         $4_1 = Math_fround(Math_fround($4_1 + $7_1) * Math_fround(.5));
         $11 = Math_fround(HEAPF32[$2_1 + 8 >> 2] - $4_1);
         $4_1 = Math_fround($7_1 - $4_1);
         $7_1 = HEAPF32[$1_1 + 8 >> 2];
         if (Math_fround($11 * $7_1) >= Math_fround(0.0) ? !!(Math_fround(Math_abs($11)) > $4_1) : 0) {
          break label$7
         }
         $18_1 = HEAPF32[$1_1 + 4 >> 2];
         $22_1 = Math_fround(Math_abs($18_1));
         $23_1 = Math_fround(Math_abs($7_1));
         if (Math_fround(Math_abs(Math_fround(Math_fround($11 * $18_1) - Math_fround($12_1 * $7_1)))) > Math_fround(Math_fround($8_1 * $23_1) + Math_fround($4_1 * $22_1))) {
          break label$7
         }
         $19_1 = HEAPF32[$1_1 >> 2];
         $24_1 = Math_fround(Math_abs($19_1));
         if (!(Math_fround(Math_abs(Math_fround(Math_fround($13_1 * $7_1) - Math_fround($11 * $19_1)))) > Math_fround(Math_fround($16_1 * $23_1) + Math_fround($4_1 * $24_1)))) {
          break label$6
         }
        }
        $5_1 = HEAP32[$5_1 + 12 >> 2] > -1;
        $9_1 = 0;
        break label$5;
       }
       $10 = Math_fround(Math_abs(Math_fround(Math_fround($12_1 * $19_1) - Math_fround($13_1 * $18_1)))) > Math_fround(Math_fround($16_1 * $22_1) + Math_fround($8_1 * $24_1));
       $9_1 = $10 ^ 1;
       $20 = HEAP32[$5_1 + 12 >> 2];
       $5_1 = ($20 | 0) > -1;
       if (($20 | 0) < 0 | $10) {
        break label$5
       }
       $6_1 = HEAP32[$3_1 + 4 >> 2];
       label$11 : {
        if (($6_1 | 0) != HEAP32[$3_1 + 8 >> 2]) {
         break label$11
        }
        $15_1 = $6_1 ? $6_1 << 1 : 1;
        if (($6_1 | 0) >= ($15_1 | 0)) {
         break label$11
        }
        label$12 : {
         if (!$15_1) {
          $14 = 0;
          break label$12;
         }
         $14 = $79($15_1 << 2);
         $6_1 = HEAP32[$3_1 + 4 >> 2];
        }
        $10 = HEAP32[$3_1 + 12 >> 2];
        label$14 : {
         label$15 : {
          if (($6_1 | 0) >= 1) {
           $5_1 = $14;
           $9_1 = $10;
           while (1) {
            HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
            $5_1 = $5_1 + 4 | 0;
            $9_1 = $9_1 + 4 | 0;
            $6_1 = $6_1 + -1 | 0;
            if ($6_1) {
             continue
            }
            break;
           };
           break label$15;
          }
          if (!$10) {
           break label$14
          }
         }
         if (HEAPU8[$3_1 + 16 | 0]) {
          $80($10)
         }
         HEAP32[$3_1 + 12 >> 2] = 0;
         $6_1 = HEAP32[$3_1 + 4 >> 2];
        }
        HEAP32[$3_1 + 12 >> 2] = $14;
        HEAP8[$3_1 + 16 | 0] = 1;
        HEAP32[$3_1 + 8 >> 2] = $15_1;
       }
       HEAP32[HEAP32[$3_1 + 12 >> 2] + ($6_1 << 2) >> 2] = $20;
       HEAP32[$3_1 + 4 >> 2] = HEAP32[$3_1 + 4 >> 2] + 1;
       break label$4;
      }
      if ($5_1 | $9_1) {
       break label$4
      }
      $17_1 = $17_1 - HEAP32[($14 + HEAP32[$0 + 16 >> 2] | 0) + 12 >> 2] | 0;
      break label$3;
     }
     $17_1 = $17_1 + 1 | 0;
    }
    if (($17_1 | 0) < ($21 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $90($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  if (!(!HEAP32[$0 >> 2] | !HEAP32[$2_1 >> 2])) {
   $91($5_1, $1_1, $3_1);
   $92($0, $2_1, $4_1, $5_1, 0, 0, 1);
  }
  global$0 = $5_1 + 112 | 0;
 }
 
 function $91($0, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0);
  $32 = HEAPF32[$1_1 + 52 >> 2];
  $15_1 = HEAPF32[$1_1 + 56 >> 2];
  $16_1 = HEAPF32[$2_1 + 52 >> 2];
  $17_1 = HEAPF32[$2_1 + 56 >> 2];
  $6_1 = HEAPF32[$1_1 + 20 >> 2];
  $7_1 = HEAPF32[$1_1 + 36 >> 2];
  $3_1 = HEAPF32[$2_1 + 20 >> 2];
  $18_1 = HEAPF32[$2_1 + 36 >> 2];
  $4_1 = HEAPF32[$2_1 + 24 >> 2];
  $8_1 = HEAPF32[$1_1 + 24 >> 2];
  $19_1 = HEAPF32[$2_1 + 40 >> 2];
  $9_1 = HEAPF32[$1_1 + 40 >> 2];
  $20 = HEAPF32[$1_1 + 48 >> 2];
  $21 = HEAPF32[$2_1 + 48 >> 2];
  $10 = HEAPF32[$1_1 + 4 >> 2];
  $22_1 = HEAPF32[$2_1 + 4 >> 2];
  $23_1 = HEAPF32[$2_1 + 8 >> 2];
  $11 = HEAPF32[$1_1 + 8 >> 2];
  $5_1 = HEAPF32[$2_1 + 32 >> 2];
  $12_1 = HEAPF32[$1_1 + 32 >> 2];
  $24_1 = HEAPF32[$2_1 >> 2];
  $13_1 = HEAPF32[$1_1 >> 2];
  $25 = HEAPF32[$2_1 + 16 >> 2];
  $14 = HEAPF32[$1_1 + 16 >> 2];
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $26_1 = Math_fround(Math_fround(Math_fround($13_1 * $24_1) + Math_fround($14 * $25)) + Math_fround($12_1 * $5_1));
  HEAPF32[$0 + 16 >> 2] = $26_1;
  $27_1 = Math_fround(Math_fround(Math_fround($11 * $23_1) + Math_fround($8_1 * $4_1)) + Math_fround($9_1 * $19_1));
  HEAPF32[$0 + 56 >> 2] = $27_1;
  $28_1 = Math_fround(Math_fround(Math_fround($11 * $22_1) + Math_fround($8_1 * $3_1)) + Math_fround($9_1 * $18_1));
  HEAPF32[$0 + 52 >> 2] = $28_1;
  $29_1 = Math_fround(Math_fround(Math_fround($11 * $24_1) + Math_fround($8_1 * $25)) + Math_fround($9_1 * $5_1));
  HEAPF32[$0 + 48 >> 2] = $29_1;
  $30 = Math_fround(Math_fround(Math_fround($10 * $23_1) + Math_fround($6_1 * $4_1)) + Math_fround($7_1 * $19_1));
  HEAPF32[$0 + 40 >> 2] = $30;
  $31_1 = Math_fround(Math_fround(Math_fround($10 * $22_1) + Math_fround($6_1 * $3_1)) + Math_fround($7_1 * $18_1));
  HEAPF32[$0 + 36 >> 2] = $31_1;
  $5_1 = Math_fround(Math_fround(Math_fround($10 * $24_1) + Math_fround($6_1 * $25)) + Math_fround($7_1 * $5_1));
  HEAPF32[$0 + 32 >> 2] = $5_1;
  $4_1 = Math_fround(Math_fround(Math_fround($13_1 * $23_1) + Math_fround($14 * $4_1)) + Math_fround($12_1 * $19_1));
  HEAPF32[$0 + 24 >> 2] = $4_1;
  $3_1 = Math_fround(Math_fround(Math_fround($13_1 * $22_1) + Math_fround($14 * $3_1)) + Math_fround($12_1 * $18_1));
  HEAPF32[$0 + 20 >> 2] = $3_1;
  HEAPF32[$0 + 64 >> 2] = Math_fround(Math_abs($26_1)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 104 >> 2] = Math_fround(Math_abs($27_1)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 100 >> 2] = Math_fround(Math_abs($28_1)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 96 >> 2] = Math_fround(Math_abs($29_1)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 88 >> 2] = Math_fround(Math_abs($30)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 84 >> 2] = Math_fround(Math_abs($31_1)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 80 >> 2] = Math_fround(Math_abs($5_1)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 72 >> 2] = Math_fround(Math_abs($4_1)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 68 >> 2] = Math_fround(Math_abs($3_1)) + Math_fround(9.999999974752427e-07);
  $3_1 = Math_fround(-$32);
  HEAPF32[$0 + 8 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $3_1) - Math_fround($11 * $20)) - Math_fround($9_1 * $15_1)) + Math_fround(Math_fround(Math_fround($11 * $21) + Math_fround($8_1 * $16_1)) + Math_fround($9_1 * $17_1));
  HEAPF32[$0 + 4 >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $3_1) - Math_fround($10 * $20)) - Math_fround($7_1 * $15_1)) + Math_fround(Math_fround(Math_fround($10 * $21) + Math_fround($6_1 * $16_1)) + Math_fround($7_1 * $17_1));
  HEAPF32[$0 >> 2] = Math_fround(Math_fround(Math_fround($14 * $3_1) - Math_fround($13_1 * $20)) - Math_fround($12_1 * $15_1)) + Math_fround(Math_fround(Math_fround($13_1 * $21) + Math_fround($14 * $16_1)) + Math_fround($12_1 * $17_1));
 }
 
 function $92($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0;
  $8_1 = global$0 + -64 | 0;
  global$0 = $8_1;
  $11 = $4_1 << 4;
  $7_1 = $11 + HEAP32[$0 + 16 >> 2] | 0;
  $10 = HEAPU16[$7_1 >> 1];
  $9_1 = HEAPU16[$7_1 + 2 >> 1];
  $12_1 = HEAPU16[$7_1 + 4 >> 1];
  HEAP32[$8_1 + 44 >> 2] = 0;
  $13_1 = HEAPF32[$0 - -64 >> 2];
  $14 = HEAPF32[$0 + 32 >> 2];
  HEAPF32[$8_1 + 40 >> 2] = Math_fround(Math_fround($12_1 >>> 0) / $13_1) + $14;
  $15_1 = HEAPF32[$0 + 60 >> 2];
  $16_1 = HEAPF32[$0 + 28 >> 2];
  HEAPF32[$8_1 + 36 >> 2] = Math_fround(Math_fround($9_1 >>> 0) / $15_1) + $16_1;
  $17_1 = HEAPF32[$0 + 56 >> 2];
  $18_1 = HEAPF32[$0 + 24 >> 2];
  HEAPF32[$8_1 + 32 >> 2] = Math_fround(Math_fround($10 >>> 0) / $17_1) + $18_1;
  $10 = HEAPU16[$7_1 + 6 >> 1];
  $9_1 = HEAPU16[$7_1 + 10 >> 1];
  $7_1 = HEAPU16[$7_1 + 8 >> 1];
  HEAP32[$8_1 + 60 >> 2] = 0;
  HEAPF32[$8_1 + 52 >> 2] = $16_1 + Math_fround(Math_fround($7_1 >>> 0) / $15_1);
  HEAPF32[$8_1 + 56 >> 2] = $14 + Math_fround(Math_fround($9_1 >>> 0) / $13_1);
  HEAPF32[$8_1 + 48 >> 2] = $18_1 + Math_fround(Math_fround($10 >>> 0) / $17_1);
  $10 = $5_1 << 4;
  $7_1 = $10 + HEAP32[$1_1 + 16 >> 2] | 0;
  $9_1 = HEAPU16[$7_1 >> 1];
  $12_1 = HEAPU16[$7_1 + 2 >> 1];
  $19_1 = HEAPU16[$7_1 + 4 >> 1];
  HEAP32[$8_1 + 12 >> 2] = 0;
  $13_1 = HEAPF32[$1_1 - -64 >> 2];
  $14 = HEAPF32[$1_1 + 32 >> 2];
  HEAPF32[$8_1 + 8 >> 2] = Math_fround(Math_fround($19_1 >>> 0) / $13_1) + $14;
  $15_1 = HEAPF32[$1_1 + 60 >> 2];
  $16_1 = HEAPF32[$1_1 + 28 >> 2];
  HEAPF32[$8_1 + 4 >> 2] = Math_fround(Math_fround($12_1 >>> 0) / $15_1) + $16_1;
  $17_1 = HEAPF32[$1_1 + 56 >> 2];
  $18_1 = HEAPF32[$1_1 + 24 >> 2];
  HEAPF32[$8_1 >> 2] = Math_fround(Math_fround($9_1 >>> 0) / $17_1) + $18_1;
  $9_1 = HEAPU16[$7_1 + 6 >> 1];
  $12_1 = HEAPU16[$7_1 + 10 >> 1];
  $7_1 = HEAPU16[$7_1 + 8 >> 1];
  HEAP32[$8_1 + 28 >> 2] = 0;
  HEAPF32[$8_1 + 20 >> 2] = $16_1 + Math_fround(Math_fround($7_1 >>> 0) / $15_1);
  HEAPF32[$8_1 + 24 >> 2] = $14 + Math_fround(Math_fround($12_1 >>> 0) / $13_1);
  HEAPF32[$8_1 + 16 >> 2] = $18_1 + Math_fround(Math_fround($9_1 >>> 0) / $17_1);
  label$1 : {
   if (!$93($8_1 + 32 | 0, $8_1, $3_1, $6_1)) {
    break label$1
   }
   $7_1 = HEAP32[(HEAP32[$1_1 + 16 >> 2] + $10 | 0) + 12 >> 2];
   $10 = HEAP32[(HEAP32[$0 + 16 >> 2] + $11 | 0) + 12 >> 2];
   if (($10 | 0) >= 0) {
    if (($7_1 | 0) >= 0) {
     $3_1 = HEAP32[$2_1 + 4 >> 2];
     label$4 : {
      if (($3_1 | 0) != HEAP32[$2_1 + 8 >> 2]) {
       break label$4
      }
      $11 = $3_1 ? $3_1 << 1 : 1;
      if (($3_1 | 0) >= ($11 | 0)) {
       break label$4
      }
      label$5 : {
       if (!$11) {
        $4_1 = 0;
        break label$5;
       }
       $4_1 = $79($11 << 3);
       $3_1 = HEAP32[$2_1 + 4 >> 2];
      }
      $5_1 = HEAP32[$2_1 + 12 >> 2];
      label$7 : {
       label$8 : {
        if (($3_1 | 0) >= 1) {
         $1_1 = $5_1;
         $0 = $4_1;
         $6_1 = $3_1;
         while (1) {
          $9_1 = HEAP32[$1_1 + 4 >> 2];
          HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
          HEAP32[$0 + 4 >> 2] = $9_1;
          $1_1 = $1_1 + 8 | 0;
          $0 = $0 + 8 | 0;
          $6_1 = $6_1 + -1 | 0;
          if ($6_1) {
           continue
          }
          break;
         };
         break label$8;
        }
        if (!$5_1) {
         break label$7
        }
       }
       if (HEAPU8[$2_1 + 16 | 0]) {
        $80($5_1);
        $3_1 = HEAP32[$2_1 + 4 >> 2];
       }
       HEAP32[$2_1 + 12 >> 2] = 0;
      }
      HEAP32[$2_1 + 12 >> 2] = $4_1;
      HEAP8[$2_1 + 16 | 0] = 1;
      HEAP32[$2_1 + 8 >> 2] = $11;
     }
     HEAP32[$2_1 + 4 >> 2] = $3_1 + 1;
     $0 = HEAP32[$2_1 + 12 >> 2] + ($3_1 << 3) | 0;
     HEAP32[$0 + 4 >> 2] = $7_1;
     HEAP32[$0 >> 2] = $10;
     break label$1;
    }
    $6_1 = $5_1 + 1 | 0;
    $92($0, $1_1, $2_1, $3_1, $4_1, $6_1, 0);
    $9_1 = $0;
    $0 = HEAP32[(HEAP32[$1_1 + 16 >> 2] + ($6_1 << 4) | 0) + 12 >> 2];
    $92($9_1, $1_1, $2_1, $3_1, $4_1, ($0 | 0) > -1 ? $5_1 + 2 | 0 : $6_1 - $0 | 0, 0);
    break label$1;
   }
   $6_1 = $4_1 + 1 | 0;
   if (($7_1 | 0) >= 0) {
    $92($0, $1_1, $2_1, $3_1, $6_1, $5_1, 0);
    $9_1 = $0;
    $0 = HEAP32[(HEAP32[$0 + 16 >> 2] + ($6_1 << 4) | 0) + 12 >> 2];
    $92($9_1, $1_1, $2_1, $3_1, ($0 | 0) > -1 ? $4_1 + 2 | 0 : $6_1 - $0 | 0, $5_1, 0);
    break label$1;
   }
   $7_1 = $5_1 + 1 | 0;
   $92($0, $1_1, $2_1, $3_1, $6_1, $7_1, 0);
   $5_1 = $5_1 + 2 | 0;
   $11 = $7_1 << 4;
   $10 = HEAP32[($11 + HEAP32[$1_1 + 16 >> 2] | 0) + 12 >> 2];
   $92($0, $1_1, $2_1, $3_1, $6_1, ($10 | 0) > -1 ? $5_1 : $7_1 - $10 | 0, 0);
   $4_1 = $4_1 + 2 | 0;
   $10 = $6_1 << 4;
   $9_1 = HEAP32[($10 + HEAP32[$0 + 16 >> 2] | 0) + 12 >> 2];
   $92($0, $1_1, $2_1, $3_1, ($9_1 | 0) > -1 ? $4_1 : $6_1 - $9_1 | 0, $7_1, 0);
   $9_1 = $0;
   $0 = HEAP32[($10 + HEAP32[$0 + 16 >> 2] | 0) + 12 >> 2];
   $4_1 = ($0 | 0) > -1 ? $4_1 : $6_1 - $0 | 0;
   $0 = HEAP32[($11 + HEAP32[$1_1 + 16 >> 2] | 0) + 12 >> 2];
   $92($9_1, $1_1, $2_1, $3_1, $4_1, ($0 | 0) > -1 ? $5_1 : $7_1 - $0 | 0, 0);
  }
  global$0 = $8_1 - -64 | 0;
 }
 
 function $93($0, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0);
  label$1 : {
   label$2 : {
    $7_1 = HEAPF32[$1_1 + 16 >> 2];
    $5_1 = Math_fround(Math_fround($7_1 + HEAPF32[$1_1 >> 2]) * Math_fround(.5));
    $22_1 = HEAPF32[$2_1 + 16 >> 2];
    $8_1 = HEAPF32[$1_1 + 20 >> 2];
    $4_1 = Math_fround(Math_fround($8_1 + HEAPF32[$1_1 + 4 >> 2]) * Math_fround(.5));
    $23_1 = HEAPF32[$2_1 + 20 >> 2];
    $9_1 = HEAPF32[$1_1 + 24 >> 2];
    $6_1 = Math_fround(Math_fround($9_1 + HEAPF32[$1_1 + 8 >> 2]) * Math_fround(.5));
    $24_1 = HEAPF32[$2_1 + 24 >> 2];
    $10 = HEAPF32[$0 + 16 >> 2];
    $11 = Math_fround(Math_fround($10 + HEAPF32[$0 >> 2]) * Math_fround(.5));
    $13_1 = Math_fround(Math_fround(HEAPF32[$2_1 >> 2] + Math_fround(Math_fround(Math_fround($5_1 * $22_1) + Math_fround($4_1 * $23_1)) + Math_fround($6_1 * $24_1))) - $11);
    $10 = Math_fround($10 - $11);
    $7_1 = Math_fround($7_1 - $5_1);
    $15_1 = HEAPF32[$2_1 + 64 >> 2];
    $8_1 = Math_fround($8_1 - $4_1);
    $16_1 = HEAPF32[$2_1 + 68 >> 2];
    $9_1 = Math_fround($9_1 - $6_1);
    $17_1 = HEAPF32[$2_1 + 72 >> 2];
    if (Math_fround(Math_abs($13_1)) > Math_fround($10 + Math_fround(Math_fround(Math_fround($7_1 * $15_1) + Math_fround($8_1 * $16_1)) + Math_fround($9_1 * $17_1)))) {
     break label$2
    }
    $25 = HEAPF32[$2_1 + 32 >> 2];
    $26_1 = HEAPF32[$2_1 + 36 >> 2];
    $27_1 = HEAPF32[$2_1 + 40 >> 2];
    $12_1 = HEAPF32[$0 + 20 >> 2];
    $14 = Math_fround(Math_fround($12_1 + HEAPF32[$0 + 4 >> 2]) * Math_fround(.5));
    $11 = Math_fround(Math_fround(HEAPF32[$2_1 + 4 >> 2] + Math_fround(Math_fround(Math_fround($5_1 * $25) + Math_fround($4_1 * $26_1)) + Math_fround($6_1 * $27_1))) - $14);
    $12_1 = Math_fround($12_1 - $14);
    $14 = HEAPF32[$2_1 + 80 >> 2];
    $18_1 = HEAPF32[$2_1 + 84 >> 2];
    $19_1 = HEAPF32[$2_1 + 88 >> 2];
    if (Math_fround(Math_abs($11)) > Math_fround($12_1 + Math_fround(Math_fround(Math_fround($7_1 * $14) + Math_fround($8_1 * $18_1)) + Math_fround($9_1 * $19_1)))) {
     break label$2
    }
    $28_1 = HEAPF32[$2_1 + 48 >> 2];
    $29_1 = HEAPF32[$2_1 + 52 >> 2];
    $30 = HEAPF32[$2_1 + 56 >> 2];
    $5_1 = Math_fround(HEAPF32[$2_1 + 8 >> 2] + Math_fround(Math_fround(Math_fround($5_1 * $28_1) + Math_fround($4_1 * $29_1)) + Math_fround($6_1 * $30)));
    $4_1 = HEAPF32[$0 + 24 >> 2];
    $6_1 = Math_fround(Math_fround($4_1 + HEAPF32[$0 + 8 >> 2]) * Math_fround(.5));
    $5_1 = Math_fround($5_1 - $6_1);
    $4_1 = Math_fround($4_1 - $6_1);
    $6_1 = HEAPF32[$2_1 + 96 >> 2];
    $20 = HEAPF32[$2_1 + 100 >> 2];
    $21 = HEAPF32[$2_1 + 104 >> 2];
    if (Math_fround(Math_abs($5_1)) > Math_fround($4_1 + Math_fround(Math_fround(Math_fround($7_1 * $6_1) + Math_fround($8_1 * $20)) + Math_fround($9_1 * $21))) | Math_fround(Math_abs(Math_fround(Math_fround(Math_fround($13_1 * $22_1) + Math_fround($11 * $25)) + Math_fround($5_1 * $28_1)))) > Math_fround($7_1 + Math_fround(Math_fround(Math_fround($10 * $15_1) + Math_fround($12_1 * $14)) + Math_fround($4_1 * $6_1))) | Math_fround(Math_abs(Math_fround(Math_fround(Math_fround($13_1 * $23_1) + Math_fround($11 * $26_1)) + Math_fround($5_1 * $29_1)))) > Math_fround($8_1 + Math_fround(Math_fround(Math_fround($10 * $16_1) + Math_fround($12_1 * $18_1)) + Math_fround($4_1 * $20)))) {
     break label$2
    }
    $0 = Math_fround(Math_abs(Math_fround(Math_fround(Math_fround($13_1 * $24_1) + Math_fround($11 * $27_1)) + Math_fround($5_1 * $30)))) > Math_fround($9_1 + Math_fround(Math_fround(Math_fround($10 * $17_1) + Math_fround($12_1 * $19_1)) + Math_fround($4_1 * $21)));
    $2_1 = $0 ^ 1;
    if (!$3_1 | $0) {
     break label$1
    }
    if (!!(Math_fround(Math_abs(Math_fround(Math_fround($5_1 * $26_1) - Math_fround($11 * $29_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $20) + Math_fround($4_1 * $18_1)) + Math_fround($7_1 * $17_1)) + Math_fround($9_1 * $15_1))) | Math_fround(Math_abs(Math_fround(Math_fround($5_1 * $25) - Math_fround($11 * $28_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $6_1) + Math_fround($4_1 * $14)) + Math_fround($8_1 * $17_1)) + Math_fround($9_1 * $16_1)) | (Math_fround(Math_abs(Math_fround(Math_fround($5_1 * $27_1) - Math_fround($11 * $30)))) > Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $21) + Math_fround($4_1 * $19_1)) + Math_fround($7_1 * $16_1)) + Math_fround($8_1 * $15_1)) | Math_fround(Math_abs(Math_fround(Math_fround($13_1 * $28_1) - Math_fround($5_1 * $22_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($10 * $6_1) + Math_fround($4_1 * $15_1)) + Math_fround($8_1 * $19_1)) + Math_fround($9_1 * $18_1)))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($13_1 * $29_1) - Math_fround($5_1 * $23_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($10 * $20) + Math_fround($4_1 * $16_1)) + Math_fround($7_1 * $19_1)) + Math_fround($9_1 * $14)) | Math_fround(Math_abs(Math_fround(Math_fround($13_1 * $30) - Math_fround($5_1 * $24_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($10 * $21) + Math_fround($4_1 * $17_1)) + Math_fround($7_1 * $18_1)) + Math_fround($8_1 * $14)) | (Math_fround(Math_abs(Math_fround(Math_fround($11 * $22_1) - Math_fround($13_1 * $25)))) > Math_fround(Math_fround(Math_fround(Math_fround($10 * $14) + Math_fround($12_1 * $15_1)) + Math_fround($8_1 * $21)) + Math_fround($9_1 * $20)) | Math_fround(Math_abs(Math_fround(Math_fround($11 * $23_1) - Math_fround($13_1 * $26_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($10 * $18_1) + Math_fround($12_1 * $16_1)) + Math_fround($7_1 * $21)) + Math_fround($9_1 * $6_1)))) {
     break label$2
    }
    $2_1 = 0;
    if (Math_fround(Math_abs(Math_fround(Math_fround($11 * $24_1) - Math_fround($13_1 * $27_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($10 * $19_1) + Math_fround($12_1 * $17_1)) + Math_fround($7_1 * $20)) + Math_fround($8_1 * $6_1))) {
     break label$1
    }
    return 1;
   }
   $2_1 = 0;
  }
  return $2_1;
 }
 
 function $94($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 44 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 52 >> 2] = 1065353216;
  $4_1 = $3_1 + 76 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 72 >> 2] = 1065353216;
  $4_1 = $3_1 + 84 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 92 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 1065353216;
  HEAP32[$3_1 + 64 >> 2] = 0;
  HEAP32[$3_1 + 68 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  $8_1 = HEAPF32[$3_1 >> 2];
  $9_1 = HEAPF32[$3_1 + 16 >> 2];
  $5_1 = Math_fround($8_1 - $9_1);
  $7_1 = Math_fround($5_1 * $5_1);
  $5_1 = HEAPF32[$3_1 + 4 >> 2];
  $10 = HEAPF32[$3_1 + 20 >> 2];
  $6_1 = Math_fround($5_1 - $10);
  $12_1 = Math_fround($7_1 + Math_fround($6_1 * $6_1));
  $6_1 = HEAPF32[$3_1 + 8 >> 2];
  $7_1 = HEAPF32[$3_1 + 24 >> 2];
  $11 = Math_fround($6_1 - $7_1);
  HEAPF32[$2_1 >> 2] = Math_fround(Math_sqrt(Math_fround($12_1 + Math_fround($11 * $11)))) * Math_fround(.5);
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAPF32[$1_1 + 8 >> 2] = Math_fround($6_1 + $7_1) * Math_fround(.5);
  HEAPF32[$1_1 + 4 >> 2] = Math_fround($5_1 + $10) * Math_fround(.5);
  HEAPF32[$1_1 >> 2] = Math_fround($8_1 + $9_1) * Math_fround(.5);
  global$0 = $3_1 + 96 | 0;
 }
 
 function $95($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  return Math_fround(Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0)) * $1_1));
 }
 
 function $96($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = Math_fround(0);
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1_1 + 16 | 0, $1_1 + 12 | 0);
  global$0 = $1_1 + 32 | 0;
  $2_1 = HEAPF32[$1_1 + 16 >> 2];
  $3_1 = Math_fround($2_1 * $2_1);
  $2_1 = HEAPF32[$1_1 + 20 >> 2];
  $3_1 = Math_fround($3_1 + Math_fround($2_1 * $2_1));
  $2_1 = HEAPF32[$1_1 + 24 >> 2];
  return Math_fround(Math_fround(HEAPF32[$1_1 + 12 >> 2] + Math_fround(Math_sqrt(Math_fround($3_1 + Math_fround($2_1 * $2_1))))));
 }
 
 function $97($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1_1, $4_1, $5_1);
  $6_1 = HEAPF32[$2_1 + 8 >> 2];
  $7_1 = HEAPF32[$2_1 + 4 >> 2];
  $9_1 = HEAPF32[$4_1 + 8 >> 2];
  $1_1 = HEAP32[$4_1 + 8 >> 2];
  $15_1 = HEAPF32[$4_1 + 4 >> 2];
  $10 = HEAP32[$4_1 + 4 >> 2];
  $16_1 = HEAPF32[$4_1 >> 2];
  $11 = HEAP32[$4_1 >> 2];
  $17_1 = HEAPF32[$5_1 + 8 >> 2];
  $12_1 = HEAP32[$5_1 + 8 >> 2];
  $18_1 = HEAPF32[$5_1 + 4 >> 2];
  $13_1 = HEAP32[$5_1 + 4 >> 2];
  $19_1 = HEAPF32[$5_1 >> 2];
  $14 = HEAP32[$5_1 >> 2];
  $8_1 = HEAPF32[$2_1 >> 2];
  label$1 : {
   if (!!($8_1 > Math_fround(0.0))) {
    $14 = (wasm2js_scratch_store_f32(Math_fround($8_1 + $19_1)), wasm2js_scratch_load_i32(0));
    break label$1;
   }
   $11 = (wasm2js_scratch_store_f32(Math_fround($8_1 + $16_1)), wasm2js_scratch_load_i32(0));
  }
  label$3 : {
   if (!!($7_1 > Math_fround(0.0))) {
    $13_1 = (wasm2js_scratch_store_f32(Math_fround($7_1 + $18_1)), wasm2js_scratch_load_i32(0));
    break label$3;
   }
   $10 = (wasm2js_scratch_store_f32(Math_fround($7_1 + $15_1)), wasm2js_scratch_load_i32(0));
  }
  label$5 : {
   if (!!($6_1 > Math_fround(0.0))) {
    $12_1 = (wasm2js_scratch_store_f32(Math_fround($6_1 + $17_1)), wasm2js_scratch_load_i32(0));
    break label$5;
   }
   $1_1 = (wasm2js_scratch_store_f32(Math_fround($6_1 + $9_1)), wasm2js_scratch_load_i32(0));
  }
  $6_1 = HEAPF32[$3_1 + 8 >> 2];
  $7_1 = HEAPF32[$3_1 >> 2];
  $8_1 = HEAPF32[$3_1 + 4 >> 2];
  $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0));
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $10;
  HEAP32[$4_1 >> 2] = $11;
  HEAP32[$5_1 + 12 >> 2] = 0;
  HEAP32[$5_1 + 8 >> 2] = $12_1;
  HEAP32[$5_1 + 4 >> 2] = $13_1;
  HEAP32[$5_1 >> 2] = $14;
  $6_1 = Math_fround($9_1 * Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8_1 * $8_1)) + Math_fround($6_1 * $6_1)))));
  HEAPF32[$4_1 >> 2] = HEAPF32[$4_1 >> 2] - $6_1;
  HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$4_1 + 4 >> 2] - $6_1;
  HEAPF32[$4_1 + 8 >> 2] = HEAPF32[$4_1 + 8 >> 2] - $6_1;
  HEAPF32[$5_1 >> 2] = $6_1 + HEAPF32[$5_1 >> 2];
  HEAPF32[$5_1 + 4 >> 2] = $6_1 + HEAPF32[$5_1 + 4 >> 2];
  HEAPF32[$5_1 + 8 >> 2] = $6_1 + HEAPF32[$5_1 + 8 >> 2];
 }
 
 function $98($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 40 >> 2]]($2_1, $0) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0;
  HEAP32[$1_1 >> 2] = $4_1;
  if ($4_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1, $3_1)
  }
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = $0;
  return 3888;
 }
 
 function $99($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, HEAP32[$2_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1346455635), wasm2js_i32$5 = $0), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function $103($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = 0, $21 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = Math_fround(0), $43_1 = Math_fround(0);
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[$7_1 + 44 >> 2] = 0;
  $8_1 = HEAPF32[$2_1 >> 2];
  $9_1 = HEAPF32[$2_1 + 4 >> 2];
  $10 = HEAPF32[$2_1 + 8 >> 2];
  HEAPF32[$7_1 + 32 >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $8_1) + Math_fround(HEAPF32[$1_1 + 16 >> 2] * $9_1)) + Math_fround(HEAPF32[$1_1 + 32 >> 2] * $10);
  $16_1 = $1_1 + 24 | 0;
  $17_1 = $1_1 + 40 | 0;
  HEAPF32[$7_1 + 40 >> 2] = Math_fround(Math_fround($8_1 * HEAPF32[$1_1 + 8 >> 2]) + Math_fround($9_1 * HEAPF32[$16_1 >> 2])) + Math_fround($10 * HEAPF32[$17_1 >> 2]);
  $18_1 = $1_1 + 20 | 0;
  $19_1 = $1_1 + 36 | 0;
  HEAPF32[$7_1 + 36 >> 2] = Math_fround(Math_fround($8_1 * HEAPF32[$1_1 + 4 >> 2]) + Math_fround($9_1 * HEAPF32[$18_1 >> 2])) + Math_fround($10 * HEAPF32[$19_1 >> 2]);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($7_1 + 16 | 0, $0, $7_1 + 32 | 0);
  $20 = $1_1 + 56 | 0;
  $22_1 = HEAPF32[$20 >> 2];
  $23_1 = HEAPF32[$17_1 >> 2];
  $24_1 = HEAPF32[$19_1 >> 2];
  $21 = $1_1 + 52 | 0;
  $14 = HEAPF32[$21 >> 2];
  $25 = HEAPF32[$16_1 >> 2];
  $26_1 = HEAPF32[$18_1 >> 2];
  $27_1 = HEAPF32[$1_1 + 32 >> 2];
  $15_1 = HEAPF32[$1_1 + 48 >> 2];
  $28_1 = HEAPF32[$1_1 + 8 >> 2];
  $29_1 = HEAPF32[$1_1 >> 2];
  $30 = HEAPF32[$1_1 + 4 >> 2];
  $31_1 = HEAPF32[$1_1 + 16 >> 2];
  $8_1 = HEAPF32[$7_1 + 24 >> 2];
  $9_1 = HEAPF32[$7_1 + 16 >> 2];
  $10 = HEAPF32[$7_1 + 20 >> 2];
  HEAP32[$7_1 + 12 >> 2] = 0;
  HEAPF32[$7_1 + 8 >> 2] = -HEAPF32[$7_1 + 40 >> 2];
  HEAPF32[$7_1 + 4 >> 2] = -HEAPF32[$7_1 + 36 >> 2];
  HEAPF32[$7_1 >> 2] = -HEAPF32[$7_1 + 32 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($7_1 + 16 | 0, $0, $7_1);
  $32 = HEAPF32[$20 >> 2];
  $33_1 = HEAPF32[$17_1 >> 2];
  $34 = HEAPF32[$19_1 >> 2];
  $35 = HEAPF32[$21 >> 2];
  $36_1 = HEAPF32[$16_1 >> 2];
  $37_1 = HEAPF32[$18_1 >> 2];
  $38 = HEAPF32[$1_1 + 32 >> 2];
  $39_1 = HEAPF32[$1_1 + 48 >> 2];
  $40_1 = HEAPF32[$1_1 + 8 >> 2];
  $41_1 = HEAPF32[$1_1 >> 2];
  $42 = HEAPF32[$1_1 + 4 >> 2];
  $43_1 = HEAPF32[$1_1 + 16 >> 2];
  $11 = HEAPF32[$7_1 + 24 >> 2];
  $12_1 = HEAPF32[$7_1 + 16 >> 2];
  $13_1 = HEAPF32[$7_1 + 20 >> 2];
  $15_1 = Math_fround($15_1 + Math_fround(Math_fround(Math_fround($9_1 * $29_1) + Math_fround($10 * $30)) + Math_fround($8_1 * $28_1)));
  $14 = Math_fround($14 + Math_fround(Math_fround(Math_fround($9_1 * $31_1) + Math_fround($10 * $26_1)) + Math_fround($8_1 * $25)));
  $8_1 = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($9_1 * $27_1) + Math_fround($10 * $24_1)) + Math_fround($8_1 * $23_1)));
  HEAPF32[$3_1 >> 2] = Math_fround(Math_fround($15_1 * HEAPF32[$2_1 >> 2]) + Math_fround($14 * HEAPF32[$2_1 + 4 >> 2])) + Math_fround($8_1 * HEAPF32[$2_1 + 8 >> 2]);
  $9_1 = Math_fround($39_1 + Math_fround(Math_fround(Math_fround($12_1 * $41_1) + Math_fround($13_1 * $42)) + Math_fround($11 * $40_1)));
  $10 = Math_fround($35 + Math_fround(Math_fround(Math_fround($12_1 * $43_1) + Math_fround($13_1 * $37_1)) + Math_fround($11 * $36_1)));
  $11 = Math_fround($32 + Math_fround(Math_fround(Math_fround($12_1 * $38) + Math_fround($13_1 * $34)) + Math_fround($11 * $33_1)));
  HEAPF32[$4_1 >> 2] = Math_fround(Math_fround($9_1 * HEAPF32[$2_1 >> 2]) + Math_fround($10 * HEAPF32[$2_1 + 4 >> 2])) + Math_fround($11 * HEAPF32[$2_1 + 8 >> 2]);
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAPF32[$6_1 + 8 >> 2] = $11;
  HEAPF32[$6_1 + 4 >> 2] = $10;
  HEAPF32[$6_1 >> 2] = $9_1;
  HEAP32[$5_1 + 12 >> 2] = 0;
  HEAPF32[$5_1 + 8 >> 2] = $8_1;
  HEAPF32[$5_1 + 4 >> 2] = $14;
  HEAPF32[$5_1 >> 2] = $15_1;
  $12_1 = HEAPF32[$3_1 >> 2];
  $13_1 = HEAPF32[$4_1 >> 2];
  if (!!($12_1 > $13_1)) {
   HEAPF32[$3_1 >> 2] = $13_1;
   HEAPF32[$4_1 >> 2] = $12_1;
   HEAP32[$6_1 + 12 >> 2] = 0;
   HEAPF32[$6_1 + 8 >> 2] = $8_1;
   HEAPF32[$6_1 + 4 >> 2] = $14;
   HEAPF32[$6_1 >> 2] = $15_1;
   HEAP32[$5_1 + 12 >> 2] = 0;
   HEAPF32[$5_1 + 8 >> 2] = $11;
   HEAPF32[$5_1 + 4 >> 2] = $10;
   HEAPF32[$5_1 >> 2] = $9_1;
  }
  global$0 = $7_1 + 48 | 0;
 }
 
 function $104($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $6_1 = HEAP32[$1_1 + 4 >> 2];
    if ($6_1 >>> 0 > 13) {
     break label$2
    }
    label$3 : {
     switch ($6_1 - 1 | 0) {
     case 7:
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $0 = $0 + 8 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      break label$1;
     default:
      HEAP32[$0 + 12 >> 2] = 0;
      $4_1 = HEAPF32[$1_1 + 32 >> 2];
      HEAPF32[$0 >> 2] = HEAPF32[$2_1 >> 2] >= Math_fround(0.0) ? $4_1 : Math_fround(-$4_1);
      $4_1 = HEAPF32[$1_1 + 40 >> 2];
      HEAPF32[$0 + 8 >> 2] = HEAPF32[$2_1 + 8 >> 2] >= Math_fround(0.0) ? $4_1 : Math_fround(-$4_1);
      $4_1 = HEAPF32[$1_1 + 36 >> 2];
      HEAPF32[$0 + 4 >> 2] = HEAPF32[$2_1 + 4 >> 2] >= Math_fround(0.0) ? $4_1 : Math_fround(-$4_1);
      break label$1;
     case 0:
      HEAP32[$0 + 12 >> 2] = 0;
      $11 = HEAPF32[$2_1 >> 2];
      $7_1 = HEAPF32[$2_1 + 4 >> 2];
      $4_1 = HEAPF32[$2_1 + 8 >> 2];
      $8_1 = Math_fround(Math_fround(Math_fround($11 * HEAPF32[$1_1 + 76 >> 2]) + Math_fround($7_1 * HEAPF32[$1_1 + 80 >> 2])) + Math_fround($4_1 * HEAPF32[$1_1 + 84 >> 2]));
      $5_1 = Math_fround(Math_fround(Math_fround($11 * HEAPF32[$1_1 + 92 >> 2]) + Math_fround($7_1 * HEAPF32[$1_1 + 96 >> 2])) + Math_fround($4_1 * HEAPF32[$1_1 + 100 >> 2]));
      $2_1 = $1_1 + 60 | 0;
      $4_1 = Math_fround(Math_fround(Math_fround($11 * HEAPF32[$2_1 >> 2]) + Math_fround($7_1 * HEAPF32[$1_1 - -64 >> 2])) + Math_fround($4_1 * HEAPF32[$1_1 + 68 >> 2]));
      $2_1 = (($4_1 < $8_1 ? ($8_1 < $5_1 ? 2 : 1) : ($4_1 < $5_1) << 1) << 4) + $2_1 | 0;
      HEAP32[$0 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2];
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$0 + 4 >> 2] = $1_1;
      break label$1;
     case 12:
      $9_1 = $1_1 + 40 | 0;
      $6_1 = HEAP32[$9_1 + 4 >> 2];
      $10 = $3_1 + 40 | 0;
      HEAP32[$10 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$10 + 4 >> 2] = $6_1;
      $6_1 = HEAP32[$1_1 + 36 >> 2];
      HEAP32[$3_1 + 32 >> 2] = HEAP32[$1_1 + 32 >> 2];
      HEAP32[$3_1 + 36 >> 2] = $6_1;
      HEAP32[$3_1 + 28 >> 2] = 0;
      HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
      $5_1 = HEAPF32[$2_1 + 4 >> 2];
      HEAP32[$3_1 + 20 >> 2] = HEAP32[$2_1 + 4 >> 2];
      $4_1 = HEAPF32[$2_1 + 8 >> 2];
      HEAP32[$3_1 + 24 >> 2] = HEAP32[$2_1 + 8 >> 2];
      $2_1 = 1;
      $6_1 = HEAP32[$1_1 + 56 >> 2];
      $1_1 = $6_1 + -1 | 0;
      $10 = 2;
      label$10 : {
       if ($1_1 >>> 0 > 1) {
        break label$10
       }
       if ($1_1 - 1) {
        $2_1 = 0;
        $12_1 = 1;
        $10 = 2;
        break label$10;
       }
       $4_1 = $5_1;
       $2_1 = 0;
       $12_1 = 2;
       $10 = 1;
      }
      $11 = HEAPF32[($3_1 + 32 | 0) + ($6_1 << 2) >> 2];
      $1_1 = $2_1 << 2;
      $7_1 = HEAPF32[($1_1 | $3_1 + 32) >> 2];
      $8_1 = HEAPF32[($1_1 | $3_1 + 16) >> 2];
      $5_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($4_1 * $4_1))));
      label$14 : {
       if ($5_1 != Math_fround(0.0)) {
        $5_1 = Math_fround($7_1 / $5_1);
        HEAPF32[($2_1 << 2 | $3_1) >> 2] = $8_1 * $5_1;
        $1_1 = $12_1 << 2;
        HEAPF32[$1_1 + $3_1 >> 2] = HEAPF32[$1_1 + ($3_1 + 16 | 0) >> 2] < Math_fround(0.0) ? Math_fround(-$11) : $11;
        HEAPF32[($10 << 2) + $3_1 >> 2] = $4_1 * $5_1;
        $2_1 = $3_1 | 4;
        $1_1 = $3_1 + 8 | 0;
        break label$14;
       }
       HEAPF32[($2_1 << 2 | $3_1) >> 2] = $7_1;
       $1_1 = $12_1 << 2;
       HEAPF32[$1_1 + $3_1 >> 2] = HEAPF32[$1_1 + ($3_1 + 16 | 0) >> 2] < Math_fround(0.0) ? Math_fround(-$11) : $11;
       HEAP32[($10 << 2) + $3_1 >> 2] = 0;
       $2_1 = $3_1 | 4;
       $1_1 = $3_1 + 8 | 0;
      }
      HEAP32[$0 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$0 + 12 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 >> 2];
      break label$1;
     case 9:
      $6_1 = $1_1;
      $16_1 = HEAP32[$1_1 + 56 >> 2];
      $1_1 = $16_1 << 2;
      $11 = HEAPF32[($6_1 + $1_1 | 0) + 32 >> 2];
      $7_1 = HEAPF32[$2_1 >> 2];
      $8_1 = HEAPF32[$2_1 + 4 >> 2];
      $5_1 = HEAPF32[$2_1 + 8 >> 2];
      $4_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8_1 * $8_1)) + Math_fround($5_1 * $5_1));
      label$16 : {
       if ($4_1 < Math_fround(1.4210854715202004e-14)) {
        $13_1 = Math_fround(1.0);
        break label$16;
       }
       $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($4_1)));
       $14 = Math_fround($5_1 * $4_1);
       $15_1 = Math_fround($8_1 * $4_1);
       $13_1 = Math_fround($7_1 * $4_1);
      }
      HEAP32[$3_1 + 40 >> 2] = 0;
      HEAP32[$3_1 + 44 >> 2] = 0;
      HEAP32[$3_1 + 32 >> 2] = 0;
      HEAP32[$3_1 + 36 >> 2] = 0;
      HEAPF32[$1_1 + ($3_1 + 32 | 0) >> 2] = $11;
      $5_1 = Math_fround(-999999984306749440.0);
      $2_1 = 0;
      $9_1 = HEAP32[$3_1 + 32 >> 2];
      $6_1 = HEAP32[$3_1 + 36 >> 2];
      $1_1 = HEAP32[$3_1 + 40 >> 2];
      $4_1 = Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$3_1 + 32 >> 2]) + Math_fround($15_1 * HEAPF32[$3_1 + 36 >> 2])) + Math_fround($14 * HEAPF32[$3_1 + 40 >> 2]));
      if (!!($4_1 > Math_fround(-999999984306749440.0))) {
       $10 = $1_1;
       $12_1 = $6_1;
       $5_1 = $4_1;
       $2_1 = $9_1;
      }
      HEAP32[$3_1 + 40 >> 2] = 0;
      HEAP32[$3_1 + 44 >> 2] = 0;
      HEAP32[$3_1 + 32 >> 2] = 0;
      HEAP32[$3_1 + 36 >> 2] = 0;
      HEAPF32[($3_1 + 32 | 0) + ($16_1 << 2) >> 2] = -$11;
      $9_1 = HEAP32[$3_1 + 40 >> 2];
      $7_1 = HEAPF32[$3_1 + 40 >> 2];
      $6_1 = HEAP32[$3_1 + 32 >> 2];
      $8_1 = HEAPF32[$3_1 + 32 >> 2];
      $1_1 = HEAP32[$3_1 + 36 >> 2];
      $4_1 = HEAPF32[$3_1 + 36 >> 2];
      HEAP32[$0 + 12 >> 2] = 0;
      $16_1 = $9_1;
      $9_1 = Math_fround(Math_fround(Math_fround($13_1 * $8_1) + Math_fround($15_1 * $4_1)) + Math_fround($14 * $7_1)) > $5_1;
      HEAP32[$0 + 8 >> 2] = $9_1 ? $16_1 : $10;
      HEAP32[$0 + 4 >> 2] = $9_1 ? $1_1 : $12_1;
      HEAP32[$0 >> 2] = $9_1 ? $6_1 : $2_1;
      break label$1;
     case 4:
      $15_1 = HEAPF32[$1_1 + 24 >> 2];
      $13_1 = HEAPF32[$1_1 + 20 >> 2];
      $14 = HEAPF32[$1_1 + 16 >> 2];
      $6_1 = HEAP32[$1_1 + 96 >> 2];
      $9_1 = HEAP32[$1_1 + 100 >> 2];
      label$19 : {
       if (($9_1 | 0) < 1) {
        $12_1 = -1;
        break label$19;
       }
       $11 = Math_fround(HEAPF32[$2_1 + 8 >> 2] * $15_1);
       $7_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] * $13_1);
       $8_1 = Math_fround(HEAPF32[$2_1 >> 2] * $14);
       $2_1 = 0;
       $12_1 = -1;
       $4_1 = Math_fround(-3402823466385288598117041.0e14);
       $1_1 = $6_1;
       while (1) {
        $5_1 = Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$1_1 >> 2]) + Math_fround($7_1 * HEAPF32[$1_1 + 4 >> 2])) + Math_fround($11 * HEAPF32[$1_1 + 8 >> 2]));
        $10 = $5_1 > $4_1;
        $4_1 = $10 ? $5_1 : $4_1;
        $12_1 = $10 ? $2_1 : $12_1;
        $1_1 = $1_1 + 16 | 0;
        $2_1 = $2_1 + 1 | 0;
        if (($9_1 | 0) != ($2_1 | 0)) {
         continue
        }
        break;
       };
      }
      HEAP32[$0 + 12 >> 2] = 0;
      $1_1 = $6_1 + ($12_1 << 4) | 0;
      HEAPF32[$0 + 8 >> 2] = $15_1 * HEAPF32[$1_1 + 8 >> 2];
      HEAPF32[$0 + 4 >> 2] = $13_1 * HEAPF32[$1_1 + 4 >> 2];
      HEAPF32[$0 >> 2] = $14 * HEAPF32[$1_1 >> 2];
      break label$1;
     case 1:
     case 2:
     case 5:
     case 6:
     case 8:
     case 10:
     case 11:
      break label$2;
     case 3:
      break label$3;
     };
    }
    $15_1 = HEAPF32[$1_1 + 24 >> 2];
    $13_1 = HEAPF32[$1_1 + 20 >> 2];
    $14 = HEAPF32[$1_1 + 16 >> 2];
    $6_1 = HEAP32[$1_1 + 108 >> 2];
    $9_1 = HEAP32[$1_1 + 100 >> 2];
    label$22 : {
     if (($9_1 | 0) < 1) {
      $12_1 = -1;
      break label$22;
     }
     $11 = Math_fround(HEAPF32[$2_1 + 8 >> 2] * $15_1);
     $7_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] * $13_1);
     $8_1 = Math_fround(HEAPF32[$2_1 >> 2] * $14);
     $2_1 = 0;
     $12_1 = -1;
     $4_1 = Math_fround(-3402823466385288598117041.0e14);
     $1_1 = $6_1;
     while (1) {
      $5_1 = Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$1_1 >> 2]) + Math_fround($7_1 * HEAPF32[$1_1 + 4 >> 2])) + Math_fround($11 * HEAPF32[$1_1 + 8 >> 2]));
      $10 = $5_1 > $4_1;
      $4_1 = $10 ? $5_1 : $4_1;
      $12_1 = $10 ? $2_1 : $12_1;
      $1_1 = $1_1 + 16 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (($9_1 | 0) != ($2_1 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 12 >> 2] = 0;
    $1_1 = $6_1 + ($12_1 << 4) | 0;
    HEAPF32[$0 + 8 >> 2] = $15_1 * HEAPF32[$1_1 + 8 >> 2];
    HEAPF32[$0 + 4 >> 2] = $13_1 * HEAPF32[$1_1 + 4 >> 2];
    HEAPF32[$0 >> 2] = $14 * HEAPF32[$1_1 >> 2];
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($0, $1_1, $2_1);
  }
  global$0 = $3_1 + 48 | 0;
 }
 
 function $105($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $8_1 = $2_1 + 8 | 0;
  $10 = HEAP32[$8_1 + 4 >> 2];
  $9_1 = $3_1 + 24 | 0;
  $7_1 = $9_1;
  HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $10;
  $7_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 20 >> 2] = $7_1;
  $4_1 = HEAPF32[$3_1 + 16 >> 2];
  $6_1 = HEAPF32[$3_1 + 20 >> 2];
  $5_1 = HEAPF32[$9_1 >> 2];
  if (!!(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)) + Math_fround($5_1 * $5_1)) < Math_fround(1.4210854715202004e-14))) {
   HEAP32[$3_1 + 24 >> 2] = -1082130432;
   HEAP32[$3_1 + 28 >> 2] = 0;
   HEAP32[$3_1 + 16 >> 2] = -1082130432;
   HEAP32[$3_1 + 20 >> 2] = -1082130432;
   $5_1 = Math_fround(-1.0);
   $6_1 = Math_fround(-1.0);
   $4_1 = Math_fround(-1.0);
  }
  $11 = $5_1;
  $5_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)) + Math_fround($5_1 * $5_1)))));
  HEAPF32[$3_1 + 24 >> 2] = $11 * $5_1;
  HEAPF32[$3_1 + 20 >> 2] = $6_1 * $5_1;
  HEAPF32[$3_1 + 16 >> 2] = $4_1 * $5_1;
  $104($3_1, $1_1, $3_1 + 16 | 0);
  label$2 : {
   label$3 : {
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    if ($2_1 >>> 0 > 13) {
     break label$3
    }
    label$4 : {
     switch ($2_1 - 2 | 0) {
     case 6:
      $4_1 = Math_fround(HEAPF32[$1_1 + 32 >> 2] * HEAPF32[$1_1 + 16 >> 2]);
      break label$2;
     case 0:
     case 1:
     case 4:
     case 5:
     case 7:
     case 10:
      break label$3;
     default:
      break label$4;
     };
    }
    $4_1 = HEAPF32[$1_1 + 48 >> 2];
    break label$2;
   }
   $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  }
  HEAP32[$0 + 12 >> 2] = 0;
  HEAPF32[$0 + 8 >> 2] = Math_fround($4_1 * HEAPF32[$3_1 + 24 >> 2]) + HEAPF32[$3_1 + 8 >> 2];
  HEAPF32[$0 + 4 >> 2] = Math_fround($4_1 * HEAPF32[$3_1 + 20 >> 2]) + HEAPF32[$3_1 + 4 >> 2];
  HEAPF32[$0 >> 2] = Math_fround($4_1 * HEAPF32[$3_1 + 16 >> 2]) + HEAPF32[$3_1 >> 2];
  global$0 = $3_1 + 32 | 0;
 }
 
 function $106($0) {
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0 + 4 >> 2];
   if ($1_1 >>> 0 > 13) {
    break label$1
   }
   label$2 : {
    switch ($1_1 - 2 | 0) {
    case 6:
     return Math_fround(HEAPF32[$0 + 32 >> 2] * HEAPF32[$0 + 16 >> 2]);
    case 0:
    case 1:
    case 4:
    case 5:
    case 7:
    case 10:
     break label$1;
    default:
     break label$2;
    };
   }
   return HEAPF32[$0 + 48 >> 2];
  }
  return Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 }
 
 function $107($0) {
  $0 = $0 | 0;
  return 12;
 }
 
 function $108($0, $1_1, $2_1) {
  $145($0);
  HEAPF32[$0 + 48 >> 2] = $1_1;
  HEAP32[$0 >> 2] = 4072;
  HEAP32[$0 + 56 >> 2] = 1;
  HEAP32[$0 + 4 >> 2] = 10;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAPF32[$0 + 40 >> 2] = $1_1;
  HEAPF32[$0 + 36 >> 2] = $2_1 * Math_fround(.5);
  HEAPF32[$0 + 32 >> 2] = $1_1;
 }
 
 function $109($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $9_1 = $0 + 8 | 0;
  HEAP32[$9_1 >> 2] = 0;
  HEAP32[$9_1 + 4 >> 2] = 0;
  $7_1 = HEAPF32[$2_1 >> 2];
  $6_1 = HEAPF32[$2_1 + 4 >> 2];
  $5_1 = HEAPF32[$2_1 + 8 >> 2];
  $4_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($6_1 * $6_1)) + Math_fround($5_1 * $5_1));
  label$1 : {
   if ($4_1 < Math_fround(9.999999747378752e-05)) {
    $5_1 = Math_fround(0.0);
    $4_1 = Math_fround(1.0);
    break label$1;
   }
   $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($4_1)));
   $10 = Math_fround($5_1 * $4_1);
   $5_1 = Math_fround($6_1 * $4_1);
   $4_1 = Math_fround($7_1 * $4_1);
  }
  HEAP32[$3_1 + 8 >> 2] = 0;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $2_1 = HEAP32[$1_1 + 56 >> 2] << 2;
  $9_1 = $2_1 + $3_1 | 0;
  $8_1 = HEAPF32[($1_1 + $2_1 | 0) + 32 >> 2];
  HEAPF32[$9_1 >> 2] = $8_1;
  $7_1 = Math_fround(-999999984306749440.0);
  $11 = HEAPF32[$3_1 >> 2];
  $12_1 = HEAPF32[$3_1 + 4 >> 2];
  $13_1 = HEAPF32[$3_1 + 8 >> 2];
  $6_1 = Math_fround(Math_fround(Math_fround($4_1 * $11) + Math_fround($5_1 * $12_1)) + Math_fround($10 * $13_1));
  if (!!($6_1 > Math_fround(-999999984306749440.0))) {
   HEAP32[$0 + 12 >> 2] = HEAP32[$3_1 + 12 >> 2];
   HEAPF32[$0 + 8 >> 2] = $13_1;
   HEAPF32[$0 + 4 >> 2] = $12_1;
   HEAPF32[$0 >> 2] = $11;
   $7_1 = $6_1;
  }
  HEAP32[$3_1 + 8 >> 2] = 0;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAPF32[$9_1 >> 2] = -$8_1;
  $6_1 = HEAPF32[$3_1 >> 2];
  $8_1 = $5_1;
  $5_1 = HEAPF32[$3_1 + 4 >> 2];
  $8_1 = Math_fround(Math_fround($4_1 * $6_1) + Math_fround($8_1 * $5_1));
  $4_1 = HEAPF32[$3_1 + 8 >> 2];
  if (!!(Math_fround($8_1 + Math_fround($10 * $4_1)) > $7_1)) {
   HEAP32[$0 + 12 >> 2] = HEAP32[$3_1 + 12 >> 2];
   HEAPF32[$0 + 8 >> 2] = $4_1;
   HEAPF32[$0 + 4 >> 2] = $5_1;
   HEAPF32[$0 >> 2] = $6_1;
  }
 }
 
 function $110($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0;
  $4_1 = global$0 - 16 | 0;
  if (($3_1 | 0) >= 1) {
   while (1) {
    $5_1 = $4_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    $7_1 = HEAP32[$0 + 56 >> 2];
    $6_1 = $7_1 << 2;
    $12_1 = $6_1 + $4_1 | 0;
    $6_1 = ($0 + $6_1 | 0) + 32 | 0;
    $9_1 = HEAPF32[$6_1 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$6_1 >> 2];
    $15_1 = Math_fround(-999999984306749440.0);
    $16_1 = HEAPF32[$4_1 >> 2];
    $6_1 = $1_1 + $13_1 | 0;
    $8_1 = HEAPF32[$6_1 >> 2];
    $17_1 = HEAPF32[$4_1 + 4 >> 2];
    $12_1 = $6_1 + 4 | 0;
    $10 = HEAPF32[$12_1 >> 2];
    $18_1 = HEAPF32[$5_1 >> 2];
    $19_1 = $6_1 + 8 | 0;
    $14 = HEAPF32[$19_1 >> 2];
    $11 = Math_fround(Math_fround(Math_fround($16_1 * $8_1) + Math_fround($17_1 * $10)) + Math_fround($18_1 * $14));
    if (!!($11 > Math_fround(-999999984306749440.0))) {
     $7_1 = $2_1 + $13_1 | 0;
     HEAPF32[$7_1 >> 2] = $16_1;
     HEAP32[$7_1 + 12 >> 2] = HEAP32[$4_1 + 12 >> 2];
     HEAPF32[$7_1 + 8 >> 2] = $18_1;
     HEAPF32[$7_1 + 4 >> 2] = $17_1;
     $14 = HEAPF32[$19_1 >> 2];
     $10 = HEAPF32[$12_1 >> 2];
     $7_1 = HEAP32[$0 + 56 >> 2];
     $9_1 = HEAPF32[(($7_1 << 2) + $0 | 0) + 32 >> 2];
     $8_1 = HEAPF32[$6_1 >> 2];
     $15_1 = $11;
    }
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    HEAPF32[($7_1 << 2) + $4_1 >> 2] = -$9_1;
    $9_1 = HEAPF32[$4_1 >> 2];
    $11 = HEAPF32[$4_1 + 4 >> 2];
    $10 = Math_fround(Math_fround($9_1 * $8_1) + Math_fround($11 * $10));
    $8_1 = HEAPF32[$5_1 >> 2];
    if (!!(Math_fround($10 + Math_fround($8_1 * $14)) > $15_1)) {
     $5_1 = $2_1 + $13_1 | 0;
     HEAPF32[$5_1 >> 2] = $9_1;
     HEAP32[$5_1 + 12 >> 2] = HEAP32[$4_1 + 12 >> 2];
     HEAPF32[$5_1 + 8 >> 2] = $8_1;
     HEAPF32[$5_1 + 4 >> 2] = $11;
    }
    $13_1 = $13_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   }
  }
 }
 
 function $111($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0);
  $7_1 = $0 + 32 | 0;
  $6_1 = HEAP32[$0 + 56 >> 2];
  $5_1 = HEAP32[$7_1 + (($6_1 + 2 | 0) % 3 << 2) >> 2];
  $0 = global$0 - 16 | 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = $5_1;
  HEAP32[$0 + 4 >> 2] = $5_1;
  HEAP32[$0 >> 2] = $5_1;
  $5_1 = $6_1 << 2;
  $6_1 = $5_1 + $0 | 0;
  HEAPF32[$6_1 >> 2] = HEAPF32[$5_1 + $7_1 >> 2] + HEAPF32[$6_1 >> 2];
  $1_1 = Math_fround($1_1 * Math_fround(.0833333283662796));
  $3_1 = HEAPF32[$0 >> 2];
  $3_1 = Math_fround($3_1 + $3_1);
  $3_1 = Math_fround($3_1 * $3_1);
  $4_1 = HEAPF32[$0 + 4 >> 2];
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($3_1 + $4_1);
  $8_1 = $3_1;
  $3_1 = HEAPF32[$0 + 8 >> 2];
  $3_1 = Math_fround($3_1 + $3_1);
  $3_1 = Math_fround($3_1 * $3_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($8_1 + $3_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($4_1 + $3_1);
 }
 
 function $112($0, $1_1, $2_1) {
  $145($0);
  HEAP32[$0 + 56 >> 2] = 0;
  HEAPF32[$0 + 48 >> 2] = $1_1;
  HEAP32[$0 >> 2] = 4172;
  HEAP32[$0 + 4 >> 2] = 10;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAPF32[$0 + 40 >> 2] = $1_1;
  HEAPF32[$0 + 36 >> 2] = $1_1;
  HEAPF32[$0 + 32 >> 2] = $2_1 * Math_fround(.5);
 }
 
 function $113($0, $1_1, $2_1) {
  $145($0);
  HEAP32[$0 + 56 >> 2] = 2;
  HEAPF32[$0 + 48 >> 2] = $1_1;
  HEAP32[$0 >> 2] = 4272;
  HEAP32[$0 + 4 >> 2] = 10;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAPF32[$0 + 40 >> 2] = $2_1 * Math_fround(.5);
  HEAPF32[$0 + 36 >> 2] = $1_1;
  HEAPF32[$0 + 32 >> 2] = $1_1;
 }
 
 function $114($0) {
  $0 = $0 | 0;
  $80($0);
 }
 
 function $115($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $11 = $0 + 32 | 0;
  $0 = HEAP32[$0 + 56 >> 2];
  $6_1 = HEAPF32[$11 + (($0 + 2 | 0) % 3 << 2) >> 2];
  HEAPF32[$4_1 + 8 >> 2] = $6_1;
  HEAPF32[$4_1 + 4 >> 2] = $6_1;
  HEAPF32[$4_1 >> 2] = $6_1;
  $0 = $0 << 2;
  HEAPF32[$0 + $4_1 >> 2] = $6_1 + HEAPF32[$0 + $11 >> 2];
  $6_1 = HEAPF32[$1_1 + 56 >> 2];
  $14 = HEAPF32[$1_1 + 40 >> 2];
  $15_1 = HEAPF32[$1_1 + 36 >> 2];
  $12_1 = HEAPF32[$1_1 + 52 >> 2];
  $9_1 = HEAPF32[$1_1 + 24 >> 2];
  $16_1 = HEAPF32[$1_1 + 20 >> 2];
  $17_1 = HEAPF32[$1_1 + 32 >> 2];
  $18_1 = HEAPF32[$1_1 + 16 >> 2];
  $13_1 = HEAPF32[$1_1 + 48 >> 2];
  $7_1 = HEAPF32[$1_1 + 8 >> 2];
  $5_1 = HEAPF32[$1_1 >> 2];
  $8_1 = HEAPF32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 12 >> 2] = 0;
  $10 = Math_fround(Math_abs($5_1));
  $5_1 = HEAPF32[$4_1 >> 2];
  $19_1 = Math_fround(Math_abs($8_1));
  $8_1 = HEAPF32[$4_1 + 4 >> 2];
  $20 = Math_fround(Math_abs($7_1));
  $7_1 = HEAPF32[$4_1 + 8 >> 2];
  $10 = Math_fround(Math_fround(Math_fround($10 * $5_1) + Math_fround($19_1 * $8_1)) + Math_fround($20 * $7_1));
  HEAPF32[$2_1 >> 2] = $13_1 - $10;
  $9_1 = Math_fround(Math_fround(Math_fround($5_1 * Math_fround(Math_abs($18_1))) + Math_fround($8_1 * Math_fround(Math_abs($16_1)))) + Math_fround($7_1 * Math_fround(Math_abs($9_1))));
  HEAPF32[$2_1 + 4 >> 2] = $12_1 - $9_1;
  $5_1 = Math_fround(Math_fround(Math_fround($5_1 * Math_fround(Math_abs($17_1))) + Math_fround($8_1 * Math_fround(Math_abs($15_1)))) + Math_fround($7_1 * Math_fround(Math_abs($14))));
  HEAPF32[$2_1 + 8 >> 2] = $6_1 - $5_1;
  HEAPF32[$3_1 >> 2] = $13_1 + $10;
  HEAPF32[$3_1 + 4 >> 2] = $12_1 + $9_1;
  HEAPF32[$3_1 + 8 >> 2] = $6_1 + $5_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
 }
 
 function $116($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0);
  $4_1 = HEAPF32[$0 + 20 >> 2];
  $2_1 = $0 + 36 | 0;
  $5_1 = HEAPF32[$2_1 >> 2];
  $6_1 = HEAPF32[$0 + 24 >> 2];
  $3_1 = $0 + 40 | 0;
  $7_1 = HEAPF32[$3_1 >> 2];
  $8_1 = HEAPF32[$0 + 16 >> 2];
  $9_1 = HEAPF32[$0 + 32 >> 2];
  $146($0, $1_1);
  $10 = HEAPF32[$1_1 >> 2];
  $11 = HEAPF32[$1_1 + 4 >> 2];
  $12_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAP32[$0 + 44 >> 2] = 0;
  HEAPF32[$3_1 >> 2] = $12_1 * Math_fround($7_1 / $6_1);
  HEAPF32[$2_1 >> 2] = $11 * Math_fround($5_1 / $4_1);
  HEAPF32[$0 + 32 >> 2] = $10 * Math_fround($9_1 / $8_1);
  HEAP32[$0 + 48 >> 2] = HEAP32[($0 + 32 | 0) + ((HEAP32[$0 + 56 >> 2] + 2 | 0) % 3 << 2) >> 2];
 }
 
 function $117($0) {
  $0 = $0 | 0;
  return 4460;
 }
 
 function $118($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $2_1 = $0 + 8 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[(HEAP32[$1_1 + 56 >> 2] << 2) + $0 >> 2] = 1065353216;
 }
 
 function $119($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
 }
 
 function $120($0) {
  $0 = $0 | 0;
  return 60;
 }
 
 function $121($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $98($0, $1_1, $2_1);
  HEAP32[$1_1 + 28 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$1_1 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
  HEAP32[$1_1 + 36 >> 2] = HEAP32[$0 + 40 >> 2];
  HEAP32[$1_1 + 40 >> 2] = HEAP32[$0 + 44 >> 2];
  HEAP32[$1_1 + 12 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
  HEAP32[$1_1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$1_1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP32[$1_1 + 44 >> 2] = HEAP32[$0 + 48 >> 2];
  $0 = HEAP32[$0 + 56 >> 2];
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = $0;
  return 4473;
 }
 
 function $123($0) {
  $0 = $0 | 0;
  return 4492;
 }
 
 function $125($0) {
  $0 = $0 | 0;
  return 4501;
 }
 
 function $126($0, $1_1, $2_1) {
  $145($0);
  HEAPF32[$0 + 64 >> 2] = $2_1;
  HEAPF32[$0 + 60 >> 2] = $1_1;
  HEAP32[$0 >> 2] = 4520;
  HEAP32[$0 + 76 >> 2] = 2;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 1;
  HEAP32[$0 + 4 >> 2] = 11;
  HEAPF32[$0 + 40 >> 2] = $1_1;
  HEAPF32[$0 + 36 >> 2] = $2_1;
  HEAPF32[$0 + 32 >> 2] = $1_1;
  HEAPF32[$0 + 56 >> 2] = $1_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($2_1 * $2_1))));
 }
 
 function $127($0, $1_1, $2_1) {
  $145($0);
  HEAPF32[$0 + 64 >> 2] = $2_1;
  HEAPF32[$0 + 60 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = 11;
  HEAP32[$0 + 76 >> 2] = 1;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 2;
  HEAP32[$0 >> 2] = 4620;
  HEAPF32[$0 + 40 >> 2] = $2_1;
  HEAPF32[$0 + 32 >> 2] = $1_1;
  HEAPF32[$0 + 36 >> 2] = $1_1;
  HEAPF32[$0 + 56 >> 2] = $1_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($2_1 * $2_1))));
 }
 
 function $128($0, $1_1, $2_1) {
  $145($0);
  HEAPF32[$0 + 64 >> 2] = $2_1;
  HEAPF32[$0 + 60 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = 11;
  HEAP32[$0 + 76 >> 2] = 2;
  HEAP32[$0 + 68 >> 2] = 1;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 >> 2] = 4720;
  HEAPF32[$0 + 36 >> 2] = $1_1;
  HEAPF32[$0 + 40 >> 2] = $1_1;
  HEAPF32[$0 + 32 >> 2] = $2_1;
  HEAPF32[$0 + 56 >> 2] = $1_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($2_1 * $2_1))));
 }
 
 function $129($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0);
  $4_1 = Math_fround(HEAPF32[$1_1 + 64 >> 2] * Math_fround(.5));
  $6_1 = HEAP32[$1_1 + 68 >> 2];
  $8_1 = HEAP32[$1_1 + 72 >> 2];
  $7_1 = $8_1 << 2;
  $3_1 = HEAPF32[$2_1 >> 2];
  $5_1 = Math_fround($3_1 * $3_1);
  $3_1 = HEAPF32[$2_1 + 4 >> 2];
  $5_1 = Math_fround($5_1 + Math_fround($3_1 * $3_1));
  $3_1 = HEAPF32[$2_1 + 8 >> 2];
  label$1 : {
   label$2 : {
    if (!!(HEAPF32[$7_1 + $2_1 >> 2] > Math_fround(HEAPF32[$1_1 + 56 >> 2] * Math_fround(Math_sqrt(Math_fround($5_1 + Math_fround($3_1 * $3_1))))))) {
     HEAP32[($6_1 << 2) + $0 >> 2] = 0;
     HEAPF32[$0 + $7_1 >> 2] = $4_1;
     $2_1 = HEAP32[$1_1 + 76 >> 2];
     break label$2;
    }
    $3_1 = HEAPF32[($6_1 << 2) + $2_1 >> 2];
    $7_1 = $2_1;
    $2_1 = HEAP32[$1_1 + 76 >> 2];
    $9_1 = HEAPF32[$7_1 + ($2_1 << 2) >> 2];
    $10 = Math_fround(Math_sqrt(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($9_1 * $9_1))));
    if (!!($10 > Math_fround(1.1920928955078125e-07))) {
     $5_1 = $3_1;
     $3_1 = Math_fround(HEAPF32[$1_1 + 60 >> 2] / $10);
     HEAPF32[($6_1 << 2) + $0 >> 2] = $5_1 * $3_1;
     HEAPF32[($8_1 << 2) + $0 >> 2] = -$4_1;
     $4_1 = Math_fround($9_1 * $3_1);
     break label$1;
    }
    HEAP32[($6_1 << 2) + $0 >> 2] = 0;
    HEAPF32[($8_1 << 2) + $0 >> 2] = -$4_1;
   }
   $4_1 = Math_fround(0.0);
  }
  HEAPF32[($2_1 << 2) + $0 >> 2] = $4_1;
 }
 
 function $130($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  if (($3_1 | 0) >= 1) {
   while (1) {
    $8_1 = Math_fround(HEAPF32[$0 + 64 >> 2] * Math_fround(.5));
    $6_1 = HEAP32[$0 + 68 >> 2];
    $7_1 = HEAP32[$0 + 72 >> 2] << 2;
    $4_1 = HEAPF32[$1_1 >> 2];
    $9_1 = Math_fround($4_1 * $4_1);
    $4_1 = HEAPF32[$1_1 + 4 >> 2];
    $9_1 = Math_fround($9_1 + Math_fround($4_1 * $4_1));
    $4_1 = HEAPF32[$1_1 + 8 >> 2];
    label$3 : {
     label$4 : {
      if (!!(HEAPF32[$7_1 + $1_1 >> 2] > Math_fround(HEAPF32[$0 + 56 >> 2] * Math_fround(Math_sqrt(Math_fround($9_1 + Math_fround($4_1 * $4_1))))))) {
       HEAP32[($6_1 << 2) + $5_1 >> 2] = 0;
       HEAPF32[$5_1 + $7_1 >> 2] = $8_1;
       $6_1 = HEAP32[$0 + 76 >> 2];
       break label$4;
      }
      $10 = $6_1 << 2;
      $4_1 = HEAPF32[$10 + $1_1 >> 2];
      $6_1 = HEAP32[$0 + 76 >> 2];
      $11 = HEAPF32[($6_1 << 2) + $1_1 >> 2];
      $12_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($11 * $11))));
      if (!!($12_1 > Math_fround(1.1920928955078125e-07))) {
       $9_1 = $4_1;
       $4_1 = Math_fround(HEAPF32[$0 + 60 >> 2] / $12_1);
       HEAPF32[$5_1 + $10 >> 2] = $9_1 * $4_1;
       HEAPF32[$5_1 + $7_1 >> 2] = -$8_1;
       $8_1 = Math_fround($11 * $4_1);
       break label$3;
      }
      HEAP32[$5_1 + $10 >> 2] = 0;
      HEAPF32[$5_1 + $7_1 >> 2] = -$8_1;
     }
     $8_1 = Math_fround(0.0);
    }
    HEAPF32[($6_1 << 2) + $5_1 >> 2] = $8_1;
    $6_1 = $5_1 + 8 | 0;
    $10 = HEAP32[$6_1 + 4 >> 2];
    $7_1 = $2_1 + 8 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $10;
    $7_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $7_1;
    $1_1 = $1_1 + 16 | 0;
    $2_1 = $2_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   }
  }
 }
 
 function $131($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10 = 0;
  $4_1 = Math_fround(HEAPF32[$1_1 + 64 >> 2] * Math_fround(.5));
  $9_1 = HEAP32[$1_1 + 68 >> 2];
  $10 = HEAP32[$1_1 + 72 >> 2];
  $7_1 = $10 << 2;
  $3_1 = HEAPF32[$2_1 >> 2];
  $6_1 = Math_fround($3_1 * $3_1);
  $3_1 = HEAPF32[$2_1 + 4 >> 2];
  $6_1 = Math_fround($6_1 + Math_fround($3_1 * $3_1));
  $3_1 = HEAPF32[$2_1 + 8 >> 2];
  label$1 : {
   label$2 : {
    if (!!(HEAPF32[$7_1 + $2_1 >> 2] > Math_fround(HEAPF32[$1_1 + 56 >> 2] * Math_fround(Math_sqrt(Math_fround($6_1 + Math_fround($3_1 * $3_1))))))) {
     HEAP32[($9_1 << 2) + $0 >> 2] = 0;
     HEAPF32[$0 + $7_1 >> 2] = $4_1;
     $7_1 = HEAP32[$1_1 + 76 >> 2];
     break label$2;
    }
    $3_1 = HEAPF32[($9_1 << 2) + $2_1 >> 2];
    $7_1 = HEAP32[$1_1 + 76 >> 2];
    $5_1 = HEAPF32[($7_1 << 2) + $2_1 >> 2];
    $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($5_1 * $5_1))));
    if (!!($8_1 > Math_fround(1.1920928955078125e-07))) {
     $6_1 = $3_1;
     $3_1 = Math_fround(HEAPF32[$1_1 + 60 >> 2] / $8_1);
     HEAPF32[($9_1 << 2) + $0 >> 2] = $6_1 * $3_1;
     HEAPF32[($10 << 2) + $0 >> 2] = -$4_1;
     $4_1 = Math_fround($5_1 * $3_1);
     break label$1;
    }
    HEAP32[($9_1 << 2) + $0 >> 2] = 0;
    HEAPF32[($10 << 2) + $0 >> 2] = -$4_1;
   }
   $4_1 = Math_fround(0.0);
  }
  HEAPF32[($7_1 << 2) + $0 >> 2] = $4_1;
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1)) != Math_fround(0.0)) {
   $4_1 = HEAPF32[$2_1 + 4 >> 2];
   $3_1 = HEAPF32[$2_1 >> 2];
   $5_1 = HEAPF32[$2_1 + 8 >> 2];
   $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
   $1_1 = Math_fround(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1)) + Math_fround($5_1 * $5_1)) < Math_fround(1.4210854715202004e-14);
   $3_1 = $1_1 ? Math_fround(-1.0) : $3_1;
   $6_1 = $3_1;
   $5_1 = $1_1 ? Math_fround(-1.0) : $5_1;
   $4_1 = $1_1 ? Math_fround(-1.0) : $4_1;
   $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1))))));
   HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($8_1 * Math_fround($6_1 * $3_1));
   HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + Math_fround($8_1 * Math_fround($4_1 * $3_1));
   HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + Math_fround($8_1 * Math_fround($5_1 * $3_1));
  }
 }
 
 function $132($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0);
  $2_1 = HEAP32[$0 + 72 >> 2] << 2;
  $4_1 = $0 + 16 | 0;
  $5_1 = Math_fround(HEAPF32[$0 + 64 >> 2] * Math_fround(HEAPF32[$2_1 + $1_1 >> 2] / HEAPF32[$2_1 + $4_1 >> 2]));
  HEAPF32[$0 + 64 >> 2] = $5_1;
  $2_1 = HEAP32[$0 + 68 >> 2] << 2;
  $3_1 = Math_fround(HEAPF32[$2_1 + $1_1 >> 2] / HEAPF32[$2_1 + $4_1 >> 2]);
  $2_1 = HEAP32[$0 + 76 >> 2] << 2;
  $3_1 = Math_fround(HEAPF32[$0 + 60 >> 2] * Math_fround(Math_fround($3_1 + Math_fround(HEAPF32[$2_1 + $1_1 >> 2] / HEAPF32[$2_1 + $4_1 >> 2])) * Math_fround(.5)));
  HEAPF32[$0 + 60 >> 2] = $3_1;
  HEAPF32[$0 + 56 >> 2] = $3_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($3_1 * $3_1))));
  $146($0, $1_1);
 }
 
 function $134($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $5_1 = $3_1 + 44 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 56 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 52 >> 2] = 1065353216;
  $5_1 = $3_1 + 76 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 72 >> 2] = 1065353216;
  $5_1 = $3_1 + 84 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 92 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 1065353216;
  HEAP32[$3_1 + 64 >> 2] = 0;
  HEAP32[$3_1 + 68 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  $8_1 = HEAPF32[$3_1 + 24 >> 2];
  $9_1 = HEAPF32[$3_1 + 8 >> 2];
  $6_1 = HEAPF32[$3_1 + 16 >> 2];
  $7_1 = HEAPF32[$3_1 >> 2];
  $10 = HEAPF32[$3_1 + 20 >> 2];
  $11 = HEAPF32[$3_1 + 4 >> 2];
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  HEAP32[$2_1 + 12 >> 2] = 0;
  $1_1 = Math_fround($1_1 * Math_fround(.0833333283662796));
  $6_1 = Math_fround($4_1 + Math_fround(Math_fround($7_1 - $6_1) * Math_fround(.5)));
  $6_1 = Math_fround($6_1 + $6_1);
  $6_1 = Math_fround($6_1 * $6_1);
  $7_1 = Math_fround($4_1 + Math_fround(Math_fround($11 - $10) * Math_fround(.5)));
  $7_1 = Math_fround($7_1 + $7_1);
  $7_1 = Math_fround($7_1 * $7_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($6_1 + $7_1);
  $4_1 = Math_fround($4_1 + Math_fround(Math_fround($9_1 - $8_1) * Math_fround(.5)));
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($6_1 + $4_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($7_1 + $4_1);
  global$0 = $3_1 + 96 | 0;
 }
 
 function $135($0) {
  $0 = $0 | 0;
  return 4896;
 }
 
 function $136($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1065353216;
 }
 
 function $138($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $98($0, $1_1, $2_1);
  HEAP32[$1_1 + 28 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$1_1 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
  HEAP32[$1_1 + 36 >> 2] = HEAP32[$0 + 40 >> 2];
  HEAP32[$1_1 + 40 >> 2] = HEAP32[$0 + 44 >> 2];
  HEAP32[$1_1 + 12 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
  HEAP32[$1_1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$1_1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP32[$1_1 + 44 >> 2] = HEAP32[$0 + 48 >> 2];
  $0 = HEAP32[$0 + 72 >> 2];
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = $0;
  return 4901;
 }
 
 function $140($0) {
  $0 = $0 | 0;
  return 4917;
 }
 
 function $141($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 8 >> 2] = 1065353216;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $143($0) {
  $0 = $0 | 0;
  return 4923;
 }
 
 function $144($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 1065353216;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $145($0) {
  var $1_1 = 0;
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 + 4 >> 2] = 35;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 3944;
  HEAP32[$0 + 48 >> 2] = 1025758986;
  $1_1 = $0 + 24 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 1065353216;
  HEAP32[$0 + 20 >> 2] = 1065353216;
  HEAP32[$0 >> 2] = 4940;
 }
 
 function $146($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0);
  $2_1 = HEAPF32[$1_1 >> 2];
  $3_1 = HEAPF32[$1_1 + 4 >> 2];
  $4_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAP32[$0 + 28 >> 2] = 0;
  HEAPF32[$0 + 24 >> 2] = Math_abs($4_1);
  HEAPF32[$0 + 20 >> 2] = Math_abs($3_1);
  HEAPF32[$0 + 16 >> 2] = Math_abs($2_1);
 }
 
 function $147($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10 = 0, $11 = Math_fround(0);
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $11 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $10 = $4_1 + 72 | 0;
  while (1) {
   HEAP32[$10 >> 2] = 0;
   HEAP32[$10 + 4 >> 2] = 0;
   HEAP32[$4_1 + 64 >> 2] = 0;
   HEAP32[$4_1 + 68 >> 2] = 0;
   $9_1 = ($4_1 - -64 | 0) + $8_1 | 0;
   HEAP32[$9_1 >> 2] = 1065353216;
   HEAP32[$4_1 + 44 >> 2] = 0;
   $5_1 = HEAPF32[$4_1 + 64 >> 2];
   $6_1 = HEAPF32[$4_1 + 68 >> 2];
   $7_1 = HEAPF32[$10 >> 2];
   HEAPF32[$4_1 + 40 >> 2] = Math_fround(Math_fround($5_1 * HEAPF32[$1_1 + 8 >> 2]) + Math_fround($6_1 * HEAPF32[$1_1 + 24 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 40 >> 2]);
   HEAPF32[$4_1 + 36 >> 2] = Math_fround(Math_fround($5_1 * HEAPF32[$1_1 + 4 >> 2]) + Math_fround($6_1 * HEAPF32[$1_1 + 20 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 36 >> 2]);
   HEAPF32[$4_1 + 32 >> 2] = Math_fround(Math_fround($5_1 * HEAPF32[$1_1 >> 2]) + Math_fround($6_1 * HEAPF32[$1_1 + 16 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 32 >> 2]);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($4_1 + 48 | 0, $0, $4_1 + 32 | 0);
   HEAP32[$4_1 + 44 >> 2] = 0;
   $5_1 = HEAPF32[$4_1 + 48 >> 2];
   $6_1 = HEAPF32[$4_1 + 52 >> 2];
   $7_1 = HEAPF32[$4_1 + 56 >> 2];
   HEAPF32[$4_1 + 40 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * HEAPF32[$1_1 + 32 >> 2]) + Math_fround($6_1 * HEAPF32[$1_1 + 36 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 40 >> 2])) + HEAPF32[$1_1 + 56 >> 2];
   HEAPF32[$4_1 + 36 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * HEAPF32[$1_1 + 16 >> 2]) + Math_fround($6_1 * HEAPF32[$1_1 + 20 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 24 >> 2])) + HEAPF32[$1_1 + 52 >> 2];
   HEAPF32[$4_1 + 32 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * HEAPF32[$1_1 >> 2]) + Math_fround($6_1 * HEAPF32[$1_1 + 4 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 8 >> 2])) + HEAPF32[$1_1 + 48 >> 2];
   HEAP32[$9_1 >> 2] = -1082130432;
   $9_1 = ($4_1 + 32 | 0) + $8_1 | 0;
   HEAPF32[$3_1 + $8_1 >> 2] = $11 + HEAPF32[$9_1 >> 2];
   HEAP32[$4_1 + 12 >> 2] = 0;
   $5_1 = HEAPF32[$4_1 + 64 >> 2];
   $6_1 = HEAPF32[$4_1 + 68 >> 2];
   $7_1 = HEAPF32[$10 >> 2];
   HEAPF32[$4_1 + 8 >> 2] = Math_fround(Math_fround($5_1 * HEAPF32[$1_1 + 8 >> 2]) + Math_fround($6_1 * HEAPF32[$1_1 + 24 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 40 >> 2]);
   HEAPF32[$4_1 + 4 >> 2] = Math_fround(Math_fround($5_1 * HEAPF32[$1_1 + 4 >> 2]) + Math_fround($6_1 * HEAPF32[$1_1 + 20 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 36 >> 2]);
   HEAPF32[$4_1 >> 2] = Math_fround(Math_fround($5_1 * HEAPF32[$1_1 >> 2]) + Math_fround($6_1 * HEAPF32[$1_1 + 16 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 32 >> 2]);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($4_1 + 16 | 0, $0, $4_1);
   HEAP32[$4_1 + 44 >> 2] = 0;
   $5_1 = HEAPF32[$4_1 + 16 >> 2];
   $6_1 = HEAPF32[$4_1 + 20 >> 2];
   $7_1 = HEAPF32[$4_1 + 24 >> 2];
   HEAPF32[$4_1 + 40 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * HEAPF32[$1_1 + 32 >> 2]) + Math_fround($6_1 * HEAPF32[$1_1 + 36 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 40 >> 2])) + HEAPF32[$1_1 + 56 >> 2];
   HEAPF32[$4_1 + 36 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * HEAPF32[$1_1 + 16 >> 2]) + Math_fround($6_1 * HEAPF32[$1_1 + 20 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 24 >> 2])) + HEAPF32[$1_1 + 52 >> 2];
   HEAPF32[$4_1 + 32 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * HEAPF32[$1_1 >> 2]) + Math_fround($6_1 * HEAPF32[$1_1 + 4 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 8 >> 2])) + HEAPF32[$1_1 + 48 >> 2];
   HEAPF32[$2_1 + $8_1 >> 2] = HEAPF32[$9_1 >> 2] - $11;
   $8_1 = $8_1 + 4 | 0;
   if (($8_1 | 0) != 12) {
    continue
   }
   break;
  };
  global$0 = $4_1 + 80 | 0;
 }
 
 function $148($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($0, $1_1, $2_1);
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1)) != Math_fround(0.0)) {
   $4_1 = HEAPF32[$2_1 + 4 >> 2];
   $3_1 = HEAPF32[$2_1 >> 2];
   $5_1 = HEAPF32[$2_1 + 8 >> 2];
   $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
   $1_1 = Math_fround(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1)) + Math_fround($5_1 * $5_1)) < Math_fround(1.4210854715202004e-14);
   $3_1 = $1_1 ? Math_fround(-1.0) : $3_1;
   $7_1 = $3_1;
   $5_1 = $1_1 ? Math_fround(-1.0) : $5_1;
   $4_1 = $1_1 ? Math_fround(-1.0) : $4_1;
   $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1))))));
   HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($6_1 * Math_fround($7_1 * $3_1));
   HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + Math_fround($6_1 * Math_fround($4_1 * $3_1));
   HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + Math_fround($6_1 * Math_fround($5_1 * $3_1));
  }
 }
 
 function $150($0) {
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 5076;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1_1 = $0 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1_1 = $0 + 28 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  $0 = $0 + 48 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $151($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  HEAP32[$0 >> 2] = 5076;
  $1_1 = HEAP32[$0 + 56 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 60 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $2_1 = HEAP32[$0 + 28 >> 2];
  if (($2_1 | 0) >= 1) {
   $3_1 = 8;
   while (1) {
    $1_1 = HEAP32[$0 + 36 >> 2] + $3_1 | 0;
    $6_1 = $1_1 + -4 | 0;
    $4_1 = $1_1 + 4 | 0;
    $5_1 = HEAP32[$4_1 >> 2];
    if ($5_1) {
     if (HEAPU8[$1_1 + 8 | 0]) {
      $80($5_1)
     }
     HEAP32[$4_1 >> 2] = 0;
    }
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP8[$1_1 + 8 | 0] = 1;
    $3_1 = $3_1 + 36 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  $1_1 = HEAP32[$0 + 36 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 40 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1_1 = HEAP32[$0 + 16 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 20 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  return $0 | 0;
 }
 
 function $152($0) {
  $0 = $0 | 0;
  $80($151($0));
 }
 
 function $153($0) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = HEAP32[$0 + 28 >> 2];
  $9_1 = ($7_1 | 0) < 1;
  while (1) {
   label$2 : {
    if ($5_1 >>> 0 > 7) {
     break label$2
    }
    label$3 : {
     switch ($5_1 - 1 | 0) {
     default:
      $1_1 = Math_fround(HEAPF32[$0 + 88 >> 2] + HEAPF32[$0 + 72 >> 2]);
      $2_1 = Math_fround(HEAPF32[$0 + 84 >> 2] + HEAPF32[$0 + 68 >> 2]);
      $3_1 = Math_fround(HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 64 >> 2]);
      break label$2;
     case 0:
      $1_1 = Math_fround(HEAPF32[$0 + 72 >> 2] - HEAPF32[$0 + 88 >> 2]);
      $2_1 = Math_fround(HEAPF32[$0 + 84 >> 2] + HEAPF32[$0 + 68 >> 2]);
      $3_1 = Math_fround(HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 64 >> 2]);
      break label$2;
     case 1:
      $1_1 = Math_fround(HEAPF32[$0 + 88 >> 2] + HEAPF32[$0 + 72 >> 2]);
      $2_1 = Math_fround(HEAPF32[$0 + 68 >> 2] - HEAPF32[$0 + 84 >> 2]);
      $3_1 = Math_fround(HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 64 >> 2]);
      break label$2;
     case 2:
      $1_1 = Math_fround(HEAPF32[$0 + 72 >> 2] - HEAPF32[$0 + 88 >> 2]);
      $2_1 = Math_fround(HEAPF32[$0 + 68 >> 2] - HEAPF32[$0 + 84 >> 2]);
      $3_1 = Math_fround(HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 64 >> 2]);
      break label$2;
     case 3:
      $1_1 = Math_fround(HEAPF32[$0 + 88 >> 2] + HEAPF32[$0 + 72 >> 2]);
      $2_1 = Math_fround(HEAPF32[$0 + 84 >> 2] + HEAPF32[$0 + 68 >> 2]);
      $3_1 = Math_fround(HEAPF32[$0 + 64 >> 2] - HEAPF32[$0 + 80 >> 2]);
      break label$2;
     case 4:
      $1_1 = Math_fround(HEAPF32[$0 + 72 >> 2] - HEAPF32[$0 + 88 >> 2]);
      $2_1 = Math_fround(HEAPF32[$0 + 84 >> 2] + HEAPF32[$0 + 68 >> 2]);
      $3_1 = Math_fround(HEAPF32[$0 + 64 >> 2] - HEAPF32[$0 + 80 >> 2]);
      break label$2;
     case 5:
      $1_1 = Math_fround(HEAPF32[$0 + 88 >> 2] + HEAPF32[$0 + 72 >> 2]);
      $2_1 = Math_fround(HEAPF32[$0 + 68 >> 2] - HEAPF32[$0 + 84 >> 2]);
      $3_1 = Math_fround(HEAPF32[$0 + 64 >> 2] - HEAPF32[$0 + 80 >> 2]);
      break label$2;
     case 6:
      break label$3;
     };
    }
    $1_1 = Math_fround(HEAPF32[$0 + 72 >> 2] - HEAPF32[$0 + 88 >> 2]);
    $2_1 = Math_fround(HEAPF32[$0 + 68 >> 2] - HEAPF32[$0 + 84 >> 2]);
    $3_1 = Math_fround(HEAPF32[$0 + 64 >> 2] - HEAPF32[$0 + 80 >> 2]);
   }
   label$11 : {
    if (!$9_1) {
     $4_1 = HEAP32[$0 + 36 >> 2] + 20 | 0;
     $8_1 = 0;
     $6_1 = 0;
     while (1) {
      if (!!(Math_fround(HEAPF32[$4_1 + 12 >> 2] + Math_fround(Math_fround(Math_fround($3_1 * HEAPF32[$4_1 >> 2]) + Math_fround($2_1 * HEAPF32[$4_1 + 4 >> 2])) + Math_fround($1_1 * HEAPF32[$4_1 + 8 >> 2]))) > Math_fround(0.0))) {
       break label$11
      }
      $4_1 = $4_1 + 36 | 0;
      $6_1 = $6_1 + 1 | 0;
      if (($6_1 | 0) < ($7_1 | 0)) {
       continue
      }
      break;
     };
    }
    $8_1 = 1;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != 8) {
     continue
    }
   }
   break;
  };
  return $8_1;
 }
 
 function $154($0) {
  var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10 = Math_fround(0), $11 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  HEAP32[$0 + 64 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP8[$3_1 + 52 | 0] = 1;
  HEAP32[$3_1 + 48 >> 2] = 0;
  HEAP8[$3_1 + 72 | 0] = 1;
  $1_1 = $3_1 + 40 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 68 >> 2] = 0;
  HEAP8[$3_1 + 92 | 0] = 1;
  $1_1 = $3_1 + 60 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 88 >> 2] = 0;
  $1_1 = $3_1 + 80 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 72 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 28 >> 2] = 0;
  HEAP8[$3_1 + 32 | 0] = 1;
  HEAP32[$3_1 + 20 >> 2] = 0;
  HEAP32[$3_1 + 24 >> 2] = 0;
  $15_1 = HEAP32[$0 + 28 >> 2];
  label$1 : {
   if (($15_1 | 0) < 1) {
    break label$1
   }
   while (1) {
    $4_1 = HEAP32[$0 + 36 >> 2];
    $22_1 = Math_imul($17_1, 36);
    $23_1 = HEAP32[($4_1 + $22_1 | 0) + 4 >> 2];
    if (($23_1 | 0) >= 1) {
     $26_1 = 0;
     while (1) {
      $1_1 = HEAP32[($4_1 + $22_1 | 0) + 12 >> 2];
      $9_1 = HEAP32[$1_1 + ($26_1 << 2) >> 2];
      HEAP16[$3_1 + 8 >> 1] = $9_1;
      $26_1 = $26_1 + 1 | 0;
      $15_1 = ($23_1 | 0) == ($26_1 | 0);
      $5_1 = HEAP32[$1_1 + (($15_1 ? 0 : $26_1) << 2) >> 2];
      HEAP16[$3_1 + 10 >> 1] = $5_1;
      $27_1 = 0;
      $1_1 = $5_1 << 16 >> 16;
      $7_1 = $9_1 << 16 >> 16;
      if (($1_1 | 0) > ($7_1 | 0)) {
       HEAP16[$3_1 + 10 >> 1] = $9_1;
       HEAP16[$3_1 + 8 >> 1] = $5_1;
       $7_1 = $5_1;
       $1_1 = $9_1;
      }
      $24_1 = $1_1 << 16;
      $12_1 = $7_1 << 16 >> 16;
      $5_1 = $24_1 + $12_1 & HEAP32[$3_1 + 64 >> 2] + -1;
      label$6 : {
       if ($5_1 >>> 0 >= HEAPU32[$3_1 + 20 >> 2]) {
        break label$6
       }
       $4_1 = HEAP32[HEAP32[$3_1 + 28 >> 2] + ($5_1 << 2) >> 2];
       if (($4_1 | 0) == -1) {
        break label$6
       }
       $11 = HEAP32[$3_1 + 48 >> 2];
       $9_1 = HEAP32[$3_1 + 88 >> 2];
       while (1) {
        $25 = $4_1 << 2;
        $5_1 = $25 + $9_1 | 0;
        if (!(HEAPU16[$5_1 + 2 >> 1] == ($1_1 & 65535) ? HEAPU16[$5_1 >> 1] == ($7_1 & 65535) : 0)) {
         $4_1 = HEAP32[$11 + $25 >> 2];
         if (($4_1 | 0) != -1) {
          continue
         }
         break label$6;
        }
        break;
       };
       $27_1 = $25 + HEAP32[$3_1 + 68 >> 2] | 0;
      }
      $1_1 = HEAP32[$0 + 16 >> 2];
      $5_1 = $1_1 + ($24_1 >> 16 << 4) | 0;
      $1_1 = $1_1 + ($12_1 << 4) | 0;
      $2_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] - HEAPF32[$1_1 + 8 >> 2]);
      $10 = $2_1;
      $6_1 = Math_fround(HEAPF32[$5_1 >> 2] - HEAPF32[$1_1 >> 2]);
      $8_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] - HEAPF32[$1_1 + 4 >> 2]);
      $2_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($8_1 * $8_1)) + Math_fround($2_1 * $2_1)))));
      $10 = Math_fround($10 * $2_1);
      $13_1 = Math_fround($8_1 * $2_1);
      $14 = Math_fround($6_1 * $2_1);
      $7_1 = HEAP32[$0 + 48 >> 2];
      label$10 : {
       if (($7_1 | 0) >= 1) {
        $4_1 = HEAP32[$0 + 56 >> 2];
        $16_1 = 0;
        while (1) {
         $6_1 = HEAPF32[$4_1 + 8 >> 2];
         $2_1 = HEAPF32[$4_1 >> 2];
         $8_1 = HEAPF32[$4_1 + 4 >> 2];
         if ((+Math_fround(Math_abs(Math_fround($6_1 - $10))) > 1.0e-06 ^ 1 ? !(+Math_fround(Math_abs(Math_fround($2_1 - $14))) > 1.0e-06 | +Math_fround(Math_abs(Math_fround($8_1 - $13_1))) > 1.0e-06) : 0) | (+Math_fround(Math_abs(Math_fround($10 + $6_1))) > 1.0e-06 ^ 1 ? !(+Math_fround(Math_abs(Math_fround($14 + $2_1))) > 1.0e-06 | +Math_fround(Math_abs(Math_fround($13_1 + $8_1))) > 1.0e-06) : 0)) {
          break label$10
         }
         $4_1 = $4_1 + 16 | 0;
         $16_1 = $16_1 + 1 | 0;
         if (($16_1 | 0) < ($7_1 | 0)) {
          continue
         }
         break;
        };
       }
       label$15 : {
        if (HEAP32[$0 + 52 >> 2] != ($7_1 | 0)) {
         break label$15
        }
        $11 = $7_1 ? $7_1 << 1 : 1;
        if (($7_1 | 0) >= ($11 | 0)) {
         break label$15
        }
        label$16 : {
         if (!$11) {
          $12_1 = 0;
          break label$16;
         }
         $12_1 = $79($11 << 4);
         $7_1 = HEAP32[$0 + 48 >> 2];
        }
        if (($7_1 | 0) >= 1) {
         $4_1 = 0;
         while (1) {
          $5_1 = HEAP32[$0 + 56 >> 2] + $4_1 | 0;
          $1_1 = HEAP32[$5_1 + 4 >> 2];
          $9_1 = $4_1 + $12_1 | 0;
          HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
          HEAP32[$9_1 + 4 >> 2] = $1_1;
          $5_1 = $5_1 + 8 | 0;
          $1_1 = HEAP32[$5_1 + 4 >> 2];
          $9_1 = $9_1 + 8 | 0;
          HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
          HEAP32[$9_1 + 4 >> 2] = $1_1;
          $4_1 = $4_1 + 16 | 0;
          $7_1 = $7_1 + -1 | 0;
          if ($7_1) {
           continue
          }
          break;
         };
        }
        $1_1 = HEAP32[$0 + 56 >> 2];
        if ($1_1) {
         if (HEAPU8[$0 + 60 | 0]) {
          $80($1_1)
         }
         HEAP32[$0 + 56 >> 2] = 0;
        }
        HEAP32[$0 + 56 >> 2] = $12_1;
        HEAP8[$0 + 60 | 0] = 1;
        HEAP32[$0 + 52 >> 2] = $11;
        $7_1 = HEAP32[$0 + 48 >> 2];
       }
       $1_1 = HEAP32[$0 + 56 >> 2] + ($7_1 << 4) | 0;
       HEAP32[$1_1 + 12 >> 2] = 0;
       HEAPF32[$1_1 + 8 >> 2] = $10;
       HEAPF32[$1_1 + 4 >> 2] = $13_1;
       HEAPF32[$1_1 >> 2] = $14;
       HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] + 1;
      }
      label$22 : {
       if ($27_1) {
        HEAP16[$27_1 + 2 >> 1] = $17_1;
        break label$22;
       }
       HEAP16[$3_1 >> 1] = $17_1;
       HEAP16[$3_1 + 2 >> 1] = 65535;
       $155($3_1 + 16 | 0, $3_1 + 8 | 0, $3_1);
      }
      if (!$15_1) {
       $4_1 = HEAP32[$0 + 36 >> 2];
       continue;
      }
      break;
     };
     $15_1 = HEAP32[$0 + 28 >> 2];
    }
    $17_1 = $17_1 + 1 | 0;
    if (($17_1 | 0) < ($15_1 | 0)) {
     continue
    }
    break;
   };
   $25 = 0;
   if (($15_1 | 0) < 1) {
    break label$1
   }
   $25 = ($15_1 | 0) > 0;
   $22_1 = HEAP32[$0 + 16 >> 2];
   $9_1 = HEAP32[$0 + 36 >> 2];
   $17_1 = 0;
   while (1) {
    $1_1 = $9_1 + Math_imul($17_1, 36) | 0;
    $23_1 = HEAP32[$1_1 + 4 >> 2];
    if (($23_1 | 0) >= 3) {
     $24_1 = HEAP32[$1_1 + 12 >> 2];
     $4_1 = $24_1 + 4 | 0;
     $12_1 = $22_1 + (HEAP32[$24_1 >> 2] << 4) | 0;
     $5_1 = $12_1 + 8 | 0;
     $1_1 = $12_1 + 4 | 0;
     $18_1 = HEAPF32[$0 + 72 >> 2];
     $19_1 = HEAPF32[$0 + 68 >> 2];
     $20 = HEAPF32[$0 + 64 >> 2];
     $16_1 = 2;
     while (1) {
      $11 = $22_1 + (HEAP32[$4_1 >> 2] << 4) | 0;
      $31_1 = HEAPF32[$11 + 8 >> 2];
      $7_1 = $22_1 + (HEAP32[$24_1 + (($16_1 | 0) % ($23_1 | 0) << 2) >> 2] << 4) | 0;
      $32 = HEAPF32[$7_1 + 8 >> 2];
      $28_1 = HEAPF32[$12_1 >> 2];
      $33_1 = HEAPF32[$11 >> 2];
      $34 = Math_fround($28_1 - $33_1);
      $29_1 = HEAPF32[$1_1 >> 2];
      $35 = HEAPF32[$7_1 + 4 >> 2];
      $10 = Math_fround($29_1 - $35);
      $13_1 = HEAPF32[$11 + 4 >> 2];
      $2_1 = Math_fround($29_1 - $13_1);
      $14 = HEAPF32[$7_1 >> 2];
      $6_1 = Math_fround($28_1 - $14);
      $36_1 = Math_fround(Math_fround($34 * $10) - Math_fround($2_1 * $6_1));
      $30 = HEAPF32[$5_1 >> 2];
      $8_1 = Math_fround($30 - $32);
      $37_1 = Math_fround($2_1 * $8_1);
      $2_1 = Math_fround($30 - $31_1);
      $10 = Math_fround($37_1 - Math_fround($2_1 * $10));
      $2_1 = Math_fround(Math_fround($2_1 * $6_1) - Math_fround($34 * $8_1));
      $2_1 = Math_fround(Math_fround(Math_sqrt(Math_fround(Math_fround($36_1 * $36_1) + Math_fround(Math_fround($10 * $10) + Math_fround($2_1 * $2_1))))) * Math_fround(.5));
      $18_1 = Math_fround($18_1 + Math_fround(Math_fround(Math_fround(Math_fround($30 + $31_1) + $32) * Math_fround(.3333333432674408)) * $2_1));
      HEAPF32[$0 + 72 >> 2] = $18_1;
      $19_1 = Math_fround($19_1 + Math_fround(Math_fround(Math_fround($35 + Math_fround($29_1 + $13_1)) * Math_fround(.3333333432674408)) * $2_1));
      HEAPF32[$0 + 68 >> 2] = $19_1;
      $20 = Math_fround($20 + Math_fround(Math_fround(Math_fround($14 + Math_fround($28_1 + $33_1)) * Math_fround(.3333333432674408)) * $2_1));
      HEAPF32[$0 + 64 >> 2] = $20;
      $21 = Math_fround($21 + $2_1);
      $4_1 = $4_1 + 4 | 0;
      $16_1 = $16_1 + 1 | 0;
      if (($23_1 | 0) != ($16_1 | 0)) {
       continue
      }
      break;
     };
    }
    $17_1 = $17_1 + 1 | 0;
    if (($17_1 | 0) != ($15_1 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 96 >> 2] = 2139095039;
  $2_1 = Math_fround(Math_fround(1.0) / $21);
  $10 = Math_fround($2_1 * HEAPF32[$0 + 64 >> 2]);
  HEAPF32[$0 + 64 >> 2] = $10;
  $13_1 = Math_fround($2_1 * HEAPF32[$0 + 68 >> 2]);
  HEAPF32[$0 + 68 >> 2] = $13_1;
  $14 = Math_fround($2_1 * HEAPF32[$0 + 72 >> 2]);
  HEAPF32[$0 + 72 >> 2] = $14;
  $6_1 = Math_fround(3402823466385288598117041.0e14);
  $8_1 = Math_fround(3402823466385288598117041.0e14);
  if ($25) {
   $4_1 = HEAP32[$0 + 36 >> 2] + 20 | 0;
   while (1) {
    $2_1 = Math_fround(Math_abs(Math_fround(HEAPF32[$4_1 + 12 >> 2] + Math_fround(Math_fround(Math_fround($10 * HEAPF32[$4_1 >> 2]) + Math_fround($13_1 * HEAPF32[$4_1 + 4 >> 2])) + Math_fround($14 * HEAPF32[$4_1 + 8 >> 2])))));
    if (!!($2_1 < $8_1)) {
     HEAPF32[$0 + 96 >> 2] = $2_1;
     $8_1 = $2_1;
    }
    $4_1 = $4_1 + 36 | 0;
    $15_1 = $15_1 + -1 | 0;
    if ($15_1) {
     continue
    }
    break;
   };
  }
  $1_1 = HEAP32[$0 + 8 >> 2];
  label$31 : {
   if (($1_1 | 0) < 1) {
    $10 = Math_fround(-3402823466385288598117041.0e14);
    $18_1 = Math_fround(3402823466385288598117041.0e14);
    $19_1 = Math_fround(-3402823466385288598117041.0e14);
    $20 = Math_fround(-3402823466385288598117041.0e14);
    $21 = Math_fround(3402823466385288598117041.0e14);
    break label$31;
   }
   $4_1 = HEAP32[$0 + 16 >> 2];
   $20 = Math_fround(-3402823466385288598117041.0e14);
   $16_1 = 0;
   $21 = Math_fround(3402823466385288598117041.0e14);
   $19_1 = Math_fround(-3402823466385288598117041.0e14);
   $10 = Math_fround(-3402823466385288598117041.0e14);
   $18_1 = Math_fround(3402823466385288598117041.0e14);
   while (1) {
    $2_1 = HEAPF32[$4_1 + 8 >> 2];
    $20 = $2_1 > $20 ? $2_1 : $20;
    $18_1 = $2_1 < $18_1 ? $2_1 : $18_1;
    $2_1 = HEAPF32[$4_1 + 4 >> 2];
    $19_1 = $2_1 > $19_1 ? $2_1 : $19_1;
    $6_1 = $2_1 < $6_1 ? $2_1 : $6_1;
    $2_1 = HEAPF32[$4_1 >> 2];
    $10 = $2_1 > $10 ? $2_1 : $10;
    $21 = $2_1 < $21 ? $2_1 : $21;
    $4_1 = $4_1 + 16 | 0;
    $16_1 = $16_1 + 1 | 0;
    if (($16_1 | 0) < ($1_1 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 128 >> 2] = 0;
  $13_1 = Math_fround($20 - $18_1);
  HEAPF32[$0 + 124 >> 2] = $13_1;
  $14 = Math_fround($19_1 - $6_1);
  HEAPF32[$0 + 120 >> 2] = $14;
  $2_1 = Math_fround($10 - $21);
  HEAPF32[$0 + 116 >> 2] = $2_1;
  HEAP32[$0 + 112 >> 2] = 0;
  HEAPF32[$0 + 108 >> 2] = $18_1 + $20;
  HEAPF32[$0 + 104 >> 2] = $6_1 + $19_1;
  HEAPF32[$0 + 100 >> 2] = $10 + $21;
  $5_1 = $2_1 < $14 ? ($14 < $13_1 ? 2 : 1) : ($2_1 < $13_1) << 1;
  $1_1 = $5_1 << 2;
  $2_1 = HEAPF32[$1_1 + ($0 + 116 | 0) >> 2];
  $6_1 = Math_fround($8_1 / Math_fround(1.7320507764816284));
  HEAPF32[$0 + 88 >> 2] = $6_1;
  HEAPF32[$0 + 80 >> 2] = $6_1;
  HEAPF32[$0 + 84 >> 2] = $6_1;
  $1_1 = $1_1 + ($0 + 80 | 0) | 0;
  $8_1 = Math_fround($2_1 * Math_fround(.5));
  HEAPF32[$1_1 >> 2] = $8_1;
  $2_1 = Math_fround(Math_fround($8_1 - $6_1) * Math_fround(.0009765625));
  $4_1 = 1024;
  label$34 : {
   label$35 : {
    while (1) {
     if ($153($0)) {
      break label$35
     }
     $8_1 = Math_fround($8_1 - $2_1);
     HEAPF32[$1_1 >> 2] = $8_1;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue
     }
     break;
    };
    HEAPF32[$0 + 84 >> 2] = $6_1;
    HEAPF32[$0 + 88 >> 2] = $6_1;
    HEAPF32[$0 + 80 >> 2] = $6_1;
    break label$34;
   }
   $1_1 = $0 + 80 | 0;
   $5_1 = 1 << $5_1 & 3;
   $11 = $1_1 + ((1 << $5_1 & 3) << 2) | 0;
   $12_1 = HEAP32[$11 >> 2];
   $9_1 = $1_1 + ($5_1 << 2) | 0;
   $1_1 = $9_1;
   $5_1 = HEAP32[$1_1 >> 2];
   $8_1 = Math_fround(Math_fround(HEAPF32[$0 + 96 >> 2] - $6_1) * Math_fround(.0009765625));
   HEAPF32[$1_1 >> 2] = $8_1 + HEAPF32[$1_1 >> 2];
   $6_1 = Math_fround($8_1 + HEAPF32[$11 >> 2]);
   HEAPF32[$11 >> 2] = $6_1;
   if ($153($0)) {
    $7_1 = 1024;
    while (1) {
     $2_1 = $6_1;
     $7_1 = $7_1 + -1 | 0;
     if (!$7_1) {
      break label$34
     }
     $5_1 = HEAP32[$9_1 >> 2];
     HEAPF32[$9_1 >> 2] = $8_1 + HEAPF32[$9_1 >> 2];
     $6_1 = Math_fround($8_1 + HEAPF32[$11 >> 2]);
     HEAPF32[$11 >> 2] = $6_1;
     if ($153($0)) {
      continue
     }
     break;
    };
    $12_1 = (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(0));
   }
   HEAP32[$9_1 >> 2] = $5_1;
   HEAP32[$11 >> 2] = $12_1;
  }
  $0 = HEAP32[$3_1 + 88 >> 2];
  if ($0) {
   if (HEAPU8[$3_1 + 92 | 0]) {
    $80($0)
   }
   HEAP32[$3_1 + 88 >> 2] = 0;
  }
  HEAP32[$3_1 + 88 >> 2] = 0;
  HEAP8[$3_1 + 92 | 0] = 1;
  HEAP32[$3_1 + 80 >> 2] = 0;
  HEAP32[$3_1 + 84 >> 2] = 0;
  $0 = HEAP32[$3_1 + 68 >> 2];
  if ($0) {
   if (HEAPU8[$3_1 + 72 | 0]) {
    $80($0)
   }
   HEAP32[$3_1 + 68 >> 2] = 0;
  }
  HEAP32[$3_1 + 68 >> 2] = 0;
  HEAP8[$3_1 + 72 | 0] = 1;
  HEAP32[$3_1 + 60 >> 2] = 0;
  HEAP32[$3_1 + 64 >> 2] = 0;
  $0 = HEAP32[$3_1 + 48 >> 2];
  if ($0) {
   if (HEAPU8[$3_1 + 52 | 0]) {
    $80($0)
   }
   HEAP32[$3_1 + 48 >> 2] = 0;
  }
  HEAP32[$3_1 + 48 >> 2] = 0;
  HEAP8[$3_1 + 52 | 0] = 1;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 44 >> 2] = 0;
  $0 = HEAP32[$3_1 + 28 >> 2];
  if ($0) {
   if (HEAPU8[$3_1 + 32 | 0]) {
    $80($0)
   }
   HEAP32[$3_1 + 28 >> 2] = 0;
  }
  global$0 = $3_1 + 96 | 0;
 }
 
 function $155($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0;
  label$1 : {
   $5_1 = HEAP16[$1_1 >> 1];
   $4_1 = HEAPU16[$1_1 + 2 >> 1];
   $9_1 = HEAP32[$0 + 48 >> 2];
   $11 = $5_1 + ($4_1 << 16) & $9_1 + -1;
   label$2 : {
    if ($11 >>> 0 >= HEAPU32[$0 + 4 >> 2]) {
     break label$2
    }
    $3_1 = HEAP32[HEAP32[$0 + 12 >> 2] + ($11 << 2) >> 2];
    if (($3_1 | 0) == -1) {
     break label$2
    }
    $7_1 = HEAP32[$0 + 72 >> 2];
    $5_1 = $5_1 & 65535;
    while (1) {
     $8_1 = $3_1 << 2;
     $6_1 = $8_1 + $7_1 | 0;
     if (HEAPU16[$6_1 + 2 >> 1] == ($4_1 | 0) ? HEAPU16[$6_1 >> 1] == ($5_1 | 0) : 0) {
      break label$1
     }
     $3_1 = HEAP32[$8_1 + HEAP32[$0 + 32 >> 2] >> 2];
     if (($3_1 | 0) != -1) {
      continue
     }
     break;
    };
   }
   $8_1 = HEAP32[$0 + 44 >> 2];
   $3_1 = $8_1;
   label$5 : {
    if (($3_1 | 0) != ($9_1 | 0)) {
     break label$5
    }
    $3_1 = $9_1;
    $7_1 = $3_1 ? $3_1 << 1 : 1;
    if (($3_1 | 0) >= ($7_1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$7_1) {
      $5_1 = 0;
      $3_1 = $9_1;
      break label$6;
     }
     $5_1 = $79($7_1 << 2);
     $3_1 = HEAP32[$0 + 44 >> 2];
    }
    $4_1 = $3_1;
    if (($4_1 | 0) >= 1) {
     $3_1 = 0;
     while (1) {
      $6_1 = $3_1 + $5_1 | 0;
      $10 = HEAP32[$0 + 52 >> 2] + $3_1 | 0;
      $10 = HEAPU16[$10 >> 1] | HEAPU16[$10 + 2 >> 1] << 16;
      HEAP16[$6_1 >> 1] = $10;
      HEAP16[$6_1 + 2 >> 1] = $10 >>> 16;
      $3_1 = $3_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break;
     };
    }
    $3_1 = HEAP32[$0 + 52 >> 2];
    if ($3_1) {
     if (HEAPU8[$0 + 56 | 0]) {
      $80($3_1)
     }
     HEAP32[$0 + 52 >> 2] = 0;
    }
    HEAP32[$0 + 52 >> 2] = $5_1;
    HEAP32[$0 + 48 >> 2] = $7_1;
    HEAP8[$0 + 56 | 0] = 1;
    $3_1 = HEAP32[$0 + 44 >> 2];
   }
   $3_1 = HEAP32[$0 + 52 >> 2] + ($3_1 << 2) | 0;
   $2_1 = HEAPU16[$2_1 >> 1] | HEAPU16[$2_1 + 2 >> 1] << 16;
   HEAP16[$3_1 >> 1] = $2_1;
   HEAP16[$3_1 + 2 >> 1] = $2_1 >>> 16;
   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + 1;
   $4_1 = HEAP32[$0 - -64 >> 2];
   label$12 : {
    if (($4_1 | 0) != HEAP32[$0 + 68 >> 2]) {
     break label$12
    }
    $2_1 = $4_1 ? $4_1 << 1 : 1;
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$12
    }
    label$13 : {
     if (!$2_1) {
      $5_1 = 0;
      break label$13;
     }
     $5_1 = $79($2_1 << 2);
     $4_1 = HEAP32[$0 + 64 >> 2];
    }
    if (($4_1 | 0) >= 1) {
     $3_1 = 0;
     while (1) {
      $7_1 = $3_1 + $5_1 | 0;
      $6_1 = HEAP32[$0 + 72 >> 2] + $3_1 | 0;
      $6_1 = HEAPU16[$6_1 >> 1] | HEAPU16[$6_1 + 2 >> 1] << 16;
      HEAP16[$7_1 >> 1] = $6_1;
      HEAP16[$7_1 + 2 >> 1] = $6_1 >>> 16;
      $3_1 = $3_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break;
     };
    }
    $3_1 = HEAP32[$0 + 72 >> 2];
    if ($3_1) {
     if (HEAPU8[$0 + 76 | 0]) {
      $80($3_1)
     }
     HEAP32[$0 + 72 >> 2] = 0;
    }
    HEAP32[$0 + 72 >> 2] = $5_1;
    HEAP32[$0 + 68 >> 2] = $2_1;
    HEAP8[$0 + 76 | 0] = 1;
    $4_1 = HEAP32[$0 + 64 >> 2];
   }
   $2_1 = HEAP32[$0 + 72 >> 2] + ($4_1 << 2) | 0;
   $3_1 = HEAPU16[$1_1 >> 1] | HEAPU16[$1_1 + 2 >> 1] << 16;
   HEAP16[$2_1 >> 1] = $3_1;
   HEAP16[$2_1 + 2 >> 1] = $3_1 >>> 16;
   HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 64 >> 2] + 1;
   if (($9_1 | 0) < HEAP32[$0 + 48 >> 2]) {
    $156($0);
    $11 = HEAP16[$1_1 >> 1] + (HEAPU16[$1_1 + 2 >> 1] << 16) & HEAP32[$0 + 48 >> 2] + -1;
   }
   $1_1 = HEAP32[$0 + 32 >> 2] + ($8_1 << 2) | 0;
   $0 = HEAP32[$0 + 12 >> 2] + ($11 << 2) | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = $8_1;
   return;
  }
  $0 = HEAP32[$0 + 52 >> 2] + ($3_1 << 2) | 0;
  $1_1 = HEAPU16[$2_1 >> 1] | HEAPU16[$2_1 + 2 >> 1] << 16;
  HEAP16[$0 >> 1] = $1_1;
  HEAP16[$0 + 2 >> 1] = $1_1 >>> 16;
 }
 
 function $156($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = HEAP32[$0 + 4 >> 2];
  $3_1 = HEAP32[$0 + 48 >> 2];
  label$1 : {
   if (($7_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAP32[$0 + 8 >> 2] >= ($3_1 | 0)) {
     $4_1 = HEAP32[$0 + 12 >> 2];
     break label$2;
    }
    if ($3_1) {
     $4_1 = $79($3_1 << 2);
     $2_1 = HEAP32[$0 + 4 >> 2];
    } else {
     $2_1 = $7_1
    }
    $6_1 = HEAP32[$0 + 12 >> 2];
    label$6 : {
     label$7 : {
      if (($2_1 | 0) >= 1) {
       $5_1 = $4_1;
       $1_1 = $6_1;
       while (1) {
        HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
        $5_1 = $5_1 + 4 | 0;
        $1_1 = $1_1 + 4 | 0;
        $2_1 = $2_1 + -1 | 0;
        if ($2_1) {
         continue
        }
        break;
       };
       break label$7;
      }
      if ($6_1) {
       break label$7
      }
      break label$6;
     }
     if (HEAPU8[$0 + 16 | 0]) {
      $80($6_1)
     }
    }
    HEAP32[$0 + 12 >> 2] = $4_1;
    HEAP8[$0 + 16 | 0] = 1;
    HEAP32[$0 + 8 >> 2] = $3_1;
   }
   $1_1 = $7_1 << 2;
   $8_1 = $3_1 << 2;
   $17($1_1 + $4_1 | 0, 0, $8_1 - $1_1 | 0);
   HEAP32[$0 + 4 >> 2] = $3_1;
   $9_1 = HEAP32[$0 + 24 >> 2];
   if (($9_1 | 0) < ($3_1 | 0)) {
    label$12 : {
     if (HEAP32[$0 + 28 >> 2] >= ($3_1 | 0)) {
      $4_1 = HEAP32[$0 + 32 >> 2];
      break label$12;
     }
     label$14 : {
      if (!$3_1) {
       $4_1 = 0;
       $2_1 = $9_1;
       break label$14;
      }
      $4_1 = $79($8_1);
      $2_1 = HEAP32[$0 + 24 >> 2];
     }
     $6_1 = HEAP32[$0 + 32 >> 2];
     label$16 : {
      if (($2_1 | 0) >= 1) {
       $5_1 = $4_1;
       $1_1 = $6_1;
       while (1) {
        HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
        $5_1 = $5_1 + 4 | 0;
        $1_1 = $1_1 + 4 | 0;
        $2_1 = $2_1 + -1 | 0;
        if ($2_1) {
         continue
        }
        break;
       };
       break label$16;
      }
      if ($6_1) {
       break label$16
      }
      HEAP32[$0 + 32 >> 2] = $4_1;
      HEAP32[$0 + 28 >> 2] = $3_1;
      HEAP8[$0 + 36 | 0] = 1;
      break label$12;
     }
     if (HEAPU8[$0 + 36 | 0]) {
      $80($6_1)
     }
     HEAP32[$0 + 32 >> 2] = $4_1;
     HEAP8[$0 + 36 | 0] = 1;
     HEAP32[$0 + 28 >> 2] = $3_1;
    }
    $1_1 = $9_1 << 2;
    $17($1_1 + $4_1 | 0, 0, $8_1 - $1_1 | 0);
   }
   HEAP32[$0 + 24 >> 2] = $3_1;
   if (($3_1 | 0) >= 1) {
    $17(HEAP32[$0 + 12 >> 2], 255, $8_1);
    $17(HEAP32[$0 + 32 >> 2], 255, $8_1);
   }
   if (($7_1 | 0) < 1) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 32 >> 2];
   $5_1 = HEAP32[$0 + 72 >> 2];
   $6_1 = HEAP32[$0 + 12 >> 2];
   $2_1 = 0;
   while (1) {
    $4_1 = $6_1 + ((HEAP16[$5_1 >> 1] + (HEAPU16[$5_1 + 2 >> 1] << 16) & HEAP32[$0 + 48 >> 2] + -1) << 2) | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$4_1 >> 2] = $2_1;
    $5_1 = $5_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $157($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10 = 0, $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0);
  HEAP32[$3_1 >> 2] = 2139095039;
  $8_1 = -8388609;
  HEAP32[$4_1 >> 2] = -8388609;
  $10 = HEAP32[$0 + 8 >> 2];
  $7_1 = Math_fround(-3402823466385288598117041.0e14);
  label$1 : {
   if (($10 | 0) < 1) {
    break label$1
   }
   $8_1 = 4;
   while (1) {
    $11 = HEAP32[$0 + 16 >> 2] + $8_1 | 0;
    $7_1 = HEAPF32[$11 + -4 >> 2];
    $9_1 = HEAPF32[$11 >> 2];
    $12_1 = HEAPF32[$11 + 4 >> 2];
    $13_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$1_1 >> 2]) + Math_fround($9_1 * HEAPF32[$1_1 + 4 >> 2])) + Math_fround($12_1 * HEAPF32[$1_1 + 8 >> 2])) + HEAPF32[$1_1 + 48 >> 2]);
    $14 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$1_1 + 16 >> 2]) + Math_fround($9_1 * HEAPF32[$1_1 + 20 >> 2])) + Math_fround($12_1 * HEAPF32[$1_1 + 24 >> 2])) + HEAPF32[$1_1 + 52 >> 2]);
    $9_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$1_1 + 32 >> 2]) + Math_fround($9_1 * HEAPF32[$1_1 + 36 >> 2])) + Math_fround($12_1 * HEAPF32[$1_1 + 40 >> 2])) + HEAPF32[$1_1 + 56 >> 2]);
    $7_1 = Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$2_1 >> 2]) + Math_fround($14 * HEAPF32[$2_1 + 4 >> 2])) + Math_fround($9_1 * HEAPF32[$2_1 + 8 >> 2]));
    if (!!($7_1 < HEAPF32[$3_1 >> 2])) {
     HEAPF32[$3_1 >> 2] = $7_1;
     HEAP32[$5_1 + 12 >> 2] = 0;
     HEAPF32[$5_1 + 8 >> 2] = $9_1;
     HEAPF32[$5_1 + 4 >> 2] = $14;
     HEAPF32[$5_1 >> 2] = $13_1;
    }
    if (!!($7_1 > HEAPF32[$4_1 >> 2])) {
     HEAPF32[$4_1 >> 2] = $7_1;
     HEAP32[$6_1 + 12 >> 2] = 0;
     HEAPF32[$6_1 + 8 >> 2] = $9_1;
     HEAPF32[$6_1 + 4 >> 2] = $14;
     HEAPF32[$6_1 >> 2] = $13_1;
    }
    $8_1 = $8_1 + 16 | 0;
    $10 = $10 + -1 | 0;
    if ($10) {
     continue
    }
    break;
   };
   $8_1 = HEAP32[$4_1 >> 2];
   $7_1 = HEAPF32[$4_1 >> 2];
  }
  $9_1 = HEAPF32[$3_1 >> 2];
  if ($9_1 > $7_1) {
   HEAP32[$3_1 >> 2] = $8_1;
   HEAPF32[$4_1 >> 2] = $9_1;
   $0 = $5_1 + 8 | 0;
   $2_1 = HEAP32[$0 >> 2];
   $3_1 = HEAP32[$0 + 4 >> 2];
   $1_1 = $6_1 + 8 | 0;
   $8_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $8_1;
   $0 = HEAP32[$5_1 >> 2];
   $4_1 = HEAP32[$5_1 + 4 >> 2];
   $8_1 = HEAP32[$6_1 + 4 >> 2];
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   HEAP32[$6_1 >> 2] = $0;
   HEAP32[$6_1 + 4 >> 2] = $4_1;
   HEAP32[$1_1 >> 2] = $2_1;
   HEAP32[$1_1 + 4 >> 2] = $3_1;
  }
 }
 
 function $158($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0;
  $13_1 = HEAP32[$0 + 16 >> 2];
  $3_1 = HEAP32[$1_1 + 16 >> 2];
  if (($13_1 | 0) != ($3_1 | 0)) {
   return $13_1 - $3_1 | 0
  }
  if (!$13_1) {
   return 0
  }
  $14 = -1;
  $6_1 = HEAP32[$0 + 4 >> 2];
  $7_1 = HEAP32[$1_1 + 8 >> 2];
  $8_1 = HEAP32[$1_1 + 12 >> 2];
  $12_1 = HEAP32[$0 >> 2];
  $10 = __wasm_i64_mul($8_1, 0, $12_1, 0);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $8_1 = __wasm_i64_mul($8_1, $4_1, $6_1, 0);
  $2_1 = $8_1 + $9_1 | 0;
  $3_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
  $5_1 = $2_1;
  $2_1 = $2_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = 0;
  $6_1 = __wasm_i64_mul($7_1, $8_1, $6_1, $4_1);
  $3_1 = $5_1;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $4_1 = $3_1 + $5_1 | 0;
  if ($4_1 >>> 0 < $5_1 >>> 0) {
   $2_1 = $2_1 + 1 | 0
  }
  $3_1 = $4_1;
  $5_1 = $2_1;
  $4_1 = 0;
  $2_1 = $6_1 + $10 | 0;
  if ($2_1 >>> 0 < $6_1 >>> 0) {
   $4_1 = $4_1 + 1 | 0
  }
  $10 = $4_1;
  $4_1 = $4_1 + $3_1 | 0;
  $3_1 = $5_1;
  $3_1 = $4_1 >>> 0 < $10 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $4_1;
  $4_1 = $2_1;
  $10 = 0;
  $7_1 = __wasm_i64_mul($7_1, $8_1, $12_1, $15_1);
  $6_1 = $10 + $7_1 | 0;
  $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
  $2_1 = $6_1 >>> 0 < $7_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $16_1 = $6_1;
  $7_1 = $6_1;
  $6_1 = $2_1;
  $4_1 = ($4_1 | 0) == ($2_1 | 0) & $7_1 >>> 0 < $10 >>> 0 | $2_1 >>> 0 < $4_1 >>> 0;
  $2_1 = $5_1 + $4_1 | 0;
  if ($2_1 >>> 0 < $4_1 >>> 0) {
   $3_1 = $3_1 + 1 | 0
  }
  $10 = $2_1;
  $7_1 = $3_1;
  $8_1 = $2_1;
  $12_1 = $3_1;
  $4_1 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  $2_1 = HEAP32[$1_1 >> 2];
  $9_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = 0;
  $15_1 = $4_1;
  $5_1 = __wasm_i64_mul($9_1, $3_1, $4_1, 0);
  $1_1 = i64toi32_i32$HIGH_BITS;
  $11 = $0;
  $4_1 = 0;
  $9_1 = __wasm_i64_mul($9_1, $3_1, $0, $4_1);
  $0 = $1_1 + $9_1 | 0;
  $3_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $0 >>> 0 < $9_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $1_1 = $0;
  $9_1 = $2_1;
  $0 = __wasm_i64_mul($2_1, 0, $11, $4_1);
  $11 = i64toi32_i32$HIGH_BITS;
  $1_1 = $11 + $1_1 | 0;
  $2_1 = $3_1;
  $2_1 = $1_1 >>> 0 < $11 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $4_1 = $2_1;
  $3_1 = 0;
  $2_1 = $0 + $5_1 | 0;
  if ($2_1 >>> 0 < $0 >>> 0) {
   $3_1 = $3_1 + 1 | 0
  }
  $11 = $3_1;
  $5_1 = $3_1 + $1_1 | 0;
  $3_1 = $4_1;
  $1_1 = $5_1;
  $4_1 = $1_1 >>> 0 < $11 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $11 = $1_1;
  $1_1 = 0;
  $5_1 = __wasm_i64_mul($9_1, $17_1, $15_1, $18_1);
  $0 = $1_1 + $5_1 | 0;
  $3_1 = $2_1;
  $2_1 = $2_1 + i64toi32_i32$HIGH_BITS | 0;
  $2_1 = $0 >>> 0 < $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $5_1 = $0;
  $0 = $2_1;
  $1_1 = ($3_1 | 0) == ($2_1 | 0) & $5_1 >>> 0 < $1_1 >>> 0 | $2_1 >>> 0 < $3_1 >>> 0;
  $3_1 = $11 + $1_1 | 0;
  if ($3_1 >>> 0 < $1_1 >>> 0) {
   $4_1 = $4_1 + 1 | 0
  }
  $2_1 = $3_1;
  $1_1 = $4_1;
  label$3 : {
   if (($4_1 | 0) == ($12_1 | 0) & $8_1 >>> 0 < $2_1 >>> 0 | $12_1 >>> 0 < $4_1 >>> 0) {
    break label$3
   }
   $14 = 1;
   if (($1_1 | 0) == ($7_1 | 0) & $10 >>> 0 > $3_1 >>> 0 | $7_1 >>> 0 > $1_1 >>> 0) {
    break label$3
   }
   $14 = -1;
   if (($0 | 0) == ($6_1 | 0) & $16_1 >>> 0 < $5_1 >>> 0 | $6_1 >>> 0 < $0 >>> 0) {
    break label$3
   }
   $14 = ($0 | 0) == ($6_1 | 0) & $16_1 >>> 0 > $5_1 >>> 0 | $6_1 >>> 0 > $0 >>> 0;
  }
  return Math_imul($14, $13_1);
 }
 
 function $162($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = HEAP32[$0 + 56 >> 2];
  label$1 : {
   if ($6_1) {
    break label$1
   }
   $3_1 = HEAP32[$0 + 52 >> 2];
   label$2 : {
    if ($3_1) {
     HEAP32[$0 + 52 >> 2] = HEAP32[$3_1 + 8 >> 2];
     break label$2;
    }
    $3_1 = $79(12);
    HEAP32[$3_1 + 8 >> 2] = 0;
    $4_1 = HEAP32[$0 + 60 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $79(Math_imul($4_1, 24))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $4_1 = HEAP32[$0 + 48 >> 2];
    HEAP32[$0 + 48 >> 2] = $3_1;
    HEAP32[$3_1 + 8 >> 2] = $4_1;
   }
   $6_1 = HEAP32[$3_1 >> 2];
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   if (($5_1 | 0) < 1) {
    break label$1
   }
   $3_1 = 0;
   $4_1 = $6_1;
   while (1) {
    $7_1 = $4_1;
    $4_1 = $4_1 + 24 | 0;
    $3_1 = $3_1 + 1 | 0;
    HEAP32[$7_1 >> 2] = ($3_1 | 0) < ($5_1 | 0) ? $4_1 : 0;
    if (($3_1 | 0) != ($5_1 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 56 >> 2] = HEAP32[$6_1 >> 2];
  $4_1 = $6_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $6_1 + 16 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  $5_1 = HEAP32[$0 + 56 >> 2];
  label$5 : {
   if ($5_1) {
    break label$5
   }
   $3_1 = HEAP32[$0 + 52 >> 2];
   label$6 : {
    if ($3_1) {
     HEAP32[$0 + 52 >> 2] = HEAP32[$3_1 + 8 >> 2];
     break label$6;
    }
    $3_1 = $79(12);
    HEAP32[$3_1 + 8 >> 2] = 0;
    $4_1 = HEAP32[$0 + 60 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $79(Math_imul($4_1, 24))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $4_1 = HEAP32[$0 + 48 >> 2];
    HEAP32[$0 + 48 >> 2] = $3_1;
    HEAP32[$3_1 + 8 >> 2] = $4_1;
   }
   $5_1 = HEAP32[$3_1 >> 2];
   $8_1 = HEAP32[$3_1 + 4 >> 2];
   if (($8_1 | 0) < 1) {
    break label$5
   }
   $3_1 = 0;
   $4_1 = $5_1;
   while (1) {
    $7_1 = $4_1;
    $4_1 = $4_1 + 24 | 0;
    $3_1 = $3_1 + 1 | 0;
    HEAP32[$7_1 >> 2] = ($3_1 | 0) < ($8_1 | 0) ? $4_1 : 0;
    if (($3_1 | 0) != ($8_1 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 56 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = $5_1;
  HEAP32[$6_1 + 12 >> 2] = $2_1;
  HEAP32[$6_1 + 16 >> 2] = 0;
  $2_1 = HEAP32[$0 + 100 >> 2];
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$5_1 + 8 >> 2] = $6_1;
  HEAP32[$5_1 + 12 >> 2] = $1_1;
  HEAP32[$5_1 + 16 >> 2] = 0;
  HEAP32[$5_1 + 20 >> 2] = $2_1;
  $1_1 = HEAP32[$0 + 116 >> 2];
  $2_1 = $1_1 + 1 | 0;
  HEAP32[$0 + 116 >> 2] = $2_1;
  if (($1_1 | 0) >= HEAP32[$0 + 120 >> 2]) {
   HEAP32[$0 + 120 >> 2] = $2_1
  }
  return $6_1;
 }
 
 function $163($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = 0, $21 = 0, $22_1 = 0;
  $4_1 = HEAP32[$0 + 12 >> 2];
  $12_1 = HEAP32[$1_1 + 8 >> 2];
  label$1 : {
   label$2 : {
    if (HEAP32[$4_1 + 88 >> 2] != HEAP32[$12_1 + 88 >> 2] | HEAP32[$4_1 + 92 >> 2] != HEAP32[$12_1 + 92 >> 2]) {
     break label$2
    }
    $5_1 = HEAP32[$12_1 + 4 >> 2];
    if (($12_1 | 0) == ($5_1 | 0)) {
     HEAP32[$2_1 >> 2] = $4_1;
     $0 = HEAP32[$12_1 + 8 >> 2];
     $1_1 = 0;
     if (!$0) {
      break label$1
     }
     HEAP32[$3_1 >> 2] = HEAP32[$0 + 12 >> 2];
     return 0;
    }
    $6_1 = HEAP32[$12_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $5_1;
    HEAP32[$5_1 >> 2] = $6_1;
    if (($12_1 | 0) == HEAP32[$1_1 >> 2]) {
     $10 = $1_1;
     $4_1 = $6_1;
     $9_1 = HEAP32[$4_1 + 88 >> 2];
     $7_1 = HEAP32[$5_1 + 88 >> 2];
     if (!(($9_1 | 0) < ($7_1 | 0) | (HEAP32[$4_1 + 92 >> 2] < HEAP32[$5_1 + 92 >> 2] ? ($7_1 | 0) == ($9_1 | 0) : 0))) {
      $4_1 = $5_1
     }
     HEAP32[$10 >> 2] = $4_1;
    }
    if (HEAP32[$1_1 + 4 >> 2] != ($12_1 | 0)) {
     break label$2
    }
    $4_1 = HEAP32[$6_1 + 88 >> 2];
    $9_1 = HEAP32[$5_1 + 88 >> 2];
    if (!(($4_1 | 0) != ($9_1 | 0) | HEAP32[$6_1 + 92 >> 2] <= HEAP32[$5_1 + 92 >> 2] ? ($4_1 | 0) <= ($9_1 | 0) : 0)) {
     HEAP32[$1_1 + 4 >> 2] = $6_1;
     break label$2;
    }
    HEAP32[$1_1 + 4 >> 2] = $5_1;
   }
   $18_1 = HEAP32[$1_1 >> 2];
   $21 = HEAP32[$0 >> 2];
   $22_1 = HEAP32[$0 + 4 >> 2];
   $7_1 = $22_1;
   $19_1 = HEAP32[$1_1 + 4 >> 2];
   $5_1 = $19_1;
   $9_1 = 0;
   $6_1 = 0;
   $4_1 = 1;
   while (1) {
    $15_1 = $8_1;
    $12_1 = $6_1;
    $20 = $9_1;
    $10 = HEAP32[$7_1 + 88 >> 2];
    $8_1 = Math_imul(HEAP32[$5_1 + 88 >> 2] - $10 | 0, $4_1);
    label$10 : {
     if (($8_1 | 0) >= 1) {
      $9_1 = $7_1;
      while (1) {
       $6_1 = $5_1;
       $10 = HEAP32[$5_1 + 92 >> 2];
       $7_1 = $8_1;
       while (1) {
        label$13 : {
         $8_1 = HEAP32[$9_1 + 92 >> 2];
         $11 = $10 - $8_1 | 0;
         $14 = !$15_1 << 2;
         $5_1 = HEAP32[$14 + $9_1 >> 2];
         if (($5_1 | 0) == ($9_1 | 0)) {
          break label$13
         }
         $13_1 = HEAP32[$5_1 + 92 >> 2] - $8_1 | 0;
         if (($13_1 | 0) > 0) {
          break label$13
         }
         $16_1 = HEAP32[$5_1 + 88 >> 2];
         $8_1 = Math_imul($16_1 - HEAP32[$9_1 + 88 >> 2] | 0, $4_1);
         if (($8_1 | 0) > -1 | (Math_imul($7_1, $13_1) | 0) > (Math_imul($8_1, $11) | 0) ? $8_1 : 0) {
          break label$13
         }
         $7_1 = Math_imul(HEAP32[$6_1 + 88 >> 2] - $16_1 | 0, $4_1);
         $9_1 = $5_1;
         continue;
        }
        break;
       };
       $5_1 = HEAP32[$6_1 + $14 >> 2];
       if (($6_1 | 0) == ($5_1 | 0)) {
        break label$10
       }
       $14 = HEAP32[$5_1 + 92 >> 2] - $10 | 0;
       if (($14 | 0) > -1) {
        break label$10
       }
       $10 = HEAP32[$5_1 + 88 >> 2];
       $8_1 = Math_imul($10 - HEAP32[$9_1 + 88 >> 2] | 0, $4_1);
       if (($8_1 | 0) < 1) {
        break label$10
       }
       $10 = Math_imul($10 - HEAP32[$6_1 + 88 >> 2] | 0, $4_1);
       if (!$10) {
        continue
       }
       if (($10 | 0) > -1) {
        break label$10
       }
       if ((Math_imul($7_1, $14) | 0) < (Math_imul($10, $11) | 0)) {
        continue
       }
       break;
      };
      break label$10;
     }
     if (($8_1 | 0) <= -1) {
      label$17 : while (1) {
       $11 = HEAP32[$5_1 + 92 >> 2];
       $16_1 = (($15_1 | 0) != 0) << 2;
       $6_1 = HEAP32[$16_1 + $5_1 >> 2];
       while (1) {
        $10 = $8_1;
        $9_1 = $7_1;
        $8_1 = HEAP32[$7_1 + 92 >> 2];
        $14 = $11 - $8_1 | 0;
        label$19 : {
         if (($5_1 | 0) == ($6_1 | 0)) {
          break label$19
         }
         $13_1 = HEAP32[$6_1 + 92 >> 2] - $11 | 0;
         if (($13_1 | 0) < 0) {
          break label$19
         }
         $17_1 = HEAP32[$6_1 + 88 >> 2];
         $7_1 = Math_imul($17_1 - HEAP32[$5_1 + 88 >> 2] | 0, $4_1);
         if (($7_1 | 0) > -1 | (Math_imul($10, $13_1) | 0) > (Math_imul($7_1, $14) | 0) ? $7_1 : 0) {
          break label$19
         }
         $8_1 = Math_imul($17_1 - HEAP32[$9_1 + 88 >> 2] | 0, $4_1);
         $5_1 = $6_1;
         $7_1 = $9_1;
         continue label$17;
        }
        $7_1 = HEAP32[$9_1 + $16_1 >> 2];
        if (($9_1 | 0) == ($7_1 | 0)) {
         $6_1 = $5_1;
         break label$10;
        }
        $17_1 = HEAP32[$7_1 + 92 >> 2] - $8_1 | 0;
        if (($17_1 | 0) < 1) {
         $6_1 = $5_1;
         break label$10;
        }
        $13_1 = HEAP32[$7_1 + 88 >> 2];
        $8_1 = Math_imul(HEAP32[$5_1 + 88 >> 2] - $13_1 | 0, $4_1);
        if (($8_1 | 0) > -1) {
         $6_1 = $5_1;
         break label$10;
        }
        $13_1 = Math_imul($13_1 - HEAP32[$9_1 + 88 >> 2] | 0, $4_1);
        if (!$13_1) {
         continue
        }
        if (($13_1 | 0) > -1) {
         $6_1 = $5_1;
         break label$10;
        }
        if ((Math_imul($10, $17_1) | 0) < (Math_imul($13_1, $14) | 0)) {
         continue
        }
        break;
       };
       break;
      };
      $6_1 = $5_1;
      break label$10;
     }
     $8_1 = HEAP32[$7_1 + 92 >> 2];
     label$25 : {
      if (!$15_1) {
       $4_1 = $7_1;
       while (1) {
        $9_1 = $4_1;
        $4_1 = HEAP32[$4_1 + 4 >> 2];
        if (($7_1 | 0) == ($4_1 | 0) | ($10 | 0) != HEAP32[$4_1 + 88 >> 2]) {
         break label$25
        }
        $6_1 = HEAP32[$4_1 + 92 >> 2];
        $11 = ($6_1 | 0) <= ($8_1 | 0);
        $8_1 = $6_1;
        if ($11) {
         continue
        }
        break;
       };
       break label$25;
      }
      $4_1 = $7_1;
      while (1) {
       $9_1 = $4_1;
       $4_1 = HEAP32[$4_1 >> 2];
       if (($7_1 | 0) == ($4_1 | 0) | ($10 | 0) != HEAP32[$4_1 + 88 >> 2]) {
        break label$25
       }
       $6_1 = HEAP32[$4_1 + 92 >> 2];
       $11 = ($6_1 | 0) > ($8_1 | 0);
       $8_1 = $6_1;
       if (!$11) {
        continue
       }
       break;
      };
     }
     $8_1 = HEAP32[$5_1 + 92 >> 2];
     if (!$15_1) {
      $4_1 = $5_1;
      while (1) {
       $6_1 = $4_1;
       $4_1 = HEAP32[$4_1 >> 2];
       if (($4_1 | 0) == ($5_1 | 0) | ($10 | 0) != HEAP32[$4_1 + 88 >> 2]) {
        break label$10
       }
       $7_1 = HEAP32[$4_1 + 92 >> 2];
       $11 = ($7_1 | 0) >= ($8_1 | 0);
       $8_1 = $7_1;
       if ($11) {
        continue
       }
       break;
      };
      break label$10;
     }
     $4_1 = $5_1;
     while (1) {
      $6_1 = $4_1;
      $4_1 = HEAP32[$4_1 + 4 >> 2];
      if (($4_1 | 0) == ($5_1 | 0) | ($10 | 0) != HEAP32[$4_1 + 88 >> 2]) {
       break label$10
      }
      $7_1 = HEAP32[$4_1 + 92 >> 2];
      $11 = ($7_1 | 0) < ($8_1 | 0);
      $8_1 = $7_1;
      if (!$11) {
       continue
      }
      break;
     };
    }
    $8_1 = 1;
    $4_1 = -1;
    $7_1 = $21;
    $5_1 = $18_1;
    if (!$15_1) {
     continue
    }
    break;
   };
   HEAP32[$6_1 >> 2] = $9_1;
   HEAP32[$9_1 + 4 >> 2] = $6_1;
   HEAP32[$20 >> 2] = $12_1;
   HEAP32[$12_1 + 4 >> 2] = $20;
   if (HEAP32[$18_1 + 88 >> 2] < HEAP32[$21 + 88 >> 2]) {
    HEAP32[$0 >> 2] = $18_1
   }
   if (HEAP32[$19_1 + 88 >> 2] >= HEAP32[$22_1 + 88 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $19_1
   }
   HEAP32[$0 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2];
   HEAP32[$2_1 >> 2] = $20;
   $1_1 = 1;
  }
  $0 = $1_1;
  HEAP32[$3_1 >> 2] = $12_1;
  return $0;
 }
 
 function $164($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $4_1 = $2_1 - $1_1 | 0;
  label$1 : {
   if ($4_1 >>> 0 <= 2) {
    label$3 : {
     switch ($4_1 - 1 | 0) {
     default:
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[$3_1 + 4 >> 2] = 0;
      $0 = $3_1 + 8 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      break label$1;
     case 1:
      $2_1 = HEAP32[HEAP32[$0 + 92 >> 2] + ($1_1 << 2) >> 2];
      $4_1 = HEAP32[$2_1 + 204 >> 2];
      label$6 : {
       $7_1 = HEAP32[$2_1 + 88 >> 2];
       $6_1 = HEAP32[$2_1 + 200 >> 2];
       $5_1 = HEAP32[$2_1 + 92 >> 2];
       if (!(($7_1 | 0) != ($6_1 | 0) | ($5_1 | 0) != ($4_1 | 0))) {
        $4_1 = $5_1;
        if (HEAP32[$2_1 + 96 >> 2] == HEAP32[$2_1 + 208 >> 2]) {
         break label$6
        }
       }
       $1_1 = $2_1 + 112 | 0;
       $4_1 = $5_1 - $4_1 | 0;
       $5_1 = $7_1 - $6_1 | 0;
       label$8 : {
        if (!($4_1 | $5_1)) {
         $5_1 = HEAP32[$2_1 + 96 >> 2] > HEAP32[$2_1 + 208 >> 2];
         $4_1 = $5_1 ? $1_1 : $2_1;
         HEAP32[$3_1 + 8 >> 2] = $4_1;
         HEAP32[$3_1 + 4 >> 2] = $4_1;
         HEAP32[$3_1 >> 2] = $4_1;
         HEAP32[$4_1 + 4 >> 2] = $4_1;
         HEAP32[$4_1 >> 2] = $4_1;
         $1_1 = $5_1 ? $2_1 : $1_1;
         $2_1 = $4_1;
         break label$8;
        }
        HEAP32[$2_1 + 4 >> 2] = $1_1;
        HEAP32[$2_1 >> 2] = $1_1;
        HEAP32[$2_1 + 116 >> 2] = $2_1;
        HEAP32[$2_1 + 112 >> 2] = $2_1;
        $7_1 = ($4_1 | 0) < 0;
        $9_1 = $7_1 & !$5_1;
        $5_1 = ($5_1 | 0) < 0;
        $6_1 = $9_1 | $5_1;
        HEAP32[$3_1 + 4 >> 2] = $6_1 ? $1_1 : $2_1;
        HEAP32[$3_1 >> 2] = $6_1 ? $2_1 : $1_1;
        if (!($5_1 & !$4_1 ? 0 : !$7_1)) {
         HEAP32[$3_1 + 8 >> 2] = $2_1;
         $4_1 = $1_1;
         break label$8;
        }
        HEAP32[$3_1 + 8 >> 2] = $1_1;
        $4_1 = $2_1;
       }
       HEAP32[$3_1 + 12 >> 2] = $4_1;
       $0 = $162($0, $2_1, $1_1);
       HEAP32[$2_1 + 8 >> 2] = $0;
       $2_1 = $1_1;
       $1_1 = HEAP32[$0 + 8 >> 2];
       HEAP32[$2_1 + 8 >> 2] = $1_1;
       HEAP32[$0 + 4 >> 2] = $0;
       HEAP32[$0 >> 2] = $0;
       HEAP32[$1_1 + 4 >> 2] = $1_1;
       HEAP32[$1_1 >> 2] = $1_1;
       break label$1;
      }
      HEAP32[$2_1 + 8 >> 2] = 0;
      HEAP32[$3_1 + 12 >> 2] = $2_1;
      HEAP32[$3_1 + 8 >> 2] = $2_1;
      HEAP32[$3_1 + 4 >> 2] = $2_1;
      HEAP32[$3_1 >> 2] = $2_1;
      HEAP32[$2_1 + 4 >> 2] = $2_1;
      HEAP32[$2_1 >> 2] = $2_1;
      break label$1;
     case 0:
      break label$3;
     };
    }
    $0 = HEAP32[HEAP32[$0 + 92 >> 2] + ($1_1 << 2) >> 2];
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$3_1 + 12 >> 2] = $0;
    HEAP32[$3_1 + 8 >> 2] = $0;
    HEAP32[$3_1 + 4 >> 2] = $0;
    HEAP32[$3_1 >> 2] = $0;
    HEAP32[$0 + 4 >> 2] = $0;
    HEAP32[$0 >> 2] = $0;
    break label$1;
   }
   $6_1 = ($4_1 | 0) / 2 | 0;
   $7_1 = $6_1 + $1_1 | 0;
   $5_1 = $7_1;
   label$12 : {
    if (($5_1 | 0) >= ($2_1 | 0)) {
     break label$12
    }
    $5_1 = HEAP32[$0 + 92 >> 2];
    $4_1 = HEAP32[($5_1 + ($7_1 << 2) | 0) + -4 >> 2];
    $10 = HEAP32[$4_1 + 88 >> 2];
    $11 = HEAP32[$4_1 + 96 >> 2];
    $9_1 = HEAP32[$4_1 + 92 >> 2];
    $4_1 = $5_1 + ($1_1 + $6_1 << 2) | 0;
    $5_1 = $7_1;
    while (1) {
     $6_1 = HEAP32[$4_1 >> 2];
     if (($10 | 0) != HEAP32[$6_1 + 88 >> 2] | HEAP32[$6_1 + 92 >> 2] != ($9_1 | 0) | HEAP32[$6_1 + 96 >> 2] != ($11 | 0)) {
      break label$12
     }
     $4_1 = $4_1 + 4 | 0;
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
    $5_1 = $2_1;
   }
   $164($0, $1_1, $7_1, $3_1);
   $1_1 = $8_1 + 8 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$8_1 >> 2] = 0;
   HEAP32[$8_1 + 4 >> 2] = 0;
   $164($0, $5_1, $2_1, $8_1);
   $165($0, $3_1, $8_1);
  }
  global$0 = $8_1 + 16 | 0;
 }
 
 function $165($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = 0, $21 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = 0, $31_1 = 0, $32 = 0, $33_1 = 0, $34 = 0, $35 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!HEAP32[$2_1 + 4 >> 2]) {
    break label$1
   }
   if (!HEAP32[$1_1 + 4 >> 2]) {
    $0 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $0;
    $3_1 = $1_1 + 8 | 0;
    $1_1 = $2_1 + 8 | 0;
    $0 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $0;
    break label$1;
   }
   HEAP32[$0 + 100 >> 2] = HEAP32[$0 + 100 >> 2] + -1;
   HEAP32[$4_1 + 124 >> 2] = 0;
   HEAP32[$4_1 + 120 >> 2] = 0;
   $1_1 = $163($1_1, $2_1, $4_1 + 124 | 0, $4_1 + 120 | 0);
   $17_1 = HEAP32[$4_1 + 120 >> 2];
   label$3 : {
    if ($1_1) {
     $23_1 = HEAP32[$4_1 + 124 >> 2];
     $29_1 = HEAP32[$23_1 + 96 >> 2];
     $30 = HEAP32[$17_1 + 96 >> 2];
     $27_1 = HEAP32[$23_1 + 92 >> 2];
     $16_1 = HEAP32[$17_1 + 92 >> 2];
     $3_1 = HEAP32[$23_1 + 8 >> 2];
     $18_1 = HEAP32[$23_1 + 88 >> 2];
     $31_1 = HEAP32[$17_1 + 88 >> 2];
     HEAP32[$4_1 + 80 >> 2] = 0;
     $1_1 = $30 - $29_1 | 0;
     $5_1 = $1_1;
     $6_1 = $1_1 >> 31;
     $1_1 = $16_1 - $27_1 | 0;
     $20 = $1_1;
     $21 = $1_1 >> 31;
     $32 = __wasm_i64_mul($5_1, $6_1, $1_1, $21);
     $33_1 = i64toi32_i32$HIGH_BITS;
     $2_1 = $31_1 - $18_1 | 0;
     $1_1 = 0 - $2_1 | 0;
     $26_1 = $1_1;
     $24_1 = $1_1 >> 31;
     $1_1 = __wasm_i64_mul($1_1, $24_1, $2_1, $2_1 >> 31);
     $7_1 = i64toi32_i32$HIGH_BITS;
     $2_1 = __wasm_i64_mul($20, $21, $20, $21);
     $34 = $1_1 - $2_1 | 0;
     $15_1 = $7_1 - (i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $2_1 >>> 0) | 0) | 0;
     $1_1 = __wasm_i64_mul($26_1, $24_1, $5_1, $6_1);
     $14 = 0 - $1_1 | 0;
     $25 = 0 - (i64toi32_i32$HIGH_BITS + (0 < $1_1 >>> 0) | 0) | 0;
     if ($3_1) {
      $2_1 = $3_1;
      while (1) {
       $10 = HEAP32[$2_1 + 12 >> 2];
       $12_1 = HEAP32[$10 + 92 >> 2];
       $1_1 = $12_1 - $27_1 | 0;
       $8_1 = $1_1;
       $9_1 = $1_1 >> 31;
       $1_1 = __wasm_i64_mul($1_1, $9_1, $26_1, $24_1);
       $7_1 = i64toi32_i32$HIGH_BITS;
       $28_1 = $1_1;
       $13_1 = HEAP32[$10 + 88 >> 2];
       $1_1 = $13_1 - $18_1 | 0;
       $5_1 = $1_1;
       $6_1 = $1_1 >> 31;
       $1_1 = __wasm_i64_mul($20, $21, $1_1, $6_1);
       label$7 : {
        if (($28_1 | 0) != (0 - $1_1 | 0) | (0 - (i64toi32_i32$HIGH_BITS + (0 < $1_1 >>> 0) | 0) | 0) != ($7_1 | 0)) {
         break label$7
        }
        $1_1 = __wasm_i64_mul($32, $33_1, $8_1, $9_1);
        $7_1 = i64toi32_i32$HIGH_BITS;
        $8_1 = $1_1;
        $1_1 = __wasm_i64_mul($5_1, $6_1, $14, $25);
        $6_1 = $8_1 + $1_1 | 0;
        $5_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
        $5_1 = $6_1 >>> 0 < $1_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
        $7_1 = HEAP32[$10 + 96 >> 2];
        $1_1 = $7_1 - $29_1 | 0;
        $1_1 = __wasm_i64_mul($34, $15_1, $1_1, $1_1 >> 31);
        $6_1 = $1_1 + $6_1 | 0;
        $5_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
        $5_1 = $6_1 >>> 0 < $1_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
        if (($5_1 | 0) < 0 ? 1 : ($5_1 | 0) <= 0 ? ($6_1 >>> 0 >= 1 ? 0 : 1) : 0) {
         break label$7
        }
        label$8 : {
         if (!$11) {
          break label$8
         }
         $1_1 = HEAP32[$11 + 4 >> 2];
         if (($2_1 | 0) == HEAP32[$11 >> 2]) {
          if (($1_1 | 0) != ($2_1 | 0)) {
           break label$7
          }
          $8_1 = HEAP32[HEAP32[$2_1 + 8 >> 2] + 12 >> 2];
          $1_1 = HEAP32[$8_1 + 96 >> 2];
          $9_1 = $7_1 - $1_1 | 0;
          $5_1 = HEAP32[$11 + 12 >> 2];
          $6_1 = HEAP32[$5_1 + 96 >> 2] - $1_1 | 0;
          $1_1 = HEAP32[$8_1 + 92 >> 2];
          $1_1 = Math_imul($9_1, HEAP32[$5_1 + 92 >> 2] - $1_1 | 0) - Math_imul($6_1, $12_1 - $1_1 | 0) | 0;
          $1_1 = __wasm_i64_mul($1_1, $1_1 >> 31, $20, $21);
          $7_1 = i64toi32_i32$HIGH_BITS;
          $12_1 = $1_1;
          $1_1 = HEAP32[$8_1 + 88 >> 2];
          $1_1 = Math_imul($6_1, $13_1 - $1_1 | 0) - Math_imul($9_1, HEAP32[$5_1 + 88 >> 2] - $1_1 | 0) | 0;
          $1_1 = __wasm_i64_mul($1_1, $1_1 >> 31, $26_1, $24_1);
          $6_1 = $12_1 + $1_1 | 0;
          $5_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
          $5_1 = $6_1 >>> 0 < $1_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
          if (($5_1 | 0) < 0 ? 1 : ($5_1 | 0) <= 0 ? ($6_1 >>> 0 > 0 ? 0 : 1) : 0) {
           break label$8
          }
          break label$7;
         }
         if (($1_1 | 0) != ($2_1 | 0)) {
          break label$7
         }
        }
        $11 = $2_1;
       }
       $2_1 = HEAP32[$2_1 >> 2];
       if (($3_1 | 0) != ($2_1 | 0)) {
        continue
       }
       break;
      };
      HEAP32[$4_1 + 80 >> 2] = $11;
     }
     $1_1 = HEAP32[$17_1 + 8 >> 2];
     $13_1 = 0;
     HEAP32[$4_1 + 56 >> 2] = 0;
     if ($1_1) {
      $2_1 = $1_1;
      while (1) {
       $18_1 = HEAP32[$2_1 + 12 >> 2];
       $10 = HEAP32[$18_1 + 92 >> 2];
       $3_1 = $10 - $16_1 | 0;
       $12_1 = $3_1;
       $8_1 = $3_1 >> 31;
       $3_1 = __wasm_i64_mul($3_1, $8_1, $26_1, $24_1);
       $7_1 = i64toi32_i32$HIGH_BITS;
       $27_1 = $3_1;
       $9_1 = HEAP32[$18_1 + 88 >> 2];
       $3_1 = $9_1 - $31_1 | 0;
       $5_1 = $3_1;
       $6_1 = $3_1 >> 31;
       $3_1 = __wasm_i64_mul($20, $21, $3_1, $6_1);
       label$12 : {
        if (($27_1 | 0) != (0 - $3_1 | 0) | (0 - (i64toi32_i32$HIGH_BITS + (0 < $3_1 >>> 0) | 0) | 0) != ($7_1 | 0)) {
         break label$12
        }
        $3_1 = __wasm_i64_mul($32, $33_1, $12_1, $8_1);
        $7_1 = i64toi32_i32$HIGH_BITS;
        $8_1 = $3_1;
        $3_1 = __wasm_i64_mul($5_1, $6_1, $14, $25);
        $6_1 = $8_1 + $3_1 | 0;
        $5_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
        $5_1 = $6_1 >>> 0 < $3_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
        $7_1 = HEAP32[$18_1 + 96 >> 2];
        $3_1 = $7_1 - $30 | 0;
        $3_1 = __wasm_i64_mul($34, $15_1, $3_1, $3_1 >> 31);
        $6_1 = $3_1 + $6_1 | 0;
        $5_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
        $5_1 = $6_1 >>> 0 < $3_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
        if (($5_1 | 0) < 0 ? 1 : ($5_1 | 0) <= 0 ? ($6_1 >>> 0 >= 1 ? 0 : 1) : 0) {
         break label$12
        }
        label$13 : {
         if (!$13_1) {
          break label$13
         }
         if (HEAP32[$13_1 >> 2] != ($2_1 | 0)) {
          break label$12
         }
         if (HEAP32[$13_1 + 4 >> 2] != ($2_1 | 0)) {
          break label$13
         }
         $12_1 = HEAP32[HEAP32[$2_1 + 8 >> 2] + 12 >> 2];
         $3_1 = HEAP32[$12_1 + 96 >> 2];
         $8_1 = $7_1 - $3_1 | 0;
         $5_1 = HEAP32[$13_1 + 12 >> 2];
         $6_1 = HEAP32[$5_1 + 96 >> 2] - $3_1 | 0;
         $3_1 = HEAP32[$12_1 + 92 >> 2];
         $3_1 = Math_imul($8_1, HEAP32[$5_1 + 92 >> 2] - $3_1 | 0) - Math_imul($6_1, $10 - $3_1 | 0) | 0;
         $3_1 = __wasm_i64_mul($3_1, $3_1 >> 31, $20, $21);
         $7_1 = i64toi32_i32$HIGH_BITS;
         $10 = $3_1;
         $3_1 = HEAP32[$12_1 + 88 >> 2];
         $3_1 = Math_imul($6_1, $9_1 - $3_1 | 0) - Math_imul($8_1, HEAP32[$5_1 + 88 >> 2] - $3_1 | 0) | 0;
         $3_1 = __wasm_i64_mul($3_1, $3_1 >> 31, $26_1, $24_1);
         $6_1 = $10 + $3_1 | 0;
         $7_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
         $7_1 = $6_1 >>> 0 < $3_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
         if (($7_1 | 0) < 0 ? 1 : ($7_1 | 0) <= 0 ? ($6_1 >>> 0 >= 1 ? 0 : 1) : 0) {
          break label$12
         }
        }
        $13_1 = $2_1;
       }
       $2_1 = HEAP32[$2_1 >> 2];
       if (($1_1 | 0) != ($2_1 | 0)) {
        continue
       }
       break;
      };
      HEAP32[$4_1 + 56 >> 2] = $13_1;
     }
     label$14 : {
      if (!($11 | $13_1)) {
       break label$14
      }
      $166($0, $23_1, $17_1, $4_1 + 80 | 0, $4_1 + 56 | 0);
      $1_1 = HEAP32[$4_1 + 80 >> 2];
      if ($1_1) {
       $23_1 = HEAP32[$1_1 + 12 >> 2];
       HEAP32[$4_1 + 124 >> 2] = $23_1;
      }
      $1_1 = HEAP32[$4_1 + 56 >> 2];
      if (!$1_1) {
       break label$14
      }
      $17_1 = HEAP32[$1_1 + 12 >> 2];
      HEAP32[$4_1 + 120 >> 2] = $17_1;
     }
     $28_1 = HEAP32[$17_1 + 96 >> 2] + 1 | 0;
     $35 = HEAP32[$17_1 + 92 >> 2];
     $20 = HEAP32[$17_1 + 88 >> 2];
     break label$3;
    }
    $28_1 = HEAP32[$17_1 + 96 >> 2];
    $35 = HEAP32[$17_1 + 92 >> 2];
    $23_1 = HEAP32[$4_1 + 124 >> 2];
    $20 = HEAP32[$17_1 + 88 >> 2] + 1 | 0;
   }
   $13_1 = $23_1;
   $6_1 = $17_1;
   $5_1 = 0;
   $1_1 = 0;
   $25 = 0;
   $29_1 = 1;
   $10 = 0;
   $11 = 0;
   $18_1 = 0;
   while (1) {
    HEAP32[$4_1 + 116 >> 2] = -1;
    $31_1 = $6_1 + 92 | 0;
    $32 = $13_1 + 92 | 0;
    $9_1 = HEAP32[$32 >> 2];
    $3_1 = HEAP32[$31_1 >> 2] - $9_1 | 0;
    HEAP32[$4_1 + 108 >> 2] = $3_1;
    $33_1 = $6_1 + 96 | 0;
    $34 = $13_1 + 96 | 0;
    $7_1 = HEAP32[$34 >> 2];
    $8_1 = HEAP32[$33_1 >> 2] - $7_1 | 0;
    HEAP32[$4_1 + 112 >> 2] = $8_1;
    $14 = HEAP32[$13_1 + 88 >> 2];
    $2_1 = HEAP32[$6_1 + 88 >> 2] - $14 | 0;
    HEAP32[$4_1 + 104 >> 2] = $2_1;
    $12_1 = $35 - $9_1 | 0;
    $9_1 = $28_1 - $7_1 | 0;
    $7_1 = Math_imul($12_1, $8_1) - Math_imul($9_1, $3_1) | 0;
    $21 = $7_1 >> 31;
    $30 = $7_1;
    HEAP32[$4_1 + 80 >> 2] = $7_1;
    HEAP32[$4_1 + 84 >> 2] = $21;
    $7_1 = Math_imul($2_1, $9_1);
    $9_1 = $20 - $14 | 0;
    $7_1 = $7_1 - Math_imul($9_1, $8_1) | 0;
    $26_1 = $7_1 >> 31;
    $27_1 = $7_1;
    HEAP32[$4_1 + 88 >> 2] = $7_1;
    HEAP32[$4_1 + 92 >> 2] = $26_1;
    $7_1 = Math_imul($3_1, $9_1) - Math_imul($2_1, $12_1) | 0;
    $24_1 = $7_1 >> 31;
    $16_1 = $7_1;
    HEAP32[$4_1 + 96 >> 2] = $7_1;
    HEAP32[$4_1 + 100 >> 2] = $24_1;
    $9_1 = $2_1;
    $15_1 = $2_1 >> 31;
    $2_1 = __wasm_i64_mul($27_1, $26_1, $2_1, $15_1);
    $12_1 = i64toi32_i32$HIGH_BITS;
    $7_1 = $3_1;
    $14 = $3_1 >> 31;
    $3_1 = __wasm_i64_mul($30, $21, $3_1, $14);
    HEAP32[$4_1 + 72 >> 2] = $2_1 - $3_1;
    HEAP32[$4_1 + 76 >> 2] = $12_1 - (i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 < $3_1 >>> 0) | 0);
    $3_1 = $8_1;
    $12_1 = $3_1 >> 31;
    $2_1 = __wasm_i64_mul($30, $21, $3_1, $12_1);
    $8_1 = i64toi32_i32$HIGH_BITS;
    $9_1 = __wasm_i64_mul($16_1, $24_1, $9_1, $15_1);
    HEAP32[$4_1 + 64 >> 2] = $2_1 - $9_1;
    HEAP32[$4_1 + 68 >> 2] = $8_1 - (i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 < $9_1 >>> 0) | 0);
    $2_1 = __wasm_i64_mul($16_1, $24_1, $7_1, $14);
    $7_1 = i64toi32_i32$HIGH_BITS;
    $3_1 = __wasm_i64_mul($27_1, $26_1, $3_1, $12_1);
    HEAP32[$4_1 + 56 >> 2] = $2_1 - $3_1;
    HEAP32[$4_1 + 60 >> 2] = $7_1 - (i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 < $3_1 >>> 0) | 0);
    HEAP32[$4_1 + 48 >> 2] = 0;
    $2_1 = $4_1 + 40 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    HEAP32[$4_1 + 32 >> 2] = 0;
    HEAP32[$4_1 + 36 >> 2] = 0;
    $16_1 = $167($0, 0, $13_1, $4_1 + 104 | 0, $4_1 + 80 | 0, $4_1 + 56 | 0, $4_1 + 32 | 0);
    HEAP32[$4_1 + 24 >> 2] = 0;
    $2_1 = $4_1 + 16 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    HEAP32[$4_1 + 8 >> 2] = 0;
    HEAP32[$4_1 + 12 >> 2] = 0;
    $14 = $167($0, 1, $6_1, $4_1 + 104 | 0, $4_1 + 80 | 0, $4_1 + 56 | 0, $4_1 + 8 | 0);
    label$17 : {
     if (!($14 | $16_1)) {
      $3_1 = $162($0, $13_1, $6_1);
      HEAP32[$13_1 + 8 >> 2] = $3_1;
      $2_1 = HEAP32[$3_1 + 8 >> 2];
      HEAP32[$6_1 + 8 >> 2] = $2_1;
      HEAP32[$3_1 + 4 >> 2] = $3_1;
      HEAP32[$3_1 >> 2] = $3_1;
      HEAP32[$2_1 + 4 >> 2] = $2_1;
      HEAP32[$2_1 >> 2] = $2_1;
      $2_1 = 0;
      break label$17;
     }
     $15_1 = $16_1 ? -1 : 1;
     if (!(!$16_1 | !$14)) {
      $15_1 = $158($4_1 + 32 | 0, $4_1 + 8 | 0)
     }
     label$20 : {
      label$21 : {
       if ($29_1) {
        break label$21
       }
       label$22 : {
        if (($15_1 | 0) >= 0) {
         if (HEAP32[$4_1 + 24 >> 2] > -1) {
          break label$21
         }
         if (!(HEAP32[$4_1 + 16 >> 2] | HEAP32[$4_1 + 20 >> 2])) {
          break label$22
         }
         break label$21;
        }
        if (HEAP32[$4_1 + 40 >> 2] | HEAP32[$4_1 + 44 >> 2] | HEAP32[$4_1 + 48 >> 2] > -1) {
         break label$21
        }
       }
       $8_1 = $5_1;
       $3_1 = $1_1;
       $12_1 = $10;
       $7_1 = $11;
       break label$20;
      }
      $12_1 = $162($0, $13_1, $6_1);
      $7_1 = $12_1;
      if ($10) {
       HEAP32[$10 + 4 >> 2] = $12_1;
       $7_1 = $11;
      }
      HEAP32[$12_1 >> 2] = $10;
      $8_1 = HEAP32[$12_1 + 8 >> 2];
      $3_1 = $8_1;
      if ($5_1) {
       HEAP32[$5_1 >> 2] = $8_1;
       $3_1 = $1_1;
      }
      HEAP32[$8_1 + 4 >> 2] = $5_1;
     }
     HEAP32[$4_1 + 4 >> 2] = $16_1;
     HEAP32[$4_1 >> 2] = $14;
     $5_1 = $14;
     if (!$15_1) {
      $166($0, $13_1, $6_1, $4_1 + 4 | 0, $4_1);
      $5_1 = HEAP32[$4_1 >> 2];
     }
     label$27 : {
      if (!(!$5_1 | ($15_1 | 0) < 0)) {
       label$29 : {
        if (!$19_1) {
         break label$29
        }
        $2_1 = HEAP32[$19_1 >> 2];
        if (($14 | 0) == ($2_1 | 0)) {
         break label$29
        }
        while (1) {
         $10 = HEAP32[$2_1 + 8 >> 2];
         $9_1 = 0;
         $11 = 0;
         $1_1 = HEAP32[$2_1 >> 2];
         if (($2_1 | 0) != ($1_1 | 0)) {
          HEAP32[$1_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2];
          HEAP32[HEAP32[$2_1 + 4 >> 2] >> 2] = $1_1;
          $11 = $1_1;
         }
         HEAP32[HEAP32[$10 + 12 >> 2] + 8 >> 2] = $11;
         $11 = HEAP32[$10 >> 2];
         if (($10 | 0) != ($11 | 0)) {
          HEAP32[$11 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
          HEAP32[HEAP32[$10 + 4 >> 2] >> 2] = $11;
          $9_1 = $11;
         }
         HEAP32[HEAP32[$2_1 + 12 >> 2] + 8 >> 2] = $9_1;
         HEAP32[$2_1 + 12 >> 2] = 0;
         HEAP32[$2_1 + 16 >> 2] = 0;
         HEAP32[$2_1 + 4 >> 2] = 0;
         HEAP32[$2_1 + 8 >> 2] = 0;
         HEAP32[$2_1 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $2_1;
         $2_1 = $10 + 12 | 0;
         HEAP32[$2_1 >> 2] = 0;
         HEAP32[$2_1 + 4 >> 2] = 0;
         HEAP32[$10 + 4 >> 2] = 0;
         HEAP32[$10 + 8 >> 2] = 0;
         HEAP32[$10 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $10;
         HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
         $2_1 = $1_1;
         if (($14 | 0) != ($1_1 | 0)) {
          continue
         }
         break;
        };
       }
       label$33 : {
        if ($8_1) {
         if (!$19_1) {
          $19_1 = HEAP32[$14 + 4 >> 2];
          $25 = $3_1;
         }
         HEAP32[$19_1 >> 2] = $3_1;
         HEAP32[$3_1 + 4 >> 2] = $19_1;
         HEAP32[$14 + 4 >> 2] = $8_1;
         HEAP32[$8_1 >> 2] = $14;
         $3_1 = 0;
         break label$33;
        }
        $25 = $19_1 ? $25 : $14;
       }
       $11 = HEAP32[$5_1 + 12 >> 2];
       HEAP32[$4_1 + 120 >> 2] = $11;
       $28_1 = HEAP32[$33_1 >> 2];
       $35 = HEAP32[$31_1 >> 2];
       $19_1 = HEAP32[$5_1 + 8 >> 2];
       $20 = HEAP32[$6_1 + 88 >> 2];
       $5_1 = 0;
       break label$27;
      }
      $11 = $6_1;
      $5_1 = $8_1;
     }
     label$36 : {
      label$37 : {
       if (($15_1 | 0) > 0) {
        break label$37
       }
       $10 = HEAP32[$4_1 + 4 >> 2];
       if (!$10) {
        break label$37
       }
       label$38 : {
        if (!$22_1) {
         break label$38
        }
        $1_1 = HEAP32[$22_1 + 4 >> 2];
        if (($16_1 | 0) == ($1_1 | 0)) {
         break label$38
        }
        while (1) {
         $14 = $1_1 + 4 | 0;
         $15_1 = HEAP32[$1_1 + 8 >> 2];
         $9_1 = HEAP32[$1_1 + 4 >> 2];
         $6_1 = 0;
         $2_1 = 0;
         $8_1 = HEAP32[$1_1 >> 2];
         if (($1_1 | 0) != ($8_1 | 0)) {
          HEAP32[$8_1 + 4 >> 2] = $9_1;
          HEAP32[HEAP32[$14 >> 2] >> 2] = $8_1;
          $2_1 = $8_1;
         }
         HEAP32[HEAP32[$15_1 + 12 >> 2] + 8 >> 2] = $2_1;
         $2_1 = HEAP32[$15_1 >> 2];
         if (($15_1 | 0) != ($2_1 | 0)) {
          HEAP32[$2_1 + 4 >> 2] = HEAP32[$15_1 + 4 >> 2];
          HEAP32[HEAP32[$15_1 + 4 >> 2] >> 2] = $2_1;
          $6_1 = $2_1;
         }
         HEAP32[HEAP32[$1_1 + 12 >> 2] + 8 >> 2] = $6_1;
         $2_1 = $14 + 8 | 0;
         HEAP32[$2_1 >> 2] = 0;
         HEAP32[$2_1 + 4 >> 2] = 0;
         HEAP32[$14 >> 2] = 0;
         HEAP32[$14 + 4 >> 2] = 0;
         HEAP32[$1_1 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $1_1;
         $1_1 = $15_1 + 12 | 0;
         HEAP32[$1_1 >> 2] = 0;
         HEAP32[$1_1 + 4 >> 2] = 0;
         HEAP32[$15_1 + 4 >> 2] = 0;
         HEAP32[$15_1 + 8 >> 2] = 0;
         HEAP32[$15_1 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $15_1;
         HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
         $1_1 = $9_1;
         if (($16_1 | 0) != ($1_1 | 0)) {
          continue
         }
         break;
        };
       }
       label$42 : {
        if ($12_1) {
         if (!$22_1) {
          $22_1 = HEAP32[$16_1 >> 2];
          $18_1 = $7_1;
         }
         HEAP32[$22_1 + 4 >> 2] = $7_1;
         HEAP32[$7_1 >> 2] = $22_1;
         HEAP32[$12_1 + 4 >> 2] = $16_1;
         HEAP32[$16_1 >> 2] = $12_1;
         $7_1 = 0;
         break label$42;
        }
        $18_1 = $22_1 ? $18_1 : $16_1;
       }
       $1_1 = HEAP32[$10 + 12 >> 2];
       HEAP32[$4_1 + 124 >> 2] = $1_1;
       $28_1 = HEAP32[$34 >> 2];
       $35 = HEAP32[$32 >> 2];
       $22_1 = HEAP32[$10 + 8 >> 2];
       $20 = HEAP32[$13_1 + 88 >> 2];
       $12_1 = 0;
       break label$36;
      }
      $1_1 = $13_1;
     }
     $10 = $12_1;
     $2_1 = 1;
     label$45 : {
      if (!(($1_1 | 0) != ($23_1 | 0) | ($11 | 0) != ($17_1 | 0))) {
       label$47 : {
        if (!$22_1) {
         HEAP32[$10 + 4 >> 2] = $7_1;
         HEAP32[$7_1 >> 2] = $10;
         HEAP32[$1_1 + 8 >> 2] = $10;
         break label$47;
        }
        $1_1 = HEAP32[$22_1 + 4 >> 2];
        if (($1_1 | 0) != ($18_1 | 0)) {
         while (1) {
          $9_1 = $1_1 + 4 | 0;
          $8_1 = HEAP32[$1_1 + 8 >> 2];
          $11 = HEAP32[$1_1 + 4 >> 2];
          $6_1 = 0;
          $2_1 = 0;
          $13_1 = HEAP32[$1_1 >> 2];
          if (($1_1 | 0) != ($13_1 | 0)) {
           HEAP32[$13_1 + 4 >> 2] = $11;
           HEAP32[HEAP32[$9_1 >> 2] >> 2] = $13_1;
           $2_1 = $13_1;
          }
          HEAP32[HEAP32[$8_1 + 12 >> 2] + 8 >> 2] = $2_1;
          $2_1 = HEAP32[$8_1 >> 2];
          if (($8_1 | 0) != ($2_1 | 0)) {
           HEAP32[$2_1 + 4 >> 2] = HEAP32[$8_1 + 4 >> 2];
           HEAP32[HEAP32[$8_1 + 4 >> 2] >> 2] = $2_1;
           $6_1 = $2_1;
          }
          HEAP32[HEAP32[$1_1 + 12 >> 2] + 8 >> 2] = $6_1;
          $2_1 = $9_1 + 8 | 0;
          HEAP32[$2_1 >> 2] = 0;
          HEAP32[$2_1 + 4 >> 2] = 0;
          HEAP32[$9_1 >> 2] = 0;
          HEAP32[$9_1 + 4 >> 2] = 0;
          HEAP32[$1_1 >> 2] = HEAP32[$0 + 56 >> 2];
          HEAP32[$0 + 56 >> 2] = $1_1;
          $1_1 = $8_1 + 12 | 0;
          HEAP32[$1_1 >> 2] = 0;
          HEAP32[$1_1 + 4 >> 2] = 0;
          HEAP32[$8_1 + 4 >> 2] = 0;
          HEAP32[$8_1 + 8 >> 2] = 0;
          HEAP32[$8_1 >> 2] = HEAP32[$0 + 56 >> 2];
          HEAP32[$0 + 56 >> 2] = $8_1;
          HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
          $1_1 = $11;
          if (($18_1 | 0) != ($1_1 | 0)) {
           continue
          }
          break;
         }
        }
        if (!$10) {
         break label$47
        }
        HEAP32[$22_1 + 4 >> 2] = $7_1;
        HEAP32[$7_1 >> 2] = $22_1;
        HEAP32[$10 + 4 >> 2] = $18_1;
        HEAP32[$18_1 >> 2] = $10;
       }
       if (!$19_1) {
        HEAP32[$5_1 >> 2] = $3_1;
        HEAP32[$3_1 + 4 >> 2] = $5_1;
        HEAP32[HEAP32[$4_1 + 120 >> 2] + 8 >> 2] = $5_1;
        $19_1 = 0;
        $1_1 = $3_1;
        $11 = $7_1;
        $2_1 = 0;
        break label$17;
       }
       $2_1 = HEAP32[$19_1 >> 2];
       if (($2_1 | 0) != ($25 | 0)) {
        while (1) {
         $6_1 = HEAP32[$2_1 + 8 >> 2];
         $9_1 = 0;
         $11 = 0;
         $1_1 = HEAP32[$2_1 >> 2];
         if (($2_1 | 0) != ($1_1 | 0)) {
          HEAP32[$1_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2];
          HEAP32[HEAP32[$2_1 + 4 >> 2] >> 2] = $1_1;
          $11 = $1_1;
         }
         HEAP32[HEAP32[$6_1 + 12 >> 2] + 8 >> 2] = $11;
         $11 = HEAP32[$6_1 >> 2];
         if (($6_1 | 0) != ($11 | 0)) {
          HEAP32[$11 + 4 >> 2] = HEAP32[$6_1 + 4 >> 2];
          HEAP32[HEAP32[$6_1 + 4 >> 2] >> 2] = $11;
          $9_1 = $11;
         }
         HEAP32[HEAP32[$2_1 + 12 >> 2] + 8 >> 2] = $9_1;
         HEAP32[$2_1 + 12 >> 2] = 0;
         HEAP32[$2_1 + 16 >> 2] = 0;
         HEAP32[$2_1 + 4 >> 2] = 0;
         HEAP32[$2_1 + 8 >> 2] = 0;
         HEAP32[$2_1 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $2_1;
         $2_1 = $6_1 + 12 | 0;
         HEAP32[$2_1 >> 2] = 0;
         HEAP32[$2_1 + 4 >> 2] = 0;
         HEAP32[$6_1 + 4 >> 2] = 0;
         HEAP32[$6_1 + 8 >> 2] = 0;
         HEAP32[$6_1 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $6_1;
         HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
         $2_1 = $1_1;
         if (($25 | 0) != ($1_1 | 0)) {
          continue
         }
         break;
        }
       }
       $2_1 = 0;
       label$58 : {
        if (!$5_1) {
         $5_1 = 0;
         break label$58;
        }
        HEAP32[$3_1 + 4 >> 2] = $19_1;
        HEAP32[$19_1 >> 2] = $3_1;
        HEAP32[$25 + 4 >> 2] = $5_1;
        HEAP32[$5_1 >> 2] = $25;
       }
       break label$45;
      }
      $29_1 = 0;
     }
     $1_1 = $3_1;
     $11 = $7_1;
    }
    if (!$2_1) {
     break label$1
    }
    $13_1 = HEAP32[$4_1 + 124 >> 2];
    $6_1 = HEAP32[$4_1 + 120 >> 2];
    continue;
   };
  }
  global$0 = $4_1 + 128 | 0;
 }
 
 function $166($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = 0, $21 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = 0, $31_1 = 0, $32 = 0, $33_1 = 0, $34 = 0, $35 = 0, $36_1 = 0, $37_1 = 0, $38 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $17_1 = $1_1;
  $26_1 = HEAP32[$3_1 >> 2];
  if ($26_1) {
   $17_1 = HEAP32[$26_1 + 12 >> 2]
  }
  $22_1 = HEAP32[$17_1 + 96 >> 2];
  $25 = HEAP32[$17_1 + 92 >> 2];
  $17_1 = HEAP32[$17_1 + 88 >> 2];
  $34 = HEAP32[$4_1 >> 2];
  $5_1 = $34 ? HEAP32[$34 + 12 >> 2] : $2_1;
  $6_1 = HEAP32[$1_1 + 96 >> 2];
  $35 = HEAP32[$2_1 + 96 >> 2] - $6_1 | 0;
  $10 = HEAP32[($26_1 ? $26_1 : $34) + 12 >> 2];
  $12_1 = HEAP32[$1_1 + 92 >> 2];
  $8_1 = HEAP32[$10 + 92 >> 2] - $12_1 | 0;
  $36_1 = HEAP32[$2_1 + 92 >> 2] - $12_1 | 0;
  $15_1 = HEAP32[$10 + 96 >> 2] - $6_1 | 0;
  $9_1 = Math_imul($35, $8_1) - Math_imul($36_1, $15_1) | 0;
  $42 = $9_1;
  $39_1 = $9_1 >> 31;
  $19_1 = $35 >> 31;
  $9_1 = __wasm_i64_mul($9_1, $39_1, $35, $19_1);
  $21 = i64toi32_i32$HIGH_BITS;
  $1_1 = HEAP32[$1_1 + 88 >> 2];
  $10 = HEAP32[$10 + 88 >> 2] - $1_1 | 0;
  $37_1 = HEAP32[$2_1 + 88 >> 2] - $1_1 | 0;
  $2_1 = Math_imul($10, $36_1) - Math_imul($8_1, $37_1) | 0;
  $43_1 = $2_1;
  $40_1 = $2_1 >> 31;
  $8_1 = $37_1 >> 31;
  $2_1 = __wasm_i64_mul($2_1, $40_1, $37_1, $8_1);
  $29_1 = $9_1 - $2_1 | 0;
  $30 = $21 - (i64toi32_i32$HIGH_BITS + ($9_1 >>> 0 < $2_1 >>> 0) | 0) | 0;
  $9_1 = __wasm_i64_mul($29_1, $30, $25, $25 >> 31);
  $21 = i64toi32_i32$HIGH_BITS;
  $14 = $36_1 >> 31;
  $2_1 = __wasm_i64_mul($43_1, $40_1, $36_1, $14);
  $27_1 = i64toi32_i32$HIGH_BITS;
  $10 = Math_imul($15_1, $37_1) - Math_imul($10, $35) | 0;
  $44_1 = $10;
  $41_1 = $10 >> 31;
  $10 = __wasm_i64_mul($10, $41_1, $35, $19_1);
  $31_1 = $2_1 - $10 | 0;
  $27_1 = $27_1 - (i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 < $10 >>> 0) | 0) | 0;
  $15_1 = __wasm_i64_mul($31_1, $27_1, $17_1, $17_1 >> 31);
  $10 = $15_1 + $9_1 | 0;
  $9_1 = i64toi32_i32$HIGH_BITS + $21 | 0;
  $2_1 = __wasm_i64_mul($44_1, $41_1, $37_1, $8_1);
  $8_1 = i64toi32_i32$HIGH_BITS;
  $19_1 = __wasm_i64_mul($42, $39_1, $36_1, $14);
  $32 = $2_1 - $19_1 | 0;
  $33_1 = $8_1 - (i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 < $19_1 >>> 0) | 0) | 0;
  $8_1 = __wasm_i64_mul($32, $33_1, $22_1, $22_1 >> 31);
  $19_1 = $10 + $8_1 | 0;
  $2_1 = $19_1;
  $10 = i64toi32_i32$HIGH_BITS + ($10 >>> 0 < $15_1 >>> 0 ? $9_1 + 1 | 0 : $9_1) | 0;
  $10 = $2_1 >>> 0 < $8_1 >>> 0 ? $10 + 1 | 0 : $10;
  $1_1 = __wasm_i64_mul($42, $39_1, $1_1, $1_1 >> 31);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $8_1 = __wasm_i64_mul($43_1, $40_1, $6_1, $6_1 >> 31);
  $1_1 = $8_1 + $1_1 | 0;
  $6_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
  $12_1 = __wasm_i64_mul($44_1, $41_1, $12_1, $12_1 >> 31);
  $9_1 = $12_1 + $1_1 | 0;
  $23_1 = $9_1;
  $1_1 = i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $8_1 >>> 0 ? $6_1 + 1 | 0 : $6_1) | 0;
  $20 = $9_1 >>> 0 < $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $15_1 = HEAP32[$5_1 + 96 >> 2];
  $19_1 = HEAP32[$5_1 + 92 >> 2];
  $21 = HEAP32[$5_1 + 88 >> 2];
  $1_1 = $34;
  label$3 : {
   if (!$26_1) {
    break label$3
   }
   $1_1 = $34;
   if (!HEAP32[$26_1 + 12 >> 2]) {
    break label$3
   }
   $1_1 = HEAP32[HEAP32[$26_1 + 8 >> 2] + 4 >> 2];
   $6_1 = HEAP32[$1_1 + 12 >> 2];
   $12_1 = HEAP32[$6_1 + 92 >> 2];
   $5_1 = $12_1;
   $12_1 = $5_1 >> 31;
   $14 = __wasm_i64_mul($5_1, $12_1, $44_1, $41_1);
   $18_1 = i64toi32_i32$HIGH_BITS;
   $8_1 = HEAP32[$6_1 + 88 >> 2];
   $9_1 = $8_1;
   $8_1 = $8_1 >> 31;
   $16_1 = __wasm_i64_mul($9_1, $8_1, $42, $39_1);
   $14 = $14 + $16_1 | 0;
   $13_1 = i64toi32_i32$HIGH_BITS + $18_1 | 0;
   $6_1 = HEAP32[$6_1 + 96 >> 2];
   $18_1 = $6_1;
   $11 = $6_1 >> 31;
   $6_1 = __wasm_i64_mul($6_1, $11, $43_1, $40_1);
   $24_1 = $14 + $6_1 | 0;
   $14 = i64toi32_i32$HIGH_BITS + ($14 >>> 0 < $16_1 >>> 0 ? $13_1 + 1 | 0 : $13_1) | 0;
   $6_1 = $24_1 >>> 0 < $6_1 >>> 0 ? $14 + 1 | 0 : $14;
   label$6 : {
    if (($6_1 | 0) < ($20 | 0) ? 1 : ($6_1 | 0) <= ($20 | 0) ? ($24_1 >>> 0 >= $23_1 >>> 0 ? 0 : 1) : 0) {
     break label$6
    }
    $14 = $1_1 + 12 | 0;
    $24_1 = HEAP32[$0 + 100 >> 2];
    while (1) {
     if (($24_1 | 0) == HEAP32[$1_1 + 20 >> 2]) {
      break label$6
     }
     $5_1 = __wasm_i64_mul($29_1, $30, $5_1, $12_1);
     $12_1 = i64toi32_i32$HIGH_BITS;
     $9_1 = __wasm_i64_mul($31_1, $27_1, $9_1, $8_1);
     $6_1 = $9_1 + $5_1 | 0;
     $12_1 = i64toi32_i32$HIGH_BITS + $12_1 | 0;
     $8_1 = __wasm_i64_mul($32, $33_1, $18_1, $11);
     $18_1 = $8_1 + $6_1 | 0;
     $5_1 = $18_1;
     $6_1 = i64toi32_i32$HIGH_BITS + ($6_1 >>> 0 < $9_1 >>> 0 ? $12_1 + 1 | 0 : $12_1) | 0;
     $12_1 = $5_1 >>> 0 < $8_1 >>> 0 ? $6_1 + 1 | 0 : $6_1;
     $6_1 = $12_1;
     if (($6_1 | 0) < ($10 | 0) ? 1 : ($6_1 | 0) <= ($10 | 0) ? ($5_1 >>> 0 > $2_1 >>> 0 ? 0 : 1) : 0) {
      break label$6
     }
     HEAP32[$3_1 >> 2] = $1_1;
     $2_1 = HEAP32[$14 >> 2];
     $22_1 = HEAP32[$2_1 + 96 >> 2];
     $25 = HEAP32[$2_1 + 92 >> 2];
     $17_1 = HEAP32[$2_1 + 88 >> 2];
     if ($2_1) {
      $1_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] + 4 >> 2];
      $14 = $1_1 + 12 | 0;
      $2_1 = $5_1;
      $10 = $6_1;
      $6_1 = HEAP32[$1_1 + 12 >> 2];
      $12_1 = HEAP32[$6_1 + 92 >> 2];
      $5_1 = $12_1;
      $12_1 = $5_1 >> 31;
      $18_1 = __wasm_i64_mul($5_1, $12_1, $44_1, $41_1);
      $11 = i64toi32_i32$HIGH_BITS;
      $8_1 = HEAP32[$6_1 + 88 >> 2];
      $9_1 = $8_1;
      $8_1 = $8_1 >> 31;
      $38 = __wasm_i64_mul($9_1, $8_1, $42, $39_1);
      $13_1 = $18_1 + $38 | 0;
      $16_1 = i64toi32_i32$HIGH_BITS + $11 | 0;
      $6_1 = HEAP32[$6_1 + 96 >> 2];
      $18_1 = $6_1;
      $11 = $6_1 >> 31;
      $6_1 = __wasm_i64_mul($6_1, $11, $43_1, $40_1);
      $28_1 = $6_1 + $13_1 | 0;
      $13_1 = i64toi32_i32$HIGH_BITS + ($13_1 >>> 0 < $38 >>> 0 ? $16_1 + 1 | 0 : $16_1) | 0;
      $6_1 = $28_1 >>> 0 < $6_1 >>> 0 ? $13_1 + 1 | 0 : $13_1;
      if (($6_1 | 0) < ($20 | 0) ? 1 : ($6_1 | 0) <= ($20 | 0) ? ($28_1 >>> 0 >= $23_1 >>> 0 ? 0 : 1) : 0) {
       break label$6
      }
      continue;
     }
     break;
    };
    $2_1 = $5_1;
    $10 = $6_1;
   }
   $1_1 = HEAP32[$4_1 >> 2];
  }
  $5_1 = __wasm_i64_mul($29_1, $30, $19_1, $19_1 >> 31);
  $12_1 = i64toi32_i32$HIGH_BITS;
  $9_1 = __wasm_i64_mul($31_1, $27_1, $21, $21 >> 31);
  $6_1 = $9_1 + $5_1 | 0;
  $12_1 = i64toi32_i32$HIGH_BITS + $12_1 | 0;
  $8_1 = __wasm_i64_mul($32, $33_1, $15_1, $15_1 >> 31);
  $14 = $8_1 + $6_1 | 0;
  $5_1 = $14;
  $6_1 = i64toi32_i32$HIGH_BITS + ($6_1 >>> 0 < $9_1 >>> 0 ? $12_1 + 1 | 0 : $12_1) | 0;
  $12_1 = $5_1 >>> 0 < $8_1 >>> 0 ? $6_1 + 1 | 0 : $6_1;
  label$9 : {
   if (!$1_1) {
    $1_1 = 0;
    break label$9;
   }
   if (!HEAP32[$1_1 + 12 >> 2]) {
    break label$9
   }
   $14 = HEAP32[HEAP32[$1_1 + 8 >> 2] >> 2];
   $6_1 = HEAP32[$14 + 12 >> 2];
   $8_1 = HEAP32[$6_1 + 92 >> 2];
   $9_1 = $8_1;
   $8_1 = $8_1 >> 31;
   $13_1 = __wasm_i64_mul($9_1, $8_1, $44_1, $41_1);
   $16_1 = i64toi32_i32$HIGH_BITS;
   $11 = HEAP32[$6_1 + 88 >> 2];
   $18_1 = $11;
   $11 = $11 >> 31;
   $28_1 = __wasm_i64_mul($18_1, $11, $42, $39_1);
   $13_1 = $13_1 + $28_1 | 0;
   $16_1 = i64toi32_i32$HIGH_BITS + $16_1 | 0;
   $6_1 = HEAP32[$6_1 + 96 >> 2];
   $24_1 = $6_1;
   $38 = $6_1 >> 31;
   $6_1 = __wasm_i64_mul($6_1, $38, $43_1, $40_1);
   $45_1 = $6_1 + $13_1 | 0;
   $13_1 = i64toi32_i32$HIGH_BITS + ($13_1 >>> 0 < $28_1 >>> 0 ? $16_1 + 1 | 0 : $16_1) | 0;
   $6_1 = $45_1 >>> 0 < $6_1 >>> 0 ? $13_1 + 1 | 0 : $13_1;
   if (($6_1 | 0) < ($20 | 0) ? 1 : ($6_1 | 0) <= ($20 | 0) ? ($45_1 >>> 0 >= $23_1 >>> 0 ? 0 : 1) : 0) {
    break label$9
   }
   $13_1 = $14 + 12 | 0;
   $45_1 = HEAP32[$0 + 100 >> 2];
   while (1) {
    $6_1 = $14;
    if (($45_1 | 0) == HEAP32[$6_1 + 20 >> 2]) {
     break label$9
    }
    $9_1 = __wasm_i64_mul($29_1, $30, $9_1, $8_1);
    $8_1 = i64toi32_i32$HIGH_BITS;
    $18_1 = __wasm_i64_mul($31_1, $27_1, $18_1, $11);
    $9_1 = $18_1 + $9_1 | 0;
    $14 = i64toi32_i32$HIGH_BITS + $8_1 | 0;
    $11 = __wasm_i64_mul($32, $33_1, $24_1, $38);
    $16_1 = $11 + $9_1 | 0;
    $8_1 = $16_1;
    $9_1 = i64toi32_i32$HIGH_BITS + ($9_1 >>> 0 < $18_1 >>> 0 ? $14 + 1 | 0 : $14) | 0;
    $9_1 = $8_1 >>> 0 < $11 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    if (($9_1 | 0) < ($12_1 | 0) ? 1 : ($9_1 | 0) <= ($12_1 | 0) ? ($8_1 >>> 0 > $5_1 >>> 0 ? 0 : 1) : 0) {
     break label$9
    }
    HEAP32[$4_1 >> 2] = $6_1;
    $1_1 = HEAP32[$13_1 >> 2];
    $15_1 = HEAP32[$1_1 + 96 >> 2];
    $19_1 = HEAP32[$1_1 + 92 >> 2];
    $21 = HEAP32[$1_1 + 88 >> 2];
    if ($1_1) {
     $14 = HEAP32[HEAP32[$6_1 + 8 >> 2] >> 2];
     $13_1 = $14 + 12 | 0;
     $5_1 = $8_1;
     $12_1 = $9_1;
     $1_1 = $6_1;
     $6_1 = HEAP32[$14 + 12 >> 2];
     $8_1 = HEAP32[$6_1 + 92 >> 2];
     $9_1 = $8_1;
     $8_1 = $8_1 >> 31;
     $16_1 = __wasm_i64_mul($9_1, $8_1, $44_1, $41_1);
     $24_1 = i64toi32_i32$HIGH_BITS;
     $11 = HEAP32[$6_1 + 88 >> 2];
     $18_1 = $11;
     $11 = $11 >> 31;
     $46_1 = __wasm_i64_mul($18_1, $11, $42, $39_1);
     $16_1 = $16_1 + $46_1 | 0;
     $28_1 = i64toi32_i32$HIGH_BITS + $24_1 | 0;
     $6_1 = HEAP32[$6_1 + 96 >> 2];
     $24_1 = $6_1;
     $38 = $6_1 >> 31;
     $6_1 = __wasm_i64_mul($6_1, $38, $43_1, $40_1);
     $47 = $16_1 + $6_1 | 0;
     $16_1 = i64toi32_i32$HIGH_BITS + ($16_1 >>> 0 < $46_1 >>> 0 ? $28_1 + 1 | 0 : $28_1) | 0;
     $6_1 = $47 >>> 0 < $6_1 >>> 0 ? $16_1 + 1 | 0 : $16_1;
     if (($6_1 | 0) < ($20 | 0) ? 1 : ($6_1 | 0) <= ($20 | 0) ? ($47 >>> 0 >= $23_1 >>> 0 ? 0 : 1) : 0) {
      break label$9
     }
     continue;
    }
    break;
   };
   $1_1 = $6_1;
   $5_1 = $8_1;
   $12_1 = $9_1;
  }
  label$13 : {
   $10 = $12_1 - (($5_1 >>> 0 < $2_1 >>> 0) + $10 | 0) | 0;
   $2_1 = $5_1 - $2_1 | 0;
   if (!(($10 | 0) < 0 ? 1 : ($10 | 0) <= 0 ? ($2_1 >>> 0 >= 1 ? 0 : 1) : 0)) {
    while (1) {
     $20 = (Math_imul($19_1 - $25 | 0, $36_1) + Math_imul($21 - $17_1 | 0, $37_1) | 0) + Math_imul($15_1 - $22_1 | 0, $35) | 0;
     $1_1 = $20;
     $14 = $1_1;
     $34 = $1_1 >> 31;
     label$16 : {
      $18_1 = HEAP32[$3_1 >> 2];
      if (!$18_1 | !HEAP32[$18_1 + 12 >> 2]) {
       break label$16
      }
      $23_1 = HEAP32[HEAP32[$18_1 >> 2] + 8 >> 2];
      if (HEAP32[$23_1 + 20 >> 2] <= HEAP32[$0 + 100 >> 2]) {
       break label$16
      }
      $5_1 = HEAP32[$23_1 + 12 >> 2];
      $1_1 = HEAP32[$5_1 + 92 >> 2];
      $8_1 = $1_1 - $25 | 0;
      $6_1 = HEAP32[$5_1 + 88 >> 2];
      $11 = $6_1 - $17_1 | 0;
      $12_1 = HEAP32[$5_1 + 96 >> 2];
      $5_1 = $12_1 - $22_1 | 0;
      $9_1 = (Math_imul($8_1, $36_1) + Math_imul($11, $37_1) | 0) + Math_imul($5_1, $35) | 0;
      $8_1 = __wasm_i64_mul($29_1, $30, $8_1, $8_1 >> 31);
      $13_1 = i64toi32_i32$HIGH_BITS;
      $16_1 = __wasm_i64_mul($31_1, $27_1, $11, $11 >> 31);
      $11 = $16_1 + $8_1 | 0;
      $13_1 = i64toi32_i32$HIGH_BITS + $13_1 | 0;
      $5_1 = __wasm_i64_mul($32, $33_1, $5_1, $5_1 >> 31);
      $8_1 = $11 + $5_1 | 0;
      $11 = i64toi32_i32$HIGH_BITS + ($11 >>> 0 < $16_1 >>> 0 ? $13_1 + 1 | 0 : $13_1) | 0;
      $5_1 = $8_1 >>> 0 < $5_1 >>> 0 ? $11 + 1 | 0 : $11;
      $11 = $5_1;
      label$17 : {
       if (!(($8_1 | 0) != 0 | ($5_1 | 0) != 0)) {
        if (($9_1 | 0) < 0) {
         break label$17
        }
        break label$16;
       }
       if (($11 | 0) > -1 ? 1 : ($11 | 0) >= -1 ? ($8_1 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
        break label$16
       }
       $5_1 = $9_1;
       $13_1 = $5_1 >> 31;
       $24_1 = $7_1;
       label$19 : {
        if (($5_1 | 0) >= 1) {
         HEAP32[$7_1 + 24 >> 2] = $5_1;
         HEAP32[$7_1 + 28 >> 2] = $13_1;
         HEAP32[$7_1 + 40 >> 2] = 1;
         $5_1 = -1;
         break label$19;
        }
        if (($9_1 | 0) <= -1) {
         HEAP32[$7_1 + 40 >> 2] = -1;
         HEAP32[$7_1 + 24 >> 2] = 0 - $5_1;
         HEAP32[$7_1 + 28 >> 2] = 0 - ((0 < $5_1 >>> 0) + $13_1 | 0);
         $5_1 = 1;
         break label$19;
        }
        HEAP32[$7_1 + 24 >> 2] = 0;
        HEAP32[$7_1 + 28 >> 2] = 0;
        HEAP32[$7_1 + 40 >> 2] = 0;
        $5_1 = 0;
       }
       HEAP32[$24_1 + 40 >> 2] = $5_1;
       HEAP32[$7_1 + 32 >> 2] = 0 - $8_1;
       HEAP32[$7_1 + 36 >> 2] = 0 - ((0 < $8_1 >>> 0) + $11 | 0);
       label$22 : {
        if (($20 | 0) >= 1) {
         HEAP32[$7_1 >> 2] = $14;
         HEAP32[$7_1 + 4 >> 2] = $34;
         HEAP32[$7_1 + 16 >> 2] = 1;
         $9_1 = -1;
         break label$22;
        }
        if (($20 | 0) <= -1) {
         HEAP32[$7_1 + 16 >> 2] = -1;
         HEAP32[$7_1 >> 2] = 0 - $14;
         HEAP32[$7_1 + 4 >> 2] = 0 - ((0 < $14 >>> 0) + $34 | 0);
         $9_1 = 1;
         break label$22;
        }
        HEAP32[$7_1 >> 2] = 0;
        HEAP32[$7_1 + 4 >> 2] = 0;
        HEAP32[$7_1 + 16 >> 2] = 0;
        $9_1 = 0;
       }
       $5_1 = $2_1;
       $8_1 = $10;
       label$25 : {
        if (($10 | 0) > 0 ? 1 : ($10 | 0) >= 0 ? ($5_1 >>> 0 <= 0 ? 0 : 1) : 0) {
         break label$25
        }
        $5_1 = 0;
        $8_1 = 0;
        if (($10 | 0) > -1 ? 1 : ($10 | 0) >= -1 ? ($2_1 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
         break label$25
        }
        HEAP32[$7_1 + 16 >> 2] = $9_1;
        $5_1 = 0 - $2_1 | 0;
        $8_1 = 0 - ((0 < $2_1 >>> 0) + $10 | 0) | 0;
       }
       $9_1 = $8_1;
       HEAP32[$7_1 + 8 >> 2] = $5_1;
       HEAP32[$7_1 + 12 >> 2] = $9_1;
       if (($158($7_1 + 24 | 0, $7_1) | 0) <= -1) {
        break label$16
       }
      }
      HEAP32[$3_1 >> 2] = ($18_1 | 0) == ($26_1 | 0) ? 0 : $23_1;
      $2_1 = $19_1 - $1_1 | 0;
      $2_1 = __wasm_i64_mul($29_1, $30, $2_1, $2_1 >> 31);
      $10 = i64toi32_i32$HIGH_BITS;
      $5_1 = $21 - $6_1 | 0;
      $17_1 = __wasm_i64_mul($31_1, $27_1, $5_1, $5_1 >> 31);
      $5_1 = $2_1 + $17_1 | 0;
      $10 = i64toi32_i32$HIGH_BITS + $10 | 0;
      $2_1 = $15_1 - $12_1 | 0;
      $9_1 = __wasm_i64_mul($32, $33_1, $2_1, $2_1 >> 31);
      $8_1 = $5_1 + $9_1 | 0;
      $2_1 = $8_1;
      $5_1 = i64toi32_i32$HIGH_BITS + ($5_1 >>> 0 < $17_1 >>> 0 ? $10 + 1 | 0 : $10) | 0;
      $10 = $8_1 >>> 0 < $9_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
      $17_1 = $6_1;
      $25 = $1_1;
      $22_1 = $12_1;
      continue;
     }
     $1_1 = HEAP32[$4_1 >> 2];
     if (!$1_1 | !HEAP32[$1_1 + 12 >> 2]) {
      break label$13
     }
     $8_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] >> 2];
     if (HEAP32[$8_1 + 20 >> 2] <= HEAP32[$0 + 100 >> 2]) {
      break label$13
     }
     $1_1 = HEAP32[$8_1 + 12 >> 2];
     $12_1 = HEAP32[$1_1 + 92 >> 2];
     $9_1 = $12_1 - $19_1 | 0;
     $5_1 = $9_1;
     $19_1 = $5_1;
     $18_1 = $5_1 >> 31;
     $5_1 = __wasm_i64_mul($5_1, $18_1, $44_1, $41_1);
     $6_1 = i64toi32_i32$HIGH_BITS;
     $11 = HEAP32[$1_1 + 88 >> 2];
     $21 = $11 - $21 | 0;
     $23_1 = $21;
     $13_1 = $23_1;
     $23_1 = $13_1 >> 31;
     $16_1 = __wasm_i64_mul($13_1, $23_1, $42, $39_1);
     $5_1 = $5_1 + $16_1 | 0;
     $6_1 = i64toi32_i32$HIGH_BITS + $6_1 | 0;
     $1_1 = HEAP32[$1_1 + 96 >> 2];
     $15_1 = $1_1 - $15_1 | 0;
     $38 = $15_1;
     $24_1 = $15_1 >> 31;
     $28_1 = __wasm_i64_mul($43_1, $40_1, $15_1, $24_1);
     if ((0 - $28_1 | 0) != ($5_1 | 0) | (0 - (i64toi32_i32$HIGH_BITS + (0 < $28_1 >>> 0) | 0) | 0) != (($5_1 >>> 0 < $16_1 >>> 0 ? $6_1 + 1 | 0 : $6_1) | 0)) {
      break label$13
     }
     $5_1 = $12_1 - $25 | 0;
     $5_1 = __wasm_i64_mul($29_1, $30, $5_1, $5_1 >> 31);
     $6_1 = i64toi32_i32$HIGH_BITS;
     $12_1 = $11 - $17_1 | 0;
     $12_1 = __wasm_i64_mul($31_1, $27_1, $12_1, $12_1 >> 31);
     $5_1 = $5_1 + $12_1 | 0;
     $6_1 = i64toi32_i32$HIGH_BITS + $6_1 | 0;
     $1_1 = $1_1 - $22_1 | 0;
     $11 = __wasm_i64_mul($32, $33_1, $1_1, $1_1 >> 31);
     $1_1 = $5_1 + $11 | 0;
     $5_1 = i64toi32_i32$HIGH_BITS + ($5_1 >>> 0 < $12_1 >>> 0 ? $6_1 + 1 | 0 : $6_1) | 0;
     $5_1 = $1_1 >>> 0 < $11 >>> 0 ? $5_1 + 1 | 0 : $5_1;
     $6_1 = $5_1;
     if (($5_1 | 0) < 0 ? 1 : ($5_1 | 0) <= 0 ? ($1_1 >>> 0 >= 1 ? 0 : 1) : 0) {
      break label$13
     }
     $12_1 = (Math_imul($9_1, $36_1) + Math_imul($21, $37_1) | 0) + Math_imul($15_1, $35) | 0;
     $5_1 = __wasm_i64_mul($29_1, $30, $19_1, $18_1);
     $9_1 = i64toi32_i32$HIGH_BITS;
     $19_1 = __wasm_i64_mul($31_1, $27_1, $13_1, $23_1);
     $5_1 = $19_1 + $5_1 | 0;
     $15_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
     $21 = __wasm_i64_mul($32, $33_1, $38, $24_1);
     $9_1 = $21 + $5_1 | 0;
     $5_1 = i64toi32_i32$HIGH_BITS + ($5_1 >>> 0 < $19_1 >>> 0 ? $15_1 + 1 | 0 : $15_1) | 0;
     $5_1 = $9_1 >>> 0 < $21 >>> 0 ? $5_1 + 1 | 0 : $5_1;
     $15_1 = $5_1;
     label$26 : {
      if (!(($9_1 | 0) != 0 | ($5_1 | 0) != 0)) {
       if (($12_1 | 0) < 0) {
        break label$26
       }
       break label$13;
      }
      if (($15_1 | 0) > -1 ? 1 : ($15_1 | 0) >= -1 ? ($9_1 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
       break label$13
      }
      $5_1 = $12_1;
      $19_1 = $5_1 >> 31;
      $18_1 = $7_1;
      label$28 : {
       if (($5_1 | 0) >= 1) {
        HEAP32[$7_1 + 24 >> 2] = $5_1;
        HEAP32[$7_1 + 28 >> 2] = $19_1;
        HEAP32[$7_1 + 40 >> 2] = 1;
        $5_1 = -1;
        break label$28;
       }
       if (($12_1 | 0) <= -1) {
        HEAP32[$7_1 + 40 >> 2] = -1;
        HEAP32[$7_1 + 24 >> 2] = 0 - $5_1;
        HEAP32[$7_1 + 28 >> 2] = 0 - ((0 < $5_1 >>> 0) + $19_1 | 0);
        $5_1 = 1;
        break label$28;
       }
       HEAP32[$7_1 + 24 >> 2] = 0;
       HEAP32[$7_1 + 28 >> 2] = 0;
       HEAP32[$7_1 + 40 >> 2] = 0;
       $5_1 = 0;
      }
      HEAP32[$18_1 + 40 >> 2] = $5_1;
      HEAP32[$7_1 + 32 >> 2] = 0 - $9_1;
      HEAP32[$7_1 + 36 >> 2] = 0 - ((0 < $9_1 >>> 0) + $15_1 | 0);
      label$31 : {
       if (($20 | 0) >= 1) {
        HEAP32[$7_1 >> 2] = $14;
        HEAP32[$7_1 + 4 >> 2] = $34;
        HEAP32[$7_1 + 16 >> 2] = 1;
        $12_1 = -1;
        break label$31;
       }
       if (($20 | 0) <= -1) {
        HEAP32[$7_1 + 16 >> 2] = -1;
        HEAP32[$7_1 >> 2] = 0 - $14;
        HEAP32[$7_1 + 4 >> 2] = 0 - ((0 < $14 >>> 0) + $34 | 0);
        $12_1 = 1;
        break label$31;
       }
       HEAP32[$7_1 >> 2] = 0;
       HEAP32[$7_1 + 4 >> 2] = 0;
       HEAP32[$7_1 + 16 >> 2] = 0;
       $12_1 = 0;
      }
      label$34 : {
       if (!(($10 | 0) < 0 ? 1 : ($10 | 0) <= 0 ? ($2_1 >>> 0 > 0 ? 0 : 1) : 0)) {
        $5_1 = $2_1;
        $9_1 = $10;
        break label$34;
       }
       $5_1 = 0;
       $9_1 = 0;
       if (($10 | 0) > -1 ? 1 : ($10 | 0) >= -1 ? ($2_1 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
        break label$34
       }
       HEAP32[$7_1 + 16 >> 2] = $12_1;
       $5_1 = 0 - $2_1 | 0;
       $9_1 = 0 - ((0 < $2_1 >>> 0) + $10 | 0) | 0;
      }
      $2_1 = $9_1;
      HEAP32[$7_1 + 8 >> 2] = $5_1;
      HEAP32[$7_1 + 12 >> 2] = $2_1;
      if (($158($7_1 + 24 | 0, $7_1) | 0) <= 0) {
       break label$13
      }
     }
     HEAP32[$4_1 >> 2] = $8_1;
     $2_1 = HEAP32[$8_1 + 12 >> 2];
     $15_1 = HEAP32[$2_1 + 96 >> 2];
     $19_1 = HEAP32[$2_1 + 92 >> 2];
     $21 = HEAP32[$2_1 + 88 >> 2];
     $2_1 = $1_1;
     $10 = $6_1;
     continue;
    }
   }
   if (($10 | 0) > -1 ? 1 : ($10 | 0) >= -1 ? ($2_1 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
    break label$13
   }
   while (1) {
    $26_1 = (Math_imul($19_1 - $25 | 0, $36_1) + Math_imul($21 - $17_1 | 0, $37_1) | 0) + Math_imul($15_1 - $22_1 | 0, $35) | 0;
    $5_1 = $26_1;
    $14 = $5_1;
    $18_1 = $5_1 >> 31;
    label$37 : {
     if (!$1_1 | !HEAP32[$1_1 + 12 >> 2]) {
      break label$37
     }
     $23_1 = HEAP32[HEAP32[$1_1 + 4 >> 2] + 8 >> 2];
     if (HEAP32[$23_1 + 20 >> 2] <= HEAP32[$0 + 100 >> 2]) {
      break label$37
     }
     $5_1 = HEAP32[$23_1 + 12 >> 2];
     $6_1 = HEAP32[$5_1 + 92 >> 2];
     $20 = $6_1 - $19_1 | 0;
     $12_1 = HEAP32[$5_1 + 88 >> 2];
     $11 = $12_1 - $21 | 0;
     $9_1 = HEAP32[$5_1 + 96 >> 2];
     $5_1 = $9_1 - $15_1 | 0;
     $8_1 = (Math_imul($20, $36_1) + Math_imul($11, $37_1) | 0) + Math_imul($5_1, $35) | 0;
     $20 = __wasm_i64_mul($29_1, $30, $20, $20 >> 31);
     $13_1 = i64toi32_i32$HIGH_BITS;
     $16_1 = __wasm_i64_mul($31_1, $27_1, $11, $11 >> 31);
     $11 = $16_1 + $20 | 0;
     $13_1 = i64toi32_i32$HIGH_BITS + $13_1 | 0;
     $5_1 = __wasm_i64_mul($32, $33_1, $5_1, $5_1 >> 31);
     $20 = $5_1 + $11 | 0;
     $11 = i64toi32_i32$HIGH_BITS + ($11 >>> 0 < $16_1 >>> 0 ? $13_1 + 1 | 0 : $13_1) | 0;
     $5_1 = $20 >>> 0 < $5_1 >>> 0 ? $11 + 1 | 0 : $11;
     $11 = $5_1;
     label$38 : {
      if (!(($20 | 0) != 0 | ($5_1 | 0) != 0)) {
       if (($8_1 | 0) > 0) {
        break label$38
       }
       break label$37;
      }
      if (($11 | 0) > -1 ? 1 : ($11 | 0) >= -1 ? ($20 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
       break label$37
      }
      $5_1 = $8_1;
      $13_1 = $5_1 >> 31;
      $24_1 = $7_1;
      label$40 : {
       if (($5_1 | 0) >= 1) {
        HEAP32[$7_1 + 24 >> 2] = $5_1;
        HEAP32[$7_1 + 28 >> 2] = $13_1;
        HEAP32[$7_1 + 40 >> 2] = 1;
        $5_1 = -1;
        break label$40;
       }
       if (($8_1 | 0) <= -1) {
        HEAP32[$7_1 + 40 >> 2] = -1;
        HEAP32[$7_1 + 24 >> 2] = 0 - $5_1;
        HEAP32[$7_1 + 28 >> 2] = 0 - ((0 < $5_1 >>> 0) + $13_1 | 0);
        $5_1 = 1;
        break label$40;
       }
       HEAP32[$7_1 + 24 >> 2] = 0;
       HEAP32[$7_1 + 28 >> 2] = 0;
       HEAP32[$7_1 + 40 >> 2] = 0;
       $5_1 = 0;
      }
      HEAP32[$24_1 + 40 >> 2] = $5_1;
      HEAP32[$7_1 + 32 >> 2] = 0 - $20;
      HEAP32[$7_1 + 36 >> 2] = 0 - ((0 < $20 >>> 0) + $11 | 0);
      label$43 : {
       if (($26_1 | 0) >= 1) {
        HEAP32[$7_1 >> 2] = $14;
        HEAP32[$7_1 + 4 >> 2] = $18_1;
        HEAP32[$7_1 + 16 >> 2] = 1;
        $8_1 = -1;
        break label$43;
       }
       if (($26_1 | 0) <= -1) {
        HEAP32[$7_1 + 16 >> 2] = -1;
        HEAP32[$7_1 >> 2] = 0 - $14;
        HEAP32[$7_1 + 4 >> 2] = 0 - ((0 < $14 >>> 0) + $18_1 | 0);
        $8_1 = 1;
        break label$43;
       }
       HEAP32[$7_1 >> 2] = 0;
       HEAP32[$7_1 + 4 >> 2] = 0;
       HEAP32[$7_1 + 16 >> 2] = 0;
       $8_1 = 0;
      }
      $5_1 = $2_1;
      $11 = $10;
      label$46 : {
       if (($10 | 0) > 0 ? 1 : ($10 | 0) >= 0 ? ($5_1 >>> 0 <= 0 ? 0 : 1) : 0) {
        break label$46
       }
       $5_1 = 0;
       $11 = 0;
       if (($10 | 0) > -1 ? 1 : ($10 | 0) >= -1 ? ($2_1 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
        break label$46
       }
       HEAP32[$7_1 + 16 >> 2] = $8_1;
       $5_1 = 0 - $2_1 | 0;
       $11 = 0 - ((0 < $2_1 >>> 0) + $10 | 0) | 0;
      }
      $8_1 = $11;
      HEAP32[$7_1 + 8 >> 2] = $5_1;
      HEAP32[$7_1 + 12 >> 2] = $8_1;
      if (($158($7_1 + 24 | 0, $7_1) | 0) >= 1) {
       break label$37
      }
     }
     $1_1 = ($1_1 | 0) == ($34 | 0) ? 0 : $23_1;
     HEAP32[$4_1 >> 2] = $1_1;
     $2_1 = $6_1 - $25 | 0;
     $2_1 = __wasm_i64_mul($29_1, $30, $2_1, $2_1 >> 31);
     $10 = i64toi32_i32$HIGH_BITS;
     $5_1 = $12_1 - $17_1 | 0;
     $8_1 = __wasm_i64_mul($31_1, $27_1, $5_1, $5_1 >> 31);
     $5_1 = $2_1 + $8_1 | 0;
     $10 = i64toi32_i32$HIGH_BITS + $10 | 0;
     $2_1 = $9_1 - $22_1 | 0;
     $15_1 = __wasm_i64_mul($32, $33_1, $2_1, $2_1 >> 31);
     $19_1 = $5_1 + $15_1 | 0;
     $2_1 = $19_1;
     $5_1 = i64toi32_i32$HIGH_BITS + ($5_1 >>> 0 < $8_1 >>> 0 ? $10 + 1 | 0 : $10) | 0;
     $10 = $2_1 >>> 0 < $15_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
     $21 = $12_1;
     $19_1 = $6_1;
     $15_1 = $9_1;
     continue;
    }
    $1_1 = HEAP32[$3_1 >> 2];
    if (!$1_1 | !HEAP32[$1_1 + 12 >> 2]) {
     break label$13
    }
    $9_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] + 4 >> 2];
    if (HEAP32[$9_1 + 20 >> 2] <= HEAP32[$0 + 100 >> 2]) {
     break label$13
    }
    $1_1 = HEAP32[$9_1 + 12 >> 2];
    $12_1 = HEAP32[$1_1 + 92 >> 2];
    $8_1 = $12_1 - $25 | 0;
    $5_1 = $8_1;
    $25 = $5_1;
    $20 = $5_1 >> 31;
    $5_1 = __wasm_i64_mul($5_1, $20, $44_1, $41_1);
    $6_1 = i64toi32_i32$HIGH_BITS;
    $11 = HEAP32[$1_1 + 88 >> 2];
    $17_1 = $11 - $17_1 | 0;
    $13_1 = $17_1;
    $23_1 = $13_1 >> 31;
    $16_1 = __wasm_i64_mul($13_1, $23_1, $42, $39_1);
    $5_1 = $5_1 + $16_1 | 0;
    $6_1 = i64toi32_i32$HIGH_BITS + $6_1 | 0;
    $24_1 = HEAP32[$1_1 + 96 >> 2];
    $22_1 = $24_1 - $22_1 | 0;
    $1_1 = $22_1;
    $38 = $1_1;
    $28_1 = $1_1 >> 31;
    $1_1 = __wasm_i64_mul($43_1, $40_1, $1_1, $28_1);
    if (($5_1 | 0) != (0 - $1_1 | 0) | (0 - (i64toi32_i32$HIGH_BITS + (0 < $1_1 >>> 0) | 0) | 0) != (($5_1 >>> 0 < $16_1 >>> 0 ? $6_1 + 1 | 0 : $6_1) | 0)) {
     break label$13
    }
    $1_1 = $19_1 - $12_1 | 0;
    $1_1 = __wasm_i64_mul($29_1, $30, $1_1, $1_1 >> 31);
    $5_1 = i64toi32_i32$HIGH_BITS;
    $6_1 = $21 - $11 | 0;
    $12_1 = __wasm_i64_mul($31_1, $27_1, $6_1, $6_1 >> 31);
    $1_1 = $1_1 + $12_1 | 0;
    $5_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
    $6_1 = $15_1 - $24_1 | 0;
    $11 = __wasm_i64_mul($32, $33_1, $6_1, $6_1 >> 31);
    $6_1 = $1_1 + $11 | 0;
    $1_1 = i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $12_1 >>> 0 ? $5_1 + 1 | 0 : $5_1) | 0;
    $1_1 = $6_1 >>> 0 < $11 >>> 0 ? $1_1 + 1 | 0 : $1_1;
    $12_1 = $1_1;
    if (($1_1 | 0) > -1 ? 1 : ($1_1 | 0) >= -1 ? ($6_1 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
     break label$13
    }
    $5_1 = (Math_imul($8_1, $36_1) + Math_imul($17_1, $37_1) | 0) + Math_imul($22_1, $35) | 0;
    $1_1 = __wasm_i64_mul($29_1, $30, $25, $20);
    $17_1 = i64toi32_i32$HIGH_BITS;
    $22_1 = __wasm_i64_mul($31_1, $27_1, $13_1, $23_1);
    $1_1 = $22_1 + $1_1 | 0;
    $8_1 = i64toi32_i32$HIGH_BITS + $17_1 | 0;
    $25 = __wasm_i64_mul($32, $33_1, $38, $28_1);
    $17_1 = $25 + $1_1 | 0;
    $1_1 = i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $22_1 >>> 0 ? $8_1 + 1 | 0 : $8_1) | 0;
    $1_1 = $17_1 >>> 0 < $25 >>> 0 ? $1_1 + 1 | 0 : $1_1;
    $8_1 = $1_1;
    label$47 : {
     if (!(($17_1 | 0) != 0 | ($1_1 | 0) != 0)) {
      if (($5_1 | 0) <= 0) {
       break label$13
      }
      break label$47;
     }
     if (($8_1 | 0) > -1 ? 1 : ($8_1 | 0) >= -1 ? ($17_1 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
      break label$13
     }
     $1_1 = $5_1;
     $22_1 = $5_1 >> 31;
     $11 = $7_1;
     label$49 : {
      if (($5_1 | 0) >= 1) {
       HEAP32[$7_1 + 24 >> 2] = $1_1;
       HEAP32[$7_1 + 28 >> 2] = $22_1;
       HEAP32[$7_1 + 40 >> 2] = 1;
       $1_1 = -1;
       break label$49;
      }
      if (($5_1 | 0) <= -1) {
       HEAP32[$7_1 + 40 >> 2] = -1;
       HEAP32[$7_1 + 24 >> 2] = 0 - $1_1;
       HEAP32[$7_1 + 28 >> 2] = 0 - ((0 < $1_1 >>> 0) + $22_1 | 0);
       $1_1 = 1;
       break label$49;
      }
      HEAP32[$7_1 + 24 >> 2] = 0;
      HEAP32[$7_1 + 28 >> 2] = 0;
      HEAP32[$7_1 + 40 >> 2] = 0;
      $1_1 = 0;
     }
     HEAP32[$11 + 40 >> 2] = $1_1;
     HEAP32[$7_1 + 32 >> 2] = 0 - $17_1;
     HEAP32[$7_1 + 36 >> 2] = 0 - ((0 < $17_1 >>> 0) + $8_1 | 0);
     label$52 : {
      if (($26_1 | 0) >= 1) {
       HEAP32[$7_1 >> 2] = $14;
       HEAP32[$7_1 + 4 >> 2] = $18_1;
       HEAP32[$7_1 + 16 >> 2] = 1;
       $1_1 = -1;
       break label$52;
      }
      if (($26_1 | 0) <= -1) {
       HEAP32[$7_1 + 16 >> 2] = -1;
       HEAP32[$7_1 >> 2] = 0 - $14;
       HEAP32[$7_1 + 4 >> 2] = 0 - ((0 < $14 >>> 0) + $18_1 | 0);
       $1_1 = 1;
       break label$52;
      }
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 0;
      HEAP32[$7_1 + 16 >> 2] = 0;
      $1_1 = 0;
     }
     label$55 : {
      if (!(($10 | 0) < 0 ? 1 : ($10 | 0) <= 0 ? ($2_1 >>> 0 > 0 ? 0 : 1) : 0)) {
       $5_1 = $2_1;
       $8_1 = $10;
       break label$55;
      }
      $5_1 = 0;
      $8_1 = 0;
      if (($10 | 0) > -1 ? 1 : ($10 | 0) >= -1 ? ($2_1 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
       break label$55
      }
      HEAP32[$7_1 + 16 >> 2] = $1_1;
      $5_1 = 0 - $2_1 | 0;
      $8_1 = 0 - ((0 < $2_1 >>> 0) + $10 | 0) | 0;
     }
     $1_1 = $8_1;
     HEAP32[$7_1 + 8 >> 2] = $5_1;
     HEAP32[$7_1 + 12 >> 2] = $1_1;
     if (($158($7_1 + 24 | 0, $7_1) | 0) >= 0) {
      break label$13
     }
    }
    HEAP32[$3_1 >> 2] = $9_1;
    $2_1 = HEAP32[$9_1 + 12 >> 2];
    $22_1 = HEAP32[$2_1 + 96 >> 2];
    $25 = HEAP32[$2_1 + 92 >> 2];
    $1_1 = HEAP32[$4_1 >> 2];
    $17_1 = HEAP32[$2_1 + 88 >> 2];
    $2_1 = $6_1;
    $10 = $12_1;
    continue;
   };
  }
  global$0 = $7_1 + 48 | 0;
 }
 
 function $167($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0;
  $8_1 = global$0 - 48 | 0;
  global$0 = $8_1;
  $7_1 = HEAP32[$2_1 + 8 >> 2];
  label$1 : {
   if (!$7_1) {
    break label$1
   }
   $14 = $7_1;
   while (1) {
    if (HEAP32[$14 + 20 >> 2] > HEAP32[$0 + 100 >> 2]) {
     HEAP32[$8_1 + 44 >> 2] = -1;
     $7_1 = HEAP32[$14 + 12 >> 2];
     $10 = HEAP32[$7_1 + 96 >> 2] - HEAP32[$2_1 + 96 >> 2] | 0;
     HEAP32[$8_1 + 40 >> 2] = $10;
     $13_1 = HEAP32[$7_1 + 92 >> 2] - HEAP32[$2_1 + 92 >> 2] | 0;
     HEAP32[$8_1 + 36 >> 2] = $13_1;
     $9_1 = HEAP32[$7_1 + 88 >> 2] - HEAP32[$2_1 + 88 >> 2] | 0;
     HEAP32[$8_1 + 32 >> 2] = $9_1;
     $7_1 = $4_1;
     $11 = $13_1;
     $16_1 = $11 >> 31;
     $13_1 = __wasm_i64_mul(HEAP32[$7_1 + 8 >> 2], HEAP32[$7_1 + 12 >> 2], $11, $16_1);
     $17_1 = i64toi32_i32$HIGH_BITS;
     $15_1 = $9_1;
     $18_1 = $9_1 >> 31;
     $9_1 = __wasm_i64_mul(HEAP32[$7_1 >> 2], HEAP32[$7_1 + 4 >> 2], $9_1, $18_1);
     $13_1 = $9_1 + $13_1 | 0;
     $7_1 = i64toi32_i32$HIGH_BITS + $17_1 | 0;
     $7_1 = $13_1 >>> 0 < $9_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
     $9_1 = $10;
     $17_1 = $9_1 >> 31;
     $19_1 = __wasm_i64_mul(HEAP32[$4_1 + 16 >> 2], HEAP32[$4_1 + 20 >> 2], $9_1, $17_1);
     $13_1 = $19_1 + $13_1 | 0;
     $10 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
     $10 = $13_1 >>> 0 < $19_1 >>> 0 ? $10 + 1 | 0 : $10;
     $7_1 = $5_1;
     $11 = __wasm_i64_mul(HEAP32[$7_1 + 8 >> 2], HEAP32[$7_1 + 12 >> 2], $11, $16_1);
     $16_1 = i64toi32_i32$HIGH_BITS;
     $15_1 = __wasm_i64_mul(HEAP32[$7_1 >> 2], HEAP32[$7_1 + 4 >> 2], $15_1, $18_1);
     $11 = $15_1 + $11 | 0;
     $7_1 = i64toi32_i32$HIGH_BITS + $16_1 | 0;
     $7_1 = $11 >>> 0 < $15_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
     $15_1 = $11;
     $11 = __wasm_i64_mul(HEAP32[$5_1 + 16 >> 2], HEAP32[$5_1 + 20 >> 2], $9_1, $17_1);
     $9_1 = $15_1 + $11 | 0;
     $7_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
     $7_1 = $9_1 >>> 0 < $11 >>> 0 ? $7_1 + 1 | 0 : $7_1;
     $11 = $7_1;
     label$5 : {
      if (!(($7_1 | 0) < 0 ? 1 : ($7_1 | 0) <= 0 ? ($9_1 >>> 0 >= 1 ? 0 : 1) : 0)) {
       HEAP32[$8_1 + 8 >> 2] = $9_1;
       HEAP32[$8_1 + 12 >> 2] = $11;
       HEAP32[$8_1 + 24 >> 2] = 1;
       $9_1 = -1;
       $7_1 = -1;
       break label$5;
      }
      if (!(($11 | 0) > -1 ? 1 : ($11 | 0) >= -1 ? ($9_1 >>> 0 <= 4294967295 ? 0 : 1) : 0)) {
       HEAP32[$8_1 + 24 >> 2] = -1;
       HEAP32[$8_1 + 8 >> 2] = 0 - $9_1;
       HEAP32[$8_1 + 12 >> 2] = 0 - ((0 < $9_1 >>> 0) + $11 | 0);
       $9_1 = 1;
       $7_1 = -1;
       break label$5;
      }
      HEAP32[$8_1 + 8 >> 2] = 0;
      HEAP32[$8_1 + 12 >> 2] = 0;
      HEAP32[$8_1 + 24 >> 2] = 0;
      $9_1 = 0;
      $7_1 = 0;
     }
     label$8 : {
      label$9 : {
       label$10 : {
        if (!(($10 | 0) > 0 ? 1 : ($10 | 0) >= 0 ? ($13_1 >>> 0 <= 0 ? 0 : 1) : 0)) {
         if (($10 | 0) > -1 ? 1 : ($10 | 0) >= -1 ? ($13_1 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
          break label$10
         }
         HEAP32[$8_1 + 24 >> 2] = $9_1;
         $7_1 = $13_1;
         $13_1 = 0 - $7_1 | 0;
         $10 = 0 - ((0 < $7_1 >>> 0) + $10 | 0) | 0;
        }
        HEAP32[$8_1 + 16 >> 2] = $13_1;
        HEAP32[$8_1 + 20 >> 2] = $10;
        break label$9;
       }
       HEAP32[$8_1 + 16 >> 2] = 0;
       HEAP32[$8_1 + 20 >> 2] = 0;
       if (!$7_1) {
        break label$8
       }
      }
      if (!$12_1) {
       $12_1 = HEAP32[$8_1 + 12 >> 2];
       HEAP32[$6_1 >> 2] = HEAP32[$8_1 + 8 >> 2];
       HEAP32[$6_1 + 4 >> 2] = $12_1;
       HEAP32[$6_1 + 16 >> 2] = HEAP32[$8_1 + 24 >> 2];
       $7_1 = $8_1 + 16 | 0;
       $10 = HEAP32[$7_1 + 4 >> 2];
       $12_1 = $6_1 + 8 | 0;
       HEAP32[$12_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$12_1 + 4 >> 2] = $10;
       $12_1 = $14;
       break label$8;
      }
      $7_1 = $158($8_1 + 8 | 0, $6_1);
      if (($7_1 | 0) <= -1) {
       $12_1 = HEAP32[$8_1 + 12 >> 2];
       HEAP32[$6_1 >> 2] = HEAP32[$8_1 + 8 >> 2];
       HEAP32[$6_1 + 4 >> 2] = $12_1;
       HEAP32[$6_1 + 16 >> 2] = HEAP32[$8_1 + 24 >> 2];
       $7_1 = $8_1 + 16 | 0;
       $10 = HEAP32[$7_1 + 4 >> 2];
       $12_1 = $6_1 + 8 | 0;
       HEAP32[$12_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$12_1 + 4 >> 2] = $10;
       $12_1 = $14;
       break label$8;
      }
      if ($7_1) {
       break label$8
      }
      $12_1 = ($168($12_1, $14, $3_1, $8_1 + 32 | 0) | 0) != 2 ^ $1_1 ? $14 : $12_1;
     }
     $7_1 = HEAP32[$2_1 + 8 >> 2];
    }
    $14 = HEAP32[$14 >> 2];
    if (($14 | 0) != ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $8_1 + 48 | 0;
  return $12_1;
 }
 
 function $168($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0;
  $5_1 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   if (($1_1 | 0) == HEAP32[$0 >> 2]) {
    $4_1 = 2;
    if (($1_1 | 0) != ($5_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP32[$1_1 + 12 >> 2];
    $1_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] + 12 >> 2];
    $7_1 = HEAP32[$1_1 + 96 >> 2];
    $12_1 = HEAP32[$5_1 + 96 >> 2] - $7_1 | 0;
    $0 = HEAP32[$0 + 12 >> 2];
    $4_1 = HEAP32[$1_1 + 92 >> 2];
    $8_1 = HEAP32[$0 + 92 >> 2] - $4_1 | 0;
    $4_1 = HEAP32[$5_1 + 92 >> 2] - $4_1 | 0;
    $7_1 = HEAP32[$0 + 96 >> 2] - $7_1 | 0;
    $9_1 = Math_imul($12_1, $8_1) - Math_imul($4_1, $7_1) | 0;
    $6_1 = $9_1;
    $11 = $9_1 >> 31;
    $9_1 = HEAP32[$2_1 + 8 >> 2];
    $13_1 = HEAP32[$3_1 + 4 >> 2];
    $14 = HEAP32[$2_1 + 4 >> 2];
    $15_1 = HEAP32[$3_1 + 8 >> 2];
    $10 = Math_imul($9_1, $13_1) - Math_imul($14, $15_1) | 0;
    $10 = __wasm_i64_mul($6_1, $11, $10, $10 >> 31);
    $11 = i64toi32_i32$HIGH_BITS;
    $6_1 = $4_1;
    $4_1 = HEAP32[$0 + 88 >> 2];
    $0 = HEAP32[$1_1 + 88 >> 2];
    $4_1 = $4_1 - $0 | 0;
    $5_1 = HEAP32[$5_1 + 88 >> 2] - $0 | 0;
    $0 = Math_imul($6_1, $4_1) - Math_imul($5_1, $8_1) | 0;
    $1_1 = $0;
    $6_1 = $0 >> 31;
    $3_1 = HEAP32[$3_1 >> 2];
    $2_1 = HEAP32[$2_1 >> 2];
    $0 = Math_imul($3_1, $14) - Math_imul($2_1, $13_1) | 0;
    $8_1 = __wasm_i64_mul($1_1, $6_1, $0, $0 >> 31);
    $1_1 = $8_1 + $10 | 0;
    $0 = i64toi32_i32$HIGH_BITS + $11 | 0;
    $0 = $1_1 >>> 0 < $8_1 >>> 0 ? $0 + 1 | 0 : $0;
    $6_1 = $1_1;
    $1_1 = Math_imul($5_1, $7_1) - Math_imul($4_1, $12_1) | 0;
    $4_1 = $1_1;
    $5_1 = $1_1 >> 31;
    $1_1 = Math_imul($2_1, $15_1) - Math_imul($3_1, $9_1) | 0;
    $2_1 = __wasm_i64_mul($4_1, $5_1, $1_1, $1_1 >> 31);
    $1_1 = $6_1 + $2_1 | 0;
    $0 = i64toi32_i32$HIGH_BITS + $0 | 0;
    $0 = $1_1 >>> 0 < $2_1 >>> 0 ? $0 + 1 | 0 : $0;
    return (($0 | 0) > 0 ? 1 : ($0 | 0) >= 0 ? ($1_1 >>> 0 <= 0 ? 0 : 1) : 0) ? 2 : 1;
   }
   $4_1 = ($1_1 | 0) == ($5_1 | 0);
  }
  return $4_1;
 }
 
 function $169($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = 0, $23_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($2_1 | 0) < 1) {
     break label$2
    }
    $5_1 = -246811958;
    $14 = 1900671690;
    $16_1 = $2_1;
    $8_1 = $1_1;
    $12_1 = 1900671690;
    $3_1 = 1900671690;
    $9_1 = -246811958;
    $6_1 = -246811958;
    while (1) {
     $7_1 = $8_1 + 8 | 0;
     $22_1 = HEAP32[$7_1 >> 2];
     $10 = HEAPF32[$7_1 >> 2];
     $5_1 = (wasm2js_scratch_store_i32(0, $5_1), wasm2js_scratch_load_f32()) < $10 ? $22_1 : $5_1;
     $7_1 = $8_1 + 4 | 0;
     $23_1 = HEAP32[$7_1 >> 2];
     $11 = HEAPF32[$7_1 >> 2];
     $9_1 = (wasm2js_scratch_store_i32(0, $9_1), wasm2js_scratch_load_f32()) < $11 ? $23_1 : $9_1;
     $14 = $10 < (wasm2js_scratch_store_i32(0, $14), wasm2js_scratch_load_f32()) ? $22_1 : $14;
     $12_1 = $11 < (wasm2js_scratch_store_i32(0, $12_1), wasm2js_scratch_load_f32()) ? $23_1 : $12_1;
     $7_1 = HEAP32[$8_1 >> 2];
     $10 = HEAPF32[$8_1 >> 2];
     $6_1 = (wasm2js_scratch_store_i32(0, $6_1), wasm2js_scratch_load_f32()) < $10 ? $7_1 : $6_1;
     $3_1 = $10 < (wasm2js_scratch_store_i32(0, $3_1), wasm2js_scratch_load_f32()) ? $7_1 : $3_1;
     $8_1 = $8_1 + 16 | 0;
     $16_1 = $16_1 + -1 | 0;
     if ($16_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $3_1 = 1900671690;
   $6_1 = -246811958;
   $9_1 = -246811958;
   $5_1 = -246811958;
   $12_1 = 1900671690;
   $14 = 1900671690;
  }
  $17_1 = (wasm2js_scratch_store_i32(0, $9_1), wasm2js_scratch_load_f32());
  $18_1 = (wasm2js_scratch_store_i32(0, $12_1), wasm2js_scratch_load_f32());
  $10 = Math_fround($17_1 - $18_1);
  $19_1 = (wasm2js_scratch_store_i32(0, $5_1), wasm2js_scratch_load_f32());
  $13_1 = (wasm2js_scratch_store_i32(0, $14), wasm2js_scratch_load_f32());
  $11 = Math_fround($19_1 - $13_1);
  $5_1 = $10 < $11;
  $20 = (wasm2js_scratch_store_i32(0, $6_1), wasm2js_scratch_load_f32());
  $21 = (wasm2js_scratch_store_i32(0, $3_1), wasm2js_scratch_load_f32());
  $15_1 = Math_fround($20 - $21);
  $8_1 = $15_1 < $11;
  $16_1 = $15_1 < $10;
  $3_1 = $16_1 ? ($5_1 ? 2 : 1) : $8_1 << 1;
  HEAP32[$0 + 112 >> 2] = $3_1;
  $6_1 = $16_1 ? ($8_1 ^ 1) << 1 : $5_1 ? 1 : 2;
  if (($6_1 | 0) == ($3_1 | 0)) {
   $6_1 = ($3_1 + 1 >>> 0) % 3 | 0
  }
  HEAP32[$0 + 104 >> 2] = $6_1;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  $5_1 = ($3_1 ^ 3) - $6_1 | 0;
  HEAP32[$0 + 108 >> 2] = $5_1;
  HEAPF32[$0 + 24 >> 2] = Math_fround($19_1 + $13_1) * Math_fround(.5);
  HEAPF32[$0 + 20 >> 2] = Math_fround($17_1 + $18_1) * Math_fround(.5);
  HEAPF32[$0 + 16 >> 2] = Math_fround($20 + $21) * Math_fround(.5);
  $3_1 = ($3_1 | 0) == (($5_1 + 1 | 0) % 3 | 0);
  $11 = $3_1 ? Math_fround($11 * Math_fround(9.788566967472434e-05)) : Math_fround($11 * Math_fround(-9.788566967472434e-05));
  HEAPF32[$0 + 8 >> 2] = $11;
  $10 = $3_1 ? Math_fround($10 * Math_fround(9.788566967472434e-05)) : Math_fround($10 * Math_fround(-9.788566967472434e-05));
  HEAPF32[$0 + 4 >> 2] = $10;
  $15_1 = $3_1 ? Math_fround($15_1 * Math_fround(9.788566967472434e-05)) : Math_fround($15_1 * Math_fround(-9.788566967472434e-05));
  HEAPF32[$0 >> 2] = $15_1;
  HEAP32[$4_1 + 36 >> 2] = 0;
  HEAP8[$4_1 + 40 | 0] = 1;
  HEAP32[$4_1 + 28 >> 2] = 0;
  HEAP32[$4_1 + 32 >> 2] = 0;
  $8_1 = $11 != Math_fround(0.0);
  $17_1 = Math_fround(Math_fround(1.0) / $11);
  $16_1 = $10 != Math_fround(0.0);
  $18_1 = Math_fround(Math_fround(1.0) / $10);
  $12_1 = $15_1 != Math_fround(0.0);
  $19_1 = Math_fround(Math_fround(1.0) / $15_1);
  label$8 : {
   if (($2_1 | 0) < 1) {
    break label$8
   }
   $3_1 = $79($2_1 << 4);
   HEAP32[$4_1 + 36 >> 2] = $3_1;
   HEAP32[$4_1 + 32 >> 2] = $2_1;
   HEAP8[$4_1 + 40 | 0] = 1;
   $5_1 = $4_1 + 16 | 0;
   $6_1 = HEAP32[$5_1 + 4 >> 2];
   $14 = $3_1 + 8 | 0;
   HEAP32[$14 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$14 + 4 >> 2] = $6_1;
   $6_1 = HEAP32[$4_1 + 12 >> 2];
   HEAP32[$3_1 >> 2] = HEAP32[$4_1 + 8 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   if (($2_1 | 0) == 1) {
    break label$8
   }
   $6_1 = $2_1 + -1 | 0;
   $3_1 = 16;
   while (1) {
    $14 = HEAP32[$4_1 + 12 >> 2];
    $9_1 = HEAP32[$4_1 + 36 >> 2] + $3_1 | 0;
    $7_1 = $9_1;
    HEAP32[$7_1 >> 2] = HEAP32[$4_1 + 8 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $14;
    $14 = HEAP32[$5_1 + 4 >> 2];
    $9_1 = $7_1 + 8 | 0;
    HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$9_1 + 4 >> 2] = $14;
    $3_1 = $3_1 + 16 | 0;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue
    }
    break;
   };
  }
  $11 = $8_1 ? $17_1 : $11;
  $10 = $16_1 ? $18_1 : $10;
  $15_1 = $12_1 ? $19_1 : $15_1;
  HEAP32[$4_1 + 28 >> 2] = $2_1;
  label$10 : {
   if (($2_1 | 0) < 1) {
    break label$10
   }
   $3_1 = HEAP32[$4_1 + 36 >> 2] + 8 | 0;
   $5_1 = ($4_1 + 8 | 0) + (HEAP32[$0 + 104 >> 2] << 2) | 0;
   $8_1 = ($4_1 + 8 | 0) + (HEAP32[$0 + 112 >> 2] << 2) | 0;
   $16_1 = ($4_1 + 8 | 0) + (HEAP32[$0 + 108 >> 2] << 2) | 0;
   $17_1 = HEAPF32[$0 + 24 >> 2];
   $18_1 = HEAPF32[$0 + 20 >> 2];
   $19_1 = HEAPF32[$0 + 16 >> 2];
   $6_1 = 0;
   while (1) {
    $13_1 = HEAPF32[$1_1 + 4 >> 2];
    $20 = HEAPF32[$1_1 + 8 >> 2];
    $21 = HEAPF32[$1_1 >> 2];
    HEAP32[$4_1 + 20 >> 2] = 0;
    HEAPF32[$4_1 + 8 >> 2] = $15_1 * Math_fround($21 - $19_1);
    HEAPF32[$4_1 + 16 >> 2] = $11 * Math_fround($20 - $17_1);
    HEAPF32[$4_1 + 12 >> 2] = $10 * Math_fround($13_1 - $18_1);
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $9_1 = $3_1 + -8 | 0;
    $13_1 = HEAPF32[$16_1 >> 2];
    label$14 : {
     if (Math_fround(Math_abs($13_1)) < Math_fround(2147483648.0)) {
      $7_1 = ~~$13_1;
      break label$14;
     }
     $7_1 = -2147483648;
    }
    HEAP32[$9_1 >> 2] = $7_1;
    $9_1 = $3_1 + -4 | 0;
    $13_1 = HEAPF32[$8_1 >> 2];
    label$16 : {
     if (Math_fround(Math_abs($13_1)) < Math_fround(2147483648.0)) {
      $7_1 = ~~$13_1;
      break label$16;
     }
     $7_1 = -2147483648;
    }
    HEAP32[$9_1 >> 2] = $7_1;
    $9_1 = $3_1;
    $13_1 = HEAPF32[$5_1 >> 2];
    label$18 : {
     if (Math_fround(Math_abs($13_1)) < Math_fround(2147483648.0)) {
      $7_1 = ~~$13_1;
      break label$18;
     }
     $7_1 = -2147483648;
    }
    HEAP32[$9_1 >> 2] = $7_1;
    $3_1 = $3_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
   if (($2_1 | 0) < 2) {
    break label$10
   }
   $170($4_1 + 24 | 0, $4_1 + 8 | 0, 0, $2_1 + -1 | 0);
  }
  HEAP32[$0 + 44 >> 2] = $2_1;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 32 >> 2];
  $5_1 = HEAP32[$0 + 84 >> 2];
  if (($5_1 | 0) < ($2_1 | 0)) {
   if (HEAP32[$0 + 88 >> 2] < ($2_1 | 0)) {
    label$29 : {
     if (!$2_1) {
      $6_1 = 0;
      $3_1 = $5_1;
      break label$29;
     }
     $6_1 = $79($2_1 << 2);
     $3_1 = HEAP32[$0 + 84 >> 2];
    }
    if (($3_1 | 0) >= 1) {
     $1_1 = 0;
     while (1) {
      HEAP32[$1_1 + $6_1 >> 2] = HEAP32[HEAP32[$0 + 92 >> 2] + $1_1 >> 2];
      $1_1 = $1_1 + 4 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       continue
      }
      break;
     };
    }
    $1_1 = HEAP32[$0 + 92 >> 2];
    if ($1_1) {
     if (HEAPU8[$0 + 96 | 0]) {
      $80($1_1)
     }
     HEAP32[$0 + 92 >> 2] = 0;
    }
    HEAP32[$0 + 92 >> 2] = $6_1;
    HEAP32[$0 + 88 >> 2] = $2_1;
    HEAP8[$0 + 96 | 0] = 1;
   }
   $1_1 = $5_1 << 2;
   $3_1 = $2_1 - $5_1 | 0;
   while (1) {
    HEAP32[HEAP32[$0 + 92 >> 2] + $1_1 >> 2] = 0;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 84 >> 2] = $2_1;
  if (($2_1 | 0) >= 1) {
   $12_1 = 0;
   while (1) {
    $5_1 = HEAP32[$0 + 40 >> 2];
    label$38 : {
     if ($5_1) {
      break label$38
     }
     $1_1 = HEAP32[$0 + 36 >> 2];
     label$39 : {
      if ($1_1) {
       HEAP32[$0 + 36 >> 2] = HEAP32[$1_1 + 8 >> 2];
       break label$39;
      }
      $1_1 = $79(12);
      HEAP32[$1_1 + 8 >> 2] = 0;
      $3_1 = HEAP32[$0 + 44 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $3_1;
      (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $79(Math_imul($3_1, 112))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      $3_1 = HEAP32[$0 + 32 >> 2];
      HEAP32[$0 + 32 >> 2] = $1_1;
      HEAP32[$1_1 + 8 >> 2] = $3_1;
     }
     $5_1 = HEAP32[$1_1 >> 2];
     $8_1 = HEAP32[$1_1 + 4 >> 2];
     if (($8_1 | 0) < 1) {
      break label$38
     }
     $1_1 = 0;
     $3_1 = $5_1;
     while (1) {
      $9_1 = $3_1;
      $3_1 = $3_1 + 112 | 0;
      $1_1 = $1_1 + 1 | 0;
      HEAP32[$9_1 >> 2] = ($1_1 | 0) < ($8_1 | 0) ? $3_1 : 0;
      if (($1_1 | 0) != ($8_1 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 40 >> 2] = HEAP32[$5_1 >> 2];
    $1_1 = $5_1 + 8 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP32[$5_1 + 16 >> 2] = 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$5_1 + 104 >> 2] = -1;
    HEAP32[$1_1 >> 2] = 0;
    $1_1 = HEAP32[$4_1 + 36 >> 2] + ($12_1 << 4) | 0;
    $3_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$5_1 + 88 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$5_1 + 92 >> 2] = $3_1;
    $1_1 = $1_1 + 8 | 0;
    $3_1 = HEAP32[$1_1 + 4 >> 2];
    $8_1 = $5_1 + 96 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $3_1;
    HEAP32[$5_1 + 104 >> 2] = -1;
    HEAP32[HEAP32[$0 + 92 >> 2] + ($12_1 << 2) >> 2] = $5_1;
    $12_1 = $12_1 + 1 | 0;
    if (($12_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
  $1_1 = HEAP32[$4_1 + 36 >> 2];
  if ($1_1) {
   if (HEAPU8[$4_1 + 40 | 0]) {
    $80($1_1)
   }
   HEAP32[$4_1 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP32[$0 + 120 >> 2] = 0;
  HEAP32[$0 + 100 >> 2] = -3;
  HEAP32[$0 + 60 >> 2] = Math_imul($2_1, 6);
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 48 >> 2];
  HEAP32[$4_1 + 36 >> 2] = 0;
  HEAP8[$4_1 + 40 | 0] = 1;
  HEAP32[$4_1 + 28 >> 2] = 0;
  HEAP32[$4_1 + 32 >> 2] = 0;
  $1_1 = $4_1 + 16 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 8 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $164($0, 0, $2_1, $4_1 + 8 | 0);
  HEAP32[$0 + 124 >> 2] = HEAP32[$4_1 + 8 >> 2];
  $0 = HEAP32[$4_1 + 36 >> 2];
  if ($0) {
   if (HEAPU8[$4_1 + 40 | 0]) {
    $80($0)
   }
   HEAP32[$4_1 + 36 >> 2] = 0;
  }
  global$0 = $4_1 + 48 | 0;
 }
 
 function $170($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0;
  $10 = global$0 - 16 | 0;
  global$0 = $10;
  $7_1 = HEAP32[$0 + 12 >> 2];
  $6_1 = $7_1 + (($2_1 + $3_1 | 0) / 2 << 4) | 0;
  $15_1 = HEAP32[$6_1 + 8 >> 2];
  $13_1 = HEAP32[$6_1 + 4 >> 2];
  $14 = HEAP32[$6_1 >> 2];
  $6_1 = $2_1;
  $9_1 = $3_1;
  while (1) {
   $4_1 = ($6_1 << 4) + $7_1 | 0;
   while (1) {
    label$2 : {
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     label$4 : {
      if (($5_1 | 0) < ($13_1 | 0)) {
       break label$4
      }
      if (($5_1 | 0) != ($13_1 | 0)) {
       break label$2
      }
      $5_1 = HEAP32[$4_1 >> 2];
      if (($5_1 | 0) < ($14 | 0)) {
       break label$4
      }
      if (($5_1 | 0) != ($14 | 0) | HEAP32[$4_1 + 8 >> 2] >= ($15_1 | 0)) {
       break label$2
      }
     }
     $4_1 = $4_1 + 16 | 0;
     $6_1 = $6_1 + 1 | 0;
     continue;
    }
    break;
   };
   $11 = $9_1 << 4;
   while (1) {
    label$5 : {
     $5_1 = $7_1 + $11 | 0;
     $8_1 = HEAP32[$5_1 + 4 >> 2];
     label$7 : {
      if (($13_1 | 0) < ($8_1 | 0)) {
       break label$7
      }
      if (($8_1 | 0) != ($13_1 | 0)) {
       break label$5
      }
      $8_1 = HEAP32[$5_1 >> 2];
      if (($14 | 0) < ($8_1 | 0)) {
       break label$7
      }
      if (($8_1 | 0) != ($14 | 0) | ($15_1 | 0) >= HEAP32[$5_1 + 8 >> 2]) {
       break label$5
      }
     }
     $11 = $11 + -16 | 0;
     $9_1 = $9_1 + -1 | 0;
     continue;
    }
    break;
   };
   if (($6_1 | 0) <= ($9_1 | 0)) {
    $8_1 = $4_1 + 8 | 0;
    $12_1 = HEAP32[$8_1 + 4 >> 2];
    $7_1 = $10 + 8 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $12_1;
    $12_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$10 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$10 + 4 >> 2] = $12_1;
    $12_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $12_1;
    $4_1 = $5_1 + 8 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$8_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $5_1;
    $4_1 = HEAP32[$0 + 12 >> 2] + $11 | 0;
    $11 = HEAP32[$10 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$10 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $11;
    $5_1 = HEAP32[$7_1 + 4 >> 2];
    $4_1 = $4_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $9_1 = $9_1 + -1 | 0;
    $6_1 = $6_1 + 1 | 0;
   }
   if (($6_1 | 0) <= ($9_1 | 0)) {
    $7_1 = HEAP32[$0 + 12 >> 2];
    continue;
   }
   break;
  };
  if (($9_1 | 0) > ($2_1 | 0)) {
   $170($0, $1_1, $2_1, $9_1)
  }
  if (($6_1 | 0) < ($3_1 | 0)) {
   $170($0, $1_1, $6_1, $3_1)
  }
  global$0 = $10 + 16 | 0;
 }
 
 function $171($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (HEAP32[$2_1 + 100 >> 2] >= 0) {
        HEAPF32[(HEAP32[$1_1 + 108 >> 2] << 2) + $3_1 >> 2] = HEAP32[$2_1 + 88 >> 2];
        break label$5;
       }
       $4_1 = $172($2_1 + 24 | 0);
       $6_1 = $2_1 + 72 | 0;
       $5_1 = $172($6_1);
       HEAPF32[(HEAP32[$1_1 + 108 >> 2] << 2) + $3_1 >> 2] = $4_1 / $5_1;
       if (HEAP32[$2_1 + 100 >> 2] < 0) {
        break label$4
       }
      }
      HEAPF32[(HEAP32[$1_1 + 112 >> 2] << 2) + $3_1 >> 2] = HEAP32[$2_1 + 92 >> 2];
      break label$3;
     }
     $4_1 = $172($2_1 + 40 | 0);
     $5_1 = $172($6_1);
     HEAPF32[(HEAP32[$1_1 + 112 >> 2] << 2) + $3_1 >> 2] = $4_1 / $5_1;
     if (HEAP32[$2_1 + 100 >> 2] < 0) {
      break label$2
     }
    }
    $4_1 = Math_fround(HEAP32[$2_1 + 96 >> 2]);
    break label$1;
   }
   $4_1 = Math_fround($172($2_1 + 56 | 0) / $172($2_1 + 72 | 0));
  }
  HEAPF32[(HEAP32[$1_1 + 104 >> 2] << 2) + $3_1 >> 2] = $4_1;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAPF32[$0 + 8 >> 2] = Math_fround(HEAPF32[$3_1 + 8 >> 2] * HEAPF32[$1_1 + 8 >> 2]) + HEAPF32[$1_1 + 24 >> 2];
  HEAPF32[$0 + 4 >> 2] = Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$1_1 + 4 >> 2]) + HEAPF32[$1_1 + 20 >> 2];
  HEAPF32[$0 >> 2] = Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$1_1 >> 2]) + HEAPF32[$1_1 + 16 >> 2];
  global$0 = $3_1 + 16 | 0;
 }
 
 function $172($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1_1 = HEAP32[$0 + 12 >> 2];
  $2_1 = $1_1;
  $5_1 = HEAP32[$0 + 8 >> 2];
  label$1 : {
   if (!(($1_1 | 0) < 0 ? 1 : ($1_1 | 0) <= 0 ? ($5_1 >>> 0 >= 0 ? 0 : 1) : 0)) {
    $6_1 = Math_fround(Math_fround(Math_fround(+($5_1 >>> 0) + 4294967296.0 * +($2_1 >>> 0)) * Math_fround(18446744073709551615.0)) + Math_fround(+HEAPU32[$0 >> 2] + 4294967296.0 * +HEAPU32[$0 + 4 >> 2]));
    break label$1;
   }
   $4_1 = HEAP32[$0 + 4 >> 2];
   $1_1 = HEAP32[$0 >> 2];
   $0 = $1_1;
   HEAP32[$3_1 >> 2] = 0 - $0;
   HEAP32[$3_1 + 4 >> 2] = 0 - ($4_1 + (0 < $0 >>> 0) | 0);
   $2_1 = $2_1 ^ -1;
   $0 = !($0 | $4_1);
   $4_1 = $5_1 ^ -1;
   $1_1 = $0 + $4_1 | 0;
   if ($1_1 >>> 0 < $4_1 >>> 0) {
    $2_1 = $2_1 + 1 | 0
   }
   $0 = $3_1;
   HEAP32[$0 + 8 >> 2] = $1_1;
   HEAP32[$0 + 12 >> 2] = $2_1;
   $6_1 = Math_fround(-$172($0));
  }
  global$0 = $3_1 + 16 | 0;
  return $6_1;
 }
 
 function $176($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($2_1 | 0) <= 0) {
    $1_1 = HEAP32[$0 + 12 >> 2];
    if ($1_1) {
     if (HEAPU8[$0 + 16 | 0]) {
      $80($1_1)
     }
     HEAP32[$0 + 12 >> 2] = 0;
    }
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP8[$0 + 16 | 0] = 1;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    $1_1 = HEAP32[$0 + 32 >> 2];
    if ($1_1) {
     if (HEAPU8[$0 + 36 | 0]) {
      $80($1_1)
     }
     HEAP32[$0 + 32 >> 2] = 0;
    }
    HEAP32[$0 + 32 >> 2] = 0;
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP8[$0 + 36 | 0] = 1;
    $1_1 = HEAP32[$0 + 52 >> 2];
    if ($1_1) {
     if (HEAPU8[$0 + 56 | 0]) {
      $80($1_1)
     }
     HEAP32[$0 + 52 >> 2] = 0;
    }
    HEAP32[$0 + 52 >> 2] = 0;
    HEAP32[$0 + 44 >> 2] = 0;
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP8[$0 + 56 | 0] = 1;
    break label$1;
   }
   HEAP8[$3_1 + 112 | 0] = 1;
   $4_1 = $3_1 + 88 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 256;
   $4_1 = $3_1 + 72 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 256;
   $4_1 = $3_1 + 56 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 256;
   HEAP32[$3_1 + 108 >> 2] = 0;
   $4_1 = $3_1 + 100 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 0;
   HEAP32[$3_1 + 80 >> 2] = 0;
   HEAP32[$3_1 + 84 >> 2] = 0;
   HEAP32[$3_1 + 64 >> 2] = 0;
   HEAP32[$3_1 + 68 >> 2] = 0;
   HEAP32[$3_1 + 48 >> 2] = 0;
   HEAP32[$3_1 + 52 >> 2] = 0;
   $169($3_1 + 16 | 0, $1_1, $2_1);
   $2_1 = HEAP32[$0 + 4 >> 2];
   if (($2_1 | 0) <= -1) {
    if (HEAP32[$0 + 8 >> 2] <= -1) {
     $1_1 = HEAP32[$0 + 12 >> 2];
     if ($1_1) {
      if (HEAPU8[$0 + 16 | 0]) {
       $80($1_1)
      }
      HEAP32[$0 + 12 >> 2] = 0;
     }
     HEAP8[$0 + 16 | 0] = 1;
     HEAP32[$0 + 8 >> 2] = 0;
     HEAP32[$0 + 12 >> 2] = 0;
    }
    $1_1 = $2_1 << 4;
    while (1) {
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     $6_1 = HEAP32[$0 + 12 >> 2] + $1_1 | 0;
     $5_1 = $6_1;
     HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $4_1;
     $4_1 = $3_1 + 8 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $6_1 = $6_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $5_1;
     $1_1 = $1_1 + 16 | 0;
     $4_1 = $2_1 + 1 | 0;
     $6_1 = $4_1 >>> 0 >= $2_1 >>> 0;
     $2_1 = $4_1;
     if ($6_1) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$3_1 + 8 >> 2] = 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $2_1 = HEAP32[$0 + 24 >> 2];
   if (($2_1 | 0) <= -1) {
    if (HEAP32[$0 + 28 >> 2] <= -1) {
     $1_1 = HEAP32[$0 + 32 >> 2];
     if ($1_1) {
      if (HEAPU8[$0 + 36 | 0]) {
       $80($1_1)
      }
      HEAP32[$0 + 32 >> 2] = 0;
     }
     HEAP32[$0 + 28 >> 2] = 0;
     HEAP32[$0 + 32 >> 2] = 0;
     HEAP8[$0 + 36 | 0] = 1;
    }
    $1_1 = Math_imul($2_1, 12);
    while (1) {
     $6_1 = HEAP32[$3_1 + 4 >> 2];
     $4_1 = HEAP32[$0 + 32 >> 2] + $1_1 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $6_1;
     HEAP32[$4_1 + 8 >> 2] = HEAP32[$3_1 + 8 >> 2];
     $1_1 = $1_1 + 12 | 0;
     $4_1 = $2_1 + 1 | 0;
     $6_1 = $4_1 >>> 0 >= $2_1 >>> 0;
     $2_1 = $4_1;
     if ($6_1) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 + 24 >> 2] = 0;
   $2_1 = HEAP32[$0 + 44 >> 2];
   if (($2_1 | 0) <= -1) {
    $1_1 = HEAP32[$0 + 52 >> 2];
    if (HEAP32[$0 + 48 >> 2] <= -1) {
     if (!(!$1_1 | !HEAPU8[$0 + 56 | 0])) {
      $80($1_1)
     }
     HEAP8[$0 + 56 | 0] = 1;
     HEAP32[$0 + 48 >> 2] = 0;
     HEAP32[$0 + 52 >> 2] = 0;
     $5_1 = 0;
    } else {
     $5_1 = $1_1
    }
    $1_1 = $2_1 << 2;
    $17($5_1 + $1_1 | 0, 0, 0 - $1_1 | 0);
   }
   HEAP32[$0 + 44 >> 2] = 0;
   $1_1 = HEAP32[$3_1 + 140 >> 2];
   label$9 : {
    if (HEAP32[$1_1 + 104 >> 2] > -1) {
     break label$9
    }
    HEAP32[$1_1 + 104 >> 2] = 0;
    $6_1 = $79(4);
    HEAP32[$6_1 >> 2] = $1_1;
    $2_1 = 0;
    $4_1 = 1;
    $9_1 = 1;
    while (1) {
     $18_1 = $2_1;
     $14 = HEAP32[($2_1 << 2) + $6_1 >> 2];
     $171($3_1, $3_1 + 16 | 0, $14);
     $1_1 = HEAP32[$0 + 4 >> 2];
     label$31 : {
      if (($1_1 | 0) != HEAP32[$0 + 8 >> 2]) {
       break label$31
      }
      $7_1 = $1_1 ? $1_1 << 1 : 1;
      if (($1_1 | 0) >= ($7_1 | 0)) {
       break label$31
      }
      label$32 : {
       if (!$7_1) {
        $5_1 = 0;
        break label$32;
       }
       $5_1 = $79($7_1 << 4);
       $1_1 = HEAP32[$0 + 4 >> 2];
      }
      if (($1_1 | 0) >= 1) {
       $2_1 = 0;
       while (1) {
        $8_1 = HEAP32[$0 + 12 >> 2] + $2_1 | 0;
        $11 = HEAP32[$8_1 + 4 >> 2];
        $12_1 = $2_1 + $5_1 | 0;
        HEAP32[$12_1 >> 2] = HEAP32[$8_1 >> 2];
        HEAP32[$12_1 + 4 >> 2] = $11;
        $8_1 = $8_1 + 8 | 0;
        $11 = HEAP32[$8_1 + 4 >> 2];
        $12_1 = $12_1 + 8 | 0;
        HEAP32[$12_1 >> 2] = HEAP32[$8_1 >> 2];
        HEAP32[$12_1 + 4 >> 2] = $11;
        $2_1 = $2_1 + 16 | 0;
        $1_1 = $1_1 + -1 | 0;
        if ($1_1) {
         continue
        }
        break;
       };
      }
      $1_1 = HEAP32[$0 + 12 >> 2];
      if ($1_1) {
       if (HEAPU8[$0 + 16 | 0]) {
        $80($1_1)
       }
       HEAP32[$0 + 12 >> 2] = 0;
      }
      HEAP32[$0 + 12 >> 2] = $5_1;
      HEAP8[$0 + 16 | 0] = 1;
      HEAP32[$0 + 8 >> 2] = $7_1;
      $1_1 = HEAP32[$0 + 4 >> 2];
     }
     $2_1 = HEAP32[$3_1 + 4 >> 2];
     $1_1 = HEAP32[$0 + 12 >> 2] + ($1_1 << 4) | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $2_1;
     $17_1 = $3_1 + 8 | 0;
     $2_1 = $17_1;
     $5_1 = HEAP32[$2_1 + 4 >> 2];
     $1_1 = $1_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $5_1;
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
     $12_1 = HEAP32[$14 + 8 >> 2];
     if ($12_1) {
      $14 = -1;
      $8_1 = $12_1;
      $11 = -1;
      while (1) {
       $2_1 = HEAP32[$8_1 + 20 >> 2];
       if (($2_1 | 0) <= -1) {
        $5_1 = HEAP32[$0 + 24 >> 2];
        HEAP32[$17_1 >> 2] = 0;
        HEAP32[$3_1 >> 2] = 0;
        HEAP32[$3_1 + 4 >> 2] = 0;
        $2_1 = $5_1;
        label$41 : {
         if (($2_1 | 0) != HEAP32[$0 + 28 >> 2]) {
          break label$41
         }
         $10 = $2_1 ? $5_1 << 1 : 1;
         if (($2_1 | 0) >= ($10 | 0)) {
          break label$41
         }
         label$42 : {
          if (!$10) {
           $7_1 = 0;
           $1_1 = $5_1;
           break label$42;
          }
          $7_1 = $79(Math_imul($10, 12));
          $1_1 = HEAP32[$0 + 24 >> 2];
         }
         if (($1_1 | 0) >= 1) {
          $2_1 = 0;
          while (1) {
           $13_1 = HEAP32[$0 + 32 >> 2] + $2_1 | 0;
           $16_1 = HEAP32[$13_1 + 4 >> 2];
           $15_1 = $2_1 + $7_1 | 0;
           HEAP32[$15_1 >> 2] = HEAP32[$13_1 >> 2];
           HEAP32[$15_1 + 4 >> 2] = $16_1;
           HEAP32[$15_1 + 8 >> 2] = HEAP32[$13_1 + 8 >> 2];
           $2_1 = $2_1 + 12 | 0;
           $1_1 = $1_1 + -1 | 0;
           if ($1_1) {
            continue
           }
           break;
          };
         }
         $1_1 = HEAP32[$0 + 32 >> 2];
         if ($1_1) {
          if (HEAPU8[$0 + 36 | 0]) {
           $80($1_1)
          }
          HEAP32[$0 + 32 >> 2] = 0;
         }
         HEAP32[$0 + 32 >> 2] = $7_1;
         HEAP8[$0 + 36 | 0] = 1;
         HEAP32[$0 + 28 >> 2] = $10;
         $2_1 = HEAP32[$0 + 24 >> 2];
        }
        $1_1 = HEAP32[$0 + 32 >> 2] + Math_imul($2_1, 12) | 0;
        $2_1 = HEAP32[$3_1 + 4 >> 2];
        HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
        HEAP32[$1_1 + 4 >> 2] = $2_1;
        HEAP32[$1_1 + 8 >> 2] = HEAP32[$17_1 >> 2];
        $1_1 = HEAP32[$0 + 24 >> 2] + 1 | 0;
        HEAP32[$0 + 24 >> 2] = $1_1;
        HEAP32[$17_1 >> 2] = 0;
        HEAP32[$3_1 >> 2] = 0;
        HEAP32[$3_1 + 4 >> 2] = 0;
        label$48 : {
         if (HEAP32[$0 + 28 >> 2] != ($1_1 | 0)) {
          break label$48
         }
         $10 = $1_1 ? $1_1 << 1 : 1;
         if (($1_1 | 0) >= ($10 | 0)) {
          break label$48
         }
         label$49 : {
          if (!$10) {
           $7_1 = 0;
           break label$49;
          }
          $7_1 = $79(Math_imul($10, 12));
          $1_1 = HEAP32[$0 + 24 >> 2];
         }
         if (($1_1 | 0) >= 1) {
          $2_1 = 0;
          while (1) {
           $13_1 = HEAP32[$0 + 32 >> 2] + $2_1 | 0;
           $16_1 = HEAP32[$13_1 + 4 >> 2];
           $15_1 = $2_1 + $7_1 | 0;
           HEAP32[$15_1 >> 2] = HEAP32[$13_1 >> 2];
           HEAP32[$15_1 + 4 >> 2] = $16_1;
           HEAP32[$15_1 + 8 >> 2] = HEAP32[$13_1 + 8 >> 2];
           $2_1 = $2_1 + 12 | 0;
           $1_1 = $1_1 + -1 | 0;
           if ($1_1) {
            continue
           }
           break;
          };
         }
         $1_1 = HEAP32[$0 + 32 >> 2];
         if ($1_1) {
          if (HEAPU8[$0 + 36 | 0]) {
           $80($1_1)
          }
          HEAP32[$0 + 32 >> 2] = 0;
         }
         HEAP32[$0 + 32 >> 2] = $7_1;
         HEAP8[$0 + 36 | 0] = 1;
         HEAP32[$0 + 28 >> 2] = $10;
         $1_1 = HEAP32[$0 + 24 >> 2];
        }
        $2_1 = HEAP32[$3_1 + 4 >> 2];
        $1_1 = HEAP32[$0 + 32 >> 2] + Math_imul($1_1, 12) | 0;
        HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
        HEAP32[$1_1 + 4 >> 2] = $2_1;
        HEAP32[$1_1 + 8 >> 2] = HEAP32[$17_1 >> 2];
        HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
        HEAP32[$8_1 + 20 >> 2] = $5_1;
        $15_1 = $5_1 + 1 | 0;
        HEAP32[HEAP32[$8_1 + 8 >> 2] + 20 >> 2] = $15_1;
        $16_1 = HEAP32[$0 + 32 >> 2];
        $10 = $16_1 + Math_imul($5_1, 12) | 0;
        HEAP32[$10 + 4 >> 2] = 1;
        HEAP32[$10 + 16 >> 2] = -1;
        $13_1 = HEAP32[$8_1 + 12 >> 2];
        $2_1 = HEAP32[$13_1 + 104 >> 2];
        label$55 : {
         if (($2_1 | 0) > -1) {
          $1_1 = $4_1;
          $4_1 = $2_1;
          break label$55;
         }
         HEAP32[$13_1 + 104 >> 2] = $4_1;
         label$57 : {
          label$58 : {
           if (($4_1 | 0) != ($9_1 | 0)) {
            break label$58
           }
           $7_1 = $9_1 ? $9_1 << 1 : 1;
           if (($9_1 | 0) >= ($7_1 | 0)) {
            break label$58
           }
           if ($7_1) {
            $5_1 = $79($7_1 << 2)
           } else {
            $5_1 = 0
           }
           label$61 : {
            if (($9_1 | 0) >= 1) {
             $2_1 = $5_1;
             $1_1 = $6_1;
             while (1) {
              HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
              $2_1 = $2_1 + 4 | 0;
              $1_1 = $1_1 + 4 | 0;
              $9_1 = $9_1 + -1 | 0;
              if ($9_1) {
               continue
              }
              break;
             };
             break label$61;
            }
            if (!$6_1) {
             break label$57
            }
           }
           $80($6_1);
           break label$57;
          }
          $5_1 = $6_1;
          $7_1 = $9_1;
         }
         HEAP32[($4_1 << 2) + $5_1 >> 2] = $13_1;
         $1_1 = $4_1 + 1 | 0;
         $6_1 = $5_1;
         $9_1 = $7_1;
        }
        HEAP32[($16_1 + Math_imul($15_1, 12) | 0) + 8 >> 2] = $18_1;
        HEAP32[$10 + 8 >> 2] = $4_1;
        $4_1 = $1_1;
        $2_1 = HEAP32[$8_1 + 20 >> 2];
       }
       $1_1 = $2_1;
       if (($14 | 0) >= 0) {
        HEAP32[HEAP32[$0 + 32 >> 2] + Math_imul($2_1, 12) >> 2] = $14 - $2_1;
        $1_1 = $11;
       }
       $14 = $2_1;
       $11 = $1_1;
       $8_1 = HEAP32[$8_1 >> 2];
       if (($12_1 | 0) != ($8_1 | 0)) {
        continue
       }
       break;
      };
      HEAP32[HEAP32[$0 + 32 >> 2] + Math_imul($1_1, 12) >> 2] = $2_1 - $1_1;
     }
     $2_1 = $18_1 + 1 | 0;
     if (($2_1 | 0) < ($4_1 | 0)) {
      continue
     }
     break;
    };
    $9_1 = 0;
    while (1) {
     $7_1 = HEAP32[HEAP32[($9_1 << 2) + $6_1 >> 2] + 8 >> 2];
     if ($7_1) {
      $1_1 = $7_1;
      while (1) {
       $2_1 = HEAP32[$1_1 + 20 >> 2];
       if (($2_1 | 0) >= 0) {
        $4_1 = HEAP32[$0 + 44 >> 2];
        label$69 : {
         if (($4_1 | 0) != HEAP32[$0 + 48 >> 2]) {
          break label$69
         }
         $11 = $4_1 ? $4_1 << 1 : 1;
         if (($4_1 | 0) >= ($11 | 0)) {
          break label$69
         }
         label$70 : {
          if (!$11) {
           $14 = 0;
           break label$70;
          }
          $14 = $79($11 << 2);
          $4_1 = HEAP32[$0 + 44 >> 2];
         }
         $5_1 = HEAP32[$0 + 52 >> 2];
         label$72 : {
          label$73 : {
           if (($4_1 | 0) >= 1) {
            $2_1 = $14;
            $8_1 = $5_1;
            while (1) {
             HEAP32[$2_1 >> 2] = HEAP32[$8_1 >> 2];
             $2_1 = $2_1 + 4 | 0;
             $8_1 = $8_1 + 4 | 0;
             $4_1 = $4_1 + -1 | 0;
             if ($4_1) {
              continue
             }
             break;
            };
            break label$73;
           }
           if (!$5_1) {
            break label$72
           }
          }
          if (HEAPU8[$0 + 56 | 0]) {
           $80($5_1)
          }
          HEAP32[$0 + 52 >> 2] = 0;
          $4_1 = HEAP32[$0 + 44 >> 2];
         }
         HEAP32[$0 + 48 >> 2] = $11;
         HEAP32[$0 + 52 >> 2] = $14;
         HEAP8[$0 + 56 | 0] = 1;
         $2_1 = HEAP32[$1_1 + 20 >> 2];
        }
        HEAP32[HEAP32[$0 + 52 >> 2] + ($4_1 << 2) >> 2] = $2_1;
        HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + 1;
        $2_1 = $1_1;
        while (1) {
         HEAP32[$2_1 + 20 >> 2] = -1;
         $2_1 = HEAP32[HEAP32[$2_1 + 8 >> 2] + 4 >> 2];
         if (($2_1 | 0) != ($1_1 | 0)) {
          continue
         }
         break;
        };
       }
       $1_1 = HEAP32[$1_1 >> 2];
       if (($7_1 | 0) != ($1_1 | 0)) {
        continue
       }
       break;
      };
     }
     $1_1 = ($9_1 | 0) == ($18_1 | 0);
     $9_1 = $9_1 + 1 | 0;
     if (!$1_1) {
      continue
     }
     break;
    };
    if (!$6_1) {
     break label$9
    }
    $80($6_1);
   }
   $0 = HEAP32[$3_1 + 108 >> 2];
   if ($0) {
    if (HEAPU8[$3_1 + 112 | 0]) {
     $80($0)
    }
    HEAP32[$3_1 + 108 >> 2] = 0;
   }
   HEAP32[$3_1 + 108 >> 2] = 0;
   HEAP8[$3_1 + 112 | 0] = 1;
   HEAP32[$3_1 + 100 >> 2] = 0;
   HEAP32[$3_1 + 104 >> 2] = 0;
   while (1) {
    $0 = HEAP32[$3_1 + 80 >> 2];
    if ($0) {
     HEAP32[$3_1 + 80 >> 2] = HEAP32[$0 + 8 >> 2];
     $80(HEAP32[$0 >> 2]);
     $80($0);
     continue;
    }
    break;
   };
   while (1) {
    $0 = HEAP32[$3_1 + 64 >> 2];
    if ($0) {
     HEAP32[$3_1 + 64 >> 2] = HEAP32[$0 + 8 >> 2];
     $80(HEAP32[$0 >> 2]);
     $80($0);
     continue;
    }
    break;
   };
   while (1) {
    $0 = HEAP32[$3_1 + 48 >> 2];
    if (!$0) {
     break label$1
    }
    HEAP32[$3_1 + 48 >> 2] = HEAP32[$0 + 8 >> 2];
    $80(HEAP32[$0 >> 2]);
    $80($0);
    continue;
   };
  }
  global$0 = $3_1 + 144 | 0;
 }
 
 function $177($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = 0;
  $14 = HEAP32[$0 + 4 >> 2];
  if (($14 | 0) >= 1) {
   while (1) {
    label$3 : {
     $12_1 = $17_1;
     $17_1 = $12_1 + 1 | 0;
     if (($17_1 | 0) >= ($14 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[$0 + 12 >> 2];
     $18_1 = $3_1 + ($12_1 << 4) | 0;
     $27_1 = $18_1 + 8 | 0;
     $28_1 = $18_1 + 4 | 0;
     $2_1 = $17_1;
     while (1) {
      label$5 : {
       $12_1 = $2_1 + 1 | 0;
       if (($12_1 | 0) >= ($14 | 0)) {
        break label$5
       }
       $23_1 = ($2_1 << 4) + $3_1 | 0;
       $29_1 = $23_1 + 8 | 0;
       $30 = $23_1 + 4 | 0;
       $19_1 = $12_1;
       while (1) {
        $24_1 = HEAPF32[$18_1 >> 2];
        $8_1 = Math_fround(HEAPF32[$23_1 >> 2] - $24_1);
        $2_1 = ($19_1 << 4) + $3_1 | 0;
        $25 = HEAPF32[$28_1 >> 2];
        $13_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] - $25);
        $4_1 = Math_fround(HEAPF32[$30 >> 2] - $25);
        $9_1 = Math_fround(HEAPF32[$2_1 >> 2] - $24_1);
        $20 = Math_fround(Math_fround($8_1 * $13_1) - Math_fround($4_1 * $9_1));
        $26_1 = HEAPF32[$27_1 >> 2];
        $10 = Math_fround(HEAPF32[$2_1 + 8 >> 2] - $26_1);
        $15_1 = Math_fround($4_1 * $10);
        $4_1 = Math_fround(HEAPF32[$29_1 >> 2] - $26_1);
        $13_1 = Math_fround($15_1 - Math_fround($4_1 * $13_1));
        $9_1 = Math_fround(Math_fround($4_1 * $9_1) - Math_fround($8_1 * $10));
        $10 = Math_fround(Math_fround($20 * $20) + Math_fround(Math_fround($13_1 * $13_1) + Math_fround($9_1 * $9_1)));
        $16_1 = $10 > Math_fround(9.999999747378752e-05) ^ 1;
        label$7 : {
         if ($16_1) {
          break label$7
         }
         $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($10)));
         $15_1 = Math_fround($20 * $4_1);
         $21 = Math_fround($9_1 * $4_1);
         $8_1 = Math_fround($13_1 * $4_1);
         $6_1 = HEAP32[$1_1 + 4 >> 2];
         if (($6_1 | 0) >= 1) {
          $2_1 = HEAP32[$1_1 + 12 >> 2];
          $5_1 = $6_1;
          while (1) {
           if (!!(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$2_1 >> 2]) + Math_fround($21 * HEAPF32[$2_1 + 4 >> 2])) + Math_fround($15_1 * HEAPF32[$2_1 + 8 >> 2])) > Math_fround(.9990000128746033))) {
            break label$7
           }
           $2_1 = $2_1 + 16 | 0;
           $5_1 = $5_1 + -1 | 0;
           if ($5_1) {
            continue
           }
           break;
          };
         }
         $4_1 = Math_fround(Math_fround(Math_fround($8_1 * $24_1) + Math_fround($21 * $25)) + Math_fround($15_1 * $26_1));
         $2_1 = HEAP32[$0 + 4 >> 2];
         if (($2_1 | 0) >= 1) {
          while (1) {
           if (!!(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$3_1 >> 2]) + Math_fround($21 * HEAPF32[$3_1 + 4 >> 2])) + Math_fround($15_1 * HEAPF32[$3_1 + 8 >> 2])) - $4_1) + Math_fround(-.009999999776482582)) > Math_fround(0.0))) {
            break label$7
           }
           $3_1 = $3_1 + 16 | 0;
           $2_1 = $2_1 + -1 | 0;
           if ($2_1) {
            continue
           }
           break;
          }
         }
         $4_1 = Math_fround(-$4_1);
         label$12 : {
          if (HEAP32[$1_1 + 8 >> 2] != ($6_1 | 0)) {
           break label$12
          }
          $22_1 = $6_1 ? $6_1 << 1 : 1;
          if (($6_1 | 0) >= ($22_1 | 0)) {
           break label$12
          }
          label$13 : {
           if (!$22_1) {
            $11 = 0;
            break label$13;
           }
           $11 = $79($22_1 << 4);
           $6_1 = HEAP32[$1_1 + 4 >> 2];
          }
          if (($6_1 | 0) >= 1) {
           $2_1 = 0;
           while (1) {
            $3_1 = HEAP32[$1_1 + 12 >> 2] + $2_1 | 0;
            $5_1 = HEAP32[$3_1 + 4 >> 2];
            $7_1 = $2_1 + $11 | 0;
            HEAP32[$7_1 >> 2] = HEAP32[$3_1 >> 2];
            HEAP32[$7_1 + 4 >> 2] = $5_1;
            $3_1 = $3_1 + 8 | 0;
            $5_1 = HEAP32[$3_1 + 4 >> 2];
            $7_1 = $7_1 + 8 | 0;
            HEAP32[$7_1 >> 2] = HEAP32[$3_1 >> 2];
            HEAP32[$7_1 + 4 >> 2] = $5_1;
            $2_1 = $2_1 + 16 | 0;
            $6_1 = $6_1 + -1 | 0;
            if ($6_1) {
             continue
            }
            break;
           };
          }
          $2_1 = HEAP32[$1_1 + 12 >> 2];
          if ($2_1) {
           if (HEAPU8[$1_1 + 16 | 0]) {
            $80($2_1)
           }
           HEAP32[$1_1 + 12 >> 2] = 0;
          }
          HEAP32[$1_1 + 12 >> 2] = $11;
          HEAP8[$1_1 + 16 | 0] = 1;
          HEAP32[$1_1 + 8 >> 2] = $22_1;
          $6_1 = HEAP32[$1_1 + 4 >> 2];
         }
         $2_1 = HEAP32[$1_1 + 12 >> 2] + ($6_1 << 4) | 0;
         HEAPF32[$2_1 + 12 >> 2] = $4_1;
         HEAPF32[$2_1 + 8 >> 2] = $15_1;
         HEAPF32[$2_1 + 4 >> 2] = $21;
         HEAPF32[$2_1 >> 2] = $8_1;
         HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + 1;
        }
        label$19 : {
         if ($16_1) {
          break label$19
         }
         $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($10)));
         $8_1 = Math_fround($4_1 * Math_fround(-$20));
         $9_1 = Math_fround($4_1 * Math_fround(-$9_1));
         $10 = Math_fround($4_1 * Math_fround(-$13_1));
         $5_1 = HEAP32[$1_1 + 4 >> 2];
         if (($5_1 | 0) >= 1) {
          $2_1 = HEAP32[$1_1 + 12 >> 2];
          $3_1 = $5_1;
          while (1) {
           if (Math_fround(Math_fround(Math_fround($10 * HEAPF32[$2_1 >> 2]) + Math_fround($9_1 * HEAPF32[$2_1 + 4 >> 2])) + Math_fround($8_1 * HEAPF32[$2_1 + 8 >> 2])) > Math_fround(.9990000128746033)) {
            break label$19
           }
           $2_1 = $2_1 + 16 | 0;
           $3_1 = $3_1 + -1 | 0;
           if ($3_1) {
            continue
           }
           break;
          };
         }
         $4_1 = Math_fround(Math_fround(Math_fround($10 * HEAPF32[$18_1 >> 2]) + Math_fround($9_1 * HEAPF32[$28_1 >> 2])) + Math_fround($8_1 * HEAPF32[$27_1 >> 2]));
         $3_1 = HEAP32[$0 + 4 >> 2];
         if (($3_1 | 0) >= 1) {
          $2_1 = HEAP32[$0 + 12 >> 2];
          while (1) {
           if (Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($10 * HEAPF32[$2_1 >> 2]) + Math_fround($9_1 * HEAPF32[$2_1 + 4 >> 2])) + Math_fround($8_1 * HEAPF32[$2_1 + 8 >> 2])) - $4_1) + Math_fround(-.009999999776482582)) > Math_fround(0.0)) {
            break label$19
           }
           $2_1 = $2_1 + 16 | 0;
           $3_1 = $3_1 + -1 | 0;
           if ($3_1) {
            continue
           }
           break;
          };
         }
         $4_1 = Math_fround(-$4_1);
         label$24 : {
          if (HEAP32[$1_1 + 8 >> 2] != ($5_1 | 0)) {
           break label$24
          }
          $11 = $5_1 ? $5_1 << 1 : 1;
          if (($5_1 | 0) >= ($11 | 0)) {
           break label$24
          }
          label$25 : {
           if (!$11) {
            $16_1 = 0;
            break label$25;
           }
           $16_1 = $79($11 << 4);
           $5_1 = HEAP32[$1_1 + 4 >> 2];
          }
          if (($5_1 | 0) >= 1) {
           $2_1 = 0;
           while (1) {
            $3_1 = HEAP32[$1_1 + 12 >> 2] + $2_1 | 0;
            $6_1 = HEAP32[$3_1 + 4 >> 2];
            $7_1 = $2_1 + $16_1 | 0;
            HEAP32[$7_1 >> 2] = HEAP32[$3_1 >> 2];
            HEAP32[$7_1 + 4 >> 2] = $6_1;
            $3_1 = $3_1 + 8 | 0;
            $6_1 = HEAP32[$3_1 + 4 >> 2];
            $7_1 = $7_1 + 8 | 0;
            HEAP32[$7_1 >> 2] = HEAP32[$3_1 >> 2];
            HEAP32[$7_1 + 4 >> 2] = $6_1;
            $2_1 = $2_1 + 16 | 0;
            $5_1 = $5_1 + -1 | 0;
            if ($5_1) {
             continue
            }
            break;
           };
          }
          $2_1 = HEAP32[$1_1 + 12 >> 2];
          if ($2_1) {
           if (HEAPU8[$1_1 + 16 | 0]) {
            $80($2_1)
           }
           HEAP32[$1_1 + 12 >> 2] = 0;
          }
          HEAP32[$1_1 + 12 >> 2] = $16_1;
          HEAP8[$1_1 + 16 | 0] = 1;
          HEAP32[$1_1 + 8 >> 2] = $11;
          $5_1 = HEAP32[$1_1 + 4 >> 2];
         }
         $2_1 = HEAP32[$1_1 + 12 >> 2] + ($5_1 << 4) | 0;
         HEAPF32[$2_1 + 12 >> 2] = $4_1;
         HEAPF32[$2_1 + 8 >> 2] = $8_1;
         HEAPF32[$2_1 + 4 >> 2] = $9_1;
         HEAPF32[$2_1 >> 2] = $10;
         HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + 1;
        }
        $19_1 = $19_1 + 1 | 0;
        if (($19_1 | 0) == ($14 | 0)) {
         break label$5
        }
        $3_1 = HEAP32[$0 + 12 >> 2];
        continue;
       };
      }
      if (($14 | 0) == ($12_1 | 0)) {
       break label$3
      }
      $3_1 = HEAP32[$0 + 12 >> 2];
      $2_1 = $12_1;
      continue;
     };
    }
    if (($14 | 0) != ($17_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $178($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20 = 0, $21 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = 0, $29_1 = 0, $30 = 0, $31_1 = 0, $32 = 0, $33_1 = 0, $34 = 0, $35 = 0;
  $14 = HEAP32[$0 + 4 >> 2];
  if (($14 | 0) >= 1) {
   while (1) {
    label$3 : {
     $11 = $18_1;
     $18_1 = $11 + 1 | 0;
     if (($18_1 | 0) >= ($14 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[$0 + 12 >> 2];
     $19_1 = $3_1 + ($11 << 4) | 0;
     $30 = $19_1 + 12 | 0;
     $31_1 = $19_1 + 4 | 0;
     $32 = $19_1 + 8 | 0;
     $2_1 = $18_1;
     while (1) {
      label$5 : {
       $11 = $2_1 + 1 | 0;
       if (($11 | 0) >= ($14 | 0)) {
        break label$5
       }
       $20 = ($2_1 << 4) + $3_1 | 0;
       $33_1 = $20 + 12 | 0;
       $34 = $20 + 8 | 0;
       $35 = $20 + 4 | 0;
       $21 = $11;
       while (1) {
        $2_1 = ($21 << 4) + $3_1 | 0;
        $7_1 = HEAPF32[$2_1 + 4 >> 2];
        $8_1 = HEAPF32[$20 >> 2];
        $9_1 = HEAPF32[$35 >> 2];
        $5_1 = HEAPF32[$2_1 >> 2];
        $10 = Math_fround(Math_fround($7_1 * $8_1) - Math_fround($9_1 * $5_1));
        $6_1 = HEAPF32[$2_1 + 8 >> 2];
        $4_1 = HEAPF32[$34 >> 2];
        $22_1 = Math_fround(Math_fround($9_1 * $6_1) - Math_fround($4_1 * $7_1));
        $23_1 = Math_fround(Math_fround($4_1 * $5_1) - Math_fround($6_1 * $8_1));
        label$7 : {
         if (!(Math_fround(Math_fround($10 * $10) + Math_fround(Math_fround($22_1 * $22_1) + Math_fround($23_1 * $23_1))) > Math_fround(9.999999747378752e-05))) {
          break label$7
         }
         $12_1 = HEAPF32[$31_1 >> 2];
         $16_1 = HEAPF32[$19_1 >> 2];
         $25 = Math_fround(Math_fround($5_1 * $12_1) - Math_fround($7_1 * $16_1));
         $17_1 = HEAPF32[$32 >> 2];
         $26_1 = Math_fround(Math_fround($7_1 * $17_1) - Math_fround($6_1 * $12_1));
         $27_1 = Math_fround(Math_fround($6_1 * $16_1) - Math_fround($5_1 * $17_1));
         if (!(Math_fround(Math_fround($25 * $25) + Math_fround(Math_fround($26_1 * $26_1) + Math_fround($27_1 * $27_1))) > Math_fround(9.999999747378752e-05))) {
          break label$7
         }
         $5_1 = Math_fround(Math_fround($9_1 * $16_1) - Math_fround($8_1 * $12_1));
         $7_1 = Math_fround(Math_fround($4_1 * $12_1) - Math_fround($9_1 * $17_1));
         $6_1 = Math_fround(Math_fround($8_1 * $17_1) - Math_fround($4_1 * $16_1));
         if (!(Math_fround(Math_fround($5_1 * $5_1) + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($6_1 * $6_1))) > Math_fround(9.999999747378752e-05))) {
          break label$7
         }
         $4_1 = Math_fround(Math_fround($17_1 * $10) + Math_fround(Math_fround($12_1 * $23_1) + Math_fround($22_1 * $16_1)));
         if (!(Math_fround(Math_abs($4_1)) > Math_fround(9.999999974752427e-07))) {
          break label$7
         }
         $8_1 = Math_fround(Math_fround(-1.0) / $4_1);
         $9_1 = HEAPF32[$2_1 + 12 >> 2];
         $12_1 = $10;
         $10 = HEAPF32[$30 >> 2];
         $4_1 = HEAPF32[$33_1 >> 2];
         $5_1 = Math_fround($8_1 * Math_fround(Math_fround($5_1 * $9_1) + Math_fround(Math_fround($12_1 * $10) + Math_fround($25 * $4_1))));
         $6_1 = Math_fround($8_1 * Math_fround(Math_fround($6_1 * $9_1) + Math_fround(Math_fround($23_1 * $10) + Math_fround($27_1 * $4_1))));
         $4_1 = Math_fround($8_1 * Math_fround(Math_fround($7_1 * $9_1) + Math_fround(Math_fround($22_1 * $10) + Math_fround($26_1 * $4_1))));
         $2_1 = HEAP32[$0 + 4 >> 2];
         if (($2_1 | 0) >= 1) {
          while (1) {
           if (!!(Math_fround(Math_fround(HEAPF32[$3_1 + 12 >> 2] + Math_fround(Math_fround(Math_fround($4_1 * HEAPF32[$3_1 >> 2]) + Math_fround($6_1 * HEAPF32[$3_1 + 4 >> 2])) + Math_fround($5_1 * HEAPF32[$3_1 + 8 >> 2]))) + Math_fround(-.009999999776482582)) > Math_fround(0.0))) {
            break label$7
           }
           $3_1 = $3_1 + 16 | 0;
           $2_1 = $2_1 + -1 | 0;
           if ($2_1) {
            continue
           }
           break;
          }
         }
         $2_1 = HEAP32[$1_1 + 4 >> 2];
         label$10 : {
          if (($2_1 | 0) != HEAP32[$1_1 + 8 >> 2]) {
           break label$10
          }
          $24_1 = $2_1 ? $2_1 << 1 : 1;
          if (($2_1 | 0) >= ($24_1 | 0)) {
           break label$10
          }
          label$11 : {
           if (!$24_1) {
            $28_1 = 0;
            break label$11;
           }
           $28_1 = $79($24_1 << 4);
           $2_1 = HEAP32[$1_1 + 4 >> 2];
          }
          if (($2_1 | 0) >= 1) {
           $3_1 = 0;
           while (1) {
            $15_1 = HEAP32[$1_1 + 12 >> 2] + $3_1 | 0;
            $29_1 = HEAP32[$15_1 + 4 >> 2];
            $13_1 = $3_1 + $28_1 | 0;
            HEAP32[$13_1 >> 2] = HEAP32[$15_1 >> 2];
            HEAP32[$13_1 + 4 >> 2] = $29_1;
            $15_1 = $15_1 + 8 | 0;
            $29_1 = HEAP32[$15_1 + 4 >> 2];
            $13_1 = $13_1 + 8 | 0;
            HEAP32[$13_1 >> 2] = HEAP32[$15_1 >> 2];
            HEAP32[$13_1 + 4 >> 2] = $29_1;
            $3_1 = $3_1 + 16 | 0;
            $2_1 = $2_1 + -1 | 0;
            if ($2_1) {
             continue
            }
            break;
           };
          }
          $2_1 = HEAP32[$1_1 + 12 >> 2];
          if ($2_1) {
           if (HEAPU8[$1_1 + 16 | 0]) {
            $80($2_1)
           }
           HEAP32[$1_1 + 12 >> 2] = 0;
          }
          HEAP32[$1_1 + 12 >> 2] = $28_1;
          HEAP8[$1_1 + 16 | 0] = 1;
          HEAP32[$1_1 + 8 >> 2] = $24_1;
          $2_1 = HEAP32[$1_1 + 4 >> 2];
         }
         $2_1 = HEAP32[$1_1 + 12 >> 2] + ($2_1 << 4) | 0;
         HEAP32[$2_1 + 12 >> 2] = 0;
         HEAPF32[$2_1 + 8 >> 2] = $5_1;
         HEAPF32[$2_1 + 4 >> 2] = $6_1;
         HEAPF32[$2_1 >> 2] = $4_1;
         HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + 1;
        }
        $21 = $21 + 1 | 0;
        if (($21 | 0) == ($14 | 0)) {
         break label$5
        }
        $3_1 = HEAP32[$0 + 12 >> 2];
        continue;
       };
      }
      if (($14 | 0) == ($11 | 0)) {
       break label$3
      }
      $3_1 = HEAP32[$0 + 12 >> 2];
      $2_1 = $11;
      continue;
     };
    }
    if (($14 | 0) != ($18_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $179($0) {
  $145($0);
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 >> 2] = 5124;
  return $0;
 }
 
 function $181($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0, $20 = Math_fround(0), $21 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = Math_fround(0), $28_1 = 0, $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32 = 0;
  $2_1 = global$0 - 240 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0 + 56 >> 2];
  if ($3_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] >> 2]]($3_1) | 0;
   $80(HEAP32[$0 + 56 >> 2]);
  }
  $3_1 = $79(132);
  $150($3_1);
  HEAP32[$0 + 56 >> 2] = $3_1;
  HEAP32[$2_1 + 228 >> 2] = 0;
  HEAP32[$2_1 + 220 >> 2] = 0;
  HEAP32[$2_1 + 224 >> 2] = 0;
  HEAP8[$2_1 + 232 | 0] = 1;
  label$2 : {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) < 1) {
    break label$2
   }
   while (1) {
    label$4 : {
     if (($5_1 | 0) != ($9_1 | 0)) {
      $7_1 = $6_1;
      break label$4;
     }
     $10 = $5_1 ? $5_1 << 1 : 1;
     if (($5_1 | 0) >= ($10 | 0)) {
      $7_1 = $6_1;
      break label$4;
     }
     if ($10) {
      $7_1 = $79($10 << 4)
     } else {
      $7_1 = 0
     }
     label$9 : {
      label$10 : {
       if (($5_1 | 0) >= 1) {
        $3_1 = $7_1;
        $4_1 = $6_1;
        while (1) {
         $12_1 = HEAP32[$4_1 + 4 >> 2];
         HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$3_1 + 4 >> 2] = $12_1;
         $15_1 = $4_1 + 8 | 0;
         $19_1 = HEAP32[$15_1 + 4 >> 2];
         $12_1 = $3_1 + 8 | 0;
         HEAP32[$12_1 >> 2] = HEAP32[$15_1 >> 2];
         HEAP32[$12_1 + 4 >> 2] = $19_1;
         $3_1 = $3_1 + 16 | 0;
         $4_1 = $4_1 + 16 | 0;
         $5_1 = $5_1 + -1 | 0;
         if ($5_1) {
          continue
         }
         break;
        };
        break label$10;
       }
       if (!$6_1) {
        break label$9
       }
      }
      if (HEAPU8[$2_1 + 232 | 0]) {
       $80($6_1)
      }
      HEAP32[$2_1 + 228 >> 2] = 0;
     }
     HEAP32[$2_1 + 228 >> 2] = $7_1;
     HEAP8[$2_1 + 232 | 0] = 1;
     HEAP32[$2_1 + 224 >> 2] = $10;
    }
    HEAP32[$2_1 + 220 >> 2] = $9_1 + 1;
    $5_1 = HEAP32[$2_1 + 156 >> 2];
    $3_1 = $9_1 << 4;
    $4_1 = $3_1 + $7_1 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 + 152 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $6_1 = $2_1 + 160 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = $4_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $6_1 = HEAP32[$2_1 + 228 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $8_1, $3_1 + $6_1 | 0);
    $8_1 = $8_1 + 1 | 0;
    if (($8_1 | 0) >= (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0)) {
     break label$2
    }
    $5_1 = HEAP32[$2_1 + 224 >> 2];
    $9_1 = HEAP32[$2_1 + 220 >> 2];
    continue;
   };
  }
  HEAP8[$2_1 + 188 | 0] = 1;
  HEAP32[$2_1 + 184 >> 2] = 0;
  HEAP8[$2_1 + 208 | 0] = 1;
  $3_1 = $2_1 + 176 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 204 >> 2] = 0;
  $3_1 = $2_1 + 196 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 164 >> 2] = 0;
  HEAP8[$2_1 + 168 | 0] = 1;
  HEAP32[$2_1 + 156 >> 2] = 0;
  HEAP32[$2_1 + 160 >> 2] = 0;
  label$14 : {
   if (!$1_1) {
    $176($2_1 + 152 | 0, $6_1, HEAP32[$2_1 + 220 >> 2]);
    break label$14;
   }
   HEAP32[$2_1 + 60 >> 2] = 0;
   HEAP8[$2_1 + 64 | 0] = 1;
   HEAP32[$2_1 + 52 >> 2] = 0;
   HEAP32[$2_1 + 56 >> 2] = 0;
   $177($2_1 + 216 | 0, $2_1 + 48 | 0);
   HEAP32[$2_1 + 140 >> 2] = 0;
   HEAP8[$2_1 + 144 | 0] = 1;
   HEAP32[$2_1 + 132 >> 2] = 0;
   HEAP32[$2_1 + 136 >> 2] = 0;
   if (HEAP32[$2_1 + 52 >> 2] >= 1) {
    $7_1 = 0;
    while (1) {
     $5_1 = $2_1 + 112 | 0;
     $1_1 = HEAP32[$2_1 + 60 >> 2] + ($7_1 << 4) | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 8 >> 2];
     $3_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$2_1 + 104 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$2_1 + 108 >> 2] = $3_1;
     $11 = Math_fround(HEAPF32[$1_1 + 12 >> 2] - Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0)));
     $4_1 = HEAP32[$2_1 + 132 >> 2];
     label$18 : {
      if (($4_1 | 0) != HEAP32[$2_1 + 136 >> 2]) {
       break label$18
      }
      $1_1 = $4_1 ? $4_1 << 1 : 1;
      if (($4_1 | 0) >= ($1_1 | 0)) {
       break label$18
      }
      label$19 : {
       if (!$1_1) {
        $8_1 = 0;
        break label$19;
       }
       $8_1 = $79($1_1 << 4);
       $4_1 = HEAP32[$2_1 + 132 >> 2];
      }
      if (($4_1 | 0) >= 1) {
       $3_1 = 0;
       while (1) {
        $6_1 = HEAP32[$2_1 + 140 >> 2] + $3_1 | 0;
        $9_1 = HEAP32[$6_1 + 4 >> 2];
        $10 = $3_1 + $8_1 | 0;
        HEAP32[$10 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$10 + 4 >> 2] = $9_1;
        $6_1 = $6_1 + 8 | 0;
        $12_1 = HEAP32[$6_1 + 4 >> 2];
        $10 = $10 + 8 | 0;
        HEAP32[$10 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$10 + 4 >> 2] = $12_1;
        $3_1 = $3_1 + 16 | 0;
        $4_1 = $4_1 + -1 | 0;
        if ($4_1) {
         continue
        }
        break;
       };
      }
      $3_1 = HEAP32[$2_1 + 140 >> 2];
      if ($3_1) {
       if (HEAPU8[$2_1 + 144 | 0]) {
        $80($3_1)
       }
       HEAP32[$2_1 + 140 >> 2] = 0;
      }
      HEAP32[$2_1 + 140 >> 2] = $8_1;
      HEAP8[$2_1 + 144 | 0] = 1;
      HEAP32[$2_1 + 136 >> 2] = $1_1;
      $4_1 = HEAP32[$2_1 + 132 >> 2];
     }
     $3_1 = HEAP32[$2_1 + 108 >> 2];
     $1_1 = HEAP32[$2_1 + 140 >> 2] + ($4_1 << 4) | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 104 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $3_1;
     HEAPF32[$1_1 + 12 >> 2] = $11;
     HEAP32[$1_1 + 8 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$2_1 + 132 >> 2] = HEAP32[$2_1 + 132 >> 2] + 1;
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) < HEAP32[$2_1 + 52 >> 2]) {
      continue
     }
     break;
    };
   }
   HEAP32[$2_1 + 116 >> 2] = 0;
   HEAP8[$2_1 + 120 | 0] = 1;
   HEAP32[$2_1 + 108 >> 2] = 0;
   HEAP32[$2_1 + 112 >> 2] = 0;
   $178($2_1 + 128 | 0, $2_1 + 104 | 0);
   $176($2_1 + 152 | 0, HEAP32[$2_1 + 116 >> 2], HEAP32[$2_1 + 108 >> 2]);
   $1_1 = HEAP32[$2_1 + 116 >> 2];
   if ($1_1) {
    if (HEAPU8[$2_1 + 120 | 0]) {
     $80($1_1)
    }
    HEAP32[$2_1 + 116 >> 2] = 0;
   }
   $1_1 = HEAP32[$2_1 + 140 >> 2];
   if ($1_1) {
    if (HEAPU8[$2_1 + 144 | 0]) {
     $80($1_1)
    }
    HEAP32[$2_1 + 140 >> 2] = 0;
   }
   $1_1 = HEAP32[$2_1 + 60 >> 2];
   if (!$1_1) {
    break label$14
   }
   if (HEAPU8[$2_1 + 64 | 0]) {
    $80($1_1)
   }
   HEAP32[$2_1 + 60 >> 2] = 0;
  }
  $19_1 = 0;
  $1_1 = HEAP32[$2_1 + 196 >> 2];
  if (($1_1 | 0) >= 1) {
   $19_1 = $79($1_1 << 4);
   $3_1 = $19_1;
   $4_1 = $1_1;
   while (1) {
    $6_1 = HEAP32[$2_1 + 52 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 + 48 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $5_1 = $2_1 + 56 | 0;
    $7_1 = HEAP32[$5_1 + 4 >> 2];
    $6_1 = $3_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $7_1;
    $3_1 = $3_1 + 16 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$2_1 + 140 >> 2] = 0;
  HEAP8[$2_1 + 144 | 0] = 1;
  HEAP32[$2_1 + 132 >> 2] = 0;
  HEAP32[$2_1 + 136 >> 2] = 0;
  $3_1 = $2_1 + 63 | 0;
  HEAP8[$3_1 | 0] = 0;
  HEAP8[$3_1 + 1 | 0] = 0;
  HEAP8[$3_1 + 2 | 0] = 0;
  HEAP8[$3_1 + 3 | 0] = 0;
  $3_1 = $2_1 + 56 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 48 >> 2] = 0;
  HEAP32[$2_1 + 52 >> 2] = 0;
  label$32 : {
   if (($1_1 | 0) <= -1) {
    $4_1 = $1_1 + 1 | 0;
    $5_1 = Math_imul($1_1, 36) + 8 | 0;
    $3_1 = 0;
    while (1) {
     $3_1 = $3_1 + $5_1 | 0;
     $7_1 = $3_1 + -4 | 0;
     $6_1 = $3_1 + 4 | 0;
     $8_1 = HEAP32[$6_1 >> 2];
     if ($8_1) {
      if (HEAPU8[$3_1 + 8 | 0]) {
       $80($8_1)
      }
      HEAP32[$6_1 >> 2] = 0;
     }
     HEAP32[$7_1 >> 2] = 0;
     HEAP32[$6_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP8[$3_1 + 8 | 0] = 1;
     if (!$4_1) {
      break label$32
     }
     $5_1 = $5_1 + 36 | 0;
     $4_1 = $4_1 + 1 | 0;
     $3_1 = HEAP32[$2_1 + 140 >> 2];
     continue;
    };
   }
   if (!$1_1) {
    break label$32
   }
   $182($2_1 + 128 | 0, $1_1);
   $6_1 = $2_1 + 48 | 3;
   $4_1 = 20;
   $9_1 = $1_1;
   while (1) {
    $5_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
    $3_1 = HEAP32[$2_1 + 140 >> 2] + $4_1 | 0;
    $7_1 = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
    HEAP8[$3_1 | 0] = $7_1;
    HEAP8[$3_1 + 1 | 0] = $7_1 >>> 8;
    HEAP8[$3_1 + 2 | 0] = $7_1 >>> 16;
    HEAP8[$3_1 + 3 | 0] = $7_1 >>> 24;
    HEAP8[$3_1 + 4 | 0] = $5_1;
    HEAP8[$3_1 + 5 | 0] = $5_1 >>> 8;
    HEAP8[$3_1 + 6 | 0] = $5_1 >>> 16;
    HEAP8[$3_1 + 7 | 0] = $5_1 >>> 24;
    HEAP8[$3_1 + -4 | 0] = 1;
    $8_1 = $3_1 + -16 | 0;
    $5_1 = $8_1;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $6_1 + 8 | 0;
    $7_1 = HEAPU8[$5_1 + 4 | 0] | HEAPU8[$5_1 + 5 | 0] << 8 | (HEAPU8[$5_1 + 6 | 0] << 16 | HEAPU8[$5_1 + 7 | 0] << 24);
    $3_1 = $3_1 + 8 | 0;
    $5_1 = HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8 | (HEAPU8[$5_1 + 2 | 0] << 16 | HEAPU8[$5_1 + 3 | 0] << 24);
    HEAP8[$3_1 | 0] = $5_1;
    HEAP8[$3_1 + 1 | 0] = $5_1 >>> 8;
    HEAP8[$3_1 + 2 | 0] = $5_1 >>> 16;
    HEAP8[$3_1 + 3 | 0] = $5_1 >>> 24;
    HEAP8[$3_1 + 4 | 0] = $7_1;
    HEAP8[$3_1 + 5 | 0] = $7_1 >>> 8;
    HEAP8[$3_1 + 6 | 0] = $7_1 >>> 16;
    HEAP8[$3_1 + 7 | 0] = $7_1 >>> 24;
    HEAP32[$8_1 + 8 >> 2] = 0;
    $4_1 = $4_1 + 36 | 0;
    $9_1 = $9_1 + -1 | 0;
    if ($9_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$2_1 + 132 >> 2] = $1_1;
  $8_1 = HEAP32[$0 + 56 >> 2];
  $7_1 = HEAP32[$8_1 + 8 >> 2];
  $4_1 = HEAP32[$2_1 + 156 >> 2];
  if (($7_1 | 0) < ($4_1 | 0)) {
   if (HEAP32[$8_1 + 12 >> 2] < ($4_1 | 0)) {
    label$40 : {
     if (!$4_1) {
      $6_1 = 0;
      $5_1 = $7_1;
      break label$40;
     }
     $6_1 = $79($4_1 << 4);
     $5_1 = HEAP32[$8_1 + 8 >> 2];
    }
    if (($5_1 | 0) >= 1) {
     $3_1 = 0;
     while (1) {
      $10 = HEAP32[$8_1 + 16 >> 2] + $3_1 | 0;
      $15_1 = HEAP32[$10 + 4 >> 2];
      $12_1 = $3_1 + $6_1 | 0;
      $9_1 = $12_1;
      HEAP32[$9_1 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$9_1 + 4 >> 2] = $15_1;
      $10 = $10 + 8 | 0;
      $9_1 = HEAP32[$10 + 4 >> 2];
      $12_1 = $12_1 + 8 | 0;
      HEAP32[$12_1 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$12_1 + 4 >> 2] = $9_1;
      $3_1 = $3_1 + 16 | 0;
      $5_1 = $5_1 + -1 | 0;
      if ($5_1) {
       continue
      }
      break;
     };
    }
    $3_1 = HEAP32[$8_1 + 16 >> 2];
    if ($3_1) {
     if (HEAPU8[$8_1 + 20 | 0]) {
      $80($3_1)
     }
     HEAP32[$8_1 + 16 >> 2] = 0;
    }
    HEAP32[$8_1 + 16 >> 2] = $6_1;
    HEAP32[$8_1 + 12 >> 2] = $4_1;
    HEAP8[$8_1 + 20 | 0] = 1;
   }
   $3_1 = $7_1 << 4;
   $5_1 = $4_1 - $7_1 | 0;
   while (1) {
    $10 = HEAP32[$2_1 + 52 >> 2];
    $6_1 = HEAP32[$8_1 + 16 >> 2] + $3_1 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$2_1 + 48 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $10;
    $7_1 = $2_1 + 56 | 0;
    $10 = HEAP32[$7_1 + 4 >> 2];
    $6_1 = $6_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $10;
    $3_1 = $3_1 + 16 | 0;
    $5_1 = $5_1 + -1 | 0;
    if ($5_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$8_1 + 8 >> 2] = $4_1;
  if (($4_1 | 0) >= 1) {
   $3_1 = 0;
   while (1) {
    $6_1 = HEAP32[$2_1 + 164 >> 2] + $3_1 | 0;
    $8_1 = HEAP32[$6_1 + 4 >> 2];
    $5_1 = HEAP32[HEAP32[$0 + 56 >> 2] + 16 >> 2] + $3_1 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $8_1;
    $6_1 = $6_1 + 8 | 0;
    $7_1 = HEAP32[$6_1 + 4 >> 2];
    $5_1 = $5_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $7_1;
    $3_1 = $3_1 + 16 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  if (($1_1 | 0) >= 1) {
   $12_1 = 0;
   while (1) {
    $6_1 = 0;
    $21 = HEAP32[$2_1 + 184 >> 2] + Math_imul(HEAP32[HEAP32[$2_1 + 204 >> 2] + ($12_1 << 2) >> 2], 12) | 0;
    $9_1 = $21;
    while (1) {
     $22_1 = Math_imul($12_1, 36);
     $10 = $22_1 + HEAP32[$2_1 + 140 >> 2] | 0;
     $15_1 = $10 + 4 | 0;
     $17_1 = HEAP32[(Math_imul(HEAP32[$9_1 + 4 >> 2], 12) + $9_1 | 0) + 8 >> 2];
     $5_1 = HEAP32[$10 + 4 >> 2];
     label$52 : {
      if (($5_1 | 0) != HEAP32[$10 + 8 >> 2]) {
       break label$52
      }
      $16_1 = $5_1 ? $5_1 << 1 : 1;
      if (($5_1 | 0) >= ($16_1 | 0)) {
       break label$52
      }
      label$53 : {
       if (!$16_1) {
        $7_1 = 0;
        break label$53;
       }
       $7_1 = $79($16_1 << 2);
       $5_1 = HEAP32[$15_1 >> 2];
      }
      $23_1 = $10 + 8 | 0;
      $25 = $10 + 12 | 0;
      $8_1 = HEAP32[$10 + 12 >> 2];
      label$55 : {
       label$56 : {
        if (($5_1 | 0) >= 1) {
         $3_1 = $7_1;
         $4_1 = $8_1;
         while (1) {
          HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
          $3_1 = $3_1 + 4 | 0;
          $4_1 = $4_1 + 4 | 0;
          $5_1 = $5_1 + -1 | 0;
          if ($5_1) {
           continue
          }
          break;
         };
         break label$56;
        }
        if (!$8_1) {
         break label$55
        }
       }
       if (HEAPU8[$10 + 16 | 0]) {
        $80($8_1)
       }
       HEAP32[$25 >> 2] = 0;
       $5_1 = HEAP32[$15_1 >> 2];
      }
      HEAP32[$25 >> 2] = $7_1;
      HEAP32[$23_1 >> 2] = $16_1;
      HEAP8[$10 + 16 | 0] = 1;
     }
     HEAP32[HEAP32[$10 + 12 >> 2] + ($5_1 << 2) >> 2] = $17_1;
     HEAP32[$15_1 >> 2] = HEAP32[$15_1 >> 2] + 1;
     if (($6_1 | 0) <= 1) {
      $4_1 = HEAP32[$2_1 + 164 >> 2];
      $3_1 = $4_1 + ($17_1 << 4) | 0;
      $11 = HEAPF32[$3_1 + 4 >> 2];
      $4_1 = $4_1 + (HEAP32[$9_1 + 8 >> 2] << 4) | 0;
      $13_1 = HEAPF32[$4_1 + 4 >> 2];
      $14 = HEAPF32[$3_1 >> 2];
      $18_1 = HEAPF32[$4_1 >> 2];
      $20 = HEAPF32[$3_1 + 8 >> 2];
      $27_1 = HEAPF32[$4_1 + 8 >> 2];
      $3_1 = ($2_1 + 48 | 0) + ($6_1 << 4) | 0;
      HEAP32[$3_1 + 12 >> 2] = 0;
      $14 = Math_fround($18_1 - $14);
      $13_1 = Math_fround($13_1 - $11);
      $18_1 = Math_fround($27_1 - $20);
      $11 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($14 * $14) + Math_fround($13_1 * $13_1)) + Math_fround($18_1 * $18_1)))));
      HEAPF32[$3_1 + 8 >> 2] = $18_1 * $11;
      HEAPF32[$3_1 + 4 >> 2] = $13_1 * $11;
      HEAPF32[$3_1 >> 2] = $14 * $11;
      $6_1 = $6_1 + 1 | 0;
     }
     $3_1 = Math_imul(HEAP32[$9_1 + 4 >> 2], 12) + $9_1 | 0;
     $9_1 = Math_imul(HEAP32[$3_1 >> 2], 12) + $3_1 | 0;
     if (($21 | 0) != ($9_1 | 0)) {
      continue
     }
     break;
    };
    label$61 : {
     if (($6_1 | 0) == 2) {
      $3_1 = ($12_1 << 4) + $19_1 | 0;
      HEAP32[$3_1 + 12 >> 2] = 0;
      $14 = HEAPF32[$2_1 + 68 >> 2];
      $13_1 = HEAPF32[$2_1 + 48 >> 2];
      $18_1 = HEAPF32[$2_1 + 52 >> 2];
      $20 = HEAPF32[$2_1 + 64 >> 2];
      $11 = Math_fround(Math_fround($14 * $13_1) - Math_fround($18_1 * $20));
      $29_1 = $11;
      $30 = Math_fround($11 * $11);
      $11 = $18_1;
      $18_1 = HEAPF32[$2_1 + 72 >> 2];
      $27_1 = HEAPF32[$2_1 + 56 >> 2];
      $11 = Math_fround(Math_fround($11 * $18_1) - Math_fround($27_1 * $14));
      $14 = Math_fround(Math_fround($27_1 * $20) - Math_fround($18_1 * $13_1));
      $13_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($30 + Math_fround(Math_fround($11 * $11) + Math_fround($14 * $14))))));
      HEAPF32[$3_1 + 8 >> 2] = $29_1 * $13_1;
      HEAPF32[$3_1 + 4 >> 2] = $14 * $13_1;
      $11 = Math_fround($11 * $13_1);
      HEAPF32[$3_1 >> 2] = $11;
      $4_1 = HEAP32[$2_1 + 140 >> 2];
      $6_1 = $22_1 + $4_1 | 0;
      HEAPF32[$6_1 + 20 >> 2] = $11;
      HEAP32[$6_1 + 24 >> 2] = HEAP32[$3_1 + 4 >> 2];
      HEAP32[$6_1 + 28 >> 2] = HEAP32[$3_1 + 8 >> 2];
      HEAP32[$6_1 + 32 >> 2] = 1900671690;
      break label$61;
     }
     $3_1 = ($12_1 << 4) + $19_1 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $4_1 = HEAP32[$2_1 + 140 >> 2];
    }
    $4_1 = $4_1 + $22_1 | 0;
    $7_1 = HEAP32[$4_1 + 4 >> 2];
    label$63 : {
     if (($7_1 | 0) < 1) {
      $11 = Math_fround(1000000015047466219876688.0e6);
      break label$63;
     }
     $3_1 = HEAP32[$4_1 + 12 >> 2];
     $6_1 = ($12_1 << 4) + $19_1 | 0;
     $14 = HEAPF32[$6_1 + 8 >> 2];
     $13_1 = HEAPF32[$6_1 + 4 >> 2];
     $18_1 = HEAPF32[$6_1 >> 2];
     $8_1 = HEAP32[HEAP32[$0 + 56 >> 2] + 16 >> 2];
     $11 = Math_fround(1000000015047466219876688.0e6);
     $5_1 = 0;
     while (1) {
      $6_1 = $8_1 + (HEAP32[$3_1 >> 2] << 4) | 0;
      $20 = Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 >> 2] * $18_1) + Math_fround(HEAPF32[$6_1 + 4 >> 2] * $13_1)) + Math_fround(HEAPF32[$6_1 + 8 >> 2] * $14));
      $11 = $11 > $20 ? $20 : $11;
      $3_1 = $3_1 + 4 | 0;
      $5_1 = $5_1 + 1 | 0;
      if (($5_1 | 0) < ($7_1 | 0)) {
       continue
      }
      break;
     };
    }
    HEAPF32[$4_1 + 32 >> 2] = -$11;
    $12_1 = $12_1 + 1 | 0;
    if (($1_1 | 0) != ($12_1 | 0)) {
     continue
    }
    break;
   };
  }
  label$66 : {
   if (HEAP32[$2_1 + 132 >> 2] >= 1) {
    $10 = 0;
    $12_1 = 0;
    $9_1 = 0;
    while (1) {
     label$69 : {
      if (($9_1 | 0) != ($10 | 0)) {
       break label$69
      }
      $9_1 = $10 ? $10 << 1 : 1;
      if (($10 | 0) >= ($9_1 | 0)) {
       $9_1 = $10;
       break label$69;
      }
      if ($9_1) {
       $8_1 = $79($9_1 << 2)
      } else {
       $8_1 = 0
      }
      label$73 : {
       label$74 : {
        if ($10) {
         $3_1 = $8_1;
         $4_1 = $12_1;
         $5_1 = $10;
         while (1) {
          HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
          $3_1 = $3_1 + 4 | 0;
          $4_1 = $4_1 + 4 | 0;
          $5_1 = $5_1 + -1 | 0;
          if ($5_1) {
           continue
          }
          break;
         };
         break label$74;
        }
        if ($12_1) {
         break label$74
        }
        $9_1 = 1;
        break label$73;
       }
       $80($12_1);
      }
      $12_1 = $8_1;
     }
     HEAP32[($10 << 2) + $12_1 >> 2] = $10;
     $10 = $10 + 1 | 0;
     if (($10 | 0) < HEAP32[$2_1 + 132 >> 2]) {
      continue
     }
     break;
    };
    $22_1 = $2_1 + 68 | 0;
    $25 = $2_1 + 40 | 0;
    while (1) {
     $5_1 = $10 + -1 | 0;
     $1_1 = HEAP32[($5_1 << 2) + $12_1 >> 2];
     $6_1 = $79(4);
     HEAP32[$6_1 >> 2] = $1_1;
     label$78 : {
      label$79 : {
       if (($10 | 0) < 2) {
        $15_1 = 1;
        $1_1 = $6_1;
        $10 = $5_1;
        break label$79;
       }
       $4_1 = HEAP32[$2_1 + 140 >> 2];
       $1_1 = $4_1 + Math_imul($1_1, 36) | 0;
       $11 = HEAPF32[$1_1 + 20 >> 2];
       $14 = HEAPF32[$1_1 + 28 >> 2];
       $13_1 = HEAPF32[$1_1 + 24 >> 2];
       $8_1 = $10 + -2 | 0;
       $3_1 = 1;
       $10 = $5_1;
       $15_1 = 1;
       while (1) {
        $9_1 = HEAP32[($8_1 << 2) + $12_1 >> 2];
        $1_1 = Math_imul($9_1, 36) + $4_1 | 0;
        label$82 : {
         if (!(Math_fround(Math_fround(Math_fround($11 * HEAPF32[$1_1 + 20 >> 2]) + Math_fround($13_1 * HEAPF32[$1_1 + 24 >> 2])) + Math_fround($14 * HEAPF32[$1_1 + 28 >> 2])) > Math_fround(.9990000128746033))) {
          $7_1 = $3_1;
          $1_1 = $6_1;
          break label$82;
         }
         label$84 : {
          label$85 : {
           if (($3_1 | 0) != ($15_1 | 0)) {
            break label$85
           }
           $7_1 = $3_1 ? $3_1 << 1 : 1;
           if (($3_1 | 0) >= ($7_1 | 0)) {
            break label$85
           }
           if ($7_1) {
            $1_1 = $79($7_1 << 2)
           } else {
            $1_1 = 0
           }
           label$88 : {
            if (($3_1 | 0) >= 1) {
             $4_1 = $1_1;
             $5_1 = $6_1;
             while (1) {
              HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
              $4_1 = $4_1 + 4 | 0;
              $5_1 = $5_1 + 4 | 0;
              $3_1 = $3_1 + -1 | 0;
              if ($3_1) {
               continue
              }
              break;
             };
             break label$88;
            }
            if (!$6_1) {
             break label$84
            }
           }
           $80($6_1);
           break label$84;
          }
          $7_1 = $3_1;
          $1_1 = $6_1;
         }
         HEAP32[($15_1 << 2) + $1_1 >> 2] = $9_1;
         $15_1 = $15_1 + 1 | 0;
         if (($10 | 0) < 1) {
          break label$82
         }
         $4_1 = 0;
         $3_1 = $12_1;
         while (1) {
          if (HEAP32[$3_1 >> 2] != ($9_1 | 0)) {
           $3_1 = $3_1 + 4 | 0;
           $4_1 = $4_1 + 1 | 0;
           if (($10 | 0) != ($4_1 | 0)) {
            continue
           }
           break label$82;
          }
          break;
         };
         if (($10 | 0) <= ($4_1 | 0)) {
          break label$82
         }
         $6_1 = $3_1;
         $10 = $10 + -1 | 0;
         $3_1 = ($10 << 2) + $12_1 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
         HEAP32[$3_1 >> 2] = $9_1;
        }
        if (($8_1 | 0) >= 1) {
         $8_1 = $8_1 + -1 | 0;
         $4_1 = HEAP32[$2_1 + 140 >> 2];
         $6_1 = $1_1;
         $3_1 = $7_1;
         continue;
        }
        break;
       };
       label$94 : {
        if (($15_1 | 0) <= 1) {
         break label$94
        }
        $5_1 = 0;
        HEAP32[$2_1 + 116 >> 2] = 0;
        HEAP8[$2_1 + 120 | 0] = 1;
        HEAP32[$2_1 + 108 >> 2] = 0;
        HEAP32[$2_1 + 112 >> 2] = 0;
        HEAP32[$25 >> 2] = 0;
        HEAP32[$25 + 4 >> 2] = 0;
        HEAP32[$2_1 + 32 >> 2] = 0;
        HEAP32[$2_1 + 36 >> 2] = 0;
        $11 = Math_fround(0.0);
        $8_1 = 0;
        $14 = Math_fround(0.0);
        $13_1 = Math_fround(0.0);
        $16_1 = 0;
        while (1) {
         $3_1 = HEAP32[$2_1 + 140 >> 2] + Math_imul(HEAP32[($16_1 << 2) + $1_1 >> 2], 36) | 0;
         $18_1 = HEAPF32[$3_1 + 24 >> 2];
         $20 = HEAPF32[$3_1 + 28 >> 2];
         HEAPF32[$2_1 + 32 >> 2] = HEAPF32[$3_1 + 20 >> 2] + $13_1;
         HEAPF32[$2_1 + 40 >> 2] = $20 + $11;
         HEAPF32[$2_1 + 36 >> 2] = $18_1 + $14;
         $6_1 = HEAP32[$3_1 + 4 >> 2];
         if (($6_1 | 0) >= 1) {
          $31_1 = $3_1 + 4 | 0;
          $32 = $3_1 + 12 | 0;
          $7_1 = 0;
          while (1) {
           $21 = HEAP32[HEAP32[$32 >> 2] + ($7_1 << 2) >> 2];
           $3_1 = HEAP32[HEAP32[$0 + 56 >> 2] + 16 >> 2] + ($21 << 4) | 0;
           $17_1 = $3_1 + 8 | 0;
           $23_1 = HEAP32[$17_1 + 4 >> 2];
           $9_1 = $2_1 + 16 | 0;
           $4_1 = $9_1;
           HEAP32[$4_1 >> 2] = HEAP32[$17_1 >> 2];
           HEAP32[$4_1 + 4 >> 2] = $23_1;
           $4_1 = HEAP32[$3_1 + 4 >> 2];
           HEAP32[$2_1 + 8 >> 2] = HEAP32[$3_1 >> 2];
           HEAP32[$2_1 + 12 >> 2] = $4_1;
           label$98 : {
            if (($8_1 | 0) >= 1) {
             $3_1 = HEAP32[$2_1 + 116 >> 2] + 20 | 0;
             $4_1 = 0;
             while (1) {
              if (($21 | 0) == HEAP32[$3_1 >> 2]) {
               break label$98
              }
              $3_1 = $3_1 + 24 | 0;
              $4_1 = $4_1 + 1 | 0;
              if (($4_1 | 0) < ($5_1 | 0)) {
               continue
              }
              break;
             };
             $8_1 = $5_1;
            }
            $4_1 = HEAP32[$9_1 + 4 >> 2];
            $23_1 = $2_1 + 56 | 0;
            $3_1 = $23_1;
            HEAP32[$3_1 >> 2] = HEAP32[$9_1 >> 2];
            HEAP32[$3_1 + 4 >> 2] = $4_1;
            $3_1 = HEAP32[$2_1 + 12 >> 2];
            HEAP32[$2_1 + 48 >> 2] = HEAP32[$2_1 + 8 >> 2];
            HEAP32[$2_1 + 52 >> 2] = $3_1;
            label$101 : {
             if (($8_1 | 0) != HEAP32[$2_1 + 112 >> 2]) {
              $5_1 = $8_1;
              break label$101;
             }
             $17_1 = $8_1 ? $8_1 << 1 : 1;
             if (($8_1 | 0) >= ($17_1 | 0)) {
              $5_1 = $8_1;
              break label$101;
             }
             label$104 : {
              if (!$17_1) {
               $6_1 = 0;
               break label$104;
              }
              $6_1 = $79(Math_imul($17_1, 24));
              $5_1 = HEAP32[$2_1 + 108 >> 2];
              $8_1 = $5_1;
             }
             $9_1 = HEAP32[$2_1 + 116 >> 2];
             label$106 : {
              label$107 : {
               if (($8_1 | 0) >= 1) {
                $3_1 = $6_1;
                $4_1 = $9_1;
                while (1) {
                 $24_1 = HEAP32[$4_1 + 4 >> 2];
                 HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
                 HEAP32[$3_1 + 4 >> 2] = $24_1;
                 $26_1 = $4_1 + 16 | 0;
                 $28_1 = HEAP32[$26_1 + 4 >> 2];
                 $24_1 = $3_1 + 16 | 0;
                 HEAP32[$24_1 >> 2] = HEAP32[$26_1 >> 2];
                 HEAP32[$24_1 + 4 >> 2] = $28_1;
                 $26_1 = $4_1 + 8 | 0;
                 $28_1 = HEAP32[$26_1 + 4 >> 2];
                 $24_1 = $3_1 + 8 | 0;
                 HEAP32[$24_1 >> 2] = HEAP32[$26_1 >> 2];
                 HEAP32[$24_1 + 4 >> 2] = $28_1;
                 $3_1 = $3_1 + 24 | 0;
                 $4_1 = $4_1 + 24 | 0;
                 $8_1 = $8_1 + -1 | 0;
                 if ($8_1) {
                  continue
                 }
                 break;
                };
                break label$107;
               }
               if (!$9_1) {
                break label$106
               }
              }
              if (HEAPU8[$2_1 + 120 | 0]) {
               $80($9_1);
               $5_1 = HEAP32[$2_1 + 108 >> 2];
              }
              HEAP32[$2_1 + 116 >> 2] = 0;
             }
             HEAP32[$2_1 + 116 >> 2] = $6_1;
             HEAP8[$2_1 + 120 | 0] = 1;
             HEAP32[$2_1 + 112 >> 2] = $17_1;
            }
            $4_1 = HEAP32[$2_1 + 52 >> 2];
            $3_1 = HEAP32[$2_1 + 116 >> 2] + Math_imul($5_1, 24) | 0;
            HEAP32[$3_1 >> 2] = HEAP32[$2_1 + 48 >> 2];
            HEAP32[$3_1 + 4 >> 2] = $4_1;
            HEAP32[$3_1 + 20 >> 2] = $21;
            HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 - -64 >> 2];
            $4_1 = HEAP32[$23_1 + 4 >> 2];
            $3_1 = $3_1 + 8 | 0;
            HEAP32[$3_1 >> 2] = HEAP32[$23_1 >> 2];
            HEAP32[$3_1 + 4 >> 2] = $4_1;
            $5_1 = HEAP32[$2_1 + 108 >> 2] + 1 | 0;
            HEAP32[$2_1 + 108 >> 2] = $5_1;
            $6_1 = HEAP32[$31_1 >> 2];
           }
           $8_1 = $5_1;
           $7_1 = $7_1 + 1 | 0;
           if (($7_1 | 0) < ($6_1 | 0)) {
            continue
           }
           break;
          };
         }
         $11 = HEAPF32[$2_1 + 40 >> 2];
         $14 = HEAPF32[$2_1 + 36 >> 2];
         $13_1 = HEAPF32[$2_1 + 32 >> 2];
         $16_1 = $16_1 + 1 | 0;
         if (($16_1 | 0) != ($15_1 | 0)) {
          continue
         }
         break;
        };
        HEAP32[$2_1 + 52 >> 2] = 0;
        HEAP32[$2_1 + 56 >> 2] = 0;
        $3_1 = HEAP32[$2_1 + 140 >> 2] + Math_imul(HEAP32[$1_1 >> 2], 36) | 0;
        HEAP32[$2_1 + 68 >> 2] = HEAP32[$3_1 + 20 >> 2];
        HEAP32[$2_1 + 72 >> 2] = HEAP32[$3_1 + 24 >> 2];
        HEAP32[$2_1 + 76 >> 2] = HEAP32[$3_1 + 28 >> 2];
        HEAP32[$2_1 + 60 >> 2] = 0;
        HEAP8[$2_1 + 64 | 0] = 1;
        HEAP32[$2_1 + 80 >> 2] = HEAP32[$3_1 + 32 >> 2];
        $18_1 = $11;
        $11 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($14 * $14)) + Math_fround($11 * $11)))));
        HEAPF32[$2_1 + 40 >> 2] = $18_1 * $11;
        HEAPF32[$2_1 + 36 >> 2] = $14 * $11;
        HEAPF32[$2_1 + 32 >> 2] = $13_1 * $11;
        HEAP32[$2_1 + 20 >> 2] = 0;
        HEAP8[$2_1 + 24 | 0] = 1;
        HEAP32[$2_1 + 12 >> 2] = 0;
        HEAP32[$2_1 + 16 >> 2] = 0;
        $183($2_1 + 104 | 0, $2_1 + 8 | 0, $2_1 + 32 | 0);
        label$111 : {
         if (HEAP32[$2_1 + 12 >> 2] <= 0) {
          $9_1 = HEAP32[$2_1 + 108 >> 2];
          break label$111;
         }
         $7_1 = 0;
         $5_1 = HEAP32[$2_1 + 52 >> 2];
         while (1) {
          $16_1 = Math_imul($7_1, 24);
          $17_1 = ($16_1 + HEAP32[$2_1 + 20 >> 2] | 0) + 20 | 0;
          label$114 : {
           if (HEAP32[$2_1 + 56 >> 2] != ($5_1 | 0)) {
            break label$114
           }
           $9_1 = $5_1 ? $5_1 << 1 : 1;
           if (($5_1 | 0) >= ($9_1 | 0)) {
            break label$114
           }
           label$115 : {
            if (!$9_1) {
             $6_1 = 0;
             break label$115;
            }
            $6_1 = $79($9_1 << 2);
            $5_1 = HEAP32[$2_1 + 52 >> 2];
           }
           $8_1 = HEAP32[$2_1 + 60 >> 2];
           label$117 : {
            label$118 : {
             if (($5_1 | 0) >= 1) {
              $3_1 = $6_1;
              $4_1 = $8_1;
              while (1) {
               HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
               $3_1 = $3_1 + 4 | 0;
               $4_1 = $4_1 + 4 | 0;
               $5_1 = $5_1 + -1 | 0;
               if ($5_1) {
                continue
               }
               break;
              };
              break label$118;
             }
             if (!$8_1) {
              break label$117
             }
            }
            if (HEAPU8[$2_1 + 64 | 0]) {
             $80($8_1)
            }
            HEAP32[$2_1 + 60 >> 2] = 0;
            $5_1 = HEAP32[$2_1 + 52 >> 2];
           }
           HEAP32[$2_1 + 60 >> 2] = $6_1;
           HEAP8[$2_1 + 64 | 0] = 1;
           HEAP32[$2_1 + 56 >> 2] = $9_1;
          }
          HEAP32[HEAP32[$2_1 + 60 >> 2] + ($5_1 << 2) >> 2] = HEAP32[$17_1 >> 2];
          $5_1 = HEAP32[$2_1 + 52 >> 2] + 1 | 0;
          HEAP32[$2_1 + 52 >> 2] = $5_1;
          $9_1 = HEAP32[$2_1 + 108 >> 2];
          label$122 : {
           if (($9_1 | 0) < 1) {
            break label$122
           }
           $3_1 = HEAP32[$2_1 + 116 >> 2] + 20 | 0;
           $6_1 = HEAP32[($16_1 + HEAP32[$2_1 + 20 >> 2] | 0) + 20 >> 2];
           $4_1 = 0;
           while (1) {
            if (HEAP32[$3_1 >> 2] != ($6_1 | 0)) {
             $3_1 = $3_1 + 24 | 0;
             $4_1 = $4_1 + 1 | 0;
             if (($4_1 | 0) < ($9_1 | 0)) {
              continue
             }
             break label$122;
            }
            break;
           };
           HEAP32[$3_1 >> 2] = -1;
          }
          $7_1 = $7_1 + 1 | 0;
          if (($7_1 | 0) < HEAP32[$2_1 + 12 >> 2]) {
           continue
          }
          break;
         };
        }
        label$125 : {
         if (($9_1 | 0) < 1) {
          break label$125
         }
         $8_1 = HEAP32[$2_1 + 132 >> 2];
         if (($8_1 | 0) < 1) {
          break label$125
         }
         $16_1 = HEAP32[$2_1 + 140 >> 2];
         $21 = HEAP32[$2_1 + 116 >> 2];
         $6_1 = 0;
         while (1) {
          label$127 : {
           $17_1 = HEAP32[($21 + Math_imul($6_1, 24) | 0) + 20 >> 2];
           if (($17_1 | 0) == -1) {
            break label$127
           }
           label$128 : {
            if (($15_1 | 0) <= 0) {
             $7_1 = 0;
             while (1) {
              $3_1 = $16_1 + Math_imul($7_1, 36) | 0;
              $5_1 = HEAP32[$3_1 + 4 >> 2];
              if (($5_1 | 0) > 0) {
               $3_1 = HEAP32[$3_1 + 12 >> 2];
               $4_1 = 0;
               while (1) {
                if (($17_1 | 0) == HEAP32[$3_1 >> 2]) {
                 break label$128
                }
                $3_1 = $3_1 + 4 | 0;
                $4_1 = $4_1 + 1 | 0;
                if (($4_1 | 0) < ($5_1 | 0)) {
                 continue
                }
                break;
               };
              }
              $7_1 = $7_1 + 1 | 0;
              if (($7_1 | 0) != ($8_1 | 0)) {
               continue
              }
              break;
             };
             break label$127;
            }
            $5_1 = 0;
            while (1) {
             $3_1 = $1_1;
             $4_1 = $15_1;
             label$134 : {
              while (1) {
               if (HEAP32[$3_1 >> 2] == ($5_1 | 0)) {
                break label$134
               }
               $3_1 = $3_1 + 4 | 0;
               $4_1 = $4_1 + -1 | 0;
               if ($4_1) {
                continue
               }
               break;
              };
              $3_1 = $16_1 + Math_imul($5_1, 36) | 0;
              $7_1 = HEAP32[$3_1 + 4 >> 2];
              if (($7_1 | 0) < 1) {
               break label$134
              }
              $3_1 = HEAP32[$3_1 + 12 >> 2];
              $4_1 = 0;
              while (1) {
               if (($17_1 | 0) == HEAP32[$3_1 >> 2]) {
                break label$128
               }
               $3_1 = $3_1 + 4 | 0;
               $4_1 = $4_1 + 1 | 0;
               if (($4_1 | 0) < ($7_1 | 0)) {
                continue
               }
               break;
              };
             }
             $5_1 = $5_1 + 1 | 0;
             if (($5_1 | 0) != ($8_1 | 0)) {
              continue
             }
             break;
            };
            break label$127;
           }
           $3_1 = HEAP32[$2_1 + 20 >> 2];
           if ($3_1) {
            if (HEAPU8[$2_1 + 24 | 0]) {
             $80($3_1)
            }
            HEAP32[$2_1 + 20 >> 2] = 0;
           }
           $3_1 = HEAP32[$2_1 + 60 >> 2];
           if ($3_1) {
            if (HEAPU8[$2_1 + 64 | 0]) {
             $80($3_1)
            }
            HEAP32[$2_1 + 60 >> 2] = 0;
           }
           $3_1 = HEAP32[$2_1 + 116 >> 2];
           if (!$3_1) {
            break label$94
           }
           if (HEAPU8[$2_1 + 120 | 0]) {
            $80($3_1)
           }
           HEAP32[$2_1 + 116 >> 2] = 0;
           break label$94;
          }
          $6_1 = $6_1 + 1 | 0;
          if (($6_1 | 0) < ($9_1 | 0)) {
           continue
          }
          break;
         };
        }
        $184(HEAP32[$0 + 56 >> 2] + 24 | 0, $2_1 + 48 | 0);
        $3_1 = HEAP32[$2_1 + 20 >> 2];
        if ($3_1) {
         if (HEAPU8[$2_1 + 24 | 0]) {
          $80($3_1)
         }
         HEAP32[$2_1 + 20 >> 2] = 0;
        }
        $3_1 = HEAP32[$2_1 + 60 >> 2];
        if ($3_1) {
         if (HEAPU8[$2_1 + 64 | 0]) {
          $80($3_1)
         }
         HEAP32[$2_1 + 60 >> 2] = 0;
        }
        $3_1 = HEAP32[$2_1 + 116 >> 2];
        if (!$3_1) {
         break label$78
        }
        if (HEAPU8[$2_1 + 120 | 0]) {
         $80($3_1)
        }
        HEAP32[$2_1 + 116 >> 2] = 0;
        break label$78;
       }
       if (($15_1 | 0) < 1) {
        break label$78
       }
      }
      $7_1 = 0;
      while (1) {
       $3_1 = HEAP32[($7_1 << 2) + $1_1 >> 2];
       HEAP32[$2_1 + 52 >> 2] = 0;
       HEAP32[$2_1 + 56 >> 2] = 0;
       HEAP32[$2_1 + 60 >> 2] = 0;
       $16_1 = HEAP32[$2_1 + 140 >> 2] + Math_imul($3_1, 36) | 0;
       $5_1 = HEAP32[$16_1 + 4 >> 2];
       HEAP8[$2_1 + 64 | 0] = 1;
       label$148 : {
        if (($5_1 | 0) >= 1) {
         $17_1 = $5_1 << 2;
         $6_1 = $79($17_1);
         $8_1 = HEAP32[$2_1 + 60 >> 2];
         $9_1 = HEAP32[$2_1 + 52 >> 2];
         label$150 : {
          label$151 : {
           if (($9_1 | 0) >= 1) {
            $3_1 = $6_1;
            $4_1 = $8_1;
            while (1) {
             HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
             $3_1 = $3_1 + 4 | 0;
             $4_1 = $4_1 + 4 | 0;
             $9_1 = $9_1 + -1 | 0;
             if ($9_1) {
              continue
             }
             break;
            };
            break label$151;
           }
           if (!$8_1) {
            break label$150
           }
          }
          if (!HEAPU8[$2_1 + 64 | 0]) {
           break label$150
          }
          $80($8_1);
         }
         HEAP32[$2_1 + 60 >> 2] = $6_1;
         HEAP8[$2_1 + 64 | 0] = 1;
         HEAP32[$2_1 + 56 >> 2] = $5_1;
         $17($6_1, 0, $17_1);
         HEAP32[$2_1 + 52 >> 2] = $5_1;
         $3_1 = HEAP32[$16_1 + 12 >> 2];
         $4_1 = HEAP32[$2_1 + 60 >> 2];
         while (1) {
          HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
          $4_1 = $4_1 + 4 | 0;
          $3_1 = $3_1 + 4 | 0;
          $5_1 = $5_1 + -1 | 0;
          if ($5_1) {
           continue
          }
          break;
         };
         break label$148;
        }
        HEAP32[$2_1 + 52 >> 2] = $5_1;
       }
       $3_1 = HEAP32[$16_1 + 24 >> 2];
       HEAP32[$22_1 >> 2] = HEAP32[$16_1 + 20 >> 2];
       HEAP32[$22_1 + 4 >> 2] = $3_1;
       $4_1 = $16_1 + 28 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $22_1 + 8 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $184(HEAP32[$0 + 56 >> 2] + 24 | 0, $2_1 + 48 | 0);
       $3_1 = HEAP32[$2_1 + 60 >> 2];
       if ($3_1) {
        if (HEAPU8[$2_1 + 64 | 0]) {
         $80($3_1)
        }
        HEAP32[$2_1 + 60 >> 2] = 0;
       }
       $7_1 = $7_1 + 1 | 0;
       if (($15_1 | 0) != ($7_1 | 0)) {
        continue
       }
       break;
      };
     }
     if ($1_1) {
      $80($1_1)
     }
     if ($10) {
      continue
     }
     break;
    };
    $154(HEAP32[$0 + 56 >> 2]);
    if (!$12_1) {
     break label$66
    }
    $80($12_1);
    break label$66;
   }
   $154(HEAP32[$0 + 56 >> 2]);
  }
  $9_1 = HEAP32[$2_1 + 132 >> 2];
  if (($9_1 | 0) >= 1) {
   $4_1 = 8;
   while (1) {
    $0 = HEAP32[$2_1 + 140 >> 2] + $4_1 | 0;
    $3_1 = $0 + -4 | 0;
    $1_1 = $0 + 4 | 0;
    $6_1 = HEAP32[$1_1 >> 2];
    if ($6_1) {
     if (HEAPU8[$0 + 8 | 0]) {
      $80($6_1)
     }
     HEAP32[$1_1 >> 2] = 0;
    }
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$0 >> 2] = 0;
    HEAP8[$0 + 8 | 0] = 1;
    $4_1 = $4_1 + 36 | 0;
    $9_1 = $9_1 + -1 | 0;
    if ($9_1) {
     continue
    }
    break;
   };
  }
  $0 = HEAP32[$2_1 + 140 >> 2];
  if ($0) {
   if (HEAPU8[$2_1 + 144 | 0]) {
    $80($0)
   }
   HEAP32[$2_1 + 140 >> 2] = 0;
  }
  if ($19_1) {
   $80($19_1)
  }
  $0 = HEAP32[$2_1 + 204 >> 2];
  if ($0) {
   if (HEAPU8[$2_1 + 208 | 0]) {
    $80($0)
   }
   HEAP32[$2_1 + 204 >> 2] = 0;
  }
  HEAP32[$2_1 + 204 >> 2] = 0;
  HEAP8[$2_1 + 208 | 0] = 1;
  HEAP32[$2_1 + 196 >> 2] = 0;
  HEAP32[$2_1 + 200 >> 2] = 0;
  $0 = HEAP32[$2_1 + 184 >> 2];
  if ($0) {
   if (HEAPU8[$2_1 + 188 | 0]) {
    $80($0)
   }
   HEAP32[$2_1 + 184 >> 2] = 0;
  }
  HEAP32[$2_1 + 184 >> 2] = 0;
  HEAP8[$2_1 + 188 | 0] = 1;
  HEAP32[$2_1 + 176 >> 2] = 0;
  HEAP32[$2_1 + 180 >> 2] = 0;
  $0 = HEAP32[$2_1 + 164 >> 2];
  if ($0) {
   if (HEAPU8[$2_1 + 168 | 0]) {
    $80($0)
   }
   HEAP32[$2_1 + 164 >> 2] = 0;
  }
  $0 = HEAP32[$2_1 + 228 >> 2];
  if ($0) {
   if (HEAPU8[$2_1 + 232 | 0]) {
    $80($0)
   }
   HEAP32[$2_1 + 228 >> 2] = 0;
  }
  global$0 = $2_1 + 240 | 0;
  return 1;
 }
 
 function $182($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0;
  if (HEAP32[$0 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $10 = $79(Math_imul($1_1, 36))
   } else {
    $10 = 0
   }
   $14 = HEAP32[$0 + 4 >> 2];
   label$4 : {
    if (($14 | 0) < 1) {
     break label$4
    }
    while (1) {
     $2_1 = Math_imul($11, 36);
     $4_1 = $2_1 + $10 | 0;
     HEAP32[$4_1 + 4 >> 2] = 0;
     HEAP32[$4_1 + 8 >> 2] = 0;
     HEAP8[$4_1 + 16 | 0] = 1;
     HEAP32[$4_1 + 12 >> 2] = 0;
     $12_1 = $4_1 + 4 | 0;
     $8_1 = $2_1 + HEAP32[$0 + 12 >> 2] | 0;
     $7_1 = HEAP32[$8_1 + 4 >> 2];
     label$6 : {
      if (($7_1 | 0) >= 1) {
       $17_1 = $4_1 + 8 | 0;
       $15_1 = $4_1 + 16 | 0;
       $16_1 = $7_1 << 2;
       $5_1 = $79($16_1);
       $13_1 = $4_1 + 12 | 0;
       $9_1 = HEAP32[$13_1 >> 2];
       $6_1 = HEAP32[$12_1 >> 2];
       label$8 : {
        label$9 : {
         if (($6_1 | 0) >= 1) {
          $3_1 = $5_1;
          $2_1 = $9_1;
          while (1) {
           HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
           $3_1 = $3_1 + 4 | 0;
           $2_1 = $2_1 + 4 | 0;
           $6_1 = $6_1 + -1 | 0;
           if ($6_1) {
            continue
           }
           break;
          };
          break label$9;
         }
         if (!$9_1) {
          break label$8
         }
        }
        if (!HEAPU8[$15_1 | 0]) {
         break label$8
        }
        $80($9_1);
       }
       HEAP32[$13_1 >> 2] = $5_1;
       HEAP8[$15_1 | 0] = 1;
       HEAP32[$17_1 >> 2] = $7_1;
       $17($5_1, 0, $16_1);
       HEAP32[$12_1 >> 2] = $7_1;
       $3_1 = HEAP32[$8_1 + 12 >> 2];
       $2_1 = HEAP32[$13_1 >> 2];
       while (1) {
        HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
        $2_1 = $2_1 + 4 | 0;
        $3_1 = $3_1 + 4 | 0;
        $7_1 = $7_1 + -1 | 0;
        if ($7_1) {
         continue
        }
        break;
       };
       break label$6;
      }
      HEAP32[$12_1 >> 2] = $7_1;
     }
     $2_1 = HEAP32[$8_1 + 24 >> 2];
     HEAP32[$4_1 + 20 >> 2] = HEAP32[$8_1 + 20 >> 2];
     HEAP32[$4_1 + 24 >> 2] = $2_1;
     $3_1 = $8_1 + 28 | 0;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     $2_1 = $4_1 + 28 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $5_1;
     $11 = $11 + 1 | 0;
     if (($11 | 0) != ($14 | 0)) {
      continue
     }
     break;
    };
    $6_1 = HEAP32[$0 + 4 >> 2];
    if (($6_1 | 0) < 1) {
     break label$4
    }
    $2_1 = 8;
    while (1) {
     $3_1 = HEAP32[$0 + 12 >> 2] + $2_1 | 0;
     $9_1 = $3_1 + -4 | 0;
     $5_1 = $3_1 + 4 | 0;
     $4_1 = HEAP32[$5_1 >> 2];
     if ($4_1) {
      if (HEAPU8[$3_1 + 8 | 0]) {
       $80($4_1)
      }
      HEAP32[$5_1 >> 2] = 0;
     }
     HEAP32[$9_1 >> 2] = 0;
     HEAP32[$5_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP8[$3_1 + 8 | 0] = 1;
     $2_1 = $2_1 + 36 | 0;
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue
     }
     break;
    };
   }
   $2_1 = HEAP32[$0 + 12 >> 2];
   if ($2_1) {
    if (HEAPU8[$0 + 16 | 0]) {
     $80($2_1)
    }
    HEAP32[$0 + 12 >> 2] = 0;
   }
   HEAP32[$0 + 12 >> 2] = $10;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = $1_1;
  }
 }
 
 function $183($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0, $28_1 = Math_fround(0);
  $19_1 = global$0 - 32 | 0;
  global$0 = $19_1;
  $12_1 = HEAPF32[$2_1 + 8 >> 2];
  label$1 : {
   if (!!(Math_fround(Math_abs($12_1)) > Math_fround(.7071067690849304))) {
    $15_1 = HEAPF32[$2_1 + 4 >> 2];
    $16_1 = Math_fround(Math_fround($12_1 * $12_1) + Math_fround($15_1 * $15_1));
    $14 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($16_1)));
    $20 = Math_fround($16_1 * $14);
    $18_1 = HEAPF32[$2_1 >> 2];
    $16_1 = Math_fround($14 * Math_fround(-$12_1));
    $22_1 = Math_fround($18_1 * $16_1);
    $15_1 = Math_fround($15_1 * $14);
    $17_1 = Math_fround($15_1 * Math_fround(-$18_1));
    $18_1 = Math_fround(0.0);
    break label$1;
   }
   $16_1 = HEAPF32[$2_1 >> 2];
   $15_1 = HEAPF32[$2_1 + 4 >> 2];
   $18_1 = Math_fround(Math_fround($16_1 * $16_1) + Math_fround($15_1 * $15_1));
   $14 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($18_1)));
   $22_1 = Math_fround($18_1 * $14);
   $18_1 = Math_fround($14 * Math_fround(-$15_1));
   $17_1 = Math_fround($12_1 * $18_1);
   $16_1 = Math_fround($16_1 * $14);
   $20 = Math_fround($16_1 * Math_fround(-$12_1));
   $15_1 = Math_fround(0.0);
  }
  $5_1 = HEAP32[$0 + 4 >> 2];
  label$3 : {
   if (($5_1 | 0) >= 2) {
    $4_1 = HEAP32[$0 + 12 >> 2];
    while (1) {
     $3_1 = $4_1 + $8_1 | 0;
     $7_1 = $3_1 + 8 | 0;
     if (!!(Math_fround(Math_fround(Math_fround($18_1 * HEAPF32[$3_1 >> 2]) + Math_fround($16_1 * HEAPF32[$3_1 + 4 >> 2])) + Math_fround($15_1 * HEAPF32[$7_1 >> 2])) < Math_fround(Math_fround(Math_fround($18_1 * HEAPF32[$4_1 >> 2]) + Math_fround($16_1 * HEAPF32[$4_1 + 4 >> 2])) + Math_fround($15_1 * HEAPF32[$4_1 + 8 >> 2])))) {
      $9_1 = $4_1 + 16 | 0;
      $11 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $19_1 + 24 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $11;
      $13_1 = $4_1 + 8 | 0;
      $11 = HEAP32[$13_1 + 4 >> 2];
      $10 = $19_1 + 16 | 0;
      HEAP32[$10 >> 2] = HEAP32[$13_1 >> 2];
      HEAP32[$10 + 4 >> 2] = $11;
      $11 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$19_1 + 8 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$19_1 + 12 >> 2] = $11;
      $11 = HEAP32[$3_1 + 4 >> 2];
      HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $11;
      $4_1 = HEAP32[$7_1 + 4 >> 2];
      HEAP32[$13_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$13_1 + 4 >> 2] = $4_1;
      $4_1 = $3_1 + 16 | 0;
      $3_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$9_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$9_1 + 4 >> 2] = $3_1;
      $7_1 = HEAP32[$19_1 + 12 >> 2];
      $4_1 = HEAP32[$0 + 12 >> 2] + $8_1 | 0;
      $3_1 = $4_1;
      HEAP32[$3_1 >> 2] = HEAP32[$19_1 + 8 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $7_1;
      $7_1 = HEAP32[$5_1 + 4 >> 2];
      $3_1 = $3_1 + 16 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $7_1;
      $3_1 = HEAP32[$10 + 4 >> 2];
      $4_1 = $4_1 + 8 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $3_1;
      $4_1 = HEAP32[$0 + 12 >> 2];
      $5_1 = HEAP32[$0 + 4 >> 2];
     }
     $8_1 = $8_1 + 24 | 0;
     $6_1 = $6_1 + 1 | 0;
     if (($6_1 | 0) < ($5_1 | 0)) {
      continue
     }
     break;
    };
    HEAP32[$4_1 + 16 >> 2] = -246811958;
    if (($5_1 | 0) >= 2) {
     $8_1 = $5_1 + -1 | 0;
     $3_1 = $4_1 + 40 | 0;
     $23_1 = HEAPF32[$4_1 + 8 >> 2];
     $24_1 = HEAPF32[$4_1 >> 2];
     $26_1 = HEAPF32[$4_1 + 4 >> 2];
     while (1) {
      $14 = Math_fround(0.0);
      $13_1 = $3_1;
      $12_1 = Math_fround(HEAPF32[$3_1 + -16 >> 2] - $24_1);
      $25 = Math_fround(HEAPF32[$3_1 + -12 >> 2] - $26_1);
      $28_1 = Math_fround(HEAPF32[$3_1 + -8 >> 2] - $23_1);
      $21 = Math_fround(Math_fround(Math_fround($20 * $12_1) + Math_fround($17_1 * $25)) + Math_fround($22_1 * $28_1));
      $12_1 = Math_fround(Math_fround(Math_fround($18_1 * $12_1) + Math_fround($16_1 * $25)) + Math_fround($15_1 * $28_1));
      if (!(Math_fround(Math_fround($21 * $21) + Math_fround($12_1 * $12_1)) < Math_fround(1.1920928955078125e-07))) {
       $14 = Math_fround(Math_abs($21));
       label$10 : {
        if (!!($12_1 >= Math_fround(0.0))) {
         $12_1 = Math_fround(Math_fround($12_1 - $14) / Math_fround($12_1 + $14));
         $14 = Math_fround(.7853981852531433);
         break label$10;
        }
        $12_1 = Math_fround(Math_fround($12_1 + $14) / Math_fround($14 - $12_1));
        $14 = Math_fround(2.356194496154785);
       }
       $12_1 = Math_fround($14 + Math_fround($12_1 * Math_fround(-.7853981852531433)));
       $14 = $21 < Math_fround(0.0) ? Math_fround(-$12_1) : $12_1;
      }
      HEAPF32[$13_1 >> 2] = $14;
      $3_1 = $3_1 + 24 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue
      }
      break;
     };
    }
    $6_1 = $4_1 + 8 | 0;
    $8_1 = HEAP32[$6_1 + 4 >> 2];
    $3_1 = $19_1 + 16 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $8_1;
    $3_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$19_1 + 8 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$19_1 + 12 >> 2] = $3_1;
    $185($0, $19_1 + 8 | 0, 1, $5_1 + -1 | 0);
    $3_1 = HEAP32[$0 + 12 >> 2];
    $6_1 = HEAP32[$1_1 + 4 >> 2];
    label$12 : {
     if (($6_1 | 0) != HEAP32[$1_1 + 8 >> 2]) {
      break label$12
     }
     $8_1 = $6_1 ? $6_1 << 1 : 1;
     if (($6_1 | 0) >= ($8_1 | 0)) {
      break label$12
     }
     label$13 : {
      if (!$8_1) {
       $5_1 = 0;
       break label$13;
      }
      $5_1 = $79(Math_imul($8_1, 24));
      $6_1 = HEAP32[$1_1 + 4 >> 2];
     }
     if (($6_1 | 0) >= 1) {
      $4_1 = 0;
      while (1) {
       $13_1 = HEAP32[$1_1 + 12 >> 2] + $4_1 | 0;
       $9_1 = $13_1;
       $11 = HEAP32[$9_1 + 4 >> 2];
       $7_1 = $4_1 + $5_1 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $11;
       $9_1 = $9_1 + 16 | 0;
       $11 = HEAP32[$9_1 + 4 >> 2];
       $10 = $7_1 + 16 | 0;
       HEAP32[$10 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$10 + 4 >> 2] = $11;
       $9_1 = $13_1 + 8 | 0;
       $10 = HEAP32[$9_1 + 4 >> 2];
       $7_1 = $7_1 + 8 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $10;
       $4_1 = $4_1 + 24 | 0;
       $6_1 = $6_1 + -1 | 0;
       if ($6_1) {
        continue
       }
       break;
      };
     }
     $4_1 = HEAP32[$1_1 + 12 >> 2];
     if ($4_1) {
      if (HEAPU8[$1_1 + 16 | 0]) {
       $80($4_1)
      }
      HEAP32[$1_1 + 12 >> 2] = 0;
     }
     HEAP32[$1_1 + 12 >> 2] = $5_1;
     HEAP8[$1_1 + 16 | 0] = 1;
     HEAP32[$1_1 + 8 >> 2] = $8_1;
     $6_1 = HEAP32[$1_1 + 4 >> 2];
    }
    $4_1 = HEAP32[$1_1 + 12 >> 2] + Math_imul($6_1, 24) | 0;
    $6_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $6_1 = $3_1 + 16 | 0;
    $8_1 = HEAP32[$6_1 + 4 >> 2];
    $5_1 = $4_1 + 16 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $8_1;
    $3_1 = $3_1 + 8 | 0;
    $5_1 = HEAP32[$3_1 + 4 >> 2];
    $4_1 = $4_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $3_1 = HEAP32[$1_1 + 4 >> 2] + 1 | 0;
    HEAP32[$1_1 + 4 >> 2] = $3_1;
    $6_1 = HEAP32[$0 + 12 >> 2] + 24 | 0;
    label$19 : {
     if (HEAP32[$1_1 + 8 >> 2] != ($3_1 | 0)) {
      break label$19
     }
     $8_1 = $3_1 ? $3_1 << 1 : 1;
     if (($3_1 | 0) >= ($8_1 | 0)) {
      break label$19
     }
     label$20 : {
      if (!$8_1) {
       $5_1 = 0;
       break label$20;
      }
      $5_1 = $79(Math_imul($8_1, 24));
      $3_1 = HEAP32[$1_1 + 4 >> 2];
     }
     if (($3_1 | 0) >= 1) {
      $4_1 = 0;
      while (1) {
       $13_1 = HEAP32[$1_1 + 12 >> 2] + $4_1 | 0;
       $9_1 = $13_1;
       $11 = HEAP32[$9_1 + 4 >> 2];
       $7_1 = $4_1 + $5_1 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $11;
       $9_1 = $9_1 + 16 | 0;
       $11 = HEAP32[$9_1 + 4 >> 2];
       $10 = $7_1 + 16 | 0;
       HEAP32[$10 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$10 + 4 >> 2] = $11;
       $9_1 = $13_1 + 8 | 0;
       $10 = HEAP32[$9_1 + 4 >> 2];
       $7_1 = $7_1 + 8 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $10;
       $4_1 = $4_1 + 24 | 0;
       $3_1 = $3_1 + -1 | 0;
       if ($3_1) {
        continue
       }
       break;
      };
     }
     $4_1 = HEAP32[$1_1 + 12 >> 2];
     if ($4_1) {
      if (HEAPU8[$1_1 + 16 | 0]) {
       $80($4_1)
      }
      HEAP32[$1_1 + 12 >> 2] = 0;
     }
     HEAP32[$1_1 + 12 >> 2] = $5_1;
     HEAP8[$1_1 + 16 | 0] = 1;
     HEAP32[$1_1 + 8 >> 2] = $8_1;
     $3_1 = HEAP32[$1_1 + 4 >> 2];
    }
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = HEAP32[$1_1 + 12 >> 2] + Math_imul($3_1, 24) | 0;
    $3_1 = $4_1;
    HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $5_1 = $6_1 + 16 | 0;
    $8_1 = HEAP32[$5_1 + 4 >> 2];
    $3_1 = $3_1 + 16 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $8_1;
    $3_1 = $6_1 + 8 | 0;
    $5_1 = HEAP32[$3_1 + 4 >> 2];
    $4_1 = $4_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $3_1 = HEAP32[$1_1 + 4 >> 2] + 1 | 0;
    HEAP32[$1_1 + 4 >> 2] = $3_1;
    if (HEAP32[$0 + 4 >> 2] == 2) {
     break label$3
    }
    $9_1 = 2;
    while (1) {
     label$27 : {
      if (($3_1 | 0) < 2) {
       break label$27
      }
      $6_1 = Math_imul($3_1, 48);
      $8_1 = $3_1 << 1;
      $10 = HEAP32[$1_1 + 12 >> 2];
      $4_1 = ($10 + Math_imul($3_1, 24) | 0) + -48 | 0;
      $7_1 = HEAP32[$0 + 12 >> 2] + Math_imul($9_1, 24) | 0;
      $12_1 = HEAPF32[$7_1 + 8 >> 2];
      $14 = HEAPF32[$7_1 + 4 >> 2];
      $16_1 = HEAPF32[$7_1 >> 2];
      $15_1 = HEAPF32[$2_1 + 8 >> 2];
      $18_1 = HEAPF32[$2_1 + 4 >> 2];
      $21 = HEAPF32[$2_1 >> 2];
      while (1) {
       $20 = HEAPF32[$4_1 >> 2];
       $22_1 = Math_fround($20 - HEAPF32[$4_1 + 24 >> 2]);
       $17_1 = HEAPF32[$4_1 + 4 >> 2];
       $23_1 = Math_fround($17_1 - $14);
       $17_1 = Math_fround($17_1 - HEAPF32[$4_1 + 28 >> 2]);
       $20 = Math_fround($20 - $16_1);
       $25 = Math_fround(Math_fround(Math_fround($22_1 * $23_1) - Math_fround($17_1 * $20)) * $15_1);
       $26_1 = $17_1;
       $17_1 = HEAPF32[$4_1 + 8 >> 2];
       $24_1 = Math_fround($17_1 - $12_1);
       $17_1 = Math_fround($17_1 - HEAPF32[$4_1 + 32 >> 2]);
       if (!(Math_fround($25 + Math_fround(Math_fround($21 * Math_fround(Math_fround($26_1 * $24_1) - Math_fround($17_1 * $23_1))) + Math_fround($18_1 * Math_fround(Math_fround($17_1 * $20) - Math_fround($22_1 * $24_1))))) > Math_fround(0.0))) {
        $3_1 = $3_1 + -1 | 0;
        HEAP32[$1_1 + 4 >> 2] = $3_1;
        $4_1 = $4_1 + -24 | 0;
        $6_1 = $6_1 + -48 | 0;
        $8_1 = $8_1 + -2 | 0;
        if (($3_1 + 1 | 0) > 2) {
         continue
        }
        break label$27;
       }
       break;
      };
      if (!(HEAP32[$1_1 + 8 >> 2] != ($3_1 | 0) | ($3_1 | 0) >= ($8_1 | 0))) {
       $10 = $79($6_1);
       $5_1 = HEAP32[$1_1 + 4 >> 2];
       if (($5_1 | 0) >= 1) {
        $4_1 = 0;
        while (1) {
         $11 = HEAP32[$1_1 + 12 >> 2] + $4_1 | 0;
         $6_1 = $11;
         $27_1 = HEAP32[$6_1 + 4 >> 2];
         $3_1 = $4_1 + $10 | 0;
         HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
         HEAP32[$3_1 + 4 >> 2] = $27_1;
         $6_1 = $6_1 + 16 | 0;
         $27_1 = HEAP32[$6_1 + 4 >> 2];
         $13_1 = $3_1 + 16 | 0;
         HEAP32[$13_1 >> 2] = HEAP32[$6_1 >> 2];
         HEAP32[$13_1 + 4 >> 2] = $27_1;
         $6_1 = $11 + 8 | 0;
         $13_1 = HEAP32[$6_1 + 4 >> 2];
         $3_1 = $3_1 + 8 | 0;
         HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
         HEAP32[$3_1 + 4 >> 2] = $13_1;
         $4_1 = $4_1 + 24 | 0;
         $5_1 = $5_1 + -1 | 0;
         if ($5_1) {
          continue
         }
         break;
        };
       }
       $4_1 = HEAP32[$1_1 + 12 >> 2];
       if ($4_1) {
        if (HEAPU8[$1_1 + 16 | 0]) {
         $80($4_1)
        }
        HEAP32[$1_1 + 12 >> 2] = 0;
       }
       HEAP32[$1_1 + 12 >> 2] = $10;
       HEAP8[$1_1 + 16 | 0] = 1;
       HEAP32[$1_1 + 8 >> 2] = $8_1;
       $3_1 = HEAP32[$1_1 + 4 >> 2];
      }
      $5_1 = HEAP32[$7_1 + 4 >> 2];
      $4_1 = Math_imul($3_1, 24) + $10 | 0;
      $3_1 = $4_1;
      HEAP32[$3_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $5_1;
      $5_1 = $7_1 + 16 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      $3_1 = $3_1 + 16 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $3_1 = $7_1 + 8 | 0;
      $5_1 = HEAP32[$3_1 + 4 >> 2];
      $4_1 = $4_1 + 8 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $5_1;
      $3_1 = HEAP32[$1_1 + 4 >> 2] + 1 | 0;
      HEAP32[$1_1 + 4 >> 2] = $3_1;
     }
     if (($3_1 | 0) == 1) {
      $3_1 = HEAP32[$0 + 12 >> 2] + Math_imul($9_1, 24) | 0;
      $4_1 = 1;
      if (HEAP32[$1_1 + 8 >> 2] == 1) {
       $5_1 = $79(48);
       $6_1 = HEAP32[$1_1 + 4 >> 2];
       if (($6_1 | 0) >= 1) {
        $4_1 = 0;
        while (1) {
         $13_1 = HEAP32[$1_1 + 12 >> 2] + $4_1 | 0;
         $7_1 = $13_1;
         $11 = HEAP32[$7_1 + 4 >> 2];
         $8_1 = $4_1 + $5_1 | 0;
         HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
         HEAP32[$8_1 + 4 >> 2] = $11;
         $7_1 = $7_1 + 16 | 0;
         $11 = HEAP32[$7_1 + 4 >> 2];
         $10 = $8_1 + 16 | 0;
         HEAP32[$10 >> 2] = HEAP32[$7_1 >> 2];
         HEAP32[$10 + 4 >> 2] = $11;
         $7_1 = $13_1 + 8 | 0;
         $10 = HEAP32[$7_1 + 4 >> 2];
         $8_1 = $8_1 + 8 | 0;
         HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
         HEAP32[$8_1 + 4 >> 2] = $10;
         $4_1 = $4_1 + 24 | 0;
         $6_1 = $6_1 + -1 | 0;
         if ($6_1) {
          continue
         }
         break;
        };
       }
       $4_1 = HEAP32[$1_1 + 12 >> 2];
       if ($4_1) {
        if (HEAPU8[$1_1 + 16 | 0]) {
         $80($4_1)
        }
        HEAP32[$1_1 + 12 >> 2] = 0;
       }
       HEAP32[$1_1 + 12 >> 2] = $5_1;
       HEAP8[$1_1 + 16 | 0] = 1;
       HEAP32[$1_1 + 8 >> 2] = 2;
       $4_1 = HEAP32[$1_1 + 4 >> 2];
      }
      $6_1 = HEAP32[$3_1 + 4 >> 2];
      $4_1 = HEAP32[$1_1 + 12 >> 2] + Math_imul($4_1, 24) | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $6_1;
      $6_1 = $3_1 + 16 | 0;
      $8_1 = HEAP32[$6_1 + 4 >> 2];
      $5_1 = $4_1 + 16 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $8_1;
      $3_1 = $3_1 + 8 | 0;
      $5_1 = HEAP32[$3_1 + 4 >> 2];
      $4_1 = $4_1 + 8 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $5_1;
      $3_1 = HEAP32[$1_1 + 4 >> 2] + 1 | 0;
      HEAP32[$1_1 + 4 >> 2] = $3_1;
     }
     $9_1 = $9_1 + 1 | 0;
     if (($9_1 | 0) != HEAP32[$0 + 4 >> 2]) {
      continue
     }
     break;
    };
    break label$3;
   }
   if (($5_1 | 0) != 1) {
    break label$3
   }
   $3_1 = HEAP32[$1_1 + 4 >> 2];
   while (1) {
    $2_1 = HEAP32[$0 + 12 >> 2];
    label$42 : {
     if (HEAP32[$1_1 + 8 >> 2] != ($3_1 | 0)) {
      break label$42
     }
     $6_1 = $3_1 ? $3_1 << 1 : 1;
     if (($3_1 | 0) >= ($6_1 | 0)) {
      break label$42
     }
     label$43 : {
      if (!$6_1) {
       $5_1 = 0;
       break label$43;
      }
      $5_1 = $79(Math_imul($6_1, 24));
      $3_1 = HEAP32[$1_1 + 4 >> 2];
     }
     if (($3_1 | 0) >= 1) {
      $4_1 = 0;
      while (1) {
       $13_1 = HEAP32[$1_1 + 12 >> 2] + $4_1 | 0;
       $9_1 = $13_1;
       $11 = HEAP32[$9_1 + 4 >> 2];
       $7_1 = $4_1 + $5_1 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $11;
       $9_1 = $9_1 + 16 | 0;
       $11 = HEAP32[$9_1 + 4 >> 2];
       $10 = $7_1 + 16 | 0;
       HEAP32[$10 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$10 + 4 >> 2] = $11;
       $9_1 = $13_1 + 8 | 0;
       $10 = HEAP32[$9_1 + 4 >> 2];
       $7_1 = $7_1 + 8 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $10;
       $4_1 = $4_1 + 24 | 0;
       $3_1 = $3_1 + -1 | 0;
       if ($3_1) {
        continue
       }
       break;
      };
     }
     $4_1 = HEAP32[$1_1 + 12 >> 2];
     if ($4_1) {
      if (HEAPU8[$1_1 + 16 | 0]) {
       $80($4_1)
      }
      HEAP32[$1_1 + 12 >> 2] = 0;
     }
     HEAP32[$1_1 + 12 >> 2] = $5_1;
     HEAP8[$1_1 + 16 | 0] = 1;
     HEAP32[$1_1 + 8 >> 2] = $6_1;
     $3_1 = HEAP32[$1_1 + 4 >> 2];
    }
    $5_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = HEAP32[$1_1 + 12 >> 2] + Math_imul($3_1, 24) | 0;
    $3_1 = $4_1;
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $5_1 = $2_1 + 16 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $3_1 = $3_1 + 16 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $2_1 = $2_1 + 8 | 0;
    $3_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = $4_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $3_1 = HEAP32[$1_1 + 4 >> 2] + 1 | 0;
    HEAP32[$1_1 + 4 >> 2] = $3_1;
    $8_1 = $8_1 + 1 | 0;
    if (($8_1 | 0) < HEAP32[$0 + 4 >> 2]) {
     continue
    }
    break;
   };
  }
  global$0 = $19_1 + 32 | 0;
 }
 
 function $184($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0;
  $7_1 = HEAP32[$0 + 4 >> 2];
  if (($7_1 | 0) == HEAP32[$0 + 8 >> 2]) {
   $182($0, $7_1 ? $7_1 << 1 : 1);
   $7_1 = HEAP32[$0 + 4 >> 2];
  }
  $11 = HEAP32[$0 + 12 >> 2];
  $2_1 = $11 + Math_imul($7_1, 36) | 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP8[$2_1 + 16 | 0] = 1;
  HEAP32[$2_1 + 12 >> 2] = 0;
  $9_1 = $2_1 + 4 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  label$2 : {
   if (($4_1 | 0) >= 1) {
    $14 = $2_1 + 8 | 0;
    $12_1 = $2_1 + 16 | 0;
    $13_1 = $4_1 << 2;
    $3_1 = $79($13_1);
    $10 = $2_1 + 12 | 0;
    $2_1 = HEAP32[$10 >> 2];
    $8_1 = HEAP32[$9_1 >> 2];
    label$4 : {
     label$5 : {
      if (($8_1 | 0) >= 1) {
       $5_1 = $3_1;
       $6_1 = $2_1;
       while (1) {
        HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
        $5_1 = $5_1 + 4 | 0;
        $6_1 = $6_1 + 4 | 0;
        $8_1 = $8_1 + -1 | 0;
        if ($8_1) {
         continue
        }
        break;
       };
       break label$5;
      }
      if (!$2_1) {
       break label$4
      }
     }
     if (!HEAPU8[$12_1 | 0]) {
      break label$4
     }
     $80($2_1);
    }
    HEAP32[$10 >> 2] = $3_1;
    HEAP8[$12_1 | 0] = 1;
    HEAP32[$14 >> 2] = $4_1;
    $17($3_1, 0, $13_1);
    HEAP32[$9_1 >> 2] = $4_1;
    $5_1 = HEAP32[$1_1 + 12 >> 2];
    $6_1 = HEAP32[$10 >> 2];
    while (1) {
     HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
     $6_1 = $6_1 + 4 | 0;
     $5_1 = $5_1 + 4 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue
     }
     break;
    };
    break label$2;
   }
   HEAP32[$9_1 >> 2] = $4_1;
  }
  $2_1 = HEAP32[$1_1 + 24 >> 2];
  $3_1 = Math_imul($7_1, 36) + $11 | 0;
  HEAP32[$3_1 + 20 >> 2] = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$3_1 + 24 >> 2] = $2_1;
  $2_1 = $1_1 + 28 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $3_1 + 28 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 }
 
 function $185($0, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = 0, $21 = 0, $22_1 = 0, $23_1 = 0, $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0;
  $11 = global$0 - 32 | 0;
  global$0 = $11;
  $9_1 = HEAP32[$0 + 12 >> 2];
  $6_1 = $9_1 + Math_imul(($2_1 + $3_1 | 0) / 2 | 0, 24) | 0;
  $23_1 = HEAP32[$6_1 + 20 >> 2];
  $16_1 = HEAPF32[$6_1 + 16 >> 2];
  $24_1 = HEAPF32[$6_1 + 8 >> 2];
  $25 = HEAPF32[$6_1 + 4 >> 2];
  $26_1 = HEAPF32[$6_1 >> 2];
  $6_1 = $2_1;
  $10 = $3_1;
  while (1) {
   $17_1 = HEAPF32[$1_1 >> 2];
   $8_1 = Math_fround($26_1 - $17_1);
   $4_1 = Math_fround($8_1 * $8_1);
   $18_1 = HEAPF32[$1_1 + 4 >> 2];
   $8_1 = Math_fround($25 - $18_1);
   $4_1 = Math_fround($4_1 + Math_fround($8_1 * $8_1));
   $19_1 = HEAPF32[$1_1 + 8 >> 2];
   $8_1 = Math_fround($24_1 - $19_1);
   $8_1 = Math_fround($4_1 + Math_fround($8_1 * $8_1));
   $5_1 = (Math_imul($6_1, 24) + $9_1 | 0) + 20 | 0;
   while (1) {
    label$2 : {
     $4_1 = HEAPF32[$5_1 + -4 >> 2];
     label$4 : {
      if ($4_1 != $16_1) {
       if ($4_1 < $16_1) {
        break label$4
       }
       break label$2;
      }
      $4_1 = Math_fround(HEAPF32[$5_1 + -20 >> 2] - $17_1);
      $14 = Math_fround($4_1 * $4_1);
      $4_1 = Math_fround(HEAPF32[$5_1 + -16 >> 2] - $18_1);
      $14 = Math_fround($14 + Math_fround($4_1 * $4_1));
      $4_1 = Math_fround(HEAPF32[$5_1 + -12 >> 2] - $19_1);
      $4_1 = Math_fround($14 + Math_fround($4_1 * $4_1));
      if ((($4_1 != $8_1 ? $4_1 < $8_1 : HEAP32[$5_1 >> 2] < ($23_1 | 0)) | 0) != 1) {
       break label$2
      }
     }
     $5_1 = $5_1 + 24 | 0;
     $6_1 = $6_1 + 1 | 0;
     continue;
    }
    break;
   };
   $12_1 = Math_imul($10, 24);
   while (1) {
    label$6 : {
     $7_1 = $12_1 + $9_1 | 0;
     $20 = $7_1 + 16 | 0;
     $4_1 = HEAPF32[$20 >> 2];
     label$8 : {
      if ($16_1 != $4_1) {
       if ($16_1 < $4_1) {
        break label$8
       }
       break label$6;
      }
      $4_1 = Math_fround(HEAPF32[$7_1 >> 2] - $17_1);
      $14 = Math_fround($4_1 * $4_1);
      $4_1 = Math_fround(HEAPF32[$7_1 + 4 >> 2] - $18_1);
      $14 = Math_fround($14 + Math_fround($4_1 * $4_1));
      $4_1 = Math_fround(HEAPF32[$7_1 + 8 >> 2] - $19_1);
      $4_1 = Math_fround($14 + Math_fround($4_1 * $4_1));
      if ((($8_1 != $4_1 ? $8_1 < $4_1 : ($23_1 | 0) < HEAP32[$7_1 + 20 >> 2]) | 0) != 1) {
       break label$6
      }
     }
     $12_1 = $12_1 + -24 | 0;
     $10 = $10 + -1 | 0;
     continue;
    }
    break;
   };
   if (($6_1 | 0) <= ($10 | 0)) {
    $5_1 = $5_1 + -20 | 0;
    $21 = $5_1 + 16 | 0;
    $15_1 = $21;
    $13_1 = HEAP32[$15_1 + 4 >> 2];
    $9_1 = $11 + 24 | 0;
    HEAP32[$9_1 >> 2] = HEAP32[$15_1 >> 2];
    HEAP32[$9_1 + 4 >> 2] = $13_1;
    $15_1 = $5_1 + 8 | 0;
    $27_1 = HEAP32[$15_1 + 4 >> 2];
    $22_1 = $11 + 16 | 0;
    $13_1 = $22_1;
    HEAP32[$13_1 >> 2] = HEAP32[$15_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $27_1;
    $13_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$11 + 8 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$11 + 12 >> 2] = $13_1;
    $13_1 = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $13_1;
    $5_1 = $7_1 + 8 | 0;
    $7_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$15_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$15_1 + 4 >> 2] = $7_1;
    $5_1 = HEAP32[$20 + 4 >> 2];
    HEAP32[$21 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$21 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$0 + 12 >> 2] + $12_1 | 0;
    $12_1 = HEAP32[$11 + 12 >> 2];
    HEAP32[$5_1 >> 2] = HEAP32[$11 + 8 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $12_1;
    $12_1 = HEAP32[$9_1 + 4 >> 2];
    $7_1 = $5_1 + 16 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $12_1;
    $7_1 = HEAP32[$22_1 + 4 >> 2];
    $5_1 = $5_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$22_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $7_1;
    $10 = $10 + -1 | 0;
    $6_1 = $6_1 + 1 | 0;
   }
   if (($6_1 | 0) <= ($10 | 0)) {
    $9_1 = HEAP32[$0 + 12 >> 2];
    continue;
   }
   break;
  };
  if (($10 | 0) > ($2_1 | 0)) {
   $185($0, $1_1, $2_1, $10)
  }
  if (($6_1 | 0) < ($3_1 | 0)) {
   $185($0, $1_1, $6_1, $3_1)
  }
  global$0 = $11 + 32 | 0;
 }
 
 function $186($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0);
  $9_1 = global$0 - 2048 | 0;
  global$0 = $9_1;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $3_1 = $0 + 8 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $7_1 = HEAPF32[$2_1 >> 2];
  $8_1 = HEAPF32[$2_1 + 4 >> 2];
  $4_1 = HEAPF32[$2_1 + 8 >> 2];
  $5_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8_1 * $8_1)) + Math_fround($4_1 * $4_1));
  label$1 : {
   if ($5_1 < Math_fround(9.999999747378752e-05)) {
    $7_1 = Math_fround(1.0);
    break label$1;
   }
   $5_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($5_1)));
   $13_1 = Math_fround($4_1 * $5_1);
   $14 = Math_fround($8_1 * $5_1);
   $7_1 = Math_fround($7_1 * $5_1);
  }
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 96 >> 2]]($1_1) | 0) >= 1) {
   $5_1 = Math_fround(-999999984306749440.0);
   while (1) {
    $10 = 128;
    label$5 : {
     label$6 : {
      if (((FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 96 >> 2]]($1_1) | 0) - $11 | 0) > 127) {
       break label$6
      }
      $10 = (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 96 >> 2]]($1_1) | 0) - $11 | 0;
      if (($10 | 0) >= 1) {
       break label$6
      }
      $4_1 = Math_fround(-3402823466385288598117041.0e14);
      $12_1 = -1;
      break label$5;
     }
     $2_1 = 0;
     $3_1 = $9_1;
     while (1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 108 >> 2]]($1_1, $2_1, $3_1);
      $3_1 = $3_1 + 16 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (($10 | 0) != ($2_1 | 0)) {
       continue
      }
      break;
     };
     $3_1 = 0;
     $12_1 = -1;
     $4_1 = Math_fround(-3402823466385288598117041.0e14);
     $2_1 = $9_1;
     while (1) {
      $8_1 = Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$2_1 >> 2]) + Math_fround($14 * HEAPF32[$2_1 + 4 >> 2])) + Math_fround($13_1 * HEAPF32[$2_1 + 8 >> 2]));
      $6_1 = $8_1 > $4_1;
      $4_1 = $6_1 ? $8_1 : $4_1;
      $12_1 = $6_1 ? $3_1 : $12_1;
      $2_1 = $2_1 + 16 | 0;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != ($10 | 0)) {
       continue
      }
      break;
     };
    }
    if (!!($4_1 > $5_1)) {
     $6_1 = ($12_1 << 4) + $9_1 | 0;
     $2_1 = HEAP32[$6_1 + 12 >> 2];
     $3_1 = $0 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$6_1 + 8 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $2_1;
     $2_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$0 + 4 >> 2] = $2_1;
     $5_1 = $4_1;
    }
    $11 = $11 + 128 | 0;
    if (($11 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 96 >> 2]]($1_1) | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $9_1 + 2048 | 0;
 }
 
 function $187($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0);
  $8_1 = global$0 - 2048 | 0;
  global$0 = $8_1;
  label$1 : {
   if (($3_1 | 0) < 1) {
    break label$1
   }
   $5_1 = $2_1 + 12 | 0;
   $4_1 = $3_1;
   while (1) {
    HEAP32[$5_1 >> 2] = -581039253;
    $5_1 = $5_1 + 16 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue
    }
    break;
   };
   if (($3_1 | 0) < 1) {
    break label$1
   }
   while (1) {
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) >= 1) {
     $4_1 = $12_1 << 4;
     $10 = $4_1 + $2_1 | 0;
     $14 = $10 + 12 | 0;
     $13_1 = $1_1 + $4_1 | 0;
     $17_1 = $13_1 + 8 | 0;
     $18_1 = $13_1 + 4 | 0;
     $9_1 = 0;
     while (1) {
      $11 = 128;
      label$6 : {
       label$7 : {
        if (((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) - $9_1 | 0) > 127) {
         break label$7
        }
        $11 = (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) - $9_1 | 0;
        if (($11 | 0) >= 1) {
         break label$7
        }
        $6_1 = Math_fround(-3402823466385288598117041.0e14);
        $7_1 = -1;
        break label$6;
       }
       $5_1 = 0;
       $4_1 = $8_1;
       while (1) {
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $5_1, $4_1);
        $4_1 = $4_1 + 16 | 0;
        $5_1 = $5_1 + 1 | 0;
        if (($11 | 0) != ($5_1 | 0)) {
         continue
        }
        break;
       };
       $19_1 = HEAPF32[$17_1 >> 2];
       $20 = HEAPF32[$18_1 >> 2];
       $21 = HEAPF32[$13_1 >> 2];
       $4_1 = 0;
       $7_1 = -1;
       $6_1 = Math_fround(-3402823466385288598117041.0e14);
       $5_1 = $8_1;
       while (1) {
        $15_1 = Math_fround(Math_fround(Math_fround($21 * HEAPF32[$5_1 >> 2]) + Math_fround($20 * HEAPF32[$5_1 + 4 >> 2])) + Math_fround($19_1 * HEAPF32[$5_1 + 8 >> 2]));
        $16_1 = $15_1 > $6_1;
        $6_1 = $16_1 ? $15_1 : $6_1;
        $7_1 = $16_1 ? $4_1 : $7_1;
        $5_1 = $5_1 + 16 | 0;
        $4_1 = $4_1 + 1 | 0;
        if (($11 | 0) != ($4_1 | 0)) {
         continue
        }
        break;
       };
      }
      if (!!($6_1 > HEAPF32[$14 >> 2])) {
       $4_1 = ($7_1 << 4) + $8_1 | 0;
       $7_1 = HEAP32[$4_1 + 12 >> 2];
       $5_1 = $10 + 8 | 0;
       HEAP32[$5_1 >> 2] = HEAP32[$4_1 + 8 >> 2];
       HEAP32[$5_1 + 4 >> 2] = $7_1;
       $5_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$10 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$10 + 4 >> 2] = $5_1;
       HEAPF32[$14 >> 2] = $6_1;
      }
      $9_1 = $9_1 + 128 | 0;
      if (($9_1 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0)) {
       continue
      }
      break;
     };
    }
    $12_1 = $12_1 + 1 | 0;
    if (($12_1 | 0) != ($3_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $8_1 + 2048 | 0;
 }
 
 function $188($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $5_1 = $3_1 + 44 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 56 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 52 >> 2] = 1065353216;
  $5_1 = $3_1 + 76 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 72 >> 2] = 1065353216;
  $5_1 = $3_1 + 84 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 92 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 1065353216;
  HEAP32[$3_1 + 64 >> 2] = 0;
  HEAP32[$3_1 + 68 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $1_1 = Math_fround($1_1 * Math_fround(.0833333283662796));
  $6_1 = Math_fround($4_1 + Math_fround(Math_fround(HEAPF32[$3_1 >> 2] - HEAPF32[$3_1 + 16 >> 2]) * Math_fround(.5)));
  $6_1 = Math_fround($6_1 + $6_1);
  $6_1 = Math_fround($6_1 * $6_1);
  $7_1 = Math_fround($4_1 + Math_fround(Math_fround(HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$3_1 + 20 >> 2]) * Math_fround(.5)));
  $7_1 = Math_fround($7_1 + $7_1);
  $7_1 = Math_fround($7_1 * $7_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($6_1 + $7_1);
  $4_1 = Math_fround($4_1 + Math_fround(Math_fround(HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$3_1 + 24 >> 2]) * Math_fround(.5)));
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($6_1 + $4_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($7_1 + $4_1);
  global$0 = $3_1 + 96 | 0;
 }
 
 function $189($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = 0;
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $146($0, $1_1);
  HEAP8[$0 + 92 | 0] = 1;
  if (!HEAPU8[24080]) {
   HEAP32[5997] = 0;
   HEAP32[5998] = 0;
   HEAP32[5996] = 1065353216;
   HEAP32[5999] = 0;
   HEAP32[6e3] = 0;
   HEAP32[6002] = 0;
   HEAP32[6003] = 0;
   HEAP32[6001] = 1065353216;
   HEAP32[6004] = 0;
   HEAP32[6005] = 0;
   HEAP32[6009] = 0;
   HEAP32[6010] = 0;
   HEAP32[6008] = -1082130432;
   HEAP32[6006] = 1065353216;
   HEAP32[6007] = 0;
   HEAP32[6011] = 0;
   HEAP32[6012] = 0;
   HEAP32[6014] = 0;
   HEAP32[6015] = 0;
   HEAP32[6013] = -1082130432;
   HEAP32[6016] = 0;
   HEAP32[6017] = 0;
   HEAP32[6018] = -1082130432;
   HEAP32[6019] = 0;
   HEAP8[24080] = 1;
  }
  $1_1 = $17($3_1, 0, 96);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 76 >> 2]]($0, 23984, $1_1, 6);
  $2_1 = HEAPF32[$0 + 48 >> 2];
  HEAPF32[$0 + 76 >> 2] = $2_1 + HEAPF32[$1_1 >> 2];
  HEAPF32[$0 + 60 >> 2] = HEAPF32[$1_1 + 48 >> 2] - $2_1;
  HEAPF32[$0 + 80 >> 2] = $2_1 + HEAPF32[$1_1 + 20 >> 2];
  HEAPF32[$0 - -64 >> 2] = HEAPF32[$1_1 + 68 >> 2] - $2_1;
  HEAPF32[$0 + 84 >> 2] = $2_1 + HEAPF32[$1_1 + 40 >> 2];
  HEAPF32[$0 + 68 >> 2] = HEAPF32[$1_1 + 88 >> 2] - $2_1;
  global$0 = $1_1 + 96 | 0;
 }
 
 function $190($0) {
  var $1_1 = 0;
  $145($0);
  HEAP8[$0 + 92 | 0] = 0;
  HEAP32[$0 + 88 >> 2] = 0;
  $1_1 = $0 + 80 | 0;
  HEAP32[$1_1 >> 2] = -1082130432;
  HEAP32[$1_1 + 4 >> 2] = -1082130432;
  $1_1 = $0 + 72 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = -1082130432;
  $1_1 = $0 - -64 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  HEAP32[$0 >> 2] = 5256;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 60 >> 2] = 1065353216;
 }
 
 function $191($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0);
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $24_1 = HEAPF32[$1_1 + 52 >> 2];
  $7_1 = HEAPF32[$1_1 + 24 >> 2];
  $8_1 = HEAPF32[$1_1 + 20 >> 2];
  $9_1 = HEAPF32[$1_1 + 56 >> 2];
  $10 = HEAPF32[$1_1 + 40 >> 2];
  $11 = HEAPF32[$0 + 68 >> 2];
  $15_1 = HEAPF32[$0 + 84 >> 2];
  $16_1 = HEAPF32[$1_1 + 36 >> 2];
  $5_1 = HEAPF32[$0 - -64 >> 2];
  $17_1 = HEAPF32[$0 + 80 >> 2];
  $25 = HEAPF32[$1_1 + 48 >> 2];
  $18_1 = HEAPF32[$1_1 + 8 >> 2];
  $19_1 = HEAPF32[$1_1 >> 2];
  $20 = HEAPF32[$1_1 + 4 >> 2];
  $21 = HEAPF32[$1_1 + 16 >> 2];
  $22_1 = HEAPF32[$1_1 + 32 >> 2];
  $6_1 = HEAPF32[$0 + 60 >> 2];
  $23_1 = HEAPF32[$0 + 76 >> 2];
  HEAP32[$2_1 + 12 >> 2] = 0;
  $12_1 = $9_1;
  $9_1 = Math_fround(Math_fround($23_1 + $6_1) * Math_fround(.5));
  $13_1 = Math_fround(Math_fround($17_1 + $5_1) * Math_fround(.5));
  $14 = Math_fround(Math_fround($15_1 + $11) * Math_fround(.5));
  $12_1 = Math_fround($12_1 + Math_fround(Math_fround(Math_fround($22_1 * $9_1) + Math_fround($16_1 * $13_1)) + Math_fround($10 * $14)));
  $6_1 = Math_fround($4_1 + Math_fround(Math_fround($23_1 - $6_1) * Math_fround(.5)));
  $5_1 = Math_fround($4_1 + Math_fround(Math_fround($17_1 - $5_1) * Math_fround(.5)));
  $4_1 = Math_fround($4_1 + Math_fround(Math_fround($15_1 - $11) * Math_fround(.5)));
  $10 = Math_fround(Math_fround(Math_fround($6_1 * Math_fround(Math_abs($22_1))) + Math_fround($5_1 * Math_fround(Math_abs($16_1)))) + Math_fround($4_1 * Math_fround(Math_abs($10))));
  HEAPF32[$2_1 + 8 >> 2] = $12_1 - $10;
  $11 = Math_fround($24_1 + Math_fround(Math_fround(Math_fround($9_1 * $21) + Math_fround($13_1 * $8_1)) + Math_fround($14 * $7_1)));
  $7_1 = Math_fround(Math_fround(Math_fround($6_1 * Math_fround(Math_abs($21))) + Math_fround($5_1 * Math_fround(Math_abs($8_1)))) + Math_fround($4_1 * Math_fround(Math_abs($7_1))));
  HEAPF32[$2_1 + 4 >> 2] = $11 - $7_1;
  $8_1 = Math_fround($25 + Math_fround(Math_fround(Math_fround($9_1 * $19_1) + Math_fround($13_1 * $20)) + Math_fround($14 * $18_1)));
  $4_1 = Math_fround(Math_fround(Math_fround($6_1 * Math_fround(Math_abs($19_1))) + Math_fround($5_1 * Math_fround(Math_abs($20)))) + Math_fround($4_1 * Math_fround(Math_abs($18_1))));
  HEAPF32[$2_1 >> 2] = $8_1 - $4_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 8 >> 2] = $10 + $12_1;
  HEAPF32[$3_1 + 4 >> 2] = $7_1 + $11;
  HEAPF32[$3_1 >> 2] = $4_1 + $8_1;
 }
 
 function $192($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $1_1, $2_1, $3_1);
 }
 
 function $193($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 5124;
  $1_1 = HEAP32[$0 + 56 >> 2];
  if ($1_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $80(HEAP32[$0 + 56 >> 2]);
  }
  return $0 | 0;
 }
 
 function $195($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0;
  $2_1 = HEAPF32[$0 + 48 >> 2];
  $3_1 = HEAPF32[$0 + 52 >> 2];
  $4_1 = HEAPF32[$0 + 56 >> 2];
  $5_1 = HEAPF32[$0 + 60 >> 2];
  $6_1 = Math_fround(HEAPF32[$0 + 64 >> 2] + HEAPF32[$1_1 + 64 >> 2]);
  label$1 : {
   if (!(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $2_1) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * $3_1)) + Math_fround(HEAPF32[$1_1 + 8 >> 2] * $4_1)) - $5_1) - $6_1) > Math_fround(0.0) ^ 1 | Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2_1 * HEAPF32[$1_1 + 16 >> 2]) + Math_fround($3_1 * HEAPF32[$1_1 + 20 >> 2])) + Math_fround($4_1 * HEAPF32[$1_1 + 24 >> 2])) - $5_1) - $6_1) > Math_fround(0.0) ^ 1)) {
    $7_1 = 0;
    if (Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2_1 * HEAPF32[$1_1 + 32 >> 2]) + Math_fround($3_1 * HEAPF32[$1_1 + 36 >> 2])) + Math_fround($4_1 * HEAPF32[$1_1 + 40 >> 2])) - $5_1) - $6_1) > Math_fround(0.0)) {
     break label$1
    }
   }
   $2_1 = HEAPF32[$1_1 + 48 >> 2];
   $3_1 = HEAPF32[$1_1 + 52 >> 2];
   $4_1 = HEAPF32[$1_1 + 56 >> 2];
   $5_1 = HEAPF32[$1_1 + 60 >> 2];
   $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 >> 2] * $2_1) + Math_fround(HEAPF32[$0 + 4 >> 2] * $3_1)) + Math_fround(HEAPF32[$0 + 8 >> 2] * $4_1)) - $5_1) - $6_1) > Math_fround(0.0) ^ 1 | Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2_1 * HEAPF32[$0 + 16 >> 2]) + Math_fround($3_1 * HEAPF32[$0 + 20 >> 2])) + Math_fround($4_1 * HEAPF32[$0 + 24 >> 2])) - $5_1) - $6_1) > Math_fround(0.0) ^ 1 | Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2_1 * HEAPF32[$0 + 32 >> 2]) + Math_fround($3_1 * HEAPF32[$0 + 36 >> 2])) + Math_fround($4_1 * HEAPF32[$0 + 40 >> 2])) - $5_1) - $6_1) > Math_fround(0.0) ^ 1;
  }
  return $7_1;
 }
 
 function $196($0, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0;
  $7_1 = global$0 - 528 | 0;
  global$0 = $7_1;
  $9_1 = HEAPF32[$0 + 20 >> 2];
  $5_1 = Math_fround($9_1 - HEAPF32[$0 + 4 >> 2]);
  $4_1 = HEAPF32[$0 + 56 >> 2];
  $10 = HEAPF32[$0 + 24 >> 2];
  $6_1 = Math_fround($10 - HEAPF32[$0 + 8 >> 2]);
  $8_1 = HEAPF32[$0 + 52 >> 2];
  $3_1 = Math_fround(Math_fround($5_1 * $4_1) - Math_fround($6_1 * $8_1));
  $14 = $3_1;
  $11 = HEAPF32[$0 + 16 >> 2];
  $12_1 = Math_fround($11 - HEAPF32[$0 >> 2]);
  $13_1 = Math_fround($12_1 * $8_1);
  $8_1 = HEAPF32[$0 + 48 >> 2];
  $5_1 = Math_fround($13_1 - Math_fround($5_1 * $8_1));
  $13_1 = Math_fround($3_1 * $3_1);
  $3_1 = Math_fround(Math_fround($6_1 * $8_1) - Math_fround($12_1 * $4_1));
  $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($13_1 + Math_fround($3_1 * $3_1))))));
  $6_1 = Math_fround($14 * $4_1);
  HEAPF32[$7_1 + 256 >> 2] = $6_1;
  $3_1 = Math_fround($3_1 * $4_1);
  HEAPF32[$7_1 + 260 >> 2] = $3_1;
  $5_1 = Math_fround($5_1 * $4_1);
  HEAPF32[$7_1 + 264 >> 2] = $5_1;
  HEAPF32[$7_1 + 268 >> 2] = Math_fround($10 * $5_1) + Math_fround(Math_fround($11 * $6_1) + Math_fround($9_1 * $3_1));
  $1_1 = $197($7_1 + 256 | 0, $1_1, $1_1 + 16 | 0, $1_1 + 32 | 0, $7_1 + 272 | 0);
  $15_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $9_1 = HEAPF32[$0 + 40 >> 2];
   $4_1 = Math_fround($9_1 - HEAPF32[$0 + 24 >> 2]);
   $5_1 = HEAPF32[$0 + 48 >> 2];
   $10 = HEAPF32[$0 + 32 >> 2];
   $6_1 = Math_fround($10 - HEAPF32[$0 + 16 >> 2]);
   $8_1 = HEAPF32[$0 + 56 >> 2];
   $3_1 = Math_fround(Math_fround($4_1 * $5_1) - Math_fround($6_1 * $8_1));
   $14 = $3_1;
   $13_1 = $6_1;
   $6_1 = HEAPF32[$0 + 52 >> 2];
   $11 = HEAPF32[$0 + 36 >> 2];
   $12_1 = Math_fround($11 - HEAPF32[$0 + 20 >> 2]);
   $5_1 = Math_fround(Math_fround($13_1 * $6_1) - Math_fround($12_1 * $5_1));
   $4_1 = Math_fround(Math_fround($12_1 * $8_1) - Math_fround($4_1 * $6_1));
   $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround(Math_fround($4_1 * $4_1) + Math_fround($3_1 * $3_1))))));
   $6_1 = Math_fround($14 * $3_1);
   HEAPF32[$7_1 + 260 >> 2] = $6_1;
   $4_1 = Math_fround($4_1 * $3_1);
   HEAPF32[$7_1 + 256 >> 2] = $4_1;
   $3_1 = Math_fround($5_1 * $3_1);
   HEAPF32[$7_1 + 264 >> 2] = $3_1;
   HEAPF32[$7_1 + 268 >> 2] = Math_fround($9_1 * $3_1) + Math_fround(Math_fround($10 * $4_1) + Math_fround($11 * $6_1));
   $1_1 = $198($7_1 + 256 | 0, $7_1 + 272 | 0, $1_1, $7_1);
   $15_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $9_1 = HEAPF32[$0 + 8 >> 2];
   $4_1 = Math_fround($9_1 - HEAPF32[$0 + 40 >> 2]);
   $5_1 = HEAPF32[$0 + 48 >> 2];
   $10 = HEAPF32[$0 >> 2];
   $6_1 = Math_fround($10 - HEAPF32[$0 + 32 >> 2]);
   $8_1 = HEAPF32[$0 + 56 >> 2];
   $3_1 = Math_fround(Math_fround($4_1 * $5_1) - Math_fround($6_1 * $8_1));
   $14 = $3_1;
   $13_1 = $6_1;
   $6_1 = HEAPF32[$0 + 52 >> 2];
   $11 = HEAPF32[$0 + 4 >> 2];
   $12_1 = Math_fround($11 - HEAPF32[$0 + 36 >> 2]);
   $5_1 = Math_fround(Math_fround($13_1 * $6_1) - Math_fround($12_1 * $5_1));
   $4_1 = Math_fround(Math_fround($12_1 * $8_1) - Math_fround($4_1 * $6_1));
   $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround(Math_fround($4_1 * $4_1) + Math_fround($3_1 * $3_1))))));
   $6_1 = Math_fround($14 * $3_1);
   HEAPF32[$7_1 + 260 >> 2] = $6_1;
   $4_1 = Math_fround($4_1 * $3_1);
   HEAPF32[$7_1 + 256 >> 2] = $4_1;
   $3_1 = Math_fround($5_1 * $3_1);
   HEAPF32[$7_1 + 264 >> 2] = $3_1;
   HEAPF32[$7_1 + 268 >> 2] = Math_fround($9_1 * $3_1) + Math_fround(Math_fround($10 * $4_1) + Math_fround($11 * $6_1));
   $15_1 = $198($7_1 + 256 | 0, $7_1, $1_1, $2_1);
  }
  $0 = $15_1;
  global$0 = $7_1 + 528 | 0;
  return $0;
 }
 
 function $197($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0;
  $12_1 = HEAPF32[$1_1 >> 2];
  $6_1 = HEAPF32[$0 >> 2];
  $7_1 = HEAPF32[$0 + 4 >> 2];
  $8_1 = HEAPF32[$0 + 8 >> 2];
  $10 = HEAPF32[$0 + 12 >> 2];
  $13_1 = Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $6_1) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * $7_1)) + Math_fround(HEAPF32[$1_1 + 8 >> 2] * $8_1)) - $10);
  $9_1 = $13_1 > Math_fround(1.1920928955078125e-07);
  if (!$9_1) {
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $11 = $1_1 + 8 | 0;
   $17_1 = HEAP32[$11 + 4 >> 2];
   $5_1 = $4_1 + 8 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $17_1;
   $10 = HEAPF32[$0 + 12 >> 2];
   $8_1 = HEAPF32[$0 + 8 >> 2];
   $7_1 = HEAPF32[$0 + 4 >> 2];
   $6_1 = HEAPF32[$0 >> 2];
   $5_1 = 1;
  }
  $14 = HEAPF32[$2_1 >> 2];
  $15_1 = HEAPF32[$2_1 + 4 >> 2];
  $16_1 = HEAPF32[$2_1 + 8 >> 2];
  $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($14 * $6_1) + Math_fround($15_1 * $7_1)) + Math_fround($16_1 * $8_1)) - $10);
  if (($6_1 > Math_fround(1.1920928955078125e-07) | 0) != ($9_1 | 0)) {
   $10 = HEAPF32[$1_1 + 4 >> 2];
   $18_1 = HEAPF32[$1_1 + 8 >> 2];
   $9_1 = ($5_1 << 4) + $4_1 | 0;
   HEAP32[$9_1 + 12 >> 2] = 0;
   $7_1 = Math_fround(Math_fround(-$13_1) / Math_fround($6_1 - $13_1));
   $8_1 = Math_fround(Math_fround(1.0) - $7_1);
   HEAPF32[$9_1 + 8 >> 2] = Math_fround($16_1 * $7_1) + Math_fround($18_1 * $8_1);
   HEAPF32[$9_1 + 4 >> 2] = Math_fround($15_1 * $7_1) + Math_fround($8_1 * $10);
   HEAPF32[$9_1 >> 2] = Math_fround($14 * $7_1) + Math_fround($12_1 * $8_1);
   $5_1 = $5_1 + 1 | 0;
  }
  $9_1 = $6_1 > Math_fround(1.1920928955078125e-07);
  if (!$9_1) {
   $19_1 = HEAP32[$2_1 + 4 >> 2];
   $11 = ($5_1 << 4) + $4_1 | 0;
   HEAP32[$11 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$11 + 4 >> 2] = $19_1;
   $17_1 = $2_1 + 8 | 0;
   $19_1 = HEAP32[$17_1 + 4 >> 2];
   $11 = $11 + 8 | 0;
   HEAP32[$11 >> 2] = HEAP32[$17_1 >> 2];
   HEAP32[$11 + 4 >> 2] = $19_1;
   $5_1 = $5_1 + 1 | 0;
  }
  $10 = HEAPF32[$3_1 >> 2];
  $12_1 = HEAPF32[$3_1 + 4 >> 2];
  $14 = HEAPF32[$3_1 + 8 >> 2];
  $7_1 = Math_fround(Math_fround(Math_fround(Math_fround($10 * HEAPF32[$0 >> 2]) + Math_fround($12_1 * HEAPF32[$0 + 4 >> 2])) + Math_fround($14 * HEAPF32[$0 + 8 >> 2])) - HEAPF32[$0 + 12 >> 2]);
  if (($7_1 > Math_fround(1.1920928955078125e-07) | 0) != ($9_1 | 0)) {
   $15_1 = HEAPF32[$2_1 >> 2];
   $16_1 = HEAPF32[$2_1 + 4 >> 2];
   $18_1 = HEAPF32[$2_1 + 8 >> 2];
   $0 = ($5_1 << 4) + $4_1 | 0;
   HEAP32[$0 + 12 >> 2] = 0;
   $6_1 = Math_fround(Math_fround(-$6_1) / Math_fround($7_1 - $6_1));
   $8_1 = Math_fround(Math_fround(1.0) - $6_1);
   HEAPF32[$0 + 8 >> 2] = Math_fround($14 * $6_1) + Math_fround($18_1 * $8_1);
   HEAPF32[$0 + 4 >> 2] = Math_fround($12_1 * $6_1) + Math_fround($8_1 * $16_1);
   HEAPF32[$0 >> 2] = Math_fround($10 * $6_1) + Math_fround($8_1 * $15_1);
   $5_1 = $5_1 + 1 | 0;
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if (!($7_1 > Math_fround(1.1920928955078125e-07))) {
      $2_1 = HEAP32[$3_1 + 4 >> 2];
      $0 = ($5_1 << 4) + $4_1 | 0;
      HEAP32[$0 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$0 + 4 >> 2] = $2_1;
      $2_1 = $3_1 + 8 | 0;
      $9_1 = HEAP32[$2_1 + 4 >> 2];
      $0 = $0 + 8 | 0;
      HEAP32[$0 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$0 + 4 >> 2] = $9_1;
      $5_1 = $5_1 + 1 | 0;
      if ($13_1 > Math_fround(1.1920928955078125e-07)) {
       break label$7
      }
      break label$6;
     }
     if ($13_1 > Math_fround(1.1920928955078125e-07)) {
      break label$5
     }
    }
    $8_1 = HEAPF32[$3_1 >> 2];
    $10 = HEAPF32[$1_1 >> 2];
    $12_1 = HEAPF32[$3_1 + 4 >> 2];
    $14 = HEAPF32[$1_1 + 4 >> 2];
    $6_1 = HEAPF32[$3_1 + 8 >> 2];
    $15_1 = HEAPF32[$1_1 + 8 >> 2];
    $0 = ($5_1 << 4) + $4_1 | 0;
    HEAP32[$0 + 12 >> 2] = 0;
    $16_1 = $6_1;
    $6_1 = Math_fround(Math_fround(-$7_1) / Math_fround($13_1 - $7_1));
    $7_1 = Math_fround(Math_fround(1.0) - $6_1);
    HEAPF32[$0 + 8 >> 2] = Math_fround($16_1 * $7_1) + Math_fround($6_1 * $15_1);
    HEAPF32[$0 + 4 >> 2] = Math_fround($7_1 * $12_1) + Math_fround($6_1 * $14);
    HEAPF32[$0 >> 2] = Math_fround($7_1 * $8_1) + Math_fround($6_1 * $10);
    $5_1 = $5_1 + 1 | 0;
    if ($13_1 > Math_fround(1.1920928955078125e-07)) {
     break label$5
    }
   }
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $0 = ($5_1 << 4) + $4_1 | 0;
   HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2_1;
   $1_1 = $1_1 + 8 | 0;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $0 = $0 + 8 | 0;
   HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2_1;
   $5_1 = $5_1 + 1 | 0;
  }
  return $5_1;
 }
 
 function $198($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0);
  $8_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * HEAPF32[$0 >> 2]) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * HEAPF32[$0 + 4 >> 2])) + Math_fround(HEAPF32[$1_1 + 8 >> 2] * HEAPF32[$0 + 8 >> 2])) - HEAPF32[$0 + 12 >> 2]);
  if (!($8_1 > Math_fround(1.1920928955078125e-07))) {
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $4_1;
   $9_1 = $1_1 + 8 | 0;
   $5_1 = HEAP32[$9_1 + 4 >> 2];
   $4_1 = $3_1 + 8 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $5_1 = 1;
  }
  label$2 : {
   if (($2_1 | 0) < 2) {
    $6_1 = $8_1;
    break label$2;
   }
   $15_1 = $2_1 + -1 | 0;
   $4_1 = $1_1;
   $7_1 = $8_1;
   while (1) {
    $9_1 = $4_1 + 16 | 0;
    $12_1 = HEAPF32[$9_1 >> 2];
    $13_1 = HEAPF32[$4_1 + 20 >> 2];
    $16_1 = $4_1 + 24 | 0;
    $14 = HEAPF32[$16_1 >> 2];
    $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($12_1 * HEAPF32[$0 >> 2]) + Math_fround($13_1 * HEAPF32[$0 + 4 >> 2])) + Math_fround($14 * HEAPF32[$0 + 8 >> 2])) - HEAPF32[$0 + 12 >> 2]);
    $10 = $6_1 > Math_fround(1.1920928955078125e-07);
    if (($10 | 0) != ($7_1 > Math_fround(1.1920928955078125e-07) | 0)) {
     $17_1 = HEAPF32[$4_1 + 4 >> 2];
     $18_1 = HEAPF32[$4_1 + 8 >> 2];
     $19_1 = HEAPF32[$4_1 >> 2];
     $4_1 = ($5_1 << 4) + $3_1 | 0;
     HEAP32[$4_1 + 12 >> 2] = 0;
     $7_1 = Math_fround(Math_fround(-$7_1) / Math_fround($6_1 - $7_1));
     $11 = Math_fround(Math_fround(1.0) - $7_1);
     HEAPF32[$4_1 + 8 >> 2] = Math_fround($14 * $7_1) + Math_fround($18_1 * $11);
     HEAPF32[$4_1 + 4 >> 2] = Math_fround($13_1 * $7_1) + Math_fround($11 * $17_1);
     HEAPF32[$4_1 >> 2] = Math_fround($12_1 * $7_1) + Math_fround($11 * $19_1);
     $5_1 = $5_1 + 1 | 0;
    }
    if (!$10) {
     $10 = HEAP32[$9_1 + 4 >> 2];
     $4_1 = ($5_1 << 4) + $3_1 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $10;
     $10 = HEAP32[$16_1 + 4 >> 2];
     $4_1 = $4_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $10;
     $5_1 = $5_1 + 1 | 0;
    }
    $4_1 = $9_1;
    $7_1 = $6_1;
    $15_1 = $15_1 + -1 | 0;
    if ($15_1) {
     continue
    }
    break;
   };
  }
  $4_1 = $8_1 > Math_fround(1.1920928955078125e-07);
  if (($4_1 | 0) != ($6_1 > Math_fround(1.1920928955078125e-07) | 0)) {
   $0 = ($2_1 + -1 << 4) + $1_1 | 0;
   $7_1 = HEAPF32[$0 >> 2];
   $11 = HEAPF32[$0 + 4 >> 2];
   $12_1 = HEAPF32[$0 + 8 >> 2];
   $13_1 = HEAPF32[$1_1 >> 2];
   $14 = HEAPF32[$1_1 + 4 >> 2];
   $17_1 = HEAPF32[$1_1 + 8 >> 2];
   $0 = ($5_1 << 4) + $3_1 | 0;
   HEAP32[$0 + 12 >> 2] = 0;
   $6_1 = Math_fround(Math_fround(-$6_1) / Math_fround($8_1 - $6_1));
   $8_1 = Math_fround(Math_fround(1.0) - $6_1);
   HEAPF32[$0 + 8 >> 2] = Math_fround($12_1 * $8_1) + Math_fround($6_1 * $17_1);
   HEAPF32[$0 + 4 >> 2] = Math_fround($8_1 * $11) + Math_fround($6_1 * $14);
   HEAPF32[$0 >> 2] = Math_fround($8_1 * $7_1) + Math_fround($6_1 * $13_1);
   $5_1 = $5_1 + 1 | 0;
  }
  if (!$4_1) {
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $0 = ($5_1 << 4) + $3_1 | 0;
   HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2_1;
   $1_1 = $1_1 + 8 | 0;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $0 = $0 + 8 | 0;
   HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2_1;
   $5_1 = $5_1 + 1 | 0;
  }
  return $5_1;
 }
 
 function $199($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0);
  $4_1 = global$0 - 880 | 0;
  global$0 = $4_1;
  $9_1 = HEAPF32[$1_1 + 64 >> 2];
  $8_1 = HEAPF32[$0 + 64 >> 2];
  $11 = $0 + 56 | 0;
  $5_1 = HEAP32[$11 + 4 >> 2];
  $7_1 = $4_1 + 296 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $5_1;
  $5_1 = HEAP32[$0 + 52 >> 2];
  HEAP32[$4_1 + 288 >> 2] = HEAP32[$0 + 48 >> 2];
  HEAP32[$4_1 + 292 >> 2] = $5_1;
  $5_1 = $196($0, $1_1, $4_1 + 560 | 0);
  $3_1 = 0;
  label$1 : {
   if (!$5_1) {
    break label$1
   }
   HEAP32[$4_1 + 280 >> 2] = -998637568;
   HEAP32[$4_1 + 284 >> 2] = 0;
   $3_1 = 0;
   if (($5_1 | 0) <= 0) {
    break label$1
   }
   $18_1 = Math_fround($8_1 + $9_1);
   $11 = $4_1 + 288 | 0;
   $15_1 = HEAPF32[$4_1 + 300 >> 2];
   $16_1 = HEAPF32[$4_1 + 296 >> 2];
   $17_1 = HEAPF32[$4_1 + 292 >> 2];
   $7_1 = 0;
   $14 = Math_fround(-1.0e3);
   $3_1 = $4_1 + 560 | 0;
   $9_1 = HEAPF32[$4_1 + 288 >> 2];
   while (1) {
    $8_1 = Math_fround($18_1 - Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 >> 2] * $9_1) + Math_fround(HEAPF32[$3_1 + 4 >> 2] * $17_1)) + Math_fround(HEAPF32[$3_1 + 8 >> 2] * $16_1)) - $15_1));
    label$4 : {
     if (!($8_1 >= Math_fround(0.0))) {
      break label$4
     }
     if (!!($8_1 > $14)) {
      HEAP32[$4_1 + 816 >> 2] = $6_1;
      $7_1 = 1;
      $14 = $8_1;
      break label$4;
     }
     if (!(Math_fround($8_1 + Math_fround(1.1920928955078125e-07)) >= $14)) {
      break label$4
     }
     HEAP32[($4_1 + 816 | 0) + ($7_1 << 2) >> 2] = $6_1;
     $7_1 = $7_1 + 1 | 0;
    }
    $3_1 = $3_1 + 16 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($5_1 | 0) != ($6_1 | 0)) {
     continue
    }
    break;
   };
   HEAPF32[$4_1 + 280 >> 2] = $14;
   HEAP32[$4_1 + 284 >> 2] = $7_1;
   if (($7_1 | 0) >= 1) {
    $3_1 = $4_1 + 304 | 0;
    $6_1 = $4_1 + 816 | 0;
    $5_1 = $7_1;
    while (1) {
     $12_1 = ($4_1 + 560 | 0) + (HEAP32[$6_1 >> 2] << 4) | 0;
     $10 = HEAP32[$12_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $10;
     $10 = HEAP32[$12_1 + 12 >> 2];
     $13_1 = $3_1 + 8 | 0;
     HEAP32[$13_1 >> 2] = HEAP32[$12_1 + 8 >> 2];
     HEAP32[$13_1 + 4 >> 2] = $10;
     $6_1 = $6_1 + 4 | 0;
     $3_1 = $3_1 + 16 | 0;
     $5_1 = $5_1 + -1 | 0;
     if ($5_1) {
      continue
     }
     break;
    };
   }
   $3_1 = 0;
   if (!$7_1) {
    break label$1
   }
   $5_1 = $4_1 + 292 | 0;
   HEAPF32[$5_1 >> 2] = -HEAPF32[$5_1 >> 2];
   $5_1 = $4_1 + 296 | 0;
   HEAPF32[$5_1 >> 2] = -HEAPF32[$5_1 >> 2];
   HEAPF32[$4_1 + 288 >> 2] = -HEAPF32[$4_1 + 288 >> 2];
   $10 = $1_1 + 56 | 0;
   $5_1 = HEAP32[$10 + 4 >> 2];
   $13_1 = $4_1 + 16 | 0;
   HEAP32[$13_1 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$13_1 + 4 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$4_1 + 8 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$4_1 + 12 >> 2] = $5_1;
   $1_1 = $196($1_1, $0, $4_1 + 560 | 0);
   $3_1 = 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = -998637568;
   HEAP32[$4_1 + 4 >> 2] = 0;
   $3_1 = 0;
   if (($1_1 | 0) <= 0) {
    break label$1
   }
   $0 = $4_1 + 8 | 0;
   $19_1 = HEAPF32[$4_1 + 20 >> 2];
   $15_1 = HEAPF32[$4_1 + 16 >> 2];
   $16_1 = HEAPF32[$4_1 + 12 >> 2];
   $5_1 = 0;
   $9_1 = Math_fround(-1.0e3);
   $3_1 = $4_1 + 560 | 0;
   $17_1 = HEAPF32[$4_1 + 8 >> 2];
   $6_1 = 0;
   while (1) {
    $8_1 = Math_fround($18_1 - Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 >> 2] * $17_1) + Math_fround(HEAPF32[$3_1 + 4 >> 2] * $16_1)) + Math_fround(HEAPF32[$3_1 + 8 >> 2] * $15_1)) - $19_1));
    label$11 : {
     if (!($8_1 >= Math_fround(0.0))) {
      break label$11
     }
     if (!!($8_1 > $9_1)) {
      HEAP32[$4_1 + 816 >> 2] = $6_1;
      $5_1 = 1;
      $9_1 = $8_1;
      break label$11;
     }
     if (!(Math_fround($8_1 + Math_fround(1.1920928955078125e-07)) >= $9_1)) {
      break label$11
     }
     HEAP32[($4_1 + 816 | 0) + ($5_1 << 2) >> 2] = $6_1;
     $5_1 = $5_1 + 1 | 0;
    }
    $3_1 = $3_1 + 16 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($1_1 | 0) != ($6_1 | 0)) {
     continue
    }
    break;
   };
   HEAPF32[$4_1 >> 2] = $9_1;
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   if (($5_1 | 0) >= 1) {
    $3_1 = $4_1 + 24 | 0;
    $6_1 = $4_1 + 816 | 0;
    $1_1 = $5_1;
    while (1) {
     $12_1 = ($4_1 + 560 | 0) + (HEAP32[$6_1 >> 2] << 4) | 0;
     $10 = HEAP32[$12_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $10;
     $10 = HEAP32[$12_1 + 12 >> 2];
     $13_1 = $3_1 + 8 | 0;
     HEAP32[$13_1 >> 2] = HEAP32[$12_1 + 8 >> 2];
     HEAP32[$13_1 + 4 >> 2] = $10;
     $6_1 = $6_1 + 4 | 0;
     $3_1 = $3_1 + 16 | 0;
     $1_1 = $1_1 + -1 | 0;
     if ($1_1) {
      continue
     }
     break;
    };
   }
   $3_1 = 0;
   if (!$5_1) {
    break label$1
   }
   label$16 : {
    if (!!($9_1 < $14)) {
     HEAPF32[$2_1 >> 2] = $9_1;
     HEAP32[$2_1 + 4 >> 2] = $5_1;
     $1_1 = HEAP32[$0 + 4 >> 2];
     HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 >> 2];
     HEAP32[$2_1 + 12 >> 2] = $1_1;
     $1_1 = $0 + 8 | 0;
     $0 = HEAP32[$1_1 + 4 >> 2];
     $11 = $2_1 + 16 | 0;
     HEAP32[$11 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$11 + 4 >> 2] = $0;
     $0 = $5_1 << 4;
     $3_1 = $0 + ($2_1 + 8 | 0) | 0;
     $6_1 = ($0 + $4_1 | 0) + 8 | 0;
     while (1) {
      $0 = HEAP32[$6_1 + 4 >> 2];
      HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $0;
      $1_1 = $6_1 + 8 | 0;
      $0 = HEAP32[$1_1 + 4 >> 2];
      $2_1 = $3_1 + 8 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $0;
      $6_1 = $6_1 + -16 | 0;
      $3_1 = $3_1 + -16 | 0;
      $5_1 = $5_1 + -1 | 0;
      if ($5_1) {
       continue
      }
      break;
     };
     break label$16;
    }
    HEAPF32[$2_1 >> 2] = $14;
    HEAP32[$2_1 + 4 >> 2] = $7_1;
    $0 = HEAP32[$11 + 4 >> 2];
    HEAP32[$2_1 + 8 >> 2] = HEAP32[$11 >> 2];
    HEAP32[$2_1 + 12 >> 2] = $0;
    $1_1 = $11 + 8 | 0;
    $0 = HEAP32[$1_1 + 4 >> 2];
    $5_1 = $2_1 + 16 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $0;
    $0 = $7_1 << 4;
    $3_1 = $0 + ($2_1 + 8 | 0) | 0;
    $6_1 = ($0 + $4_1 | 0) + 288 | 0;
    while (1) {
     $0 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $0;
     $1_1 = $6_1 + 8 | 0;
     $0 = HEAP32[$1_1 + 4 >> 2];
     $2_1 = $3_1 + 8 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $0;
     $6_1 = $6_1 + -16 | 0;
     $3_1 = $3_1 + -16 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue
     }
     break;
    };
   }
   $3_1 = 1;
  }
  global$0 = $4_1 + 880 | 0;
  return $3_1;
 }
 
 function $200($0) {
  $190($0);
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP32[$0 >> 2] = 5480;
  HEAP32[$0 + 4 >> 2] = 2;
 }
 
 function $201($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $191($0, $1_1, $2_1, $3_1);
 }
 
 function $202($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 96 >> 2];
 }
 
 function $203($0) {
  $0 = $0 | 0;
  $0 = HEAP32[$0 + 96 >> 2] + -2 | 0;
  if ($0 >>> 0 <= 2) {
   return HEAP32[($0 << 2) + 5640 >> 2]
  }
  return 0;
 }
 
 function $204($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  folding_inner3 : {
   folding_inner2 : {
    folding_inner1 : {
     folding_inner0 : {
      $4_1 = HEAP32[$0 + 96 >> 2] + -2 | 0;
      label$1 : {
       if ($4_1 >>> 0 > 2) {
        break label$1
       }
       label$2 : {
        switch ($4_1 - 1 | 0) {
        case 0:
         if ($1_1 >>> 0 > 2) {
          break label$1
         }
         label$5 : {
          switch ($1_1 - 1 | 0) {
          case 0:
           break folding_inner1;
          case 1:
           break label$5;
          default:
           break folding_inner0;
          };
         }
         break folding_inner2;
        case 1:
         break label$2;
        default:
         break folding_inner0;
        };
       }
       if ($1_1 >>> 0 > 5) {
        break label$1
       }
       label$8 : {
        switch ($1_1 - 1 | 0) {
        case 2:
         $1_1 = HEAP32[$0 + 104 >> 2];
         HEAP32[$2_1 >> 2] = HEAP32[$0 + 100 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $1_1;
         $1_1 = $2_1 + 8 | 0;
         $2_1 = $0 + 108 | 0;
         $4_1 = HEAP32[$2_1 + 4 >> 2];
         HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
         HEAP32[$1_1 + 4 >> 2] = $4_1;
         break folding_inner3;
        case 3:
         $4_1 = $0 + 124 | 0;
         $5_1 = HEAP32[$4_1 + 4 >> 2];
         $1_1 = $2_1 + 8 | 0;
         HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$1_1 + 4 >> 2] = $5_1;
         $1_1 = $0 + 116 | 0;
         $4_1 = HEAP32[$1_1 + 4 >> 2];
         HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $4_1;
         break folding_inner3;
        case 0:
         break folding_inner1;
        case 1:
         break folding_inner2;
        case 4:
         break label$8;
        default:
         break folding_inner0;
        };
       }
       $4_1 = $0 + 140 | 0;
       $5_1 = HEAP32[$4_1 + 4 >> 2];
       $1_1 = $2_1 + 8 | 0;
       HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$1_1 + 4 >> 2] = $5_1;
       $1_1 = $0 + 132 | 0;
       $4_1 = HEAP32[$1_1 + 4 >> 2];
       HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$2_1 + 4 >> 2] = $4_1;
       $2_1 = $0 + 156 | 0;
       $4_1 = HEAP32[$2_1 + 4 >> 2];
       $1_1 = $3_1 + 8 | 0;
       HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
       HEAP32[$1_1 + 4 >> 2] = $4_1;
       $0 = $0 + 148 | 0;
       $1_1 = HEAP32[$0 + 4 >> 2];
       HEAP32[$3_1 >> 2] = HEAP32[$0 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $1_1;
      }
      return;
     }
     $1_1 = HEAP32[$0 + 104 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$0 + 100 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $1_1;
     $1_1 = $2_1 + 8 | 0;
     $2_1 = $0 + 108 | 0;
     $4_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $4_1;
     $2_1 = $0 + 124 | 0;
     $4_1 = HEAP32[$2_1 + 4 >> 2];
     $1_1 = $3_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $4_1;
     $0 = $0 + 116 | 0;
     $1_1 = HEAP32[$0 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$0 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $1_1;
     return;
    }
    $4_1 = $0 + 124 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $1_1 = $2_1 + 8 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $5_1;
    $1_1 = $0 + 116 | 0;
    $4_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $2_1 = $0 + 140 | 0;
    $4_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $3_1 + 8 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $4_1;
    $0 = $0 + 132 | 0;
    $1_1 = HEAP32[$0 + 4 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $1_1;
    return;
   }
   $4_1 = $0 + 140 | 0;
   $5_1 = HEAP32[$4_1 + 4 >> 2];
   $1_1 = $2_1 + 8 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $5_1;
   $1_1 = $0 + 132 | 0;
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $2_1 = $0 + 108 | 0;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $3_1 + 8 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   $1_1 = HEAP32[$0 + 104 >> 2];
   HEAP32[$3_1 >> 2] = HEAP32[$0 + 100 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $1_1;
   return;
  }
  $2_1 = $0 + 156 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $3_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $0 = $0 + 148 | 0;
  $1_1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
 }
 
 function $205($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $0 = ($1_1 << 4) + $0 | 0;
  $1_1 = $0 + 108 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $2_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $0 = $0 + 100 | 0;
  $1_1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
 }
 
 function $206($0) {
  $0 = $0 | 0;
  $0 = HEAP32[$0 + 96 >> 2];
  return (($0 | 0) == 4 ? 4 : (($0 | 0) == 3) << 1) | 0;
 }
 
 function $207($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
 }
 
 function $208($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return 0;
 }
 
 function $209($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  return 0;
 }
 
 function $210($0) {
  $0 = $0 | 0;
  $193($0);
  $80($0);
 }
 
 function $213($0) {
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 1025;
  $1_1 = $0 + 120 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 128 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 136 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 144 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 152 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 160 >> 2] = 0;
  $1_1 = $0 + 312 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 320 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 328 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 336 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 344 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 352 >> 2] = 0;
  $1_1 = $0 + 504 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 512 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 520 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 528 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 536 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 544 >> 2] = 0;
  HEAP32[$0 + 736 >> 2] = 0;
  $1_1 = $0 + 728 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 720 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 712 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 704 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 696 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 772 >> 2] = 0;
  HEAP32[$0 + 776 >> 2] = 0;
  HEAP32[$0 + 800 >> 2] = 0;
  HEAP32[$0 + 780 >> 2] = 0;
 }
 
 function $214($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[$0 + 116 >> 2];
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[6021];
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[$2_1]($1_1) | 0;
   HEAP32[$0 + 116 >> 2] = 0;
  }
 }
 
 function $215($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = 0, $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = 0;
  $2_1 = HEAPF32[$0 + 84 >> 2];
  $5_1 = HEAPF32[$1_1 + 80 >> 2];
  $19_1 = $2_1 < $5_1;
  $34 = $19_1 ? 0 : -1;
  $9_1 = HEAPF32[$0 + 276 >> 2];
  $2_1 = $19_1 ? $2_1 : $5_1;
  $19_1 = $9_1 < $2_1;
  $41_1 = $19_1 ? 1 : $34;
  $5_1 = HEAPF32[$0 + 468 >> 2];
  $2_1 = $19_1 ? $9_1 : $2_1;
  $19_1 = $5_1 < $2_1;
  $34 = HEAPF32[$0 + 660 >> 2] < ($19_1 ? $5_1 : $2_1);
  $19_1 = $34 ? 3 : $19_1 ? 2 : $41_1;
  $7_1 = HEAPF32[$1_1 >> 2];
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (HEAPU8[23396]) {
       if (!$19_1) {
        $14 = HEAPF32[$0 + 588 >> 2];
        $15_1 = HEAPF32[$0 + 396 >> 2];
        $2_1 = Math_fround($14 - $15_1);
        $17_1 = HEAPF32[$0 + 584 >> 2];
        $16_1 = HEAPF32[$0 + 392 >> 2];
        $5_1 = Math_fround($17_1 - $16_1);
        $3_1 = HEAPF32[$0 + 580 >> 2];
        $22_1 = HEAPF32[$0 + 388 >> 2];
        $9_1 = Math_fround($3_1 - $22_1);
        $4_1 = HEAPF32[$1_1 + 8 >> 2];
        $8_1 = HEAPF32[$1_1 + 4 >> 2];
        break label$4;
       }
       $6_1 = HEAPF32[$0 + 196 >> 2];
       $10 = Math_fround($7_1 - $6_1);
       $17_1 = HEAPF32[$0 + 584 >> 2];
       $16_1 = HEAPF32[$0 + 392 >> 2];
       $5_1 = Math_fround($17_1 - $16_1);
       $8_1 = HEAPF32[$1_1 + 4 >> 2];
       $18_1 = HEAPF32[$0 + 200 >> 2];
       $2_1 = Math_fround($8_1 - $18_1);
       $3_1 = HEAPF32[$0 + 580 >> 2];
       $22_1 = HEAPF32[$0 + 388 >> 2];
       $9_1 = Math_fround($3_1 - $22_1);
       $4_1 = Math_fround(Math_fround($10 * $5_1) - Math_fround($2_1 * $9_1));
       $12_1 = Math_fround($4_1 * $4_1);
       $11 = $2_1;
       $14 = HEAPF32[$0 + 588 >> 2];
       $15_1 = HEAPF32[$0 + 396 >> 2];
       $2_1 = Math_fround($14 - $15_1);
       $4_1 = HEAPF32[$1_1 + 8 >> 2];
       $20 = HEAPF32[$0 + 204 >> 2];
       $23_1 = Math_fround($4_1 - $20);
       $24_1 = Math_fround(Math_fround($11 * $2_1) - Math_fround($23_1 * $5_1));
       $10 = Math_fround(Math_fround($23_1 * $9_1) - Math_fround($10 * $2_1));
       $40_1 = Math_fround($12_1 + Math_fround(Math_fround($24_1 * $24_1) + Math_fround($10 * $10)));
       if (($19_1 | 0) != 1) {
        break label$4
       }
       $7_1 = Math_fround($7_1 - HEAPF32[$0 + 4 >> 2]);
       $4_1 = Math_fround($4_1 - HEAPF32[$0 + 12 >> 2]);
       $8_1 = Math_fround($8_1 - HEAPF32[$0 + 8 >> 2]);
       $9_1 = Math_fround(0.0);
       break label$3;
      }
      $23_1 = HEAPF32[$1_1 + 8 >> 2];
      $24_1 = HEAPF32[$1_1 + 4 >> 2];
      label$7 : {
       label$8 : {
        label$9 : {
         if (!$19_1) {
          $6_1 = HEAPF32[$0 + 396 >> 2];
          $4_1 = HEAPF32[$0 + 588 >> 2];
          $9_1 = Math_fround($6_1 - $4_1);
          $15_1 = HEAPF32[$0 + 392 >> 2];
          $8_1 = HEAPF32[$0 + 584 >> 2];
          $25 = Math_fround($15_1 - $8_1);
          $16_1 = HEAPF32[$0 + 388 >> 2];
          $10 = HEAPF32[$0 + 580 >> 2];
          $26_1 = Math_fround($16_1 - $10);
          $5_1 = Math_fround($23_1 - $4_1);
          $31_1 = Math_fround($24_1 - $8_1);
          $32 = Math_fround($7_1 - $10);
          $2_1 = Math_fround($23_1 - $6_1);
          $20 = Math_fround($24_1 - $15_1);
          $18_1 = Math_fround($7_1 - $16_1);
          break label$9;
         }
         $28_1 = HEAPF32[$0 + 196 >> 2];
         $17_1 = Math_fround($7_1 - $28_1);
         $15_1 = HEAPF32[$0 + 392 >> 2];
         $8_1 = HEAPF32[$0 + 584 >> 2];
         $25 = Math_fround($15_1 - $8_1);
         $29_1 = HEAPF32[$0 + 200 >> 2];
         $14 = Math_fround($24_1 - $29_1);
         $16_1 = HEAPF32[$0 + 388 >> 2];
         $10 = HEAPF32[$0 + 580 >> 2];
         $26_1 = Math_fround($16_1 - $10);
         $2_1 = Math_fround(Math_fround($17_1 * $25) - Math_fround($14 * $26_1));
         $5_1 = Math_fround($2_1 * $2_1);
         $6_1 = HEAPF32[$0 + 396 >> 2];
         $4_1 = HEAPF32[$0 + 588 >> 2];
         $9_1 = Math_fround($6_1 - $4_1);
         $3_1 = HEAPF32[$0 + 204 >> 2];
         $22_1 = Math_fround($23_1 - $3_1);
         $2_1 = Math_fround(Math_fround($14 * $9_1) - Math_fround($22_1 * $25));
         $11 = Math_fround($2_1 * $2_1);
         $2_1 = Math_fround(Math_fround($22_1 * $26_1) - Math_fround($17_1 * $9_1));
         $5_1 = Math_fround($5_1 + Math_fround($11 + Math_fround($2_1 * $2_1)));
         $18_1 = Math_fround($7_1 - $16_1);
         $27_1 = Math_fround($29_1 - $8_1);
         $20 = Math_fround($24_1 - $15_1);
         $35 = Math_fround($28_1 - $10);
         $2_1 = Math_fround(Math_fround($18_1 * $27_1) - Math_fround($20 * $35));
         $11 = Math_fround($2_1 * $2_1);
         $36_1 = Math_fround($3_1 - $4_1);
         $2_1 = Math_fround($23_1 - $6_1);
         $12_1 = Math_fround(Math_fround($20 * $36_1) - Math_fround($2_1 * $27_1));
         $13_1 = Math_fround($12_1 * $12_1);
         $12_1 = Math_fround(Math_fround($2_1 * $35) - Math_fround($18_1 * $36_1));
         $12_1 = Math_fround($11 + Math_fround($13_1 + Math_fround($12_1 * $12_1)));
         $12_1 = $5_1 > $12_1 ? $5_1 : $12_1;
         $5_1 = Math_fround($29_1 - $15_1);
         $32 = Math_fround($7_1 - $10);
         $13_1 = Math_fround($28_1 - $16_1);
         $31_1 = Math_fround($24_1 - $8_1);
         $21 = Math_fround(Math_fround($5_1 * $32) - Math_fround($13_1 * $31_1));
         $30 = Math_fround($21 * $21);
         $21 = Math_fround($3_1 - $6_1);
         $11 = $5_1;
         $5_1 = Math_fround($23_1 - $4_1);
         $11 = Math_fround(Math_fround($21 * $31_1) - Math_fround($11 * $5_1));
         $13_1 = Math_fround(Math_fround($13_1 * $5_1) - Math_fround($21 * $32));
         $13_1 = Math_fround($30 + Math_fround(Math_fround($11 * $11) + Math_fround($13_1 * $13_1)));
         $40_1 = $12_1 > $13_1 ? $12_1 : $13_1;
         if (($19_1 | 0) != 1) {
          break label$9
         }
         $12_1 = HEAPF32[$0 + 4 >> 2];
         $37_1 = Math_fround($12_1 - $10);
         $11 = Math_fround($7_1 - $12_1);
         $13_1 = HEAPF32[$0 + 12 >> 2];
         $38 = Math_fround($13_1 - $4_1);
         $21 = HEAPF32[$0 + 8 >> 2];
         $39_1 = Math_fround($21 - $8_1);
         $30 = Math_fround($23_1 - $13_1);
         $33_1 = Math_fround($24_1 - $21);
         $9_1 = Math_fround(0.0);
         break label$8;
        }
        $12_1 = HEAPF32[$0 + 4 >> 2];
        $11 = Math_fround($7_1 - $12_1);
        $21 = HEAPF32[$0 + 8 >> 2];
        $33_1 = Math_fround($24_1 - $21);
        $3_1 = Math_fround(Math_fround($11 * $25) - Math_fround($33_1 * $26_1));
        $14 = Math_fround($3_1 * $3_1);
        $13_1 = HEAPF32[$0 + 12 >> 2];
        $30 = Math_fround($23_1 - $13_1);
        $3_1 = Math_fround(Math_fround($33_1 * $9_1) - Math_fround($30 * $25));
        $9_1 = Math_fround(Math_fround($30 * $26_1) - Math_fround($11 * $9_1));
        $9_1 = Math_fround($14 + Math_fround(Math_fround($3_1 * $3_1) + Math_fround($9_1 * $9_1)));
        $39_1 = Math_fround($21 - $8_1);
        $37_1 = Math_fround($12_1 - $10);
        $3_1 = Math_fround(Math_fround($18_1 * $39_1) - Math_fround($20 * $37_1));
        $14 = Math_fround($3_1 * $3_1);
        $38 = Math_fround($13_1 - $4_1);
        $3_1 = Math_fround(Math_fround($20 * $38) - Math_fround($2_1 * $39_1));
        $17_1 = Math_fround($3_1 * $3_1);
        $3_1 = Math_fround(Math_fround($2_1 * $37_1) - Math_fround($18_1 * $38));
        $3_1 = Math_fround($14 + Math_fround($17_1 + Math_fround($3_1 * $3_1)));
        $9_1 = $9_1 > $3_1 ? $9_1 : $3_1;
        $25 = Math_fround($21 - $15_1);
        $26_1 = Math_fround($12_1 - $16_1);
        $3_1 = Math_fround(Math_fround($25 * $32) - Math_fround($26_1 * $31_1));
        $14 = Math_fround($3_1 * $3_1);
        $27_1 = Math_fround($13_1 - $6_1);
        $3_1 = Math_fround(Math_fround($27_1 * $31_1) - Math_fround($25 * $5_1));
        $17_1 = Math_fround($3_1 * $3_1);
        $3_1 = Math_fround(Math_fround($26_1 * $5_1) - Math_fround($27_1 * $32));
        $3_1 = Math_fround($14 + Math_fround($17_1 + Math_fround($3_1 * $3_1)));
        $9_1 = $9_1 > $3_1 ? $9_1 : $3_1;
        $3_1 = HEAPF32[$0 + 204 >> 2];
        $22_1 = Math_fround($23_1 - $3_1);
        $29_1 = HEAPF32[$0 + 200 >> 2];
        $14 = Math_fround($24_1 - $29_1);
        $28_1 = HEAPF32[$0 + 196 >> 2];
        $17_1 = Math_fround($7_1 - $28_1);
        if (($19_1 | 0) == 2) {
         $4_1 = Math_fround($13_1 - $3_1);
         $8_1 = Math_fround($21 - $29_1);
         $10 = Math_fround($12_1 - $28_1);
         $5_1 = Math_fround(0.0);
         break label$7;
        }
        $36_1 = Math_fround($3_1 - $4_1);
        $27_1 = Math_fround($29_1 - $8_1);
        $35 = Math_fround($28_1 - $10);
       }
       $2_1 = Math_fround(Math_fround($11 * $27_1) - Math_fround($33_1 * $35));
       $8_1 = Math_fround($2_1 * $2_1);
       $2_1 = Math_fround(Math_fround($33_1 * $36_1) - Math_fround($30 * $27_1));
       $4_1 = Math_fround($2_1 * $2_1);
       $2_1 = Math_fround(Math_fround($30 * $35) - Math_fround($11 * $36_1));
       $2_1 = Math_fround($8_1 + Math_fround($4_1 + Math_fround($2_1 * $2_1)));
       $4_1 = Math_fround(Math_fround($17_1 * $39_1) - Math_fround($14 * $37_1));
       $8_1 = Math_fround($4_1 * $4_1);
       $4_1 = Math_fround(Math_fround($14 * $38) - Math_fround($22_1 * $39_1));
       $10 = Math_fround($4_1 * $4_1);
       $4_1 = Math_fround(Math_fround($22_1 * $37_1) - Math_fround($17_1 * $38));
       $4_1 = Math_fround($8_1 + Math_fround($10 + Math_fround($4_1 * $4_1)));
       $2_1 = $2_1 > $4_1 ? $2_1 : $4_1;
       $8_1 = Math_fround($21 - $29_1);
       $10 = Math_fround($12_1 - $28_1);
       $4_1 = Math_fround(Math_fround($8_1 * $32) - Math_fround($10 * $31_1));
       $20 = Math_fround($4_1 * $4_1);
       $4_1 = Math_fround($13_1 - $3_1);
       $18_1 = Math_fround(Math_fround($4_1 * $31_1) - Math_fround($8_1 * $5_1));
       $5_1 = Math_fround(Math_fround($10 * $5_1) - Math_fround($4_1 * $32));
       $5_1 = Math_fround($20 + Math_fround(Math_fround($18_1 * $18_1) + Math_fround($5_1 * $5_1)));
       $5_1 = $2_1 > $5_1 ? $2_1 : $5_1;
       $2_1 = Math_fround(0.0);
       if ($34) {
        break label$1
       }
       $27_1 = Math_fround($13_1 - $6_1);
       $25 = Math_fround($21 - $15_1);
       $26_1 = Math_fround($12_1 - $16_1);
       $2_1 = Math_fround($23_1 - $6_1);
       $20 = Math_fround($24_1 - $15_1);
       $18_1 = Math_fround($7_1 - $16_1);
      }
      $7_1 = Math_fround($29_1 - $15_1);
      $15_1 = Math_fround($28_1 - $16_1);
      $16_1 = Math_fround(Math_fround($11 * $7_1) - Math_fround($33_1 * $15_1));
      $6_1 = Math_fround($3_1 - $6_1);
      $7_1 = Math_fround(Math_fround($33_1 * $6_1) - Math_fround($30 * $7_1));
      $3_1 = Math_fround($7_1 * $7_1);
      $7_1 = Math_fround(Math_fround($30 * $15_1) - Math_fround($11 * $6_1));
      $7_1 = Math_fround(Math_fround($16_1 * $16_1) + Math_fround($3_1 + Math_fround($7_1 * $7_1)));
      $6_1 = Math_fround(Math_fround($17_1 * $25) - Math_fround($14 * $26_1));
      $11 = Math_fround($6_1 * $6_1);
      $6_1 = Math_fround(Math_fround($14 * $27_1) - Math_fround($22_1 * $25));
      $3_1 = Math_fround($6_1 * $6_1);
      $6_1 = Math_fround(Math_fround($22_1 * $26_1) - Math_fround($17_1 * $27_1));
      $6_1 = Math_fround($11 + Math_fround($3_1 + Math_fround($6_1 * $6_1)));
      $7_1 = $7_1 > $6_1 ? $7_1 : $6_1;
      $6_1 = Math_fround(Math_fround($8_1 * $18_1) - Math_fround($10 * $20));
      $11 = Math_fround($6_1 * $6_1);
      $6_1 = Math_fround(Math_fround($4_1 * $20) - Math_fround($8_1 * $2_1));
      $2_1 = Math_fround(Math_fround($10 * $2_1) - Math_fround($4_1 * $18_1));
      $2_1 = Math_fround($11 + Math_fround(Math_fround($6_1 * $6_1) + Math_fround($2_1 * $2_1)));
      $2_1 = $7_1 > $2_1 ? $7_1 : $2_1;
      break label$1;
     }
     $7_1 = Math_fround($7_1 - HEAPF32[$0 + 4 >> 2]);
     $8_1 = Math_fround($8_1 - HEAPF32[$0 + 8 >> 2]);
     $6_1 = Math_fround(Math_fround($7_1 * $5_1) - Math_fround($8_1 * $9_1));
     $4_1 = Math_fround($4_1 - HEAPF32[$0 + 12 >> 2]);
     $5_1 = Math_fround(Math_fround($8_1 * $2_1) - Math_fround($4_1 * $5_1));
     $2_1 = Math_fround(Math_fround($4_1 * $9_1) - Math_fround($7_1 * $2_1));
     $9_1 = Math_fround(Math_fround($6_1 * $6_1) + Math_fround(Math_fround($5_1 * $5_1) + Math_fround($2_1 * $2_1)));
     $20 = HEAPF32[$0 + 204 >> 2];
     $18_1 = HEAPF32[$0 + 200 >> 2];
     $6_1 = HEAPF32[$0 + 196 >> 2];
     $5_1 = Math_fround(0.0);
     if (($19_1 | 0) == 2) {
      break label$2
     }
    }
    $2_1 = Math_fround($17_1 - $18_1);
    $5_1 = Math_fround($3_1 - $6_1);
    $10 = Math_fround(Math_fround($7_1 * $2_1) - Math_fround($8_1 * $5_1));
    $11 = Math_fround($10 * $10);
    $10 = Math_fround($14 - $20);
    $2_1 = Math_fround(Math_fround($8_1 * $10) - Math_fround($4_1 * $2_1));
    $3_1 = Math_fround($2_1 * $2_1);
    $2_1 = Math_fround(Math_fround($4_1 * $5_1) - Math_fround($7_1 * $10));
    $5_1 = Math_fround($11 + Math_fround($3_1 + Math_fround($2_1 * $2_1)));
    $2_1 = Math_fround(0.0);
    if ($34) {
     break label$1
    }
   }
   $2_1 = Math_fround($16_1 - $18_1);
   $6_1 = Math_fround($22_1 - $6_1);
   $10 = Math_fround(Math_fround($7_1 * $2_1) - Math_fround($8_1 * $6_1));
   $11 = $8_1;
   $8_1 = Math_fround($15_1 - $20);
   $2_1 = Math_fround(Math_fround($11 * $8_1) - Math_fround($4_1 * $2_1));
   $11 = Math_fround($2_1 * $2_1);
   $2_1 = Math_fround(Math_fround($4_1 * $6_1) - Math_fround($7_1 * $8_1));
   $2_1 = Math_fround(Math_fround($10 * $10) + Math_fround($11 + Math_fround($2_1 * $2_1)));
  }
  $7_1 = Math_fround(Math_abs($40_1));
  $0 = $7_1 > Math_fround(-999999984306749440.0);
  $1_1 = $0 ? 0 : -1;
  $9_1 = Math_fround(Math_abs($9_1));
  $7_1 = $0 ? $7_1 : Math_fround(-999999984306749440.0);
  $0 = $9_1 > $7_1;
  $1_1 = $0 ? 1 : $1_1;
  $5_1 = Math_fround(Math_abs($5_1));
  $9_1 = $0 ? $9_1 : $7_1;
  $0 = $5_1 > $9_1;
  return Math_fround(Math_abs($2_1)) > ($0 ? $5_1 : $9_1) ? 3 : $0 ? 2 : $1_1;
 }
 
 function $216($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0);
  $6_1 = HEAP32[$0 + 780 >> 2];
  label$1 : {
   if (($6_1 | 0) < 1) {
    $1_1 = -1;
    break label$1;
   }
   $4_1 = $0 + 8 | 0;
   $8_1 = HEAPF32[$1_1 + 8 >> 2];
   $9_1 = HEAPF32[$1_1 + 4 >> 2];
   $10 = HEAPF32[$1_1 >> 2];
   $3_1 = HEAPF32[$0 + 784 >> 2];
   $3_1 = Math_fround($3_1 * $3_1);
   $0 = 0;
   $1_1 = -1;
   while (1) {
    $2_1 = Math_fround(HEAPF32[$4_1 + -4 >> 2] - $10);
    $5_1 = Math_fround($2_1 * $2_1);
    $2_1 = Math_fround(HEAPF32[$4_1 >> 2] - $9_1);
    $5_1 = Math_fround($5_1 + Math_fround($2_1 * $2_1));
    $2_1 = Math_fround(HEAPF32[$4_1 + 4 >> 2] - $8_1);
    $2_1 = Math_fround($5_1 + Math_fround($2_1 * $2_1));
    $7_1 = $2_1 < $3_1;
    $3_1 = $7_1 ? $2_1 : $3_1;
    $1_1 = $7_1 ? $0 : $1_1;
    $4_1 = $4_1 + 192 | 0;
    $0 = $0 + 1 | 0;
    if (($6_1 | 0) != ($0 | 0)) {
     continue
    }
    break;
   };
  }
  return $1_1;
 }
 
 function $218($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0 + 780 >> 2];
  label$1 : {
   if (($2_1 | 0) == 4) {
    $2_1 = $215($0, $1_1);
    $3_1 = (Math_imul($2_1, 192) + $0 | 0) + 120 | 0;
    $4_1 = HEAP32[$3_1 >> 2];
    if (!$4_1) {
     break label$1
    }
    $5_1 = HEAP32[6021];
    if (!$5_1) {
     break label$1
    }
    FUNCTION_TABLE[$5_1]($4_1) | 0;
    HEAP32[$3_1 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 780 >> 2] = $2_1 + 1;
  }
  $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $7(($0 + Math_imul($2_1, 192) | 0) + 4 | 0, $1_1, 192);
  return $2_1;
 }
 
 function $219($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0);
  $10 = global$0 - 16 | 0;
  global$0 = $10;
  $8_1 = HEAP32[$0 + 780 >> 2];
  label$1 : {
   if (($8_1 | 0) < 1) {
    break label$1
   }
   $9_1 = $8_1 + 1 | 0;
   $3_1 = (Math_imul($8_1, 192) + $0 | 0) + -188 | 0;
   while (1) {
    $15_1 = HEAPF32[$1_1 + 48 >> 2];
    $18_1 = HEAPF32[$1_1 + 8 >> 2];
    $19_1 = HEAPF32[$1_1 + 4 >> 2];
    $20 = HEAPF32[$1_1 >> 2];
    $16_1 = HEAPF32[$1_1 + 52 >> 2];
    $21 = HEAPF32[$1_1 + 24 >> 2];
    $11 = HEAPF32[$1_1 + 20 >> 2];
    $22_1 = HEAPF32[$1_1 + 16 >> 2];
    $4_1 = HEAPF32[$1_1 + 56 >> 2];
    $5_1 = HEAPF32[$1_1 + 40 >> 2];
    $6_1 = HEAPF32[$1_1 + 36 >> 2];
    $17_1 = HEAPF32[$1_1 + 32 >> 2];
    HEAP32[$3_1 + 60 >> 2] = 0;
    $13_1 = $4_1;
    $4_1 = HEAPF32[$3_1 >> 2];
    $23_1 = $6_1;
    $6_1 = HEAPF32[$3_1 + 4 >> 2];
    $12_1 = $5_1;
    $5_1 = HEAPF32[$3_1 + 8 >> 2];
    $17_1 = Math_fround($13_1 + Math_fround(Math_fround(Math_fround($17_1 * $4_1) + Math_fround($23_1 * $6_1)) + Math_fround($12_1 * $5_1)));
    HEAPF32[$3_1 + 56 >> 2] = $17_1;
    $16_1 = Math_fround($16_1 + Math_fround(Math_fround(Math_fround($4_1 * $22_1) + Math_fround($6_1 * $11)) + Math_fround($5_1 * $21)));
    HEAPF32[$3_1 + 52 >> 2] = $16_1;
    $15_1 = Math_fround($15_1 + Math_fround(Math_fround(Math_fround($4_1 * $20) + Math_fround($6_1 * $19_1)) + Math_fround($5_1 * $18_1)));
    HEAPF32[$3_1 + 48 >> 2] = $15_1;
    $18_1 = HEAPF32[$2_1 + 56 >> 2];
    $19_1 = HEAPF32[$2_1 + 40 >> 2];
    $20 = HEAPF32[$2_1 + 32 >> 2];
    $21 = HEAPF32[$2_1 + 36 >> 2];
    $11 = HEAPF32[$2_1 + 52 >> 2];
    $22_1 = HEAPF32[$2_1 + 24 >> 2];
    $24_1 = HEAPF32[$2_1 + 16 >> 2];
    $25 = HEAPF32[$2_1 + 20 >> 2];
    $4_1 = HEAPF32[$2_1 + 48 >> 2];
    $5_1 = HEAPF32[$2_1 + 8 >> 2];
    $6_1 = HEAPF32[$2_1 >> 2];
    $12_1 = HEAPF32[$2_1 + 4 >> 2];
    HEAP32[$3_1 + 44 >> 2] = 0;
    $13_1 = $4_1;
    $4_1 = HEAPF32[$3_1 + 16 >> 2];
    $26_1 = Math_fround($6_1 * $4_1);
    $6_1 = HEAPF32[$3_1 + 20 >> 2];
    $23_1 = $5_1;
    $5_1 = HEAPF32[$3_1 + 24 >> 2];
    $12_1 = Math_fround($13_1 + Math_fround(Math_fround($26_1 + Math_fround($12_1 * $6_1)) + Math_fround($23_1 * $5_1)));
    HEAPF32[$3_1 + 32 >> 2] = $12_1;
    $11 = Math_fround($11 + Math_fround(Math_fround(Math_fround($4_1 * $24_1) + Math_fround($6_1 * $25)) + Math_fround($5_1 * $22_1)));
    HEAPF32[$3_1 + 36 >> 2] = $11;
    $4_1 = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($4_1 * $20) + Math_fround($6_1 * $21)) + Math_fround($5_1 * $19_1)));
    HEAPF32[$3_1 + 40 >> 2] = $4_1;
    HEAPF32[$3_1 + 80 >> 2] = Math_fround(Math_fround(Math_fround($15_1 - $12_1) * HEAPF32[$3_1 - -64 >> 2]) + Math_fround(Math_fround($16_1 - $11) * HEAPF32[$3_1 + 68 >> 2])) + Math_fround(Math_fround($17_1 - $4_1) * HEAPF32[$3_1 + 72 >> 2]);
    $7_1 = $3_1 + 156 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] + 1;
    $3_1 = $3_1 + -192 | 0;
    $9_1 = $9_1 + -1 | 0;
    if (($9_1 | 0) > 1) {
     continue
    }
    break;
   };
   if (($8_1 | 0) < 1) {
    break label$1
   }
   $1_1 = Math_imul($8_1, 192);
   while (1) {
    $2_1 = $8_1;
    $8_1 = $2_1 + -1 | 0;
    $3_1 = $0 + $1_1 | 0;
    $9_1 = $3_1 + -188 | 0;
    $4_1 = HEAPF32[$3_1 + -108 >> 2];
    $6_1 = HEAPF32[$0 + 784 >> 2];
    label$4 : {
     if (!($4_1 <= $6_1)) {
      $3_1 = $3_1 + -72 | 0;
      $7_1 = HEAP32[$3_1 >> 2];
      label$6 : {
       if (!$7_1) {
        break label$6
       }
       $14 = HEAP32[6021];
       if (!$14) {
        break label$6
       }
       FUNCTION_TABLE[$14]($7_1) | 0;
       HEAP32[$3_1 >> 2] = 0;
      }
      $7_1 = $0;
      $3_1 = HEAP32[$0 + 780 >> 2];
      if (($2_1 | 0) != ($3_1 | 0)) {
       $2_1 = Math_imul($3_1 + -1 | 0, 192) + $0 | 0;
       $7($9_1, $2_1 + 4 | 0, 192);
       $3_1 = $2_1 + 120 | 0;
       HEAP32[$3_1 >> 2] = 0;
       HEAP32[$3_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 160 >> 2] = 0;
       $3_1 = $2_1 + 128 | 0;
       HEAP32[$3_1 >> 2] = 0;
       HEAP32[$3_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 136 >> 2] = 0;
       $2_1 = HEAP32[$0 + 780 >> 2];
      }
      $2_1 = $2_1 + -1 | 0;
      HEAP32[$7_1 + 780 >> 2] = $2_1;
      if ($2_1) {
       break label$4
      }
      $2_1 = HEAP32[6024];
      if (!$2_1) {
       break label$4
      }
      HEAP32[$10 + 12 >> 2] = $0;
      FUNCTION_TABLE[$2_1]($10 + 12 | 0);
      break label$4;
     }
     $5_1 = Math_fround(HEAPF32[$3_1 + -156 >> 2] - Math_fround(HEAPF32[$3_1 + -140 >> 2] - Math_fround(HEAPF32[$3_1 + -124 >> 2] * $4_1)));
     $13_1 = Math_fround($5_1 * $5_1);
     $5_1 = Math_fround(HEAPF32[$3_1 + -152 >> 2] - Math_fround(HEAPF32[$3_1 + -136 >> 2] - Math_fround($4_1 * HEAPF32[$3_1 + -120 >> 2])));
     $4_1 = Math_fround(HEAPF32[$3_1 + -148 >> 2] - Math_fround(HEAPF32[$3_1 + -132 >> 2] - Math_fround($4_1 * HEAPF32[$3_1 + -116 >> 2])));
     if (!!(Math_fround(Math_fround($13_1 + Math_fround($5_1 * $5_1)) + Math_fround($4_1 * $4_1)) > Math_fround($6_1 * $6_1))) {
      $3_1 = $3_1 + -72 | 0;
      $7_1 = HEAP32[$3_1 >> 2];
      label$9 : {
       if (!$7_1) {
        break label$9
       }
       $14 = HEAP32[6021];
       if (!$14) {
        break label$9
       }
       FUNCTION_TABLE[$14]($7_1) | 0;
       HEAP32[$3_1 >> 2] = 0;
      }
      $7_1 = $0;
      $3_1 = HEAP32[$0 + 780 >> 2];
      if (($2_1 | 0) != ($3_1 | 0)) {
       $2_1 = Math_imul($3_1 + -1 | 0, 192) + $0 | 0;
       $7($9_1, $2_1 + 4 | 0, 192);
       $3_1 = $2_1 + 120 | 0;
       HEAP32[$3_1 >> 2] = 0;
       HEAP32[$3_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 160 >> 2] = 0;
       $3_1 = $2_1 + 128 | 0;
       HEAP32[$3_1 >> 2] = 0;
       HEAP32[$3_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 136 >> 2] = 0;
       $2_1 = HEAP32[$0 + 780 >> 2];
      }
      $2_1 = $2_1 + -1 | 0;
      HEAP32[$7_1 + 780 >> 2] = $2_1;
      if ($2_1) {
       break label$4
      }
      $2_1 = HEAP32[6024];
      if (!$2_1) {
       break label$4
      }
      HEAP32[$10 + 8 >> 2] = $0;
      FUNCTION_TABLE[$2_1]($10 + 8 | 0);
      break label$4;
     }
     $2_1 = HEAP32[6022];
     if (!$2_1) {
      break label$4
     }
     FUNCTION_TABLE[$2_1]($9_1, HEAP32[$0 + 772 >> 2], HEAP32[$0 + 776 >> 2]) | 0;
    }
    $1_1 = $1_1 + -192 | 0;
    if (($8_1 + 1 | 0) > 1) {
     continue
    }
    break;
   };
  }
  global$0 = $10 + 16 | 0;
 }
 
 function $221($0, $1_1) {
  return Math_fround(HEAPF32[$0 + 232 >> 2] * HEAPF32[$1_1 + 232 >> 2]);
 }
 
 function $222($0, $1_1, $2_1) {
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = 5736;
  return $0;
 }
 
 function $223($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = 0, $37_1 = 0;
  $4_1 = global$0 - 192 | 0;
  global$0 = $4_1;
  label$1 : {
   if (HEAPF32[HEAP32[$0 + 4 >> 2] + 784 >> 2] < $3_1) {
    break label$1
   }
   $16_1 = HEAPF32[$2_1 + 8 >> 2];
   $7_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 8 >> 2] * $3_1) + $16_1);
   $19_1 = HEAPF32[$2_1 + 4 >> 2];
   $8_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 4 >> 2] * $3_1) + $19_1);
   $20 = HEAPF32[$2_1 >> 2];
   $15_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $3_1) + $20);
   $9_1 = HEAP32[$0 + 4 >> 2];
   $24_1 = HEAP32[$9_1 + 780 >> 2];
   $12_1 = HEAP32[$9_1 + 772 >> 2];
   $18_1 = HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2];
   $17_1 = ($12_1 | 0) == ($18_1 | 0);
   label$2 : {
    if (!$17_1) {
     $5_1 = HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2];
     $6_1 = Math_fround($15_1 - HEAPF32[$5_1 + 52 >> 2]);
     $10 = Math_fround($8_1 - HEAPF32[$5_1 + 56 >> 2]);
     $11 = Math_fround($7_1 - HEAPF32[$5_1 + 60 >> 2]);
     $21 = Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$5_1 + 12 >> 2]) + Math_fround($10 * HEAPF32[$5_1 + 28 >> 2])) + Math_fround($11 * HEAPF32[$5_1 + 44 >> 2]));
     $22_1 = Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$5_1 + 8 >> 2]) + Math_fround($10 * HEAPF32[$5_1 + 24 >> 2])) + Math_fround($11 * HEAPF32[$5_1 + 40 >> 2]));
     $6_1 = Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$5_1 + 4 >> 2]) + Math_fround($10 * HEAPF32[$5_1 + 20 >> 2])) + Math_fround($11 * HEAPF32[$5_1 + 36 >> 2]));
     $5_1 = $18_1;
     break label$2;
    }
    $6_1 = Math_fround($15_1 - HEAPF32[$12_1 + 52 >> 2]);
    $10 = Math_fround($8_1 - HEAPF32[$12_1 + 56 >> 2]);
    $11 = Math_fround($7_1 - HEAPF32[$12_1 + 60 >> 2]);
    $21 = Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$12_1 + 12 >> 2]) + Math_fround($10 * HEAPF32[$12_1 + 28 >> 2])) + Math_fround($11 * HEAPF32[$12_1 + 44 >> 2]));
    $22_1 = Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$12_1 + 8 >> 2]) + Math_fround($10 * HEAPF32[$12_1 + 24 >> 2])) + Math_fround($11 * HEAPF32[$12_1 + 40 >> 2]));
    $6_1 = Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$12_1 + 4 >> 2]) + Math_fround($10 * HEAPF32[$12_1 + 20 >> 2])) + Math_fround($11 * HEAPF32[$12_1 + 36 >> 2]));
    $5_1 = HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2];
   }
   $25 = HEAPF32[$5_1 + 20 >> 2];
   $26_1 = HEAPF32[$5_1 + 36 >> 2];
   $27_1 = HEAPF32[$5_1 + 40 >> 2];
   $28_1 = HEAPF32[$5_1 + 8 >> 2];
   $29_1 = HEAPF32[$5_1 + 24 >> 2];
   $30 = HEAPF32[$5_1 + 44 >> 2];
   $31_1 = HEAPF32[$5_1 + 60 >> 2];
   $10 = HEAPF32[$5_1 + 12 >> 2];
   $11 = HEAPF32[$5_1 + 52 >> 2];
   $32 = HEAPF32[$5_1 + 28 >> 2];
   $33_1 = HEAPF32[$5_1 + 56 >> 2];
   $34 = HEAPF32[$5_1 + 4 >> 2];
   HEAP32[$4_1 + 28 >> 2] = 0;
   $5_1 = $4_1 + 124 | 0;
   HEAP32[$5_1 >> 2] = 0;
   HEAP32[$5_1 + 4 >> 2] = 0;
   $5_1 = $4_1 + 132 | 0;
   HEAP32[$5_1 >> 2] = 0;
   HEAP32[$5_1 + 4 >> 2] = 0;
   $5_1 = $4_1 + 140 | 0;
   HEAP32[$5_1 >> 2] = 0;
   HEAP32[$5_1 + 4 >> 2] = 0;
   $5_1 = $4_1 + 148 | 0;
   HEAP32[$5_1 >> 2] = 0;
   HEAP32[$5_1 + 4 >> 2] = 0;
   HEAP32[$4_1 + 156 >> 2] = 0;
   $5_1 = $1_1 + 8 | 0;
   $13_1 = HEAP32[$5_1 + 4 >> 2];
   $14 = $4_1 + 72 | 0;
   HEAP32[$14 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$14 + 4 >> 2] = $13_1;
   $35 = $10;
   $10 = Math_fround($20 - $11);
   $11 = Math_fround($19_1 - $33_1);
   $16_1 = Math_fround($16_1 - $31_1);
   HEAPF32[$4_1 + 24 >> 2] = Math_fround(Math_fround($35 * $10) + Math_fround($32 * $11)) + Math_fround($30 * $16_1);
   HEAPF32[$4_1 + 20 >> 2] = Math_fround(Math_fround($10 * $28_1) + Math_fround($11 * $29_1)) + Math_fround($16_1 * $27_1);
   HEAP32[$4_1 + 12 >> 2] = 0;
   HEAPF32[$4_1 + 8 >> 2] = $21;
   HEAPF32[$4_1 + 4 >> 2] = $22_1;
   HEAPF32[$4_1 >> 2] = $6_1;
   HEAP32[$4_1 + 84 >> 2] = 0;
   HEAP32[$4_1 + 88 >> 2] = 0;
   HEAPF32[$4_1 + 80 >> 2] = $3_1;
   HEAP32[$4_1 + 92 >> 2] = 0;
   HEAP32[$4_1 + 96 >> 2] = 0;
   HEAP32[$4_1 + 116 >> 2] = 0;
   HEAP32[$4_1 + 120 >> 2] = 0;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$4_1 + 64 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 + 68 >> 2] = $5_1;
   HEAPF32[$4_1 + 16 >> 2] = Math_fround(Math_fround($10 * $34) + Math_fround($11 * $25)) + Math_fround($16_1 * $26_1);
   HEAP32[$4_1 + 60 >> 2] = 0;
   HEAPF32[$4_1 + 56 >> 2] = $7_1;
   HEAPF32[$4_1 + 52 >> 2] = $8_1;
   $1_1 = $2_1 + 8 | 0;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   $13_1 = $4_1 + 40 | 0;
   HEAP32[$13_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$13_1 + 4 >> 2] = $5_1;
   HEAPF32[$4_1 + 48 >> 2] = $15_1;
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$4_1 + 32 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 36 >> 2] = $1_1;
   $2_1 = $216($9_1, $4_1);
   $13_1 = HEAP32[$0 + 8 >> 2];
   $1_1 = HEAP32[$13_1 + 8 >> 2];
   $14 = HEAP32[$0 + 12 >> 2];
   $5_1 = HEAP32[$14 + 8 >> 2];
   HEAPF32[$4_1 + 96 >> 2] = HEAPF32[$1_1 + 232 >> 2] * HEAPF32[$5_1 + 232 >> 2];
   $3_1 = HEAPF32[$1_1 + 228 >> 2];
   $6_1 = HEAPF32[$5_1 + 228 >> 2];
   HEAPF32[$4_1 + 84 >> 2] = Math_min(Math_fround(Math_max(Math_fround($3_1 * $6_1), Math_fround(-10.0))), Math_fround(10.0));
   HEAPF32[$4_1 + 88 >> 2] = Math_min(Math_fround(Math_max(Math_fround(Math_fround($6_1 * HEAPF32[$1_1 + 236 >> 2]) + Math_fround($3_1 * HEAPF32[$5_1 + 236 >> 2])), Math_fround(-10.0))), Math_fround(10.0));
   HEAPF32[$4_1 + 92 >> 2] = Math_min(Math_fround(Math_max(Math_fround(Math_fround($6_1 * HEAPF32[$1_1 + 240 >> 2]) + Math_fround($3_1 * HEAPF32[$5_1 + 240 >> 2])), Math_fround(-10.0))), Math_fround(10.0));
   $9_1 = HEAP32[$1_1 + 204 >> 2];
   if (!(HEAPU8[$5_1 + 204 | 0] & 128 ? 0 : !($9_1 & 128))) {
    HEAPF32[$4_1 + 148 >> 2] = HEAPF32[$1_1 + 244 >> 2] + HEAPF32[$5_1 + 244 >> 2];
    HEAPF32[$4_1 + 144 >> 2] = Math_fround(1.0) / Math_fround(Math_fround(Math_fround(1.0) / HEAPF32[HEAP32[$13_1 + 8 >> 2] + 248 >> 2]) + Math_fround(Math_fround(1.0) / HEAPF32[HEAP32[$14 + 8 >> 2] + 248 >> 2]));
    HEAP32[$4_1 + 120 >> 2] = HEAP32[$4_1 + 120 >> 2] | 8;
    $9_1 = HEAP32[HEAP32[$13_1 + 8 >> 2] + 204 >> 2];
   }
   if (!(HEAPU8[HEAP32[$14 + 8 >> 2] + 205 | 0] & 2 ? 0 : !($9_1 & 512))) {
    HEAP32[$4_1 + 120 >> 2] = HEAP32[$4_1 + 120 >> 2] | 16
   }
   $3_1 = HEAPF32[$4_1 + 72 >> 2];
   label$8 : {
    if (!!(Math_fround(Math_abs($3_1)) > Math_fround(.7071067690849304))) {
     $8_1 = HEAPF32[$4_1 + 68 >> 2];
     $6_1 = Math_fround(Math_fround($3_1 * $3_1) + Math_fround($8_1 * $8_1));
     $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($6_1)));
     $15_1 = Math_fround($6_1 * $7_1);
     $11 = HEAPF32[$4_1 + 64 >> 2];
     $6_1 = Math_fround($7_1 * Math_fround(-$3_1));
     $10 = Math_fround($11 * $6_1);
     $3_1 = Math_fround($8_1 * $7_1);
     $7_1 = Math_fround($3_1 * Math_fround(-$11));
     $8_1 = Math_fround(0.0);
     break label$8;
    }
    $15_1 = HEAPF32[$4_1 + 64 >> 2];
    $7_1 = HEAPF32[$4_1 + 68 >> 2];
    $8_1 = Math_fround(Math_fround($15_1 * $15_1) + Math_fround($7_1 * $7_1));
    $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($8_1)));
    $10 = Math_fround($8_1 * $6_1);
    $8_1 = Math_fround($6_1 * Math_fround(-$7_1));
    $7_1 = Math_fround($3_1 * $8_1);
    $6_1 = Math_fround($15_1 * $6_1);
    $15_1 = Math_fround($6_1 * Math_fround(-$3_1));
    $3_1 = Math_fround(0.0);
   }
   $5_1 = $0 + 4 | 0;
   HEAPF32[$4_1 + 184 >> 2] = $10;
   HEAPF32[$4_1 + 180 >> 2] = $7_1;
   HEAPF32[$4_1 + 168 >> 2] = $3_1;
   HEAPF32[$4_1 + 164 >> 2] = $6_1;
   HEAPF32[$4_1 + 176 >> 2] = $15_1;
   HEAPF32[$4_1 + 160 >> 2] = $8_1;
   label$10 : {
    if (!$17_1) {
     $1_1 = $0 + 24 | 0;
     $9_1 = $0 + 28 | 0;
     $13_1 = $0 + 20 | 0;
     $14 = $0 + 16 | 0;
     break label$10;
    }
    $1_1 = $0 + 28 | 0;
    $9_1 = $0 + 24 | 0;
    $13_1 = $0 + 16 | 0;
    $14 = $0 + 20 | 0;
   }
   HEAP32[$4_1 + 112 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 + 108 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$4_1 + 104 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$4_1 + 100 >> 2] = HEAP32[$13_1 >> 2];
   $1_1 = HEAP32[$5_1 >> 2];
   label$12 : {
    if (($2_1 | 0) >= 0) {
     $1_1 = $1_1 + Math_imul($2_1, 192) | 0;
     $9_1 = $1_1 + 136 | 0;
     $3_1 = HEAPF32[$9_1 >> 2];
     $13_1 = $1_1 + 132 | 0;
     $6_1 = HEAPF32[$13_1 >> 2];
     $14 = $1_1 + 128 | 0;
     $7_1 = HEAPF32[$14 >> 2];
     $17_1 = $1_1 + 160 | 0;
     $36_1 = HEAP32[$17_1 >> 2];
     label$14 : {
      if (HEAPU8[$4_1 + 120 | 0] & 16) {
       $8_1 = Math_fround(Math_fround($7_1 * HEAPF32[$1_1 + 88 >> 2]) + Math_fround(0.0));
       if (!(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($3_1 * $3_1)) > Math_fround($8_1 * $8_1))) {
        break label$14
       }
      }
      $23_1 = $1_1 + 120 | 0;
      $37_1 = HEAP32[$23_1 >> 2];
      $7($1_1 + 4 | 0, $4_1, 192);
      HEAPF32[$14 >> 2] = $7_1;
      HEAP32[$23_1 >> 2] = $37_1;
      HEAPF32[$13_1 >> 2] = $6_1;
      HEAPF32[$9_1 >> 2] = $3_1;
     }
     HEAP32[$17_1 >> 2] = $36_1;
     break label$12;
    }
    $2_1 = $218($1_1, $4_1);
   }
   $9_1 = HEAP32[6025];
   label$16 : {
    if (!$9_1) {
     break label$16
    }
    $1_1 = $0 + 8 | 0;
    $0 = $0 + 12 | 0;
    if (HEAPU8[HEAP32[HEAP32[$0 >> 2] + 8 >> 2] + 204 | 0] & 8 ? 0 : !(HEAPU8[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2] + 204 | 0] & 8)) {
     break label$16
    }
    $14 = (HEAP32[$5_1 >> 2] + Math_imul($2_1, 192) | 0) + 4 | 0;
    $2_1 = ($12_1 | 0) != ($18_1 | 0);
    FUNCTION_TABLE[$9_1]($14, HEAP32[($2_1 ? $0 : $1_1) >> 2], HEAP32[$4_1 + 100 >> 2], HEAP32[$4_1 + 108 >> 2], HEAP32[($2_1 ? $1_1 : $0) >> 2], HEAP32[$4_1 + 104 >> 2], HEAP32[$4_1 + 112 >> 2]) | 0;
   }
   if ($24_1) {
    break label$1
   }
   $0 = HEAP32[6023];
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[$0]($5_1);
  }
  global$0 = $4_1 + 192 | 0;
 }
 
 function $225($0) {
  $0 = $0 | 0;
  $37($0);
 }
 
 function $226($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0 + 24 >> 2] = $2_1;
  HEAP32[$0 + 16 >> 2] = $1_1;
 }
 
 function $227($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0 + 28 >> 2] = $2_1;
  HEAP32[$0 + 20 >> 2] = $1_1;
 }
 
 function $229($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  HEAP32[$0 + 28 >> 2] = 5736;
  HEAP32[$0 >> 2] = 5876;
  HEAP32[$0 + 4 >> 2] = 2;
  HEAP32[$0 + 10444 >> 2] = $1_1;
  HEAP32[$0 + 64 >> 2] = 111;
  HEAP8[$0 + 24 | 0] = 1;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 60 >> 2] = 0;
  $2_1 = $0 + 12 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1) | 0), HEAP32[wasm2js_i32$0 + 68 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1) | 0), HEAP32[wasm2js_i32$0 + 72 >> 2] = wasm2js_i32$1;
  $2_1 = $0 + 5260 | 0;
  while (1) {
   $1_1 = $2_1;
   $3_1 = 0;
   while (1) {
    $4_1 = HEAP32[$0 + 10444 >> 2];
    (wasm2js_i32$0 = $1_1 + -5184 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $5_1, $3_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $4_1 = HEAP32[$0 + 10444 >> 2];
    (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 20 >> 2]]($4_1, $5_1, $3_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != 36) {
     continue
    }
    break;
   };
   $2_1 = $2_1 + 144 | 0;
   $5_1 = $5_1 + 1 | 0;
   if (($5_1 | 0) != 36) {
    continue
   }
   break;
  };
 }
 
 function $230($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[HEAP32[$0 >> 2] >> 2];
  $5_1 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
  label$1 : {
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($1_1, $4_1, $5_1)) {
    break label$1
   }
   HEAP32[$3_1 + 88 >> 2] = -1;
   HEAP32[$3_1 + 92 >> 2] = -1;
   HEAP32[$3_1 + 72 >> 2] = 0;
   HEAP32[$3_1 + 80 >> 2] = $4_1;
   HEAP32[$3_1 + 84 >> 2] = $4_1 + 4;
   HEAP32[$3_1 + 76 >> 2] = HEAP32[$4_1 + 192 >> 2];
   HEAP32[$3_1 + 64 >> 2] = -1;
   HEAP32[$3_1 + 68 >> 2] = -1;
   HEAP32[$3_1 + 48 >> 2] = 0;
   HEAP32[$3_1 + 56 >> 2] = $5_1;
   HEAP32[$3_1 + 60 >> 2] = $5_1 + 4;
   HEAP32[$3_1 + 52 >> 2] = HEAP32[$5_1 + 192 >> 2];
   if (!HEAP32[$0 + 8 >> 2]) {
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 72 | 0, $3_1 + 48 | 0, 0, 1) | 0;
    HEAP32[$0 + 8 >> 2] = $1_1;
    if (!$1_1) {
     break label$1
    }
   }
   $1_1 = $222($3_1 + 8 | 0, $3_1 + 72 | 0, $3_1 + 48 | 0);
   $0 = HEAP32[$0 + 8 >> 2];
   if (HEAP32[$2_1 + 8 >> 2] == 1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3_1 + 72 | 0, $3_1 + 48 | 0, $2_1, $1_1);
    break label$1;
   }
   $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $4_1, $5_1, $2_1, $1_1));
   if (!(HEAPF32[$2_1 + 12 >> 2] > $6_1)) {
    break label$1
   }
   HEAPF32[$2_1 + 12 >> 2] = $6_1;
  }
  global$0 = $3_1 + 96 | 0;
 }
 
 function $231($0, $1_1, $2_1) {
  HEAP32[((Math_imul($1_1, 144) + $0 | 0) + ($2_1 << 2) | 0) + 76 >> 2] = 24108;
 }
 
 function $232($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 5876;
  $1_1 = HEAP32[$0 + 20 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 24 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 20 >> 2] = 0;
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 24 | 0] = 1;
  return $0 | 0;
 }
 
 function $233($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 5876;
  $1_1 = HEAP32[$0 + 20 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 24 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 20 >> 2] = 0;
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 24 | 0] = 1;
  $37($0);
 }
 
 function $234($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[6026] = HEAP32[6026] + 1;
  $4_1 = 23392;
  if (HEAP32[$0 + 4 >> 2] & 2) {
   $3_1 = HEAP32[$1_1 + 192 >> 2];
   $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 20 >> 2]]($3_1, HEAPF32[5848]));
   HEAPF32[$5_1 + 12 >> 2] = $7_1;
   $3_1 = HEAP32[$2_1 + 192 >> 2];
   $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 20 >> 2]]($3_1, HEAPF32[5848]));
   HEAPF32[$5_1 + 8 >> 2] = $8_1;
   $4_1 = $7_1 < $8_1 ? $5_1 + 12 | 0 : $5_1 + 8 | 0;
  }
  $6_1 = HEAP32[$4_1 >> 2];
  $7_1 = HEAPF32[$2_1 + 184 >> 2];
  $8_1 = HEAPF32[$1_1 + 184 >> 2];
  $3_1 = HEAP32[$0 + 72 >> 2];
  $4_1 = HEAP32[$3_1 + 12 >> 2];
  label$2 : {
   label$3 : {
    if ($4_1) {
     HEAP32[$3_1 + 12 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 8 >> 2] = HEAP32[$3_1 + 8 >> 2] + -1;
     break label$3;
    }
    $4_1 = 0;
    if (HEAPU8[$0 + 4 | 0] & 4) {
     break label$2
    }
    $4_1 = $79(804);
   }
   HEAP32[$4_1 >> 2] = 1025;
   HEAP32[$4_1 + 160 >> 2] = 0;
   $3_1 = $4_1 + 152 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 144 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 136 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 128 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$4_1 + 120 >> 2] = 0;
   HEAP32[$4_1 + 124 >> 2] = 0;
   HEAP32[$4_1 + 312 >> 2] = 0;
   HEAP32[$4_1 + 316 >> 2] = 0;
   $3_1 = $4_1 + 320 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 328 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 336 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 344 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$4_1 + 352 >> 2] = 0;
   HEAP32[$4_1 + 504 >> 2] = 0;
   HEAP32[$4_1 + 508 >> 2] = 0;
   $3_1 = $4_1 + 512 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 520 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 528 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 536 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$4_1 + 544 >> 2] = 0;
   HEAP32[$4_1 + 736 >> 2] = 0;
   $3_1 = $4_1 + 728 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 720 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 712 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 704 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$4_1 + 696 >> 2] = 0;
   HEAP32[$4_1 + 700 >> 2] = 0;
   HEAP32[$4_1 + 772 >> 2] = $1_1;
   HEAP32[$4_1 + 776 >> 2] = $2_1;
   HEAP32[$4_1 + 780 >> 2] = 0;
   HEAP32[$4_1 + 784 >> 2] = $6_1;
   HEAPF32[$4_1 + 788 >> 2] = $8_1 < $7_1 ? $8_1 : $7_1;
   $3_1 = HEAP32[$0 + 12 >> 2];
   HEAP32[$4_1 + 800 >> 2] = $3_1;
   label$5 : {
    if (HEAP32[$0 + 16 >> 2] != ($3_1 | 0)) {
     break label$5
    }
    $6_1 = $3_1 ? $3_1 << 1 : 1;
    if (($3_1 | 0) >= ($6_1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$6_1) {
      break label$6
     }
     $9_1 = $79($6_1 << 2);
     $3_1 = HEAP32[$0 + 12 >> 2];
    }
    if (($3_1 | 0) >= 1) {
     $1_1 = 0;
     $2_1 = $3_1;
     while (1) {
      HEAP32[$1_1 + $9_1 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] + $1_1 >> 2];
      $1_1 = $1_1 + 4 | 0;
      $2_1 = $2_1 + -1 | 0;
      if ($2_1) {
       continue
      }
      break;
     };
    }
    $1_1 = HEAP32[$0 + 20 >> 2];
    if ($1_1) {
     if (HEAPU8[$0 + 24 | 0]) {
      $80($1_1);
      $3_1 = HEAP32[$0 + 12 >> 2];
     }
     HEAP32[$0 + 20 >> 2] = 0;
    }
    HEAP32[$0 + 20 >> 2] = $9_1;
    HEAP32[$0 + 16 >> 2] = $6_1;
    HEAP8[$0 + 24 | 0] = 1;
   }
   HEAP32[$0 + 12 >> 2] = $3_1 + 1;
   HEAP32[HEAP32[$0 + 20 >> 2] + ($3_1 << 2) >> 2] = $4_1;
  }
  global$0 = $5_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $235($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  $3_1 = HEAP32[$1_1 + 780 >> 2];
  if (($3_1 | 0) >= 1) {
   $2_1 = $1_1 + 4 | 0;
   while (1) {
    $214($2_1);
    $2_1 = $2_1 + 192 | 0;
    $4_1 = $4_1 + 1 | 0;
    $3_1 = HEAP32[$1_1 + 780 >> 2];
    if (($4_1 | 0) < ($3_1 | 0)) {
     continue
    }
    break;
   };
  }
  label$3 : {
   if (!$3_1) {
    break label$3
   }
   $2_1 = HEAP32[6024];
   if (!$2_1) {
    break label$3
   }
   HEAP32[$0 + 12 >> 2] = $1_1;
   FUNCTION_TABLE[$2_1]($0 + 12 | 0);
  }
  HEAP32[$1_1 + 780 >> 2] = 0;
  global$0 = $0 + 16 | 0;
 }
 
 function $236($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0;
  HEAP32[6026] = HEAP32[6026] + -1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1_1);
  $2_1 = $0 + 20 | 0;
  $3_1 = HEAP32[$2_1 >> 2];
  $5_1 = HEAP32[$1_1 + 800 >> 2];
  $6_1 = $5_1 << 2;
  $4_1 = $3_1 + $6_1 | 0;
  $8_1 = HEAP32[$4_1 >> 2];
  $9_1 = $4_1;
  $10 = $3_1;
  $3_1 = $0 + 12 | 0;
  $4_1 = HEAP32[$3_1 >> 2] + -1 | 0;
  $7_1 = $4_1 << 2;
  HEAP32[$9_1 >> 2] = HEAP32[$10 + $7_1 >> 2];
  HEAP32[HEAP32[$2_1 >> 2] + $7_1 >> 2] = $8_1;
  HEAP32[$3_1 >> 2] = $4_1;
  HEAP32[HEAP32[HEAP32[$2_1 >> 2] + $6_1 >> 2] + 800 >> 2] = $5_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $0 = HEAP32[$0 + 72 >> 2];
   $2_1 = HEAP32[$0 + 16 >> 2];
   if ($2_1 >>> 0 > $1_1 >>> 0 | $2_1 + Math_imul(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]) >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = HEAP32[$0 + 12 >> 2];
   HEAP32[$0 + 12 >> 2] = $1_1;
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   return;
  }
  $80($1_1);
 }
 
 function $237($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $3_1;
  HEAP32[$5_1 + 8 >> 2] = $0;
  $3_1 = HEAP32[HEAP32[$2_1 + 4 >> 2] + 4 >> 2];
  $6_1 = HEAP32[HEAP32[$1_1 + 4 >> 2] + 4 >> 2];
  label$1 : {
   if (($4_1 | 0) == 1) {
    $0 = HEAP32[((Math_imul($6_1, 144) + $0 | 0) + ($3_1 << 2) | 0) + 76 >> 2];
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $5_1 + 8 | 0, $1_1, $2_1) | 0;
    break label$1;
   }
   $0 = HEAP32[((Math_imul($6_1, 144) + $0 | 0) + ($3_1 << 2) | 0) + 5260 >> 2];
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $5_1 + 8 | 0, $1_1, $2_1) | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $238($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $0 = 0;
  $1_1 = HEAP32[$1_1 + 204 >> 2];
  label$1 : {
   if ($1_1 & 4) {
    break label$1
   }
   $2_1 = HEAP32[$2_1 + 204 >> 2];
   if ($2_1 & 4) {
    break label$1
   }
   if (!($1_1 & 3)) {
    return 1
   }
   $0 = !($2_1 & 3);
  }
  return $0 | 0;
 }
 
 function $239($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    $0 = HEAP32[$1_1 + 220 >> 2] + -2 | 0;
    if ($0 >>> 0 > 3) {
     break label$2
    }
    label$3 : {
     switch ($0 - 1 | 0) {
     case 0:
     case 1:
      break label$2;
     default:
      break label$3;
     };
    }
    $3_1 = HEAP32[$2_1 + 220 >> 2] + -2 | 0;
    if ($3_1 >>> 0 > 3) {
     break label$2
    }
    $0 = 0;
    switch ($3_1 - 1 | 0) {
    case 0:
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   label$4 : {
    if (HEAP32[$1_1 + 280 >> 2]) {
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $2_1)) {
      break label$4
     }
    }
    $0 = 1;
    if (!HEAP32[$2_1 + 280 >> 2]) {
     break label$1
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1, $1_1)) {
     break label$1
    }
   }
   $0 = 0;
  }
  return $0 | 0;
 }
 
 function $240($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $0;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = 5984;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1, $4_1, $3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $241($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $0 = HEAP32[$0 + 68 >> 2];
  $2_1 = HEAP32[$0 + 12 >> 2];
  if ($2_1) {
   HEAP32[$0 + 12 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -1;
   return $2_1 | 0;
  }
  return $79($1_1) | 0;
 }
 
 function $242($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $0 = HEAP32[$0 + 68 >> 2];
   $2_1 = HEAP32[$0 + 16 >> 2];
   if ($2_1 >>> 0 > $1_1 >>> 0 | Math_imul(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]) + $2_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = HEAP32[$0 + 12 >> 2];
   HEAP32[$0 + 12 >> 2] = $1_1;
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   return;
  }
  $80($1_1);
 }
 
 function $243($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function $244($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[HEAP32[$0 + 20 >> 2] + ($1_1 << 2) >> 2];
 }
 
 function $245($0) {
  $0 = $0 | 0;
  if (!HEAP32[$0 + 12 >> 2]) {
   return 0
  }
  return HEAP32[$0 + 20 >> 2];
 }
 
 function $246($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 72 >> 2];
 }
 
 function $249($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1_1;
  $1_1 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[$1_1 + 64 >> 2]]($2_1, $1_1, HEAP32[$0 + 4 >> 2]);
  return 0;
 }
 
 function $251($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 6072;
  $1_1 = HEAP32[$0 + 12 >> 2];
  if ($1_1) {
   $2_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
   HEAP32[$0 + 12 >> 2] = 0;
  }
  $1_1 = HEAP32[$0 + 8 >> 2];
  if ($1_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $1_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 60 >> 2]]($1_1, HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 8 >> 2] = 0;
  }
  HEAP32[$0 + 24 >> 2] = -1;
  HEAP32[$0 + 28 >> 2] = -1;
  $1_1 = $0 + 32 | 0;
  HEAP32[$1_1 >> 2] = -1;
  HEAP32[$1_1 + 4 >> 2] = -1;
  return $0 | 0;
 }
 
 function $252($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 6072;
  $1_1 = HEAP32[$0 + 12 >> 2];
  if ($1_1) {
   $2_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
   HEAP32[$0 + 12 >> 2] = 0;
  }
  $1_1 = HEAP32[$0 + 8 >> 2];
  if ($1_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $1_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 60 >> 2]]($1_1, HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 8 >> 2] = 0;
  }
  HEAP32[$0 + 24 >> 2] = -1;
  HEAP32[$0 + 28 >> 2] = -1;
  $1_1 = $0 + 32 | 0;
  HEAP32[$1_1 >> 2] = -1;
  HEAP32[$1_1 + 4 >> 2] = -1;
  $37($0);
 }
 
 function $253($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = HEAP32[$0 + 12 >> 2];
  if (!$3_1) {
   $3_1 = HEAP32[$0 + 4 >> 2];
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, HEAP32[$1_1 + 8 >> 2], HEAP32[$2_1 + 8 >> 2]) | 0;
   HEAP32[$0 + 12 >> 2] = $3_1;
  }
  HEAP32[HEAP32[$0 + 16 >> 2] + 4 >> 2] = $3_1;
  $4_1 = HEAP32[$0 + 4 >> 2];
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $1_1, $2_1, $3_1, 1) | 0;
  $4_1 = HEAP32[$0 + 16 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
  $4_1 = HEAP32[$0 + 16 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $1_1, $2_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2]);
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] >> 2]]($3_1) | 0;
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 60 >> 2]]($0, $3_1);
 }
 
 function $254($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$0 + 16 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 8 >> 2]]($6_1, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
  $6_1 = HEAP32[$0 + 16 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 12 >> 2]]($6_1, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
  HEAP32[$5_1 + 28 >> 2] = $3_1;
  HEAP32[$5_1 + 44 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$5_1 + 40 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$5_1 + 24 >> 2] = $1_1;
  HEAP32[$5_1 + 36 >> 2] = HEAP32[$1_1 + 12 >> 2];
  $1_1 = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$5_1 + 32 >> 2] = $1_1;
  HEAP32[$5_1 + 4 >> 2] = $4_1;
  HEAP32[$5_1 + 20 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$5_1 + 16 >> 2] = HEAP32[$0 + 36 >> 2];
  HEAP32[$5_1 >> 2] = $2_1;
  HEAP32[$5_1 + 12 >> 2] = HEAP32[$2_1 + 12 >> 2];
  $3_1 = HEAP32[$2_1 + 8 >> 2];
  HEAP32[$5_1 + 8 >> 2] = $3_1;
  $2_1 = HEAP32[$0 + 8 >> 2];
  if (!$2_1) {
   $2_1 = HEAP32[$0 + 12 >> 2];
   if (!$2_1) {
    $2_1 = HEAP32[$0 + 4 >> 2];
    $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1, $1_1, $3_1) | 0;
    HEAP32[$0 + 12 >> 2] = $2_1;
   }
   HEAP32[HEAP32[$0 + 16 >> 2] + 4 >> 2] = $2_1;
   $1_1 = HEAP32[$0 + 4 >> 2];
   $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $5_1 + 24 | 0, $5_1, $2_1, 1) | 0;
   HEAP32[$0 + 8 >> 2] = $2_1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $5_1 + 24 | 0, $5_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2]);
  global$0 = $5_1 + 48 | 0;
 }
 
 function $255($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0;
  $5_1 = global$0 + -64 | 0;
  global$0 = $5_1;
  label$1 : {
   if (!(!HEAP32[$2_1 + 72 >> 2] | !HEAP32[$3_1 + 72 >> 2])) {
    $90($2_1 + 72 | 0, $0, $3_1 + 72 | 0, $1_1, $4_1);
    break label$1;
   }
   $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 88 >> 2]]($2_1) | 0;
   if (!$7_1) {
    break label$1
   }
   $15_1 = $5_1 + 16 | 0;
   $16_1 = $5_1 + 48 | 0;
   while (1) {
    $7_1 = $7_1 + -1 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 120 >> 2]]($2_1, $7_1, $0, $5_1 + 32 | 0, $16_1);
    $8_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 88 >> 2]]($3_1) | 0;
    if ($8_1) {
     while (1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 120 >> 2]]($3_1, $7_1, $1_1, $5_1, $15_1);
      $8_1 = $8_1 + -1 | 0;
      if (!(HEAPF32[$5_1 + 16 >> 2] < HEAPF32[$5_1 + 32 >> 2] | HEAPF32[$5_1 >> 2] > HEAPF32[$5_1 + 48 >> 2] | (HEAPF32[$5_1 + 20 >> 2] < HEAPF32[$5_1 + 36 >> 2] | HEAPF32[$5_1 + 4 >> 2] > HEAPF32[$5_1 + 52 >> 2]) | (HEAPF32[$5_1 + 24 >> 2] < HEAPF32[$5_1 + 40 >> 2] | HEAPF32[$5_1 + 8 >> 2] > HEAPF32[$5_1 + 56 >> 2]))) {
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       label$7 : {
        if (($6_1 | 0) != HEAP32[$4_1 + 8 >> 2]) {
         break label$7
        }
        $9_1 = $6_1 ? $6_1 << 1 : 1;
        if (($6_1 | 0) >= ($9_1 | 0)) {
         break label$7
        }
        label$8 : {
         if (!$9_1) {
          $12_1 = 0;
          break label$8;
         }
         $12_1 = $79($9_1 << 3);
         $6_1 = HEAP32[$4_1 + 4 >> 2];
        }
        $13_1 = HEAP32[$4_1 + 12 >> 2];
        label$10 : {
         label$11 : {
          if (($6_1 | 0) >= 1) {
           $10 = $13_1;
           $11 = $12_1;
           $14 = $6_1;
           while (1) {
            $17_1 = HEAP32[$10 + 4 >> 2];
            HEAP32[$11 >> 2] = HEAP32[$10 >> 2];
            HEAP32[$11 + 4 >> 2] = $17_1;
            $10 = $10 + 8 | 0;
            $11 = $11 + 8 | 0;
            $14 = $14 + -1 | 0;
            if ($14) {
             continue
            }
            break;
           };
           break label$11;
          }
          if (!$13_1) {
           break label$10
          }
         }
         if (HEAPU8[$4_1 + 16 | 0]) {
          $80($13_1);
          $6_1 = HEAP32[$4_1 + 4 >> 2];
         }
         HEAP32[$4_1 + 12 >> 2] = 0;
        }
        HEAP32[$4_1 + 12 >> 2] = $12_1;
        HEAP8[$4_1 + 16 | 0] = 1;
        HEAP32[$4_1 + 8 >> 2] = $9_1;
       }
       HEAP32[$4_1 + 4 >> 2] = $6_1 + 1;
       $6_1 = HEAP32[$4_1 + 12 >> 2] + ($6_1 << 3) | 0;
       HEAP32[$6_1 + 4 >> 2] = $8_1;
       HEAP32[$6_1 >> 2] = $7_1;
      }
      if ($8_1) {
       continue
      }
      break;
     }
    }
    if ($7_1) {
     continue
    }
    break;
   };
  }
  global$0 = $5_1 - -64 | 0;
 }
 
 function $256($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0);
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  label$1 : {
   if (HEAP32[$2_1 + 72 >> 2]) {
    $8_1 = $0 + 20 | 0;
    $17_1 = HEAPF32[$8_1 >> 2];
    $12_1 = $5_1 + 20 | 0;
    HEAP32[$12_1 >> 2] = HEAP32[$8_1 >> 2];
    $6_1 = $0 + 36 | 0;
    $18_1 = HEAPF32[$6_1 >> 2];
    $8_1 = $5_1 + 24 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$5_1 + 12 >> 2] = 0;
    $19_1 = HEAPF32[$0 + 4 >> 2];
    HEAP32[$5_1 + 16 >> 2] = HEAP32[$0 + 4 >> 2];
    $22_1 = HEAPF32[$0 + 32 >> 2];
    HEAP32[$5_1 + 8 >> 2] = HEAP32[$0 + 32 >> 2];
    $23_1 = HEAPF32[$0 + 16 >> 2];
    HEAP32[$5_1 + 4 >> 2] = HEAP32[$0 + 16 >> 2];
    $24_1 = HEAPF32[$0 >> 2];
    HEAP32[$5_1 >> 2] = HEAP32[$0 >> 2];
    $11 = HEAPF32[$0 + 52 >> 2];
    $13_1 = HEAPF32[$0 + 56 >> 2];
    $6_1 = $0 + 24 | 0;
    $9_1 = HEAPF32[$6_1 >> 2];
    $7_1 = HEAP32[$6_1 >> 2];
    $14 = HEAPF32[$0 + 48 >> 2];
    $10 = HEAPF32[$0 + 8 >> 2];
    $20 = HEAP32[$0 + 8 >> 2];
    $6_1 = $0 + 40 | 0;
    $21 = HEAPF32[$6_1 >> 2];
    $0 = $5_1 + 40 | 0;
    HEAP32[$0 >> 2] = HEAP32[$6_1 >> 2];
    $6_1 = $5_1 + 36 | 0;
    HEAP32[$6_1 >> 2] = $7_1;
    $7_1 = $5_1 + 28 | 0;
    HEAP32[$7_1 >> 2] = 0;
    $26_1 = $5_1 + 44 | 0;
    HEAP32[$26_1 >> 2] = 0;
    HEAP32[$5_1 + 60 >> 2] = 0;
    $11 = Math_fround(-$11);
    $25 = Math_fround(Math_fround(Math_fround($9_1 * $11) - Math_fround($14 * $10)) - Math_fround($13_1 * $21));
    $15_1 = HEAPF32[$1_1 + 48 >> 2];
    $16_1 = Math_fround($15_1 * $10);
    $10 = HEAPF32[$1_1 + 52 >> 2];
    $16_1 = Math_fround($16_1 + Math_fround($10 * $9_1));
    $9_1 = HEAPF32[$1_1 + 56 >> 2];
    HEAPF32[$5_1 + 56 >> 2] = $25 + Math_fround($16_1 + Math_fround($9_1 * $21));
    HEAPF32[$5_1 + 52 >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $11) - Math_fround($14 * $19_1)) - Math_fround($13_1 * $18_1)) + Math_fround(Math_fround(Math_fround($15_1 * $19_1) + Math_fround($10 * $17_1)) + Math_fround($9_1 * $18_1));
    HEAP32[$5_1 + 32 >> 2] = $20;
    HEAPF32[$5_1 + 48 >> 2] = Math_fround(Math_fround(Math_fround($23_1 * $11) - Math_fround($14 * $24_1)) - Math_fround($13_1 * $22_1)) + Math_fround(Math_fround(Math_fround($15_1 * $24_1) + Math_fround($10 * $23_1)) + Math_fround($9_1 * $22_1));
    $13_1 = HEAPF32[$1_1 + 36 >> 2];
    $14 = HEAPF32[$1_1 + 20 >> 2];
    $17_1 = HEAPF32[$1_1 + 40 >> 2];
    $18_1 = HEAPF32[$1_1 + 24 >> 2];
    $19_1 = HEAPF32[$1_1 + 32 >> 2];
    $9_1 = HEAPF32[$1_1 >> 2];
    $10 = HEAPF32[$1_1 + 16 >> 2];
    $21 = HEAPF32[$8_1 >> 2];
    $11 = HEAPF32[$12_1 >> 2];
    $15_1 = HEAPF32[$1_1 + 4 >> 2];
    $25 = HEAPF32[$0 >> 2];
    $16_1 = HEAPF32[$1_1 + 8 >> 2];
    $27_1 = HEAPF32[$6_1 >> 2];
    $28_1 = HEAPF32[$5_1 + 16 >> 2];
    $29_1 = HEAPF32[$5_1 + 32 >> 2];
    HEAP32[$26_1 >> 2] = 0;
    HEAPF32[$0 >> 2] = Math_fround(Math_fround($16_1 * $29_1) + Math_fround($18_1 * $27_1)) + Math_fround($17_1 * $25);
    HEAPF32[$6_1 >> 2] = Math_fround(Math_fround($15_1 * $29_1) + Math_fround($14 * $27_1)) + Math_fround($13_1 * $25);
    HEAP32[$7_1 >> 2] = 0;
    HEAPF32[$8_1 >> 2] = Math_fround(Math_fround($16_1 * $28_1) + Math_fround($18_1 * $11)) + Math_fround($17_1 * $21);
    HEAPF32[$12_1 >> 2] = Math_fround(Math_fround($15_1 * $28_1) + Math_fround($14 * $11)) + Math_fround($13_1 * $21);
    HEAPF32[$5_1 + 32 >> 2] = Math_fround(Math_fround($9_1 * $29_1) + Math_fround($10 * $27_1)) + Math_fround($19_1 * $25);
    HEAPF32[$5_1 + 16 >> 2] = Math_fround(Math_fround($9_1 * $28_1) + Math_fround($10 * $11)) + Math_fround($19_1 * $21);
    HEAP32[$5_1 + 12 >> 2] = 0;
    HEAPF32[$5_1 + 8 >> 2] = Math_fround(Math_fround($16_1 * $24_1) + Math_fround($18_1 * $23_1)) + Math_fround($17_1 * $22_1);
    HEAPF32[$5_1 + 4 >> 2] = Math_fround(Math_fround($15_1 * $24_1) + Math_fround($14 * $23_1)) + Math_fround($13_1 * $22_1);
    HEAPF32[$5_1 >> 2] = Math_fround(Math_fround($9_1 * $24_1) + Math_fround($10 * $23_1)) + Math_fround($19_1 * $22_1);
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $5_1, $5_1 - -64 | 0, $5_1 + 80 | 0);
    $88($2_1 + 72 | 0, $5_1 - -64 | 0, $4_1);
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $1_1, $5_1 - -64 | 0, $5_1 + 80 | 0);
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 88 >> 2]]($2_1) | 0;
   if (!$1_1) {
    break label$1
   }
   $26_1 = $5_1 + 16 | 0;
   while (1) {
    $1_1 = $1_1 + -1 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 120 >> 2]]($2_1, $1_1, $0, $5_1, $26_1);
    if (!(HEAPF32[$5_1 + 80 >> 2] < HEAPF32[$5_1 >> 2] | HEAPF32[$5_1 + 64 >> 2] > HEAPF32[$5_1 + 16 >> 2] | (HEAPF32[$5_1 + 84 >> 2] < HEAPF32[$5_1 + 4 >> 2] | HEAPF32[$5_1 + 68 >> 2] > HEAPF32[$5_1 + 20 >> 2]) | (HEAPF32[$5_1 + 88 >> 2] < HEAPF32[$5_1 + 8 >> 2] | HEAPF32[$5_1 + 72 >> 2] > HEAPF32[$5_1 + 24 >> 2]))) {
     $7_1 = HEAP32[$4_1 + 4 >> 2];
     label$5 : {
      if (($7_1 | 0) != HEAP32[$4_1 + 8 >> 2]) {
       break label$5
      }
      $20 = $7_1 ? $7_1 << 1 : 1;
      if (($7_1 | 0) >= ($20 | 0)) {
       break label$5
      }
      label$6 : {
       if (!$20) {
        $3_1 = 0;
        break label$6;
       }
       $3_1 = $79($20 << 2);
       $7_1 = HEAP32[$4_1 + 4 >> 2];
      }
      $12_1 = HEAP32[$4_1 + 12 >> 2];
      label$8 : {
       label$9 : {
        if (($7_1 | 0) >= 1) {
         $8_1 = $3_1;
         $6_1 = $12_1;
         while (1) {
          HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
          $8_1 = $8_1 + 4 | 0;
          $6_1 = $6_1 + 4 | 0;
          $7_1 = $7_1 + -1 | 0;
          if ($7_1) {
           continue
          }
          break;
         };
         break label$9;
        }
        if (!$12_1) {
         break label$8
        }
       }
       if (HEAPU8[$4_1 + 16 | 0]) {
        $80($12_1)
       }
       HEAP32[$4_1 + 12 >> 2] = 0;
       $7_1 = HEAP32[$4_1 + 4 >> 2];
      }
      HEAP32[$4_1 + 12 >> 2] = $3_1;
      HEAP8[$4_1 + 16 | 0] = 1;
      HEAP32[$4_1 + 8 >> 2] = $20;
     }
     HEAP32[HEAP32[$4_1 + 12 >> 2] + ($7_1 << 2) >> 2] = $1_1;
     HEAP32[$4_1 + 4 >> 2] = HEAP32[$4_1 + 4 >> 2] + 1;
    }
    if ($1_1) {
     continue
    }
    break;
   };
  }
  global$0 = $5_1 + 96 | 0;
 }
 
 function $257($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = 0, $55_1 = 0, $56_1 = Math_fround(0);
  $7_1 = global$0 - 432 | 0;
  global$0 = $7_1;
  $11 = HEAP32[$2_1 + 12 >> 2];
  $30 = HEAPF32[$11 + 56 >> 2];
  $31_1 = HEAPF32[$11 + 52 >> 2];
  $32 = HEAPF32[$11 + 40 >> 2];
  $33_1 = HEAPF32[$11 + 36 >> 2];
  $34 = HEAPF32[$11 + 24 >> 2];
  $35 = HEAPF32[$11 + 20 >> 2];
  $9_1 = HEAP32[$1_1 + 12 >> 2];
  $36_1 = HEAPF32[$9_1 + 56 >> 2];
  $37_1 = HEAPF32[$9_1 + 52 >> 2];
  $38 = HEAPF32[$9_1 + 40 >> 2];
  $39_1 = HEAPF32[$9_1 + 36 >> 2];
  $40_1 = HEAPF32[$9_1 + 24 >> 2];
  $41_1 = HEAPF32[$9_1 + 20 >> 2];
  $42 = HEAPF32[$11 + 48 >> 2];
  $43_1 = HEAPF32[$11 + 32 >> 2];
  $44_1 = HEAPF32[$11 + 16 >> 2];
  $45_1 = HEAPF32[$11 + 8 >> 2];
  $46_1 = HEAPF32[$11 + 4 >> 2];
  $47 = HEAPF32[$11 >> 2];
  $48_1 = HEAPF32[$9_1 + 48 >> 2];
  $49_1 = HEAPF32[$9_1 + 32 >> 2];
  $50_1 = HEAPF32[$9_1 + 16 >> 2];
  $51_1 = HEAPF32[$9_1 + 8 >> 2];
  $52_1 = HEAPF32[$9_1 + 4 >> 2];
  $53_1 = HEAPF32[$9_1 >> 2];
  HEAP32[$7_1 + 424 >> 2] = 1008981770;
  HEAP32[$7_1 + 352 >> 2] = 1008981770;
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 112 >> 2]]($3_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 112 >> 2]]($4_1);
  if ($6_1) {
   $55_1 = $7_1 + 16 | 0;
   while (1) {
    $11 = HEAP32[$5_1 >> 2];
    HEAP32[$0 + 24 >> 2] = $11;
    HEAP32[$0 + 32 >> 2] = HEAP32[$5_1 + 4 >> 2];
    $9_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 84 >> 2]]($3_1) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 20 >> 2]]($9_1, $11, $7_1 + 360 | 0);
    $11 = HEAP32[$0 + 32 >> 2];
    $9_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 84 >> 2]]($4_1) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 20 >> 2]]($9_1, $11, $7_1 + 288 | 0);
    HEAP32[$7_1 + 372 >> 2] = 0;
    HEAP32[$7_1 + 388 >> 2] = 0;
    HEAP32[$7_1 + 404 >> 2] = 0;
    $18_1 = HEAPF32[$7_1 + 376 >> 2];
    $19_1 = HEAPF32[$7_1 + 380 >> 2];
    $8_1 = HEAPF32[$7_1 + 384 >> 2];
    $56_1 = Math_fround($37_1 + Math_fround(Math_fround(Math_fround($50_1 * $18_1) + Math_fround($41_1 * $19_1)) + Math_fround($40_1 * $8_1)));
    HEAPF32[$7_1 + 380 >> 2] = $56_1;
    $20 = HEAPF32[$7_1 + 360 >> 2];
    $21 = HEAPF32[$7_1 + 364 >> 2];
    $14 = HEAPF32[$7_1 + 368 >> 2];
    $23_1 = Math_fround($37_1 + Math_fround(Math_fround(Math_fround($50_1 * $20) + Math_fround($41_1 * $21)) + Math_fround($40_1 * $14)));
    HEAPF32[$7_1 + 364 >> 2] = $23_1;
    $12_1 = HEAPF32[$7_1 + 392 >> 2];
    $13_1 = HEAPF32[$7_1 + 396 >> 2];
    $10 = HEAPF32[$7_1 + 400 >> 2];
    $24_1 = Math_fround($37_1 + Math_fround(Math_fround(Math_fround($50_1 * $12_1) + Math_fround($41_1 * $13_1)) + Math_fround($40_1 * $10)));
    HEAPF32[$7_1 + 396 >> 2] = $24_1;
    $15_1 = Math_fround($36_1 + Math_fround(Math_fround(Math_fround($49_1 * $18_1) + Math_fround($39_1 * $19_1)) + Math_fround($38 * $8_1)));
    HEAPF32[$7_1 + 384 >> 2] = $15_1;
    $16_1 = Math_fround($48_1 + Math_fround(Math_fround(Math_fround($53_1 * $12_1) + Math_fround($52_1 * $13_1)) + Math_fround($51_1 * $10)));
    HEAPF32[$7_1 + 392 >> 2] = $16_1;
    $25 = Math_fround($48_1 + Math_fround(Math_fround(Math_fround($53_1 * $20) + Math_fround($52_1 * $21)) + Math_fround($51_1 * $14)));
    HEAPF32[$7_1 + 360 >> 2] = $25;
    $8_1 = Math_fround($48_1 + Math_fround(Math_fround(Math_fround($53_1 * $18_1) + Math_fround($52_1 * $19_1)) + Math_fround($51_1 * $8_1)));
    HEAPF32[$7_1 + 376 >> 2] = $8_1;
    $26_1 = Math_fround($36_1 + Math_fround(Math_fround(Math_fround($49_1 * $20) + Math_fround($39_1 * $21)) + Math_fround($38 * $14)));
    HEAPF32[$7_1 + 368 >> 2] = $26_1;
    $10 = Math_fround($36_1 + Math_fround(Math_fround(Math_fround($49_1 * $12_1) + Math_fround($39_1 * $13_1)) + Math_fround($38 * $10)));
    HEAPF32[$7_1 + 400 >> 2] = $10;
    $14 = HEAPF32[$7_1 + 296 >> 2];
    $12_1 = HEAPF32[$7_1 + 288 >> 2];
    $13_1 = HEAPF32[$7_1 + 292 >> 2];
    HEAP32[$7_1 + 300 >> 2] = 0;
    $27_1 = Math_fround($31_1 + Math_fround(Math_fround(Math_fround($44_1 * $12_1) + Math_fround($35 * $13_1)) + Math_fround($34 * $14)));
    HEAPF32[$7_1 + 292 >> 2] = $27_1;
    $28_1 = Math_fround($30 + Math_fround(Math_fround(Math_fround($43_1 * $12_1) + Math_fround($33_1 * $13_1)) + Math_fround($32 * $14)));
    HEAPF32[$7_1 + 296 >> 2] = $28_1;
    $29_1 = Math_fround($42 + Math_fround(Math_fround(Math_fround($47 * $12_1) + Math_fround($46_1 * $13_1)) + Math_fround($45_1 * $14)));
    HEAPF32[$7_1 + 288 >> 2] = $29_1;
    $14 = HEAPF32[$7_1 + 312 >> 2];
    $12_1 = HEAPF32[$7_1 + 304 >> 2];
    $13_1 = HEAPF32[$7_1 + 308 >> 2];
    HEAP32[$7_1 + 316 >> 2] = 0;
    $18_1 = Math_fround($31_1 + Math_fround(Math_fround(Math_fround($44_1 * $12_1) + Math_fround($35 * $13_1)) + Math_fround($34 * $14)));
    HEAPF32[$7_1 + 308 >> 2] = $18_1;
    $19_1 = Math_fround($30 + Math_fround(Math_fround(Math_fround($43_1 * $12_1) + Math_fround($33_1 * $13_1)) + Math_fround($32 * $14)));
    HEAPF32[$7_1 + 312 >> 2] = $19_1;
    $20 = Math_fround($42 + Math_fround(Math_fround(Math_fround($47 * $12_1) + Math_fround($46_1 * $13_1)) + Math_fround($45_1 * $14)));
    HEAPF32[$7_1 + 304 >> 2] = $20;
    $17_1 = HEAPF32[$7_1 + 328 >> 2];
    $12_1 = HEAPF32[$7_1 + 320 >> 2];
    $13_1 = HEAPF32[$7_1 + 324 >> 2];
    HEAP32[$7_1 + 332 >> 2] = 0;
    $21 = Math_fround($31_1 + Math_fround(Math_fround(Math_fround($44_1 * $12_1) + Math_fround($35 * $13_1)) + Math_fround($34 * $17_1)));
    HEAPF32[$7_1 + 324 >> 2] = $21;
    $14 = Math_fround($42 + Math_fround(Math_fround(Math_fround($47 * $12_1) + Math_fround($46_1 * $13_1)) + Math_fround($45_1 * $17_1)));
    HEAPF32[$7_1 + 320 >> 2] = $14;
    $12_1 = Math_fround($30 + Math_fround(Math_fround(Math_fround($43_1 * $12_1) + Math_fround($33_1 * $13_1)) + Math_fround($32 * $17_1)));
    HEAPF32[$7_1 + 328 >> 2] = $12_1;
    $13_1 = Math_fround($15_1 - $26_1);
    $15_1 = Math_fround($16_1 - $25);
    $8_1 = Math_fround($8_1 - $25);
    $16_1 = Math_fround($10 - $26_1);
    $17_1 = Math_fround(Math_fround($13_1 * $15_1) - Math_fround($8_1 * $16_1));
    $10 = Math_fround($24_1 - $23_1);
    $24_1 = Math_fround($8_1 * $10);
    $8_1 = Math_fround($56_1 - $23_1);
    $15_1 = Math_fround($24_1 - Math_fround($8_1 * $15_1));
    $10 = Math_fround(Math_fround($8_1 * $16_1) - Math_fround($13_1 * $10));
    $8_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($15_1 * $15_1) + Math_fround(Math_fround($10 * $10) + Math_fround($17_1 * $17_1))))));
    $16_1 = Math_fround($17_1 * $8_1);
    HEAPF32[$7_1 + 412 >> 2] = $16_1;
    $10 = Math_fround($10 * $8_1);
    HEAPF32[$7_1 + 408 >> 2] = $10;
    $8_1 = Math_fround($15_1 * $8_1);
    HEAPF32[$7_1 + 416 >> 2] = $8_1;
    HEAPF32[$7_1 + 420 >> 2] = Math_fround($26_1 * $8_1) + Math_fround(Math_fround($25 * $10) + Math_fround($23_1 * $16_1));
    $13_1 = Math_fround($19_1 - $28_1);
    $15_1 = Math_fround($14 - $29_1);
    $8_1 = Math_fround($20 - $29_1);
    $16_1 = Math_fround($12_1 - $28_1);
    $12_1 = Math_fround(Math_fround($13_1 * $15_1) - Math_fround($8_1 * $16_1));
    $10 = Math_fround($21 - $27_1);
    $14 = Math_fround($8_1 * $10);
    $8_1 = Math_fround($18_1 - $27_1);
    $15_1 = Math_fround($14 - Math_fround($8_1 * $15_1));
    $10 = Math_fround(Math_fround($8_1 * $16_1) - Math_fround($13_1 * $10));
    $8_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($15_1 * $15_1) + Math_fround(Math_fround($10 * $10) + Math_fround($12_1 * $12_1))))));
    $16_1 = Math_fround($12_1 * $8_1);
    HEAPF32[$7_1 + 340 >> 2] = $16_1;
    $10 = Math_fround($10 * $8_1);
    HEAPF32[$7_1 + 336 >> 2] = $10;
    $8_1 = Math_fround($15_1 * $8_1);
    HEAPF32[$7_1 + 344 >> 2] = $8_1;
    HEAPF32[$7_1 + 348 >> 2] = Math_fround($28_1 * $8_1) + Math_fround(Math_fround($29_1 * $10) + Math_fround($27_1 * $16_1));
    $6_1 = $6_1 + -1 | 0;
    label$3 : {
     if (!$195($7_1 + 360 | 0, $7_1 + 288 | 0)) {
      break label$3
     }
     if (!$199($7_1 + 360 | 0, $7_1 + 288 | 0, $7_1 + 8 | 0)) {
      break label$3
     }
     $22_1 = HEAP32[$7_1 + 12 >> 2];
     if (!$22_1) {
      break label$3
     }
     $54_1 = ($22_1 << 4) + $55_1 | 0;
     while (1) {
      $8_1 = HEAPF32[$7_1 + 8 >> 2];
      $9_1 = HEAP32[$0 + 16 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 8 >> 2]]($9_1, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
      $9_1 = HEAP32[$0 + 16 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 12 >> 2]]($9_1, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
      $22_1 = $22_1 + -1 | 0;
      $8_1 = Math_fround(-$8_1);
      $11 = HEAP32[$0 + 12 >> 2];
      if (!$11) {
       $9_1 = HEAP32[$0 + 4 >> 2];
       $11 = FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 12 >> 2]]($9_1, HEAP32[$1_1 + 8 >> 2], HEAP32[$2_1 + 8 >> 2]) | 0;
       HEAP32[$0 + 12 >> 2] = $11;
      }
      $9_1 = HEAP32[$0 + 16 >> 2];
      HEAP32[$9_1 + 4 >> 2] = $11;
      FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 16 >> 2]]($9_1, $55_1, $54_1, $8_1);
      $54_1 = $54_1 + -16 | 0;
      if ($22_1) {
       continue
      }
      break;
     };
    }
    $5_1 = $5_1 + 8 | 0;
    if ($6_1) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 116 >> 2]]($3_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 116 >> 2]]($4_1);
  global$0 = $7_1 + 432 | 0;
 }
 
 function $258($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = 0, $43_1 = 0, $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 976 | 0;
  global$0 = $5_1;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 80 >> 2]]($3_1) | 0) == 2) {
    $7_1 = HEAP32[$3_1 + 156 >> 2];
    $6_1 = $7_1 + -1 | 0;
    HEAP32[$0 + 28 >> 2] = $6_1;
    if (!$7_1) {
     break label$1
    }
    while (1) {
     $258($0, $1_1, $2_1, HEAP32[HEAP32[$3_1 + 164 >> 2] + ($6_1 << 2) >> 2], $4_1);
     $7_1 = HEAP32[$0 + 28 >> 2];
     $6_1 = $7_1 + -1 | 0;
     HEAP32[$0 + 28 >> 2] = $6_1;
     if ($7_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 80 >> 2]]($4_1) | 0) == 2) {
    $7_1 = HEAP32[$4_1 + 156 >> 2];
    $6_1 = $7_1 + -1 | 0;
    HEAP32[$0 + 36 >> 2] = $6_1;
    if (!$7_1) {
     break label$1
    }
    while (1) {
     $258($0, $1_1, $2_1, $3_1, HEAP32[HEAP32[$4_1 + 164 >> 2] + ($6_1 << 2) >> 2]);
     $7_1 = HEAP32[$0 + 36 >> 2];
     $6_1 = $7_1 + -1 | 0;
     HEAP32[$0 + 36 >> 2] = $6_1;
     if ($7_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $6_1 = HEAP32[$1_1 + 12 >> 2];
   $7_1 = $6_1 + 8 | 0;
   $13_1 = HEAP32[$7_1 >> 2];
   $7_1 = HEAP32[$7_1 + 4 >> 2];
   $27_1 = HEAP32[$6_1 >> 2];
   $28_1 = HEAP32[$6_1 + 4 >> 2];
   $11 = $6_1 + 24 | 0;
   $12_1 = HEAP32[$11 + 4 >> 2];
   $8_1 = $5_1 + 936 | 0;
   HEAP32[$8_1 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $12_1;
   $8_1 = $5_1 + 920 | 0;
   HEAP32[$8_1 >> 2] = $13_1;
   HEAP32[$8_1 + 4 >> 2] = $7_1;
   $7_1 = HEAP32[$6_1 + 16 >> 2];
   $13_1 = HEAP32[$6_1 + 20 >> 2];
   $11 = $6_1 + 40 | 0;
   $12_1 = HEAP32[$11 + 4 >> 2];
   $8_1 = $5_1 + 952 | 0;
   HEAP32[$8_1 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $12_1;
   $8_1 = HEAP32[$6_1 + 32 >> 2];
   $11 = HEAP32[$6_1 + 36 >> 2];
   $15_1 = $6_1 + 56 | 0;
   $16_1 = HEAP32[$15_1 + 4 >> 2];
   $12_1 = $5_1 + 968 | 0;
   HEAP32[$12_1 >> 2] = HEAP32[$15_1 >> 2];
   HEAP32[$12_1 + 4 >> 2] = $16_1;
   HEAP32[$5_1 + 912 >> 2] = $27_1;
   HEAP32[$5_1 + 916 >> 2] = $28_1;
   HEAP32[$5_1 + 928 >> 2] = $7_1;
   HEAP32[$5_1 + 932 >> 2] = $13_1;
   HEAP32[$5_1 + 944 >> 2] = $8_1;
   HEAP32[$5_1 + 948 >> 2] = $11;
   $7_1 = HEAP32[$6_1 + 52 >> 2];
   HEAP32[$5_1 + 960 >> 2] = HEAP32[$6_1 + 48 >> 2];
   HEAP32[$5_1 + 964 >> 2] = $7_1;
   $6_1 = HEAP32[$2_1 + 12 >> 2];
   $7_1 = $6_1 + 8 | 0;
   $13_1 = HEAP32[$7_1 >> 2];
   $7_1 = HEAP32[$7_1 + 4 >> 2];
   $27_1 = HEAP32[$6_1 >> 2];
   $28_1 = HEAP32[$6_1 + 4 >> 2];
   $11 = $6_1 + 24 | 0;
   $12_1 = HEAP32[$11 + 4 >> 2];
   $8_1 = $5_1 + 872 | 0;
   HEAP32[$8_1 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $12_1;
   $8_1 = $5_1 + 856 | 0;
   HEAP32[$8_1 >> 2] = $13_1;
   HEAP32[$8_1 + 4 >> 2] = $7_1;
   $7_1 = HEAP32[$6_1 + 16 >> 2];
   $13_1 = HEAP32[$6_1 + 20 >> 2];
   $11 = $6_1 + 40 | 0;
   $12_1 = HEAP32[$11 + 4 >> 2];
   $8_1 = $5_1 + 888 | 0;
   HEAP32[$8_1 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $12_1;
   $8_1 = HEAP32[$6_1 + 32 >> 2];
   $11 = HEAP32[$6_1 + 36 >> 2];
   $15_1 = $6_1 + 56 | 0;
   $16_1 = HEAP32[$15_1 + 4 >> 2];
   $12_1 = $5_1 + 904 | 0;
   HEAP32[$12_1 >> 2] = HEAP32[$15_1 >> 2];
   HEAP32[$12_1 + 4 >> 2] = $16_1;
   HEAP32[$5_1 + 848 >> 2] = $27_1;
   HEAP32[$5_1 + 852 >> 2] = $28_1;
   HEAP32[$5_1 + 864 >> 2] = $7_1;
   HEAP32[$5_1 + 868 >> 2] = $13_1;
   HEAP32[$5_1 + 880 >> 2] = $8_1;
   HEAP32[$5_1 + 884 >> 2] = $11;
   $7_1 = HEAP32[$6_1 + 52 >> 2];
   HEAP32[$5_1 + 896 >> 2] = HEAP32[$6_1 + 48 >> 2];
   HEAP32[$5_1 + 900 >> 2] = $7_1;
   HEAP32[$5_1 + 828 >> 2] = 0;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $79(256)), HEAP32[wasm2js_i32$0 + 836 >> 2] = wasm2js_i32$1;
   HEAP8[$5_1 + 840 | 0] = 1;
   HEAP32[$5_1 + 832 >> 2] = 32;
   $255($5_1 + 912 | 0, $5_1 + 848 | 0, $3_1, $4_1, $5_1 + 824 | 0);
   label$6 : {
    if (!HEAP32[$5_1 + 828 >> 2]) {
     break label$6
    }
    label$7 : {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 80 >> 2]]($3_1) | 0) != 1) {
      break label$7
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 80 >> 2]]($4_1) | 0) != 1) {
      break label$7
     }
     $257($0, $1_1, $2_1, $3_1, $4_1, HEAP32[$5_1 + 836 >> 2], HEAP32[$5_1 + 828 >> 2]);
     break label$6;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 112 >> 2]]($3_1);
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 112 >> 2]]($4_1);
    $179($5_1 + 520 | 4);
    $6_1 = $5_1 + 584 | 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    HEAP32[$5_1 + 528 >> 2] = 1;
    $6_1 = $5_1 + 592 | 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    $6_1 = $5_1 + 600 | 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    $6_1 = $5_1 + 608 | 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    $6_1 = $5_1 + 616 | 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    $6_1 = $5_1 + 624 | 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    HEAP32[$5_1 + 524 >> 2] = 6144;
    $200($5_1 + 632 | 0);
    HEAP32[$5_1 + 728 >> 2] = 4;
    HEAP32[$5_1 + 812 >> 2] = 6724;
    HEAP32[$5_1 + 804 >> 2] = 6644;
    HEAP32[$5_1 + 796 >> 2] = 6572;
    HEAP32[$5_1 + 632 >> 2] = 6380;
    HEAP32[$5_1 + 520 >> 2] = $3_1;
    $6_1 = $5_1 + 804 | 0;
    label$8 : {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 96 >> 2]]($3_1)) {
      break label$8
     }
     $6_1 = HEAP32[$5_1 + 520 >> 2];
     $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 100 >> 2]]($6_1) | 0 ? $5_1 + 812 | 0 : $5_1 + 796 | 0;
    }
    HEAP32[$6_1 + 4 >> 2] = $5_1 + 520;
    HEAP32[$5_1 + 820 >> 2] = $6_1;
    $179($5_1 + 216 | 4);
    $6_1 = $5_1 + 280 | 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    HEAP32[$5_1 + 224 >> 2] = 1;
    $6_1 = $5_1 + 288 | 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    $6_1 = $5_1 + 296 | 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    $6_1 = $5_1 + 304 | 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    $6_1 = $5_1 + 312 | 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    $6_1 = $5_1 + 320 | 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    HEAP32[$5_1 + 220 >> 2] = 6144;
    $200($5_1 + 328 | 0);
    HEAP32[$5_1 + 424 >> 2] = 4;
    HEAP32[$5_1 + 508 >> 2] = 6724;
    HEAP32[$5_1 + 500 >> 2] = 6644;
    HEAP32[$5_1 + 492 >> 2] = 6572;
    HEAP32[$5_1 + 328 >> 2] = 6380;
    HEAP32[$5_1 + 216 >> 2] = $4_1;
    $6_1 = $5_1 + 500 | 0;
    label$10 : {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 96 >> 2]]($4_1)) {
      break label$10
     }
     $6_1 = HEAP32[$5_1 + 216 >> 2];
     $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 100 >> 2]]($6_1) | 0 ? $5_1 + 508 | 0 : $5_1 + 492 | 0;
    }
    HEAP32[$6_1 + 4 >> 2] = $5_1 + 216;
    HEAP32[$5_1 + 516 >> 2] = $6_1;
    $49_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 92 >> 2]]($3_1) | 0;
    $50_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 92 >> 2]]($4_1) | 0;
    $7_1 = HEAP32[$5_1 + 828 >> 2];
    if ($7_1) {
     $13_1 = ($7_1 << 3) + -4 | 0;
     $27_1 = $5_1 + 136 | 0;
     $28_1 = $5_1 + 120 | 0;
     $8_1 = $5_1 + 104 | 0;
     $11 = $5_1 + 200 | 0;
     $12_1 = $5_1 + 184 | 0;
     $15_1 = $5_1 + 168 | 0;
     while (1) {
      $6_1 = HEAP32[$5_1 + 836 >> 2] + $13_1 | 0;
      HEAP32[$0 + 32 >> 2] = HEAP32[$6_1 >> 2];
      $6_1 = HEAP32[$6_1 + -4 >> 2];
      HEAP32[$0 + 24 >> 2] = $6_1;
      $16_1 = HEAP32[$5_1 + 820 >> 2];
      $16_1 = FUNCTION_TABLE[HEAP32[HEAP32[$16_1 >> 2] >> 2]]($16_1, $6_1) | 0;
      $6_1 = HEAP32[$5_1 + 516 >> 2];
      $47 = FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] >> 2]]($6_1, HEAP32[$0 + 32 >> 2]) | 0;
      $6_1 = HEAP32[$1_1 + 12 >> 2];
      $10 = $6_1 + 8 | 0;
      $14 = HEAP32[$10 >> 2];
      $10 = HEAP32[$10 + 4 >> 2];
      $42 = HEAP32[$6_1 >> 2];
      $43_1 = HEAP32[$6_1 + 4 >> 2];
      $29_1 = $6_1 + 24 | 0;
      $26_1 = HEAP32[$29_1 + 4 >> 2];
      $9_1 = $15_1 + 8 | 0;
      HEAP32[$9_1 >> 2] = HEAP32[$29_1 >> 2];
      HEAP32[$9_1 + 4 >> 2] = $26_1;
      $9_1 = $5_1 + 160 | 0;
      HEAP32[$9_1 >> 2] = $14;
      HEAP32[$9_1 + 4 >> 2] = $10;
      $10 = HEAP32[$6_1 + 16 >> 2];
      $14 = HEAP32[$6_1 + 20 >> 2];
      $9_1 = HEAP32[$6_1 + 36 >> 2];
      HEAP32[$12_1 >> 2] = HEAP32[$6_1 + 32 >> 2];
      HEAP32[$12_1 + 4 >> 2] = $9_1;
      $9_1 = $6_1 + 40 | 0;
      $29_1 = HEAP32[$9_1 >> 2];
      $9_1 = HEAP32[$9_1 + 4 >> 2];
      $48_1 = $6_1 + 56 | 0;
      $51_1 = HEAP32[$48_1 + 4 >> 2];
      $26_1 = $11 + 8 | 0;
      HEAP32[$26_1 >> 2] = HEAP32[$48_1 >> 2];
      HEAP32[$26_1 + 4 >> 2] = $51_1;
      $26_1 = HEAP32[$6_1 + 52 >> 2];
      HEAP32[$11 >> 2] = HEAP32[$6_1 + 48 >> 2];
      HEAP32[$11 + 4 >> 2] = $26_1;
      $6_1 = $12_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = $29_1;
      HEAP32[$6_1 + 4 >> 2] = $9_1;
      HEAP32[$15_1 >> 2] = $10;
      HEAP32[$15_1 + 4 >> 2] = $14;
      HEAP32[$5_1 + 152 >> 2] = $42;
      HEAP32[$5_1 + 156 >> 2] = $43_1;
      $6_1 = HEAP32[$2_1 + 12 >> 2];
      $10 = $6_1 + 8 | 0;
      $14 = HEAP32[$10 >> 2];
      $10 = HEAP32[$10 + 4 >> 2];
      $42 = HEAP32[$6_1 >> 2];
      $43_1 = HEAP32[$6_1 + 4 >> 2];
      $29_1 = $6_1 + 24 | 0;
      $26_1 = HEAP32[$29_1 + 4 >> 2];
      $9_1 = $8_1 + 8 | 0;
      HEAP32[$9_1 >> 2] = HEAP32[$29_1 >> 2];
      HEAP32[$9_1 + 4 >> 2] = $26_1;
      $9_1 = HEAP32[$6_1 + 20 >> 2];
      HEAP32[$8_1 >> 2] = HEAP32[$6_1 + 16 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $9_1;
      $9_1 = $5_1 + 96 | 0;
      HEAP32[$9_1 >> 2] = $14;
      HEAP32[$9_1 + 4 >> 2] = $10;
      $14 = $6_1 + 40 | 0;
      $9_1 = HEAP32[$14 + 4 >> 2];
      $10 = $28_1 + 8 | 0;
      HEAP32[$10 >> 2] = HEAP32[$14 >> 2];
      HEAP32[$10 + 4 >> 2] = $9_1;
      $10 = HEAP32[$6_1 + 36 >> 2];
      HEAP32[$28_1 >> 2] = HEAP32[$6_1 + 32 >> 2];
      HEAP32[$28_1 + 4 >> 2] = $10;
      $14 = $6_1 + 56 | 0;
      $9_1 = HEAP32[$14 + 4 >> 2];
      $10 = $27_1 + 8 | 0;
      HEAP32[$10 >> 2] = HEAP32[$14 >> 2];
      HEAP32[$10 + 4 >> 2] = $9_1;
      $10 = HEAP32[$6_1 + 52 >> 2];
      HEAP32[$27_1 >> 2] = HEAP32[$6_1 + 48 >> 2];
      HEAP32[$27_1 + 4 >> 2] = $10;
      HEAP32[$5_1 + 88 >> 2] = $42;
      HEAP32[$5_1 + 92 >> 2] = $43_1;
      if ($49_1) {
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 132 >> 2]]($5_1 + 24 | 0, $3_1, HEAP32[$0 + 24 >> 2]);
       $44_1 = HEAPF32[$5_1 + 960 >> 2];
       $45_1 = HEAPF32[$5_1 + 964 >> 2];
       $46_1 = HEAPF32[$5_1 + 968 >> 2];
       $30 = HEAPF32[$5_1 + 80 >> 2];
       $31_1 = HEAPF32[$5_1 + 72 >> 2];
       $32 = HEAPF32[$5_1 + 76 >> 2];
       $17_1 = HEAPF32[$5_1 + 920 >> 2];
       $18_1 = HEAPF32[$5_1 + 912 >> 2];
       $19_1 = HEAPF32[$5_1 + 916 >> 2];
       $20 = HEAPF32[$5_1 + 936 >> 2];
       $21 = HEAPF32[$5_1 + 928 >> 2];
       $22_1 = HEAPF32[$5_1 + 932 >> 2];
       $33_1 = HEAPF32[$5_1 + 56 >> 2];
       $34 = HEAPF32[$5_1 + 24 >> 2];
       $35 = HEAPF32[$5_1 + 40 >> 2];
       $36_1 = HEAPF32[$5_1 + 60 >> 2];
       $37_1 = HEAPF32[$5_1 + 28 >> 2];
       $38 = HEAPF32[$5_1 + 44 >> 2];
       $23_1 = HEAPF32[$5_1 + 952 >> 2];
       $39_1 = HEAPF32[$5_1 + 64 >> 2];
       $24_1 = HEAPF32[$5_1 + 944 >> 2];
       $40_1 = HEAPF32[$5_1 + 32 >> 2];
       $25 = HEAPF32[$5_1 + 948 >> 2];
       $41_1 = HEAPF32[$5_1 + 48 >> 2];
       HEAP32[$5_1 + 212 >> 2] = 0;
       HEAP32[$5_1 + 196 >> 2] = 0;
       HEAP32[$5_1 + 180 >> 2] = 0;
       HEAP32[$5_1 + 164 >> 2] = 0;
       HEAPF32[$5_1 + 192 >> 2] = Math_fround(Math_fround($40_1 * $24_1) + Math_fround($41_1 * $25)) + Math_fround($39_1 * $23_1);
       HEAPF32[$5_1 + 188 >> 2] = Math_fround(Math_fround($37_1 * $24_1) + Math_fround($38 * $25)) + Math_fround($36_1 * $23_1);
       HEAPF32[$5_1 + 184 >> 2] = Math_fround(Math_fround($34 * $24_1) + Math_fround($35 * $25)) + Math_fround($33_1 * $23_1);
       HEAPF32[$5_1 + 176 >> 2] = Math_fround(Math_fround($40_1 * $21) + Math_fround($41_1 * $22_1)) + Math_fround($39_1 * $20);
       HEAPF32[$5_1 + 172 >> 2] = Math_fround(Math_fround($37_1 * $21) + Math_fround($38 * $22_1)) + Math_fround($36_1 * $20);
       HEAPF32[$5_1 + 168 >> 2] = Math_fround(Math_fround($34 * $21) + Math_fround($35 * $22_1)) + Math_fround($33_1 * $20);
       HEAPF32[$5_1 + 160 >> 2] = Math_fround(Math_fround($18_1 * $40_1) + Math_fround($19_1 * $41_1)) + Math_fround($17_1 * $39_1);
       HEAPF32[$5_1 + 156 >> 2] = Math_fround(Math_fround($18_1 * $37_1) + Math_fround($19_1 * $38)) + Math_fround($17_1 * $36_1);
       HEAPF32[$5_1 + 152 >> 2] = Math_fround(Math_fround($34 * $18_1) + Math_fround($35 * $19_1)) + Math_fround($33_1 * $17_1);
       HEAPF32[$5_1 + 208 >> 2] = $46_1 + Math_fround(Math_fround(Math_fround($24_1 * $31_1) + Math_fround($25 * $32)) + Math_fround($23_1 * $30));
       HEAPF32[$5_1 + 204 >> 2] = $45_1 + Math_fround(Math_fround(Math_fround($21 * $31_1) + Math_fround($22_1 * $32)) + Math_fround($20 * $30));
       HEAPF32[$5_1 + 200 >> 2] = $44_1 + Math_fround(Math_fround(Math_fround($18_1 * $31_1) + Math_fround($19_1 * $32)) + Math_fround($17_1 * $30));
      }
      $7_1 = $7_1 + -1 | 0;
      if ($50_1) {
       FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 132 >> 2]]($5_1 + 24 | 0, $4_1, HEAP32[$0 + 32 >> 2]);
       $44_1 = HEAPF32[$5_1 + 896 >> 2];
       $45_1 = HEAPF32[$5_1 + 900 >> 2];
       $46_1 = HEAPF32[$5_1 + 904 >> 2];
       $30 = HEAPF32[$5_1 + 80 >> 2];
       $31_1 = HEAPF32[$5_1 + 72 >> 2];
       $32 = HEAPF32[$5_1 + 76 >> 2];
       $17_1 = HEAPF32[$5_1 + 856 >> 2];
       $18_1 = HEAPF32[$5_1 + 848 >> 2];
       $19_1 = HEAPF32[$5_1 + 852 >> 2];
       $20 = HEAPF32[$5_1 + 872 >> 2];
       $21 = HEAPF32[$5_1 + 864 >> 2];
       $22_1 = HEAPF32[$5_1 + 868 >> 2];
       $33_1 = HEAPF32[$5_1 + 56 >> 2];
       $34 = HEAPF32[$5_1 + 24 >> 2];
       $35 = HEAPF32[$5_1 + 40 >> 2];
       $36_1 = HEAPF32[$5_1 + 60 >> 2];
       $37_1 = HEAPF32[$5_1 + 28 >> 2];
       $38 = HEAPF32[$5_1 + 44 >> 2];
       $23_1 = HEAPF32[$5_1 + 888 >> 2];
       $39_1 = HEAPF32[$5_1 + 64 >> 2];
       $24_1 = HEAPF32[$5_1 + 880 >> 2];
       $40_1 = HEAPF32[$5_1 + 32 >> 2];
       $25 = HEAPF32[$5_1 + 884 >> 2];
       $41_1 = HEAPF32[$5_1 + 48 >> 2];
       HEAP32[$5_1 + 148 >> 2] = 0;
       HEAP32[$5_1 + 132 >> 2] = 0;
       HEAP32[$5_1 + 116 >> 2] = 0;
       HEAP32[$5_1 + 100 >> 2] = 0;
       HEAPF32[$5_1 + 128 >> 2] = Math_fround(Math_fround($40_1 * $24_1) + Math_fround($41_1 * $25)) + Math_fround($39_1 * $23_1);
       HEAPF32[$5_1 + 124 >> 2] = Math_fround(Math_fround($37_1 * $24_1) + Math_fround($38 * $25)) + Math_fround($36_1 * $23_1);
       HEAPF32[$5_1 + 120 >> 2] = Math_fround(Math_fround($34 * $24_1) + Math_fround($35 * $25)) + Math_fround($33_1 * $23_1);
       HEAPF32[$5_1 + 112 >> 2] = Math_fround(Math_fround($40_1 * $21) + Math_fround($41_1 * $22_1)) + Math_fround($39_1 * $20);
       HEAPF32[$5_1 + 108 >> 2] = Math_fround(Math_fround($37_1 * $21) + Math_fround($38 * $22_1)) + Math_fround($36_1 * $20);
       HEAPF32[$5_1 + 104 >> 2] = Math_fround(Math_fround($34 * $21) + Math_fround($35 * $22_1)) + Math_fround($33_1 * $20);
       HEAPF32[$5_1 + 96 >> 2] = Math_fround(Math_fround($18_1 * $40_1) + Math_fround($19_1 * $41_1)) + Math_fround($17_1 * $39_1);
       HEAPF32[$5_1 + 92 >> 2] = Math_fround(Math_fround($18_1 * $37_1) + Math_fround($19_1 * $38)) + Math_fround($17_1 * $36_1);
       HEAPF32[$5_1 + 88 >> 2] = Math_fround(Math_fround($34 * $18_1) + Math_fround($35 * $19_1)) + Math_fround($33_1 * $17_1);
       HEAPF32[$5_1 + 144 >> 2] = $46_1 + Math_fround(Math_fround(Math_fround($24_1 * $31_1) + Math_fround($25 * $32)) + Math_fround($23_1 * $30));
       HEAPF32[$5_1 + 140 >> 2] = $45_1 + Math_fround(Math_fround(Math_fround($21 * $31_1) + Math_fround($22_1 * $32)) + Math_fround($20 * $30));
       HEAPF32[$5_1 + 136 >> 2] = $44_1 + Math_fround(Math_fround(Math_fround($18_1 * $31_1) + Math_fround($19_1 * $32)) + Math_fround($17_1 * $30));
      }
      HEAP32[$5_1 + 28 >> 2] = $16_1;
      HEAP32[$5_1 + 44 >> 2] = HEAP32[$0 + 24 >> 2];
      HEAP32[$5_1 + 40 >> 2] = HEAP32[$0 + 28 >> 2];
      HEAP32[$5_1 + 24 >> 2] = $1_1;
      HEAP32[$5_1 + 32 >> 2] = HEAP32[$1_1 + 8 >> 2];
      HEAP32[$5_1 + 36 >> 2] = $5_1 + 152;
      HEAP32[$5_1 + 4 >> 2] = $47;
      HEAP32[$5_1 + 20 >> 2] = HEAP32[$0 + 32 >> 2];
      HEAP32[$5_1 + 16 >> 2] = HEAP32[$0 + 36 >> 2];
      HEAP32[$5_1 >> 2] = $2_1;
      HEAP32[$5_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2];
      HEAP32[$5_1 + 12 >> 2] = $5_1 + 88;
      $254($0, $5_1 + 24 | 0, $5_1, $16_1, $47);
      $13_1 = $13_1 + -8 | 0;
      if ($7_1) {
       continue
      }
      break;
     };
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 116 >> 2]]($3_1);
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 116 >> 2]]($4_1);
    $193($5_1 + 328 | 0);
    $193($5_1 + 216 | 4);
    $193($5_1 + 632 | 0);
    $193($5_1 + 520 | 4);
   }
   $0 = HEAP32[$5_1 + 836 >> 2];
   if (!$0) {
    break label$1
   }
   if (HEAPU8[$5_1 + 840 | 0]) {
    $80($0)
   }
   HEAP32[$5_1 + 836 >> 2] = 0;
  }
  global$0 = $5_1 + 976 | 0;
 }
 
 function $259($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 528 | 0;
  global$0 = $6_1;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 80 >> 2]]($3_1) | 0) == 2) {
    $9_1 = ($5_1 ? 36 : 28) + $0 | 0;
    $8_1 = HEAP32[$3_1 + 156 >> 2];
    $7_1 = $8_1 + -1 | 0;
    HEAP32[$9_1 >> 2] = $7_1;
    if (!$8_1) {
     break label$1
    }
    while (1) {
     $259($0, $1_1, $2_1, HEAP32[HEAP32[$3_1 + 164 >> 2] + ($7_1 << 2) >> 2], $4_1, $5_1);
     $8_1 = HEAP32[$9_1 >> 2];
     $7_1 = $8_1 + -1 | 0;
     HEAP32[$9_1 >> 2] = $7_1;
     if ($8_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $8_1 = (FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 80 >> 2]]($3_1) | 0) != 1;
   $7_1 = HEAP32[$4_1 + 4 >> 2];
   if (!($8_1 | ($7_1 | 0) != 28)) {
    $260($0, $1_1, $2_1, $3_1, $4_1, $5_1);
    break label$1;
   }
   if (($7_1 | 0) == 31) {
    $261($0, $1_1, $2_1, $3_1, $4_1, $5_1);
    break label$1;
   }
   if ($7_1 + -21 >>> 0 <= 8) {
    $262($0, $1_1, $2_1, $3_1, $4_1, $5_1);
    break label$1;
   }
   $7_1 = HEAP32[$1_1 + 12 >> 2];
   $9_1 = $7_1 + 8 | 0;
   $8_1 = HEAP32[$9_1 >> 2];
   $9_1 = HEAP32[$9_1 + 4 >> 2];
   $13_1 = HEAP32[$7_1 >> 2];
   $15_1 = HEAP32[$7_1 + 4 >> 2];
   $11 = $7_1 + 24 | 0;
   $12_1 = HEAP32[$11 + 4 >> 2];
   $10 = $6_1 + 488 | 0;
   HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$10 + 4 >> 2] = $12_1;
   $10 = $6_1 + 472 | 0;
   HEAP32[$10 >> 2] = $8_1;
   HEAP32[$10 + 4 >> 2] = $9_1;
   $9_1 = HEAP32[$7_1 + 16 >> 2];
   $8_1 = HEAP32[$7_1 + 20 >> 2];
   $11 = $7_1 + 40 | 0;
   $12_1 = HEAP32[$11 + 4 >> 2];
   $10 = $6_1 + 504 | 0;
   HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$10 + 4 >> 2] = $12_1;
   $10 = HEAP32[$7_1 + 32 >> 2];
   $11 = HEAP32[$7_1 + 36 >> 2];
   $14 = $7_1 + 56 | 0;
   $16_1 = HEAP32[$14 + 4 >> 2];
   $12_1 = $6_1 + 520 | 0;
   HEAP32[$12_1 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$12_1 + 4 >> 2] = $16_1;
   HEAP32[$6_1 + 464 >> 2] = $13_1;
   HEAP32[$6_1 + 468 >> 2] = $15_1;
   HEAP32[$6_1 + 480 >> 2] = $9_1;
   HEAP32[$6_1 + 484 >> 2] = $8_1;
   HEAP32[$6_1 + 496 >> 2] = $10;
   HEAP32[$6_1 + 500 >> 2] = $11;
   $9_1 = HEAP32[$7_1 + 52 >> 2];
   HEAP32[$6_1 + 512 >> 2] = HEAP32[$7_1 + 48 >> 2];
   HEAP32[$6_1 + 516 >> 2] = $9_1;
   $7_1 = HEAP32[$2_1 + 12 >> 2];
   $9_1 = $7_1 + 8 | 0;
   $8_1 = HEAP32[$9_1 >> 2];
   $9_1 = HEAP32[$9_1 + 4 >> 2];
   $13_1 = HEAP32[$7_1 >> 2];
   $15_1 = HEAP32[$7_1 + 4 >> 2];
   $11 = $7_1 + 24 | 0;
   $12_1 = HEAP32[$11 + 4 >> 2];
   $10 = $6_1 + 424 | 0;
   HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$10 + 4 >> 2] = $12_1;
   $10 = $6_1 + 408 | 0;
   HEAP32[$10 >> 2] = $8_1;
   HEAP32[$10 + 4 >> 2] = $9_1;
   $9_1 = HEAP32[$7_1 + 16 >> 2];
   $8_1 = HEAP32[$7_1 + 20 >> 2];
   $11 = $7_1 + 40 | 0;
   $12_1 = HEAP32[$11 + 4 >> 2];
   $10 = $6_1 + 440 | 0;
   HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$10 + 4 >> 2] = $12_1;
   $10 = HEAP32[$7_1 + 32 >> 2];
   $11 = HEAP32[$7_1 + 36 >> 2];
   $14 = $7_1 + 56 | 0;
   $16_1 = HEAP32[$14 + 4 >> 2];
   $12_1 = $6_1 + 456 | 0;
   HEAP32[$12_1 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$12_1 + 4 >> 2] = $16_1;
   HEAP32[$6_1 + 400 >> 2] = $13_1;
   HEAP32[$6_1 + 404 >> 2] = $15_1;
   HEAP32[$6_1 + 416 >> 2] = $9_1;
   HEAP32[$6_1 + 420 >> 2] = $8_1;
   HEAP32[$6_1 + 432 >> 2] = $10;
   HEAP32[$6_1 + 436 >> 2] = $11;
   $9_1 = HEAP32[$7_1 + 52 >> 2];
   HEAP32[$6_1 + 448 >> 2] = HEAP32[$7_1 + 48 >> 2];
   HEAP32[$6_1 + 452 >> 2] = $9_1;
   HEAP32[$6_1 + 388 >> 2] = 0;
   HEAP8[$6_1 + 392 | 0] = 1;
   HEAP32[$6_1 + 380 >> 2] = 0;
   HEAP32[$6_1 + 384 >> 2] = 0;
   $256($6_1 + 464 | 0, $6_1 + 400 | 0, $3_1, $4_1, $6_1 + 376 | 0);
   if (HEAP32[$6_1 + 380 >> 2]) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 112 >> 2]]($3_1);
    $179($6_1 + 72 | 4);
    $4_1 = $6_1 + 136 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    HEAP32[$6_1 + 80 >> 2] = 1;
    $4_1 = $6_1 + 144 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    $4_1 = $6_1 + 152 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    $4_1 = $6_1 + 160 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    $4_1 = $6_1 + 168 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    $4_1 = $6_1 + 176 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    HEAP32[$6_1 + 76 >> 2] = 6144;
    $200($6_1 + 184 | 0);
    HEAP32[$6_1 + 280 >> 2] = 4;
    HEAP32[$6_1 + 364 >> 2] = 6724;
    HEAP32[$6_1 + 356 >> 2] = 6644;
    HEAP32[$6_1 + 348 >> 2] = 6572;
    HEAP32[$6_1 + 184 >> 2] = 6380;
    HEAP32[$6_1 + 72 >> 2] = $3_1;
    $4_1 = $6_1 + 356 | 0;
    label$8 : {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 96 >> 2]]($3_1)) {
      break label$8
     }
     $4_1 = HEAP32[$6_1 + 72 >> 2];
     $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 100 >> 2]]($4_1) | 0 ? $6_1 + 364 | 0 : $6_1 + 348 | 0;
    }
    HEAP32[$4_1 + 4 >> 2] = $6_1 + 72;
    HEAP32[$6_1 + 372 >> 2] = $4_1;
    $9_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 92 >> 2]]($3_1) | 0;
    $4_1 = HEAP32[$6_1 + 380 >> 2];
    label$10 : {
     if (!$4_1) {
      break label$10
     }
     if (!$5_1) {
      $7_1 = ($4_1 << 2) + -4 | 0;
      while (1) {
       $5_1 = HEAP32[HEAP32[$6_1 + 388 >> 2] + $7_1 >> 2];
       HEAP32[$0 + 24 >> 2] = $5_1;
       $8_1 = HEAP32[$6_1 + 372 >> 2];
       $8_1 = FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] >> 2]]($8_1, $5_1) | 0;
       if ($9_1) {
        FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 132 >> 2]]($6_1 + 8 | 0, $3_1, $5_1)
       }
       HEAP32[$6_1 + 8 >> 2] = $1_1;
       HEAP32[$6_1 + 20 >> 2] = HEAP32[$1_1 + 12 >> 2];
       $13_1 = HEAP32[$1_1 + 8 >> 2];
       HEAP32[$6_1 + 16 >> 2] = $13_1;
       HEAP32[$6_1 + 12 >> 2] = $8_1;
       HEAP32[$6_1 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
       HEAP32[$6_1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
       $8_1 = HEAP32[$0 + 16 >> 2];
       $5_1 = HEAP32[$8_1 + 8 >> 2];
       HEAP32[(($13_1 | 0) == HEAP32[$5_1 + 8 >> 2] ? 8 : 12) + $8_1 >> 2] = $6_1 + 8;
       $253($0, $6_1 + 8 | 0, $2_1);
       HEAP32[HEAP32[$0 + 16 >> 2] + 8 >> 2] = $5_1;
       $7_1 = $7_1 + -4 | 0;
       $4_1 = $4_1 + -1 | 0;
       if ($4_1) {
        continue
       }
       break;
      };
      break label$10;
     }
     $7_1 = ($4_1 << 2) + -4 | 0;
     while (1) {
      $5_1 = HEAP32[HEAP32[$6_1 + 388 >> 2] + $7_1 >> 2];
      HEAP32[$0 + 32 >> 2] = $5_1;
      $8_1 = HEAP32[$6_1 + 372 >> 2];
      $8_1 = FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] >> 2]]($8_1, $5_1) | 0;
      if ($9_1) {
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 132 >> 2]]($6_1 + 8 | 0, $3_1, $5_1)
      }
      HEAP32[$6_1 + 8 >> 2] = $1_1;
      HEAP32[$6_1 + 20 >> 2] = HEAP32[$1_1 + 12 >> 2];
      $13_1 = HEAP32[$1_1 + 8 >> 2];
      HEAP32[$6_1 + 16 >> 2] = $13_1;
      HEAP32[$6_1 + 12 >> 2] = $8_1;
      HEAP32[$6_1 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
      HEAP32[$6_1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
      $8_1 = HEAP32[$0 + 16 >> 2];
      $5_1 = HEAP32[$8_1 + 8 >> 2];
      HEAP32[(($13_1 | 0) == HEAP32[$5_1 + 8 >> 2] ? 8 : 12) + $8_1 >> 2] = $6_1 + 8;
      $253($0, $2_1, $6_1 + 8 | 0);
      HEAP32[HEAP32[$0 + 16 >> 2] + 8 >> 2] = $5_1;
      $7_1 = $7_1 + -4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break;
     };
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 116 >> 2]]($3_1);
    $193($6_1 + 184 | 0);
    $193($6_1 + 72 | 4);
   }
   $0 = HEAP32[$6_1 + 388 >> 2];
   if (!$0) {
    break label$1
   }
   if (HEAPU8[$6_1 + 392 | 0]) {
    $80($0)
   }
   HEAP32[$6_1 + 388 >> 2] = 0;
  }
  global$0 = $6_1 + 528 | 0;
 }
 
 function $260($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20 = Math_fround(0), $21 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = Math_fround(0), $26_1 = 0, $27_1 = 0, $28_1 = Math_fround(0), $29_1 = Math_fround(0);
  $7_1 = global$0 - 144 | 0;
  global$0 = $7_1;
  $6_1 = HEAP32[$1_1 + 12 >> 2];
  $21 = $6_1 + 8 | 0;
  $18_1 = HEAP32[$21 + 4 >> 2];
  $10 = $7_1 + 88 | 0;
  HEAP32[$10 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$10 + 4 >> 2] = $18_1;
  $10 = HEAP32[$6_1 >> 2];
  $21 = HEAP32[$6_1 + 4 >> 2];
  $22_1 = $6_1 + 24 | 0;
  $19_1 = HEAP32[$22_1 + 4 >> 2];
  $18_1 = $7_1 + 104 | 0;
  HEAP32[$18_1 >> 2] = HEAP32[$22_1 >> 2];
  HEAP32[$18_1 + 4 >> 2] = $19_1;
  $18_1 = HEAP32[$6_1 + 16 >> 2];
  $22_1 = HEAP32[$6_1 + 20 >> 2];
  $23_1 = $6_1 + 40 | 0;
  $24_1 = HEAP32[$23_1 + 4 >> 2];
  $19_1 = $7_1 + 120 | 0;
  HEAP32[$19_1 >> 2] = HEAP32[$23_1 >> 2];
  HEAP32[$19_1 + 4 >> 2] = $24_1;
  $19_1 = HEAP32[$6_1 + 32 >> 2];
  $23_1 = HEAP32[$6_1 + 36 >> 2];
  $26_1 = $6_1 + 56 | 0;
  $27_1 = HEAP32[$26_1 + 4 >> 2];
  $24_1 = $7_1 + 136 | 0;
  HEAP32[$24_1 >> 2] = HEAP32[$26_1 >> 2];
  HEAP32[$24_1 + 4 >> 2] = $27_1;
  HEAP32[$7_1 + 80 >> 2] = $10;
  HEAP32[$7_1 + 84 >> 2] = $21;
  HEAP32[$7_1 + 96 >> 2] = $18_1;
  HEAP32[$7_1 + 100 >> 2] = $22_1;
  HEAP32[$7_1 + 112 >> 2] = $19_1;
  HEAP32[$7_1 + 116 >> 2] = $23_1;
  $10 = HEAP32[$6_1 + 52 >> 2];
  HEAP32[$7_1 + 128 >> 2] = HEAP32[$6_1 + 48 >> 2];
  HEAP32[$7_1 + 132 >> 2] = $10;
  $6_1 = HEAP32[$2_1 + 12 >> 2];
  $15_1 = HEAPF32[$6_1 + 20 >> 2];
  $12_1 = HEAPF32[$6_1 + 24 >> 2];
  $13_1 = HEAPF32[$6_1 + 36 >> 2];
  $14 = HEAPF32[$6_1 + 40 >> 2];
  $16_1 = HEAPF32[$6_1 + 8 >> 2];
  $17_1 = HEAPF32[$6_1 >> 2];
  $25 = HEAPF32[$6_1 + 4 >> 2];
  $28_1 = HEAPF32[$6_1 + 16 >> 2];
  $29_1 = HEAPF32[$6_1 + 32 >> 2];
  $8_1 = HEAPF32[$4_1 + 52 >> 2];
  $9_1 = HEAPF32[$4_1 + 56 >> 2];
  $11 = HEAPF32[$4_1 + 60 >> 2];
  $20 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 + 48 >> 2] * $8_1) + Math_fround(HEAPF32[$6_1 + 52 >> 2] * $9_1)) + Math_fround(HEAPF32[$6_1 + 56 >> 2] * $11)) + HEAPF32[$4_1 + 68 >> 2]);
  HEAPF32[$7_1 + 76 >> 2] = $20;
  $13_1 = Math_fround(Math_fround(Math_fround($29_1 * $8_1) + Math_fround($13_1 * $9_1)) + Math_fround($14 * $11));
  HEAPF32[$7_1 + 72 >> 2] = $13_1;
  $15_1 = Math_fround(Math_fround(Math_fround($28_1 * $8_1) + Math_fround($15_1 * $9_1)) + Math_fround($12_1 * $11));
  HEAPF32[$7_1 + 68 >> 2] = $15_1;
  $12_1 = Math_fround(Math_fround(Math_fround($17_1 * $8_1) + Math_fround($25 * $9_1)) + Math_fround($16_1 * $11));
  HEAPF32[$7_1 + 64 >> 2] = $12_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $7_1 + 80 | 0, $7_1 + 32 | 0, $7_1 + 48 | 0);
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 48 >> 2]]($4_1));
  $6_1 = $7_1 + 52 | 0;
  $9_1 = Math_fround($8_1 + HEAPF32[$6_1 >> 2]);
  HEAPF32[$6_1 >> 2] = $9_1;
  $6_1 = $7_1 + 56 | 0;
  $11 = Math_fround($8_1 + HEAPF32[$6_1 >> 2]);
  HEAPF32[$6_1 >> 2] = $11;
  $16_1 = Math_fround(HEAPF32[$7_1 + 36 >> 2] - $8_1);
  HEAPF32[$7_1 + 36 >> 2] = $16_1;
  $14 = Math_fround($8_1 + HEAPF32[$7_1 + 48 >> 2]);
  HEAPF32[$7_1 + 48 >> 2] = $14;
  $17_1 = Math_fround(HEAPF32[$7_1 + 32 >> 2] - $8_1);
  HEAPF32[$7_1 + 32 >> 2] = $17_1;
  $8_1 = Math_fround(HEAPF32[$7_1 + 40 >> 2] - $8_1);
  HEAPF32[$7_1 + 40 >> 2] = $8_1;
  $17_1 = Math_fround(Math_fround($17_1 + $14) * Math_fround(.5));
  $16_1 = Math_fround(Math_fround($16_1 + $9_1) * Math_fround(.5));
  $8_1 = Math_fround(Math_fround($8_1 + $11) * Math_fround(.5));
  $25 = Math_fround(Math_fround(Math_fround($17_1 * $12_1) + Math_fround($16_1 * $15_1)) + Math_fround($8_1 * $13_1));
  $8_1 = Math_fround(Math_fround(Math_fround(Math_fround($14 - $17_1) * Math_fround(Math_abs($12_1))) + Math_fround(Math_fround($9_1 - $16_1) * Math_fround(Math_abs($15_1)))) + Math_fround(Math_fround($11 - $8_1) * Math_fround(Math_abs($13_1))));
  if (!(Math_fround($20 + Math_fround(9.999999974752427e-07)) >= Math_fround($25 - $8_1) ^ 1 | $20 > Math_fround(Math_fround($25 + $8_1) + Math_fround(9.999999974752427e-07)))) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 112 >> 2]]($3_1);
   $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 48 >> 2]]($3_1));
   $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 48 >> 2]]($4_1));
   $4_1 = HEAP32[$3_1 + 188 >> 2];
   if ($4_1) {
    $15_1 = Math_fround($8_1 + $9_1);
    $4_1 = $4_1 + -1 | 0;
    while (1) {
     $6_1 = HEAP32[$3_1 + 184 >> 2] + Math_imul(HEAP32[$3_1 + 196 >> 2], $4_1) | 0;
     label$4 : {
      if (HEAP32[$3_1 + 192 >> 2] == 1) {
       $8_1 = Math_fround(HEAPF64[$6_1 >> 3] * +HEAPF32[$3_1 + 160 >> 2]);
       HEAPF32[$7_1 + 16 >> 2] = $8_1;
       $9_1 = Math_fround(HEAPF64[$6_1 + 8 >> 3] * +HEAPF32[$3_1 + 164 >> 2]);
       HEAPF32[$7_1 + 20 >> 2] = $9_1;
       $11 = Math_fround(HEAPF64[$6_1 + 16 >> 3] * +HEAPF32[$3_1 + 168 >> 2]);
       break label$4;
      }
      $8_1 = Math_fround(HEAPF32[$6_1 >> 2] * HEAPF32[$3_1 + 160 >> 2]);
      HEAPF32[$7_1 + 16 >> 2] = $8_1;
      $9_1 = Math_fround(HEAPF32[$6_1 + 4 >> 2] * HEAPF32[$3_1 + 164 >> 2]);
      HEAPF32[$7_1 + 20 >> 2] = $9_1;
      $11 = Math_fround(HEAPF32[$6_1 + 8 >> 2] * HEAPF32[$3_1 + 168 >> 2]);
     }
     HEAP32[$7_1 + 28 >> 2] = 0;
     $12_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$7_1 + 96 >> 2]) + Math_fround($9_1 * HEAPF32[$7_1 + 100 >> 2])) + Math_fround($11 * HEAPF32[$7_1 + 104 >> 2])) + HEAPF32[$7_1 + 132 >> 2]);
     HEAPF32[$7_1 + 20 >> 2] = $12_1;
     $20 = HEAPF32[$7_1 + 68 >> 2];
     $14 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$7_1 + 80 >> 2]) + Math_fround($9_1 * HEAPF32[$7_1 + 84 >> 2])) + Math_fround($11 * HEAPF32[$7_1 + 88 >> 2])) + HEAPF32[$7_1 + 128 >> 2]);
     HEAPF32[$7_1 + 16 >> 2] = $14;
     $13_1 = HEAPF32[$7_1 + 64 >> 2];
     $8_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$7_1 + 112 >> 2]) + Math_fround($9_1 * HEAPF32[$7_1 + 116 >> 2])) + Math_fround($11 * HEAPF32[$7_1 + 120 >> 2])) + HEAPF32[$7_1 + 136 >> 2]);
     HEAPF32[$7_1 + 24 >> 2] = $8_1;
     $9_1 = HEAPF32[$7_1 + 72 >> 2];
     $8_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($14 * $13_1) + Math_fround($12_1 * $20)) + Math_fround($8_1 * $9_1)) - HEAPF32[$7_1 + 76 >> 2]) - $15_1);
     label$6 : {
      if (!($8_1 < Math_fround(0.0))) {
       break label$6
      }
      if ($5_1) {
       HEAP32[$7_1 + 12 >> 2] = 0;
       HEAPF32[$7_1 + 8 >> 2] = -$9_1;
       HEAPF32[$7_1 + 4 >> 2] = -$20;
       HEAPF32[$7_1 >> 2] = -$13_1;
       $6_1 = HEAP32[$0 + 16 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 8 >> 2]]($6_1, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
       $6_1 = HEAP32[$0 + 16 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 12 >> 2]]($6_1, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
       $6_1 = HEAP32[$0 + 12 >> 2];
       if (!$6_1) {
        $6_1 = HEAP32[$0 + 4 >> 2];
        $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 12 >> 2]]($6_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$1_1 + 8 >> 2]) | 0;
        HEAP32[$0 + 12 >> 2] = $6_1;
       }
       $10 = HEAP32[$0 + 16 >> 2];
       HEAP32[$10 + 4 >> 2] = $6_1;
       FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 16 >> 2]]($10, $7_1, $7_1 + 16 | 0, $8_1);
       break label$6;
      }
      $6_1 = HEAP32[$0 + 16 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 8 >> 2]]($6_1, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
      $6_1 = HEAP32[$0 + 16 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 12 >> 2]]($6_1, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
      $6_1 = HEAP32[$0 + 12 >> 2];
      if (!$6_1) {
       $6_1 = HEAP32[$0 + 4 >> 2];
       $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 12 >> 2]]($6_1, HEAP32[$1_1 + 8 >> 2], HEAP32[$2_1 + 8 >> 2]) | 0;
       HEAP32[$0 + 12 >> 2] = $6_1;
      }
      $10 = HEAP32[$0 + 16 >> 2];
      HEAP32[$10 + 4 >> 2] = $6_1;
      FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 16 >> 2]]($10, $7_1 - -64 | 0, $7_1 + 16 | 0, $8_1);
     }
     $4_1 = $4_1 + -1 | 0;
     if (($4_1 | 0) != -1) {
      continue
     }
     break;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 116 >> 2]]($3_1);
  }
  global$0 = $7_1 + 144 | 0;
 }
 
 function $261($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = 0, $29_1 = 0, $30 = 0, $31_1 = 0, $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0);
  $7_1 = global$0 - 96 | 0;
  global$0 = $7_1;
  $8_1 = HEAP32[$4_1 + 20 >> 2];
  if ($8_1) {
   $6_1 = HEAP32[$2_1 + 12 >> 2];
   $32 = HEAPF32[$6_1 + 56 >> 2];
   $33_1 = HEAPF32[$6_1 + 52 >> 2];
   $12_1 = HEAPF32[$6_1 + 40 >> 2];
   $13_1 = HEAPF32[$6_1 + 36 >> 2];
   $14 = HEAPF32[$6_1 + 24 >> 2];
   $15_1 = HEAPF32[$6_1 + 20 >> 2];
   $34 = HEAPF32[$6_1 + 48 >> 2];
   $16_1 = HEAPF32[$6_1 + 32 >> 2];
   $17_1 = HEAPF32[$6_1 + 16 >> 2];
   $18_1 = HEAPF32[$6_1 + 8 >> 2];
   $19_1 = HEAPF32[$6_1 + 4 >> 2];
   $20 = HEAPF32[$6_1 >> 2];
   $21 = $8_1 + -1 | 0;
   $8_1 = Math_imul($8_1, 80) + -80 | 0;
   while (1) {
    $6_1 = HEAP32[$4_1 + 28 >> 2] + $8_1 | 0;
    $30 = HEAP32[$6_1 - -64 >> 2];
    HEAP32[$7_1 + 92 >> 2] = 0;
    HEAP32[$7_1 + 76 >> 2] = 0;
    HEAP32[$7_1 + 60 >> 2] = 0;
    HEAP32[$7_1 + 44 >> 2] = 0;
    $9_1 = HEAPF32[$6_1 + 8 >> 2];
    $10 = HEAPF32[$6_1 + 24 >> 2];
    $11 = HEAPF32[$6_1 + 40 >> 2];
    HEAPF32[$7_1 + 72 >> 2] = Math_fround(Math_fround($16_1 * $9_1) + Math_fround($13_1 * $10)) + Math_fround($12_1 * $11);
    $22_1 = HEAPF32[$6_1 + 4 >> 2];
    $23_1 = HEAPF32[$6_1 + 20 >> 2];
    $24_1 = HEAPF32[$6_1 + 36 >> 2];
    HEAPF32[$7_1 + 68 >> 2] = Math_fround(Math_fround($16_1 * $22_1) + Math_fround($13_1 * $23_1)) + Math_fround($12_1 * $24_1);
    $25 = HEAPF32[$6_1 >> 2];
    $26_1 = HEAPF32[$6_1 + 16 >> 2];
    $27_1 = HEAPF32[$6_1 + 32 >> 2];
    HEAPF32[$7_1 + 64 >> 2] = Math_fround(Math_fround($16_1 * $25) + Math_fround($13_1 * $26_1)) + Math_fround($12_1 * $27_1);
    HEAPF32[$7_1 + 56 >> 2] = Math_fround(Math_fround($17_1 * $9_1) + Math_fround($15_1 * $10)) + Math_fround($14 * $11);
    HEAPF32[$7_1 + 52 >> 2] = Math_fround(Math_fround($17_1 * $22_1) + Math_fround($15_1 * $23_1)) + Math_fround($14 * $24_1);
    HEAPF32[$7_1 + 48 >> 2] = Math_fround(Math_fround($17_1 * $25) + Math_fround($15_1 * $26_1)) + Math_fround($14 * $27_1);
    HEAPF32[$7_1 + 40 >> 2] = Math_fround(Math_fround($20 * $9_1) + Math_fround($19_1 * $10)) + Math_fround($18_1 * $11);
    HEAPF32[$7_1 + 36 >> 2] = Math_fround(Math_fround($20 * $22_1) + Math_fround($19_1 * $23_1)) + Math_fround($18_1 * $24_1);
    HEAPF32[$7_1 + 32 >> 2] = Math_fround(Math_fround($20 * $25) + Math_fround($19_1 * $26_1)) + Math_fround($18_1 * $27_1);
    $9_1 = HEAPF32[$6_1 + 48 >> 2];
    $10 = HEAPF32[$6_1 + 52 >> 2];
    $11 = HEAPF32[$6_1 + 56 >> 2];
    HEAPF32[$7_1 + 88 >> 2] = $32 + Math_fround(Math_fround(Math_fround($16_1 * $9_1) + Math_fround($13_1 * $10)) + Math_fround($12_1 * $11));
    HEAPF32[$7_1 + 84 >> 2] = $33_1 + Math_fround(Math_fround(Math_fround($17_1 * $9_1) + Math_fround($15_1 * $10)) + Math_fround($14 * $11));
    HEAPF32[$7_1 + 80 >> 2] = $34 + Math_fround(Math_fround(Math_fround($20 * $9_1) + Math_fround($19_1 * $10)) + Math_fround($18_1 * $11));
    HEAP32[$7_1 + 8 >> 2] = $2_1;
    $31_1 = HEAP32[$2_1 + 8 >> 2];
    HEAP32[$7_1 + 16 >> 2] = $31_1;
    HEAP32[$7_1 + 12 >> 2] = $30;
    HEAP32[$7_1 + 28 >> 2] = $21;
    HEAP32[$7_1 + 24 >> 2] = -1;
    $6_1 = HEAP32[$0 + 16 >> 2];
    HEAP32[$7_1 + 20 >> 2] = $7_1 + 32;
    $28_1 = HEAP32[$6_1 + 8 >> 2];
    $29_1 = $6_1 + 8 | 0;
    label$3 : {
     if (HEAP32[$28_1 + 8 >> 2] == ($31_1 | 0)) {
      break label$3
     }
     $28_1 = HEAP32[$6_1 + 12 >> 2];
     $29_1 = $6_1 + 12 | 0;
    }
    HEAP32[$29_1 >> 2] = $7_1 + 8;
    $259($0, $1_1, $7_1 + 8 | 0, $3_1, $30, $5_1);
    $6_1 = HEAP32[$0 + 16 >> 2];
    HEAP32[(HEAP32[HEAP32[$6_1 + 8 >> 2] + 8 >> 2] == HEAP32[$7_1 + 16 >> 2] ? 8 : 12) + $6_1 >> 2] = $28_1;
    $8_1 = $8_1 + -80 | 0;
    $21 = $21 + -1 | 0;
    if (($21 | 0) != -1) {
     continue
    }
    break;
   };
  }
  global$0 = $7_1 + 96 | 0;
 }
 
 function $262($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $6_1 = global$0 - 128 | 0;
  global$0 = $6_1;
  HEAP8[$6_1 + 116 | 0] = $5_1;
  HEAP32[$6_1 + 112 >> 2] = $3_1;
  HEAP32[$6_1 + 100 >> 2] = $0;
  HEAP32[$6_1 + 96 >> 2] = 6800;
  HEAP32[$6_1 + 104 >> 2] = $1_1;
  HEAP32[$6_1 + 108 >> 2] = $2_1;
  (wasm2js_i32$0 = $6_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 48 >> 2]]($4_1))), HEAPF32[wasm2js_i32$0 + 120 >> 2] = wasm2js_f32$0;
  $0 = HEAP32[$2_1 + 12 >> 2];
  $7_1 = HEAPF32[$0 + 52 >> 2];
  $17_1 = HEAPF32[$0 + 56 >> 2];
  $1_1 = HEAP32[$1_1 + 12 >> 2];
  $18_1 = HEAPF32[$1_1 + 52 >> 2];
  $19_1 = HEAPF32[$1_1 + 56 >> 2];
  $8_1 = HEAPF32[$0 + 20 >> 2];
  $9_1 = HEAPF32[$0 + 36 >> 2];
  $20 = HEAPF32[$1_1 + 20 >> 2];
  $21 = HEAPF32[$1_1 + 36 >> 2];
  $22_1 = HEAPF32[$1_1 + 24 >> 2];
  $10 = HEAPF32[$0 + 24 >> 2];
  $23_1 = HEAPF32[$1_1 + 40 >> 2];
  $11 = HEAPF32[$0 + 40 >> 2];
  $24_1 = HEAPF32[$1_1 + 32 >> 2];
  $12_1 = HEAPF32[$0 + 32 >> 2];
  $25 = HEAPF32[$1_1 >> 2];
  $13_1 = HEAPF32[$0 >> 2];
  $26_1 = HEAPF32[$1_1 + 16 >> 2];
  $14 = HEAPF32[$0 + 16 >> 2];
  $27_1 = HEAPF32[$0 + 48 >> 2];
  $28_1 = HEAPF32[$1_1 + 48 >> 2];
  $15_1 = HEAPF32[$0 + 4 >> 2];
  $29_1 = HEAPF32[$1_1 + 4 >> 2];
  $30 = HEAPF32[$1_1 + 8 >> 2];
  $16_1 = HEAPF32[$0 + 8 >> 2];
  HEAP32[$6_1 + 92 >> 2] = 0;
  HEAP32[$6_1 + 76 >> 2] = 0;
  HEAP32[$6_1 + 60 >> 2] = 0;
  HEAPF32[$6_1 + 72 >> 2] = Math_fround(Math_fround($16_1 * $30) + Math_fround($10 * $22_1)) + Math_fround($11 * $23_1);
  HEAPF32[$6_1 + 68 >> 2] = Math_fround(Math_fround($16_1 * $29_1) + Math_fround($10 * $20)) + Math_fround($11 * $21);
  HEAPF32[$6_1 + 56 >> 2] = Math_fround(Math_fround($15_1 * $30) + Math_fround($8_1 * $22_1)) + Math_fround($9_1 * $23_1);
  HEAPF32[$6_1 + 52 >> 2] = Math_fround(Math_fround($15_1 * $29_1) + Math_fround($8_1 * $20)) + Math_fround($9_1 * $21);
  $7_1 = Math_fround(-$7_1);
  HEAPF32[$6_1 + 88 >> 2] = Math_fround(Math_fround(Math_fround($10 * $7_1) - Math_fround($16_1 * $27_1)) - Math_fround($11 * $17_1)) + Math_fround(Math_fround(Math_fround($16_1 * $28_1) + Math_fround($10 * $18_1)) + Math_fround($11 * $19_1));
  HEAPF32[$6_1 + 84 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $7_1) - Math_fround($15_1 * $27_1)) - Math_fround($9_1 * $17_1)) + Math_fround(Math_fround(Math_fround($15_1 * $28_1) + Math_fround($8_1 * $18_1)) + Math_fround($9_1 * $19_1));
  HEAP32[$6_1 + 44 >> 2] = 0;
  HEAPF32[$6_1 + 32 >> 2] = Math_fround(Math_fround($13_1 * $25) + Math_fround($14 * $26_1)) + Math_fround($12_1 * $24_1);
  HEAPF32[$6_1 + 64 >> 2] = Math_fround(Math_fround($16_1 * $25) + Math_fround($10 * $26_1)) + Math_fround($11 * $24_1);
  HEAPF32[$6_1 + 48 >> 2] = Math_fround(Math_fround($15_1 * $25) + Math_fround($8_1 * $26_1)) + Math_fround($9_1 * $24_1);
  HEAPF32[$6_1 + 40 >> 2] = Math_fround(Math_fround($13_1 * $30) + Math_fround($14 * $22_1)) + Math_fround($12_1 * $23_1);
  HEAPF32[$6_1 + 36 >> 2] = Math_fround(Math_fround($13_1 * $29_1) + Math_fround($14 * $20)) + Math_fround($12_1 * $21);
  HEAPF32[$6_1 + 80 >> 2] = Math_fround(Math_fround(Math_fround($14 * $7_1) - Math_fround($13_1 * $27_1)) - Math_fround($12_1 * $17_1)) + Math_fround(Math_fround(Math_fround($13_1 * $28_1) + Math_fround($14 * $18_1)) + Math_fround($12_1 * $19_1));
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $6_1 + 32 | 0, $6_1 + 16 | 0, $6_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 64 >> 2]]($4_1, $6_1 + 96 | 0, $6_1 + 16 | 0, $6_1);
  global$0 = $6_1 + 128 | 0;
 }
 
 function $263($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[$0 + 12 >> 2];
  if ($5_1) {
   $6_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 16 >> 2]]($6_1, $5_1);
   HEAP32[$0 + 12 >> 2] = 0;
  }
  $5_1 = HEAP32[$0 + 8 >> 2];
  if ($5_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] >> 2]]($5_1) | 0;
   $5_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 60 >> 2]]($5_1, HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 8 >> 2] = 0;
  }
  HEAP32[$0 + 24 >> 2] = -1;
  HEAP32[$0 + 28 >> 2] = -1;
  $5_1 = $0 + 32 | 0;
  HEAP32[$5_1 >> 2] = -1;
  HEAP32[$5_1 + 4 >> 2] = -1;
  HEAP32[$0 + 20 >> 2] = $3_1;
  HEAP32[$0 + 16 >> 2] = $4_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  if (HEAP32[$3_1 + 4 >> 2] == 25) {
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   if (HEAP32[$4_1 + 4 >> 2] == 25) {
    $258($0, $1_1, $2_1, $3_1, $4_1);
    return;
   }
   $259($0, $1_1, $2_1, $3_1, $4_1, 0);
   return;
  }
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  if (HEAP32[$4_1 + 4 >> 2] == 25) {
   $259($0, $2_1, $1_1, $4_1, $3_1, 1)
  }
 }
 
 function $264($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return Math_fround(Math_fround(1.0));
 }
 
 function $265($0) {
  if (!HEAPU8[24116]) {
   HEAP32[6027] = 6860;
   HEAP8[24116] = 1;
   HEAP8[24112] = 0;
  }
  $231($0, 25, 0);
  $231($0, 25, 1);
  $231($0, 25, 2);
  $231($0, 25, 3);
  $231($0, 25, 4);
  $231($0, 25, 5);
  $231($0, 25, 6);
  $231($0, 25, 7);
  $231($0, 25, 8);
  $231($0, 25, 9);
  $231($0, 25, 10);
  $231($0, 25, 11);
  $231($0, 25, 12);
  $231($0, 25, 13);
  $231($0, 25, 14);
  $231($0, 25, 15);
  $231($0, 25, 16);
  $231($0, 25, 17);
  $231($0, 25, 18);
  $231($0, 25, 19);
  $231($0, 25, 20);
  $231($0, 25, 21);
  $231($0, 25, 22);
  $231($0, 25, 23);
  $231($0, 25, 24);
  $231($0, 25, 25);
  $231($0, 25, 26);
  $231($0, 25, 27);
  $231($0, 25, 28);
  $231($0, 25, 29);
  $231($0, 25, 30);
  $231($0, 25, 31);
  $231($0, 25, 32);
  $231($0, 25, 33);
  $231($0, 25, 34);
  $231($0, 25, 35);
  $231($0, 0, 25);
  $231($0, 1, 25);
  $231($0, 2, 25);
  $231($0, 3, 25);
  $231($0, 4, 25);
  $231($0, 5, 25);
  $231($0, 6, 25);
  $231($0, 7, 25);
  $231($0, 8, 25);
  $231($0, 9, 25);
  $231($0, 10, 25);
  $231($0, 11, 25);
  $231($0, 12, 25);
  $231($0, 13, 25);
  $231($0, 14, 25);
  $231($0, 15, 25);
  $231($0, 16, 25);
  $231($0, 17, 25);
  $231($0, 18, 25);
  $231($0, 19, 25);
  $231($0, 20, 25);
  $231($0, 21, 25);
  $231($0, 22, 25);
  $231($0, 23, 25);
  $231($0, 24, 25);
  $231($0, 25, 25);
  $231($0, 26, 25);
  $231($0, 27, 25);
  $231($0, 28, 25);
  $231($0, 29, 25);
  $231($0, 30, 25);
  $231($0, 31, 25);
  $231($0, 32, 25);
  $231($0, 33, 25);
  $231($0, 34, 25);
  $231($0, 35, 25);
 }
 
 function $267($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0 + 12 >> 2];
  if ($3_1) {
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   label$2 : {
    if (($2_1 | 0) != HEAP32[$1_1 + 8 >> 2]) {
     break label$2
    }
    $5_1 = $2_1 ? $2_1 << 1 : 1;
    if (($2_1 | 0) >= ($5_1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$5_1) {
      break label$3
     }
     $6_1 = $79($5_1 << 2);
     $2_1 = HEAP32[$1_1 + 4 >> 2];
    }
    if (($2_1 | 0) >= 1) {
     $3_1 = 0;
     $4_1 = $2_1;
     while (1) {
      HEAP32[$3_1 + $6_1 >> 2] = HEAP32[HEAP32[$1_1 + 12 >> 2] + $3_1 >> 2];
      $3_1 = $3_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break;
     };
    }
    $4_1 = HEAP32[$1_1 + 12 >> 2];
    if ($4_1) {
     if (HEAPU8[$1_1 + 16 | 0]) {
      $80($4_1);
      $2_1 = HEAP32[$1_1 + 4 >> 2];
     }
     HEAP32[$1_1 + 12 >> 2] = 0;
    }
    HEAP32[$1_1 + 12 >> 2] = $6_1;
    HEAP8[$1_1 + 16 | 0] = 1;
    HEAP32[$1_1 + 8 >> 2] = $5_1;
    $3_1 = HEAP32[$0 + 12 >> 2];
   }
   HEAP32[$1_1 + 4 >> 2] = $2_1 + 1;
   HEAP32[HEAP32[$1_1 + 12 >> 2] + ($2_1 << 2) >> 2] = $3_1;
  }
 }
 
 function $269($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = 0, $29_1 = 0, $30 = 0;
  $4_1 = global$0 - 48 | 0;
  $5_1 = HEAPF32[$0 + 60 >> 2];
  $10 = HEAPF32[$1_1 + 16 >> 2];
  $6_1 = HEAPF32[$0 - -64 >> 2];
  $16_1 = HEAPF32[$1_1 + 20 >> 2];
  $7_1 = HEAPF32[$0 + 68 >> 2];
  $17_1 = HEAPF32[$1_1 + 24 >> 2];
  $18_1 = HEAPF32[$1_1 + 52 >> 2];
  $19_1 = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $10) + Math_fround($6_1 * $16_1)) + Math_fround($7_1 * $17_1)) + $18_1);
  HEAPF32[$4_1 + 40 >> 2] = $19_1;
  $11 = HEAPF32[$1_1 + 32 >> 2];
  $20 = HEAPF32[$1_1 + 36 >> 2];
  $21 = HEAPF32[$1_1 + 40 >> 2];
  $22_1 = HEAPF32[$1_1 + 56 >> 2];
  $23_1 = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $11) + Math_fround($6_1 * $20)) + Math_fround($7_1 * $21)) + $22_1);
  HEAPF32[$4_1 + 36 >> 2] = $23_1;
  $12_1 = $5_1;
  $5_1 = HEAPF32[$1_1 >> 2];
  $13_1 = HEAPF32[$1_1 + 4 >> 2];
  $24_1 = $7_1;
  $7_1 = HEAPF32[$1_1 + 8 >> 2];
  $14 = HEAPF32[$1_1 + 48 >> 2];
  $25 = Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $5_1) + Math_fround($6_1 * $13_1)) + Math_fround($24_1 * $7_1)) + $14);
  HEAPF32[$4_1 + 44 >> 2] = $25;
  HEAP32[$4_1 + 28 >> 2] = 0;
  $6_1 = HEAPF32[$0 + 76 >> 2];
  $15_1 = HEAPF32[$0 + 80 >> 2];
  $12_1 = HEAPF32[$0 + 84 >> 2];
  $26_1 = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($10 * $6_1) + Math_fround($16_1 * $15_1)) + Math_fround($17_1 * $12_1)));
  HEAPF32[$4_1 + 20 >> 2] = $26_1;
  $27_1 = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($11 * $6_1) + Math_fround($20 * $15_1)) + Math_fround($21 * $12_1)));
  HEAPF32[$4_1 + 24 >> 2] = $27_1;
  $6_1 = Math_fround($14 + Math_fround(Math_fround(Math_fround($5_1 * $6_1) + Math_fround($13_1 * $15_1)) + Math_fround($7_1 * $12_1)));
  HEAPF32[$4_1 + 16 >> 2] = $6_1;
  $12_1 = $14;
  $14 = HEAPF32[$0 + 92 >> 2];
  $24_1 = $13_1;
  $13_1 = HEAPF32[$0 + 96 >> 2];
  $15_1 = HEAPF32[$0 + 100 >> 2];
  $7_1 = Math_fround($12_1 + Math_fround(Math_fround(Math_fround($5_1 * $14) + Math_fround($24_1 * $13_1)) + Math_fround($7_1 * $15_1)));
  HEAPF32[$4_1 >> 2] = $7_1;
  $1_1 = $6_1 > $7_1;
  $8_1 = $25 > ($1_1 ? $7_1 : $6_1);
  $9_1 = $8_1 ? $4_1 : $4_1 + 44 | 0;
  $5_1 = HEAPF32[$0 + 48 >> 2];
  HEAPF32[$2_1 >> 2] = HEAPF32[($1_1 ? $9_1 : $8_1 ? $4_1 + 16 | 0 : $9_1) >> 2] - $5_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $11 = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($11 * $14) + Math_fround($20 * $13_1)) + Math_fround($21 * $15_1)));
  HEAPF32[$4_1 + 8 >> 2] = $11;
  $0 = $4_1 + 8 | 0;
  $1_1 = $27_1 > $11;
  $8_1 = $23_1 > HEAPF32[($1_1 ? $4_1 : $4_1 + 16 | 0) + 8 >> 2];
  $9_1 = $8_1 ? $0 : $4_1 + 36 | 0;
  $29_1 = $4_1 + 24 | 0;
  HEAPF32[$2_1 + 8 >> 2] = HEAPF32[($1_1 ? $9_1 : $8_1 ? $29_1 : $9_1) >> 2] - $5_1;
  $10 = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($10 * $14) + Math_fround($16_1 * $13_1)) + Math_fround($17_1 * $15_1)));
  HEAPF32[$4_1 + 4 >> 2] = $10;
  $28_1 = $2_1;
  $1_1 = $4_1 | 4;
  $2_1 = $26_1 > $10;
  $8_1 = $19_1 > HEAPF32[($2_1 ? $4_1 : $4_1 + 16 | 0) + 4 >> 2];
  $9_1 = $8_1 ? $1_1 : $4_1 + 40 | 0;
  $30 = $4_1 + 16 | 4;
  HEAPF32[$28_1 + 4 >> 2] = HEAPF32[($2_1 ? $9_1 : $8_1 ? $30 : $9_1) >> 2] - $5_1;
  $28_1 = $0;
  $0 = $27_1 < $11;
  $2_1 = $23_1 < HEAPF32[($0 ? $4_1 : $4_1 + 16 | 0) + 8 >> 2];
  $8_1 = $2_1 ? $28_1 : $4_1 + 36 | 0;
  HEAPF32[$3_1 + 8 >> 2] = $5_1 + HEAPF32[($0 ? $8_1 : $2_1 ? $29_1 : $8_1) >> 2];
  $2_1 = $1_1;
  $0 = $26_1 < $10;
  $1_1 = $19_1 < HEAPF32[($0 ? $4_1 : $4_1 + 16 | 0) + 4 >> 2];
  $2_1 = $1_1 ? $2_1 : $4_1 + 40 | 0;
  HEAPF32[$3_1 + 4 >> 2] = $5_1 + HEAPF32[($0 ? $2_1 : $1_1 ? $30 : $2_1) >> 2];
  $0 = $6_1 < $7_1;
  $1_1 = $25 < ($0 ? $7_1 : $6_1);
  $2_1 = $1_1 ? $4_1 : $4_1 + 44 | 0;
  HEAPF32[$3_1 >> 2] = $5_1 + HEAPF32[($0 ? $2_1 : $1_1 ? $4_1 + 16 | 0 : $2_1) >> 2];
 }
 
 function $270($0) {
  $0 = $0 | 0;
  return $0 + 16 | 0;
 }
 
 function $271($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $0 = $2_1 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $272($0) {
  $0 = $0 | 0;
  return 6336;
 }
 
 function $273($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 8 >> 2] = 1065353216;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 1065353216;
  HEAP32[$0 + 4 >> 2] = 1065353216;
 }
 
 function $274($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 48 >> 2] = $1_1;
 }
 
 function $275($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 48 >> 2]);
 }
 
 function $276($0) {
  $0 = $0 | 0;
  return 52;
 }
 
 function $277($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $98($0, $1_1, $2_1);
  HEAP32[$1_1 + 28 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$1_1 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
  HEAP32[$1_1 + 36 >> 2] = HEAP32[$0 + 40 >> 2];
  HEAP32[$1_1 + 40 >> 2] = HEAP32[$0 + 44 >> 2];
  HEAP32[$1_1 + 12 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
  HEAP32[$1_1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$1_1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP32[$1_1 + 44 >> 2] = HEAP32[$0 + 48 >> 2];
  return 6345;
 }
 
 function $278($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $3_1 = HEAPF32[$2_1 >> 2];
  $4_1 = HEAPF32[$2_1 + 4 >> 2];
  $5_1 = HEAPF32[$2_1 + 8 >> 2];
  $6_1 = Math_fround(Math_fround(Math_fround($3_1 * HEAPF32[$1_1 + 76 >> 2]) + Math_fround($4_1 * HEAPF32[$1_1 + 80 >> 2])) + Math_fround($5_1 * HEAPF32[$1_1 + 84 >> 2]));
  $7_1 = Math_fround(Math_fround(Math_fround($3_1 * HEAPF32[$1_1 + 92 >> 2]) + Math_fround($4_1 * HEAPF32[$1_1 + 96 >> 2])) + Math_fround($5_1 * HEAPF32[$1_1 + 100 >> 2]));
  $3_1 = Math_fround(Math_fround(Math_fround($3_1 * HEAPF32[$1_1 + 60 >> 2]) + Math_fround($4_1 * HEAPF32[$1_1 - -64 >> 2])) + Math_fround($5_1 * HEAPF32[$1_1 + 68 >> 2]));
  $1_1 = ($1_1 + 60 | 0) + (($3_1 < $6_1 ? ($6_1 < $7_1 ? 2 : 1) : ($3_1 < $7_1) << 1) << 4) | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $279($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12_1 = 0;
  if (($3_1 | 0) >= 1) {
   $11 = $0 + 60 | 0;
   while (1) {
    $4_1 = HEAPF32[$1_1 >> 2];
    $7_1 = HEAPF32[$1_1 + 4 >> 2];
    $8_1 = HEAPF32[$1_1 + 8 >> 2];
    $9_1 = Math_fround(Math_fround(Math_fround($4_1 * HEAPF32[$0 + 76 >> 2]) + Math_fround($7_1 * HEAPF32[$0 + 80 >> 2])) + Math_fround($8_1 * HEAPF32[$0 + 84 >> 2]));
    $10 = Math_fround(Math_fround(Math_fround($4_1 * HEAPF32[$0 + 92 >> 2]) + Math_fround($7_1 * HEAPF32[$0 + 96 >> 2])) + Math_fround($8_1 * HEAPF32[$0 + 100 >> 2]));
    $4_1 = Math_fround(Math_fround(Math_fround($4_1 * HEAPF32[$0 + 60 >> 2]) + Math_fround($7_1 * HEAPF32[$0 + 64 >> 2])) + Math_fround($8_1 * HEAPF32[$0 + 68 >> 2]));
    $5_1 = (($4_1 < $9_1 ? ($9_1 < $10 ? 2 : 1) : ($4_1 < $10) << 1) << 4) + $11 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $6_1;
    $5_1 = $5_1 + 8 | 0;
    $12_1 = HEAP32[$5_1 + 4 >> 2];
    $6_1 = $2_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $12_1;
    $1_1 = $1_1 + 16 | 0;
    $2_1 = $2_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   };
  }
 }
 
 function $280($0) {
  $0 = $0 | 0;
  return 2;
 }
 
 function $281($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0);
  $6_1 = HEAPF32[$0 + 92 >> 2];
  $7_1 = HEAPF32[$0 + 76 >> 2];
  $8_1 = HEAPF32[$0 + 80 >> 2];
  $10 = HEAPF32[$0 + 100 >> 2];
  $4_1 = HEAPF32[$0 + 68 >> 2];
  $11 = HEAPF32[$0 + 84 >> 2];
  $9_1 = HEAPF32[$0 + 96 >> 2];
  $3_1 = HEAPF32[$0 - -64 >> 2];
  $5_1 = HEAPF32[$0 + 60 >> 2];
  HEAP32[$2_1 + 12 >> 2] = 0;
  $7_1 = Math_fround($7_1 - $5_1);
  $9_1 = Math_fround($9_1 - $3_1);
  $8_1 = Math_fround($8_1 - $3_1);
  $5_1 = Math_fround($6_1 - $5_1);
  $3_1 = Math_fround(Math_fround($7_1 * $9_1) - Math_fround($8_1 * $5_1));
  $12_1 = $3_1;
  $13_1 = Math_fround($3_1 * $3_1);
  $3_1 = Math_fround($10 - $4_1);
  $6_1 = Math_fround($11 - $4_1);
  $4_1 = Math_fround(Math_fround($8_1 * $3_1) - Math_fround($6_1 * $9_1));
  $3_1 = Math_fround(Math_fround($6_1 * $5_1) - Math_fround($7_1 * $3_1));
  $5_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($13_1 + Math_fround(Math_fround($4_1 * $4_1) + Math_fround($3_1 * $3_1))))));
  $6_1 = Math_fround($12_1 * $5_1);
  HEAPF32[$2_1 + 8 >> 2] = $6_1;
  $3_1 = Math_fround($3_1 * $5_1);
  HEAPF32[$2_1 + 4 >> 2] = $3_1;
  $4_1 = Math_fround($4_1 * $5_1);
  HEAPF32[$2_1 >> 2] = $4_1;
  if ($1_1) {
   HEAPF32[$2_1 + 8 >> 2] = -$6_1;
   HEAPF32[$2_1 + 4 >> 2] = -$3_1;
   HEAPF32[$2_1 >> 2] = -$4_1;
  }
 }
 
 function $282($0) {
  $0 = $0 | 0;
  return 3;
 }
 
 function $284($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $1_1, $2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, ($1_1 + 1 | 0) % 3 | 0, $3_1);
 }
 
 function $285($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $0 = ($1_1 << 4) + $0 | 0;
  $1_1 = $0 + 68 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $2_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $0 = $0 + 60 | 0;
  $1_1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
 }
 
 function $286($0) {
  $0 = $0 | 0;
  return 1;
 }
 
 function $287($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0, $3_1, $1_1, $2_1);
 }
 
 function $288($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $13_1 = HEAPF32[$0 + 60 >> 2];
  $8_1 = Math_fround(HEAPF32[$0 + 76 >> 2] - $13_1);
  $4_1 = HEAPF32[$0 - -64 >> 2];
  $7_1 = Math_fround(HEAPF32[$0 + 96 >> 2] - $4_1);
  $3_1 = Math_fround(HEAPF32[$0 + 80 >> 2] - $4_1);
  $9_1 = Math_fround(HEAPF32[$0 + 92 >> 2] - $13_1);
  $6_1 = Math_fround(Math_fround($8_1 * $7_1) - Math_fround($3_1 * $9_1));
  $11 = $6_1;
  $14 = Math_fround($6_1 * $6_1);
  $12_1 = $3_1;
  $3_1 = HEAPF32[$0 + 68 >> 2];
  $6_1 = Math_fround(HEAPF32[$0 + 100 >> 2] - $3_1);
  $10 = Math_fround(HEAPF32[$0 + 84 >> 2] - $3_1);
  $7_1 = Math_fround(Math_fround($12_1 * $6_1) - Math_fround($10 * $7_1));
  $8_1 = Math_fround(Math_fround($10 * $9_1) - Math_fround($8_1 * $6_1));
  $9_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($14 + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8_1 * $8_1))))));
  $6_1 = Math_fround($11 * $9_1);
  $7_1 = Math_fround($7_1 * $9_1);
  $8_1 = Math_fround($8_1 * $9_1);
  $4_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + 8 >> 2] * $6_1) + Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $7_1) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * $8_1))) - Math_fround(Math_fround($3_1 * $6_1) + Math_fround(Math_fround($13_1 * $7_1) + Math_fround($4_1 * $8_1))));
  $13_1 = Math_fround(-$2_1);
  label$1 : {
   if ($4_1 >= $13_1 ^ 1 | $4_1 <= $2_1 ^ 1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0, 0, $5_1 + 16 | 0, $5_1);
   $9_1 = HEAPF32[$5_1 + 16 >> 2];
   $4_1 = Math_fround(HEAPF32[$5_1 >> 2] - $9_1);
   $10 = HEAPF32[$5_1 + 20 >> 2];
   $3_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] - $10);
   $2_1 = Math_fround(Math_fround($8_1 * $4_1) - Math_fround($7_1 * $3_1));
   $11 = $2_1;
   $14 = Math_fround($2_1 * $2_1);
   $2_1 = Math_fround($6_1 * $3_1);
   $12_1 = HEAPF32[$5_1 + 24 >> 2];
   $3_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] - $12_1);
   $2_1 = Math_fround($2_1 - Math_fround($8_1 * $3_1));
   $4_1 = Math_fround(Math_fround($7_1 * $3_1) - Math_fround($6_1 * $4_1));
   $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($14 + Math_fround(Math_fround($2_1 * $2_1) + Math_fround($4_1 * $4_1))))));
   $11 = Math_fround($11 * $3_1);
   $2_1 = Math_fround($2_1 * $3_1);
   $4_1 = Math_fround($4_1 * $3_1);
   if (Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + 8 >> 2] * $11) + Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $2_1) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * $4_1))) - Math_fround(Math_fround($12_1 * $11) + Math_fround(Math_fround($9_1 * $2_1) + Math_fround($10 * $4_1)))) < $13_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0, 1, $5_1 + 16 | 0, $5_1);
   $9_1 = HEAPF32[$5_1 + 16 >> 2];
   $4_1 = Math_fround(HEAPF32[$5_1 >> 2] - $9_1);
   $10 = HEAPF32[$5_1 + 20 >> 2];
   $3_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] - $10);
   $2_1 = Math_fround(Math_fround($8_1 * $4_1) - Math_fround($7_1 * $3_1));
   $11 = $2_1;
   $14 = Math_fround($2_1 * $2_1);
   $2_1 = Math_fround($6_1 * $3_1);
   $12_1 = HEAPF32[$5_1 + 24 >> 2];
   $3_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] - $12_1);
   $2_1 = Math_fround($2_1 - Math_fround($8_1 * $3_1));
   $4_1 = Math_fround(Math_fround($7_1 * $3_1) - Math_fround($6_1 * $4_1));
   $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($14 + Math_fround(Math_fround($2_1 * $2_1) + Math_fround($4_1 * $4_1))))));
   $11 = Math_fround($11 * $3_1);
   $2_1 = Math_fround($2_1 * $3_1);
   $4_1 = Math_fround($4_1 * $3_1);
   if (!!(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + 8 >> 2] * $11) + Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $2_1) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * $4_1))) - Math_fround(Math_fround($12_1 * $11) + Math_fround(Math_fround($9_1 * $2_1) + Math_fround($10 * $4_1)))) < $13_1)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0, 2, $5_1 + 16 | 0, $5_1);
   $4_1 = HEAPF32[$5_1 + 16 >> 2];
   $3_1 = Math_fround(HEAPF32[$5_1 >> 2] - $4_1);
   $9_1 = HEAPF32[$5_1 + 20 >> 2];
   $10 = Math_fround(HEAPF32[$5_1 + 4 >> 2] - $9_1);
   $2_1 = Math_fround(Math_fround($8_1 * $3_1) - Math_fround($7_1 * $10));
   $11 = $2_1;
   $12_1 = Math_fround($2_1 * $2_1);
   $14 = Math_fround($6_1 * $10);
   $2_1 = $8_1;
   $8_1 = HEAPF32[$5_1 + 24 >> 2];
   $10 = Math_fround(HEAPF32[$5_1 + 8 >> 2] - $8_1);
   $2_1 = Math_fround($14 - Math_fround($2_1 * $10));
   $6_1 = Math_fround(Math_fround($7_1 * $10) - Math_fround($6_1 * $3_1));
   $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($12_1 + Math_fround(Math_fround($2_1 * $2_1) + Math_fround($6_1 * $6_1))))));
   $3_1 = Math_fround($11 * $7_1);
   $2_1 = Math_fround($2_1 * $7_1);
   $6_1 = Math_fround($6_1 * $7_1);
   if (Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + 8 >> 2] * $3_1) + Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $2_1) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * $6_1))) - Math_fround(Math_fround($8_1 * $3_1) + Math_fround(Math_fround($4_1 * $2_1) + Math_fround($9_1 * $6_1)))) < $13_1) {
    break label$1
   }
   $15_1 = 1;
  }
  global$0 = $5_1 + 32 | 0;
  return $15_1 | 0;
 }
 
 function $289($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0;
  $7_1 = HEAPF32[$0 + 92 >> 2];
  $8_1 = HEAPF32[$0 + 76 >> 2];
  $9_1 = HEAPF32[$0 + 80 >> 2];
  $11 = HEAPF32[$0 + 100 >> 2];
  $1_1 = $0 + 68 | 0;
  $6_1 = HEAPF32[$1_1 >> 2];
  $12_1 = HEAPF32[$0 + 84 >> 2];
  $10 = HEAPF32[$0 + 96 >> 2];
  $4_1 = HEAPF32[$0 - -64 >> 2];
  $5_1 = HEAPF32[$0 + 60 >> 2];
  HEAP32[$2_1 + 12 >> 2] = 0;
  $8_1 = Math_fround($8_1 - $5_1);
  $10 = Math_fround($10 - $4_1);
  $9_1 = Math_fround($9_1 - $4_1);
  $5_1 = Math_fround($7_1 - $5_1);
  $4_1 = Math_fround(Math_fround($8_1 * $10) - Math_fround($9_1 * $5_1));
  $13_1 = $4_1;
  $14 = Math_fround($4_1 * $4_1);
  $4_1 = Math_fround($11 - $6_1);
  $7_1 = Math_fround($12_1 - $6_1);
  $6_1 = Math_fround(Math_fround($9_1 * $4_1) - Math_fround($7_1 * $10));
  $4_1 = Math_fround(Math_fround($7_1 * $5_1) - Math_fround($8_1 * $4_1));
  $5_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($14 + Math_fround(Math_fround($6_1 * $6_1) + Math_fround($4_1 * $4_1))))));
  HEAPF32[$2_1 + 8 >> 2] = $13_1 * $5_1;
  HEAPF32[$2_1 + 4 >> 2] = $4_1 * $5_1;
  HEAPF32[$2_1 >> 2] = $6_1 * $5_1;
  $15_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $3_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $15_1;
  $1_1 = HEAP32[$0 + 64 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
 }
 
 function $291($0) {
  $0 = $0 | 0;
  return 6544;
 }
 
 function $292($0) {
  $0 = $0 | 0;
  return 0;
 }
 
 function $293($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $294($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $0 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 128 >> 2]]($0, $1_1) | 0;
 }
 
 function $297($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  $3_1 = HEAP32[$2_1 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 104 >> 2]]($3_1, $1_1, $2_1 + 4 | 0);
  return HEAP32[$0 + 4 >> 2] + 4 | 0;
 }
 
 function $299($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  $3_1 = HEAP32[$2_1 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 108 >> 2]]($3_1, $1_1, $2_1 + 112 | 0);
  return HEAP32[$0 + 4 >> 2] + 112 | 0;
 }
 
 function $302($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 144 | 0;
  global$0 = $5_1;
  $8_1 = $179($5_1 + 32 | 0);
  $6_1 = $1_1 + 8 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $5_1 + 100 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = HEAP32[$1_1 + 20 >> 2];
  $4_1 = $5_1 + 108 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $6_1 = $1_1 + 24 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $5_1 + 116 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = HEAP32[$1_1 + 36 >> 2];
  $4_1 = $5_1 + 124 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $6_1 = $1_1 + 40 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $5_1 + 132 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  HEAP32[$5_1 + 36 >> 2] = 1;
  HEAP32[$5_1 + 32 >> 2] = 6144;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$5_1 + 92 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 96 >> 2] = $4_1;
  HEAP32[$5_1 + 80 >> 2] = HEAP32[$0 + 24 >> 2];
  $1_1 = HEAP32[$0 + 4 >> 2];
  $7_1 = HEAPU8[$0 + 20 | 0];
  label$1 : {
   if ($7_1) {
    HEAP32[$1_1 + 28 >> 2] = $2_1;
    $4_1 = $1_1 + 24 | 0;
    break label$1;
   }
   HEAP32[$1_1 + 36 >> 2] = $2_1;
   $4_1 = $1_1 + 32 | 0;
  }
  HEAP32[$4_1 >> 2] = $3_1;
  $4_1 = HEAP32[$0 + 12 >> 2];
  $6_1 = HEAP32[$4_1 + 8 >> 2];
  HEAP32[$5_1 + 20 >> 2] = HEAP32[$4_1 + 12 >> 2];
  HEAP32[$5_1 + 16 >> 2] = $6_1;
  HEAP32[$5_1 + 28 >> 2] = $3_1;
  HEAP32[$5_1 + 24 >> 2] = $2_1;
  HEAP32[$5_1 + 8 >> 2] = $4_1;
  $2_1 = HEAP32[$1_1 + 16 >> 2];
  $3_1 = HEAP32[$2_1 + 8 >> 2];
  $4_1 = HEAP32[$3_1 + 8 >> 2];
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 32;
  if (($4_1 | 0) == ($6_1 | 0)) {
   $2_1 = $2_1 + 8 | 0
  } else {
   $3_1 = HEAP32[$2_1 + 12 >> 2];
   $2_1 = $2_1 + 12 | 0;
  }
  HEAP32[$2_1 >> 2] = $5_1 + 8;
  $259($1_1, HEAP32[$0 + 8 >> 2], $5_1 + 8 | 0, HEAP32[$0 + 16 >> 2], $5_1 + 32 | 0, ($7_1 | 0) != 0);
  $0 = HEAP32[HEAP32[$0 + 4 >> 2] + 16 >> 2];
  HEAP32[(HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2] == HEAP32[$5_1 + 16 >> 2] ? 8 : 12) + $0 >> 2] = $3_1;
  $193($8_1);
  global$0 = $5_1 + 144 | 0;
 }
 
 function $304($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0 = HEAP32[$1_1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 40) | 0;
  $72($0, $1_1);
  HEAP32[$0 >> 2] = 6072;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return $0 | 0;
 }
 
 function $305($0) {
  var $1_1 = 0;
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP32[$0 >> 2] = 6980;
  HEAP32[$0 + 188 >> 2] = 0;
  HEAP32[$0 + 192 >> 2] = 0;
  HEAP32[$0 + 180 >> 2] = 0;
  HEAP32[$0 + 184 >> 2] = 1566444395;
  HEAP32[$0 + 164 >> 2] = 1065353216;
  HEAP32[$0 + 168 >> 2] = 1065353216;
  HEAP32[$0 + 276 >> 2] = 0;
  HEAP32[$0 + 280 >> 2] = 0;
  HEAP32[$0 + 268 >> 2] = 1065353216;
  HEAP32[$0 + 272 >> 2] = 0;
  HEAP32[$0 + 260 >> 2] = -1;
  HEAP32[$0 + 264 >> 2] = -1;
  HEAP32[$0 + 252 >> 2] = 1;
  HEAP32[$0 + 256 >> 2] = 0;
  HEAP32[$0 + 244 >> 2] = 1036831949;
  HEAP32[$0 + 248 >> 2] = 1176256512;
  HEAP32[$0 + 236 >> 2] = 0;
  HEAP32[$0 + 240 >> 2] = 0;
  HEAP32[$0 + 228 >> 2] = 1056964608;
  HEAP32[$0 + 232 >> 2] = 0;
  HEAP32[$0 + 220 >> 2] = 1;
  HEAP32[$0 + 224 >> 2] = 0;
  HEAP32[$0 + 212 >> 2] = -1;
  HEAP32[$0 + 216 >> 2] = -1;
  HEAP32[$0 + 204 >> 2] = 1;
  HEAP32[$0 + 208 >> 2] = -1;
  $1_1 = $0 + 140 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 148 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 156 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 172 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 196 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0 + 300 | 0] = 1;
  HEAP32[$0 + 304 >> 2] = 0;
  HEAP32[$0 + 296 >> 2] = 0;
  $1_1 = $0 + 288 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1065353216;
  $1_1 = $0 + 16 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 28 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 1065353216;
  $1_1 = $0 + 36 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 48 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 1065353216;
  $1_1 = $0 + 56 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 72 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 - -64 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0 + 80 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 88 >> 2] = 1065353216;
  $1_1 = $0 + 100 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 92 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 108 >> 2] = 1065353216;
  $1_1 = $0 + 120 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $0 = $0 + 112 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $306($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 6980;
  $1_1 = HEAP32[$0 + 296 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 300 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 296 >> 2] = 0;
  }
  HEAP32[$0 + 296 >> 2] = 0;
  HEAP32[$0 + 288 >> 2] = 0;
  HEAP32[$0 + 292 >> 2] = 0;
  HEAP8[$0 + 300 | 0] = 1;
  return $0 | 0;
 }
 
 function $307($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 6980;
  $1_1 = HEAP32[$0 + 296 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 300 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 296 >> 2] = 0;
  }
  HEAP32[$0 + 296 >> 2] = 0;
  HEAP32[$0 + 288 >> 2] = 0;
  HEAP32[$0 + 292 >> 2] = 0;
  HEAP8[$0 + 300 | 0] = 1;
  $80($0);
 }
 
 function $308($0, $1_1) {
  if ((HEAP32[$0 + 220 >> 2] & -2) != 4) {
   HEAP32[$0 + 220 >> 2] = $1_1
  }
 }
 
 function $310($0, $1_1) {
  if (!(HEAPU8[$0 + 204 | 0] & 3 ? !$1_1 : 0)) {
   if ((HEAP32[$0 + 220 >> 2] & -2) != 4) {
    HEAP32[$0 + 220 >> 2] = 1
   }
   HEAP32[$0 + 224 >> 2] = 0;
  }
 }
 
 function $311($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$1_1 + 20 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$1_1 + 24 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$1_1 + 28 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1_1 + 32 >> 2] = HEAP32[$0 + 20 >> 2];
  HEAP32[$1_1 + 36 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$1_1 + 40 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$1_1 + 44 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$1_1 + 48 >> 2] = HEAP32[$0 + 36 >> 2];
  HEAP32[$1_1 + 52 >> 2] = HEAP32[$0 + 40 >> 2];
  HEAP32[$1_1 + 56 >> 2] = HEAP32[$0 + 44 >> 2];
  HEAP32[$1_1 + 60 >> 2] = HEAP32[$0 + 48 >> 2];
  HEAP32[$1_1 + 64 >> 2] = HEAP32[$0 + 52 >> 2];
  HEAP32[$1_1 + 68 >> 2] = HEAP32[$0 + 56 >> 2];
  HEAP32[$1_1 + 72 >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$1_1 + 76 >> 2] = HEAP32[$0 - -64 >> 2];
  HEAP32[$1_1 + 80 >> 2] = HEAP32[$0 + 68 >> 2];
  HEAP32[$1_1 + 84 >> 2] = HEAP32[$0 + 72 >> 2];
  HEAP32[$1_1 + 88 >> 2] = HEAP32[$0 + 76 >> 2];
  HEAP32[$1_1 + 92 >> 2] = HEAP32[$0 + 80 >> 2];
  HEAP32[$1_1 + 96 >> 2] = HEAP32[$0 + 84 >> 2];
  HEAP32[$1_1 + 100 >> 2] = HEAP32[$0 + 88 >> 2];
  HEAP32[$1_1 + 104 >> 2] = HEAP32[$0 + 92 >> 2];
  HEAP32[$1_1 + 108 >> 2] = HEAP32[$0 + 96 >> 2];
  HEAP32[$1_1 + 112 >> 2] = HEAP32[$0 + 100 >> 2];
  HEAP32[$1_1 + 116 >> 2] = HEAP32[$0 + 104 >> 2];
  HEAP32[$1_1 + 120 >> 2] = HEAP32[$0 + 108 >> 2];
  HEAP32[$1_1 + 124 >> 2] = HEAP32[$0 + 112 >> 2];
  HEAP32[$1_1 + 128 >> 2] = HEAP32[$0 + 116 >> 2];
  HEAP32[$1_1 + 132 >> 2] = HEAP32[$0 + 120 >> 2];
  HEAP32[$1_1 + 136 >> 2] = HEAP32[$0 + 124 >> 2];
  HEAP32[$1_1 + 140 >> 2] = HEAP32[$0 + 128 >> 2];
  HEAP32[$1_1 + 144 >> 2] = HEAP32[$0 + 132 >> 2];
  HEAP32[$1_1 + 148 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$1_1 + 152 >> 2] = HEAP32[$0 + 140 >> 2];
  HEAP32[$1_1 + 156 >> 2] = HEAP32[$0 + 144 >> 2];
  HEAP32[$1_1 + 160 >> 2] = HEAP32[$0 + 148 >> 2];
  HEAP32[$1_1 + 164 >> 2] = HEAP32[$0 + 152 >> 2];
  HEAP32[$1_1 + 168 >> 2] = HEAP32[$0 + 156 >> 2];
  HEAP32[$1_1 + 172 >> 2] = HEAP32[$0 + 160 >> 2];
  HEAP32[$1_1 + 176 >> 2] = HEAP32[$0 + 164 >> 2];
  HEAP32[$1_1 + 180 >> 2] = HEAP32[$0 + 168 >> 2];
  HEAP32[$1_1 + 184 >> 2] = HEAP32[$0 + 172 >> 2];
  HEAP32[$1_1 + 188 >> 2] = HEAP32[$0 + 176 >> 2];
  HEAP32[$1_1 + 232 >> 2] = HEAP32[$0 + 180 >> 2];
  HEAP32[$1_1 + 192 >> 2] = HEAP32[$0 + 184 >> 2];
  HEAP32[$1_1 >> 2] = 0;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0 + 192 >> 2]) | 0;
  $4_1 = HEAP32[$0 + 228 >> 2];
  HEAP32[$1_1 + 196 >> 2] = HEAP32[$0 + 224 >> 2];
  HEAP32[$1_1 + 200 >> 2] = $4_1;
  $4_1 = HEAP32[$0 + 212 >> 2];
  HEAP32[$1_1 + 240 >> 2] = HEAP32[$0 + 208 >> 2];
  HEAP32[$1_1 + 244 >> 2] = $4_1;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  HEAP32[$1_1 + 236 >> 2] = HEAP32[$0 + 204 >> 2];
  HEAP32[$1_1 + 248 >> 2] = HEAP32[$0 + 220 >> 2];
  HEAP32[$1_1 + 204 >> 2] = HEAP32[$0 + 236 >> 2];
  HEAP32[$1_1 + 208 >> 2] = HEAP32[$0 + 244 >> 2];
  HEAP32[$1_1 + 212 >> 2] = HEAP32[$0 + 248 >> 2];
  HEAP32[$1_1 + 216 >> 2] = HEAP32[$0 + 232 >> 2];
  HEAP32[$1_1 + 252 >> 2] = HEAP32[$0 + 252 >> 2];
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 40 >> 2]]($2_1, $0) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0;
  HEAP32[$1_1 + 12 >> 2] = $4_1;
  if ($4_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1, $3_1)
  }
  HEAP32[$1_1 + 220 >> 2] = HEAP32[$0 + 268 >> 2];
  $2_1 = HEAP32[$0 + 280 >> 2];
  $3_1 = HEAP32[$0 + 276 >> 2];
  $0 = HEAP32[$0 + 272 >> 2];
  HEAP32[$1_1 + 260 >> 2] = 0;
  HEAP32[$1_1 + 224 >> 2] = $0;
  HEAP32[$1_1 + 228 >> 2] = $3_1;
  HEAP32[$1_1 + 256 >> 2] = $2_1;
  return 7008;
 }
 
 function $312($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$2_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1245859651), wasm2js_i32$5 = $0), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function $313($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 200 >> 2] = $1_1;
  HEAP32[$0 + 192 >> 2] = $1_1;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 }
 
 function $314($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $3_1 = HEAP32[$0 + 288 >> 2];
  $2_1 = $3_1;
  label$1 : {
   if (($3_1 | 0) < 1) {
    break label$1
   }
   $0 = HEAP32[$0 + 296 >> 2];
   $2_1 = 0;
   while (1) {
    if (HEAP32[$0 >> 2] == ($1_1 | 0)) {
     break label$1
    }
    $0 = $0 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue
    }
    break;
   };
   $2_1 = $3_1;
  }
  return ($2_1 | 0) >= ($3_1 | 0) | 0;
 }
 
 function $315($0) {
  $0 = $0 | 0;
  return 264;
 }
 
 function $316($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0);
  $179($0);
  $2_1 = HEAPF32[$1_1 >> 2];
  $4_1 = HEAPF32[$1_1 + 4 >> 2];
  $3_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAP32[$0 + 44 >> 2] = 0;
  $5_1 = Math_fround($3_1 * HEAPF32[$0 + 24 >> 2]);
  $3_1 = HEAPF32[$0 + 48 >> 2];
  HEAPF32[$0 + 40 >> 2] = $5_1 - $3_1;
  HEAPF32[$0 + 36 >> 2] = Math_fround($4_1 * HEAPF32[$0 + 20 >> 2]) - $3_1;
  HEAPF32[$0 + 32 >> 2] = Math_fround($2_1 * HEAPF32[$0 + 16 >> 2]) - $3_1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = 7072;
  $2_1 = HEAPF32[$1_1 >> 2];
  $4_1 = HEAPF32[$1_1 + 8 >> 2];
  $5_1 = HEAPF32[$1_1 + 4 >> 2];
  $2_1 = Math_fround(HEAPF32[(($2_1 < $5_1 ? ($2_1 < $4_1 ^ 1) << 1 : $5_1 < $4_1 ? 1 : 2) << 2) + $1_1 >> 2] * Math_fround(.10000000149011612));
  if (!!($2_1 < $3_1)) {
   $317($0, $2_1)
  }
 }
 
 function $317($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  HEAPF32[$0 + 48 >> 2] = $1_1;
  $2_1 = $0 + 40 | 0;
  $1_1 = HEAPF32[$2_1 >> 2];
  $3_1 = $0 + 36 | 0;
  $7_1 = HEAPF32[$3_1 >> 2];
  $8_1 = HEAPF32[$0 + 32 >> 2];
  $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $11 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  HEAP32[$0 + 44 >> 2] = 0;
  HEAPF32[$3_1 >> 2] = Math_fround($5_1 + $7_1) - $10;
  HEAPF32[$0 + 32 >> 2] = Math_fround($4_1 + $8_1) - $9_1;
  HEAPF32[$2_1 >> 2] = Math_fround($6_1 + $1_1) - $11;
 }
 
 function $318($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0);
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $9_1 = HEAPF32[$1_1 + 52 >> 2];
  $7_1 = HEAPF32[$1_1 + 20 >> 2];
  $12_1 = HEAPF32[$1_1 + 24 >> 2];
  $10 = HEAPF32[$1_1 + 56 >> 2];
  $8_1 = HEAPF32[$1_1 + 36 >> 2];
  $5_1 = HEAPF32[$0 + 36 >> 2];
  $13_1 = HEAPF32[$1_1 + 40 >> 2];
  $14 = HEAPF32[$0 + 40 >> 2];
  $11 = HEAPF32[$1_1 + 48 >> 2];
  $15_1 = HEAPF32[$1_1 >> 2];
  $16_1 = HEAPF32[$1_1 + 4 >> 2];
  $17_1 = HEAPF32[$1_1 + 8 >> 2];
  $18_1 = HEAPF32[$1_1 + 16 >> 2];
  $19_1 = HEAPF32[$1_1 + 32 >> 2];
  $6_1 = HEAPF32[$0 + 32 >> 2];
  HEAP32[$2_1 + 12 >> 2] = 0;
  $6_1 = Math_fround($4_1 + $6_1);
  $5_1 = Math_fround($4_1 + $5_1);
  $4_1 = Math_fround($4_1 + $14);
  $8_1 = Math_fround(Math_fround(Math_fround($6_1 * Math_fround(Math_abs($19_1))) + Math_fround($5_1 * Math_fround(Math_abs($8_1)))) + Math_fround($4_1 * Math_fround(Math_abs($13_1))));
  HEAPF32[$2_1 + 8 >> 2] = $10 - $8_1;
  $7_1 = Math_fround(Math_fround(Math_fround($6_1 * Math_fround(Math_abs($18_1))) + Math_fround($5_1 * Math_fround(Math_abs($7_1)))) + Math_fround($4_1 * Math_fround(Math_abs($12_1))));
  HEAPF32[$2_1 + 4 >> 2] = $9_1 - $7_1;
  $4_1 = Math_fround(Math_fround(Math_fround($6_1 * Math_fround(Math_abs($15_1))) + Math_fround($5_1 * Math_fround(Math_abs($16_1)))) + Math_fround($4_1 * Math_fround(Math_abs($17_1))));
  HEAPF32[$2_1 >> 2] = $11 - $4_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 8 >> 2] = $10 + $8_1;
  HEAPF32[$3_1 + 4 >> 2] = $7_1 + $9_1;
  HEAPF32[$3_1 >> 2] = $4_1 + $11;
 }
 
 function $319($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $3_1 = HEAPF32[$0 + 40 >> 2];
  $4_1 = HEAPF32[$0 + 36 >> 2];
  $5_1 = HEAPF32[$0 + 32 >> 2];
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  HEAP32[$2_1 + 12 >> 2] = 0;
  $1_1 = Math_fround($1_1 / Math_fround(12.0));
  $5_1 = Math_fround($5_1 + $6_1);
  $5_1 = Math_fround($5_1 + $5_1);
  $5_1 = Math_fround($5_1 * $5_1);
  $4_1 = Math_fround($4_1 + $7_1);
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($5_1 + $4_1);
  $3_1 = Math_fround($3_1 + $8_1);
  $3_1 = Math_fround($3_1 + $3_1);
  $3_1 = Math_fround($3_1 * $3_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($5_1 + $3_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($4_1 + $3_1);
 }
 
 function $321($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0);
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $5_1 = $0 + 20 | 0;
  $9_1 = HEAPF32[$5_1 >> 2];
  $6_1 = $0 + 36 | 0;
  $10 = HEAPF32[$6_1 >> 2];
  $7_1 = $0 + 24 | 0;
  $11 = HEAPF32[$7_1 >> 2];
  $8_1 = $0 + 40 | 0;
  $12_1 = HEAPF32[$8_1 >> 2];
  $13_1 = HEAPF32[$0 + 16 >> 2];
  $14 = HEAPF32[$0 + 32 >> 2];
  $146($0, $1_1);
  HEAP32[$0 + 44 >> 2] = 0;
  HEAPF32[$8_1 >> 2] = Math_fround(Math_fround(Math_fround($4_1 + $12_1) / $11) * HEAPF32[$7_1 >> 2]) - $4_1;
  HEAPF32[$6_1 >> 2] = Math_fround(Math_fround(Math_fround($3_1 + $10) / $9_1) * HEAPF32[$5_1 >> 2]) - $3_1;
  HEAPF32[$0 + 32 >> 2] = Math_fround(Math_fround(Math_fround($2_1 + $14) / $13_1) * HEAPF32[$0 + 16 >> 2]) - $2_1;
 }
 
 function $322($0) {
  $0 = $0 | 0;
  return 7228;
 }
 
 function $323($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $3_1 = HEAPF32[$1_1 + 36 >> 2];
  $4_1 = HEAPF32[$1_1 + 40 >> 2];
  $5_1 = HEAPF32[$1_1 + 32 >> 2];
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  HEAP32[$0 + 12 >> 2] = 0;
  $4_1 = Math_fround($4_1 + $8_1);
  HEAPF32[$0 + 8 >> 2] = HEAPF32[$2_1 + 8 >> 2] >= Math_fround(0.0) ? $4_1 : Math_fround(-$4_1);
  $3_1 = Math_fround($3_1 + $7_1);
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$2_1 + 4 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
  $3_1 = Math_fround($5_1 + $6_1);
  HEAPF32[$0 >> 2] = HEAPF32[$2_1 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
 }
 
 function $324($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0);
  HEAP32[$0 + 12 >> 2] = 0;
  $3_1 = HEAPF32[$1_1 + 32 >> 2];
  HEAPF32[$0 >> 2] = HEAPF32[$2_1 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
  $3_1 = HEAPF32[$1_1 + 40 >> 2];
  HEAPF32[$0 + 8 >> 2] = HEAPF32[$2_1 + 8 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
  $3_1 = HEAPF32[$1_1 + 36 >> 2];
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$2_1 + 4 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
 }
 
 function $325($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  if (($3_1 | 0) >= 1) {
   while (1) {
    $4_1 = $1_1 + $5_1 | 0;
    $9_1 = HEAPF32[$4_1 + 4 >> 2];
    $10 = HEAPF32[$4_1 + 8 >> 2];
    $11 = HEAPF32[$4_1 >> 2];
    $6_1 = HEAPF32[$0 + 36 >> 2];
    $7_1 = HEAPF32[$0 + 40 >> 2];
    $8_1 = HEAPF32[$0 + 32 >> 2];
    $4_1 = $2_1 + $5_1 | 0;
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAPF32[$4_1 >> 2] = $11 >= Math_fround(0.0) ? $8_1 : Math_fround(-$8_1);
    HEAPF32[$4_1 + 8 >> 2] = $10 >= Math_fround(0.0) ? $7_1 : Math_fround(-$7_1);
    HEAPF32[$4_1 + 4 >> 2] = $9_1 >= Math_fround(0.0) ? $6_1 : Math_fround(-$6_1);
    $5_1 = $5_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   }
  }
 }
 
 function $326($0) {
  $0 = $0 | 0;
  return 6;
 }
 
 function $327($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  if ($1_1 >>> 0 <= 5) {
   HEAP32[$2_1 + 12 >> 2] = 0;
   $0 = $1_1 << 2;
   HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 + 7280 >> 2];
   HEAP32[$2_1 + 4 >> 2] = HEAP32[$0 + 7256 >> 2];
   HEAP32[$2_1 >> 2] = HEAP32[$0 + 7232 >> 2];
  }
 }
 
 function $328($0) {
  $0 = $0 | 0;
  return 8;
 }
 
 function $330($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = $0;
  if ($1_1 >>> 0 <= 11) {
   $1_1 = $1_1 << 2;
   $5_1 = HEAP32[$1_1 + 7352 >> 2];
   $6_1 = HEAP32[$1_1 + 7304 >> 2];
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($4_1, $6_1, $2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $5_1, $3_1);
 }
 
 function $331($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $4_1 = HEAPF32[$0 + 40 >> 2];
  $3_1 = HEAPF32[$0 + 36 >> 2];
  $5_1 = HEAPF32[$0 + 32 >> 2];
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  HEAP32[$2_1 + 12 >> 2] = 0;
  $3_1 = Math_fround($3_1 + $7_1);
  $0 = $1_1 >>> 1 & 1;
  HEAPF32[$2_1 + 4 >> 2] = Math_fround($3_1 * Math_fround($0 ^ 1)) - Math_fround($3_1 * Math_fround($0 | 0));
  $3_1 = Math_fround($5_1 + $6_1);
  $0 = $1_1 & 1;
  HEAPF32[$2_1 >> 2] = Math_fround($3_1 * Math_fround($0 ^ 1)) - Math_fround($3_1 * Math_fround($0 | 0));
  $4_1 = Math_fround($4_1 + $8_1);
  $0 = $1_1 >>> 2 & 1;
  HEAPF32[$2_1 + 8 >> 2] = Math_fround($4_1 * Math_fround($0 ^ 1)) - Math_fround($4_1 * Math_fround($0 | 0));
 }
 
 function $333($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0, $4_1 + 32 | 0, $3_1);
  HEAP32[$1_1 + 12 >> 2] = 0;
  $3_1 = HEAP32[$4_1 + 40 >> 2];
  HEAP32[$1_1 + 8 >> 2] = $3_1;
  $5_1 = HEAP32[$4_1 + 36 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $5_1;
  $6_1 = $1_1;
  $1_1 = HEAP32[$4_1 + 32 >> 2];
  HEAP32[$6_1 >> 2] = $1_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAP32[$4_1 + 8 >> 2] = $3_1 ^ -2147483648;
  HEAP32[$4_1 + 4 >> 2] = $5_1 ^ -2147483648;
  HEAP32[$4_1 >> 2] = $1_1 ^ -2147483648;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($4_1 + 16 | 0, $0, $4_1);
  $1_1 = $4_1 + 24 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $2_1 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3_1;
  $0 = HEAP32[$4_1 + 20 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $0;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $334($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0;
  $3_1 = HEAPF32[$1_1 >> 2];
  $4_1 = HEAPF32[$0 + 32 >> 2];
  label$1 : {
   if ($3_1 <= Math_fround($4_1 + $2_1) ^ 1 | $3_1 >= Math_fround(Math_fround(-$4_1) - $2_1) ^ 1) {
    break label$1
   }
   $3_1 = HEAPF32[$1_1 + 4 >> 2];
   $4_1 = HEAPF32[$0 + 36 >> 2];
   if ($3_1 <= Math_fround($4_1 + $2_1) ^ 1 | $3_1 >= Math_fround(Math_fround(-$4_1) - $2_1) ^ 1) {
    break label$1
   }
   $3_1 = HEAPF32[$1_1 + 8 >> 2];
   $4_1 = HEAPF32[$0 + 40 >> 2];
   if (!($3_1 <= Math_fround($4_1 + $2_1))) {
    break label$1
   }
   $5_1 = $3_1 >= Math_fround(Math_fround(-$4_1) - $2_1);
  }
  return $5_1 | 0;
 }
 
 function $335($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  if ($2_1 >>> 0 <= 5) {
   $5_1 = HEAPF32[$0 + 40 >> 2];
   $6_1 = HEAPF32[$0 + 36 >> 2];
   $4_1 = HEAPF32[$0 + 32 >> 2];
   $0 = 1065353216;
   $3_1 = $2_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       switch ($2_1 - 1 | 0) {
       case 0:
        $2_1 = 0;
        $0 = -1082130432;
        $3_1 = 0;
        break label$2;
       case 1:
        $2_1 = 1065353216;
        break label$3;
       case 2:
        $2_1 = -1082130432;
        break label$3;
       case 3:
        $3_1 = 1065353216;
        break label$4;
       case 4:
        break label$5;
       default:
        break label$2;
       };
      }
      $3_1 = -1082130432;
     }
     $0 = 0;
     $4_1 = $5_1;
     $2_1 = 0;
     break label$2;
    }
    $0 = 0;
    $4_1 = $6_1;
    $3_1 = 0;
   }
   HEAP32[$1_1 + 8 >> 2] = $3_1;
   HEAP32[$1_1 + 4 >> 2] = $2_1;
   HEAP32[$1_1 >> 2] = $0;
   HEAPF32[$1_1 + 12 >> 2] = -$4_1;
  }
 }
 
 function $336($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0);
  $145($0);
  $2_1 = HEAPF32[$1_1 >> 2];
  $4_1 = HEAPF32[$1_1 + 4 >> 2];
  $3_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAP32[$0 + 44 >> 2] = 0;
  $5_1 = Math_fround($3_1 * HEAPF32[$0 + 24 >> 2]);
  $3_1 = HEAPF32[$0 + 48 >> 2];
  HEAPF32[$0 + 40 >> 2] = $5_1 - $3_1;
  HEAPF32[$0 + 36 >> 2] = Math_fround($4_1 * HEAPF32[$0 + 20 >> 2]) - $3_1;
  HEAPF32[$0 + 32 >> 2] = Math_fround($2_1 * HEAPF32[$0 + 16 >> 2]) - $3_1;
  HEAP32[$0 + 56 >> 2] = 1;
  HEAP32[$0 >> 2] = 7408;
  $2_1 = HEAPF32[$1_1 >> 2];
  $4_1 = HEAPF32[$1_1 + 8 >> 2];
  $5_1 = HEAPF32[$1_1 + 4 >> 2];
  $2_1 = Math_fround(HEAPF32[(($2_1 < $5_1 ? ($2_1 < $4_1 ^ 1) << 1 : $5_1 < $4_1 ? 1 : 2) << 2) + $1_1 >> 2] * Math_fround(.10000000149011612));
  if (!!($2_1 < $3_1)) {
   $317($0, $2_1)
  }
  HEAP32[$0 + 4 >> 2] = 13;
 }
 
 function $338($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0);
  $145($0);
  $2_1 = HEAPF32[$1_1 >> 2];
  $4_1 = HEAPF32[$1_1 + 4 >> 2];
  $3_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAP32[$0 + 44 >> 2] = 0;
  $5_1 = Math_fround($3_1 * HEAPF32[$0 + 24 >> 2]);
  $3_1 = HEAPF32[$0 + 48 >> 2];
  HEAPF32[$0 + 40 >> 2] = $5_1 - $3_1;
  HEAPF32[$0 + 36 >> 2] = Math_fround($4_1 * HEAPF32[$0 + 20 >> 2]) - $3_1;
  HEAPF32[$0 + 32 >> 2] = Math_fround($2_1 * HEAPF32[$0 + 16 >> 2]) - $3_1;
  HEAP32[$0 + 56 >> 2] = 1;
  HEAP32[$0 >> 2] = 7408;
  $2_1 = HEAPF32[$1_1 >> 2];
  $4_1 = HEAPF32[$1_1 + 8 >> 2];
  $5_1 = HEAPF32[$1_1 + 4 >> 2];
  $2_1 = Math_fround(HEAPF32[(($2_1 < $5_1 ? ($2_1 < $4_1 ^ 1) << 1 : $5_1 < $4_1 ? 1 : 2) << 2) + $1_1 >> 2] * Math_fround(.10000000149011612));
  if (!!($2_1 < $3_1)) {
   $317($0, $2_1)
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 >> 2] = 7512;
  HEAP32[$0 + 4 >> 2] = 13;
 }
 
 function $339($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0);
  $145($0);
  $2_1 = HEAPF32[$1_1 >> 2];
  $4_1 = HEAPF32[$1_1 + 4 >> 2];
  $3_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAP32[$0 + 44 >> 2] = 0;
  $5_1 = Math_fround($3_1 * HEAPF32[$0 + 24 >> 2]);
  $3_1 = HEAPF32[$0 + 48 >> 2];
  HEAPF32[$0 + 40 >> 2] = $5_1 - $3_1;
  HEAPF32[$0 + 36 >> 2] = Math_fround($4_1 * HEAPF32[$0 + 20 >> 2]) - $3_1;
  HEAPF32[$0 + 32 >> 2] = Math_fround($2_1 * HEAPF32[$0 + 16 >> 2]) - $3_1;
  HEAP32[$0 + 56 >> 2] = 1;
  HEAP32[$0 >> 2] = 7408;
  $2_1 = HEAPF32[$1_1 >> 2];
  $4_1 = HEAPF32[$1_1 + 8 >> 2];
  $5_1 = HEAPF32[$1_1 + 4 >> 2];
  $2_1 = Math_fround(HEAPF32[(($2_1 < $5_1 ? ($2_1 < $4_1 ^ 1) << 1 : $5_1 < $4_1 ? 1 : 2) << 2) + $1_1 >> 2] * Math_fround(.10000000149011612));
  if (!!($2_1 < $3_1)) {
   $317($0, $2_1)
  }
  HEAP32[$0 + 56 >> 2] = 2;
  HEAP32[$0 >> 2] = 7616;
  HEAP32[$0 + 4 >> 2] = 13;
 }
 
 function $341($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $9_1 = $0 + 40 | 0;
  $10 = HEAP32[$9_1 + 4 >> 2];
  $7_1 = $4_1 + 8 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $10;
  $9_1 = HEAP32[$0 + 36 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  (wasm2js_i32$0 = $7_1, wasm2js_f32$0 = Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0)) + HEAPF32[$7_1 >> 2])), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  HEAPF32[$4_1 >> 2] = $3_1 + HEAPF32[$4_1 >> 2];
  HEAPF32[$4_1 + 4 >> 2] = $8_1 + HEAPF32[$4_1 + 4 >> 2];
  $3_1 = Math_fround($1_1 * Math_fround(.5));
  $8_1 = Math_fround($1_1 * Math_fround(.25));
  $1_1 = Math_fround($1_1 / Math_fround(12.0));
  label$1 : {
   label$2 : {
    $0 = HEAP32[$0 + 56 >> 2];
    if ($0 >>> 0 > 2) {
     break label$2
    }
    label$3 : {
     switch ($0 - 1 | 0) {
     default:
      $6_1 = $3_1;
      $3_1 = HEAPF32[$4_1 + 4 >> 2];
      $5_1 = Math_fround($3_1 * $3_1);
      $3_1 = Math_fround($6_1 * $5_1);
      $6_1 = $1_1;
      $1_1 = HEAPF32[$4_1 >> 2];
      $5_1 = Math_fround(Math_fround($8_1 * $5_1) + Math_fround($6_1 * Math_fround($1_1 * Math_fround($1_1 * Math_fround(4.0)))));
      $6_1 = $5_1;
      break label$1;
     case 0:
      break label$2;
     case 1:
      break label$3;
     };
    }
    $5_1 = $3_1;
    $3_1 = HEAPF32[$4_1 >> 2];
    $3_1 = Math_fround($3_1 * $3_1);
    $6_1 = Math_fround($5_1 * $3_1);
    $5_1 = $1_1;
    $1_1 = HEAPF32[$4_1 + 8 >> 2];
    $3_1 = Math_fround(Math_fround($8_1 * $3_1) + Math_fround($5_1 * Math_fround($1_1 * Math_fround($1_1 * Math_fround(4.0)))));
    $5_1 = $3_1;
    break label$1;
   }
   $5_1 = $3_1;
   $3_1 = HEAPF32[$4_1 >> 2];
   $3_1 = Math_fround($3_1 * $3_1);
   $5_1 = Math_fround($5_1 * $3_1);
   $6_1 = $1_1;
   $1_1 = HEAPF32[$4_1 + 4 >> 2];
   $3_1 = Math_fround(Math_fround($8_1 * $3_1) + Math_fround($6_1 * Math_fround($1_1 * Math_fround($1_1 * Math_fround(4.0)))));
   $6_1 = $3_1;
  }
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAPF32[$2_1 + 8 >> 2] = $6_1;
  HEAPF32[$2_1 + 4 >> 2] = $5_1;
  HEAPF32[$2_1 >> 2] = $3_1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $342($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $4_1 = HEAPF32[$1_1 + 36 >> 2];
  $3_1 = HEAPF32[$1_1 + 32 >> 2];
  $5_1 = HEAPF32[$2_1 + 4 >> 2];
  $6_1 = HEAPF32[$2_1 + 8 >> 2];
  $7_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1))));
  label$1 : {
   if ($7_1 != Math_fround(0.0)) {
    $4_1 = Math_fround($4_1 / $7_1);
    $8_1 = Math_fround($6_1 * $4_1);
    $4_1 = Math_fround($5_1 * $4_1);
    $3_1 = HEAPF32[$2_1 >> 2] < Math_fround(0.0) ? Math_fround(-$3_1) : $3_1;
    break label$1;
   }
   $3_1 = HEAPF32[$2_1 >> 2] < Math_fround(0.0) ? Math_fround(-$3_1) : $3_1;
  }
  HEAPF32[$0 + 8 >> 2] = $8_1;
  HEAPF32[$0 >> 2] = $3_1;
  HEAPF32[$0 + 4 >> 2] = $4_1;
 }
 
 function $343($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $3_1 = HEAPF32[$1_1 + 40 >> 2];
  $4_1 = HEAPF32[$1_1 + 32 >> 2];
  $1_1 = $0;
  $5_1 = HEAPF32[$2_1 >> 2];
  $6_1 = HEAPF32[$2_1 + 4 >> 2];
  $7_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1))));
  label$1 : {
   if ($7_1 != Math_fround(0.0)) {
    $4_1 = Math_fround($4_1 / $7_1);
    $8_1 = Math_fround($6_1 * $4_1);
    $4_1 = Math_fround($5_1 * $4_1);
    $3_1 = HEAPF32[$2_1 + 8 >> 2] < Math_fround(0.0) ? Math_fround(-$3_1) : $3_1;
    break label$1;
   }
   $3_1 = HEAPF32[$2_1 + 8 >> 2] < Math_fround(0.0) ? Math_fround(-$3_1) : $3_1;
  }
  HEAPF32[$1_1 + 8 >> 2] = $3_1;
  HEAPF32[$0 >> 2] = $4_1;
  HEAPF32[$0 + 4 >> 2] = $8_1;
 }
 
 function $344($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $3_1 = HEAPF32[$1_1 + 36 >> 2];
  $4_1 = HEAPF32[$1_1 + 32 >> 2];
  $5_1 = HEAPF32[$2_1 >> 2];
  $6_1 = HEAPF32[$2_1 + 8 >> 2];
  $7_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1))));
  label$1 : {
   if ($7_1 != Math_fround(0.0)) {
    $4_1 = Math_fround($4_1 / $7_1);
    $8_1 = Math_fround($6_1 * $4_1);
    $4_1 = Math_fround($5_1 * $4_1);
    $3_1 = HEAPF32[$2_1 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$3_1) : $3_1;
    break label$1;
   }
   $3_1 = HEAPF32[$2_1 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$3_1) : $3_1;
  }
  HEAPF32[$0 + 8 >> 2] = $8_1;
  HEAPF32[$0 + 4 >> 2] = $3_1;
  HEAPF32[$0 >> 2] = $4_1;
 }
 
 function $345($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  if (($3_1 | 0) >= 1) {
   while (1) {
    $4_1 = HEAPF32[$0 + 36 >> 2];
    $5_1 = HEAPF32[$0 + 32 >> 2];
    $7_1 = HEAPF32[$1_1 >> 2];
    $6_1 = HEAPF32[$1_1 + 8 >> 2];
    $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($6_1 * $6_1))));
    label$3 : {
     if ($8_1 != Math_fround(0.0)) {
      $5_1 = Math_fround($5_1 / $8_1);
      $6_1 = Math_fround($6_1 * $5_1);
      $5_1 = Math_fround($7_1 * $5_1);
      $4_1 = HEAPF32[$1_1 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
      break label$3;
     }
     $6_1 = Math_fround(0.0);
     $4_1 = HEAPF32[$1_1 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
    }
    HEAPF32[$2_1 >> 2] = $5_1;
    HEAPF32[$2_1 + 8 >> 2] = $6_1;
    HEAPF32[$2_1 + 4 >> 2] = $4_1;
    $2_1 = $2_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   }
  }
 }
 
 function $346($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  if (($3_1 | 0) >= 1) {
   while (1) {
    $4_1 = HEAPF32[$0 + 40 >> 2];
    $5_1 = HEAPF32[$0 + 32 >> 2];
    $7_1 = HEAPF32[$1_1 >> 2];
    $6_1 = HEAPF32[$1_1 + 4 >> 2];
    $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($6_1 * $6_1))));
    label$3 : {
     if ($8_1 != Math_fround(0.0)) {
      $5_1 = Math_fround($5_1 / $8_1);
      $6_1 = Math_fround($6_1 * $5_1);
      $5_1 = Math_fround($7_1 * $5_1);
      $4_1 = HEAPF32[$1_1 + 8 >> 2] < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
      break label$3;
     }
     $6_1 = Math_fround(0.0);
     $4_1 = HEAPF32[$1_1 + 8 >> 2] < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
    }
    HEAPF32[$2_1 >> 2] = $5_1;
    HEAPF32[$2_1 + 8 >> 2] = $4_1;
    HEAPF32[$2_1 + 4 >> 2] = $6_1;
    $2_1 = $2_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   }
  }
 }
 
 function $347($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0;
  if (($3_1 | 0) >= 1) {
   while (1) {
    $4_1 = HEAPF32[$0 + 32 >> 2];
    $5_1 = HEAPF32[$0 + 36 >> 2];
    $9_1 = $2_1;
    $7_1 = HEAPF32[$1_1 + 4 >> 2];
    $6_1 = HEAPF32[$1_1 + 8 >> 2];
    $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($6_1 * $6_1))));
    label$3 : {
     if ($8_1 != Math_fround(0.0)) {
      $5_1 = Math_fround($5_1 / $8_1);
      $6_1 = Math_fround($6_1 * $5_1);
      $5_1 = Math_fround($7_1 * $5_1);
      $4_1 = HEAPF32[$1_1 >> 2] < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
      break label$3;
     }
     $6_1 = Math_fround(0.0);
     $4_1 = HEAPF32[$1_1 >> 2] < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
    }
    HEAPF32[$9_1 >> 2] = $4_1;
    HEAPF32[$2_1 + 8 >> 2] = $6_1;
    HEAPF32[$2_1 + 4 >> 2] = $5_1;
    $2_1 = $2_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   }
  }
 }
 
 function $350($0) {
  $0 = $0 | 0;
  return 7808;
 }
 
 function $353($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $98($0, $1_1, $2_1);
  HEAP32[$1_1 + 28 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$1_1 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
  HEAP32[$1_1 + 36 >> 2] = HEAP32[$0 + 40 >> 2];
  HEAP32[$1_1 + 40 >> 2] = HEAP32[$0 + 44 >> 2];
  HEAP32[$1_1 + 12 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
  HEAP32[$1_1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$1_1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP32[$1_1 + 44 >> 2] = HEAP32[$0 + 48 >> 2];
  $0 = HEAP32[$0 + 56 >> 2];
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = $0;
  return 7818;
 }
 
 function $354($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, $11 = Math_fround(0);
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($6_1, $1_1, $2_1);
  $9_1 = $6_1 + 8 | 0;
  $10 = HEAP32[$9_1 + 4 >> 2];
  $7_1 = $0 + 8 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $10;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $7_1;
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1)) != Math_fround(0.0)) {
   $4_1 = HEAPF32[$2_1 + 4 >> 2];
   $3_1 = HEAPF32[$2_1 >> 2];
   $5_1 = HEAPF32[$2_1 + 8 >> 2];
   $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
   $1_1 = Math_fround(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1)) + Math_fround($5_1 * $5_1)) < Math_fround(1.4210854715202004e-14);
   $3_1 = $1_1 ? Math_fround(-1.0) : $3_1;
   $11 = $3_1;
   $5_1 = $1_1 ? Math_fround(-1.0) : $5_1;
   $4_1 = $1_1 ? Math_fround(-1.0) : $4_1;
   $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1))))));
   HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($8_1 * Math_fround($11 * $3_1));
   HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + Math_fround($8_1 * Math_fround($4_1 * $3_1));
   HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + Math_fround($8_1 * Math_fround($5_1 * $3_1));
  }
  global$0 = $6_1 + 16 | 0;
 }
 
 function $355($0) {
  $0 = $0 | 0;
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0);
  $1_1 = HEAPF32[$0 + 32 >> 2];
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  return Math_fround(Math_fround($1_1 + $2_1));
 }
 
 function $357($0) {
  $0 = $0 | 0;
  return 7838;
 }
 
 function $358($0) {
  $0 = $0 | 0;
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0);
  $1_1 = HEAPF32[$0 + 36 >> 2];
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  return Math_fround(Math_fround($1_1 + $2_1));
 }
 
 function $360($0) {
  $0 = $0 | 0;
  return 7848;
 }
 
 function $362($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $363($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  if (($3_1 | 0) >= 1) {
   $17($2_1, 0, $3_1 << 4)
  }
 }
 
 function $364($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10 = 0, $11 = Math_fround(0);
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($6_1, $1_1, $2_1);
  $10 = $6_1 + 8 | 0;
  $8_1 = HEAP32[$10 + 4 >> 2];
  $7_1 = $0 + 8 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $8_1;
  $4_1 = HEAPF32[$2_1 + 4 >> 2];
  $3_1 = HEAPF32[$2_1 >> 2];
  $5_1 = HEAPF32[$2_1 + 8 >> 2];
  $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  $1_1 = Math_fround(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1)) + Math_fround($5_1 * $5_1)) < Math_fround(1.4210854715202004e-14);
  $3_1 = $1_1 ? Math_fround(-1.0) : $3_1;
  $11 = $3_1;
  $5_1 = $1_1 ? Math_fround(-1.0) : $5_1;
  $4_1 = $1_1 ? Math_fround(-1.0) : $4_1;
  $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1))))));
  HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($9_1 * Math_fround($11 * $3_1));
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + Math_fround($9_1 * Math_fround($4_1 * $3_1));
  HEAPF32[$7_1 >> 2] = HEAPF32[$7_1 >> 2] + Math_fround($9_1 * Math_fround($5_1 * $3_1));
  global$0 = $6_1 + 16 | 0;
 }
 
 function $365($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0;
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $0 = $1_1 + 52 | 0;
  $4_1 = HEAPF32[$0 >> 2];
  $10 = $1_1 + 56 | 0;
  $5_1 = HEAPF32[$10 >> 2];
  $6_1 = HEAPF32[$1_1 + 48 >> 2];
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAPF32[$2_1 + 8 >> 2] = $5_1 - $9_1;
  HEAPF32[$2_1 + 4 >> 2] = $4_1 - $8_1;
  HEAPF32[$2_1 >> 2] = $6_1 - $7_1;
  $4_1 = HEAPF32[$0 >> 2];
  $5_1 = HEAPF32[$10 >> 2];
  $6_1 = HEAPF32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 8 >> 2] = $9_1 + $5_1;
  HEAPF32[$3_1 + 4 >> 2] = $8_1 + $4_1;
  HEAPF32[$3_1 >> 2] = $7_1 + $6_1;
 }
 
 function $366($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0);
  $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  HEAP32[$2_1 + 12 >> 2] = 0;
  $1_1 = Math_fround($4_1 * Math_fround($3_1 * Math_fround($1_1 * Math_fround(.4000000059604645))));
  HEAPF32[$2_1 + 8 >> 2] = $1_1;
  HEAPF32[$2_1 + 4 >> 2] = $1_1;
  HEAPF32[$2_1 >> 2] = $1_1;
 }
 
 function $368($0) {
  $0 = $0 | 0;
  return 7988;
 }
 
 function $370($0) {
  $0 = $0 | 0;
  return Math_fround(Math_fround(HEAPF32[$0 + 32 >> 2] * HEAPF32[$0 + 16 >> 2]));
 }
 
 function $371($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19_1 = Math_fround(0), $20 = 0, $21 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = Math_fround(0), $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = 0, $34 = 0, $35 = 0, $36_1 = 0, $37_1 = 0, $38 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  label$1 : {
   if (HEAP32[$0 + 56 >> 2] < 1) {
    break label$1
   }
   $8_1 = HEAPF32[$3_1 >> 2];
   $13_1 = HEAPF32[$2_1 >> 2];
   $10 = Math_fround($8_1 - $13_1);
   $9_1 = HEAPF32[$3_1 + 4 >> 2];
   $14 = HEAPF32[$2_1 + 4 >> 2];
   $12_1 = Math_fround($9_1 - $14);
   $7_1 = HEAPF32[$3_1 + 8 >> 2];
   $15_1 = HEAPF32[$2_1 + 8 >> 2];
   $16_1 = Math_fround($7_1 - $15_1);
   $19_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($12_1 * $12_1)) + Math_fround($16_1 * $16_1)))));
   $22_1 = $16_1;
   $16_1 = Math_fround($16_1 * $19_1);
   $23_1 = $10;
   $10 = Math_fround($10 * $19_1);
   $25 = $12_1;
   $12_1 = Math_fround($12_1 * $19_1);
   $25 = Math_fround(Math_fround($22_1 * $16_1) + Math_fround(Math_fround($23_1 * $10) + Math_fround($25 * $12_1)));
   $19_1 = HEAPF32[$5_1 + 8 >> 2];
   $27_1 = Math_fround(($15_1 < $7_1 ? $7_1 : $15_1) + $19_1);
   $22_1 = HEAPF32[$5_1 + 4 >> 2];
   $28_1 = Math_fround(($14 < $9_1 ? $9_1 : $14) + $22_1);
   $23_1 = HEAPF32[$5_1 >> 2];
   $29_1 = Math_fround(($13_1 < $8_1 ? $8_1 : $13_1) + $23_1);
   $15_1 = $7_1 < $15_1 ? $7_1 : $15_1;
   $7_1 = HEAPF32[$4_1 + 8 >> 2];
   $30 = Math_fround($15_1 + $7_1);
   $14 = $9_1 < $14 ? $9_1 : $14;
   $9_1 = HEAPF32[$4_1 + 4 >> 2];
   $31_1 = Math_fround($14 + $9_1);
   $13_1 = $8_1 < $13_1 ? $8_1 : $13_1;
   $8_1 = HEAPF32[$4_1 >> 2];
   $32 = Math_fround($13_1 + $8_1);
   $3_1 = HEAP32[$0 + 96 >> 2];
   $13_1 = $16_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $16_1);
   $17_1 = $13_1 < Math_fround(0.0);
   $33_1 = ($17_1 << 4) + $6_1 | 8;
   $14 = $12_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $12_1);
   $21 = $14 < Math_fround(0.0);
   $34 = ($21 << 4) + $6_1 | 4;
   $35 = (($17_1 ^ 1) << 4) + $6_1 | 8;
   $36_1 = (($21 ^ 1) << 4) + $6_1 | 4;
   $15_1 = $10 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $10);
   $17_1 = $15_1 < Math_fround(0.0);
   $37_1 = ($17_1 << 4) + $6_1 | 0;
   $38 = (($17_1 ^ 1) << 4) + $6_1 | 0;
   $21 = $6_1 + 16 | 0;
   $17_1 = 1;
   while (1) {
    $11 = $3_1 + 8 | 0;
    $20 = HEAP32[$11 >> 2];
    $18_1 = HEAP32[$11 + 4 >> 2];
    $39_1 = HEAP32[$3_1 >> 2];
    $40_1 = HEAP32[$3_1 + 4 >> 2];
    $11 = HEAP32[$3_1 + 20 >> 2];
    HEAP32[$21 >> 2] = HEAP32[$3_1 + 16 >> 2];
    HEAP32[$21 + 4 >> 2] = $11;
    $11 = $3_1 + 24 | 0;
    $41_1 = HEAP32[$11 + 4 >> 2];
    $26_1 = $21 + 8 | 0;
    HEAP32[$26_1 >> 2] = HEAP32[$11 >> 2];
    HEAP32[$26_1 + 4 >> 2] = $41_1;
    HEAP32[$6_1 >> 2] = $39_1;
    HEAP32[$6_1 + 4 >> 2] = $40_1;
    HEAP32[$6_1 + 8 >> 2] = $20;
    HEAP32[$6_1 + 12 >> 2] = $18_1;
    HEAPF32[$6_1 >> 2] = HEAPF32[$6_1 >> 2] - $23_1;
    HEAPF32[$6_1 + 4 >> 2] = HEAPF32[$6_1 + 4 >> 2] - $22_1;
    HEAPF32[$6_1 + 16 >> 2] = HEAPF32[$6_1 + 16 >> 2] - $8_1;
    HEAPF32[$6_1 + 20 >> 2] = HEAPF32[$6_1 + 20 >> 2] - $9_1;
    HEAPF32[$6_1 + 8 >> 2] = HEAPF32[$6_1 + 8 >> 2] - $19_1;
    HEAPF32[$6_1 + 24 >> 2] = HEAPF32[$6_1 + 24 >> 2] - $7_1;
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $20 = $28_1 < HEAPF32[$3_1 + 4 >> 2] | $31_1 > HEAPF32[$3_1 + 20 >> 2];
         $18_1 = 0;
         label$3 : {
          if ($32 > HEAPF32[$3_1 + 16 >> 2]) {
           break label$3
          }
          $18_1 = 0;
          if ($29_1 < HEAPF32[$3_1 >> 2]) {
           break label$3
          }
          $18_1 = 1;
         }
         if ($20 | ($27_1 < HEAPF32[$3_1 + 8 >> 2] | $30 > HEAPF32[$11 >> 2] ? 0 : $18_1) ^ 1) {
          break label$9
         }
         $10 = HEAPF32[$2_1 + 4 >> 2];
         $8_1 = Math_fround($14 * Math_fround(HEAPF32[$34 >> 2] - $10));
         $7_1 = HEAPF32[$2_1 >> 2];
         $9_1 = Math_fround($15_1 * Math_fround(HEAPF32[$38 >> 2] - $7_1));
         if ($8_1 > $9_1) {
          break label$9
         }
         $7_1 = Math_fround($15_1 * Math_fround(HEAPF32[$37_1 >> 2] - $7_1));
         $10 = Math_fround($14 * Math_fround(HEAPF32[$36_1 >> 2] - $10));
         if ($7_1 > $10) {
          break label$9
         }
         $16_1 = HEAPF32[$2_1 + 8 >> 2];
         $12_1 = Math_fround($13_1 * Math_fround(HEAPF32[$33_1 >> 2] - $16_1));
         $9_1 = $10 < $9_1 ? $10 : $9_1;
         if ($12_1 > $9_1) {
          break label$9
         }
         $8_1 = $8_1 > $7_1 ? $8_1 : $7_1;
         $7_1 = Math_fround($13_1 * Math_fround(HEAPF32[$35 >> 2] - $16_1));
         if ($8_1 > $7_1) {
          break label$9
         }
         $18_1 = HEAP32[$3_1 + 32 >> 2];
         $11 = ($18_1 | 0) == -1;
         $20 = ($12_1 > $8_1 ? $12_1 : $8_1) < $25 & ($7_1 < $9_1 ? $7_1 : $9_1) > Math_fround(0.0);
         if (($20 | 0) != 1 | ($18_1 | 0) != -1) {
          break label$8
         }
         FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, HEAP32[$3_1 + 36 >> 2], HEAP32[$3_1 + 40 >> 2]);
         break label$7;
        }
        $11 = HEAP32[$3_1 + 32 >> 2] == -1;
        $20 = 0;
       }
       if ($11) {
        break label$7
       }
       if (!$20) {
        break label$6
       }
      }
      $24_1 = $24_1 + 1 | 0;
      $3_1 = $3_1 - -64 | 0;
      break label$5;
     }
     $11 = HEAP32[$3_1 + 32 >> 2];
     $24_1 = $11 + $24_1 | 0;
     $3_1 = ($11 << 6) + $3_1 | 0;
    }
    if (($24_1 | 0) >= HEAP32[$0 + 56 >> 2]) {
     break label$1
    }
    $17_1 = $17_1 + 1 | 0;
    $7_1 = HEAPF32[$4_1 + 8 >> 2];
    $9_1 = HEAPF32[$4_1 + 4 >> 2];
    $8_1 = HEAPF32[$4_1 >> 2];
    $19_1 = HEAPF32[$5_1 + 8 >> 2];
    $22_1 = HEAPF32[$5_1 + 4 >> 2];
    $23_1 = HEAPF32[$5_1 >> 2];
    continue;
   };
  }
  if (HEAP32[6030] < ($17_1 | 0)) {
   HEAP32[6030] = $17_1
  }
  global$0 = $6_1 + 32 | 0;
 }
 
 function $372($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20 = Math_fround(0), $21 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32 = 0, $33_1 = 0, $34 = 0, $35 = 0, $36_1 = 0, $37_1 = 0, $38 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42 = 0, $43_1 = 0, $44_1 = 0;
  $15_1 = global$0 - 32 | 0;
  global$0 = $15_1;
  $11 = HEAPF32[$2_1 + 4 >> 2];
  $12_1 = HEAPF32[$3_1 + 4 >> 2];
  $13_1 = HEAPF32[$2_1 >> 2];
  $10 = HEAPF32[$3_1 >> 2];
  $18_1 = HEAPF32[$0 + 28 >> 2];
  $7_1 = HEAPF32[$0 + 12 >> 2];
  $17_1 = HEAPF32[$3_1 + 8 >> 2];
  $20 = HEAPF32[$2_1 + 8 >> 2];
  $8_1 = Math_fround(($17_1 < $20 ? $17_1 : $20) + HEAPF32[$4_1 + 8 >> 2]);
  $8_1 = $8_1 < $7_1 ? $7_1 : $8_1;
  $28_1 = HEAPF32[$0 + 44 >> 2];
  $8_1 = Math_fround(Math_fround(($18_1 < $8_1 ? $18_1 : $8_1) - $7_1) * $28_1);
  label$1 : {
   if ($8_1 < Math_fround(4294967296.0) & $8_1 >= Math_fround(0.0)) {
    $3_1 = ~~$8_1 >>> 0;
    break label$1;
   }
   $3_1 = 0;
  }
  $22_1 = HEAPF32[$0 + 24 >> 2];
  $8_1 = HEAPF32[$0 + 8 >> 2];
  $9_1 = Math_fround(($12_1 < $11 ? $12_1 : $11) + HEAPF32[$4_1 + 4 >> 2]);
  $9_1 = $9_1 < $8_1 ? $8_1 : $9_1;
  $29_1 = HEAPF32[$0 + 40 >> 2];
  $9_1 = Math_fround(Math_fround(($22_1 < $9_1 ? $22_1 : $9_1) - $8_1) * $29_1);
  label$3 : {
   if ($9_1 < Math_fround(4294967296.0) & $9_1 >= Math_fround(0.0)) {
    $14 = ~~$9_1 >>> 0;
    break label$3;
   }
   $14 = 0;
  }
  $23_1 = HEAPF32[$0 + 20 >> 2];
  $9_1 = HEAPF32[$0 + 4 >> 2];
  $16_1 = Math_fround(($10 < $13_1 ? $10 : $13_1) + HEAPF32[$4_1 >> 2]);
  $16_1 = $16_1 < $9_1 ? $9_1 : $16_1;
  $30 = HEAPF32[$0 + 36 >> 2];
  $16_1 = Math_fround(Math_fround(($23_1 < $16_1 ? $23_1 : $16_1) - $9_1) * $30);
  label$5 : {
   if ($16_1 < Math_fround(4294967296.0) & $16_1 >= Math_fround(0.0)) {
    $21 = ~~$16_1 >>> 0;
    break label$5;
   }
   $21 = 0;
  }
  $16_1 = Math_fround(($20 < $17_1 ? $17_1 : $20) + HEAPF32[$5_1 + 8 >> 2]);
  $16_1 = $16_1 < $7_1 ? $7_1 : $16_1;
  $7_1 = Math_fround(Math_fround(Math_fround(($18_1 < $16_1 ? $18_1 : $16_1) - $7_1) * $28_1) + Math_fround(1.0));
  label$7 : {
   if ($7_1 < Math_fround(4294967296.0) & $7_1 >= Math_fround(0.0)) {
    $24_1 = ~~$7_1 >>> 0;
    break label$7;
   }
   $24_1 = 0;
  }
  $7_1 = Math_fround(($11 < $12_1 ? $12_1 : $11) + HEAPF32[$5_1 + 4 >> 2]);
  $7_1 = $7_1 < $8_1 ? $8_1 : $7_1;
  $7_1 = Math_fround(Math_fround(Math_fround(($22_1 < $7_1 ? $22_1 : $7_1) - $8_1) * $29_1) + Math_fround(1.0));
  label$9 : {
   if ($7_1 < Math_fround(4294967296.0) & $7_1 >= Math_fround(0.0)) {
    $25 = ~~$7_1 >>> 0;
    break label$9;
   }
   $25 = 0;
  }
  $7_1 = Math_fround(($13_1 < $10 ? $10 : $13_1) + HEAPF32[$5_1 >> 2]);
  $7_1 = $7_1 < $9_1 ? $9_1 : $7_1;
  $7_1 = Math_fround(Math_fround(Math_fround(($23_1 < $7_1 ? $23_1 : $7_1) - $9_1) * $30) + Math_fround(1.0));
  label$11 : {
   if ($7_1 < Math_fround(4294967296.0) & $7_1 >= Math_fround(0.0)) {
    $26_1 = ~~$7_1 >>> 0;
    break label$11;
   }
   $26_1 = 0;
  }
  if (0 < ($6_1 | 0)) {
   $13_1 = Math_fround($10 - $13_1);
   $11 = Math_fround($12_1 - $11);
   $12_1 = Math_fround($17_1 - $20);
   $10 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($11 * $11)) + Math_fround($12_1 * $12_1)))));
   $7_1 = $12_1;
   $12_1 = Math_fround($12_1 * $10);
   $8_1 = $13_1;
   $13_1 = Math_fround($13_1 * $10);
   $9_1 = $11;
   $11 = Math_fround($11 * $10);
   $20 = Math_fround(Math_fround($7_1 * $12_1) + Math_fround(Math_fround($8_1 * $13_1) + Math_fround($9_1 * $11)));
   $34 = $3_1 & 65534;
   $35 = $14 & 65534;
   $36_1 = $21 & 65534;
   $24_1 = $24_1 | 1;
   $25 = $25 | 1;
   $26_1 = $26_1 | 1;
   $3_1 = HEAP32[$0 + 136 >> 2];
   $12_1 = $12_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $12_1);
   $19_1 = $12_1 < Math_fround(0.0);
   $37_1 = ($19_1 << 4) + $15_1 | 8;
   $11 = $11 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $11);
   $14 = $11 < Math_fround(0.0);
   $38 = ($14 << 4) + $15_1 | 4;
   $39_1 = (($19_1 ^ 1) << 4) + $15_1 | 8;
   $40_1 = (($14 ^ 1) << 4) + $15_1 | 4;
   $13_1 = $13_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $13_1);
   $19_1 = $13_1 < Math_fround(0.0);
   $41_1 = ($19_1 << 4) + $15_1 | 0;
   $42 = (($19_1 ^ 1) << 4) + $15_1 | 0;
   $19_1 = 0;
   while (1) {
    $21 = HEAP32[$3_1 + 12 >> 2];
    $14 = 0;
    label$15 : {
     label$16 : {
      label$17 : {
       label$18 : {
        if ($36_1 >>> 0 > HEAPU16[$3_1 + 6 >> 1]) {
         break label$18
        }
        $31_1 = HEAPU16[$3_1 >> 1];
        if ($26_1 >>> 0 < $31_1 >>> 0 | $34 >>> 0 > HEAPU16[$3_1 + 10 >> 1]) {
         break label$18
        }
        $32 = HEAPU16[$3_1 + 4 >> 1];
        if ($24_1 >>> 0 < $32 >>> 0 | $35 >>> 0 > HEAPU16[$3_1 + 8 >> 1]) {
         break label$18
        }
        $33_1 = HEAPU16[$3_1 + 2 >> 1];
        if ($25 >>> 0 < $33_1 >>> 0) {
         break label$18
        }
        HEAP32[$15_1 + 12 >> 2] = 0;
        $14 = HEAPU16[$3_1 + 10 >> 1];
        $43_1 = HEAPU16[$3_1 + 8 >> 1];
        $44_1 = HEAPU16[$3_1 + 6 >> 1];
        HEAP32[$15_1 + 28 >> 2] = 0;
        $10 = HEAPF32[$0 + 36 >> 2];
        $7_1 = HEAPF32[$0 + 4 >> 2];
        HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($31_1 >>> 0) / $10) + $7_1) - HEAPF32[$5_1 >> 2];
        $8_1 = HEAPF32[$0 + 40 >> 2];
        $9_1 = HEAPF32[$0 + 8 >> 2];
        HEAPF32[$15_1 + 4 >> 2] = Math_fround(Math_fround(Math_fround($33_1 >>> 0) / $8_1) + $9_1) - HEAPF32[$5_1 + 4 >> 2];
        $17_1 = HEAPF32[$0 + 44 >> 2];
        $18_1 = HEAPF32[$0 + 12 >> 2];
        HEAPF32[$15_1 + 8 >> 2] = Math_fround(Math_fround(Math_fround($32 >>> 0) / $17_1) + $18_1) - HEAPF32[$5_1 + 8 >> 2];
        HEAPF32[$15_1 + 16 >> 2] = Math_fround($7_1 + Math_fround(Math_fround($44_1 >>> 0) / $10)) - HEAPF32[$4_1 >> 2];
        HEAPF32[$15_1 + 20 >> 2] = Math_fround($9_1 + Math_fround(Math_fround($43_1 >>> 0) / $8_1)) - HEAPF32[$4_1 + 4 >> 2];
        HEAPF32[$15_1 + 24 >> 2] = Math_fround($18_1 + Math_fround(Math_fround($14 >>> 0) / $17_1)) - HEAPF32[$4_1 + 8 >> 2];
        label$19 : {
         $9_1 = HEAPF32[$2_1 + 4 >> 2];
         $10 = Math_fround($11 * Math_fround(HEAPF32[$38 >> 2] - $9_1));
         $8_1 = HEAPF32[$2_1 >> 2];
         $7_1 = Math_fround($13_1 * Math_fround(HEAPF32[$42 >> 2] - $8_1));
         if ($10 > $7_1) {
          break label$19
         }
         $8_1 = Math_fround($13_1 * Math_fround(HEAPF32[$41_1 >> 2] - $8_1));
         $9_1 = Math_fround($11 * Math_fround(HEAPF32[$40_1 >> 2] - $9_1));
         if ($8_1 > $9_1) {
          break label$19
         }
         $18_1 = HEAPF32[$2_1 + 8 >> 2];
         $17_1 = Math_fround($12_1 * Math_fround(HEAPF32[$37_1 >> 2] - $18_1));
         $7_1 = $9_1 < $7_1 ? $9_1 : $7_1;
         if ($17_1 > $7_1) {
          break label$19
         }
         $10 = $10 > $8_1 ? $10 : $8_1;
         $8_1 = Math_fround($12_1 * Math_fround(HEAPF32[$39_1 >> 2] - $18_1));
         if ($10 > $8_1) {
          break label$19
         }
         $14 = ($17_1 > $10 ? $17_1 : $10) < $20 & ($8_1 < $7_1 ? $8_1 : $7_1) > Math_fround(0.0);
         if (!$14 | ($21 | 0) < 0) {
          break label$18
         }
         $14 = HEAP32[$3_1 + 12 >> 2];
         FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $14 >> 21, $14 & 2097151);
         break label$17;
        }
        $14 = 0;
       }
       if (($21 | 0) > -1) {
        break label$17
       }
       if (!$14) {
        break label$16
       }
      }
      $27_1 = $27_1 + 1 | 0;
      $3_1 = $3_1 + 16 | 0;
      break label$15;
     }
     $14 = HEAP32[$3_1 + 12 >> 2];
     $27_1 = $27_1 - $14 | 0;
     $3_1 = $3_1 - ($14 << 4) | 0;
    }
    $19_1 = $19_1 + 1 | 0;
    if (($27_1 | 0) < ($6_1 | 0)) {
     continue
    }
    break;
   };
  }
  if (HEAP32[6030] < ($19_1 | 0)) {
   HEAP32[6030] = $19_1
  }
  global$0 = $15_1 + 32 | 0;
 }
 
 function $373($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = $4_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 16 >> 2] = 0;
  HEAP32[$4_1 + 20 >> 2] = 0;
  $5_1 = $4_1 + 8 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  label$1 : {
   if (HEAPU8[$0 + 60 | 0]) {
    $372($0, $1_1, $2_1, $3_1, $4_1 + 16 | 0, $4_1, HEAP32[$0 + 56 >> 2]);
    break label$1;
   }
   $371($0, $1_1, $2_1, $3_1, $4_1 + 16 | 0, $4_1);
  }
  global$0 = $4_1 + 32 | 0;
 }
 
 function $374($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  if (HEAPU8[$0 + 60 | 0]) {
   $372($0, $1_1, $2_1, $3_1, $4_1, $5_1, HEAP32[$0 + 56 >> 2]);
   return;
  }
  $371($0, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $375($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 8004;
  HEAP32[$4_1 + 4 >> 2] = HEAP32[$0 + 52 >> 2];
  $373(HEAP32[$0 + 56 >> 2], $4_1, $2_1, $3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $376($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 8 >> 2] = $1_1;
  HEAP32[$6_1 >> 2] = 8172;
  HEAP32[$6_1 + 4 >> 2] = HEAP32[$0 + 52 >> 2];
  $374(HEAP32[$0 + 56 >> 2], $6_1, $2_1, $3_1, $4_1, $5_1);
  global$0 = $6_1 + 16 | 0;
 }
 
 function $378($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $3_1 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $4_1 + 28 | 0, $4_1 + 24 | 0, $4_1 + 20 | 0, $4_1 + 16 | 0, $4_1 + 12 | 0, $4_1 + 8 | 0, $4_1 + 4 | 0, $4_1, $1_1);
  $5_1 = HEAP32[$0 + 4 >> 2];
  $10 = $5_1 + 12 | 0;
  $11 = HEAP32[$4_1 + 12 >> 2] + Math_imul(HEAP32[$4_1 + 8 >> 2], $2_1) | 0;
  $12_1 = HEAP32[$4_1 + 16 >> 2];
  $13_1 = HEAP32[$4_1 + 28 >> 2];
  $14 = HEAP32[$4_1 + 20 >> 2];
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if (HEAP32[$4_1 >> 2] != 3) {
          $3_1 = Math_imul(HEAP32[$11 + 8 >> 2], $12_1) + $13_1 | 0;
          if ($14) {
           break label$7
          }
          $8_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$5_1 + 8 >> 2]);
          $6_1 = Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$5_1 + 4 >> 2]);
          $7_1 = HEAPF32[$5_1 + 12 >> 2];
          $3_1 = $3_1 + 8 | 0;
          break label$6;
         }
         $3_1 = Math_imul(HEAPU16[$11 + 4 >> 1], $12_1) + $13_1 | 0;
         label$9 : {
          if ($14) {
           $8_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] * Math_fround(HEAPF64[$3_1 + 8 >> 3]));
           $6_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] * Math_fround(HEAPF64[$3_1 >> 3]));
           $7_1 = Math_fround(HEAPF64[$3_1 + 16 >> 3]);
           $3_1 = $10;
           break label$9;
          }
          $8_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$5_1 + 8 >> 2]);
          $6_1 = Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$5_1 + 4 >> 2]);
          $7_1 = HEAPF32[$5_1 + 12 >> 2];
          $3_1 = $3_1 + 8 | 0;
         }
         $9_1 = HEAPF32[$3_1 >> 2];
         HEAP32[$4_1 + 76 >> 2] = 0;
         HEAPF32[$4_1 + 68 >> 2] = $8_1;
         HEAPF32[$4_1 + 72 >> 2] = $9_1 * $7_1;
         HEAPF32[$4_1 + 64 >> 2] = $6_1;
         $3_1 = Math_imul(HEAPU16[$11 + 2 >> 1], $12_1) + $13_1 | 0;
         if (!$14) {
          break label$5
         }
         $8_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] * Math_fround(HEAPF64[$3_1 + 8 >> 3]));
         $6_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] * Math_fround(HEAPF64[$3_1 >> 3]));
         $7_1 = Math_fround(HEAPF64[$3_1 + 16 >> 3]);
         $3_1 = $10;
         break label$4;
        }
        $8_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] * Math_fround(HEAPF64[$3_1 + 8 >> 3]));
        $6_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] * Math_fround(HEAPF64[$3_1 >> 3]));
        $7_1 = Math_fround(HEAPF64[$3_1 + 16 >> 3]);
        $3_1 = $10;
       }
       $9_1 = HEAPF32[$3_1 >> 2];
       HEAP32[$4_1 + 76 >> 2] = 0;
       HEAPF32[$4_1 + 68 >> 2] = $8_1;
       HEAPF32[$4_1 + 72 >> 2] = $9_1 * $7_1;
       HEAPF32[$4_1 + 64 >> 2] = $6_1;
       $3_1 = Math_imul(HEAP32[$11 + 4 >> 2], $12_1) + $13_1 | 0;
       if (!$14) {
        break label$3
       }
       $8_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] * Math_fround(HEAPF64[$3_1 + 8 >> 3]));
       $6_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] * Math_fround(HEAPF64[$3_1 >> 3]));
       $7_1 = Math_fround(HEAPF64[$3_1 + 16 >> 3]);
       $3_1 = $10;
       break label$2;
      }
      $8_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$5_1 + 8 >> 2]);
      $6_1 = Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$5_1 + 4 >> 2]);
      $7_1 = HEAPF32[$5_1 + 12 >> 2];
      $3_1 = $3_1 + 8 | 0;
     }
     $9_1 = HEAPF32[$3_1 >> 2];
     HEAP32[$4_1 + 60 >> 2] = 0;
     HEAPF32[$4_1 + 52 >> 2] = $8_1;
     HEAPF32[$4_1 + 56 >> 2] = $9_1 * $7_1;
     HEAPF32[$4_1 + 48 >> 2] = $6_1;
     $3_1 = Math_imul(HEAPU16[$11 >> 1], $12_1) + $13_1 | 0;
     label$11 : {
      if ($14) {
       $8_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] * Math_fround(HEAPF64[$3_1 + 8 >> 3]));
       $7_1 = Math_fround(HEAPF64[$3_1 + 16 >> 3]);
       $6_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] * Math_fround(HEAPF64[$3_1 >> 3]));
       break label$11;
      }
      $10 = $3_1 + 8 | 0;
      $8_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$5_1 + 8 >> 2]);
      $7_1 = HEAPF32[$5_1 + 12 >> 2];
      $6_1 = Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$5_1 + 4 >> 2]);
     }
     $9_1 = HEAPF32[$10 >> 2];
     HEAPF32[$4_1 + 32 >> 2] = $6_1;
     $6_1 = Math_fround($9_1 * $7_1);
     break label$1;
    }
    $8_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$5_1 + 8 >> 2]);
    $6_1 = Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$5_1 + 4 >> 2]);
    $7_1 = HEAPF32[$5_1 + 12 >> 2];
    $3_1 = $3_1 + 8 | 0;
   }
   $9_1 = HEAPF32[$3_1 >> 2];
   HEAP32[$4_1 + 60 >> 2] = 0;
   HEAPF32[$4_1 + 52 >> 2] = $8_1;
   HEAPF32[$4_1 + 56 >> 2] = $9_1 * $7_1;
   HEAPF32[$4_1 + 48 >> 2] = $6_1;
   $3_1 = Math_imul(HEAP32[$11 >> 2], $12_1) + $13_1 | 0;
   label$13 : {
    if ($14) {
     $8_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] * Math_fround(HEAPF64[$3_1 + 8 >> 3]));
     $7_1 = Math_fround(HEAPF64[$3_1 + 16 >> 3]);
     $6_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] * Math_fround(HEAPF64[$3_1 >> 3]));
     break label$13;
    }
    $10 = $3_1 + 8 | 0;
    $8_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$5_1 + 8 >> 2]);
    $7_1 = HEAPF32[$5_1 + 12 >> 2];
    $6_1 = Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$5_1 + 4 >> 2]);
   }
   $9_1 = HEAPF32[$10 >> 2];
   HEAPF32[$4_1 + 32 >> 2] = $6_1;
   $6_1 = Math_fround($9_1 * $7_1);
  }
  HEAP32[$4_1 + 44 >> 2] = 0;
  HEAPF32[$4_1 + 40 >> 2] = $6_1;
  HEAPF32[$4_1 + 36 >> 2] = $8_1;
  $3_1 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $4_1 + 32 | 0, $1_1, $2_1);
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1_1);
  global$0 = $4_1 + 80 | 0;
 }
 
 function $382($0) {
  HEAP32[$0 + 4 >> 2] = 35;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 8320;
 }
 
 function $385($0, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0;
  $382($0);
  HEAP32[$0 >> 2] = 8428;
  $3_1 = HEAPF32[$1_1 + 8 >> 2];
  $4_1 = HEAPF32[$1_1 >> 2];
  $5_1 = HEAPF32[$1_1 + 4 >> 2];
  $1_1 = HEAP32[$1_1 + 12 >> 2];
  $6_1 = $0 + 80 | 0;
  HEAP32[$6_1 >> 2] = 1065353216;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 1065353216;
  HEAP32[$0 + 76 >> 2] = 1065353216;
  HEAPF32[$0 + 68 >> 2] = $2_1;
  HEAP32[$0 - -64 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = 28;
  $2_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($3_1 * $3_1)))));
  HEAPF32[$0 + 60 >> 2] = $3_1 * $2_1;
  HEAPF32[$0 + 56 >> 2] = $5_1 * $2_1;
  HEAPF32[$0 + 52 >> 2] = $4_1 * $2_1;
 }
 
 function $388($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP32[$2_1 + 8 >> 2] = -581039253;
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAP32[$2_1 >> 2] = -581039253;
  HEAP32[$2_1 + 4 >> 2] = -581039253;
  HEAP32[$3_1 + 8 >> 2] = 1566444395;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 1566444395;
  HEAP32[$3_1 + 4 >> 2] = 1566444395;
 }
 
 function $389($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22_1 = 0, $23_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  $10 = HEAPF32[$3_1 >> 2];
  $8_1 = HEAPF32[$2_1 >> 2];
  $7_1 = Math_fround(Math_fround($10 - $8_1) * Math_fround(.5));
  $9_1 = Math_fround($7_1 * $7_1);
  $5_1 = HEAPF32[$3_1 + 4 >> 2];
  $4_1 = HEAPF32[$2_1 + 4 >> 2];
  $7_1 = Math_fround(Math_fround($5_1 - $4_1) * Math_fround(.5));
  $13_1 = Math_fround($9_1 + Math_fround($7_1 * $7_1));
  $9_1 = HEAPF32[$3_1 + 8 >> 2];
  $11 = HEAPF32[$2_1 + 8 >> 2];
  $7_1 = Math_fround(Math_fround($9_1 - $11) * Math_fround(.5));
  $7_1 = Math_fround(Math_sqrt(Math_fround($13_1 + Math_fround($7_1 * $7_1))));
  $9_1 = Math_fround(Math_fround($9_1 + $11) * Math_fround(.5));
  $11 = Math_fround(Math_fround($5_1 + $4_1) * Math_fround(.5));
  $14 = Math_fround(Math_fround($10 + $8_1) * Math_fround(.5));
  $10 = HEAPF32[$0 + 60 >> 2];
  label$1 : {
   if (!!(Math_fround(Math_abs($10)) > Math_fround(.7071067690849304))) {
    $8_1 = HEAPF32[$0 + 56 >> 2];
    $5_1 = Math_fround(Math_fround($10 * $10) + Math_fround($8_1 * $8_1));
    $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($5_1)));
    $15_1 = Math_fround($5_1 * $4_1);
    $12_1 = Math_fround($8_1 * $4_1);
    $5_1 = HEAPF32[$0 + 52 >> 2];
    $16_1 = Math_fround($12_1 * Math_fround(-$5_1));
    $4_1 = Math_fround($4_1 * Math_fround(-$10));
    $17_1 = Math_fround($5_1 * $4_1);
    break label$1;
   }
   $5_1 = HEAPF32[$0 + 52 >> 2];
   $8_1 = HEAPF32[$0 + 56 >> 2];
   $15_1 = Math_fround(Math_fround($5_1 * $5_1) + Math_fround($8_1 * $8_1));
   $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($15_1)));
   $17_1 = Math_fround($15_1 * $4_1);
   $19_1 = Math_fround($4_1 * Math_fround(-$8_1));
   $16_1 = Math_fround($10 * $19_1);
   $4_1 = Math_fround($5_1 * $4_1);
   $15_1 = Math_fround($4_1 * Math_fround(-$10));
  }
  $18_1 = HEAPF32[$0 + 68 >> 2];
  $0 = $6_1 + 44 | 0;
  HEAP32[$0 >> 2] = 0;
  $2_1 = $6_1 + 28 | 0;
  HEAP32[$2_1 >> 2] = 0;
  $3_1 = $6_1 + 40 | 0;
  $13_1 = $9_1;
  $9_1 = Math_fround(Math_fround(Math_fround($10 * $9_1) + Math_fround(Math_fround($14 * $5_1) + Math_fround($11 * $8_1))) - $18_1);
  $18_1 = Math_fround($13_1 - Math_fround($10 * $9_1));
  $12_1 = Math_fround($7_1 * $12_1);
  $13_1 = Math_fround($18_1 - $12_1);
  $10 = Math_fround($7_1 * $17_1);
  $17_1 = Math_fround($13_1 - $10);
  HEAPF32[$3_1 >> 2] = $17_1;
  $20 = $6_1 + 36 | 0;
  $11 = Math_fround($11 - Math_fround($8_1 * $9_1));
  $4_1 = Math_fround($7_1 * $4_1);
  $21 = Math_fround($11 - $4_1);
  $8_1 = Math_fround($7_1 * $16_1);
  $16_1 = Math_fround($21 - $8_1);
  HEAPF32[$20 >> 2] = $16_1;
  $22_1 = $6_1 + 24 | 0;
  $12_1 = Math_fround($12_1 + $18_1);
  HEAPF32[$22_1 >> 2] = $12_1 - $10;
  $23_1 = $6_1 + 20 | 0;
  $4_1 = Math_fround($4_1 + $11);
  HEAPF32[$23_1 >> 2] = $4_1 - $8_1;
  HEAP32[$6_1 + 12 >> 2] = 0;
  $5_1 = Math_fround($14 - Math_fround($5_1 * $9_1));
  $9_1 = Math_fround($7_1 * $19_1);
  $11 = Math_fround($5_1 - $9_1);
  $7_1 = Math_fround($7_1 * $15_1);
  $14 = Math_fround($11 - $7_1);
  HEAPF32[$6_1 + 32 >> 2] = $14;
  $5_1 = Math_fround($9_1 + $5_1);
  HEAPF32[$6_1 + 16 >> 2] = $5_1 - $7_1;
  $9_1 = Math_fround($10 + $12_1);
  HEAPF32[$6_1 + 8 >> 2] = $9_1;
  $4_1 = Math_fround($8_1 + $4_1);
  HEAPF32[$6_1 + 4 >> 2] = $4_1;
  $5_1 = Math_fround($7_1 + $5_1);
  HEAPF32[$6_1 >> 2] = $5_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $6_1, 0, 0);
  HEAP32[$0 >> 2] = 0;
  HEAPF32[$3_1 >> 2] = $9_1;
  HEAPF32[$20 >> 2] = $4_1;
  HEAP32[$2_1 >> 2] = 0;
  HEAPF32[$22_1 >> 2] = $10 + $13_1;
  HEAPF32[$23_1 >> 2] = $8_1 + $21;
  HEAPF32[$6_1 + 32 >> 2] = $5_1;
  HEAPF32[$6_1 + 16 >> 2] = $7_1 + $11;
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAPF32[$6_1 + 8 >> 2] = $17_1;
  HEAPF32[$6_1 + 4 >> 2] = $16_1;
  HEAPF32[$6_1 >> 2] = $14;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $6_1, 0, 1);
  global$0 = $6_1 + 48 | 0;
 }
 
 function $391($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 72 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 76 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 80 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $392($0) {
  $0 = $0 | 0;
  return $0 + 72 | 0;
 }
 
 function $393($0) {
  $0 = $0 | 0;
  return 8532;
 }
 
 function $394($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 16 >> 2] = $1_1;
 }
 
 function $395($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 16 >> 2]);
 }
 
 function $397($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $98($0, $1_1, $2_1);
  HEAP32[$1_1 + 12 >> 2] = HEAP32[$0 + 72 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$0 + 76 >> 2];
  HEAP32[$1_1 + 20 >> 2] = HEAP32[$0 + 80 >> 2];
  HEAP32[$1_1 + 24 >> 2] = HEAP32[$0 + 84 >> 2];
  HEAP32[$1_1 + 28 >> 2] = HEAP32[$0 + 52 >> 2];
  HEAP32[$1_1 + 32 >> 2] = HEAP32[$0 + 56 >> 2];
  HEAP32[$1_1 + 36 >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$1_1 + 40 >> 2] = HEAP32[$0 - -64 >> 2];
  $0 = HEAP32[$0 + 68 >> 2];
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP32[$1_1 + 44 >> 2] = $0;
  return 8544;
 }
 
 function $398($0, $1_1, $2_1) {
  var $3_1 = 0;
  $382($0);
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP8[$0 + 92 | 0] = 1;
  $3_1 = $0 + 80 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  $3_1 = $0 - -64 | 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 1065353216;
  HEAP32[$0 + 60 >> 2] = 1065353216;
  HEAP8[$0 + 52 | 0] = 1;
  HEAP32[$0 + 44 >> 2] = -8388609;
  $3_1 = $0 + 36 | 0;
  HEAP32[$3_1 >> 2] = -8388609;
  HEAP32[$3_1 + 4 >> 2] = -8388609;
  HEAP32[$0 + 28 >> 2] = 2139095039;
  HEAP32[$0 + 20 >> 2] = 2139095039;
  HEAP32[$0 + 24 >> 2] = 2139095039;
  HEAP32[$0 + 4 >> 2] = 25;
  HEAP32[$0 + 188 >> 2] = 0;
  $3_1 = $0 + 180 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0 + 168 | 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0 + 160 | 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAP32[$3_1 + 4 >> 2] = 1065353216;
  HEAP32[$0 + 152 >> 2] = 1008981770;
  HEAP32[$0 + 148 >> 2] = 9184;
  HEAP32[$0 >> 2] = 8576;
  $3_1 = $0 + 204 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0 + 196 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$0 + 156 >> 2] = $1_1;
  HEAP32[$0 + 176 >> 2] = $2_1;
  HEAP32[$0 + 144 >> 2] = $0 + 148;
 }
 
 function $399($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 9028;
  $1_1 = HEAP32[$0 + 88 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 92 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 88 >> 2] = 0;
  }
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP8[$0 + 92 | 0] = 1;
  return $0 | 0;
 }
 
 function $400($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 9028;
  $1_1 = HEAP32[$0 + 88 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 92 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 88 >> 2] = 0;
  }
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP8[$0 + 92 | 0] = 1;
  $80($0);
 }
 
 function $401($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $0 = HEAP32[$0 + 144 >> 2];
  $1_1 = HEAP32[$0 + 32 >> 2];
  if (($1_1 | 0) >= 1) {
   HEAP32[$0 + 32 >> 2] = $1_1 + 1;
   return;
  }
  $1_1 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, $0 + 36 | 0, $0 + 40 | 0, $0 + 44 | 0, $0 + 48 | 0, $0 + 52 | 0, $0 + 56 | 0, $0 + 60 | 0, $0 - -64 | 0, HEAP32[$0 + 28 >> 2]);
  HEAP32[$0 + 32 >> 2] = 1;
 }
 
 function $402($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  $0 = HEAP32[$0 + 144 >> 2];
  $1_1 = HEAP32[$0 + 32 >> 2];
  if ($1_1) {
   $2_1 = $0;
   if (($1_1 | 0) >= 2) {
    $0 = $1_1 + -1 | 0
   } else {
    $1_1 = HEAP32[$0 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($1_1, HEAP32[$0 + 28 >> 2]);
    HEAP32[$0 + 36 >> 2] = 0;
    $0 = 0;
   }
   HEAP32[$2_1 + 32 >> 2] = $0;
  }
 }
 
 function $403($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0);
  $3_1 = $2_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $6_1 = HEAP32[$0 + 188 >> 2];
  label$1 : {
   if (!$6_1) {
    break label$1
   }
   $1_1 = Math_fround($1_1 / Math_fround($6_1 | 0));
   $3_1 = HEAP32[$0 + 196 >> 2];
   $13_1 = HEAP32[$0 + 184 >> 2];
   if (HEAP32[$0 + 192 >> 2] != 1) {
    $12_1 = 0 - $3_1 | 0;
    $3_1 = Math_imul($3_1, $6_1 + -1 | 0) + $13_1 | 0;
    while (1) {
     $4_1 = HEAPF32[$3_1 + 8 >> 2];
     $7_1 = HEAPF32[$0 + 168 >> 2];
     $5_1 = Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$0 + 160 >> 2]);
     $5_1 = Math_fround($5_1 * $5_1);
     $8_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$0 + 164 >> 2]);
     $8_1 = Math_fround($8_1 * $8_1);
     $9_1 = Math_fround(Math_fround($1_1 * Math_fround($5_1 + $8_1)) + $9_1);
     HEAPF32[$2_1 + 8 >> 2] = $9_1;
     $4_1 = Math_fround($4_1 * $7_1);
     $4_1 = Math_fround($4_1 * $4_1);
     $10 = Math_fround(Math_fround($1_1 * Math_fround($5_1 + $4_1)) + $10);
     HEAPF32[$2_1 + 4 >> 2] = $10;
     $11 = Math_fround($11 + Math_fround($1_1 * Math_fround($8_1 + $4_1)));
     HEAPF32[$2_1 >> 2] = $11;
     $3_1 = $3_1 + $12_1 | 0;
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $12_1 = 0 - $3_1 | 0;
   $3_1 = Math_imul($3_1, $6_1 + -1 | 0) + $13_1 | 0;
   while (1) {
    $4_1 = HEAPF32[$0 + 168 >> 2];
    $7_1 = Math_fround(HEAPF64[$3_1 >> 3] * +HEAPF32[$0 + 160 >> 2]);
    $7_1 = Math_fround($7_1 * $7_1);
    $5_1 = Math_fround(HEAPF64[$3_1 + 8 >> 3] * +HEAPF32[$0 + 164 >> 2]);
    $5_1 = Math_fround($5_1 * $5_1);
    $9_1 = Math_fround(Math_fround($1_1 * Math_fround($7_1 + $5_1)) + $9_1);
    HEAPF32[$2_1 + 8 >> 2] = $9_1;
    $4_1 = Math_fround(HEAPF64[$3_1 + 16 >> 3] * +$4_1);
    $4_1 = Math_fround($4_1 * $4_1);
    $10 = Math_fround(Math_fround($1_1 * Math_fround($7_1 + $4_1)) + $10);
    HEAPF32[$2_1 + 4 >> 2] = $10;
    $11 = Math_fround($11 + Math_fround($1_1 * Math_fround($5_1 + $4_1)));
    HEAPF32[$2_1 >> 2] = $11;
    $3_1 = $3_1 + $12_1 | 0;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
 }
 
 function $404($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = HEAP32[$0 + 156 >> 2];
  if ($3_1) {
   $1_1 = Math_fround($1_1 / Math_fround($3_1 | 0));
   $5_1 = ($3_1 << 2) + -4 | 0;
   while (1) {
    $6_1 = HEAP32[HEAP32[$0 + 164 >> 2] + $5_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 32 >> 2]]($6_1, $1_1, $4_1);
    HEAPF32[$2_1 >> 2] = HEAPF32[$4_1 >> 2] + HEAPF32[$2_1 >> 2];
    HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$4_1 + 4 >> 2] + HEAPF32[$2_1 + 4 >> 2];
    HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$4_1 + 8 >> 2] + HEAPF32[$2_1 + 8 >> 2];
    $5_1 = $5_1 + -4 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   };
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $406($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, $11 = 0;
  $4_1 = global$0 - 112 | 0;
  global$0 = $4_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0);
  HEAP32[$4_1 + 100 >> 2] = 0;
  HEAP8[$4_1 + 104 | 0] = 1;
  HEAP32[$4_1 + 92 >> 2] = 0;
  HEAP32[$4_1 + 96 >> 2] = 0;
  HEAP32[$4_1 + 84 >> 2] = 0;
  $5_1 = Math_fround(HEAPF32[$3_1 >> 2] - HEAPF32[$2_1 >> 2]);
  $6_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$2_1 + 4 >> 2]);
  $7_1 = Math_fround(HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$2_1 + 8 >> 2]);
  $8_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1)))));
  HEAPF32[$4_1 + 80 >> 2] = $7_1 * $8_1;
  HEAPF32[$4_1 + 76 >> 2] = $6_1 * $8_1;
  HEAPF32[$4_1 + 72 >> 2] = $5_1 * $8_1;
  $89($0 + 72 | 0, $4_1 + 72 | 0, $2_1, $4_1 + 88 | 0);
  $3_1 = HEAP32[$4_1 + 92 >> 2];
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $10 = HEAP32[$0 + 176 >> 2];
   HEAP32[$4_1 + 64 >> 2] = 1008981770;
   $2_1 = ($3_1 << 2) + -4 | 0;
   while (1) {
    $11 = HEAP32[HEAP32[$4_1 + 100 >> 2] + $2_1 >> 2];
    $9_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 20 >> 2]]($9_1, $11, $4_1);
    FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $4_1, $10, HEAP32[HEAP32[$4_1 + 100 >> 2] + $2_1 >> 2]);
    $2_1 = $2_1 + -4 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
  $0 = HEAP32[$4_1 + 100 >> 2];
  if ($0) {
   if (HEAPU8[$4_1 + 104 | 0]) {
    $80($0)
   }
   HEAP32[$4_1 + 100 >> 2] = 0;
  }
  global$0 = $4_1 + 112 | 0;
 }
 
 function $407($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0);
  $6_1 = $2_1 + 8 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $4_1 + 104 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $7_1;
  $6_1 = $3_1 + 8 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $4_1 + 120 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $7_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 96 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 100 >> 2] = $5_1;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$4_1 + 112 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 116 >> 2] = $2_1;
  HEAP32[$4_1 + 84 >> 2] = 0;
  HEAP8[$4_1 + 88 | 0] = 1;
  HEAP32[$4_1 + 76 >> 2] = 0;
  HEAP32[$4_1 + 80 >> 2] = 0;
  $88($0 + 72 | 0, $4_1 + 96 | 0, $4_1 + 72 | 0);
  $2_1 = HEAP32[$4_1 + 76 >> 2];
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $5_1 = HEAP32[$0 + 176 >> 2];
   HEAP32[$4_1 + 64 >> 2] = 1008981770;
   $3_1 = ($2_1 << 2) + -4 | 0;
   while (1) {
    $6_1 = HEAP32[HEAP32[$4_1 + 84 >> 2] + $3_1 >> 2];
    $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 20 >> 2]]($7_1, $6_1, $4_1);
    FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $4_1, $5_1, HEAP32[HEAP32[$4_1 + 84 >> 2] + $3_1 >> 2]);
    $3_1 = $3_1 + -4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
  $0 = HEAP32[$4_1 + 84 >> 2];
  if ($0) {
   if (HEAPU8[$4_1 + 88 | 0]) {
    $80($0)
   }
   HEAP32[$4_1 + 84 >> 2] = 0;
  }
  global$0 = $4_1 + 128 | 0;
 }
 
 function $408($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = HEAP32[$0 + 156 >> 2];
  if ($4_1) {
   $5_1 = ($4_1 << 2) + -4 | 0;
   while (1) {
    $6_1 = HEAP32[HEAP32[$0 + 164 >> 2] + $5_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 64 >> 2]]($6_1, $1_1, $2_1, $3_1);
    $5_1 = $5_1 + -4 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue
    }
    break;
   };
  }
 }
 
 function $409($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = HEAP32[$0 + 156 >> 2];
  if ($4_1) {
   $5_1 = ($4_1 << 2) + -4 | 0;
   while (1) {
    $6_1 = HEAP32[HEAP32[$0 + 164 >> 2] + $5_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 144 >> 2]]($6_1, $1_1, $2_1, $3_1);
    $5_1 = $5_1 + -4 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue
    }
    break;
   };
  }
 }
 
 function $410($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $98($0, $1_1, $2_1);
  $3_1 = HEAP32[$0 + 148 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 56 >> 2]]($3_1, $1_1 + 12 | 0, $2_1) | 0;
  HEAP32[$1_1 + 56 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1_1 + 40 >> 2] = HEAP32[$0 + 56 >> 2];
  HEAP32[$1_1 + 44 >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$1_1 + 48 >> 2] = HEAP32[$0 - -64 >> 2];
  HEAP32[$1_1 + 52 >> 2] = HEAP32[$0 + 68 >> 2];
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0) | 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
  return 8724;
 }
 
 function $411($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0);
  $20 = HEAPF32[$1_1 + 52 >> 2];
  $10 = HEAPF32[$1_1 + 24 >> 2];
  $14 = HEAPF32[$1_1 + 20 >> 2];
  $4_1 = HEAPF32[$1_1 + 56 >> 2];
  $11 = HEAPF32[$1_1 + 40 >> 2];
  $6_1 = HEAPF32[$0 + 44 >> 2];
  $7_1 = HEAPF32[$0 + 28 >> 2];
  $8_1 = HEAPF32[$0 + 36 >> 2];
  $12_1 = HEAPF32[$1_1 + 36 >> 2];
  $9_1 = HEAPF32[$0 + 40 >> 2];
  $5_1 = HEAPF32[$0 + 24 >> 2];
  $21 = HEAPF32[$1_1 + 48 >> 2];
  $15_1 = HEAPF32[$1_1 + 8 >> 2];
  $16_1 = HEAPF32[$1_1 >> 2];
  $17_1 = HEAPF32[$1_1 + 4 >> 2];
  $18_1 = HEAPF32[$1_1 + 16 >> 2];
  $19_1 = HEAPF32[$1_1 + 32 >> 2];
  $13_1 = HEAPF32[$0 + 20 >> 2];
  HEAP32[$2_1 + 12 >> 2] = 0;
  $22_1 = $4_1;
  $4_1 = Math_fround(Math_fround($13_1 + $8_1) * Math_fround(.5));
  $5_1 = Math_fround(Math_fround($5_1 + $9_1) * Math_fround(.5));
  $7_1 = Math_fround(Math_fround($7_1 + $6_1) * Math_fround(.5));
  $13_1 = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($19_1 * $4_1) + Math_fround($12_1 * $5_1)) + Math_fround($11 * $7_1)));
  $8_1 = Math_fround($8_1 - $4_1);
  $9_1 = Math_fround($9_1 - $5_1);
  $6_1 = Math_fround($6_1 - $7_1);
  $11 = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(Math_abs($19_1))) + Math_fround($9_1 * Math_fround(Math_abs($12_1)))) + Math_fround($6_1 * Math_fround(Math_abs($11))));
  HEAPF32[$2_1 + 8 >> 2] = $13_1 - $11;
  $12_1 = Math_fround($20 + Math_fround(Math_fround(Math_fround($4_1 * $18_1) + Math_fround($5_1 * $14)) + Math_fround($7_1 * $10)));
  $10 = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(Math_abs($18_1))) + Math_fround($9_1 * Math_fround(Math_abs($14)))) + Math_fround($6_1 * Math_fround(Math_abs($10))));
  HEAPF32[$2_1 + 4 >> 2] = $12_1 - $10;
  $4_1 = Math_fround($21 + Math_fround(Math_fround(Math_fround($4_1 * $16_1) + Math_fround($5_1 * $17_1)) + Math_fround($7_1 * $15_1)));
  $5_1 = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(Math_abs($16_1))) + Math_fround($9_1 * Math_fround(Math_abs($17_1)))) + Math_fround($6_1 * Math_fround(Math_abs($15_1))));
  HEAPF32[$2_1 >> 2] = $4_1 - $5_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 8 >> 2] = $11 + $13_1;
  HEAPF32[$3_1 + 4 >> 2] = $10 + $12_1;
  HEAPF32[$3_1 >> 2] = $5_1 + $4_1;
 }
 
 function $412($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 56 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 60 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $0 - -64 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0);
 }
 
 function $413($0) {
  $0 = $0 | 0;
  return $0 + 56 | 0;
 }
 
 function $414($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0;
  HEAPF32[$0 + 16 >> 2] = $1_1;
  $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 88 >> 2]]($0) | 0;
  if ($2_1) {
   $2_1 = $2_1 + -1 | 0;
   while (1) {
    $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0, $2_1) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 44 >> 2]]($3_1, $1_1);
    $2_1 = $2_1 + -1 | 0;
    if (($2_1 | 0) != -1) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 52 | 0] = 1;
 }
 
 function $416($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0);
  $1_1 = $0 + 72 | 0;
  label$1 : {
   if (!HEAP32[$0 + 72 >> 2]) {
    $87($1_1);
    break label$1;
   }
   $86($1_1);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
  $1_1 = HEAP32[$0 + 88 >> 2];
  $8_1 = HEAPU16[$1_1 + 8 >> 1];
  $9_1 = HEAPU16[$1_1 + 10 >> 1];
  $10 = HEAPU16[$1_1 >> 1];
  $11 = HEAPU16[$1_1 + 2 >> 1];
  $12_1 = HEAPU16[$1_1 + 4 >> 1];
  $1_1 = HEAPU16[$1_1 + 6 >> 1];
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  $2_1 = HEAPF32[$0 + 96 >> 2];
  $3_1 = HEAPF32[$0 + 128 >> 2];
  HEAPF32[$0 + 36 >> 2] = $2_1 + Math_fround(Math_fround($1_1 >>> 0) / $3_1);
  $4_1 = HEAPF32[$0 + 136 >> 2];
  $5_1 = HEAPF32[$0 + 104 >> 2];
  HEAPF32[$0 + 28 >> 2] = Math_fround(Math_fround($12_1 >>> 0) / $4_1) + $5_1;
  $6_1 = HEAPF32[$0 + 132 >> 2];
  $7_1 = HEAPF32[$0 + 100 >> 2];
  HEAPF32[$0 + 24 >> 2] = Math_fround(Math_fround($11 >>> 0) / $6_1) + $7_1;
  HEAPF32[$0 + 20 >> 2] = $2_1 + Math_fround(Math_fround($10 >>> 0) / $3_1);
  HEAPF32[$0 + 44 >> 2] = $5_1 + Math_fround(Math_fround($9_1 >>> 0) / $4_1);
  HEAPF32[$0 + 40 >> 2] = $7_1 + Math_fround(Math_fround($8_1 >>> 0) / $6_1);
 }
 
 function $417($0) {
  $0 = $0 | 0;
  HEAP8[$0 + 52 | 0] = 1;
 }
 
 function $418($0) {
  $0 = $0 | 0;
  return 25;
 }
 
 function $419($0) {
  $0 = $0 | 0;
 }
 
 function $423($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $0 + 160 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $1_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $0 + 168 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0);
 }
 
 function $424($0) {
  $0 = $0 | 0;
  return $0 + 160 | 0;
 }
 
 function $425($0) {
  $0 = $0 | 0;
  return 9308;
 }
 
 function $426($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 152 >> 2] = $1_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0);
 }
 
 function $427($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 152 >> 2]);
 }
 
 function $429($0) {
  $0 = $0 | 0;
  return $0 + 148 | 0;
 }
 
 function $430($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 208 >> 2];
 }
 
 function $434($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $435($0 + 148 | 0, $1_1, $2_1);
 }
 
 function $435($0, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[$0 + 52 >> 2] + Math_imul(HEAP32[$0 + 56 >> 2], $1_1) | 0;
  $6_1 = HEAP32[$0 + 36 >> 2];
  label$1 : {
   if (HEAP32[$0 + 64 >> 2] == 3) {
    $4_1 = HEAPU16[$1_1 + 4 >> 1];
    $5_1 = HEAPU16[$1_1 + 2 >> 1];
    $1_1 = HEAPU16[$1_1 >> 1];
    break label$1;
   }
   $4_1 = HEAP32[$1_1 + 8 >> 2];
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   $1_1 = HEAP32[$1_1 >> 2];
  }
  $1_1 = $6_1 + Math_imul($1_1, HEAP32[$0 + 48 >> 2]) | 0;
  $6_1 = $2_1 + 68 | 0;
  label$3 : {
   if (HEAP32[$0 + 44 >> 2] == 1) {
    HEAPF32[$2_1 + 60 >> 2] = HEAPF64[$1_1 >> 3] * +HEAPF32[$0 + 12 >> 2];
    HEAPF32[$2_1 - -64 >> 2] = HEAPF64[$1_1 + 8 >> 3] * +HEAPF32[$0 + 16 >> 2];
    $3_1 = Math_fround(HEAPF64[$1_1 + 16 >> 3] * +HEAPF32[$0 + 20 >> 2]);
    break label$3;
   }
   HEAPF32[$2_1 + 60 >> 2] = HEAPF32[$1_1 >> 2] * HEAPF32[$0 + 12 >> 2];
   HEAPF32[$2_1 - -64 >> 2] = HEAPF32[$1_1 + 4 >> 2] * HEAPF32[$0 + 16 >> 2];
   $3_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] * HEAPF32[$0 + 20 >> 2]);
  }
  HEAPF32[$6_1 >> 2] = $3_1;
  $1_1 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$0 + 48 >> 2], $5_1) | 0;
  $5_1 = $2_1 + 84 | 0;
  label$5 : {
   if (HEAP32[$0 + 44 >> 2] == 1) {
    HEAPF32[$2_1 + 76 >> 2] = HEAPF64[$1_1 >> 3] * +HEAPF32[$0 + 12 >> 2];
    HEAPF32[$2_1 + 80 >> 2] = HEAPF64[$1_1 + 8 >> 3] * +HEAPF32[$0 + 16 >> 2];
    $3_1 = Math_fround(HEAPF64[$1_1 + 16 >> 3] * +HEAPF32[$0 + 20 >> 2]);
    break label$5;
   }
   HEAPF32[$2_1 + 76 >> 2] = HEAPF32[$1_1 >> 2] * HEAPF32[$0 + 12 >> 2];
   HEAPF32[$2_1 + 80 >> 2] = HEAPF32[$1_1 + 4 >> 2] * HEAPF32[$0 + 16 >> 2];
   $3_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] * HEAPF32[$0 + 20 >> 2]);
  }
  HEAPF32[$5_1 >> 2] = $3_1;
  $1_1 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$0 + 48 >> 2], $4_1) | 0;
  $4_1 = $2_1 + 100 | 0;
  label$7 : {
   if (HEAP32[$0 + 44 >> 2] == 1) {
    HEAPF32[$2_1 + 92 >> 2] = HEAPF64[$1_1 >> 3] * +HEAPF32[$0 + 12 >> 2];
    HEAPF32[$2_1 + 96 >> 2] = HEAPF64[$1_1 + 8 >> 3] * +HEAPF32[$0 + 16 >> 2];
    $3_1 = Math_fround(HEAPF64[$1_1 + 16 >> 3] * +HEAPF32[$0 + 20 >> 2]);
    break label$7;
   }
   HEAPF32[$2_1 + 92 >> 2] = HEAPF32[$1_1 >> 2] * HEAPF32[$0 + 12 >> 2];
   HEAPF32[$2_1 + 96 >> 2] = HEAPF32[$1_1 + 4 >> 2] * HEAPF32[$0 + 16 >> 2];
   $3_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] * HEAPF32[$0 + 20 >> 2]);
  }
  HEAPF32[$4_1 >> 2] = $3_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 44 >> 2]]($2_1, HEAPF32[$0 + 4 >> 2]);
 }
 
 function $437($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0);
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0) | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1_1, $5_1);
  $23_1 = HEAPF32[$2_1 + 56 >> 2];
  $15_1 = HEAPF32[$2_1 + 36 >> 2];
  $16_1 = HEAPF32[$2_1 + 40 >> 2];
  $17_1 = HEAPF32[$2_1 + 32 >> 2];
  $13_1 = HEAPF32[$2_1 + 48 >> 2];
  $11 = HEAPF32[$2_1 + 8 >> 2];
  $18_1 = HEAPF32[$2_1 >> 2];
  $19_1 = HEAPF32[$2_1 + 4 >> 2];
  $8_1 = HEAPF32[$5_1 + 16 >> 2];
  $6_1 = Math_fround(Math_fround($8_1 + HEAPF32[$5_1 >> 2]) * Math_fround(.5));
  $1_1 = $5_1 + 20 | 0;
  $9_1 = HEAPF32[$1_1 >> 2];
  $7_1 = Math_fround(Math_fround($9_1 + HEAPF32[$5_1 + 4 >> 2]) * Math_fround(.5));
  $0 = $5_1 + 24 | 0;
  $10 = HEAPF32[$0 >> 2];
  $14 = Math_fround(Math_fround($10 + HEAPF32[$5_1 + 8 >> 2]) * Math_fround(.5));
  $8_1 = Math_fround($8_1 - $6_1);
  $12_1 = HEAPF32[$2_1 + 16 >> 2];
  $9_1 = Math_fround($9_1 - $7_1);
  $20 = HEAPF32[$2_1 + 20 >> 2];
  $10 = Math_fround($10 - $14);
  $21 = HEAPF32[$2_1 + 24 >> 2];
  $22_1 = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(Math_abs($12_1))) + Math_fround($9_1 * Math_fround(Math_abs($20)))) + Math_fround($10 * Math_fround(Math_abs($21))));
  $12_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $12_1) + Math_fround($7_1 * $20)) + Math_fround($14 * $21)) + HEAPF32[$2_1 + 52 >> 2]);
  HEAPF32[$1_1 >> 2] = $22_1 + $12_1;
  HEAPF32[$5_1 + 4 >> 2] = $12_1 - $22_1;
  $13_1 = Math_fround($13_1 + Math_fround(Math_fround(Math_fround($6_1 * $18_1) + Math_fround($7_1 * $19_1)) + Math_fround($14 * $11)));
  $11 = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(Math_abs($18_1))) + Math_fround($9_1 * Math_fround(Math_abs($19_1)))) + Math_fround($10 * Math_fround(Math_abs($11))));
  HEAPF32[$5_1 >> 2] = $13_1 - $11;
  $1_1 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = 0;
  $6_1 = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($6_1 * $17_1) + Math_fround($7_1 * $15_1)) + Math_fround($14 * $16_1)));
  $7_1 = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(Math_abs($17_1))) + Math_fround($9_1 * Math_fround(Math_abs($15_1)))) + Math_fround($10 * Math_fround(Math_abs($16_1))));
  HEAPF32[$5_1 + 8 >> 2] = $6_1 - $7_1;
  $2_1 = HEAP32[$5_1 + 12 >> 2];
  $1_1 = $3_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  HEAP32[$5_1 + 28 >> 2] = 0;
  HEAPF32[$0 >> 2] = $7_1 + $6_1;
  HEAPF32[$5_1 + 16 >> 2] = $11 + $13_1;
  $1_1 = HEAP32[$5_1 + 20 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $2_1 = HEAP32[$0 + 4 >> 2];
  $1_1 = $4_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  global$0 = $5_1 + 32 | 0;
 }
 
 function $442($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  HEAP32[$0 >> 2] = 8836;
  $1_1 = HEAP32[$0 + 164 >> 2];
  $2_1 = HEAP32[$0 + 156 >> 2];
  if ($2_1) {
   $3_1 = ($2_1 << 2) + -4 | 0;
   while (1) {
    $2_1 = $2_1 + -1 | 0;
    $4_1 = HEAP32[$1_1 + $3_1 >> 2];
    if ($4_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 4 >> 2]]($4_1);
     $1_1 = HEAP32[$0 + 164 >> 2];
    }
    $3_1 = $3_1 + -4 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  if ($1_1) {
   if (HEAPU8[$0 + 168 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 164 >> 2] = 0;
  }
  HEAP32[$0 + 164 >> 2] = 0;
  HEAP32[$0 + 156 >> 2] = 0;
  HEAP32[$0 + 160 >> 2] = 0;
  HEAP32[$0 >> 2] = 9028;
  HEAP8[$0 + 168 | 0] = 1;
  $1_1 = HEAP32[$0 + 88 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 92 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 88 >> 2] = 0;
  }
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP8[$0 + 92 | 0] = 1;
  return $0 | 0;
 }
 
 function $443($0) {
  $0 = $0 | 0;
  $80($442($0));
 }
 
 function $444($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 56 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 60 >> 2] = $2_1;
  $3_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 - -64 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$0 + 156 >> 2];
  if ($2_1) {
   $3_1 = ($2_1 << 2) + -4 | 0;
   while (1) {
    $4_1 = HEAP32[HEAP32[$0 + 164 >> 2] + $3_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 24 >> 2]]($4_1, $1_1);
    $3_1 = $3_1 + -4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 52 | 0] = 1;
 }
 
 function $445($0) {
  $0 = $0 | 0;
  return 9329;
 }
 
 function $446($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  HEAPF32[$0 + 16 >> 2] = $1_1;
  $2_1 = HEAP32[$0 + 156 >> 2];
  if ($2_1) {
   $3_1 = ($2_1 << 2) + -4 | 0;
   while (1) {
    $4_1 = HEAP32[HEAP32[$0 + 164 >> 2] + $3_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 44 >> 2]]($4_1, $1_1);
    $3_1 = $3_1 + -4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 52 | 0] = 1;
 }
 
 function $447($0) {
  $0 = $0 | 0;
  return 64;
 }
 
 function $448($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0;
  HEAP32[$0 + 20 >> 2] = 2139095039;
  HEAP32[$0 + 24 >> 2] = 2139095039;
  HEAP32[$0 + 44 >> 2] = -8388609;
  $8_1 = $0 + 36 | 0;
  HEAP32[$8_1 >> 2] = -8388609;
  HEAP32[$8_1 + 4 >> 2] = -8388609;
  HEAP32[$0 + 28 >> 2] = 2139095039;
  $3_1 = HEAP32[$0 + 156 >> 2];
  if ($3_1) {
   $15_1 = $0 + 20 | 0;
   $9_1 = ($3_1 << 2) + -4 | 0;
   $10 = HEAP32[$0 + 164 >> 2];
   $11 = Math_fround(3402823466385288598117041.0e14);
   $12_1 = Math_fround(-3402823466385288598117041.0e14);
   $13_1 = Math_fround(-3402823466385288598117041.0e14);
   $4_1 = Math_fround(-3402823466385288598117041.0e14);
   $14 = Math_fround(3402823466385288598117041.0e14);
   $5_1 = Math_fround(3402823466385288598117041.0e14);
   while (1) {
    $3_1 = $3_1 + -1 | 0;
    $1_1 = HEAP32[$9_1 + $10 >> 2];
    if (HEAPU8[$1_1 + 52 | 0]) {
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($1_1);
     HEAP8[$1_1 + 52 | 0] = 0;
     $12_1 = HEAPF32[$0 + 44 >> 2];
     $13_1 = HEAPF32[$0 + 40 >> 2];
     $14 = HEAPF32[$0 + 24 >> 2];
     $10 = HEAP32[$0 + 164 >> 2];
     $4_1 = HEAPF32[$0 + 36 >> 2];
     $5_1 = HEAPF32[$0 + 20 >> 2];
     $11 = HEAPF32[$0 + 28 >> 2];
    }
    $1_1 = HEAP32[$9_1 + $10 >> 2];
    $6_1 = HEAPF32[$1_1 + 20 >> 2];
    $5_1 = $5_1 > $6_1 ? $6_1 : $5_1;
    HEAPF32[$0 + 20 >> 2] = $5_1;
    $2_1 = $1_1 + 20 | 0;
    $7_1 = $14 > HEAPF32[$1_1 + 24 >> 2] ? $2_1 : $15_1;
    $14 = HEAPF32[$7_1 + 4 >> 2];
    HEAP32[$0 + 24 >> 2] = HEAP32[$7_1 + 4 >> 2];
    $2_1 = $11 > HEAPF32[$1_1 + 28 >> 2] ? $2_1 : $15_1;
    $11 = HEAPF32[$2_1 + 8 >> 2];
    HEAP32[$0 + 28 >> 2] = HEAP32[$2_1 + 8 >> 2];
    $2_1 = $1_1 + 36 | 0;
    $6_1 = HEAPF32[$2_1 >> 2];
    $4_1 = $4_1 < $6_1 ? $6_1 : $4_1;
    HEAPF32[$0 + 36 >> 2] = $4_1;
    $7_1 = $13_1 < HEAPF32[$1_1 + 40 >> 2] ? $2_1 : $8_1;
    $13_1 = HEAPF32[$7_1 + 4 >> 2];
    HEAP32[$0 + 40 >> 2] = HEAP32[$7_1 + 4 >> 2];
    $1_1 = $12_1 < HEAPF32[$1_1 + 44 >> 2] ? $2_1 : $8_1;
    $12_1 = HEAPF32[$1_1 + 8 >> 2];
    HEAP32[$0 + 44 >> 2] = HEAP32[$1_1 + 8 >> 2];
    $9_1 = $9_1 + -4 | 0;
    if ($3_1) {
     continue
    }
    break;
   };
  }
 }
 
 function $449($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[$0 + 156 >> 2];
  if ($1_1) {
   $2_1 = ($1_1 << 2) + -4 | 0;
   while (1) {
    $3_1 = HEAP32[HEAP32[$0 + 164 >> 2] + $2_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 72 >> 2]]($3_1);
    $2_1 = $2_1 + -4 | 0;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 52 | 0] = 1;
 }
 
 function $460($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
 }
 
 function $469($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 60 >> 2];
 }
 
 function $470($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0);
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 72 >> 2] = 1008981770;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1_1, $3_1 + 8 | 0);
  $5_1 = HEAPF32[$3_1 + 12 >> 2];
  $0 = $3_1 + 40 | 0;
  $1_1 = $3_1 + 24 | 0;
  $8_1 = HEAPF32[$3_1 + 28 >> 2];
  $9_1 = HEAPF32[$3_1 + 44 >> 2];
  $4_1 = $8_1 > $9_1;
  $6_1 = $5_1 > HEAPF32[($4_1 ? $0 : $1_1) + 4 >> 2];
  $7_1 = $6_1 ? 36 : 4;
  $13_1 = HEAPF32[($3_1 + 8 | 0) + ($4_1 ? $7_1 : $6_1 ? 20 : $7_1) >> 2];
  $11 = HEAPF32[$3_1 + 16 >> 2];
  $10 = HEAPF32[$3_1 + 32 >> 2];
  $12_1 = HEAPF32[$3_1 + 48 >> 2];
  $4_1 = $10 > $12_1;
  $6_1 = $11 > HEAPF32[($4_1 ? $0 : $1_1) + 8 >> 2];
  $7_1 = $6_1 ? 40 : 8;
  $14 = HEAPF32[($3_1 + 8 | 0) + ($4_1 ? $7_1 : $6_1 ? 24 : $7_1) >> 2];
  $4_1 = $8_1 < $9_1;
  $6_1 = $5_1 < HEAPF32[($4_1 ? $0 : $1_1) + 4 >> 2];
  $7_1 = $6_1 ? 36 : 4;
  $15_1 = HEAPF32[($3_1 + 8 | 0) + ($4_1 ? $7_1 : $6_1 ? 20 : $7_1) >> 2];
  $4_1 = $0;
  $0 = $10 < $12_1;
  $1_1 = $11 < HEAPF32[($0 ? $4_1 : $1_1) + 8 >> 2];
  $4_1 = $1_1 ? 40 : 8;
  $11 = HEAPF32[($3_1 + 8 | 0) + ($0 ? $4_1 : $1_1 ? 24 : $4_1) >> 2];
  $8_1 = HEAPF32[$3_1 + 24 >> 2];
  $9_1 = HEAPF32[$3_1 + 40 >> 2];
  $0 = $8_1 > $9_1;
  $10 = HEAPF32[$3_1 + 8 >> 2];
  $1_1 = $10 > ($0 ? $9_1 : $8_1);
  $4_1 = $1_1 << 5;
  $12_1 = HEAPF32[($3_1 + 8 | 0) + ($0 ? $4_1 : $1_1 ? 16 : $4_1) >> 2];
  $5_1 = HEAPF32[$3_1 + 72 >> 2];
  $0 = $8_1 < $9_1;
  $1_1 = $10 < ($0 ? $9_1 : $8_1);
  $4_1 = $1_1 << 5;
  HEAPF32[$2_1 + 16 >> 2] = $5_1 + HEAPF32[($3_1 + 8 | 0) + ($0 ? $4_1 : $1_1 ? 16 : $4_1) >> 2];
  HEAPF32[$2_1 >> 2] = $12_1 - $5_1;
  HEAPF32[$2_1 + 24 >> 2] = $5_1 + $11;
  HEAPF32[$2_1 + 20 >> 2] = $5_1 + $15_1;
  HEAPF32[$2_1 + 8 >> 2] = $14 - $5_1;
  HEAPF32[$2_1 + 4 >> 2] = $13_1 - $5_1;
  global$0 = $3_1 + 80 | 0;
 }
 
 function $471($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[$0 + 52 >> 2] + Math_imul(HEAP32[$0 + 56 >> 2], $1_1) | 0;
  $4_1 = HEAP32[$0 + 36 >> 2];
  label$1 : {
   if (HEAP32[$0 + 64 >> 2] == 3) {
    $5_1 = HEAPU16[$1_1 + 4 >> 1];
    $6_1 = HEAPU16[$1_1 + 2 >> 1];
    $1_1 = HEAPU16[$1_1 >> 1];
    break label$1;
   }
   $5_1 = HEAP32[$1_1 + 8 >> 2];
   $6_1 = HEAP32[$1_1 + 4 >> 2];
   $1_1 = HEAP32[$1_1 >> 2];
  }
  $1_1 = $4_1 + Math_imul($1_1, HEAP32[$0 + 48 >> 2]) | 0;
  $4_1 = $2_1;
  label$3 : {
   if (HEAP32[$0 + 44 >> 2] == 1) {
    HEAPF32[$2_1 >> 2] = HEAPF64[$1_1 >> 3] * +HEAPF32[$0 + 12 >> 2];
    HEAPF32[$2_1 + 4 >> 2] = HEAPF64[$1_1 + 8 >> 3] * +HEAPF32[$0 + 16 >> 2];
    $3_1 = Math_fround(HEAPF64[$1_1 + 16 >> 3] * +HEAPF32[$0 + 20 >> 2]);
    break label$3;
   }
   HEAPF32[$2_1 >> 2] = HEAPF32[$1_1 >> 2] * HEAPF32[$0 + 12 >> 2];
   HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$1_1 + 4 >> 2] * HEAPF32[$0 + 16 >> 2];
   $3_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] * HEAPF32[$0 + 20 >> 2]);
  }
  HEAPF32[$4_1 + 8 >> 2] = $3_1;
  $1_1 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$0 + 48 >> 2], $6_1) | 0;
  $4_1 = $2_1 + 24 | 0;
  label$5 : {
   if (HEAP32[$0 + 44 >> 2] == 1) {
    HEAPF32[$2_1 + 16 >> 2] = HEAPF64[$1_1 >> 3] * +HEAPF32[$0 + 12 >> 2];
    HEAPF32[$2_1 + 20 >> 2] = HEAPF64[$1_1 + 8 >> 3] * +HEAPF32[$0 + 16 >> 2];
    $3_1 = Math_fround(HEAPF64[$1_1 + 16 >> 3] * +HEAPF32[$0 + 20 >> 2]);
    break label$5;
   }
   HEAPF32[$2_1 + 16 >> 2] = HEAPF32[$1_1 >> 2] * HEAPF32[$0 + 12 >> 2];
   HEAPF32[$2_1 + 20 >> 2] = HEAPF32[$1_1 + 4 >> 2] * HEAPF32[$0 + 16 >> 2];
   $3_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] * HEAPF32[$0 + 20 >> 2]);
  }
  HEAPF32[$4_1 >> 2] = $3_1;
  $1_1 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$0 + 48 >> 2], $5_1) | 0;
  $4_1 = $2_1 + 40 | 0;
  label$7 : {
   if (HEAP32[$0 + 44 >> 2] == 1) {
    HEAPF32[$2_1 + 32 >> 2] = HEAPF64[$1_1 >> 3] * +HEAPF32[$0 + 12 >> 2];
    HEAPF32[$2_1 + 36 >> 2] = HEAPF64[$1_1 + 8 >> 3] * +HEAPF32[$0 + 16 >> 2];
    $3_1 = Math_fround(HEAPF64[$1_1 + 16 >> 3] * +HEAPF32[$0 + 20 >> 2]);
    break label$7;
   }
   HEAPF32[$2_1 + 32 >> 2] = HEAPF32[$1_1 >> 2] * HEAPF32[$0 + 12 >> 2];
   HEAPF32[$2_1 + 36 >> 2] = HEAPF32[$1_1 + 4 >> 2] * HEAPF32[$0 + 16 >> 2];
   $3_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] * HEAPF32[$0 + 20 >> 2]);
  }
  HEAPF32[$4_1 >> 2] = $3_1;
  HEAP32[$2_1 + 64 >> 2] = HEAP32[$0 + 4 >> 2];
 }
 
 function $473($0) {
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = -1;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 36 | 0] = 1;
  $0 = $0 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $474($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 >> 2];
  if ($1_1) {
   $475($0, $1_1)
  }
  $80(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = -1;
  $1_1 = HEAP32[$0 + 32 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 36 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 32 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP8[$0 + 36 | 0] = 1;
 }
 
 function $475($0, $1_1) {
  if (HEAP32[$1_1 + 40 >> 2]) {
   $475($0, HEAP32[$1_1 + 36 >> 2]);
   $475($0, HEAP32[$1_1 + 40 >> 2]);
  }
  if (($1_1 | 0) == HEAP32[$0 >> 2]) {
   HEAP32[$0 >> 2] = 0
  }
  $80(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $476($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 >> 2];
  if ($1_1) {
   $475($0, $1_1)
  }
  $80(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = -1;
  $1_1 = HEAP32[$0 + 32 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 36 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 32 >> 2] = 0;
  }
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 36 | 0] = 1;
 }
 
 function $477($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0;
  $9_1 = global$0 - 32 | 0;
  global$0 = $9_1;
  label$2 : {
   $1_1 = ($1_1 | 0) <= -1 ? HEAP32[$0 + 12 >> 2] : $1_1;
   if (($1_1 | 0) < 1) {
    break label$2
   }
   $2_1 = HEAP32[$0 >> 2];
   if (!$2_1) {
    break label$2
   }
   while (1) {
    $7_1 = $2_1 + 40 | 0;
    if (HEAP32[$7_1 >> 2]) {
     $14 = 0;
     while (1) {
      $4_1 = HEAP32[$2_1 + 32 >> 2];
      label$6 : {
       if ($4_1 >>> 0 <= $2_1 >>> 0) {
        $4_1 = $2_1;
        break label$6;
       }
       $5_1 = HEAP32[$4_1 + 40 >> 2];
       $6_1 = ($5_1 | 0) == ($2_1 | 0);
       $10 = (($2_1 | 0) != ($5_1 | 0)) << 2;
       $11 = HEAP32[($10 + $4_1 | 0) + 36 >> 2];
       $3_1 = HEAP32[$4_1 + 32 >> 2];
       $8_1 = $0;
       label$8 : {
        if (!$3_1) {
         break label$8
        }
        $8_1 = ($3_1 + ((HEAP32[$3_1 + 40 >> 2] == ($4_1 | 0)) << 2) | 0) + 36 | 0;
       }
       HEAP32[$8_1 >> 2] = $2_1;
       HEAP32[$11 + 32 >> 2] = $2_1;
       HEAP32[$4_1 + 32 >> 2] = $2_1;
       HEAP32[$2_1 + 32 >> 2] = $3_1;
       HEAP32[$4_1 + 36 >> 2] = HEAP32[$2_1 + 36 >> 2];
       HEAP32[$4_1 + 40 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[HEAP32[$2_1 + 36 >> 2] + 32 >> 2] = $4_1;
       HEAP32[HEAP32[$7_1 >> 2] + 32 >> 2] = $4_1;
       $5_1 = $2_1 + 36 | 0;
       HEAP32[$5_1 + ($6_1 << 2) >> 2] = $4_1;
       HEAP32[$5_1 + $10 >> 2] = $11;
       $5_1 = $4_1 + 24 | 0;
       $7_1 = HEAP32[$5_1 + 4 >> 2];
       $3_1 = $9_1 + 24 | 0;
       $16_1 = HEAP32[$5_1 >> 2];
       HEAP32[$3_1 >> 2] = $16_1;
       HEAP32[$3_1 + 4 >> 2] = $7_1;
       $3_1 = $4_1 + 16 | 0;
       $11 = HEAP32[$3_1 + 4 >> 2];
       $6_1 = $9_1 + 16 | 0;
       $17_1 = HEAP32[$3_1 >> 2];
       HEAP32[$6_1 >> 2] = $17_1;
       HEAP32[$6_1 + 4 >> 2] = $11;
       $6_1 = $4_1 + 8 | 0;
       $10 = HEAP32[$6_1 + 4 >> 2];
       $12_1 = $9_1 + 8 | 0;
       $18_1 = HEAP32[$6_1 >> 2];
       HEAP32[$12_1 >> 2] = $18_1;
       HEAP32[$12_1 + 4 >> 2] = $10;
       $12_1 = HEAP32[$4_1 + 4 >> 2];
       $19_1 = HEAP32[$4_1 >> 2];
       HEAP32[$9_1 >> 2] = $19_1;
       HEAP32[$9_1 + 4 >> 2] = $12_1;
       $15_1 = $2_1 + 24 | 0;
       $8_1 = $15_1;
       $13_1 = HEAP32[$8_1 + 4 >> 2];
       HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
       HEAP32[$5_1 + 4 >> 2] = $13_1;
       $5_1 = $2_1 + 16 | 0;
       $13_1 = HEAP32[$5_1 + 4 >> 2];
       HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $13_1;
       $3_1 = $2_1 + 8 | 0;
       $13_1 = HEAP32[$3_1 + 4 >> 2];
       HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
       HEAP32[$6_1 + 4 >> 2] = $13_1;
       $6_1 = HEAP32[$2_1 + 4 >> 2];
       HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
       HEAP32[$4_1 + 4 >> 2] = $6_1;
       HEAP32[$15_1 >> 2] = $16_1;
       HEAP32[$15_1 + 4 >> 2] = $7_1;
       HEAP32[$5_1 >> 2] = $17_1;
       HEAP32[$5_1 + 4 >> 2] = $11;
       HEAP32[$3_1 >> 2] = $18_1;
       HEAP32[$3_1 + 4 >> 2] = $10;
       HEAP32[$2_1 >> 2] = $19_1;
       HEAP32[$2_1 + 4 >> 2] = $12_1;
      }
      $2_1 = HEAP32[$0 + 16 >> 2] >>> $14;
      $14 = $14 + 1 & 31;
      $2_1 = HEAP32[((($2_1 & 1) << 2) + $4_1 | 0) + 36 >> 2];
      $7_1 = $2_1 + 40 | 0;
      if (HEAP32[$7_1 >> 2]) {
       continue
      }
      break;
     };
    }
    $8_1 = $0;
    $3_1 = 0;
    label$10 : {
     if (!$478($0, $2_1)) {
      break label$10
     }
     $3_1 = HEAP32[$0 >> 2];
    }
    $479($8_1, $3_1, $2_1);
    HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 1;
    $1_1 = $1_1 + -1 | 0;
    if (!$1_1) {
     break label$2
    }
    $2_1 = HEAP32[$0 >> 2];
    continue;
   };
  }
  global$0 = $9_1 + 32 | 0;
 }
 
 function $478($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0);
  if (($1_1 | 0) == HEAP32[$0 >> 2]) {
   HEAP32[$0 >> 2] = 0;
   return 0;
  }
  $2_1 = HEAP32[$1_1 + 32 >> 2];
  $3_1 = HEAP32[(((HEAP32[$2_1 + 40 >> 2] != ($1_1 | 0)) << 2) + $2_1 | 0) + 36 >> 2];
  $1_1 = HEAP32[$2_1 + 32 >> 2];
  label$2 : {
   label$3 : {
    if ($1_1) {
     HEAP32[(((($2_1 | 0) == HEAP32[$1_1 + 40 >> 2]) << 2) + $1_1 | 0) + 36 >> 2] = $3_1;
     HEAP32[$3_1 + 32 >> 2] = $1_1;
     $80(HEAP32[$0 + 4 >> 2]);
     HEAP32[$0 + 4 >> 2] = $2_1;
     while (1) {
      $17_1 = HEAPF32[$1_1 >> 2];
      $2_1 = HEAP32[$1_1 + 36 >> 2];
      $4_1 = HEAPF32[$2_1 >> 2];
      $3_1 = HEAP32[$1_1 + 40 >> 2];
      $11 = HEAPF32[$3_1 >> 2];
      $4_1 = $4_1 < $11 ? $4_1 : $11;
      HEAPF32[$1_1 >> 2] = $4_1;
      $11 = HEAPF32[$1_1 + 16 >> 2];
      $5_1 = HEAPF32[$2_1 + 16 >> 2];
      $12_1 = HEAPF32[$3_1 + 16 >> 2];
      $5_1 = $5_1 > $12_1 ? $5_1 : $12_1;
      HEAPF32[$1_1 + 16 >> 2] = $5_1;
      $12_1 = HEAPF32[$1_1 + 4 >> 2];
      $6_1 = HEAPF32[$2_1 + 4 >> 2];
      $13_1 = HEAPF32[$3_1 + 4 >> 2];
      $6_1 = $6_1 < $13_1 ? $6_1 : $13_1;
      HEAPF32[$1_1 + 4 >> 2] = $6_1;
      $7_1 = $1_1 + 20 | 0;
      $13_1 = HEAPF32[$7_1 >> 2];
      $8_1 = HEAPF32[$2_1 + 20 >> 2];
      $14 = HEAPF32[$3_1 + 20 >> 2];
      $8_1 = $8_1 > $14 ? $8_1 : $14;
      HEAPF32[$7_1 >> 2] = $8_1;
      $14 = HEAPF32[$1_1 + 8 >> 2];
      $9_1 = HEAPF32[$2_1 + 8 >> 2];
      $15_1 = HEAPF32[$3_1 + 8 >> 2];
      $9_1 = $9_1 < $15_1 ? $9_1 : $15_1;
      HEAPF32[$1_1 + 8 >> 2] = $9_1;
      $7_1 = $1_1 + 24 | 0;
      $15_1 = HEAPF32[$7_1 >> 2];
      $10 = HEAPF32[$2_1 + 24 >> 2];
      $16_1 = HEAPF32[$3_1 + 24 >> 2];
      $10 = $10 > $16_1 ? $10 : $16_1;
      HEAPF32[$7_1 >> 2] = $10;
      label$6 : {
       if ($13_1 != $8_1 | $11 != $5_1 | ($17_1 != $4_1 | $12_1 != $6_1)) {
        break label$6
       }
       if ($14 != $9_1) {
        break label$6
       }
       if ($15_1 == $10) {
        break label$2
       }
      }
      $1_1 = HEAP32[$1_1 + 32 >> 2];
      if ($1_1) {
       continue
      }
      break;
     };
     break label$3;
    }
    HEAP32[$3_1 + 32 >> 2] = 0;
    HEAP32[$0 >> 2] = $3_1;
    $80(HEAP32[$0 + 4 >> 2]);
    HEAP32[$0 + 4 >> 2] = $2_1;
   }
   $1_1 = HEAP32[$0 >> 2];
  }
  return $1_1;
 }
 
 function $479($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0;
  if (!HEAP32[$0 >> 2]) {
   HEAP32[$2_1 + 32 >> 2] = 0;
   HEAP32[$0 >> 2] = $2_1;
   return;
  }
  $3_1 = HEAP32[$1_1 + 40 >> 2];
  if ($3_1) {
   $5_1 = Math_fround(HEAPF32[$2_1 >> 2] + HEAPF32[$2_1 + 16 >> 2]);
   $4_1 = Math_fround(HEAPF32[$2_1 + 8 >> 2] + HEAPF32[$2_1 + 24 >> 2]);
   $6_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] + HEAPF32[$2_1 + 20 >> 2]);
   while (1) {
    $8_1 = $1_1 + 36 | 0;
    $1_1 = HEAP32[$1_1 + 36 >> 2];
    $1_1 = HEAP32[$8_1 + ((Math_fround(Math_fround(Math_fround(Math_abs(Math_fround($5_1 - Math_fround(HEAPF32[$1_1 >> 2] + HEAPF32[$1_1 + 16 >> 2])))) + Math_fround(Math_abs(Math_fround($6_1 - Math_fround(HEAPF32[$1_1 + 4 >> 2] + HEAPF32[$1_1 + 20 >> 2]))))) + Math_fround(Math_abs(Math_fround($4_1 - Math_fround(HEAPF32[$1_1 + 8 >> 2] + HEAPF32[$1_1 + 24 >> 2]))))) < Math_fround(Math_fround(Math_fround(Math_abs(Math_fround($5_1 - Math_fround(HEAPF32[$3_1 >> 2] + HEAPF32[$3_1 + 16 >> 2])))) + Math_fround(Math_abs(Math_fround($6_1 - Math_fround(HEAPF32[$3_1 + 4 >> 2] + HEAPF32[$3_1 + 20 >> 2]))))) + Math_fround(Math_abs(Math_fround($4_1 - Math_fround(HEAPF32[$3_1 + 8 >> 2] + HEAPF32[$3_1 + 24 >> 2]))))) ^ 1) << 2) >> 2];
    $3_1 = HEAP32[$1_1 + 40 >> 2];
    if ($3_1) {
     continue
    }
    break;
   };
  }
  $8_1 = HEAP32[$1_1 + 32 >> 2];
  $3_1 = HEAP32[$0 + 4 >> 2];
  label$4 : {
   if ($3_1) {
    HEAP32[$0 + 4 >> 2] = 0;
    break label$4;
   }
   $3_1 = $79(44);
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$3_1 + 40 >> 2] = 0;
   $7_1 = $3_1 + 32 | 0;
   HEAP32[$7_1 >> 2] = 0;
   HEAP32[$7_1 + 4 >> 2] = 0;
   $7_1 = $3_1 + 24 | 0;
   HEAP32[$7_1 >> 2] = 0;
   HEAP32[$7_1 + 4 >> 2] = 0;
   $7_1 = $3_1 + 16 | 0;
   HEAP32[$7_1 >> 2] = 0;
   HEAP32[$7_1 + 4 >> 2] = 0;
   $7_1 = $3_1 + 8 | 0;
   HEAP32[$7_1 >> 2] = 0;
   HEAP32[$7_1 + 4 >> 2] = 0;
  }
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  $5_1 = HEAPF32[$2_1 >> 2];
  $4_1 = HEAPF32[$1_1 >> 2];
  HEAPF32[$3_1 >> 2] = $5_1 < $4_1 ? $5_1 : $4_1;
  $5_1 = HEAPF32[$2_1 + 16 >> 2];
  $4_1 = HEAPF32[$1_1 + 16 >> 2];
  HEAPF32[$3_1 + 16 >> 2] = $5_1 > $4_1 ? $5_1 : $4_1;
  $5_1 = HEAPF32[$2_1 + 4 >> 2];
  $4_1 = HEAPF32[$1_1 + 4 >> 2];
  HEAPF32[$3_1 + 4 >> 2] = $5_1 < $4_1 ? $5_1 : $4_1;
  $5_1 = HEAPF32[$2_1 + 20 >> 2];
  $4_1 = HEAPF32[$1_1 + 20 >> 2];
  HEAPF32[$3_1 + 20 >> 2] = $5_1 > $4_1 ? $5_1 : $4_1;
  $5_1 = HEAPF32[$2_1 + 8 >> 2];
  $4_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAPF32[$3_1 + 8 >> 2] = $5_1 < $4_1 ? $5_1 : $4_1;
  HEAP32[$3_1 + 32 >> 2] = $8_1;
  $5_1 = HEAPF32[$2_1 + 24 >> 2];
  $4_1 = HEAPF32[$1_1 + 24 >> 2];
  HEAPF32[$3_1 + 24 >> 2] = $5_1 > $4_1 ? $5_1 : $4_1;
  label$6 : {
   if ($8_1) {
    HEAP32[(((HEAP32[HEAP32[$1_1 + 32 >> 2] + 40 >> 2] == ($1_1 | 0)) << 2) + $8_1 | 0) + 36 >> 2] = $3_1;
    HEAP32[$3_1 + 36 >> 2] = $1_1;
    HEAP32[$1_1 + 32 >> 2] = $3_1;
    HEAP32[$3_1 + 40 >> 2] = $2_1;
    HEAP32[$2_1 + 32 >> 2] = $3_1;
    $5_1 = HEAPF32[$3_1 >> 2];
    while (1) {
     $0 = $3_1;
     $3_1 = $8_1;
     label$9 : {
      if (HEAPF32[$3_1 >> 2] <= $5_1 ^ 1 | HEAPF32[$3_1 + 4 >> 2] <= HEAPF32[$0 + 4 >> 2] ^ 1 | (HEAPF32[$3_1 + 8 >> 2] <= HEAPF32[$0 + 8 >> 2] ^ 1 | HEAPF32[$3_1 + 16 >> 2] >= HEAPF32[$0 + 16 >> 2] ^ 1)) {
       break label$9
      }
      if (!(HEAPF32[$3_1 + 20 >> 2] >= HEAPF32[$0 + 20 >> 2])) {
       break label$9
      }
      if (HEAPF32[$3_1 + 24 >> 2] >= HEAPF32[$0 + 24 >> 2]) {
       break label$6
      }
     }
     $0 = HEAP32[$3_1 + 36 >> 2];
     $5_1 = HEAPF32[$0 >> 2];
     $1_1 = HEAP32[$3_1 + 40 >> 2];
     $4_1 = HEAPF32[$1_1 >> 2];
     $5_1 = $5_1 < $4_1 ? $5_1 : $4_1;
     HEAPF32[$3_1 >> 2] = $5_1;
     $4_1 = HEAPF32[$0 + 16 >> 2];
     $6_1 = HEAPF32[$1_1 + 16 >> 2];
     HEAPF32[$3_1 + 16 >> 2] = $4_1 > $6_1 ? $4_1 : $6_1;
     $4_1 = HEAPF32[$0 + 4 >> 2];
     $6_1 = HEAPF32[$1_1 + 4 >> 2];
     HEAPF32[$3_1 + 4 >> 2] = $4_1 < $6_1 ? $4_1 : $6_1;
     $4_1 = HEAPF32[$0 + 20 >> 2];
     $6_1 = HEAPF32[$1_1 + 20 >> 2];
     HEAPF32[$3_1 + 20 >> 2] = $4_1 > $6_1 ? $4_1 : $6_1;
     $4_1 = HEAPF32[$0 + 8 >> 2];
     $6_1 = HEAPF32[$1_1 + 8 >> 2];
     HEAPF32[$3_1 + 8 >> 2] = $4_1 < $6_1 ? $4_1 : $6_1;
     $4_1 = HEAPF32[$0 + 24 >> 2];
     $6_1 = HEAPF32[$1_1 + 24 >> 2];
     HEAPF32[$3_1 + 24 >> 2] = $4_1 > $6_1 ? $4_1 : $6_1;
     $8_1 = HEAP32[$3_1 + 32 >> 2];
     if ($8_1) {
      continue
     }
     break;
    };
    break label$6;
   }
   HEAP32[$3_1 + 36 >> 2] = $1_1;
   HEAP32[$1_1 + 32 >> 2] = $3_1;
   HEAP32[$3_1 + 40 >> 2] = $2_1;
   HEAP32[$0 >> 2] = $3_1;
   HEAP32[$2_1 + 32 >> 2] = $3_1;
  }
 }
 
 function $480($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   if ($4_1) {
    HEAP32[$0 + 4 >> 2] = 0;
    break label$1;
   }
   $4_1 = $79(44);
   $3_1 = $4_1;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$3_1 + 40 >> 2] = 0;
   $3_1 = $3_1 + 32 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 24 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 16 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $4_1 + 8 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
  }
  HEAP32[$4_1 + 36 >> 2] = $2_1;
  HEAP32[$4_1 + 32 >> 2] = 0;
  HEAP32[$4_1 + 40 >> 2] = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  $3_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $4_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $3_1 = $1_1 + 16 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $4_1 + 16 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $1_1 = $1_1 + 24 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $4_1 + 24 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $479($0, HEAP32[$0 >> 2], $4_1);
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
  return $4_1;
 }
 
 function $481($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = $478($0, $1_1);
  label$1 : {
   if (!$5_1) {
    $5_1 = 0;
    break label$1;
   }
   $3_1 = HEAP32[$0 + 8 >> 2];
   if (($3_1 | 0) >= 0) {
    if (!$3_1) {
     break label$1
    }
    while (1) {
     $4_1 = HEAP32[$5_1 + 32 >> 2];
     if (!$4_1) {
      break label$1
     }
     $5_1 = $4_1;
     $3_1 = $3_1 + -1 | 0;
     if ($3_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $5_1 = HEAP32[$0 >> 2];
  }
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $3_1 = $2_1 + 24 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $6_1 = $1_1 + 24 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $4_1;
  $3_1 = $2_1 + 16 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $6_1 = $1_1 + 16 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $4_1;
  $4_1 = $2_1 + 8 | 0;
  $2_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $1_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $479($0, $5_1, $1_1);
 }
 
 function $482($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0);
  $8_1 = HEAPF32[$2_1 >> 2];
  label$1 : {
   label$2 : {
    if (!(HEAPF32[$1_1 >> 2] <= $8_1)) {
     $6_1 = HEAPF32[$2_1 + 4 >> 2];
     break label$2;
    }
    $6_1 = HEAPF32[$2_1 + 4 >> 2];
    if (HEAPF32[$1_1 + 4 >> 2] <= $6_1 ^ 1 | HEAPF32[$1_1 + 8 >> 2] <= HEAPF32[$2_1 + 8 >> 2] ^ 1 | (HEAPF32[$1_1 + 16 >> 2] >= HEAPF32[$2_1 + 16 >> 2] ^ 1 | HEAPF32[$1_1 + 20 >> 2] >= HEAPF32[$2_1 + 20 >> 2] ^ 1)) {
     break label$2
    }
    $4_1 = 0;
    if (HEAPF32[$1_1 + 24 >> 2] >= HEAPF32[$2_1 + 24 >> 2]) {
     break label$1
    }
   }
   $10 = Math_fround($6_1 - Math_fround(.05000000074505806));
   HEAPF32[$2_1 + 4 >> 2] = $10;
   $9_1 = Math_fround($8_1 - Math_fround(.05000000074505806));
   HEAPF32[$2_1 >> 2] = $9_1;
   $11 = Math_fround(HEAPF32[$2_1 + 8 >> 2] - Math_fround(.05000000074505806));
   HEAPF32[$2_1 + 8 >> 2] = $11;
   $12_1 = Math_fround(HEAPF32[$2_1 + 16 >> 2] + Math_fround(.05000000074505806));
   HEAPF32[$2_1 + 16 >> 2] = $12_1;
   $4_1 = $2_1 + 20 | 0;
   $6_1 = Math_fround(HEAPF32[$4_1 >> 2] + Math_fround(.05000000074505806));
   HEAPF32[$4_1 >> 2] = $6_1;
   $7_1 = $2_1 + 24 | 0;
   $8_1 = Math_fround(HEAPF32[$7_1 >> 2] + Math_fround(.05000000074505806));
   HEAPF32[$7_1 >> 2] = $8_1;
   $13_1 = HEAPF32[$3_1 >> 2];
   $4_1 = $13_1 > Math_fround(0.0);
   HEAPF32[($4_1 << 4) + $2_1 >> 2] = ($4_1 ? $12_1 : $9_1) + $13_1;
   $9_1 = HEAPF32[$3_1 + 4 >> 2];
   $4_1 = $9_1 > Math_fround(0.0);
   HEAPF32[($4_1 ? 20 : 4) + $2_1 >> 2] = ($4_1 ? $6_1 : $10) + $9_1;
   $6_1 = HEAPF32[$3_1 + 8 >> 2];
   $3_1 = $6_1 > Math_fround(0.0);
   HEAPF32[($3_1 ? 24 : 8) + $2_1 >> 2] = ($3_1 ? $8_1 : $11) + $6_1;
   $3_1 = $478($0, $1_1);
   label$4 : {
    if (!$3_1) {
     $3_1 = 0;
     break label$4;
    }
    $5_1 = HEAP32[$0 + 8 >> 2];
    if (($5_1 | 0) >= 0) {
     if (!$5_1) {
      break label$4
     }
     while (1) {
      $4_1 = HEAP32[$3_1 + 32 >> 2];
      if (!$4_1) {
       break label$4
      }
      $3_1 = $4_1;
      $5_1 = $5_1 + -1 | 0;
      if ($5_1) {
       continue
      }
      break;
     };
     break label$4;
    }
    $3_1 = HEAP32[$0 >> 2];
   }
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   $4_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $1_1 + 24 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $4_1;
   $4_1 = $2_1 + 16 | 0;
   $7_1 = HEAP32[$4_1 + 4 >> 2];
   $5_1 = $1_1 + 16 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   $2_1 = $2_1 + 8 | 0;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   $7_1 = $1_1 + 8 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $4_1;
   $479($0, $3_1, $1_1);
   $4_1 = 1;
  }
  return $4_1;
 }
 
 function $483($0, $1_1) {
  $478($0, $1_1);
  $80(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 4 >> 2] = $1_1;
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + -1;
 }
 
 function $485($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1_1);
 }
 
 function $486($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return 1;
 }
 
 function $488($0) {
  var $1_1 = 0.0, $2_1 = 0.0;
  $1_1 = $0 * $0;
  $2_1 = $1_1 * $0;
  return Math_fround($2_1 * ($1_1 * $1_1) * ($1_1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2_1 * ($1_1 * .008333329385889463 + -.16666666641626524) + $0));
 }
 
 function $489($0) {
  var $1_1 = 0.0;
  $0 = $0 * $0;
  $1_1 = $0 * $0;
  return Math_fround($0 * -.499999997251031 + 1.0 + $1_1 * .04166662332373906 + $0 * $1_1 * ($0 * 2.439044879627741e-05 + -.001388676377460993));
 }
 
 function $490($0, $1_1) {
  var $2_1 = 0;
  label$1 : {
   if (($1_1 | 0) >= 1024) {
    $0 = $0 * 8988465674311579538646525.0e283;
    $2_1 = $1_1 + -1023 | 0;
    if (($2_1 | 0) < 1024) {
     $1_1 = $2_1;
     break label$1;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < 3069 ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > -1023) {
    break label$1
   }
   $0 = $0 * 2.004168360008973e-292;
   $2_1 = $1_1 + 969 | 0;
   if (($2_1 | 0) > -1023) {
    $1_1 = $2_1;
    break label$1;
   }
   $0 = $0 * 2.004168360008973e-292;
   $1_1 = (($1_1 | 0) > -2960 ? $1_1 : -2960) + 1938 | 0;
  }
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $1_1 + 1023 << 20);
  return $0 * +wasm2js_scratch_load_f64();
 }
 
 function $491($0, $1_1, $2_1) {
  var $3_1 = 0.0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0.0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = 0, $21 = 0, $22_1 = 0, $23_1 = 0;
  $8_1 = global$0 - 560 | 0;
  global$0 = $8_1;
  $6_1 = ($2_1 + -3 | 0) / 24 | 0;
  $16_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
  $14 = $2_1 + Math_imul($16_1, -24) | 0;
  $13_1 = HEAP32[2344];
  if (($13_1 | 0) >= 0) {
   $6_1 = $13_1 + 1 | 0;
   $2_1 = $16_1;
   $7_1 = ($2_1 << 2) + 9392 | 0;
   $4_1 = $8_1 + 320 | 0;
   while (1) {
    HEAPF64[$4_1 >> 3] = ($2_1 | 0) < 0 ? 0.0 : +HEAP32[$7_1 >> 2];
    $4_1 = $4_1 + 8 | 0;
    $7_1 = $7_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue
    }
    break;
   };
  }
  $11 = $14 + -24 | 0;
  $6_1 = $8_1 + 320 | 0;
  while (1) {
   $3_1 = 0.0;
   $2_1 = $0;
   $7_1 = 1;
   $4_1 = $6_1;
   while (1) {
    $3_1 = $3_1 + HEAPF64[$2_1 >> 3] * HEAPF64[$4_1 >> 3];
    $2_1 = $2_1 + 8 | 0;
    $4_1 = $4_1 + -8 | 0;
    $7_1 = $7_1 + -1 | 0;
    if ($7_1) {
     continue
    }
    break;
   };
   HEAPF64[($5_1 << 3) + $8_1 >> 3] = $3_1;
   $6_1 = $6_1 + 8 | 0;
   $2_1 = ($5_1 | 0) < ($13_1 | 0);
   $5_1 = $5_1 + 1 | 0;
   if ($2_1) {
    continue
   }
   break;
  };
  $19_1 = 23 - $11 | 0;
  $17_1 = 24 - $11 | 0;
  $20 = ($8_1 + ($13_1 << 2) | 0) + 476 | 0;
  $21 = $8_1 + 476 | 0;
  $22_1 = $8_1 + -8 | 0;
  $5_1 = $13_1;
  label$8 : {
   while (1) {
    $2_1 = $5_1 << 3;
    $3_1 = HEAPF64[$2_1 + $8_1 >> 3];
    $6_1 = ($5_1 | 0) < 1;
    if (!$6_1) {
     $2_1 = $2_1 + $22_1 | 0;
     $4_1 = $8_1 + 480 | 0;
     $7_1 = $5_1;
     while (1) {
      $9_1 = $4_1;
      $15_1 = $3_1;
      $3_1 = $3_1 * 5.960464477539063e-08;
      label$12 : {
       if (Math_abs($3_1) < 2147483648.0) {
        $10 = ~~$3_1;
        break label$12;
       }
       $10 = -2147483648;
      }
      $3_1 = +($10 | 0);
      $15_1 = $15_1 + $3_1 * -16777216.0;
      label$14 : {
       if (Math_abs($15_1) < 2147483648.0) {
        $10 = ~~$15_1;
        break label$14;
       }
       $10 = -2147483648;
      }
      HEAP32[$9_1 >> 2] = $10;
      $4_1 = $4_1 + 4 | 0;
      $3_1 = HEAPF64[$2_1 >> 3] + $3_1;
      $2_1 = $2_1 + -8 | 0;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1) {
       continue
      }
      break;
     };
    }
    $3_1 = $490($3_1, $11);
    $3_1 = $3_1 + Math_floor($3_1 * .125) * -8.0;
    label$16 : {
     if (Math_abs($3_1) < 2147483648.0) {
      $10 = ~~$3_1;
      break label$16;
     }
     $10 = -2147483648;
    }
    $3_1 = $3_1 - +($10 | 0);
    label$18 : {
     label$19 : {
      label$20 : {
       $7_1 = ($11 | 0) < 1;
       label$21 : {
        if (!$7_1) {
         $4_1 = ($8_1 + ($5_1 << 2) | 0) + 476 | 0;
         $9_1 = HEAP32[$4_1 >> 2];
         $2_1 = $9_1 >> $17_1;
         $12_1 = $4_1;
         $4_1 = $9_1 - ($2_1 << $17_1) | 0;
         HEAP32[$12_1 >> 2] = $4_1;
         $10 = $2_1 + $10 | 0;
         $12_1 = $4_1 >> $19_1;
         break label$21;
        }
        if ($11) {
         break label$20
        }
        $12_1 = HEAP32[($8_1 + ($5_1 << 2) | 0) + 476 >> 2] >> 23;
       }
       if (($12_1 | 0) < 1) {
        break label$18
       }
       break label$19;
      }
      $12_1 = 2;
      if (!!($3_1 >= .5)) {
       break label$19
      }
      $12_1 = 0;
      break label$18;
     }
     label$23 : {
      if ($6_1) {
       $9_1 = 0;
       break label$23;
      }
      $9_1 = 0;
      $2_1 = $8_1 + 480 | 0;
      $6_1 = $5_1;
      while (1) {
       $4_1 = HEAP32[$2_1 >> 2];
       label$26 : {
        label$27 : {
         $23_1 = $2_1;
         if ($9_1) {
          $18_1 = 16777215
         } else {
          if (!$4_1) {
           break label$27
          }
          $9_1 = 1;
          $18_1 = 16777216;
         }
         HEAP32[$23_1 >> 2] = $18_1 - $4_1;
         break label$26;
        }
        $9_1 = 0;
       }
       $2_1 = $2_1 + 4 | 0;
       $6_1 = $6_1 + -1 | 0;
       if ($6_1) {
        continue
       }
       break;
      };
     }
     label$29 : {
      if ($7_1) {
       break label$29
      }
      $2_1 = $11 + -1 | 0;
      if ($2_1 >>> 0 > 1) {
       break label$29
      }
      if ($2_1 - 1) {
       $2_1 = ($8_1 + ($5_1 << 2) | 0) + 476 | 0;
       HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] & 8388607;
       break label$29;
      }
      $2_1 = ($8_1 + ($5_1 << 2) | 0) + 476 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] & 4194303;
     }
     $10 = $10 + 1 | 0;
     if (($12_1 | 0) != 2) {
      break label$18
     }
     $3_1 = 1.0 - $3_1;
     $12_1 = 2;
     if (!$9_1) {
      break label$18
     }
     $3_1 = $3_1 - $490(1.0, $11);
    }
    if ($3_1 == 0.0) {
     label$33 : {
      if (($5_1 | 0) <= ($13_1 | 0)) {
       break label$33
      }
      $2_1 = ($5_1 << 2) + $21 | 0;
      $4_1 = 0;
      $7_1 = $5_1;
      while (1) {
       $4_1 = HEAP32[$2_1 >> 2] | $4_1;
       $2_1 = $2_1 + -4 | 0;
       $7_1 = $7_1 + -1 | 0;
       if (($7_1 | 0) > ($13_1 | 0)) {
        continue
       }
       break;
      };
      if (!$4_1) {
       break label$33
      }
      $2_1 = ($8_1 + ($5_1 << 2) | 0) + 476 | 0;
      $14 = $11;
      while (1) {
       $5_1 = $5_1 + -1 | 0;
       $14 = $14 + -24 | 0;
       $0 = HEAP32[$2_1 >> 2];
       $2_1 = $2_1 + -4 | 0;
       if (!$0) {
        continue
       }
       break;
      };
      break label$8;
     }
     $2_1 = $20;
     $6_1 = $5_1;
     while (1) {
      $6_1 = $6_1 + 1 | 0;
      $4_1 = HEAP32[$2_1 >> 2];
      $2_1 = $2_1 + -4 | 0;
      if (!$4_1) {
       continue
      }
      break;
     };
     $9_1 = (($5_1 << 3) + $8_1 | 0) + 328 | 0;
     while (1) {
      $2_1 = (($5_1 << 3) + $8_1 | 0) + 328 | 0;
      $5_1 = $5_1 + 1 | 0;
      HEAPF64[$2_1 >> 3] = HEAP32[($16_1 + $5_1 << 2) + 9392 >> 2];
      $3_1 = 0.0;
      $2_1 = $0;
      $4_1 = $9_1;
      $7_1 = 1;
      while (1) {
       $3_1 = $3_1 + HEAPF64[$2_1 >> 3] * HEAPF64[$4_1 >> 3];
       $2_1 = $2_1 + 8 | 0;
       $4_1 = $4_1 + -8 | 0;
       $7_1 = $7_1 + -1 | 0;
       if ($7_1) {
        continue
       }
       break;
      };
      HEAPF64[($5_1 << 3) + $8_1 >> 3] = $3_1;
      $9_1 = $9_1 + 8 | 0;
      if (($5_1 | 0) < ($6_1 | 0)) {
       continue
      }
      break;
     };
     $5_1 = $6_1;
     continue;
    }
    break;
   };
   $3_1 = $490($3_1, 0 - $11 | 0);
   label$40 : {
    if (!!($3_1 >= 16777216.0)) {
     $0 = ($8_1 + 480 | 0) + ($5_1 << 2) | 0;
     $15_1 = $3_1;
     $3_1 = $3_1 * 5.960464477539063e-08;
     label$42 : {
      if (Math_abs($3_1) < 2147483648.0) {
       $2_1 = ~~$3_1;
       break label$42;
      }
      $2_1 = -2147483648;
     }
     $3_1 = $15_1 + +($2_1 | 0) * -16777216.0;
     label$44 : {
      if (Math_abs($3_1) < 2147483648.0) {
       $6_1 = ~~$3_1;
       break label$44;
      }
      $6_1 = -2147483648;
     }
     HEAP32[$0 >> 2] = $6_1;
     $5_1 = $5_1 + 1 | 0;
     break label$40;
    }
    $2_1 = Math_abs($3_1) < 2147483648.0 ? ~~$3_1 : -2147483648;
    $14 = $11;
   }
   HEAP32[($8_1 + 480 | 0) + ($5_1 << 2) >> 2] = $2_1;
  }
  label$48 : {
   if (($5_1 | 0) < 0) {
    break label$48
   }
   $7_1 = $5_1 + 1 | 0;
   $3_1 = $490(1.0, $14);
   $2_1 = ($8_1 + 480 | 0) + ($5_1 << 2) | 0;
   $4_1 = ($5_1 << 3) + $8_1 | 0;
   while (1) {
    HEAPF64[$4_1 >> 3] = $3_1 * +HEAP32[$2_1 >> 2];
    $2_1 = $2_1 + -4 | 0;
    $4_1 = $4_1 + -8 | 0;
    $3_1 = $3_1 * 5.960464477539063e-08;
    $7_1 = $7_1 + -1 | 0;
    if (($7_1 | 0) > 0) {
     continue
    }
    break;
   };
   if (($5_1 | 0) < 0) {
    break label$48
   }
   $6_1 = ($5_1 << 3) + $8_1 | 0;
   $2_1 = $5_1;
   while (1) {
    $0 = $2_1;
    $7_1 = $5_1 - $2_1 | 0;
    $3_1 = 0.0;
    $2_1 = 0;
    $4_1 = 0;
    while (1) {
     $3_1 = $3_1 + HEAPF64[$2_1 + 12160 >> 3] * HEAPF64[$2_1 + $6_1 >> 3];
     label$51 : {
      if (($4_1 | 0) >= ($13_1 | 0)) {
       break label$51
      }
      $2_1 = $2_1 + 8 | 0;
      $11 = $4_1 >>> 0 < $7_1 >>> 0;
      $4_1 = $4_1 + 1 | 0;
      if ($11) {
       continue
      }
     }
     break;
    };
    HEAPF64[($8_1 + 160 | 0) + ($7_1 << 3) >> 3] = $3_1;
    $6_1 = $6_1 + -8 | 0;
    $2_1 = $0 + -1 | 0;
    if (($0 | 0) > 0) {
     continue
    }
    break;
   };
  }
  label$62 : {
   if (($5_1 | 0) < 0) {
    $3_1 = 0.0;
    break label$62;
   }
   $4_1 = $5_1 + 1 | 0;
   $2_1 = ($8_1 + 160 | 0) + ($5_1 << 3) | 0;
   $3_1 = 0.0;
   while (1) {
    $3_1 = $3_1 + HEAPF64[$2_1 >> 3];
    $2_1 = $2_1 + -8 | 0;
    $4_1 = $4_1 + -1 | 0;
    if (($4_1 | 0) > 0) {
     continue
    }
    break;
   };
  }
  HEAPF64[$1_1 >> 3] = $12_1 ? -$3_1 : $3_1;
  global$0 = $8_1 + 560 | 0;
  return $10 & 7;
 }
 
 function $492($0, $1_1) {
  var $2_1 = 0, $3_1 = 0.0, $4_1 = 0, $5_1 = 0, $6_1 = 0.0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $2_1 = $5_1 & 2147483647;
  label$1 : {
   if ($2_1 >>> 0 <= 1305022426) {
    $6_1 = +$0;
    $3_1 = $6_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    HEAPF64[$1_1 >> 3] = $6_1 + $3_1 * -1.5707963109016418 + $3_1 * -1.5893254773528196e-08;
    if (Math_abs($3_1) < 2147483648.0) {
     $2_1 = ~~$3_1;
     break label$1;
    }
    $2_1 = -2147483648;
    break label$1;
   }
   if ($2_1 >>> 0 >= 2139095040) {
    HEAPF64[$1_1 >> 3] = Math_fround($0 - $0);
    $2_1 = 0;
    break label$1;
   }
   $7_1 = $2_1;
   $2_1 = ($2_1 >>> 23) + -150 | 0;
   HEAPF64[$4_1 + 8 >> 3] = (wasm2js_scratch_store_i32(0, $7_1 - ($2_1 << 23) | 0), wasm2js_scratch_load_f32());
   $2_1 = $491($4_1 + 8 | 0, $4_1, $2_1);
   $3_1 = HEAPF64[$4_1 >> 3];
   if (($5_1 | 0) <= -1) {
    HEAPF64[$1_1 >> 3] = -$3_1;
    $2_1 = 0 - $2_1 | 0;
    break label$1;
   }
   HEAPF64[$1_1 >> 3] = $3_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $2_1;
 }
 
 function $493($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $1_1 = $3_1 & 2147483647;
  label$1 : {
   if ($1_1 >>> 0 <= 1061752794) {
    if ($1_1 >>> 0 < 964689920) {
     break label$1
    }
    $0 = $488(+$0);
    break label$1;
   }
   $3_1 = $3_1 >>> 31;
   if ($1_1 >>> 0 <= 1081824209) {
    $4_1 = +$0;
    if ($1_1 >>> 0 <= 1075235811) {
     if ($3_1) {
      $0 = Math_fround(-$489($4_1 + 1.5707963267948966));
      break label$1;
     }
     $0 = $489($4_1 + -1.5707963267948966);
     break label$1;
    }
    $0 = $488(-(($3_1 ? 3.141592653589793 : -3.141592653589793) + $4_1));
    break label$1;
   }
   if ($1_1 >>> 0 <= 1088565717) {
    $4_1 = +$0;
    if ($1_1 >>> 0 <= 1085271519) {
     if ($3_1) {
      $0 = $489($4_1 + 4.71238898038469);
      break label$1;
     }
     $0 = Math_fround(-$489($4_1 + -4.71238898038469));
     break label$1;
    }
    $0 = $488(($3_1 ? 6.283185307179586 : -6.283185307179586) + $4_1);
    break label$1;
   }
   if ($1_1 >>> 0 >= 2139095040) {
    $0 = Math_fround($0 - $0);
    break label$1;
   }
   $1_1 = $492($0, $2_1 + 8 | 0) & 3;
   if ($1_1 >>> 0 <= 2) {
    label$11 : {
     switch ($1_1 - 1 | 0) {
     default:
      $0 = $488(HEAPF64[$2_1 + 8 >> 3]);
      break label$1;
     case 0:
      $0 = $489(HEAPF64[$2_1 + 8 >> 3]);
      break label$1;
     case 1:
      break label$11;
     };
    }
    $0 = $488(-HEAPF64[$2_1 + 8 >> 3]);
    break label$1;
   }
   $0 = Math_fround(-$489(HEAPF64[$2_1 + 8 >> 3]));
  }
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $494($0) {
  var $1_1 = Math_fround(0), $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $2_1 = $4_1 & 2147483647;
  label$1 : {
   if ($2_1 >>> 0 <= 1061752794) {
    $1_1 = Math_fround(1.0);
    if ($2_1 >>> 0 < 964689920) {
     break label$1
    }
    $1_1 = $489(+$0);
    break label$1;
   }
   $4_1 = $4_1 >>> 31;
   if ($2_1 >>> 0 <= 1081824209) {
    $5_1 = +$0;
    if ($2_1 >>> 0 >= 1075235812) {
     $1_1 = Math_fround(-$489(($4_1 ? 3.141592653589793 : -3.141592653589793) + $5_1));
     break label$1;
    }
    if ($4_1) {
     $1_1 = $488($5_1 + 1.5707963267948966);
     break label$1;
    }
    $1_1 = $488(1.5707963267948966 - $5_1);
    break label$1;
   }
   if ($2_1 >>> 0 <= 1088565717) {
    if ($2_1 >>> 0 >= 1085271520) {
     $1_1 = $489(($4_1 ? 6.283185307179586 : -6.283185307179586) + +$0);
     break label$1;
    }
    if ($4_1) {
     $1_1 = $488(-4.71238898038469 - +$0);
     break label$1;
    }
    $1_1 = $488(+$0 + -4.71238898038469);
    break label$1;
   }
   $1_1 = Math_fround($0 - $0);
   if ($2_1 >>> 0 >= 2139095040) {
    break label$1
   }
   $2_1 = $492($0, $3_1 + 8 | 0) & 3;
   if ($2_1 >>> 0 <= 2) {
    label$11 : {
     switch ($2_1 - 1 | 0) {
     default:
      $1_1 = $489(HEAPF64[$3_1 + 8 >> 3]);
      break label$1;
     case 0:
      $1_1 = $488(-HEAPF64[$3_1 + 8 >> 3]);
      break label$1;
     case 1:
      break label$11;
     };
    }
    $1_1 = Math_fround(-$489(HEAPF64[$3_1 + 8 >> 3]));
    break label$1;
   }
   $1_1 = $488(HEAPF64[$3_1 + 8 >> 3]);
  }
  $0 = $1_1;
  global$0 = $3_1 + 16 | 0;
  return $0;
 }
 
 function $495($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 + 4 >> 2] = 31;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 12232;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 1065353216;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 1;
  HEAP32[$0 + 52 >> 2] = -581039253;
  HEAP32[$0 + 56 >> 2] = -581039253;
  HEAP32[$0 + 36 >> 2] = 1566444395;
  HEAP32[$0 + 40 >> 2] = 1566444395;
  HEAP8[$0 + 32 | 0] = 1;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  $1_1 = $0 + 84 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0 + 60 | 0;
  HEAP32[$1_1 >> 2] = -581039253;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 44 | 0;
  HEAP32[$1_1 >> 2] = 1566444395;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 20 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $79(40);
  $473($1_1);
  HEAP32[$0 + 68 >> 2] = $1_1;
  if (HEAP32[$0 + 24 >> 2] < 0) {
   $8_1 = HEAP32[$0 + 20 >> 2];
   if (($8_1 | 0) >= 1) {
    $1_1 = 64;
    while (1) {
     $5_1 = HEAP32[$0 + 28 >> 2] + $1_1 | 0;
     $2_1 = $5_1 + -64 | 0;
     $4_1 = HEAP32[$2_1 + 4 >> 2];
     $3_1 = $1_1 + -64 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $2_1 = $2_1 + 8 | 0;
     $4_1 = HEAP32[$2_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $2_1 = $5_1 + -48 | 0;
     $3_1 = $2_1 + 8 | 0;
     $7_1 = HEAP32[$3_1 + 4 >> 2];
     $4_1 = $1_1 + -48 | 0;
     $6_1 = $4_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $7_1;
     $3_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $3_1;
     $2_1 = $5_1 + -32 | 0;
     $3_1 = $2_1 + 8 | 0;
     $7_1 = HEAP32[$3_1 + 4 >> 2];
     $4_1 = $1_1 + -32 | 0;
     $6_1 = $4_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $7_1;
     $3_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $3_1;
     $2_1 = $5_1 + -16 | 0;
     $3_1 = $2_1 + 8 | 0;
     $7_1 = HEAP32[$3_1 + 4 >> 2];
     $4_1 = $1_1 + -16 | 0;
     $6_1 = $4_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $7_1;
     $3_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $3_1;
     $2_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $2_1;
     $5_1 = $5_1 + 8 | 0;
     $2_1 = HEAP32[$5_1 + 4 >> 2];
     $4_1 = $1_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $2_1;
     $1_1 = $1_1 + 80 | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue
     }
     break;
    };
   }
   $1_1 = HEAP32[$0 + 28 >> 2];
   if ($1_1) {
    if (HEAPU8[$0 + 32 | 0]) {
     $80($1_1)
    }
    HEAP32[$0 + 28 >> 2] = 0;
   }
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP8[$0 + 32 | 0] = 1;
   HEAP32[$0 + 24 >> 2] = 0;
  }
 }
 
 function $496($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 12232;
  $1_1 = HEAP32[$0 + 68 >> 2];
  if ($1_1) {
   $474($1_1);
   $80(HEAP32[$0 + 68 >> 2]);
  }
  $1_1 = HEAP32[$0 + 28 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 32 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 28 >> 2] = 0;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP8[$0 + 32 | 0] = 1;
  return $0 | 0;
 }
 
 function $497($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 12232;
  $1_1 = HEAP32[$0 + 68 >> 2];
  if ($1_1) {
   $474($1_1);
   $80(HEAP32[$0 + 68 >> 2]);
  }
  $1_1 = HEAP32[$0 + 28 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 32 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 28 >> 2] = 0;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP8[$0 + 32 | 0] = 1;
  $80($0);
 }
 
 function $498($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_i32$1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 72 >> 2] + 1;
  $6_1 = $1_1 + 8 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $3_1 + 72 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = $1_1 + 24 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $3_1 + 88 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = $1_1 + 40 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $3_1 + 104 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = $1_1 + 56 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $3_1 + 120 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  HEAP32[$3_1 + 140 >> 2] = 0;
  HEAP32[$3_1 + 128 >> 2] = $2_1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 64 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 68 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$3_1 + 80 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$3_1 + 84 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$3_1 + 96 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$3_1 + 100 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$3_1 + 112 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 116 >> 2] = $4_1;
  HEAP32[$3_1 + 132 >> 2] = HEAP32[$2_1 + 4 >> 2];
  (wasm2js_i32$0 = $3_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1))), HEAPF32[wasm2js_i32$0 + 136 >> 2] = wasm2js_f32$0;
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $1_1, $3_1 + 48 | 0, $3_1 + 32 | 0);
  $5_1 = HEAPF32[$3_1 + 48 >> 2];
  if (!!(HEAPF32[$0 + 36 >> 2] > $5_1)) {
   HEAPF32[$0 + 36 >> 2] = $5_1
  }
  $5_1 = HEAPF32[$3_1 + 32 >> 2];
  if (!!(HEAPF32[$0 + 52 >> 2] < $5_1)) {
   HEAPF32[$0 + 52 >> 2] = $5_1
  }
  $5_1 = HEAPF32[$3_1 + 52 >> 2];
  if (HEAPF32[$0 + 40 >> 2] > $5_1) {
   HEAPF32[$0 + 40 >> 2] = $5_1
  }
  $5_1 = HEAPF32[$3_1 + 36 >> 2];
  if (!!(HEAPF32[$0 + 56 >> 2] < $5_1)) {
   HEAPF32[$0 + 56 >> 2] = $5_1
  }
  $5_1 = HEAPF32[$3_1 + 56 >> 2];
  if (!!(HEAPF32[$0 + 44 >> 2] > $5_1)) {
   HEAPF32[$0 + 44 >> 2] = $5_1
  }
  $5_1 = HEAPF32[$3_1 + 40 >> 2];
  if (!!(HEAPF32[$0 + 60 >> 2] < $5_1)) {
   HEAPF32[$0 + 60 >> 2] = $5_1
  }
  $1_1 = HEAP32[$0 + 68 >> 2];
  if ($1_1) {
   $4_1 = $3_1 + 56 | 0;
   $6_1 = HEAP32[$4_1 + 4 >> 2];
   $2_1 = $3_1 + 8 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $6_1;
   $4_1 = $3_1 + 40 | 0;
   $6_1 = HEAP32[$4_1 + 4 >> 2];
   $2_1 = $3_1 + 24 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $6_1;
   $2_1 = HEAP32[$3_1 + 52 >> 2];
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 + 48 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $2_1;
   $2_1 = HEAP32[$3_1 + 36 >> 2];
   HEAP32[$3_1 + 16 >> 2] = HEAP32[$3_1 + 32 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $2_1;
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $480($1_1, $3_1, HEAP32[$0 + 20 >> 2])), HEAP32[wasm2js_i32$0 + 140 >> 2] = wasm2js_i32$1;
  }
  $499($0 + 16 | 0, $3_1 - -64 | 0);
  global$0 = $3_1 + 144 | 0;
 }
 
 function $499($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0;
  $3_1 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   if (($3_1 | 0) != HEAP32[$0 + 8 >> 2]) {
    break label$1
   }
   $11 = $3_1 ? $3_1 << 1 : 1;
   if (($3_1 | 0) >= ($11 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$11) {
     break label$2
    }
    $12_1 = $79(Math_imul($11, 80));
    $3_1 = HEAP32[$0 + 4 >> 2];
   }
   if (($3_1 | 0) >= 1) {
    $8_1 = 64;
    while (1) {
     $4_1 = HEAP32[$0 + 12 >> 2] + $8_1 | 0;
     $5_1 = $4_1 + -64 | 0;
     $9_1 = HEAP32[$5_1 + 4 >> 2];
     $2_1 = $8_1 + $12_1 | 0;
     $6_1 = $2_1 + -64 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $9_1;
     $5_1 = $5_1 + 8 | 0;
     $7_1 = HEAP32[$5_1 + 4 >> 2];
     $6_1 = $6_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $7_1;
     $6_1 = $4_1 + -48 | 0;
     $9_1 = $6_1 + 8 | 0;
     $10 = HEAP32[$9_1 + 4 >> 2];
     $5_1 = $2_1 + -48 | 0;
     $7_1 = $5_1 + 8 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $10;
     $7_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $7_1;
     $6_1 = $4_1 + -32 | 0;
     $9_1 = $6_1 + 8 | 0;
     $10 = HEAP32[$9_1 + 4 >> 2];
     $5_1 = $2_1 + -32 | 0;
     $7_1 = $5_1 + 8 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $10;
     $7_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $7_1;
     $6_1 = $4_1 + -16 | 0;
     $9_1 = $6_1 + 8 | 0;
     $10 = HEAP32[$9_1 + 4 >> 2];
     $5_1 = $2_1 + -16 | 0;
     $7_1 = $5_1 + 8 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $10;
     $7_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $7_1;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $5_1;
     $4_1 = $4_1 + 8 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $2_1 = $2_1 + 8 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $5_1;
     $8_1 = $8_1 + 80 | 0;
     $3_1 = $3_1 + -1 | 0;
     if ($3_1) {
      continue
     }
     break;
    };
   }
   $3_1 = HEAP32[$0 + 12 >> 2];
   if ($3_1) {
    if (HEAPU8[$0 + 16 | 0]) {
     $80($3_1)
    }
    HEAP32[$0 + 12 >> 2] = 0;
   }
   HEAP32[$0 + 12 >> 2] = $12_1;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = $11;
   $3_1 = HEAP32[$0 + 4 >> 2];
  }
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = HEAP32[$0 + 12 >> 2] + Math_imul($3_1, 80) | 0;
  $2_1 = $3_1;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $4_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $2_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $8_1;
  $4_1 = $1_1 + 24 | 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $3_1 + 24 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $8_1;
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$3_1 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$3_1 + 20 >> 2] = $2_1;
  $4_1 = $1_1 + 40 | 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $3_1 + 40 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $8_1;
  $2_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$3_1 + 32 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$3_1 + 36 >> 2] = $2_1;
  $4_1 = $1_1 + 56 | 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $3_1 + 56 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $8_1;
  $2_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$3_1 + 48 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 52 >> 2] = $2_1;
  $4_1 = $1_1 + 72 | 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $3_1 + 72 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $8_1;
  $2_1 = HEAP32[$1_1 + 68 >> 2];
  HEAP32[$3_1 + 64 >> 2] = HEAP32[$1_1 + 64 >> 2];
  HEAP32[$3_1 + 68 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 }
 
 function $500($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = global$0 + -64 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  $8_1 = Math_imul($1_1, 80);
  $1_1 = $8_1 + HEAP32[$0 + 28 >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $6_1;
  $6_1 = $2_1 + 8 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $1_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = $2_1 + 24 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $1_1 + 24 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$1_1 + 20 >> 2] = $4_1;
  $6_1 = $2_1 + 40 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $1_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$2_1 + 36 >> 2];
  HEAP32[$1_1 + 32 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$1_1 + 36 >> 2] = $4_1;
  $6_1 = $2_1 + 56 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $1_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$2_1 + 52 >> 2];
  HEAP32[$1_1 + 48 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$1_1 + 52 >> 2] = $4_1;
  if (HEAP32[$0 + 68 >> 2]) {
   $1_1 = HEAP32[(HEAP32[$0 + 28 >> 2] + $8_1 | 0) + 64 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $5_1 + 48 | 0, $5_1 + 32 | 0);
   $2_1 = $5_1 + 56 | 0;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $5_1 + 8 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   $2_1 = $5_1 + 40 | 0;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $5_1 + 24 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   $1_1 = HEAP32[$5_1 + 36 >> 2];
   HEAP32[$5_1 + 16 >> 2] = HEAP32[$5_1 + 32 >> 2];
   HEAP32[$5_1 + 20 >> 2] = $1_1;
   $1_1 = HEAP32[$5_1 + 52 >> 2];
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $1_1;
   $481(HEAP32[$0 + 68 >> 2], HEAP32[(HEAP32[$0 + 28 >> 2] + $8_1 | 0) + 76 >> 2], $5_1);
  }
  if ($3_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0)
  }
  global$0 = $5_1 - -64 | 0;
 }
 
 function $501($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 72 >> 2] + 1;
  $2_1 = HEAP32[$0 + 68 >> 2];
  if ($2_1) {
   $483($2_1, HEAP32[(HEAP32[$0 + 28 >> 2] + Math_imul($1_1, 80) | 0) + 76 >> 2])
  }
  $3_1 = HEAP32[$0 + 20 >> 2];
  $18_1 = $0 + 28 | 0;
  $12_1 = HEAP32[$18_1 >> 2];
  $19_1 = Math_imul($1_1, 80);
  $2_1 = $12_1 + $19_1 | 0;
  $4_1 = $2_1 + 8 | 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $7_1 = $5_1 + 8 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $9_1 = $2_1 + 24 | 0;
  $13_1 = HEAP32[$9_1 + 4 >> 2];
  $15_1 = $5_1 + 24 | 0;
  $8_1 = $15_1;
  HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $13_1;
  $16_1 = $2_1 + 40 | 0;
  $10 = $16_1;
  $11 = HEAP32[$10 + 4 >> 2];
  $8_1 = $5_1 + 40 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $11;
  $10 = $2_1 + 56 | 0;
  $6_1 = HEAP32[$10 + 4 >> 2];
  $13_1 = $5_1 + 56 | 0;
  $11 = $13_1;
  HEAP32[$11 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$11 + 4 >> 2] = $6_1;
  $14 = $2_1 + 72 | 0;
  $17_1 = HEAP32[$14 + 4 >> 2];
  $11 = $5_1 + 72 | 0;
  $6_1 = $11;
  HEAP32[$6_1 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $17_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $6_1;
  $6_1 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$5_1 + 16 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$5_1 + 20 >> 2] = $6_1;
  $6_1 = HEAP32[$2_1 + 36 >> 2];
  HEAP32[$5_1 + 32 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$5_1 + 36 >> 2] = $6_1;
  $6_1 = HEAP32[$2_1 + 52 >> 2];
  HEAP32[$5_1 + 48 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$5_1 + 52 >> 2] = $6_1;
  $6_1 = HEAP32[$2_1 + 68 >> 2];
  HEAP32[$5_1 + 64 >> 2] = HEAP32[$2_1 + 64 >> 2];
  HEAP32[$5_1 + 68 >> 2] = $6_1;
  $6_1 = $12_1;
  $12_1 = Math_imul($3_1, 80) + -80 | 0;
  $3_1 = $6_1 + $12_1 | 0;
  $6_1 = $3_1 + 8 | 0;
  $17_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $17_1;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $4_1 = $3_1 + 24 | 0;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$9_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$2_1 + 16 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$2_1 + 20 >> 2] = $4_1;
  $4_1 = $3_1 + 40 | 0;
  $9_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$16_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$16_1 + 4 >> 2] = $9_1;
  $4_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$2_1 + 32 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$2_1 + 36 >> 2] = $4_1;
  $4_1 = $3_1 + 56 | 0;
  $9_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$10 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$10 + 4 >> 2] = $9_1;
  $4_1 = HEAP32[$3_1 + 52 >> 2];
  HEAP32[$2_1 + 48 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$2_1 + 52 >> 2] = $4_1;
  $4_1 = HEAP32[$3_1 + 68 >> 2];
  HEAP32[$2_1 + 64 >> 2] = HEAP32[$3_1 + 64 >> 2];
  HEAP32[$2_1 + 68 >> 2] = $4_1;
  $2_1 = $3_1 + 72 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$14 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$14 + 4 >> 2] = $3_1;
  $4_1 = HEAP32[$5_1 + 4 >> 2];
  $2_1 = HEAP32[$18_1 >> 2] + $12_1 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$7_1 + 4 >> 2];
  $3_1 = $2_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $3_1 = HEAP32[$5_1 + 20 >> 2];
  HEAP32[$2_1 + 16 >> 2] = HEAP32[$5_1 + 16 >> 2];
  HEAP32[$2_1 + 20 >> 2] = $3_1;
  $7_1 = HEAP32[$15_1 + 4 >> 2];
  $3_1 = $2_1 + 24 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$15_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $7_1;
  $3_1 = HEAP32[$5_1 + 36 >> 2];
  HEAP32[$2_1 + 32 >> 2] = HEAP32[$5_1 + 32 >> 2];
  HEAP32[$2_1 + 36 >> 2] = $3_1;
  $7_1 = HEAP32[$8_1 + 4 >> 2];
  $3_1 = $2_1 + 40 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $7_1;
  $3_1 = HEAP32[$5_1 + 52 >> 2];
  HEAP32[$2_1 + 48 >> 2] = HEAP32[$5_1 + 48 >> 2];
  HEAP32[$2_1 + 52 >> 2] = $3_1;
  $7_1 = HEAP32[$13_1 + 4 >> 2];
  $3_1 = $2_1 + 56 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$13_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$11 + 4 >> 2];
  $3_1 = $2_1 + 72 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $7_1;
  $3_1 = HEAP32[$5_1 + 68 >> 2];
  HEAP32[$2_1 + 64 >> 2] = HEAP32[$5_1 + 64 >> 2];
  HEAP32[$2_1 + 68 >> 2] = $3_1;
  if (HEAP32[$0 + 68 >> 2]) {
   HEAP32[HEAP32[(HEAP32[$0 + 28 >> 2] + $19_1 | 0) + 76 >> 2] + 36 >> 2] = $1_1
  }
  HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] + -1;
  global$0 = $5_1 + 80 | 0;
 }
 
 function $502($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 72 >> 2] + 1;
  $2_1 = HEAP32[$0 + 20 >> 2];
  if (($2_1 | 0) >= 1) {
   $3_1 = $2_1 + 1 | 0;
   $2_1 = Math_imul($2_1, 80) + -16 | 0;
   while (1) {
    if (($1_1 | 0) == HEAP32[HEAP32[$0 + 28 >> 2] + $2_1 >> 2]) {
     $501($0, $3_1 + -2 | 0)
    }
    $2_1 = $2_1 + -80 | 0;
    $3_1 = $3_1 + -1 | 0;
    if (($3_1 | 0) > 1) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
 }
 
 function $503($0) {
  $0 = $0 | 0;
  var $1_1 = Math_fround(0), $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$0 + 52 >> 2] = -581039253;
  HEAP32[$0 + 56 >> 2] = -581039253;
  HEAP32[$0 + 36 >> 2] = 1566444395;
  HEAP32[$0 + 40 >> 2] = 1566444395;
  $3_1 = $0 + 60 | 0;
  HEAP32[$3_1 >> 2] = -581039253;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0 + 44 | 0;
  HEAP32[$3_1 >> 2] = 1566444395;
  HEAP32[$3_1 + 4 >> 2] = 0;
  if (HEAP32[$0 + 20 >> 2] >= 1) {
   $3_1 = 64;
   while (1) {
    $4_1 = HEAP32[$0 + 28 >> 2] + $3_1 | 0;
    $5_1 = HEAP32[$4_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 8 >> 2]]($5_1, $4_1 + -64 | 0, $2_1 + 16 | 0, $2_1);
    $1_1 = HEAPF32[$2_1 + 16 >> 2];
    if (!!(HEAPF32[$0 + 36 >> 2] > $1_1)) {
     HEAPF32[$0 + 36 >> 2] = $1_1
    }
    $1_1 = HEAPF32[$2_1 >> 2];
    if (!!(HEAPF32[$0 + 52 >> 2] < $1_1)) {
     HEAPF32[$0 + 52 >> 2] = $1_1
    }
    $1_1 = HEAPF32[$2_1 + 20 >> 2];
    if (!!(HEAPF32[$0 + 40 >> 2] > $1_1)) {
     HEAPF32[$0 + 40 >> 2] = $1_1
    }
    $1_1 = HEAPF32[$2_1 + 4 >> 2];
    if (!!(HEAPF32[$0 + 56 >> 2] < $1_1)) {
     HEAPF32[$0 + 56 >> 2] = $1_1
    }
    $1_1 = HEAPF32[$2_1 + 24 >> 2];
    if (!!(HEAPF32[$0 + 44 >> 2] > $1_1)) {
     HEAPF32[$0 + 44 >> 2] = $1_1
    }
    $1_1 = HEAPF32[$2_1 + 8 >> 2];
    if (!!(HEAPF32[$0 + 60 >> 2] < $1_1)) {
     HEAPF32[$0 + 60 >> 2] = $1_1
    }
    $3_1 = $3_1 + 80 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < HEAP32[$0 + 20 >> 2]) {
     continue
    }
    break;
   };
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $504($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0);
  $4_1 = HEAPF32[$0 + 44 >> 2];
  $8_1 = HEAPF32[$0 + 60 >> 2];
  $5_1 = HEAP32[$0 + 20 >> 2];
  $6_1 = HEAPF32[$0 + 40 >> 2];
  $9_1 = HEAPF32[$0 + 56 >> 2];
  $7_1 = HEAPF32[$0 + 36 >> 2];
  $10 = HEAPF32[$0 + 52 >> 2];
  $24_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $25 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $26_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $27_1 = HEAPF32[$1_1 + 52 >> 2];
  $11 = HEAPF32[$1_1 + 24 >> 2];
  $16_1 = HEAPF32[$1_1 + 20 >> 2];
  $12_1 = HEAPF32[$1_1 + 56 >> 2];
  $17_1 = HEAPF32[$1_1 + 40 >> 2];
  $18_1 = HEAPF32[$1_1 + 36 >> 2];
  $28_1 = HEAPF32[$1_1 + 48 >> 2];
  $19_1 = HEAPF32[$1_1 + 8 >> 2];
  $20 = HEAPF32[$1_1 >> 2];
  $21 = HEAPF32[$1_1 + 4 >> 2];
  $22_1 = HEAPF32[$1_1 + 16 >> 2];
  $23_1 = HEAPF32[$1_1 + 32 >> 2];
  HEAP32[$2_1 + 12 >> 2] = 0;
  $13_1 = $12_1;
  $12_1 = $5_1 ? Math_fround(Math_fround($10 + $7_1) * Math_fround(.5)) : Math_fround(0.0);
  $14 = $5_1 ? Math_fround(Math_fround($9_1 + $6_1) * Math_fround(.5)) : Math_fround(0.0);
  $15_1 = $5_1 ? Math_fround(Math_fround($8_1 + $4_1) * Math_fround(.5)) : Math_fround(0.0);
  $13_1 = Math_fround($13_1 + Math_fround(Math_fround(Math_fround($23_1 * $12_1) + Math_fround($18_1 * $14)) + Math_fround($17_1 * $15_1)));
  $7_1 = Math_fround($24_1 + ($5_1 ? Math_fround(Math_fround($10 - $7_1) * Math_fround(.5)) : Math_fround(0.0)));
  $6_1 = Math_fround($25 + ($5_1 ? Math_fround(Math_fround($9_1 - $6_1) * Math_fround(.5)) : Math_fround(0.0)));
  $4_1 = Math_fround($26_1 + ($5_1 ? Math_fround(Math_fround($8_1 - $4_1) * Math_fround(.5)) : Math_fround(0.0)));
  $8_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(Math_abs($23_1))) + Math_fround($6_1 * Math_fround(Math_abs($18_1)))) + Math_fround($4_1 * Math_fround(Math_abs($17_1))));
  HEAPF32[$2_1 + 8 >> 2] = $13_1 - $8_1;
  $9_1 = Math_fround($27_1 + Math_fround(Math_fround(Math_fround($12_1 * $22_1) + Math_fround($14 * $16_1)) + Math_fround($15_1 * $11)));
  $10 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(Math_abs($22_1))) + Math_fround($6_1 * Math_fround(Math_abs($16_1)))) + Math_fround($4_1 * Math_fround(Math_abs($11))));
  HEAPF32[$2_1 + 4 >> 2] = $9_1 - $10;
  $11 = Math_fround($28_1 + Math_fround(Math_fround(Math_fround($12_1 * $20) + Math_fround($14 * $21)) + Math_fround($15_1 * $19_1)));
  $4_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(Math_abs($20))) + Math_fround($6_1 * Math_fround(Math_abs($21)))) + Math_fround($4_1 * Math_fround(Math_abs($19_1))));
  HEAPF32[$2_1 >> 2] = $11 - $4_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 8 >> 2] = $8_1 + $13_1;
  HEAPF32[$3_1 + 4 >> 2] = $10 + $9_1;
  HEAPF32[$3_1 >> 2] = $4_1 + $11;
 }
 
 function $505($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $5_1 = $3_1 + 44 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 56 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 52 >> 2] = 1065353216;
  $5_1 = $3_1 + 76 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 72 >> 2] = 1065353216;
  $5_1 = $3_1 + 84 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 92 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 1065353216;
  HEAP32[$3_1 + 64 >> 2] = 0;
  HEAP32[$3_1 + 68 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  $1_1 = Math_fround($1_1 / Math_fround(12.0));
  $4_1 = Math_fround(Math_fround(HEAPF32[$3_1 >> 2] - HEAPF32[$3_1 + 16 >> 2]) * Math_fround(.5));
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  $6_1 = Math_fround(Math_fround(HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$3_1 + 20 >> 2]) * Math_fround(.5));
  $6_1 = Math_fround($6_1 + $6_1);
  $6_1 = Math_fround($6_1 * $6_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($4_1 + $6_1);
  $7_1 = $4_1;
  $4_1 = Math_fround(Math_fround(HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$3_1 + 24 >> 2]) * Math_fround(.5));
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($7_1 + $4_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($6_1 + $4_1);
  global$0 = $3_1 + 96 | 0;
 }
 
 function $506($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  if (HEAP32[$0 + 20 >> 2] >= 1) {
   $14 = $3_1 + 96 | 0;
   $11 = $3_1 - -64 | 0;
   $12_1 = $3_1 + 48 | 0;
   $13_1 = $3_1 + 32 | 0;
   while (1) {
    $2_1 = HEAP32[$0 + 28 >> 2] + $10 | 0;
    $9_1 = $2_1 + 8 | 0;
    $7_1 = HEAP32[$9_1 + 4 >> 2];
    $4_1 = $3_1 + 24 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    $6_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$3_1 + 20 >> 2] = $6_1;
    $7_1 = $2_1 + 24 | 0;
    $5_1 = HEAP32[$7_1 + 4 >> 2];
    $6_1 = $13_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $5_1;
    $9_1 = $2_1 + 16 | 0;
    $7_1 = HEAP32[$9_1 + 4 >> 2];
    HEAP32[$13_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $7_1;
    $5_1 = $2_1 + 40 | 0;
    $8_1 = HEAP32[$5_1 + 4 >> 2];
    $9_1 = $12_1 + 8 | 0;
    $7_1 = $9_1;
    HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $8_1;
    $7_1 = $2_1 + 32 | 0;
    $5_1 = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $5_1;
    $8_1 = $2_1 + 56 | 0;
    $16_1 = HEAP32[$8_1 + 4 >> 2];
    $7_1 = $11 + 8 | 0;
    $5_1 = $7_1;
    HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $16_1;
    $5_1 = $2_1 + 48 | 0;
    $8_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$11 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$11 + 4 >> 2] = $8_1;
    $5_1 = $3_1 + 8 | 0;
    $2_1 = HEAP32[$2_1 - -64 >> 2];
    $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1) | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$2_1 + 8 >> 2];
    $8_1 = HEAP32[$2_1 + 4 >> 2];
    $2_1 = HEAP32[$2_1 >> 2];
    HEAPF32[$5_1 >> 2] = Math_fround(HEAPF32[$5_1 >> 2] * HEAPF32[$1_1 + 8 >> 2]) / HEAPF32[$0 + 88 >> 2];
    HEAP32[$3_1 >> 2] = $2_1;
    HEAP32[$3_1 + 4 >> 2] = $8_1;
    HEAP32[$3_1 + 12 >> 2] = 0;
    HEAPF32[$3_1 >> 2] = Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$1_1 >> 2]) / HEAPF32[$0 + 80 >> 2];
    HEAPF32[$3_1 + 4 >> 2] = Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$1_1 + 4 >> 2]) / HEAPF32[$0 + 84 >> 2];
    $2_1 = HEAP32[(HEAP32[$0 + 28 >> 2] + $10 | 0) - -64 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 24 >> 2]]($2_1, $3_1);
    HEAP32[$3_1 + 76 >> 2] = 0;
    HEAPF32[$3_1 + 72 >> 2] = Math_fround(HEAPF32[$3_1 + 72 >> 2] * HEAPF32[$1_1 + 8 >> 2]) / HEAPF32[$0 + 88 >> 2];
    HEAPF32[$3_1 + 68 >> 2] = Math_fround(HEAPF32[$3_1 + 68 >> 2] * HEAPF32[$1_1 + 4 >> 2]) / HEAPF32[$0 + 84 >> 2];
    HEAPF32[$3_1 + 64 >> 2] = Math_fround(HEAPF32[$3_1 + 64 >> 2] * HEAPF32[$1_1 >> 2]) / HEAPF32[$0 + 80 >> 2];
    $8_1 = HEAP32[$4_1 + 4 >> 2];
    $2_1 = HEAP32[$0 + 28 >> 2] + $10 | 0;
    $5_1 = $2_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $8_1;
    $4_1 = HEAP32[$3_1 + 20 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = $2_1 + 24 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $6_1 = HEAP32[$13_1 + 4 >> 2];
    $4_1 = $2_1 + 16 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $6_1 = HEAP32[$9_1 + 4 >> 2];
    $4_1 = $2_1 + 40 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $6_1 = HEAP32[$12_1 + 4 >> 2];
    $4_1 = $2_1 + 32 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $6_1 = HEAP32[$11 + 4 >> 2];
    $4_1 = $2_1 + 48 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$11 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $4_1 = HEAP32[$7_1 + 4 >> 2];
    $2_1 = $2_1 + 56 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    if (HEAP32[$0 + 68 >> 2]) {
     $2_1 = HEAP32[(HEAP32[$0 + 28 >> 2] + $10 | 0) - -64 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $3_1 + 16 | 0, $3_1 + 128 | 0, $3_1 + 112 | 0);
     $2_1 = HEAP32[$3_1 + 116 >> 2];
     HEAP32[$14 >> 2] = HEAP32[$3_1 + 112 >> 2];
     HEAP32[$14 + 4 >> 2] = $2_1;
     $4_1 = $3_1 + 136 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $2_1 = $3_1 + 88 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $6_1;
     $4_1 = $3_1 + 120 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $2_1 = $14 + 8 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $6_1;
     $2_1 = HEAP32[$3_1 + 132 >> 2];
     HEAP32[$3_1 + 80 >> 2] = HEAP32[$3_1 + 128 >> 2];
     HEAP32[$3_1 + 84 >> 2] = $2_1;
     $481(HEAP32[$0 + 68 >> 2], HEAP32[(HEAP32[$0 + 28 >> 2] + $10 | 0) + 76 >> 2], $3_1 + 80 | 0);
    }
    $10 = $10 + 80 | 0;
    $15_1 = $15_1 + 1 | 0;
    if (($15_1 | 0) < HEAP32[$0 + 20 >> 2]) {
     continue
    }
    break;
   };
  }
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 80 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 84 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $10 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $0 + 88 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $10;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
  global$0 = $3_1 + 144 | 0;
 }
 
 function $507($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $98($0, $1_1, $2_1);
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 + 20 >> 2] = HEAP32[$0 + 76 >> 2];
  $3_1 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1_1 + 16 >> 2] = $3_1;
  if ($3_1) {
   $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 76, $3_1) | 0;
   $3_1 = HEAP32[$6_1 + 8 >> 2];
   (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   if (HEAP32[$1_1 + 16 >> 2] > 0) {
    $5_1 = 72;
    $3_1 = $3_1 + 72 | 0;
    while (1) {
     $4_1 = HEAP32[$0 + 28 >> 2] + $5_1 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     (wasm2js_i32$0 = $3_1 + -8 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$4_1 + -8 >> 2]) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 24 >> 2]]($2_1, HEAP32[(HEAP32[$0 + 28 >> 2] + $5_1 | 0) + -8 >> 2])) {
      $4_1 = HEAP32[(HEAP32[$0 + 28 >> 2] + $5_1 | 0) + -8 >> 2];
      $4_1 = ((((wasm2js_i32$1 = $2_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 52 >> 2]]($4_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
      $7_1 = HEAP32[(HEAP32[$0 + 28 >> 2] + $5_1 | 0) + -8 >> 2];
      (((((wasm2js_i32$3 = $2_1, wasm2js_i32$2 = $4_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 56 >> 2]]($7_1, HEAP32[$4_1 + 8 >> 2], $2_1) | 0), wasm2js_i32$4 = 1346455635), wasm2js_i32$5 = HEAP32[(HEAP32[$0 + 28 >> 2] + $5_1 | 0) + -8 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
     }
     $4_1 = HEAP32[$0 + 28 >> 2] + $5_1 | 0;
     HEAP32[$3_1 + -72 >> 2] = HEAP32[$4_1 + -72 >> 2];
     HEAP32[$3_1 + -68 >> 2] = HEAP32[$4_1 + -68 >> 2];
     HEAP32[$3_1 + -64 >> 2] = HEAP32[$4_1 + -64 >> 2];
     HEAP32[$3_1 + -60 >> 2] = HEAP32[$4_1 + -60 >> 2];
     HEAP32[$3_1 + -56 >> 2] = HEAP32[$4_1 + -56 >> 2];
     HEAP32[$3_1 + -52 >> 2] = HEAP32[$4_1 + -52 >> 2];
     HEAP32[$3_1 + -48 >> 2] = HEAP32[$4_1 + -48 >> 2];
     HEAP32[$3_1 + -44 >> 2] = HEAP32[$4_1 + -44 >> 2];
     HEAP32[$3_1 + -40 >> 2] = HEAP32[$4_1 + -40 >> 2];
     HEAP32[$3_1 + -36 >> 2] = HEAP32[$4_1 + -36 >> 2];
     HEAP32[$3_1 + -32 >> 2] = HEAP32[$4_1 + -32 >> 2];
     HEAP32[$3_1 + -28 >> 2] = HEAP32[$4_1 + -28 >> 2];
     HEAP32[$3_1 + -24 >> 2] = HEAP32[$4_1 + -24 >> 2];
     HEAP32[$3_1 + -20 >> 2] = HEAP32[$4_1 + -20 >> 2];
     HEAP32[$3_1 + -16 >> 2] = HEAP32[$4_1 + -16 >> 2];
     HEAP32[$3_1 + -4 >> 2] = HEAP32[$4_1 + -4 >> 2];
     HEAP32[$3_1 + -12 >> 2] = HEAP32[$4_1 + -12 >> 2];
     $5_1 = $5_1 + 80 | 0;
     $3_1 = $3_1 + 76 | 0;
     $8_1 = $8_1 + 1 | 0;
     if (($8_1 | 0) < HEAP32[$1_1 + 16 >> 2]) {
      continue
     }
     break;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $6_1, 12304, 1497453121, HEAP32[$6_1 + 8 >> 2]);
  }
  return 12329;
 }
 
 function $508($0) {
  $0 = $0 | 0;
  return $0 + 80 | 0;
 }
 
 function $509($0) {
  $0 = $0 | 0;
  return 12380;
 }
 
 function $510($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 76 >> 2] = $1_1;
 }
 
 function $511($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 76 >> 2]);
 }
 
 function $512($0) {
  $0 = $0 | 0;
  return 24;
 }
 
 function $514($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = 0, $16_1 = 0.0, $17_1 = 0.0, $18_1 = 0.0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $15_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
  if (($15_1 | 0) >= 1) {
   $8_1 = HEAPF32[$0 + 12 >> 2];
   $9_1 = HEAPF32[$0 + 8 >> 2];
   $10 = HEAPF32[$0 + 4 >> 2];
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $2_1 + 76 | 0, $2_1 + 52 | 0, $2_1 - -64 | 0, $2_1 + 56 | 0, $2_1 + 72 | 0, $2_1 + 68 | 0, $2_1 + 48 | 0, $2_1 + 60 | 0, $14);
    $3_1 = HEAP32[$2_1 + 64 >> 2];
    label$3 : {
     if ($3_1 >>> 0 > 1) {
      break label$3
     }
     if ($3_1 - 1) {
      $3_1 = HEAP32[$2_1 + 60 >> 2] + -2 | 0;
      if ($3_1 >>> 0 > 3) {
       break label$3
      }
      label$6 : {
       switch ($3_1 - 1 | 0) {
       case 2:
        if (HEAP32[$2_1 + 48 >> 2] < 1) {
         break label$3
        }
        $3_1 = 0;
        while (1) {
         $7_1 = HEAP32[$2_1 + 76 >> 2];
         $6_1 = HEAP32[$2_1 + 56 >> 2];
         $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
         $4_1 = $7_1 + Math_imul($6_1, HEAPU8[$5_1 | 0]) | 0;
         $11 = HEAPF32[$4_1 >> 2];
         $12_1 = HEAPF32[$4_1 + 4 >> 2];
         $13_1 = HEAPF32[$4_1 + 8 >> 2];
         HEAP32[$2_1 + 12 >> 2] = 0;
         HEAPF32[$2_1 + 8 >> 2] = $8_1 * $13_1;
         HEAPF32[$2_1 + 4 >> 2] = $9_1 * $12_1;
         HEAPF32[$2_1 >> 2] = $10 * $11;
         $4_1 = $7_1 + Math_imul($6_1, HEAPU8[$5_1 + 1 | 0]) | 0;
         $11 = HEAPF32[$4_1 >> 2];
         $12_1 = HEAPF32[$4_1 + 4 >> 2];
         $13_1 = HEAPF32[$4_1 + 8 >> 2];
         HEAP32[$2_1 + 28 >> 2] = 0;
         HEAPF32[$2_1 + 24 >> 2] = $8_1 * $13_1;
         HEAPF32[$2_1 + 20 >> 2] = $9_1 * $12_1;
         HEAPF32[$2_1 + 16 >> 2] = $10 * $11;
         $5_1 = $7_1 + Math_imul($6_1, HEAPU8[$5_1 + 2 | 0]) | 0;
         $11 = HEAPF32[$5_1 >> 2];
         $12_1 = HEAPF32[$5_1 + 4 >> 2];
         $13_1 = HEAPF32[$5_1 + 8 >> 2];
         HEAP32[$2_1 + 44 >> 2] = 0;
         HEAPF32[$2_1 + 40 >> 2] = $8_1 * $13_1;
         HEAPF32[$2_1 + 36 >> 2] = $9_1 * $12_1;
         HEAPF32[$2_1 + 32 >> 2] = $10 * $11;
         FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14, $3_1);
         $3_1 = $3_1 + 1 | 0;
         if (($3_1 | 0) < HEAP32[$2_1 + 48 >> 2]) {
          continue
         }
         break;
        };
        break label$3;
       case 0:
        if (HEAP32[$2_1 + 48 >> 2] < 1) {
         break label$3
        }
        $3_1 = 0;
        while (1) {
         $7_1 = HEAP32[$2_1 + 76 >> 2];
         $6_1 = HEAP32[$2_1 + 56 >> 2];
         $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
         $4_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 >> 1]) | 0;
         $11 = HEAPF32[$4_1 >> 2];
         $12_1 = HEAPF32[$4_1 + 4 >> 2];
         $13_1 = HEAPF32[$4_1 + 8 >> 2];
         HEAP32[$2_1 + 12 >> 2] = 0;
         HEAPF32[$2_1 + 8 >> 2] = $8_1 * $13_1;
         HEAPF32[$2_1 + 4 >> 2] = $9_1 * $12_1;
         HEAPF32[$2_1 >> 2] = $10 * $11;
         $4_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 + 2 >> 1]) | 0;
         $11 = HEAPF32[$4_1 >> 2];
         $12_1 = HEAPF32[$4_1 + 4 >> 2];
         $13_1 = HEAPF32[$4_1 + 8 >> 2];
         HEAP32[$2_1 + 28 >> 2] = 0;
         HEAPF32[$2_1 + 24 >> 2] = $8_1 * $13_1;
         HEAPF32[$2_1 + 20 >> 2] = $9_1 * $12_1;
         HEAPF32[$2_1 + 16 >> 2] = $10 * $11;
         $5_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 + 4 >> 1]) | 0;
         $11 = HEAPF32[$5_1 + 8 >> 2];
         $12_1 = HEAPF32[$5_1 + 4 >> 2];
         $13_1 = HEAPF32[$5_1 >> 2];
         HEAP32[$2_1 + 44 >> 2] = 0;
         HEAPF32[$2_1 + 32 >> 2] = $10 * $13_1;
         HEAPF32[$2_1 + 36 >> 2] = $9_1 * $12_1;
         HEAPF32[$2_1 + 40 >> 2] = $8_1 * $11;
         FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14, $3_1);
         $3_1 = $3_1 + 1 | 0;
         if (($3_1 | 0) < HEAP32[$2_1 + 48 >> 2]) {
          continue
         }
         break;
        };
        break label$3;
       case 1:
        break label$3;
       default:
        break label$6;
       };
      }
      if (HEAP32[$2_1 + 48 >> 2] < 1) {
       break label$3
      }
      $3_1 = 0;
      while (1) {
       $7_1 = HEAP32[$2_1 + 76 >> 2];
       $6_1 = HEAP32[$2_1 + 56 >> 2];
       $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
       $4_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 >> 2]) | 0;
       $11 = HEAPF32[$4_1 >> 2];
       $12_1 = HEAPF32[$4_1 + 4 >> 2];
       $13_1 = HEAPF32[$4_1 + 8 >> 2];
       HEAP32[$2_1 + 12 >> 2] = 0;
       HEAPF32[$2_1 + 8 >> 2] = $8_1 * $13_1;
       HEAPF32[$2_1 + 4 >> 2] = $9_1 * $12_1;
       HEAPF32[$2_1 >> 2] = $10 * $11;
       $4_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 + 4 >> 2]) | 0;
       $11 = HEAPF32[$4_1 >> 2];
       $12_1 = HEAPF32[$4_1 + 4 >> 2];
       $13_1 = HEAPF32[$4_1 + 8 >> 2];
       HEAP32[$2_1 + 28 >> 2] = 0;
       HEAPF32[$2_1 + 24 >> 2] = $8_1 * $13_1;
       HEAPF32[$2_1 + 20 >> 2] = $9_1 * $12_1;
       HEAPF32[$2_1 + 16 >> 2] = $10 * $11;
       $5_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 + 8 >> 2]) | 0;
       $11 = HEAPF32[$5_1 + 8 >> 2];
       $12_1 = HEAPF32[$5_1 + 4 >> 2];
       $13_1 = HEAPF32[$5_1 >> 2];
       HEAP32[$2_1 + 44 >> 2] = 0;
       HEAPF32[$2_1 + 32 >> 2] = $10 * $13_1;
       HEAPF32[$2_1 + 36 >> 2] = $9_1 * $12_1;
       HEAPF32[$2_1 + 40 >> 2] = $8_1 * $11;
       FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14, $3_1);
       $3_1 = $3_1 + 1 | 0;
       if (($3_1 | 0) < HEAP32[$2_1 + 48 >> 2]) {
        continue
       }
       break;
      };
      break label$3;
     }
     $3_1 = HEAP32[$2_1 + 60 >> 2] + -2 | 0;
     if ($3_1 >>> 0 > 3) {
      break label$3
     }
     label$12 : {
      switch ($3_1 - 1 | 0) {
      case 2:
       if (HEAP32[$2_1 + 48 >> 2] < 1) {
        break label$3
       }
       $3_1 = 0;
       while (1) {
        $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
        $6_1 = HEAPU8[$5_1 | 0];
        HEAP32[$2_1 + 12 >> 2] = 0;
        $7_1 = HEAP32[$2_1 + 76 >> 2];
        $4_1 = $6_1;
        $6_1 = HEAP32[$2_1 + 56 >> 2];
        $4_1 = $7_1 + Math_imul($4_1, $6_1) | 0;
        HEAPF32[$2_1 + 8 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
        HEAPF32[$2_1 + 4 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
        HEAPF32[$2_1 >> 2] = $10 * Math_fround(HEAPF64[$4_1 >> 3]);
        $4_1 = HEAPU8[$5_1 + 1 | 0];
        HEAP32[$2_1 + 28 >> 2] = 0;
        $4_1 = $7_1 + Math_imul($4_1, $6_1) | 0;
        HEAPF32[$2_1 + 24 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
        HEAPF32[$2_1 + 20 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
        HEAPF32[$2_1 + 16 >> 2] = $10 * Math_fround(HEAPF64[$4_1 >> 3]);
        $5_1 = $7_1 + Math_imul($6_1, HEAPU8[$5_1 + 2 | 0]) | 0;
        $16_1 = HEAPF64[$5_1 >> 3];
        $17_1 = HEAPF64[$5_1 + 8 >> 3];
        $18_1 = HEAPF64[$5_1 + 16 >> 3];
        HEAP32[$2_1 + 44 >> 2] = 0;
        HEAPF32[$2_1 + 40 >> 2] = $8_1 * Math_fround($18_1);
        HEAPF32[$2_1 + 36 >> 2] = $9_1 * Math_fround($17_1);
        HEAPF32[$2_1 + 32 >> 2] = $10 * Math_fround($16_1);
        FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14, $3_1);
        $3_1 = $3_1 + 1 | 0;
        if (($3_1 | 0) < HEAP32[$2_1 + 48 >> 2]) {
         continue
        }
        break;
       };
       break label$3;
      case 0:
       if (HEAP32[$2_1 + 48 >> 2] < 1) {
        break label$3
       }
       $3_1 = 0;
       while (1) {
        HEAP32[$2_1 + 12 >> 2] = 0;
        HEAP32[$2_1 + 28 >> 2] = 0;
        $7_1 = HEAP32[$2_1 + 76 >> 2];
        $6_1 = HEAP32[$2_1 + 56 >> 2];
        $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
        $4_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 >> 1]) | 0;
        HEAPF32[$2_1 + 8 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
        HEAPF32[$2_1 + 4 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
        HEAPF32[$2_1 >> 2] = $10 * Math_fround(HEAPF64[$4_1 >> 3]);
        $4_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 + 2 >> 1]) | 0;
        HEAPF32[$2_1 + 24 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
        HEAPF32[$2_1 + 20 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
        HEAPF32[$2_1 + 16 >> 2] = $10 * Math_fround(HEAPF64[$4_1 >> 3]);
        HEAP32[$2_1 + 44 >> 2] = 0;
        $5_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 + 4 >> 1]) | 0;
        HEAPF32[$2_1 + 32 >> 2] = $10 * Math_fround(HEAPF64[$5_1 >> 3]);
        HEAPF32[$2_1 + 36 >> 2] = $9_1 * Math_fround(HEAPF64[$5_1 + 8 >> 3]);
        HEAPF32[$2_1 + 40 >> 2] = $8_1 * Math_fround(HEAPF64[$5_1 + 16 >> 3]);
        FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14, $3_1);
        $3_1 = $3_1 + 1 | 0;
        if (($3_1 | 0) < HEAP32[$2_1 + 48 >> 2]) {
         continue
        }
        break;
       };
       break label$3;
      case 1:
       break label$3;
      default:
       break label$12;
      };
     }
     if (HEAP32[$2_1 + 48 >> 2] < 1) {
      break label$3
     }
     $3_1 = 0;
     while (1) {
      HEAP32[$2_1 + 12 >> 2] = 0;
      HEAP32[$2_1 + 28 >> 2] = 0;
      $7_1 = HEAP32[$2_1 + 76 >> 2];
      $6_1 = HEAP32[$2_1 + 56 >> 2];
      $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
      $4_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 >> 2]) | 0;
      HEAPF32[$2_1 + 8 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
      HEAPF32[$2_1 + 4 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
      HEAPF32[$2_1 >> 2] = $10 * Math_fround(HEAPF64[$4_1 >> 3]);
      $4_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 + 4 >> 2]) | 0;
      HEAPF32[$2_1 + 24 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
      HEAPF32[$2_1 + 20 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
      HEAPF32[$2_1 + 16 >> 2] = $10 * Math_fround(HEAPF64[$4_1 >> 3]);
      HEAP32[$2_1 + 44 >> 2] = 0;
      $5_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 + 8 >> 2]) | 0;
      HEAPF32[$2_1 + 32 >> 2] = $10 * Math_fround(HEAPF64[$5_1 >> 3]);
      HEAPF32[$2_1 + 36 >> 2] = $9_1 * Math_fround(HEAPF64[$5_1 + 8 >> 3]);
      HEAPF32[$2_1 + 40 >> 2] = $8_1 * Math_fround(HEAPF64[$5_1 + 16 >> 3]);
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14, $3_1);
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) < HEAP32[$2_1 + 48 >> 2]) {
       continue
      }
      break;
     };
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $14);
    $14 = $14 + 1 | 0;
    if (($14 | 0) != ($15_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $2_1 + 80 | 0;
 }
 
 function $515($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 20 >> 2] = $3_1;
  if ($3_1) {
   $13_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 32, $3_1) | 0;
   $8_1 = HEAP32[$13_1 + 8 >> 2];
   (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $8_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $16_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
   if (($16_1 | 0) > 0) {
    while (1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $4_1 + 28 | 0, $4_1 + 4 | 0, $4_1 + 16 | 0, $4_1 + 8 | 0, $4_1 + 24 | 0, $4_1 + 20 | 0, $4_1, $4_1 + 12 | 0, $12_1);
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     $3_1 = $8_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = $8_1 + 16 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = HEAP32[$4_1 >> 2];
     HEAP32[$8_1 + 24 >> 2] = $3_1;
     HEAP32[$8_1 + 28 >> 2] = HEAP32[$4_1 + 4 >> 2];
     $5_1 = HEAP32[$4_1 + 12 >> 2] + -2 | 0;
     label$4 : {
      if ($5_1 >>> 0 > 3) {
       break label$4
      }
      label$5 : {
       switch ($5_1 - 1 | 0) {
       default:
        if (!$3_1) {
         break label$4
        }
        $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 4, Math_imul($3_1, 3)) | 0;
        $3_1 = HEAP32[$7_1 + 8 >> 2];
        (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
        if (HEAP32[$4_1 >> 2] >= 1) {
         $5_1 = 0;
         $9_1 = HEAP32[$4_1 + 24 >> 2];
         while (1) {
          $6_1 = $9_1 + Math_imul(HEAP32[$4_1 + 20 >> 2], $5_1) | 0;
          HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
          HEAP32[$3_1 + 4 >> 2] = HEAP32[$6_1 + 4 >> 2];
          HEAP32[$3_1 + 8 >> 2] = HEAP32[$6_1 + 8 >> 2];
          $3_1 = $3_1 + 12 | 0;
          $5_1 = $5_1 + 1 | 0;
          if (($5_1 | 0) < HEAP32[$4_1 >> 2]) {
           continue
          }
          break;
         };
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $7_1, 12389, 1497453121, HEAP32[$7_1 + 8 >> 2]);
        break label$4;
       case 0:
        if (!$3_1) {
         break label$4
        }
        $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 8, $3_1) | 0;
        $3_1 = HEAP32[$7_1 + 8 >> 2];
        (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
        if (HEAP32[$4_1 >> 2] >= 1) {
         $5_1 = 0;
         while (1) {
          $6_1 = HEAP32[$4_1 + 24 >> 2] + Math_imul(HEAP32[$4_1 + 20 >> 2], $5_1) | 0;
          HEAP16[$3_1 >> 1] = HEAPU16[$6_1 >> 1];
          HEAP16[$3_1 + 2 >> 1] = HEAPU16[$6_1 + 2 >> 1];
          $6_1 = HEAPU16[$6_1 + 4 >> 1];
          HEAP16[$3_1 + 6 >> 1] = 0;
          HEAP16[$3_1 + 4 >> 1] = $6_1;
          $3_1 = $3_1 + 8 | 0;
          $5_1 = $5_1 + 1 | 0;
          if (($5_1 | 0) < HEAP32[$4_1 >> 2]) {
           continue
          }
          break;
         };
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $7_1, 12404, 1497453121, HEAP32[$7_1 + 8 >> 2]);
        break label$4;
       case 1:
        break label$4;
       case 2:
        break label$5;
       };
      }
      if (!$3_1) {
       break label$4
      }
      $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 4, $3_1) | 0;
      $3_1 = HEAP32[$7_1 + 8 >> 2];
      (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
      if (HEAP32[$4_1 >> 2] >= 1) {
       $5_1 = 0;
       while (1) {
        $6_1 = HEAP32[$4_1 + 24 >> 2] + Math_imul(HEAP32[$4_1 + 20 >> 2], $5_1) | 0;
        HEAP8[$3_1 | 0] = HEAPU8[$6_1 | 0];
        HEAP8[$3_1 + 1 | 0] = HEAPU8[$6_1 + 1 | 0];
        HEAP8[$3_1 + 2 | 0] = HEAPU8[$6_1 + 2 | 0];
        HEAP8[$3_1 + 3 | 0] = 0;
        $3_1 = $3_1 + 4 | 0;
        $5_1 = $5_1 + 1 | 0;
        if (($5_1 | 0) < HEAP32[$4_1 >> 2]) {
         continue
        }
        break;
       };
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $7_1, 12431, 1497453121, HEAP32[$7_1 + 8 >> 2]);
     }
     $3_1 = HEAP32[$4_1 + 16 >> 2];
     label$14 : {
      if ($3_1 >>> 0 > 1) {
       break label$14
      }
      if ($3_1 - 1) {
       $3_1 = HEAP32[$4_1 + 4 >> 2];
       if (!$3_1) {
        break label$14
       }
       $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 16, $3_1) | 0;
       $3_1 = HEAP32[$6_1 + 8 >> 2];
       (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       $9_1 = HEAP32[$4_1 + 4 >> 2];
       if (($9_1 | 0) >= 1) {
        $7_1 = 0;
        $14 = HEAP32[$4_1 + 8 >> 2];
        $5_1 = HEAP32[$4_1 + 28 >> 2];
        while (1) {
         HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
         HEAP32[$3_1 + 4 >> 2] = HEAP32[$5_1 + 4 >> 2];
         HEAP32[$3_1 + 8 >> 2] = HEAP32[$5_1 + 8 >> 2];
         $5_1 = $5_1 + $14 | 0;
         $3_1 = $3_1 + 16 | 0;
         $7_1 = $7_1 + 1 | 0;
         if (($7_1 | 0) < ($9_1 | 0)) {
          continue
         }
         break;
        };
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $6_1, 12454, 1497453121, HEAP32[$6_1 + 8 >> 2]);
       break label$14;
      }
      $3_1 = HEAP32[$4_1 + 4 >> 2];
      if (!$3_1) {
       break label$14
      }
      $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 32, $3_1) | 0;
      $3_1 = HEAP32[$6_1 + 8 >> 2];
      (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
      $9_1 = HEAP32[$4_1 + 4 >> 2];
      if (($9_1 | 0) >= 1) {
       $7_1 = 0;
       $14 = HEAP32[$4_1 + 8 >> 2];
       $5_1 = HEAP32[$4_1 + 28 >> 2];
       while (1) {
        $10 = HEAP32[$5_1 + 4 >> 2];
        HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$3_1 + 4 >> 2] = $10;
        $11 = $5_1 + 8 | 0;
        $15_1 = HEAP32[$11 + 4 >> 2];
        $10 = $3_1 + 8 | 0;
        HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
        HEAP32[$10 + 4 >> 2] = $15_1;
        $11 = $5_1 + 16 | 0;
        $15_1 = HEAP32[$11 + 4 >> 2];
        $10 = $3_1 + 16 | 0;
        HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
        HEAP32[$10 + 4 >> 2] = $15_1;
        $5_1 = $5_1 + $14 | 0;
        $3_1 = $3_1 + 32 | 0;
        $7_1 = $7_1 + 1 | 0;
        if (($7_1 | 0) < ($9_1 | 0)) {
         continue
        }
        break;
       };
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $6_1, 12473, 1497453121, HEAP32[$6_1 + 8 >> 2]);
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $12_1);
     $8_1 = $8_1 + 32 | 0;
     $12_1 = $12_1 + 1 | 0;
     if (($12_1 | 0) != ($16_1 | 0)) {
      continue
     }
     break;
    }
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $13_1, 12493, 1497453121, HEAP32[$13_1 + 8 >> 2]);
  }
  HEAP32[$1_1 + 24 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$1_1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$1_1 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
  global$0 = $4_1 + 32 | 0;
  return 12508;
 }
 
 function $516($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 12580;
  $1_1 = HEAP32[$0 + 32 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 36 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 32 >> 2] = 0;
  }
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP8[$0 + 36 | 0] = 1;
  return $0 | 0;
 }
 
 function $517($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 12580;
  $1_1 = HEAP32[$0 + 32 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 36 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 32 >> 2] = 0;
  }
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP8[$0 + 36 | 0] = 1;
  $80($0);
 }
 
 function $518($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $0 = HEAP32[$0 + 32 >> 2] + ($9_1 << 5) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$0 + 20 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$8_1 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 
 function $520($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 48 >> 2] == 1 | 0;
 }
 
 function $521($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 52 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 56 >> 2] = $3_1;
  $1_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $0 + 60 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0 + 68 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 72 >> 2] = $1_1;
  $2_1 = $2_1 + 8 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0 + 76 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  HEAP32[$0 + 48 >> 2] = 1;
 }
 
 function $522($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = HEAP32[$0 + 56 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$0 + 52 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $3_1 = $0 + 60 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $1_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $3_1 = $0 + 76 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $2_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$0 + 72 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$0 + 68 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
 }
 
 function $523($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $525($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  HEAP32[$0 + 4 >> 2] = 1065353216;
  HEAP32[$0 + 8 >> 2] = 1065353216;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 >> 2] = 12692;
  HEAP8[$0 + 36 | 0] = 1;
  $1_1 = $0 + 12 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  $2_1 = $0 + 24 | 0;
  $1_1 = $2_1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0 + 100 | 0] = 1;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP8[$0 + 120 | 0] = 1;
  $1_1 = $0 + 88 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP8[$0 + 140 | 0] = 1;
  $1_1 = $0 + 108 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP8[$0 + 160 | 0] = 1;
  $1_1 = $0 + 128 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP8[$0 + 164 | 0] = 1;
  $1_1 = $0 + 148 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 156 >> 2] = 0;
  HEAP8[$0 + 165 | 0] = 1;
  $1_1 = $79(32);
  $5_1 = HEAP32[$2_1 >> 2];
  if (($5_1 | 0) >= 1) {
   while (1) {
    $6_1 = HEAP32[$0 + 32 >> 2] + $4_1 | 0;
    $3_1 = $6_1;
    $7_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $1_1 + $4_1 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $7_1;
    $3_1 = $3_1 + 24 | 0;
    $7_1 = HEAP32[$3_1 + 4 >> 2];
    $8_1 = $2_1 + 24 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $7_1;
    $3_1 = $6_1 + 16 | 0;
    $7_1 = HEAP32[$3_1 + 4 >> 2];
    $8_1 = $2_1 + 16 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $7_1;
    $6_1 = $6_1 + 8 | 0;
    $3_1 = HEAP32[$6_1 + 4 >> 2];
    $2_1 = $2_1 + 8 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $3_1;
    $4_1 = $4_1 + 32 | 0;
    $5_1 = $5_1 + -1 | 0;
    if ($5_1) {
     continue
    }
    break;
   }
  }
  $4_1 = HEAP32[$0 + 32 >> 2];
  if ($4_1) {
   if (HEAPU8[$0 + 36 | 0]) {
    $80($4_1)
   }
   HEAP32[$0 + 32 >> 2] = 0;
  }
  HEAP32[$0 + 32 >> 2] = $1_1;
  HEAP8[$0 + 36 | 0] = 1;
  HEAP32[$0 + 28 >> 2] = 1;
  $1_1 = (HEAP32[$0 + 24 >> 2] << 5) + $1_1 | 0;
  HEAP32[$1_1 + 24 >> 2] = 2;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP32[$1_1 + 20 >> 2] = 16;
  HEAP32[$1_1 + 8 >> 2] = 12;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
  $1_1 = HEAP32[$0 + 32 >> 2];
  HEAP32[$1_1 + 4 >> 2] = 0;
  $4_1 = HEAPU8[$0 + 164 | 0];
  HEAP32[$1_1 + 24 >> 2] = $4_1 ? 2 : 3;
  $5_1 = HEAP32[($4_1 ? 128 : 148) + $0 >> 2];
  $2_1 = 12;
  HEAP32[$1_1 + 8 >> 2] = $4_1 ? 12 : 6;
  HEAP32[$1_1 >> 2] = ($5_1 | 0) / 3;
  label$5 : {
   if (HEAPU8[$0 + 165 | 0]) {
    $2_1 = 16;
    $0 = HEAP32[$0 + 88 >> 2];
    break label$5;
   }
   $0 = HEAP32[$0 + 108 >> 2] / 3 | 0;
  }
  HEAP32[$1_1 + 20 >> 2] = $2_1;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = $0;
 }
 
 function $526($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  if (HEAPU8[$0 + 164 | 0]) {
   $2_1 = HEAP32[$0 + 128 >> 2];
   label$2 : {
    if (($2_1 | 0) != HEAP32[$0 + 132 >> 2]) {
     break label$2
    }
    $5_1 = $2_1 ? $2_1 << 1 : 1;
    if (($2_1 | 0) >= ($5_1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$5_1) {
      break label$3
     }
     $3_1 = $79($5_1 << 2);
     $2_1 = HEAP32[$0 + 128 >> 2];
    }
    $7_1 = HEAP32[$0 + 136 >> 2];
    label$5 : {
     label$6 : {
      if (($2_1 | 0) >= 1) {
       $4_1 = $3_1;
       $6_1 = $7_1;
       while (1) {
        HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
        $4_1 = $4_1 + 4 | 0;
        $6_1 = $6_1 + 4 | 0;
        $2_1 = $2_1 + -1 | 0;
        if ($2_1) {
         continue
        }
        break;
       };
       break label$6;
      }
      if (!$7_1) {
       break label$5
      }
     }
     if (HEAPU8[$0 + 140 | 0]) {
      $80($7_1)
     }
     HEAP32[$0 + 136 >> 2] = 0;
     $2_1 = HEAP32[$0 + 128 >> 2];
    }
    HEAP32[$0 + 136 >> 2] = $3_1;
    HEAP32[$0 + 132 >> 2] = $5_1;
    HEAP8[$0 + 140 | 0] = 1;
   }
   $4_1 = HEAP32[$0 + 136 >> 2];
   HEAP32[$4_1 + ($2_1 << 2) >> 2] = $1_1;
   HEAP32[HEAP32[$0 + 32 >> 2] + 4 >> 2] = $4_1;
   HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 128 >> 2] + 1;
   return;
  }
  $3_1 = HEAP32[$0 + 148 >> 2];
  label$10 : {
   if (($3_1 | 0) != HEAP32[$0 + 152 >> 2]) {
    break label$10
   }
   $8_1 = $3_1 ? $3_1 << 1 : 1;
   if (($3_1 | 0) >= ($8_1 | 0)) {
    break label$10
   }
   label$11 : {
    if (!$8_1) {
     break label$11
    }
    $7_1 = $79($8_1 << 1);
    $3_1 = HEAP32[$0 + 148 >> 2];
   }
   $5_1 = HEAP32[$0 + 156 >> 2];
   label$13 : {
    label$14 : {
     if (($3_1 | 0) >= 1) {
      $4_1 = $7_1;
      $6_1 = $5_1;
      $2_1 = $3_1;
      while (1) {
       HEAP16[$4_1 >> 1] = HEAPU16[$6_1 >> 1];
       $4_1 = $4_1 + 2 | 0;
       $6_1 = $6_1 + 2 | 0;
       $2_1 = $2_1 + -1 | 0;
       if ($2_1) {
        continue
       }
       break;
      };
      break label$14;
     }
     if (!$5_1) {
      break label$13
     }
    }
    if (HEAPU8[$0 + 160 | 0]) {
     $80($5_1);
     $3_1 = HEAP32[$0 + 148 >> 2];
    }
    HEAP32[$0 + 156 >> 2] = 0;
   }
   HEAP32[$0 + 156 >> 2] = $7_1;
   HEAP32[$0 + 152 >> 2] = $8_1;
   HEAP8[$0 + 160 | 0] = 1;
  }
  HEAP32[$0 + 148 >> 2] = $3_1 + 1;
  $4_1 = HEAP32[$0 + 32 >> 2];
  $0 = HEAP32[$0 + 156 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $0;
  HEAP16[$0 + ($3_1 << 1) >> 1] = $1_1;
 }
 
 function $527($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0);
  label$1 : {
   if (HEAPU8[$0 + 165 | 0]) {
    $5_1 = HEAP32[$0 + 88 >> 2];
    if (!(!$2_1 | ($5_1 | 0) < 1)) {
     $2_1 = HEAP32[$0 + 96 >> 2];
     $11 = HEAPF32[$0 + 168 >> 2];
     $12_1 = HEAPF32[$1_1 + 8 >> 2];
     $13_1 = HEAPF32[$1_1 + 4 >> 2];
     $14 = HEAPF32[$1_1 >> 2];
     while (1) {
      $9_1 = Math_fround(HEAPF32[$2_1 >> 2] - $14);
      $10 = Math_fround($9_1 * $9_1);
      $9_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] - $13_1);
      $10 = Math_fround($10 + Math_fround($9_1 * $9_1));
      $9_1 = Math_fround(HEAPF32[$2_1 + 8 >> 2] - $12_1);
      if (Math_fround($10 + Math_fround($9_1 * $9_1)) <= $11) {
       break label$1
      }
      $2_1 = $2_1 + 16 | 0;
      $6_1 = $6_1 + 1 | 0;
      if (($6_1 | 0) < ($5_1 | 0)) {
       continue
      }
      break;
     };
    }
    $2_1 = HEAP32[$0 + 32 >> 2];
    HEAP32[$2_1 + 12 >> 2] = HEAP32[$2_1 + 12 >> 2] + 1;
    label$5 : {
     if (HEAP32[$0 + 92 >> 2] != ($5_1 | 0)) {
      break label$5
     }
     $6_1 = $5_1 ? $5_1 << 1 : 1;
     if (($5_1 | 0) >= ($6_1 | 0)) {
      break label$5
     }
     label$6 : {
      if (!$6_1) {
       break label$6
      }
      $3_1 = $79($6_1 << 4);
      $5_1 = HEAP32[$0 + 88 >> 2];
     }
     if (($5_1 | 0) >= 1) {
      $2_1 = 0;
      while (1) {
       $4_1 = HEAP32[$0 + 96 >> 2] + $2_1 | 0;
       $8_1 = HEAP32[$4_1 + 4 >> 2];
       $7_1 = $2_1 + $3_1 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $8_1;
       $4_1 = $4_1 + 8 | 0;
       $8_1 = HEAP32[$4_1 + 4 >> 2];
       $7_1 = $7_1 + 8 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $8_1;
       $2_1 = $2_1 + 16 | 0;
       $5_1 = $5_1 + -1 | 0;
       if ($5_1) {
        continue
       }
       break;
      };
     }
     $2_1 = HEAP32[$0 + 96 >> 2];
     if ($2_1) {
      if (HEAPU8[$0 + 100 | 0]) {
       $80($2_1)
      }
      HEAP32[$0 + 96 >> 2] = 0;
     }
     HEAP32[$0 + 96 >> 2] = $3_1;
     HEAP32[$0 + 92 >> 2] = $6_1;
     HEAP8[$0 + 100 | 0] = 1;
     $5_1 = HEAP32[$0 + 88 >> 2];
    }
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $8_1 = $0 + 96 | 0;
    $3_1 = HEAP32[$8_1 >> 2] + ($5_1 << 4) | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $2_1;
    $2_1 = $1_1 + 8 | 0;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    $3_1 = $3_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $1_1;
    HEAP32[HEAP32[$0 + 32 >> 2] + 16 >> 2] = HEAP32[$8_1 >> 2];
    $1_1 = $0;
    $0 = HEAP32[$0 + 88 >> 2];
    HEAP32[$1_1 + 88 >> 2] = $0 + 1;
    return $0;
   }
   $4_1 = HEAP32[$0 + 108 >> 2];
   if (!(!$2_1 | ($4_1 | 0) < 1)) {
    $2_1 = HEAP32[$0 + 116 >> 2];
    $11 = HEAPF32[$0 + 168 >> 2];
    $12_1 = HEAPF32[$1_1 + 8 >> 2];
    $13_1 = HEAPF32[$1_1 + 4 >> 2];
    $14 = HEAPF32[$1_1 >> 2];
    while (1) {
     $9_1 = Math_fround(HEAPF32[$2_1 >> 2] - $14);
     $10 = Math_fround($9_1 * $9_1);
     $9_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] - $13_1);
     $10 = Math_fround($10 + Math_fround($9_1 * $9_1));
     $9_1 = Math_fround(HEAPF32[$2_1 + 8 >> 2] - $12_1);
     if (!!(Math_fround($10 + Math_fround($9_1 * $9_1)) <= $11)) {
      break label$1
     }
     $2_1 = $2_1 + 12 | 0;
     $6_1 = $6_1 + 1 | 0;
     $5_1 = $5_1 + 3 | 0;
     if (($5_1 | 0) < ($4_1 | 0)) {
      continue
     }
     break;
    };
   }
   $3_1 = HEAP32[$0 + 112 >> 2];
   label$14 : {
    if (($4_1 | 0) != ($3_1 | 0)) {
     break label$14
    }
    $3_1 = $4_1 ? $4_1 << 1 : 1;
    if (($4_1 | 0) >= ($3_1 | 0)) {
     $3_1 = $4_1;
     break label$14;
    }
    label$16 : {
     if (!$3_1) {
      break label$16
     }
     $8_1 = $79($3_1 << 2);
     $4_1 = HEAP32[$0 + 108 >> 2];
    }
    $7_1 = HEAP32[$0 + 116 >> 2];
    label$18 : {
     label$19 : {
      if (($4_1 | 0) >= 1) {
       $2_1 = $8_1;
       $6_1 = $7_1;
       $5_1 = $4_1;
       while (1) {
        HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
        $2_1 = $2_1 + 4 | 0;
        $6_1 = $6_1 + 4 | 0;
        $5_1 = $5_1 + -1 | 0;
        if ($5_1) {
         continue
        }
        break;
       };
       break label$19;
      }
      if (!$7_1) {
       break label$18
      }
     }
     if (HEAPU8[$0 + 120 | 0]) {
      $80($7_1);
      $4_1 = HEAP32[$0 + 108 >> 2];
     }
     HEAP32[$0 + 116 >> 2] = 0;
    }
    HEAP32[$0 + 116 >> 2] = $8_1;
    HEAP32[$0 + 112 >> 2] = $3_1;
    HEAP8[$0 + 120 | 0] = 1;
   }
   $2_1 = $4_1 + 1 | 0;
   HEAP32[$0 + 108 >> 2] = $2_1;
   $7_1 = HEAP32[$0 + 116 >> 2];
   HEAP32[$7_1 + ($4_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
   label$23 : {
    if (($2_1 | 0) != ($3_1 | 0)) {
     $8_1 = $7_1;
     $4_1 = $3_1;
     $3_1 = $2_1;
     break label$23;
    }
    $4_1 = $3_1 ? $3_1 << 1 : 1;
    if (($3_1 | 0) >= ($4_1 | 0)) {
     $8_1 = $7_1;
     $4_1 = $3_1;
     break label$23;
    }
    label$26 : {
     if (!$4_1) {
      $8_1 = 0;
      break label$26;
     }
     $8_1 = $79($4_1 << 2);
     $7_1 = HEAP32[$0 + 116 >> 2];
     $3_1 = HEAP32[$0 + 108 >> 2];
    }
    label$28 : {
     label$29 : {
      if (($3_1 | 0) >= 1) {
       $2_1 = $8_1;
       $6_1 = $7_1;
       $5_1 = $3_1;
       while (1) {
        HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
        $2_1 = $2_1 + 4 | 0;
        $6_1 = $6_1 + 4 | 0;
        $5_1 = $5_1 + -1 | 0;
        if ($5_1) {
         continue
        }
        break;
       };
       break label$29;
      }
      if (!$7_1) {
       break label$28
      }
     }
     if (HEAPU8[$0 + 120 | 0]) {
      $80($7_1);
      $3_1 = HEAP32[$0 + 108 >> 2];
     }
     HEAP32[$0 + 116 >> 2] = 0;
    }
    HEAP32[$0 + 116 >> 2] = $8_1;
    HEAP32[$0 + 112 >> 2] = $4_1;
    HEAP8[$0 + 120 | 0] = 1;
   }
   $2_1 = $3_1 + 1 | 0;
   HEAP32[$0 + 108 >> 2] = $2_1;
   HEAP32[($3_1 << 2) + $8_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
   label$33 : {
    if (($2_1 | 0) != ($4_1 | 0)) {
     $3_1 = $8_1;
     $4_1 = $2_1;
     break label$33;
    }
    $7_1 = $4_1 ? $4_1 << 1 : 1;
    if (($4_1 | 0) >= ($7_1 | 0)) {
     $3_1 = $8_1;
     break label$33;
    }
    label$36 : {
     if (!$7_1) {
      $3_1 = 0;
      break label$36;
     }
     $3_1 = $79($7_1 << 2);
     $8_1 = HEAP32[$0 + 116 >> 2];
     $4_1 = HEAP32[$0 + 108 >> 2];
    }
    label$38 : {
     label$39 : {
      if (($4_1 | 0) >= 1) {
       $2_1 = $3_1;
       $6_1 = $8_1;
       $5_1 = $4_1;
       while (1) {
        HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
        $2_1 = $2_1 + 4 | 0;
        $6_1 = $6_1 + 4 | 0;
        $5_1 = $5_1 + -1 | 0;
        if ($5_1) {
         continue
        }
        break;
       };
       break label$39;
      }
      if (!$8_1) {
       break label$38
      }
     }
     if (HEAPU8[$0 + 120 | 0]) {
      $80($8_1);
      $4_1 = HEAP32[$0 + 108 >> 2];
     }
     HEAP32[$0 + 116 >> 2] = 0;
    }
    HEAP32[$0 + 116 >> 2] = $3_1;
    HEAP32[$0 + 112 >> 2] = $7_1;
    HEAP8[$0 + 120 | 0] = 1;
   }
   $2_1 = $4_1 + 1 | 0;
   HEAP32[$0 + 108 >> 2] = $2_1;
   HEAP32[($4_1 << 2) + $3_1 >> 2] = HEAP32[$1_1 + 8 >> 2];
   $0 = HEAP32[$0 + 32 >> 2];
   HEAP32[$0 + 16 >> 2] = $3_1;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   $6_1 = (($2_1 | 0) / 3 | 0) + -1 | 0;
  }
  return $6_1;
 }
 
 function $528($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = HEAP32[$0 + 32 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 1;
  $526($0, $527($0, $1_1, $4_1));
  $526($0, $527($0, $2_1, $4_1));
  $526($0, $527($0, $3_1, $4_1));
 }
 
 function $529($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (HEAPU8[$0 + 165 | 0]) {
    if (HEAP32[$0 + 92 >> 2] >= ($1_1 | 0)) {
     break label$1
    }
    if ($1_1) {
     $2_1 = $79($1_1 << 4)
    } else {
     $2_1 = 0
    }
    $7_1 = $2_1;
    $5_1 = HEAP32[$0 + 88 >> 2];
    if (($5_1 | 0) >= 1) {
     while (1) {
      $2_1 = HEAP32[$0 + 96 >> 2] + $6_1 | 0;
      $4_1 = HEAP32[$2_1 + 4 >> 2];
      $3_1 = $6_1 + $7_1 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $4_1;
      $2_1 = $2_1 + 8 | 0;
      $4_1 = HEAP32[$2_1 + 4 >> 2];
      $3_1 = $3_1 + 8 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $4_1;
      $6_1 = $6_1 + 16 | 0;
      $5_1 = $5_1 + -1 | 0;
      if ($5_1) {
       continue
      }
      break;
     }
    }
    $4_1 = HEAP32[$0 + 96 >> 2];
    if ($4_1) {
     if (HEAPU8[$0 + 100 | 0]) {
      $80($4_1)
     }
     HEAP32[$0 + 96 >> 2] = 0;
    }
    HEAP32[$0 + 96 >> 2] = $7_1;
    HEAP32[$0 + 92 >> 2] = $1_1;
    HEAP8[$0 + 100 | 0] = 1;
    return;
   }
   if (HEAP32[$0 + 112 >> 2] >= ($1_1 | 0)) {
    break label$1
   }
   if ($1_1) {
    $2_1 = $79($1_1 << 2)
   } else {
    $2_1 = 0
   }
   $4_1 = HEAP32[$0 + 116 >> 2];
   $3_1 = HEAP32[$0 + 108 >> 2];
   label$11 : {
    label$12 : {
     if (($3_1 | 0) >= 1) {
      $6_1 = $2_1;
      $5_1 = $4_1;
      while (1) {
       HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
       $6_1 = $6_1 + 4 | 0;
       $5_1 = $5_1 + 4 | 0;
       $3_1 = $3_1 + -1 | 0;
       if ($3_1) {
        continue
       }
       break;
      };
      break label$12;
     }
     if (!$4_1) {
      break label$11
     }
    }
    if (HEAPU8[$0 + 120 | 0]) {
     $80($4_1)
    }
    HEAP32[$0 + 116 >> 2] = 0;
   }
   HEAP32[$0 + 116 >> 2] = $2_1;
   HEAP32[$0 + 112 >> 2] = $1_1;
   HEAP8[$0 + 120 | 0] = 1;
  }
 }
 
 function $530($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (HEAPU8[$0 + 164 | 0]) {
    if (HEAP32[$0 + 132 >> 2] >= ($1_1 | 0)) {
     break label$1
    }
    if ($1_1) {
     $3_1 = $79($1_1 << 2)
    } else {
     $3_1 = 0
    }
    $4_1 = HEAP32[$0 + 136 >> 2];
    $2_1 = HEAP32[$0 + 128 >> 2];
    label$5 : {
     label$6 : {
      if (($2_1 | 0) >= 1) {
       $5_1 = $3_1;
       $6_1 = $4_1;
       while (1) {
        HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
        $5_1 = $5_1 + 4 | 0;
        $6_1 = $6_1 + 4 | 0;
        $2_1 = $2_1 + -1 | 0;
        if ($2_1) {
         continue
        }
        break;
       };
       break label$6;
      }
      if (!$4_1) {
       break label$5
      }
     }
     if (HEAPU8[$0 + 140 | 0]) {
      $80($4_1)
     }
     HEAP32[$0 + 136 >> 2] = 0;
    }
    HEAP32[$0 + 136 >> 2] = $3_1;
    HEAP32[$0 + 132 >> 2] = $1_1;
    HEAP8[$0 + 140 | 0] = 1;
    return;
   }
   if (HEAP32[$0 + 152 >> 2] >= ($1_1 | 0)) {
    break label$1
   }
   if ($1_1) {
    $3_1 = $79($1_1 << 1)
   } else {
    $3_1 = 0
   }
   $4_1 = HEAP32[$0 + 156 >> 2];
   $2_1 = HEAP32[$0 + 148 >> 2];
   label$12 : {
    label$13 : {
     if (($2_1 | 0) >= 1) {
      $5_1 = $3_1;
      $6_1 = $4_1;
      while (1) {
       HEAP16[$5_1 >> 1] = HEAPU16[$6_1 >> 1];
       $5_1 = $5_1 + 2 | 0;
       $6_1 = $6_1 + 2 | 0;
       $2_1 = $2_1 + -1 | 0;
       if ($2_1) {
        continue
       }
       break;
      };
      break label$13;
     }
     if (!$4_1) {
      break label$12
     }
    }
    if (HEAPU8[$0 + 160 | 0]) {
     $80($4_1)
    }
    HEAP32[$0 + 156 >> 2] = 0;
   }
   HEAP32[$0 + 156 >> 2] = $3_1;
   HEAP32[$0 + 152 >> 2] = $1_1;
   HEAP8[$0 + 160 | 0] = 1;
  }
 }
 
 function $531($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 12692;
  $1_1 = HEAP32[$0 + 156 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 160 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 156 >> 2] = 0;
  }
  HEAP32[$0 + 156 >> 2] = 0;
  HEAP32[$0 + 148 >> 2] = 0;
  HEAP32[$0 + 152 >> 2] = 0;
  HEAP8[$0 + 160 | 0] = 1;
  $1_1 = HEAP32[$0 + 136 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 140 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 136 >> 2] = 0;
  }
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP8[$0 + 140 | 0] = 1;
  $1_1 = HEAP32[$0 + 116 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 120 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 116 >> 2] = 0;
  }
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP32[$0 + 108 >> 2] = 0;
  HEAP32[$0 + 112 >> 2] = 0;
  HEAP8[$0 + 120 | 0] = 1;
  $1_1 = HEAP32[$0 + 96 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 100 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 96 >> 2] = 0;
  }
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP8[$0 + 100 | 0] = 1;
  $516($0);
  return $0 | 0;
 }
 
 function $532($0) {
  $0 = $0 | 0;
  $80($531($0));
 }
 
 function $535($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 24 >> 2];
 }
 
 function $536($0) {
  $0 = $0 | 0;
  return 28;
 }
 
 function $537($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = 0, $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0);
  $6_1 = global$0 - 544 | 0;
  global$0 = $6_1;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$5_1 + 32 >> 2] = 0;
  $18_1 = $5_1 + 24 | 0;
  HEAP32[$18_1 >> 2] = 0;
  HEAP32[$18_1 + 4 >> 2] = 0;
  $18_1 = $5_1 + 16 | 0;
  HEAP32[$18_1 >> 2] = 0;
  HEAP32[$18_1 + 4 >> 2] = 0;
  $18_1 = $5_1 + 8 | 0;
  HEAP32[$18_1 >> 2] = 0;
  HEAP32[$18_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 388 >> 2] = $2_1;
  HEAP32[$6_1 + 384 >> 2] = $0;
  $8_1 = HEAPF32[$3_1 + 20 >> 2];
  $9_1 = HEAPF32[$3_1 + 36 >> 2];
  $0 = $1_1 + 20 | 0;
  $10 = HEAPF32[$0 >> 2];
  $2_1 = $1_1 + 36 | 0;
  $11 = HEAPF32[$2_1 >> 2];
  $18_1 = $1_1 + 24 | 0;
  $14 = HEAPF32[$18_1 >> 2];
  $7_1 = HEAPF32[$3_1 + 24 >> 2];
  $29_1 = $1_1 + 40 | 0;
  $12_1 = HEAPF32[$29_1 >> 2];
  $13_1 = HEAPF32[$3_1 + 40 >> 2];
  $15_1 = HEAPF32[$3_1 + 32 >> 2];
  $16_1 = HEAPF32[$3_1 >> 2];
  $19_1 = HEAPF32[$3_1 + 16 >> 2];
  $20 = HEAPF32[$3_1 + 4 >> 2];
  $21 = HEAPF32[$1_1 + 32 >> 2];
  $23_1 = HEAPF32[$1_1 >> 2];
  $24_1 = HEAPF32[$1_1 + 16 >> 2];
  $25 = HEAPF32[$1_1 + 4 >> 2];
  $26_1 = HEAPF32[$1_1 + 8 >> 2];
  $22_1 = HEAPF32[$3_1 + 8 >> 2];
  HEAP32[$6_1 + 436 >> 2] = 0;
  HEAP32[$6_1 + 420 >> 2] = 0;
  HEAP32[$6_1 + 404 >> 2] = 0;
  $27_1 = Math_fround(Math_fround(Math_fround($26_1 * $22_1) + Math_fround($14 * $7_1)) + Math_fround($12_1 * $13_1));
  HEAPF32[$6_1 + 432 >> 2] = $27_1;
  $28_1 = Math_fround(Math_fround(Math_fround($25 * $22_1) + Math_fround($10 * $7_1)) + Math_fround($11 * $13_1));
  HEAPF32[$6_1 + 428 >> 2] = $28_1;
  $7_1 = Math_fround(Math_fround(Math_fround($23_1 * $22_1) + Math_fround($24_1 * $7_1)) + Math_fround($21 * $13_1));
  HEAPF32[$6_1 + 424 >> 2] = $7_1;
  $13_1 = Math_fround(Math_fround(Math_fround($26_1 * $20) + Math_fround($14 * $8_1)) + Math_fround($12_1 * $9_1));
  HEAPF32[$6_1 + 416 >> 2] = $13_1;
  $22_1 = Math_fround(Math_fround(Math_fround($25 * $20) + Math_fround($10 * $8_1)) + Math_fround($11 * $9_1));
  HEAPF32[$6_1 + 412 >> 2] = $22_1;
  $8_1 = Math_fround(Math_fround(Math_fround($23_1 * $20) + Math_fround($24_1 * $8_1)) + Math_fround($21 * $9_1));
  HEAPF32[$6_1 + 408 >> 2] = $8_1;
  $9_1 = Math_fround(Math_fround(Math_fround($16_1 * $26_1) + Math_fround($19_1 * $14)) + Math_fround($15_1 * $12_1));
  HEAPF32[$6_1 + 400 >> 2] = $9_1;
  $10 = Math_fround(Math_fround(Math_fround($16_1 * $25) + Math_fround($19_1 * $10)) + Math_fround($15_1 * $11));
  HEAPF32[$6_1 + 396 >> 2] = $10;
  $11 = Math_fround(Math_fround(Math_fround($16_1 * $23_1) + Math_fround($19_1 * $24_1)) + Math_fround($15_1 * $21));
  HEAPF32[$6_1 + 392 >> 2] = $11;
  $14 = HEAPF32[$0 >> 2];
  $12_1 = HEAPF32[$2_1 >> 2];
  $15_1 = HEAPF32[$18_1 >> 2];
  $16_1 = HEAPF32[$3_1 + 52 >> 2];
  $19_1 = HEAPF32[$1_1 + 52 >> 2];
  $20 = HEAPF32[$29_1 >> 2];
  $21 = HEAPF32[$3_1 + 56 >> 2];
  $23_1 = HEAPF32[$1_1 + 56 >> 2];
  $24_1 = HEAPF32[$1_1 >> 2];
  $25 = HEAPF32[$1_1 + 16 >> 2];
  $26_1 = HEAPF32[$1_1 + 32 >> 2];
  $30 = HEAPF32[$1_1 + 4 >> 2];
  $31_1 = HEAPF32[$1_1 + 8 >> 2];
  $32 = HEAPF32[$3_1 + 48 >> 2];
  $33_1 = HEAPF32[$1_1 + 48 >> 2];
  HEAP32[$6_1 + 508 >> 2] = 0;
  HEAP32[$6_1 + 500 >> 2] = 0;
  HEAP32[$6_1 + 484 >> 2] = 0;
  HEAPF32[$6_1 + 480 >> 2] = $27_1;
  HEAPF32[$6_1 + 476 >> 2] = $13_1;
  HEAPF32[$6_1 + 472 >> 2] = $9_1;
  HEAP32[$6_1 + 468 >> 2] = 0;
  HEAPF32[$6_1 + 464 >> 2] = $28_1;
  HEAPF32[$6_1 + 460 >> 2] = $22_1;
  HEAPF32[$6_1 + 456 >> 2] = $10;
  HEAP32[$6_1 + 452 >> 2] = 0;
  HEAPF32[$6_1 + 448 >> 2] = $7_1;
  HEAPF32[$6_1 + 444 >> 2] = $8_1;
  $8_1 = Math_fround($32 - $33_1);
  $9_1 = Math_fround($16_1 - $19_1);
  $10 = Math_fround($21 - $23_1);
  HEAPF32[$6_1 + 496 >> 2] = Math_fround(Math_fround($31_1 * $8_1) + Math_fround($15_1 * $9_1)) + Math_fround($20 * $10);
  HEAPF32[$6_1 + 492 >> 2] = Math_fround(Math_fround($8_1 * $30) + Math_fround($9_1 * $14)) + Math_fround($10 * $12_1);
  HEAPF32[$6_1 + 488 >> 2] = Math_fround(Math_fround($8_1 * $24_1) + Math_fround($9_1 * $25)) + Math_fround($10 * $26_1);
  HEAP32[$6_1 + 504 >> 2] = 348;
  HEAPF32[$6_1 + 440 >> 2] = $11;
  $0 = $6_1 + 136 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$6_1 + 128 >> 2] = 0;
  HEAP32[$6_1 + 132 >> 2] = 0;
  HEAP32[$6_1 + 364 >> 2] = 0;
  HEAP32[$6_1 + 368 >> 2] = 0;
  HEAP32[$6_1 + 376 >> 2] = 2;
  HEAP32[$6_1 + 144 >> 2] = 0;
  label$1 : {
   label$2 : {
    $0 = $538($6_1, $6_1 + 384 | 0, $4_1);
    if (!$0) {
     $17_1 = HEAP32[$6_1 + 372 >> 2];
     if (!HEAP32[$17_1 + 32 >> 2]) {
      $8_1 = Math_fround(0.0);
      $9_1 = Math_fround(0.0);
      $10 = Math_fround(0.0);
      $11 = Math_fround(0.0);
      $14 = Math_fround(0.0);
      $7_1 = Math_fround(0.0);
      break label$2;
     }
     $7_1 = Math_fround(0.0);
     $3_1 = 0;
     $0 = 0;
     $14 = Math_fround(0.0);
     $11 = Math_fround(0.0);
     $10 = Math_fround(0.0);
     $9_1 = Math_fround(0.0);
     $8_1 = Math_fround(0.0);
     while (1) {
      $17_1 = $3_1 + $17_1 | 0;
      $12_1 = HEAPF32[$17_1 + 16 >> 2];
      $18_1 = HEAP32[$17_1 >> 2];
      $17_1 = HEAP32[$6_1 + 504 >> 2];
      $4_1 = HEAP32[$6_1 + 508 >> 2];
      $2_1 = HEAP32[$6_1 + 384 >> 2] + ($4_1 >> 1) | 0;
      FUNCTION_TABLE[$4_1 & 1 ? HEAP32[HEAP32[$2_1 >> 2] + $17_1 >> 2] : $17_1]($6_1 + 528 | 0, $2_1, $18_1);
      $18_1 = HEAP32[$6_1 + 508 >> 2];
      $2_1 = HEAP32[$6_1 + 388 >> 2] + ($18_1 >> 1) | 0;
      $19_1 = Math_fround($12_1 * HEAPF32[$6_1 + 536 >> 2]);
      $20 = Math_fround($12_1 * HEAPF32[$6_1 + 532 >> 2]);
      $21 = Math_fround($12_1 * HEAPF32[$6_1 + 528 >> 2]);
      $4_1 = HEAP32[HEAP32[$6_1 + 372 >> 2] + $3_1 >> 2];
      $13_1 = HEAPF32[$4_1 + 8 >> 2];
      $15_1 = HEAPF32[$4_1 >> 2];
      $16_1 = Math_fround(-HEAPF32[$4_1 + 4 >> 2]);
      $17_1 = HEAP32[$6_1 + 504 >> 2];
      $17_1 = $18_1 & 1 ? HEAP32[HEAP32[$2_1 >> 2] + $17_1 >> 2] : $17_1;
      $7_1 = Math_fround($7_1 + $19_1);
      $14 = Math_fround($14 + $20);
      $11 = Math_fround($11 + $21);
      HEAP32[$6_1 + 524 >> 2] = 0;
      HEAPF32[$6_1 + 520 >> 2] = Math_fround(Math_fround(HEAPF32[$6_1 + 428 >> 2] * $16_1) - Math_fround($15_1 * HEAPF32[$6_1 + 424 >> 2])) - Math_fround($13_1 * HEAPF32[$6_1 + 432 >> 2]);
      HEAPF32[$6_1 + 516 >> 2] = Math_fround(Math_fround(HEAPF32[$6_1 + 412 >> 2] * $16_1) - Math_fround($15_1 * HEAPF32[$6_1 + 408 >> 2])) - Math_fround($13_1 * HEAPF32[$6_1 + 416 >> 2]);
      HEAPF32[$6_1 + 512 >> 2] = Math_fround(Math_fround(HEAPF32[$6_1 + 396 >> 2] * $16_1) - Math_fround($15_1 * HEAPF32[$6_1 + 392 >> 2])) - Math_fround($13_1 * HEAPF32[$6_1 + 400 >> 2]);
      FUNCTION_TABLE[$17_1]($6_1 + 528 | 0, $2_1, $6_1 + 512 | 0);
      $13_1 = HEAPF32[$6_1 + 528 >> 2];
      $15_1 = HEAPF32[$6_1 + 532 >> 2];
      $16_1 = HEAPF32[$6_1 + 536 >> 2];
      $10 = Math_fround($10 + Math_fround($12_1 * Math_fround(Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$6_1 + 472 >> 2]) + Math_fround($15_1 * HEAPF32[$6_1 + 476 >> 2])) + Math_fround($16_1 * HEAPF32[$6_1 + 480 >> 2])) + HEAPF32[$6_1 + 496 >> 2])));
      $9_1 = Math_fround($9_1 + Math_fround($12_1 * Math_fround(Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$6_1 + 456 >> 2]) + Math_fround($15_1 * HEAPF32[$6_1 + 460 >> 2])) + Math_fround($16_1 * HEAPF32[$6_1 + 464 >> 2])) + HEAPF32[$6_1 + 492 >> 2])));
      $8_1 = Math_fround($8_1 + Math_fround($12_1 * Math_fround(Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$6_1 + 440 >> 2]) + Math_fround($15_1 * HEAPF32[$6_1 + 444 >> 2])) + Math_fround($16_1 * HEAPF32[$6_1 + 448 >> 2])) + HEAPF32[$6_1 + 488 >> 2])));
      $3_1 = $3_1 + 4 | 0;
      $0 = $0 + 1 | 0;
      $17_1 = HEAP32[$6_1 + 372 >> 2];
      if ($0 >>> 0 < HEAPU32[$17_1 + 32 >> 2]) {
       continue
      }
      break;
     };
     break label$2;
    }
    HEAP32[$5_1 >> 2] = ($0 | 0) == 1 ? 1 : 2;
    break label$1;
   }
   $12_1 = HEAPF32[$1_1 + 48 >> 2];
   $13_1 = HEAPF32[$1_1 + 8 >> 2];
   $15_1 = HEAPF32[$1_1 >> 2];
   $16_1 = HEAPF32[$1_1 + 4 >> 2];
   $19_1 = HEAPF32[$1_1 + 52 >> 2];
   $20 = HEAPF32[$1_1 + 24 >> 2];
   $21 = HEAPF32[$1_1 + 16 >> 2];
   $23_1 = HEAPF32[$1_1 + 20 >> 2];
   $24_1 = HEAPF32[$1_1 + 56 >> 2];
   $25 = HEAPF32[$1_1 + 40 >> 2];
   $26_1 = HEAPF32[$1_1 + 32 >> 2];
   $22_1 = HEAPF32[$1_1 + 36 >> 2];
   HEAP32[$5_1 + 16 >> 2] = 0;
   HEAPF32[$5_1 + 12 >> 2] = $24_1 + Math_fround(Math_fround(Math_fround($11 * $26_1) + Math_fround($14 * $22_1)) + Math_fround($7_1 * $25));
   HEAPF32[$5_1 + 8 >> 2] = $19_1 + Math_fround(Math_fround(Math_fround($11 * $21) + Math_fround($14 * $23_1)) + Math_fround($7_1 * $20));
   HEAPF32[$5_1 + 4 >> 2] = $12_1 + Math_fround(Math_fround(Math_fround($11 * $15_1) + Math_fround($14 * $16_1)) + Math_fround($7_1 * $13_1));
   $13_1 = HEAPF32[$1_1 + 48 >> 2];
   $15_1 = HEAPF32[$1_1 + 8 >> 2];
   $16_1 = HEAPF32[$1_1 >> 2];
   $19_1 = HEAPF32[$1_1 + 4 >> 2];
   $20 = HEAPF32[$1_1 + 52 >> 2];
   $21 = HEAPF32[$1_1 + 24 >> 2];
   $23_1 = HEAPF32[$1_1 + 16 >> 2];
   $24_1 = HEAPF32[$1_1 + 20 >> 2];
   $25 = HEAPF32[$1_1 + 56 >> 2];
   $26_1 = HEAPF32[$1_1 + 40 >> 2];
   $22_1 = HEAPF32[$1_1 + 32 >> 2];
   $27_1 = HEAPF32[$1_1 + 36 >> 2];
   $11 = Math_fround($11 - $8_1);
   $14 = Math_fround($14 - $9_1);
   $7_1 = Math_fround($7_1 - $10);
   $12_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($11 * $11) + Math_fround($14 * $14)) + Math_fround($7_1 * $7_1))));
   HEAPF32[$5_1 + 52 >> 2] = $12_1;
   HEAP32[$5_1 + 48 >> 2] = 0;
   HEAP32[$5_1 + 32 >> 2] = 0;
   $28_1 = $7_1;
   $7_1 = $12_1 > Math_fround(9.999999747378752e-05) ? Math_fround(Math_fround(1.0) / $12_1) : Math_fround(1.0);
   HEAPF32[$5_1 + 44 >> 2] = $28_1 * $7_1;
   HEAPF32[$5_1 + 40 >> 2] = $14 * $7_1;
   HEAPF32[$5_1 + 36 >> 2] = $11 * $7_1;
   HEAPF32[$5_1 + 28 >> 2] = $25 + Math_fround(Math_fround(Math_fround($8_1 * $22_1) + Math_fround($9_1 * $27_1)) + Math_fround($10 * $26_1));
   HEAPF32[$5_1 + 24 >> 2] = $20 + Math_fround(Math_fround(Math_fround($8_1 * $23_1) + Math_fround($9_1 * $24_1)) + Math_fround($10 * $21));
   HEAPF32[$5_1 + 20 >> 2] = $13_1 + Math_fround(Math_fround(Math_fround($8_1 * $16_1) + Math_fround($9_1 * $19_1)) + Math_fround($10 * $15_1));
   $17_1 = 1;
  }
  global$0 = $6_1 + 544 | 0;
  return $17_1;
 }
 
 function $538($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = 0, $21 = 0, $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  HEAP32[$0 + 376 >> 2] = 0;
  HEAP32[$0 + 364 >> 2] = 4;
  HEAP32[$0 + 368 >> 2] = 0;
  $8_1 = $0 + 316 | 0;
  HEAP32[$0 + 360 >> 2] = $8_1;
  HEAP32[$0 + 356 >> 2] = $0 + 284;
  HEAP32[$0 + 352 >> 2] = $0 + 252;
  HEAP32[$0 + 348 >> 2] = $0 + 220;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 16 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $0 + 16 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $4_1 = HEAP32[$1_1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $4_1;
  $3_1 = $1_1 + 32 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $0 + 32 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $3_1 = $1_1 + 24 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $0 + 24 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $3_1 = $1_1 + 48 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $0 + 48 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $3_1 = $1_1 + 40 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $0 + 40 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $3_1 = $1_1 - -64 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $0 - -64 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $4_1 = HEAP32[$1_1 + 60 >> 2];
  HEAP32[$0 + 56 >> 2] = HEAP32[$1_1 + 56 >> 2];
  HEAP32[$0 + 60 >> 2] = $4_1;
  $3_1 = $1_1 + 80 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $0 + 80 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $3_1 = $1_1 + 72 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $0 + 72 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $3_1 = $1_1 + 96 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $0 + 96 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $3_1 = $1_1 + 88 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $0 + 88 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $3_1 = $1_1 + 104 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $0 + 104 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $3_1 = $1_1 + 112 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $0 + 112 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $4_1 = HEAP32[$1_1 + 120 >> 2];
  $1_1 = HEAP32[$1_1 + 124 >> 2];
  HEAP32[$0 + 180 >> 2] = 0;
  HEAP32[$0 + 144 >> 2] = 0;
  HEAP32[$0 + 120 >> 2] = $4_1;
  HEAP32[$0 + 124 >> 2] = $1_1;
  $3_1 = $2_1 + 8 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0 + 136 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $9_1;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0 + 128 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 132 >> 2] = $4_1;
  $4_1 = $0 + 128 | 0;
  $6_1 = HEAPF32[$0 + 128 >> 2];
  $10 = HEAPF32[$0 + 132 >> 2];
  $11 = HEAPF32[$1_1 >> 2];
  $14 = Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($10 * $10)) + Math_fround($11 * $11));
  label$1 : {
   if (!!($14 > Math_fround(0.0))) {
    HEAPF32[$5_1 + 40 >> 2] = -$11;
    HEAPF32[$5_1 + 36 >> 2] = -$10;
    HEAPF32[$5_1 + 32 >> 2] = -$6_1;
    break label$1;
   }
   HEAP32[$5_1 + 40 >> 2] = 0;
   HEAP32[$5_1 + 32 >> 2] = 1065353216;
   HEAP32[$5_1 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 364 >> 2] = 3;
  HEAP32[$0 + 180 >> 2] = 1;
  HEAP32[$0 + 148 >> 2] = $8_1;
  $1_1 = $0 + 164 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$5_1 + 44 >> 2] = 0;
  $539($0, $5_1 + 32 | 0, $8_1);
  HEAP32[$1_1 >> 2] = 1065353216;
  $1_1 = HEAP32[$0 + 148 >> 2];
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  $8_1 = $1_1 + 24 | 0;
  $3_1 = HEAP32[$8_1 + 4 >> 2];
  $22_1 = $4_1 + 8 | 0;
  $2_1 = $22_1;
  HEAP32[$2_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $2_1 = HEAP32[$8_1 + 4 >> 2];
  $9_1 = $5_1 + 88 | 0;
  $3_1 = HEAP32[$8_1 >> 2];
  HEAP32[$9_1 >> 2] = $3_1;
  HEAP32[$9_1 + 4 >> 2] = $2_1;
  $8_1 = $5_1 + 72 | 0;
  HEAP32[$8_1 >> 2] = $3_1;
  HEAP32[$8_1 + 4 >> 2] = $2_1;
  $8_1 = $5_1 + 56 | 0;
  HEAP32[$8_1 >> 2] = $3_1;
  HEAP32[$8_1 + 4 >> 2] = $2_1;
  $8_1 = HEAP32[$1_1 + 20 >> 2];
  $1_1 = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$5_1 + 80 >> 2] = $1_1;
  HEAP32[$5_1 + 84 >> 2] = $8_1;
  HEAP32[$5_1 + 64 >> 2] = $1_1;
  HEAP32[$5_1 + 68 >> 2] = $8_1;
  HEAP32[$5_1 + 48 >> 2] = $1_1;
  HEAP32[$5_1 + 52 >> 2] = $8_1;
  HEAP32[$5_1 + 32 >> 2] = $1_1;
  HEAP32[$5_1 + 36 >> 2] = $8_1;
  HEAP32[$5_1 + 40 >> 2] = $3_1;
  HEAP32[$5_1 + 44 >> 2] = $2_1;
  $28_1 = $0 + 148 | 0;
  $8_1 = HEAP32[$0 + 368 >> 2];
  $6_1 = HEAPF32[$0 + 136 >> 2];
  $10 = HEAPF32[$0 + 132 >> 2];
  $11 = HEAPF32[$0 + 128 >> 2];
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     while (1) {
      $16_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($11 * $11) + Math_fround($10 * $10)) + Math_fround($6_1 * $6_1))));
      if (!!($16_1 < Math_fround(9.999999747378752e-05))) {
       HEAP32[$0 + 376 >> 2] = 1;
       break label$5;
      }
      $12_1 = HEAP32[$0 + 364 >> 2] + -1 | 0;
      HEAP32[$0 + 364 >> 2] = $12_1;
      $17_1 = Math_imul($8_1, 36);
      $1_1 = $17_1 + $0 | 0;
      $3_1 = $1_1 + 180 | 0;
      $2_1 = HEAP32[$3_1 >> 2];
      HEAP32[$3_1 >> 2] = $2_1 + 1;
      $15_1 = $2_1 << 2;
      $2_1 = $1_1 + 148 | 0;
      $15_1 = $15_1 + $2_1 | 0;
      $12_1 = HEAP32[(($12_1 << 2) + $0 | 0) + 348 >> 2];
      HEAP32[$15_1 >> 2] = $12_1;
      HEAP32[$15_1 + 16 >> 2] = 0;
      HEAP32[$5_1 + 28 >> 2] = 0;
      HEAPF32[$5_1 + 24 >> 2] = -$6_1;
      HEAPF32[$5_1 + 20 >> 2] = -$10;
      HEAPF32[$5_1 + 16 >> 2] = -$11;
      $539($0, $5_1 + 16 | 0, $12_1);
      label$8 : {
       $19_1 = HEAP32[$3_1 >> 2];
       $12_1 = HEAP32[($2_1 + ($19_1 << 2) | 0) + -4 >> 2];
       $6_1 = HEAPF32[$12_1 + 16 >> 2];
       $10 = Math_fround($6_1 - HEAPF32[$5_1 + 32 >> 2]);
       $7_1 = Math_fround($10 * $10);
       $10 = HEAPF32[$12_1 + 20 >> 2];
       $11 = Math_fround($10 - HEAPF32[$5_1 + 36 >> 2]);
       $13_1 = Math_fround($7_1 + Math_fround($11 * $11));
       $11 = HEAPF32[$12_1 + 24 >> 2];
       $7_1 = Math_fround($11 - HEAPF32[$5_1 + 40 >> 2]);
       if (Math_fround($13_1 + Math_fround($7_1 * $7_1)) < Math_fround(9.999999747378752e-05)) {
        break label$8
       }
       $7_1 = Math_fround($6_1 - HEAPF32[$5_1 + 48 >> 2]);
       $13_1 = Math_fround($7_1 * $7_1);
       $7_1 = Math_fround($10 - HEAPF32[$5_1 + 52 >> 2]);
       $13_1 = Math_fround($13_1 + Math_fround($7_1 * $7_1));
       $7_1 = Math_fround($11 - HEAPF32[$5_1 + 56 >> 2]);
       if (!!(Math_fround($13_1 + Math_fround($7_1 * $7_1)) < Math_fround(9.999999747378752e-05))) {
        break label$8
       }
       $7_1 = Math_fround($6_1 - HEAPF32[$5_1 + 64 >> 2]);
       $13_1 = Math_fround($7_1 * $7_1);
       $7_1 = Math_fround($10 - HEAPF32[$5_1 + 68 >> 2]);
       $13_1 = Math_fround($13_1 + Math_fround($7_1 * $7_1));
       $7_1 = Math_fround($11 - HEAPF32[$5_1 + 72 >> 2]);
       if (Math_fround($13_1 + Math_fround($7_1 * $7_1)) < Math_fround(9.999999747378752e-05)) {
        break label$8
       }
       $7_1 = Math_fround($6_1 - HEAPF32[$5_1 + 80 >> 2]);
       $13_1 = Math_fround($7_1 * $7_1);
       $7_1 = Math_fround($10 - HEAPF32[$5_1 + 84 >> 2]);
       $13_1 = Math_fround($13_1 + Math_fround($7_1 * $7_1));
       $7_1 = Math_fround($11 - HEAPF32[$5_1 + 88 >> 2]);
       if (Math_fround($13_1 + Math_fround($7_1 * $7_1)) < Math_fround(9.999999747378752e-05)) {
        break label$8
       }
       $12_1 = $12_1 + 16 | 0;
       $18_1 = $12_1 + 8 | 0;
       $20 = HEAP32[$18_1 + 4 >> 2];
       $27_1 = $27_1 + 1 & 3;
       $15_1 = ($5_1 + 32 | 0) + ($27_1 << 4) | 0;
       HEAP32[$15_1 + 8 >> 2] = HEAP32[$18_1 >> 2];
       HEAP32[$15_1 + 12 >> 2] = $20;
       $21 = HEAP32[$12_1 + 4 >> 2];
       HEAP32[$15_1 >> 2] = HEAP32[$12_1 >> 2];
       HEAP32[$15_1 + 4 >> 2] = $21;
       $6_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 128 >> 2] * $6_1) + Math_fround(HEAPF32[$0 + 132 >> 2] * $10)) + Math_fround(HEAPF32[$0 + 136 >> 2] * $11)) / $16_1);
       $23_1 = $6_1 > $23_1 ? $6_1 : $23_1;
       if (!!(Math_fround(Math_fround($16_1 - $23_1) + Math_fround($16_1 * Math_fround(-9.999999747378752e-05))) <= Math_fround(0.0))) {
        $2_1 = HEAP32[$0 + 364 >> 2];
        HEAP32[$0 + 364 >> 2] = $2_1 + 1;
        $8_1 = HEAP32[$0 + 368 >> 2];
        $4_1 = Math_imul($8_1, 36) + $0 | 0;
        $3_1 = $4_1 + 180 | 0;
        $1_1 = HEAP32[$3_1 >> 2] + -1 | 0;
        HEAP32[$3_1 >> 2] = $1_1;
        HEAP32[(($2_1 << 2) + $0 | 0) + 348 >> 2] = HEAP32[($4_1 + ($1_1 << 2) | 0) + 148 >> 2];
        break label$5;
       }
       HEAP32[$5_1 + 12 >> 2] = 0;
       label$10 : {
        label$11 : {
         $12_1 = $19_1 + -2 | 0;
         label$12 : {
          if ($12_1 >>> 0 > 2) {
           break label$12
          }
          label$13 : {
           switch ($12_1 - 1 | 0) {
           default:
            $1_1 = HEAP32[$1_1 + 152 >> 2];
            $24_1 = HEAPF32[$1_1 + 16 >> 2];
            $2_1 = HEAP32[$2_1 >> 2];
            $14 = HEAPF32[$2_1 + 16 >> 2];
            $16_1 = Math_fround($24_1 - $14);
            $25 = HEAPF32[$1_1 + 20 >> 2];
            $10 = HEAPF32[$2_1 + 20 >> 2];
            $7_1 = Math_fround($25 - $10);
            $26_1 = HEAPF32[$1_1 + 24 >> 2];
            $11 = HEAPF32[$2_1 + 24 >> 2];
            $13_1 = Math_fround($26_1 - $11);
            $6_1 = Math_fround(Math_fround(Math_fround($16_1 * $16_1) + Math_fround($7_1 * $7_1)) + Math_fround($13_1 * $13_1));
            if (!($6_1 > Math_fround(0.0))) {
             break label$11
            }
            $6_1 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($14 * $16_1) + Math_fround($10 * $7_1)) + Math_fround($11 * $13_1))) / $6_1);
            if (!!($6_1 >= Math_fround(1.0))) {
             HEAP32[$5_1 + 16 >> 2] = 0;
             HEAP32[$5_1 + 20 >> 2] = 1065353216;
             HEAP32[$5_1 + 12 >> 2] = 2;
             $14 = Math_fround(Math_fround(Math_fround($24_1 * $24_1) + Math_fround($25 * $25)) + Math_fround($26_1 * $26_1));
             break label$12;
            }
            if (!!($6_1 <= Math_fround(0.0))) {
             HEAP32[$5_1 + 16 >> 2] = 1065353216;
             HEAP32[$5_1 + 20 >> 2] = 0;
             HEAP32[$5_1 + 12 >> 2] = 1;
             $14 = Math_fround(Math_fround(Math_fround($14 * $14) + Math_fround($10 * $10)) + Math_fround($11 * $11));
             break label$12;
            }
            HEAP32[$5_1 + 12 >> 2] = 3;
            HEAPF32[$5_1 + 20 >> 2] = $6_1;
            HEAPF32[$5_1 + 16 >> 2] = Math_fround(1.0) - $6_1;
            $11 = Math_fround($11 + Math_fround($13_1 * $6_1));
            $14 = Math_fround($14 + Math_fround($16_1 * $6_1));
            $6_1 = Math_fround($10 + Math_fround($7_1 * $6_1));
            $14 = Math_fround(Math_fround($11 * $11) + Math_fround(Math_fround($14 * $14) + Math_fround($6_1 * $6_1)));
            break label$12;
           case 0:
            $14 = $540(HEAP32[$2_1 >> 2] + 16 | 0, HEAP32[$1_1 + 152 >> 2] + 16 | 0, HEAP32[$1_1 + 156 >> 2] + 16 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0);
            break label$12;
           case 1:
            break label$13;
           };
          }
          $14 = $541(HEAP32[$2_1 >> 2] + 16 | 0, HEAP32[$1_1 + 152 >> 2] + 16 | 0, HEAP32[$1_1 + 156 >> 2] + 16 | 0, HEAP32[$1_1 + 160 >> 2] + 16 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0);
         }
         if (!($14 >= Math_fround(0.0))) {
          break label$11
         }
         $8_1 = 1 - $8_1 | 0;
         $19_1 = Math_imul($8_1, 36) + $0 | 0;
         $12_1 = $19_1 + 180 | 0;
         HEAP32[$12_1 >> 2] = 0;
         HEAP32[$22_1 >> 2] = 0;
         HEAP32[$22_1 + 4 >> 2] = 0;
         HEAP32[$4_1 >> 2] = 0;
         HEAP32[$4_1 + 4 >> 2] = 0;
         HEAP32[$0 + 368 >> 2] = $8_1;
         $15_1 = HEAP32[$5_1 + 12 >> 2];
         $21 = HEAP32[$3_1 >> 2];
         if (!$21) {
          $6_1 = Math_fround(0.0);
          $10 = Math_fround(0.0);
          $11 = Math_fround(0.0);
          break label$10;
         }
         $1_1 = $17_1 + $28_1 | 0;
         $2_1 = 0;
         $6_1 = Math_fround(0.0);
         $3_1 = $5_1 + 16 | 0;
         $10 = Math_fround(0.0);
         $11 = Math_fround(0.0);
         while (1) {
          $17_1 = HEAP32[$1_1 >> 2];
          label$20 : {
           if ($15_1 >>> $2_1 & 1) {
            $18_1 = HEAP32[$12_1 >> 2];
            $20 = ($18_1 << 2) + $19_1 | 0;
            HEAP32[$20 + 148 >> 2] = $17_1;
            $6_1 = HEAPF32[$3_1 >> 2];
            HEAP32[$20 + 164 >> 2] = HEAP32[$3_1 >> 2];
            HEAP32[$12_1 >> 2] = $18_1 + 1;
            $17_1 = HEAP32[$1_1 >> 2];
            $16_1 = HEAPF32[$17_1 + 24 >> 2];
            $10 = HEAPF32[$17_1 + 20 >> 2];
            $11 = Math_fround(Math_fround(HEAPF32[$17_1 + 16 >> 2] * $6_1) + HEAPF32[$0 + 128 >> 2]);
            HEAPF32[$0 + 128 >> 2] = $11;
            $10 = Math_fround(Math_fround($10 * $6_1) + HEAPF32[$0 + 132 >> 2]);
            HEAPF32[$0 + 132 >> 2] = $10;
            $6_1 = Math_fround(Math_fround($16_1 * $6_1) + HEAPF32[$0 + 136 >> 2]);
            HEAPF32[$0 + 136 >> 2] = $6_1;
            break label$20;
           }
           $18_1 = HEAP32[$0 + 364 >> 2];
           HEAP32[$0 + 364 >> 2] = $18_1 + 1;
           HEAP32[(($18_1 << 2) + $0 | 0) + 348 >> 2] = $17_1;
          }
          $1_1 = $1_1 + 4 | 0;
          $3_1 = $3_1 + 4 | 0;
          $2_1 = $2_1 + 1 | 0;
          if (($2_1 | 0) != ($21 | 0)) {
           continue
          }
          break;
         };
         break label$10;
        }
        $2_1 = HEAP32[$0 + 364 >> 2];
        HEAP32[$0 + 364 >> 2] = $2_1 + 1;
        $8_1 = HEAP32[$0 + 368 >> 2];
        $4_1 = Math_imul($8_1, 36) + $0 | 0;
        $3_1 = $4_1 + 180 | 0;
        $1_1 = HEAP32[$3_1 >> 2] + -1 | 0;
        HEAP32[$3_1 >> 2] = $1_1;
        HEAP32[(($2_1 << 2) + $0 | 0) + 348 >> 2] = HEAP32[($4_1 + ($1_1 << 2) | 0) + 148 >> 2];
        break label$5;
       }
       if (($15_1 | 0) == 15) {
        HEAP32[$0 + 376 >> 2] = 1
       }
       if (($9_1 | 0) == 127) {
        $1_1 = 2;
        HEAP32[$0 + 376 >> 2] = 2;
        HEAP32[$0 + 372 >> 2] = (Math_imul($8_1, 36) + $0 | 0) + 148;
        break label$3;
       }
       $9_1 = $9_1 + 1 | 0;
       $1_1 = HEAP32[$0 + 376 >> 2];
       if (!$1_1) {
        continue
       }
       break label$4;
      }
      break;
     };
     $2_1 = HEAP32[$0 + 364 >> 2];
     HEAP32[$0 + 364 >> 2] = $2_1 + 1;
     $8_1 = HEAP32[$0 + 368 >> 2];
     $4_1 = Math_imul($8_1, 36) + $0 | 0;
     $3_1 = $4_1 + 180 | 0;
     $1_1 = HEAP32[$3_1 >> 2] + -1 | 0;
     HEAP32[$3_1 >> 2] = $1_1;
     HEAP32[(($2_1 << 2) + $0 | 0) + 348 >> 2] = HEAP32[($4_1 + ($1_1 << 2) | 0) + 148 >> 2];
    }
    $1_1 = HEAP32[$0 + 376 >> 2];
   }
   HEAP32[$0 + 372 >> 2] = (Math_imul($8_1, 36) + $0 | 0) + 148;
   if ($1_1 >>> 0 > 1) {
    break label$3
   }
   if ($1_1 - 1) {
    $6_1 = HEAPF32[$0 + 128 >> 2];
    $10 = Math_fround($6_1 * $6_1);
    $6_1 = HEAPF32[$0 + 132 >> 2];
    $10 = Math_fround($10 + Math_fround($6_1 * $6_1));
    $6_1 = HEAPF32[$0 + 136 >> 2];
    HEAPF32[$0 + 144 >> 2] = Math_sqrt(Math_fround($10 + Math_fround($6_1 * $6_1)));
    $1_1 = 0;
    break label$3;
   }
   HEAP32[$0 + 144 >> 2] = 0;
   $1_1 = 1;
  }
  global$0 = $5_1 + 96 | 0;
  return $1_1;
 }
 
 function $539($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0);
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  $4_1 = HEAPF32[$1_1 + 8 >> 2];
  $5_1 = HEAPF32[$1_1 >> 2];
  $6_1 = HEAPF32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 12 >> 2] = 0;
  $7_1 = $4_1;
  $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1)) + Math_fround($4_1 * $4_1)))));
  HEAPF32[$2_1 + 8 >> 2] = $7_1 * $4_1;
  HEAPF32[$2_1 + 4 >> 2] = $6_1 * $4_1;
  HEAPF32[$2_1 >> 2] = $5_1 * $4_1;
  $1_1 = HEAP32[$0 + 120 >> 2];
  $8_1 = HEAP32[$0 + 124 >> 2];
  $9_1 = HEAP32[$0 >> 2] + ($8_1 >> 1) | 0;
  FUNCTION_TABLE[$8_1 & 1 ? HEAP32[HEAP32[$9_1 >> 2] + $1_1 >> 2] : $1_1]($3_1 + 32 | 0, $9_1, $2_1);
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 8 >> 2] = -HEAPF32[$2_1 + 8 >> 2];
  HEAPF32[$3_1 + 4 >> 2] = -HEAPF32[$2_1 + 4 >> 2];
  HEAPF32[$3_1 >> 2] = -HEAPF32[$2_1 >> 2];
  $547($3_1 + 16 | 0, $0, $3_1);
  $4_1 = HEAPF32[$3_1 + 16 >> 2];
  $5_1 = HEAPF32[$3_1 + 32 >> 2];
  $6_1 = HEAPF32[$3_1 + 20 >> 2];
  $7_1 = HEAPF32[$3_1 + 36 >> 2];
  $10 = HEAPF32[$3_1 + 24 >> 2];
  $11 = HEAPF32[$3_1 + 40 >> 2];
  HEAP32[$2_1 + 28 >> 2] = 0;
  HEAPF32[$2_1 + 24 >> 2] = $11 - $10;
  HEAPF32[$2_1 + 20 >> 2] = $7_1 - $6_1;
  HEAPF32[$2_1 + 16 >> 2] = $5_1 - $4_1;
  global$0 = $3_1 + 48 | 0;
 }
 
 function $540($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0);
  $6_1 = Math_fround(-1.0);
  $9_1 = HEAPF32[$0 >> 2];
  $8_1 = HEAPF32[$1_1 >> 2];
  $5_1 = Math_fround($9_1 - $8_1);
  $7_1 = HEAPF32[$1_1 + 4 >> 2];
  $19_1 = HEAPF32[$2_1 + 4 >> 2];
  $26_1 = Math_fround($7_1 - $19_1);
  $17_1 = HEAPF32[$0 + 4 >> 2];
  $15_1 = Math_fround($17_1 - $7_1);
  $21 = HEAPF32[$2_1 >> 2];
  $27_1 = Math_fround($8_1 - $21);
  $11 = Math_fround(Math_fround($5_1 * $26_1) - Math_fround($15_1 * $27_1));
  $10 = HEAPF32[$1_1 + 8 >> 2];
  $22_1 = HEAPF32[$2_1 + 8 >> 2];
  $28_1 = Math_fround($10 - $22_1);
  $18_1 = HEAPF32[$0 + 8 >> 2];
  $12_1 = Math_fround($18_1 - $10);
  $13_1 = Math_fround(Math_fround($15_1 * $28_1) - Math_fround($12_1 * $26_1));
  $14 = Math_fround(Math_fround($12_1 * $27_1) - Math_fround($5_1 * $28_1));
  $29_1 = Math_fround(Math_fround($11 * $11) + Math_fround(Math_fround($13_1 * $13_1) + Math_fround($14 * $14)));
  label$1 : {
   if (!($29_1 > Math_fround(0.0))) {
    break label$1
   }
   label$2 : {
    if (!(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(Math_fround($11 * $15_1) - Math_fround($14 * $12_1))) + Math_fround($17_1 * Math_fround(Math_fround($13_1 * $12_1) - Math_fround($11 * $5_1)))) + Math_fround(Math_fround(Math_fround($14 * $5_1) - Math_fround($13_1 * $15_1)) * $18_1)) > Math_fround(0.0))) {
     $5_1 = Math_fround(-1.0);
     break label$2;
    }
    $15_1 = Math_fround($8_1 - $9_1);
    $12_1 = Math_fround($7_1 - $17_1);
    $16_1 = Math_fround($10 - $18_1);
    $6_1 = Math_fround(Math_fround(Math_fround($15_1 * $15_1) + Math_fround($12_1 * $12_1)) + Math_fround($16_1 * $16_1));
    $5_1 = Math_fround(-1.0);
    label$4 : {
     if (!($6_1 > Math_fround(0.0))) {
      break label$4
     }
     $6_1 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($9_1 * $15_1) + Math_fround($17_1 * $12_1)) + Math_fround($18_1 * $16_1))) / $6_1);
     if (!!($6_1 >= Math_fround(1.0))) {
      $23_1 = 1065353216;
      $20 = 2;
      $5_1 = Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($7_1 * $7_1)) + Math_fround($10 * $10));
      break label$4;
     }
     $20 = 1;
     if (!!($6_1 <= Math_fround(0.0))) {
      $24_1 = 1065353216;
      $5_1 = Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($17_1 * $17_1)) + Math_fround($18_1 * $18_1));
      break label$4;
     }
     $24_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(1.0) - $6_1)), wasm2js_scratch_load_i32(0));
     $23_1 = (wasm2js_scratch_store_f32($6_1), wasm2js_scratch_load_i32(0));
     $20 = 3;
     $5_1 = Math_fround($18_1 + Math_fround($16_1 * $6_1));
     $8_1 = Math_fround($5_1 * $5_1);
     $5_1 = Math_fround($9_1 + Math_fround($15_1 * $6_1));
     $7_1 = Math_fround($5_1 * $5_1);
     $5_1 = Math_fround($17_1 + Math_fround($12_1 * $6_1));
     $5_1 = Math_fround($8_1 + Math_fround($7_1 + Math_fround($5_1 * $5_1)));
    }
    HEAP32[$3_1 + 8 >> 2] = 0;
    HEAP32[$3_1 + 4 >> 2] = $23_1;
    HEAP32[$3_1 >> 2] = $24_1;
    HEAP32[$4_1 >> 2] = $20;
    $10 = HEAPF32[$1_1 + 8 >> 2];
    $7_1 = HEAPF32[$1_1 + 4 >> 2];
    $8_1 = HEAPF32[$1_1 >> 2];
   }
   $18_1 = Math_fround($22_1 - $18_1);
   $17_1 = Math_fround($19_1 - $17_1);
   $15_1 = Math_fround($21 - $9_1);
   label$7 : {
    if (!(Math_fround(Math_fround(Math_fround($8_1 * Math_fround(Math_fround($11 * $26_1) - Math_fround($14 * $28_1))) + Math_fround($7_1 * Math_fround(Math_fround($13_1 * $28_1) - Math_fround($11 * $27_1)))) + Math_fround(Math_fround(Math_fround($14 * $27_1) - Math_fround($13_1 * $26_1)) * $10)) > Math_fround(0.0))) {
     $6_1 = $5_1;
     break label$7;
    }
    $21 = HEAPF32[$2_1 >> 2];
    $12_1 = Math_fround($21 - $8_1);
    $22_1 = HEAPF32[$2_1 + 4 >> 2];
    $16_1 = Math_fround($22_1 - $7_1);
    $25 = HEAPF32[$2_1 + 8 >> 2];
    $19_1 = Math_fround($25 - $10);
    $9_1 = Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($16_1 * $16_1)) + Math_fround($19_1 * $19_1));
    $6_1 = Math_fround(-1.0);
    label$9 : {
     if (!($9_1 > Math_fround(0.0))) {
      break label$9
     }
     $9_1 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($8_1 * $12_1) + Math_fround($7_1 * $16_1)) + Math_fround($10 * $19_1))) / $9_1);
     if (!!($9_1 >= Math_fround(1.0))) {
      $23_1 = 1065353216;
      $24_1 = 0;
      $20 = 2;
      $6_1 = Math_fround(Math_fround(Math_fround($21 * $21) + Math_fround($22_1 * $22_1)) + Math_fround($25 * $25));
      break label$9;
     }
     $20 = 1;
     if (!!($9_1 <= Math_fround(0.0))) {
      $23_1 = 0;
      $24_1 = 1065353216;
      $6_1 = Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($7_1 * $7_1)) + Math_fround($10 * $10));
      break label$9;
     }
     $24_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(1.0) - $9_1)), wasm2js_scratch_load_i32(0));
     $23_1 = (wasm2js_scratch_store_f32($9_1), wasm2js_scratch_load_i32(0));
     $20 = 3;
     $6_1 = Math_fround($10 + Math_fround($19_1 * $9_1));
     $10 = Math_fround($6_1 * $6_1);
     $6_1 = Math_fround($8_1 + Math_fround($12_1 * $9_1));
     $8_1 = Math_fround($6_1 * $6_1);
     $6_1 = Math_fround($7_1 + Math_fround($16_1 * $9_1));
     $6_1 = Math_fround($10 + Math_fround($8_1 + Math_fround($6_1 * $6_1)));
    }
    if (!(!!($6_1 < $5_1) | $5_1 < Math_fround(0.0))) {
     $6_1 = $5_1;
     break label$7;
    }
    HEAP32[$3_1 + 8 >> 2] = $23_1;
    HEAP32[$3_1 + 4 >> 2] = $24_1;
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[$4_1 >> 2] = $20 << 1;
   }
   $7_1 = HEAPF32[$2_1 >> 2];
   $10 = HEAPF32[$2_1 + 4 >> 2];
   $9_1 = HEAPF32[$2_1 + 8 >> 2];
   label$13 : {
    if (!(Math_fround(Math_fround(Math_fround($7_1 * Math_fround(Math_fround($11 * $17_1) - Math_fround($14 * $18_1))) + Math_fround($10 * Math_fround(Math_fround($13_1 * $18_1) - Math_fround($11 * $15_1)))) + Math_fround(Math_fround(Math_fround($14 * $15_1) - Math_fround($13_1 * $17_1)) * $9_1)) > Math_fround(0.0))) {
     break label$13
    }
    $21 = HEAPF32[$0 >> 2];
    $12_1 = Math_fround($21 - $7_1);
    $22_1 = HEAPF32[$0 + 4 >> 2];
    $16_1 = Math_fround($22_1 - $10);
    $25 = HEAPF32[$0 + 8 >> 2];
    $19_1 = Math_fround($25 - $9_1);
    $8_1 = Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($16_1 * $16_1)) + Math_fround($19_1 * $19_1));
    $5_1 = Math_fround(-1.0);
    label$14 : {
     if (!($8_1 > Math_fround(0.0))) {
      break label$14
     }
     $8_1 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($7_1 * $12_1) + Math_fround($10 * $16_1)) + Math_fround($9_1 * $19_1))) / $8_1);
     if (!!($8_1 >= Math_fround(1.0))) {
      $23_1 = 1065353216;
      $24_1 = 0;
      $20 = 2;
      $5_1 = Math_fround(Math_fround(Math_fround($21 * $21) + Math_fround($22_1 * $22_1)) + Math_fround($25 * $25));
      break label$14;
     }
     if (!!($8_1 <= Math_fround(0.0))) {
      $23_1 = 0;
      $24_1 = 1065353216;
      $20 = 1;
      $5_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($10 * $10)) + Math_fround($9_1 * $9_1));
      break label$14;
     }
     $24_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(1.0) - $8_1)), wasm2js_scratch_load_i32(0));
     $23_1 = (wasm2js_scratch_store_f32($8_1), wasm2js_scratch_load_i32(0));
     $20 = 3;
     $5_1 = Math_fround($9_1 + Math_fround($19_1 * $8_1));
     $9_1 = Math_fround($5_1 * $5_1);
     $5_1 = Math_fround($7_1 + Math_fround($12_1 * $8_1));
     $7_1 = Math_fround($5_1 * $5_1);
     $5_1 = Math_fround($10 + Math_fround($16_1 * $8_1));
     $5_1 = Math_fround($9_1 + Math_fround($7_1 + Math_fround($5_1 * $5_1)));
    }
    if ($5_1 < $6_1 ^ 1 ? !($6_1 < Math_fround(0.0)) : 0) {
     break label$13
    }
    HEAP32[$3_1 + 8 >> 2] = $24_1;
    HEAP32[$3_1 + 4 >> 2] = 0;
    HEAP32[$3_1 >> 2] = $23_1;
    HEAP32[$4_1 >> 2] = $20 << 2 & 4 | $20 >>> 1;
    $6_1 = $5_1;
   }
   if (!($6_1 < Math_fround(0.0))) {
    break label$1
   }
   $8_1 = Math_fround(Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$0 >> 2]) + Math_fround($14 * HEAPF32[$0 + 4 >> 2])) + Math_fround($11 * HEAPF32[$0 + 8 >> 2])) / $29_1);
   $6_1 = Math_fround($14 * $8_1);
   $7_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] - $6_1);
   $5_1 = Math_fround($13_1 * $8_1);
   $10 = Math_fround(HEAPF32[$1_1 >> 2] - $5_1);
   $13_1 = Math_fround(Math_fround($27_1 * $7_1) - Math_fround($26_1 * $10));
   $8_1 = Math_fround($11 * $8_1);
   $11 = Math_fround(HEAPF32[$1_1 + 8 >> 2] - $8_1);
   $7_1 = Math_fround(Math_fround($26_1 * $11) - Math_fround($28_1 * $7_1));
   $9_1 = Math_fround($7_1 * $7_1);
   $7_1 = Math_fround(Math_fround($28_1 * $10) - Math_fround($27_1 * $11));
   $9_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($9_1 + Math_fround($7_1 * $7_1)))));
   $7_1 = Math_fround(Math_sqrt($29_1));
   $10 = Math_fround($9_1 / $7_1);
   HEAPF32[$3_1 >> 2] = $10;
   HEAP32[$4_1 >> 2] = 7;
   $11 = Math_fround(HEAPF32[$2_1 + 4 >> 2] - $6_1);
   $13_1 = Math_fround(HEAPF32[$2_1 >> 2] - $5_1);
   $14 = Math_fround(Math_fround($15_1 * $11) - Math_fround($17_1 * $13_1));
   $9_1 = Math_fround($14 * $14);
   $14 = Math_fround(HEAPF32[$2_1 + 8 >> 2] - $8_1);
   $11 = Math_fround(Math_fround($17_1 * $14) - Math_fround($18_1 * $11));
   $12_1 = Math_fround($11 * $11);
   $11 = Math_fround(Math_fround($18_1 * $13_1) - Math_fround($15_1 * $14));
   $7_1 = Math_fround(Math_fround(Math_sqrt(Math_fround($9_1 + Math_fround($12_1 + Math_fround($11 * $11))))) / $7_1);
   HEAPF32[$3_1 + 4 >> 2] = $7_1;
   HEAPF32[$3_1 + 8 >> 2] = Math_fround(1.0) - Math_fround($10 + $7_1);
   $6_1 = Math_fround(Math_fround($8_1 * $8_1) + Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1)));
  }
  return $6_1;
 }
 
 function $541($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0);
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 92 >> 2] = $3_1;
  HEAP32[$6_1 + 88 >> 2] = $2_1;
  HEAP32[$6_1 + 84 >> 2] = $1_1;
  HEAP32[$6_1 + 80 >> 2] = $0;
  HEAP32[$6_1 + 60 >> 2] = 0;
  $22_1 = HEAPF32[$1_1 + 8 >> 2];
  $20 = HEAPF32[$3_1 + 8 >> 2];
  $11 = Math_fround($22_1 - $20);
  HEAPF32[$6_1 + 56 >> 2] = $11;
  $23_1 = HEAPF32[$1_1 + 4 >> 2];
  $21 = HEAPF32[$3_1 + 4 >> 2];
  $24_1 = Math_fround($23_1 - $21);
  HEAPF32[$6_1 + 52 >> 2] = $24_1;
  HEAP32[$6_1 + 44 >> 2] = 0;
  $25 = HEAPF32[$0 + 8 >> 2];
  $14 = Math_fround($25 - $20);
  HEAPF32[$6_1 + 40 >> 2] = $14;
  $29_1 = HEAPF32[$0 + 4 >> 2];
  $16_1 = Math_fround($29_1 - $21);
  HEAPF32[$6_1 + 36 >> 2] = $16_1;
  $30 = HEAPF32[$0 >> 2];
  $28_1 = HEAPF32[$3_1 >> 2];
  $18_1 = Math_fround($30 - $28_1);
  HEAPF32[$6_1 + 32 >> 2] = $18_1;
  $26_1 = HEAPF32[$1_1 >> 2];
  $7_1 = Math_fround($26_1 - $28_1);
  HEAPF32[$6_1 + 48 >> 2] = $7_1;
  $27_1 = HEAPF32[$2_1 >> 2];
  $12_1 = HEAPF32[$2_1 + 4 >> 2];
  $31_1 = HEAPF32[$2_1 + 8 >> 2];
  HEAP32[$6_1 + 76 >> 2] = 0;
  $8_1 = Math_fround($31_1 - $20);
  HEAPF32[$6_1 + 72 >> 2] = $8_1;
  $10 = Math_fround($12_1 - $21);
  HEAPF32[$6_1 + 68 >> 2] = $10;
  $13_1 = Math_fround($27_1 - $28_1);
  HEAPF32[$6_1 + 64 >> 2] = $13_1;
  $9_1 = Math_fround(-1.0);
  $32 = Math_fround($18_1 * $24_1);
  $33_1 = Math_fround($16_1 * $11);
  $34 = Math_fround($14 * $7_1);
  $35 = Math_fround($18_1 * $11);
  $19_1 = Math_fround($16_1 * $7_1);
  $24_1 = Math_fround($14 * $24_1);
  $11 = Math_fround(Math_fround(Math_fround($32 * $8_1) + Math_fround(Math_fround(Math_fround(Math_fround($33_1 * $13_1) + Math_fround($34 * $10)) - Math_fround($35 * $10)) - Math_fround($19_1 * $8_1))) - Math_fround($24_1 * $13_1));
  label$1 : {
   if ($11 == Math_fround(0.0) | $11 != $11) {
    break label$1
   }
   $15_1 = Math_fround($29_1 - $23_1);
   $27_1 = Math_fround($26_1 - $27_1);
   $26_1 = Math_fround($30 - $26_1);
   $23_1 = Math_fround($23_1 - $12_1);
   $12_1 = Math_fround($25 * Math_fround(Math_fround($15_1 * $27_1) - Math_fround($26_1 * $23_1)));
   $25 = Math_fround($25 - $22_1);
   $22_1 = Math_fround($22_1 - $31_1);
   if (!(Math_fround($11 * Math_fround($12_1 + Math_fround(Math_fround($30 * Math_fround(Math_fround($25 * $23_1) - Math_fround($15_1 * $22_1))) + Math_fround($29_1 * Math_fround(Math_fround($26_1 * $22_1) - Math_fround($25 * $27_1)))))) <= Math_fround(0.0))) {
    break label$1
   }
   HEAP32[$6_1 + 24 >> 2] = 0;
   HEAP32[$6_1 + 16 >> 2] = 0;
   HEAP32[$6_1 + 20 >> 2] = 0;
   HEAP32[$6_1 + 12 >> 2] = 0;
   if (!!(Math_fround($11 * Math_fround(Math_fround(Math_fround(Math_fround($33_1 - $24_1) * $28_1) + Math_fround($21 * Math_fround($34 - $35))) + Math_fround(Math_fround($32 - $19_1) * $20))) > Math_fround(0.0))) {
    $9_1 = $540(HEAP32[$6_1 + 80 >> 2], HEAP32[$6_1 + 84 >> 2], $3_1, $6_1 + 16 | 0, $6_1 + 12 | 0);
    HEAP32[$4_1 + 8 >> 2] = 0;
    $17_1 = HEAP32[$6_1 + 20 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 + 16 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $17_1;
    HEAP32[$4_1 + 12 >> 2] = HEAP32[$6_1 + 24 >> 2];
    $17_1 = HEAP32[$6_1 + 12 >> 2];
    HEAP32[$5_1 >> 2] = $17_1 & 2 | $17_1 << 1 & 8 | $17_1 & 1;
   }
   $20 = HEAPF32[$6_1 + 52 >> 2];
   $21 = HEAPF32[$6_1 + 56 >> 2];
   label$3 : {
    if (!(Math_fround($11 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($20 * $8_1) - Math_fround($21 * $10)) * HEAPF32[$3_1 >> 2]) + Math_fround(HEAPF32[$3_1 + 4 >> 2] * Math_fround(Math_fround($21 * $13_1) - Math_fround($8_1 * $7_1)))) + Math_fround(Math_fround(Math_fround($10 * $7_1) - Math_fround($20 * $13_1)) * HEAPF32[$3_1 + 8 >> 2]))) > Math_fround(0.0))) {
     break label$3
    }
    $7_1 = $540(HEAP32[$6_1 + 84 >> 2], HEAP32[$6_1 + 88 >> 2], $3_1, $6_1 + 16 | 0, $6_1 + 12 | 0);
    if ($7_1 < $9_1 ^ 1 ? !($9_1 < Math_fround(0.0)) : 0) {
     break label$3
    }
    HEAP32[$4_1 + 4 >> 2] = HEAP32[$6_1 + 16 >> 2];
    HEAP32[$4_1 >> 2] = 0;
    $17_1 = HEAP32[$6_1 + 24 >> 2];
    HEAP32[$4_1 + 8 >> 2] = HEAP32[$6_1 + 20 >> 2];
    HEAP32[$4_1 + 12 >> 2] = $17_1;
    HEAP32[$5_1 >> 2] = HEAP32[$6_1 + 12 >> 2] << 1 & 14;
    $9_1 = $7_1;
   }
   label$5 : {
    if (!(Math_fround($11 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($10 * $14) - Math_fround($8_1 * $16_1)) * HEAPF32[$3_1 >> 2]) + Math_fround(HEAPF32[$3_1 + 4 >> 2] * Math_fround(Math_fround($8_1 * $18_1) - Math_fround($14 * $13_1)))) + Math_fround(Math_fround(Math_fround($16_1 * $13_1) - Math_fround($10 * $18_1)) * HEAPF32[$3_1 + 8 >> 2]))) > Math_fround(0.0))) {
     break label$5
    }
    $7_1 = $540(HEAP32[$6_1 + 88 >> 2], HEAP32[$6_1 + 80 >> 2], $3_1, $6_1 + 16 | 0, $6_1 + 12 | 0);
    if ($7_1 < $9_1 ^ 1 ? !($9_1 < Math_fround(0.0)) : 0) {
     break label$5
    }
    HEAP32[$4_1 + 8 >> 2] = HEAP32[$6_1 + 16 >> 2];
    HEAP32[$4_1 + 4 >> 2] = 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 + 20 >> 2];
    HEAP32[$4_1 + 12 >> 2] = HEAP32[$6_1 + 24 >> 2];
    $17_1 = HEAP32[$6_1 + 12 >> 2];
    HEAP32[$5_1 >> 2] = $17_1 >>> 1 & 1 | $17_1 << 1 & 8 | $17_1 << 2 & 4;
    $9_1 = $7_1;
   }
   if (!($9_1 < Math_fround(0.0))) {
    break label$1
   }
   $9_1 = HEAPF32[$2_1 + 4 >> 2];
   $7_1 = HEAPF32[$1_1 + 8 >> 2];
   $8_1 = HEAPF32[$3_1 >> 2];
   $10 = HEAPF32[$2_1 + 8 >> 2];
   $13_1 = HEAPF32[$1_1 >> 2];
   $14 = HEAPF32[$3_1 + 4 >> 2];
   $19_1 = Math_fround(Math_fround(Math_fround($9_1 * $7_1) * $8_1) + Math_fround(Math_fround($10 * $13_1) * $14));
   $12_1 = $7_1;
   $7_1 = HEAPF32[$2_1 >> 2];
   $15_1 = Math_fround($9_1 * $13_1);
   $9_1 = HEAPF32[$3_1 + 8 >> 2];
   $15_1 = Math_fround(Math_fround($19_1 - Math_fround($14 * Math_fround($12_1 * $7_1))) - Math_fround($15_1 * $9_1));
   $12_1 = $9_1;
   $9_1 = HEAPF32[$1_1 + 4 >> 2];
   $9_1 = Math_fround(Math_fround(Math_fround($15_1 + Math_fround($12_1 * Math_fround($7_1 * $9_1))) - Math_fround($8_1 * Math_fround($10 * $9_1))) / $11);
   HEAPF32[$4_1 >> 2] = $9_1;
   $7_1 = HEAPF32[$0 + 4 >> 2];
   $8_1 = HEAPF32[$2_1 + 8 >> 2];
   $10 = HEAPF32[$3_1 >> 2];
   $13_1 = HEAPF32[$0 + 8 >> 2];
   $14 = HEAPF32[$2_1 >> 2];
   $16_1 = HEAPF32[$3_1 + 4 >> 2];
   $19_1 = Math_fround(Math_fround(Math_fround($7_1 * $8_1) * $10) + Math_fround(Math_fround($13_1 * $14) * $16_1));
   $12_1 = $8_1;
   $8_1 = HEAPF32[$0 >> 2];
   $15_1 = Math_fround($7_1 * $14);
   $7_1 = HEAPF32[$3_1 + 8 >> 2];
   $15_1 = Math_fround(Math_fround($19_1 - Math_fround($16_1 * Math_fround($12_1 * $8_1))) - Math_fround($15_1 * $7_1));
   $12_1 = $7_1;
   $7_1 = HEAPF32[$2_1 + 4 >> 2];
   $7_1 = Math_fround(Math_fround(Math_fround($15_1 + Math_fround($12_1 * Math_fround($8_1 * $7_1))) - Math_fround($10 * Math_fround($13_1 * $7_1))) / $11);
   HEAPF32[$4_1 + 4 >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = 15;
   $8_1 = HEAPF32[$1_1 + 4 >> 2];
   $10 = HEAPF32[$0 + 8 >> 2];
   $13_1 = HEAPF32[$3_1 >> 2];
   $14 = HEAPF32[$1_1 + 8 >> 2];
   $16_1 = HEAPF32[$0 >> 2];
   $18_1 = HEAPF32[$3_1 + 4 >> 2];
   $19_1 = Math_fround(Math_fround(Math_fround($8_1 * $10) * $13_1) + Math_fround(Math_fround($14 * $16_1) * $18_1));
   $12_1 = $10;
   $10 = HEAPF32[$1_1 >> 2];
   $15_1 = Math_fround($8_1 * $16_1);
   $8_1 = HEAPF32[$3_1 + 8 >> 2];
   $15_1 = Math_fround(Math_fround($19_1 - Math_fround($18_1 * Math_fround($12_1 * $10))) - Math_fround($15_1 * $8_1));
   $12_1 = $8_1;
   $8_1 = HEAPF32[$0 + 4 >> 2];
   $11 = Math_fround(Math_fround(Math_fround($15_1 + Math_fround($12_1 * Math_fround($10 * $8_1))) - Math_fround($13_1 * Math_fround($14 * $8_1))) / $11);
   HEAPF32[$4_1 + 8 >> 2] = $11;
   HEAPF32[$4_1 + 12 >> 2] = Math_fround(1.0) - Math_fround(Math_fround($9_1 + $7_1) + $11);
   $9_1 = Math_fround(0.0);
  }
  global$0 = $6_1 + 96 | 0;
  return $9_1;
 }
 
 function $542($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0, $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = 0;
  $6_1 = global$0 - 19040 | 0;
  global$0 = $6_1;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$5_1 + 32 >> 2] = 0;
  $11 = $5_1 + 24 | 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  $11 = $5_1 + 16 | 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  $11 = $5_1 + 8 | 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  HEAP32[$6_1 + 18916 >> 2] = $2_1;
  HEAP32[$6_1 + 18912 >> 2] = $0;
  $7_1 = HEAPF32[$3_1 + 20 >> 2];
  $8_1 = HEAPF32[$3_1 + 36 >> 2];
  $0 = $1_1 + 20 | 0;
  $9_1 = HEAPF32[$0 >> 2];
  $2_1 = $1_1 + 36 | 0;
  $10 = HEAPF32[$2_1 >> 2];
  $11 = $1_1 + 24 | 0;
  $14 = HEAPF32[$11 >> 2];
  $12_1 = HEAPF32[$3_1 + 24 >> 2];
  $27_1 = $1_1 + 40 | 0;
  $15_1 = HEAPF32[$27_1 >> 2];
  $13_1 = HEAPF32[$3_1 + 40 >> 2];
  $16_1 = HEAPF32[$3_1 + 32 >> 2];
  $17_1 = HEAPF32[$3_1 >> 2];
  $18_1 = HEAPF32[$3_1 + 16 >> 2];
  $19_1 = HEAPF32[$3_1 + 4 >> 2];
  $20 = HEAPF32[$1_1 + 32 >> 2];
  $21 = HEAPF32[$1_1 >> 2];
  $22_1 = HEAPF32[$1_1 + 16 >> 2];
  $25 = HEAPF32[$1_1 + 4 >> 2];
  $24_1 = HEAPF32[$1_1 + 8 >> 2];
  $23_1 = HEAPF32[$3_1 + 8 >> 2];
  HEAP32[$6_1 + 18964 >> 2] = 0;
  HEAP32[$6_1 + 18948 >> 2] = 0;
  HEAP32[$6_1 + 18932 >> 2] = 0;
  $26_1 = Math_fround(Math_fround(Math_fround($24_1 * $23_1) + Math_fround($14 * $12_1)) + Math_fround($15_1 * $13_1));
  HEAPF32[$6_1 + 18960 >> 2] = $26_1;
  $28_1 = Math_fround(Math_fround(Math_fround($25 * $23_1) + Math_fround($9_1 * $12_1)) + Math_fround($10 * $13_1));
  HEAPF32[$6_1 + 18956 >> 2] = $28_1;
  $12_1 = Math_fround(Math_fround(Math_fround($21 * $23_1) + Math_fround($22_1 * $12_1)) + Math_fround($20 * $13_1));
  HEAPF32[$6_1 + 18952 >> 2] = $12_1;
  $13_1 = Math_fround(Math_fround(Math_fround($24_1 * $19_1) + Math_fround($14 * $7_1)) + Math_fround($15_1 * $8_1));
  HEAPF32[$6_1 + 18944 >> 2] = $13_1;
  $23_1 = Math_fround(Math_fround(Math_fround($25 * $19_1) + Math_fround($9_1 * $7_1)) + Math_fround($10 * $8_1));
  HEAPF32[$6_1 + 18940 >> 2] = $23_1;
  $7_1 = Math_fround(Math_fround(Math_fround($21 * $19_1) + Math_fround($22_1 * $7_1)) + Math_fround($20 * $8_1));
  HEAPF32[$6_1 + 18936 >> 2] = $7_1;
  $8_1 = Math_fround(Math_fround(Math_fround($17_1 * $24_1) + Math_fround($18_1 * $14)) + Math_fround($16_1 * $15_1));
  HEAPF32[$6_1 + 18928 >> 2] = $8_1;
  $9_1 = Math_fround(Math_fround(Math_fround($17_1 * $25) + Math_fround($18_1 * $9_1)) + Math_fround($16_1 * $10));
  HEAPF32[$6_1 + 18924 >> 2] = $9_1;
  $10 = Math_fround(Math_fround(Math_fround($17_1 * $21) + Math_fround($18_1 * $22_1)) + Math_fround($16_1 * $20));
  HEAPF32[$6_1 + 18920 >> 2] = $10;
  $14 = HEAPF32[$0 >> 2];
  $15_1 = HEAPF32[$2_1 >> 2];
  $16_1 = HEAPF32[$11 >> 2];
  $17_1 = HEAPF32[$3_1 + 52 >> 2];
  $18_1 = HEAPF32[$1_1 + 52 >> 2];
  $19_1 = HEAPF32[$27_1 >> 2];
  $20 = HEAPF32[$3_1 + 56 >> 2];
  $21 = HEAPF32[$1_1 + 56 >> 2];
  $22_1 = HEAPF32[$1_1 >> 2];
  $25 = HEAPF32[$1_1 + 16 >> 2];
  $24_1 = HEAPF32[$1_1 + 32 >> 2];
  $29_1 = HEAPF32[$1_1 + 4 >> 2];
  $30 = HEAPF32[$1_1 + 8 >> 2];
  $31_1 = HEAPF32[$3_1 + 48 >> 2];
  $32 = HEAPF32[$1_1 + 48 >> 2];
  HEAP32[$6_1 + 19036 >> 2] = 0;
  HEAP32[$6_1 + 19028 >> 2] = 0;
  HEAP32[$6_1 + 19012 >> 2] = 0;
  HEAPF32[$6_1 + 19008 >> 2] = $26_1;
  HEAPF32[$6_1 + 19004 >> 2] = $13_1;
  HEAPF32[$6_1 + 19e3 >> 2] = $8_1;
  HEAP32[$6_1 + 18996 >> 2] = 0;
  HEAPF32[$6_1 + 18992 >> 2] = $28_1;
  HEAPF32[$6_1 + 18988 >> 2] = $23_1;
  HEAPF32[$6_1 + 18984 >> 2] = $9_1;
  HEAP32[$6_1 + 18980 >> 2] = 0;
  HEAPF32[$6_1 + 18976 >> 2] = $12_1;
  HEAPF32[$6_1 + 18972 >> 2] = $7_1;
  $7_1 = Math_fround($31_1 - $32);
  $8_1 = Math_fround($17_1 - $18_1);
  $9_1 = Math_fround($20 - $21);
  HEAPF32[$6_1 + 19024 >> 2] = Math_fround(Math_fround($30 * $7_1) + Math_fround($16_1 * $8_1)) + Math_fround($19_1 * $9_1);
  HEAPF32[$6_1 + 19020 >> 2] = Math_fround(Math_fround($7_1 * $29_1) + Math_fround($8_1 * $14)) + Math_fround($9_1 * $15_1);
  HEAPF32[$6_1 + 19016 >> 2] = Math_fround(Math_fround($7_1 * $22_1) + Math_fround($8_1 * $25)) + Math_fround($9_1 * $24_1);
  HEAP32[$6_1 + 19032 >> 2] = 349;
  HEAPF32[$6_1 + 18968 >> 2] = $10;
  $0 = $6_1 + 18664 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$6_1 + 18656 >> 2] = 0;
  HEAP32[$6_1 + 18660 >> 2] = 0;
  HEAP32[$6_1 + 18892 >> 2] = 0;
  HEAP32[$6_1 + 18896 >> 2] = 0;
  HEAP32[$6_1 + 18904 >> 2] = 2;
  HEAP32[$6_1 + 18672 >> 2] = 0;
  HEAP32[$6_1 + 28 >> 2] = 0;
  HEAPF32[$6_1 + 24 >> 2] = -HEAPF32[$4_1 + 8 >> 2];
  HEAPF32[$6_1 + 20 >> 2] = -HEAPF32[$4_1 + 4 >> 2];
  HEAPF32[$6_1 + 16 >> 2] = -HEAPF32[$4_1 >> 2];
  $0 = $538($6_1 + 18528 | 0, $6_1 + 18912 | 0, $6_1 + 16 | 0) + -1 | 0;
  label$1 : {
   if ($0 >>> 0 > 1) {
    break label$1
   }
   label$2 : {
    if ($0 - 1) {
     $0 = $6_1 + 18520 | 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     $0 = $6_1 - -64 | 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$6_1 + 72 >> 2] = 0;
     HEAP32[$6_1 + 18512 >> 2] = 0;
     HEAP32[$6_1 + 18516 >> 2] = 0;
     HEAP32[$6_1 + 18508 >> 2] = 0;
     HEAP32[$6_1 + 16 >> 2] = 9;
     HEAP32[$6_1 + 56 >> 2] = 0;
     HEAP32[$6_1 + 60 >> 2] = 0;
     $3_1 = 14336;
     while (1) {
      $0 = ($6_1 + 16 | 0) + $3_1 | 0;
      HEAP32[$0 + 4144 >> 2] = 0;
      $2_1 = HEAP32[$6_1 + 18520 >> 2];
      HEAP32[$0 + 4148 >> 2] = $2_1;
      $0 = $0 + 4100 | 0;
      if ($2_1) {
       HEAP32[$2_1 + 44 >> 2] = $0
      }
      HEAP32[$6_1 + 18520 >> 2] = $0;
      $3_1 = $3_1 + -56 | 0;
      if ($3_1) {
       continue
      }
      break;
     };
     HEAP32[$6_1 + 18524 >> 2] = 256;
     HEAP32[$6_1 + 12 >> 2] = 0;
     HEAPF32[$6_1 + 8 >> 2] = -HEAPF32[$4_1 + 8 >> 2];
     HEAPF32[$6_1 + 4 >> 2] = -HEAPF32[$4_1 + 4 >> 2];
     HEAPF32[$6_1 >> 2] = -HEAPF32[$4_1 >> 2];
     if (($543($6_1 + 16 | 0, $6_1 + 18528 | 0, $6_1) | 0) != 9) {
      if (!HEAP32[$6_1 + 52 >> 2]) {
       $7_1 = Math_fround(0.0);
       $8_1 = Math_fround(0.0);
       $9_1 = Math_fround(0.0);
       break label$2;
      }
      $3_1 = $6_1 + 36 | 0;
      $9_1 = Math_fround(0.0);
      $4_1 = 0;
      $8_1 = Math_fround(0.0);
      $7_1 = Math_fround(0.0);
      while (1) {
       $0 = HEAP32[$6_1 + 19036 >> 2];
       $2_1 = HEAP32[$6_1 + 18912 >> 2] + ($0 >> 1) | 0;
       $11 = HEAP32[$6_1 + 19032 >> 2];
       FUNCTION_TABLE[$0 & 1 ? HEAP32[$11 + HEAP32[$2_1 >> 2] >> 2] : $11]($6_1, $2_1, HEAP32[$3_1 + -16 >> 2]);
       $10 = HEAPF32[$3_1 >> 2];
       $9_1 = Math_fround($9_1 + Math_fround($10 * HEAPF32[$6_1 + 8 >> 2]));
       $8_1 = Math_fround($8_1 + Math_fround($10 * HEAPF32[$6_1 + 4 >> 2]));
       $7_1 = Math_fround($7_1 + Math_fround(HEAPF32[$6_1 >> 2] * $10));
       $3_1 = $3_1 + 4 | 0;
       $4_1 = $4_1 + 1 | 0;
       if ($4_1 >>> 0 < HEAPU32[$6_1 + 52 >> 2]) {
        continue
       }
       break;
      };
      break label$2;
     }
     HEAP32[$5_1 >> 2] = 3;
     break label$1;
    }
    HEAP32[$5_1 >> 2] = 2;
    break label$1;
   }
   $10 = HEAPF32[$1_1 + 48 >> 2];
   $14 = HEAPF32[$1_1 + 8 >> 2];
   $12_1 = HEAPF32[$1_1 >> 2];
   $15_1 = HEAPF32[$1_1 + 4 >> 2];
   $13_1 = HEAPF32[$1_1 + 52 >> 2];
   $16_1 = HEAPF32[$1_1 + 24 >> 2];
   $17_1 = HEAPF32[$1_1 + 16 >> 2];
   $18_1 = HEAPF32[$1_1 + 20 >> 2];
   $19_1 = HEAPF32[$1_1 + 56 >> 2];
   $20 = HEAPF32[$1_1 + 40 >> 2];
   $21 = HEAPF32[$1_1 + 32 >> 2];
   $22_1 = HEAPF32[$1_1 + 36 >> 2];
   HEAP32[$5_1 + 16 >> 2] = 0;
   HEAPF32[$5_1 + 12 >> 2] = $19_1 + Math_fround(Math_fround(Math_fround($7_1 * $21) + Math_fround($8_1 * $22_1)) + Math_fround($9_1 * $20));
   HEAPF32[$5_1 + 8 >> 2] = $13_1 + Math_fround(Math_fround(Math_fround($7_1 * $17_1) + Math_fround($8_1 * $18_1)) + Math_fround($9_1 * $16_1));
   HEAPF32[$5_1 + 4 >> 2] = $10 + Math_fround(Math_fround(Math_fround($7_1 * $12_1) + Math_fround($8_1 * $15_1)) + Math_fround($9_1 * $14));
   $33_1 = 1;
   HEAP32[$5_1 >> 2] = 1;
   $14 = HEAPF32[$1_1 + 56 >> 2];
   $12_1 = HEAPF32[$1_1 + 40 >> 2];
   $15_1 = HEAPF32[$1_1 + 32 >> 2];
   $13_1 = HEAPF32[$1_1 + 36 >> 2];
   $16_1 = HEAPF32[$1_1 + 52 >> 2];
   $17_1 = HEAPF32[$1_1 + 24 >> 2];
   $18_1 = HEAPF32[$1_1 + 16 >> 2];
   $19_1 = HEAPF32[$1_1 + 20 >> 2];
   $20 = HEAPF32[$1_1 + 48 >> 2];
   $21 = HEAPF32[$1_1 + 8 >> 2];
   $22_1 = HEAPF32[$1_1 >> 2];
   $25 = HEAPF32[$1_1 + 4 >> 2];
   HEAP32[$5_1 + 32 >> 2] = 0;
   HEAP32[$5_1 + 48 >> 2] = 0;
   $24_1 = HEAPF32[$6_1 + 56 >> 2];
   HEAPF32[$5_1 + 36 >> 2] = -$24_1;
   $23_1 = HEAPF32[$6_1 + 60 >> 2];
   HEAPF32[$5_1 + 40 >> 2] = -$23_1;
   $26_1 = HEAPF32[$6_1 - -64 >> 2];
   HEAPF32[$5_1 + 44 >> 2] = -$26_1;
   $10 = HEAPF32[$6_1 + 72 >> 2];
   HEAPF32[$5_1 + 52 >> 2] = -$10;
   $7_1 = Math_fround($7_1 - Math_fround($24_1 * $10));
   $8_1 = Math_fround($8_1 - Math_fround($10 * $23_1));
   $9_1 = Math_fround($9_1 - Math_fround($10 * $26_1));
   HEAPF32[$5_1 + 20 >> 2] = $20 + Math_fround(Math_fround(Math_fround($22_1 * $7_1) + Math_fround($25 * $8_1)) + Math_fround($21 * $9_1));
   HEAPF32[$5_1 + 24 >> 2] = $16_1 + Math_fround(Math_fround(Math_fround($7_1 * $18_1) + Math_fround($8_1 * $19_1)) + Math_fround($9_1 * $17_1));
   HEAPF32[$5_1 + 28 >> 2] = $14 + Math_fround(Math_fround(Math_fround($7_1 * $15_1) + Math_fround($8_1 * $13_1)) + Math_fround($9_1 * $12_1));
  }
  global$0 = $6_1 + 19040 | 0;
  return $33_1;
 }
 
 function $543($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20 = 0, $21 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0);
  $19_1 = global$0 - 16 | 0;
  global$0 = $19_1;
  label$1 : {
   label$2 : {
    $9_1 = HEAP32[$1_1 + 372 >> 2];
    if (HEAPU32[$9_1 + 32 >> 2] < 2) {
     break label$2
    }
    if (!$544($1_1)) {
     break label$2
    }
    $3_1 = HEAP32[$0 + 18496 >> 2];
    if ($3_1) {
     $4_1 = HEAP32[$0 + 18508 >> 2];
     $8_1 = HEAP32[$0 + 18500 >> 2];
     while (1) {
      $7_1 = HEAP32[$3_1 + 48 >> 2];
      if ($7_1) {
       HEAP32[$7_1 + 44 >> 2] = HEAP32[$3_1 + 44 >> 2]
      }
      $7_1 = HEAP32[$3_1 + 44 >> 2];
      if ($7_1) {
       HEAP32[$7_1 + 48 >> 2] = HEAP32[$3_1 + 48 >> 2]
      }
      if (($3_1 | 0) == HEAP32[$0 + 18496 >> 2]) {
       HEAP32[$0 + 18496 >> 2] = HEAP32[$3_1 + 48 >> 2]
      }
      HEAP32[$3_1 + 44 >> 2] = 0;
      HEAP32[$3_1 + 48 >> 2] = HEAP32[$0 + 18504 >> 2];
      $7_1 = HEAP32[$0 + 18504 >> 2];
      if ($7_1) {
       HEAP32[$7_1 + 44 >> 2] = $3_1
      }
      $8_1 = $8_1 + -1 | 0;
      HEAP32[$0 + 18504 >> 2] = $3_1;
      $4_1 = $4_1 + 1 | 0;
      $3_1 = HEAP32[$0 + 18496 >> 2];
      if ($3_1) {
       continue
      }
      break;
     };
     HEAP32[$0 + 18508 >> 2] = $4_1;
     HEAP32[$0 + 18500 >> 2] = $8_1;
    }
    HEAP32[$0 + 18492 >> 2] = 0;
    HEAP32[$0 >> 2] = 0;
    $4_1 = HEAP32[$9_1 >> 2];
    $8_1 = HEAP32[$9_1 + 12 >> 2];
    $5_1 = HEAPF32[$8_1 + 16 >> 2];
    $14 = Math_fround(HEAPF32[$4_1 + 16 >> 2] - $5_1);
    $3_1 = HEAP32[$9_1 + 4 >> 2];
    $6_1 = HEAPF32[$8_1 + 20 >> 2];
    $11 = Math_fround(HEAPF32[$3_1 + 20 >> 2] - $6_1);
    $7_1 = HEAP32[$9_1 + 8 >> 2];
    $10 = HEAPF32[$8_1 + 24 >> 2];
    $12_1 = Math_fround(HEAPF32[$7_1 + 24 >> 2] - $10);
    $13_1 = Math_fround(HEAPF32[$4_1 + 20 >> 2] - $6_1);
    $17_1 = Math_fround(HEAPF32[$3_1 + 24 >> 2] - $10);
    $18_1 = Math_fround(HEAPF32[$7_1 + 16 >> 2] - $5_1);
    $10 = Math_fround(HEAPF32[$4_1 + 24 >> 2] - $10);
    $5_1 = Math_fround(HEAPF32[$3_1 + 16 >> 2] - $5_1);
    $6_1 = Math_fround(HEAPF32[$7_1 + 20 >> 2] - $6_1);
    label$9 : {
     if (!(Math_fround(Math_fround(Math_fround(Math_fround($14 * $11) * $12_1) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $17_1) * $18_1) + Math_fround(Math_fround($10 * $5_1) * $6_1)) - Math_fround(Math_fround($14 * $17_1) * $6_1)) - Math_fround(Math_fround($13_1 * $5_1) * $12_1))) - Math_fround(Math_fround($10 * $11) * $18_1)) < Math_fround(0.0))) {
      $8_1 = $3_1;
      $3_1 = $4_1;
      break label$9;
     }
     HEAP32[$9_1 + 4 >> 2] = $4_1;
     HEAP32[$9_1 >> 2] = $3_1;
     $8_1 = HEAP32[$9_1 + 16 >> 2];
     $15_1 = $9_1 + 20 | 0;
     HEAP32[$9_1 + 16 >> 2] = HEAP32[$15_1 >> 2];
     HEAP32[$15_1 >> 2] = $8_1;
     $8_1 = $4_1;
    }
    $8_1 = $545($0, $3_1, $8_1, $7_1, 1);
    $7_1 = $545($0, HEAP32[$9_1 + 4 >> 2], HEAP32[$9_1 >> 2], HEAP32[$9_1 + 12 >> 2], 1);
    $16_1 = $545($0, HEAP32[$9_1 + 8 >> 2], HEAP32[$9_1 + 4 >> 2], HEAP32[$9_1 + 12 >> 2], 1);
    $15_1 = $545($0, HEAP32[$9_1 >> 2], HEAP32[$9_1 + 8 >> 2], HEAP32[$9_1 + 12 >> 2], 1);
    if (HEAP32[$0 + 18500 >> 2] != 4) {
     break label$2
    }
    $4_1 = HEAP32[$0 + 18496 >> 2];
    $5_1 = HEAPF32[$4_1 + 16 >> 2];
    $3_1 = HEAP32[$4_1 + 48 >> 2];
    if ($3_1) {
     $5_1 = Math_fround($5_1 * $5_1);
     while (1) {
      $6_1 = HEAPF32[$3_1 + 16 >> 2];
      $6_1 = Math_fround($6_1 * $6_1);
      $2_1 = $6_1 < $5_1;
      $4_1 = $2_1 ? $3_1 : $4_1;
      $5_1 = $2_1 ? $6_1 : $5_1;
      $3_1 = HEAP32[$3_1 + 48 >> 2];
      if ($3_1) {
       continue
      }
      break;
     };
     $5_1 = HEAPF32[$4_1 + 16 >> 2];
    }
    $2_1 = HEAP32[$4_1 + 28 >> 2];
    $9_1 = HEAP32[$4_1 + 24 >> 2];
    $20 = HEAP32[$4_1 + 20 >> 2];
    $11 = HEAPF32[$4_1 + 12 >> 2];
    $14 = HEAPF32[$4_1 + 8 >> 2];
    $10 = HEAPF32[$4_1 + 4 >> 2];
    $6_1 = HEAPF32[$4_1 >> 2];
    HEAP32[$8_1 + 32 >> 2] = $7_1;
    HEAP8[$8_1 + 52 | 0] = 0;
    HEAP32[$7_1 + 32 >> 2] = $8_1;
    HEAP8[$7_1 + 52 | 0] = 0;
    HEAP32[$8_1 + 36 >> 2] = $16_1;
    HEAP8[$8_1 + 53 | 0] = 0;
    HEAP32[$16_1 + 32 >> 2] = $8_1;
    HEAP8[$16_1 + 52 | 0] = 1;
    HEAP32[$8_1 + 40 >> 2] = $15_1;
    HEAP8[$8_1 + 54 | 0] = 0;
    HEAP32[$15_1 + 32 >> 2] = $8_1;
    HEAP8[$15_1 + 52 | 0] = 2;
    HEAP32[$7_1 + 36 >> 2] = $15_1;
    HEAP8[$7_1 + 53 | 0] = 2;
    HEAP32[$15_1 + 40 >> 2] = $7_1;
    HEAP8[$15_1 + 54 | 0] = 1;
    HEAP32[$7_1 + 40 >> 2] = $16_1;
    HEAP8[$7_1 + 54 | 0] = 1;
    HEAP32[$16_1 + 36 >> 2] = $7_1;
    $3_1 = $16_1 + 53 | 0;
    HEAP8[$3_1 | 0] = 258;
    HEAP8[$3_1 + 1 | 0] = 1;
    HEAP32[$16_1 + 40 >> 2] = $15_1;
    HEAP8[$15_1 + 53 | 0] = 2;
    HEAP32[$15_1 + 36 >> 2] = $16_1;
    HEAP32[$0 >> 2] = 0;
    $7_1 = 0;
    while (1) {
     label$13 : {
      label$15 : {
       $3_1 = HEAP32[$0 + 18492 >> 2];
       if ($3_1 >>> 0 <= 127) {
        HEAP32[$0 + 18492 >> 2] = $3_1 + 1;
        $7_1 = $7_1 + 1 | 0;
        HEAP8[$4_1 + 55 | 0] = $7_1;
        HEAP32[$19_1 + 8 >> 2] = 0;
        HEAP32[$19_1 >> 2] = 0;
        HEAP32[$19_1 + 4 >> 2] = 0;
        $3_1 = ($3_1 << 5) + $0 | 0;
        $15_1 = $3_1 + 60 | 0;
        $539($1_1, $4_1, $15_1);
        if (!(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 >> 2] * HEAPF32[$3_1 + 76 >> 2]) + Math_fround(HEAPF32[$4_1 + 4 >> 2] * HEAPF32[$3_1 + 80 >> 2])) + Math_fround(HEAPF32[$4_1 + 8 >> 2] * HEAPF32[$3_1 + 84 >> 2])) - HEAPF32[$4_1 + 16 >> 2]) > Math_fround(9.999999747378752e-05))) {
         HEAP32[$0 >> 2] = 7;
         break label$13;
        }
        $8_1 = $4_1 + 32 | 0;
        $3_1 = 0;
        while (1) {
         $16_1 = $546($0, $7_1, $15_1, HEAP32[$8_1 >> 2], HEAPU8[($4_1 + $3_1 | 0) + 52 | 0], $19_1);
         if (!$16_1) {
          break label$15
         }
         $8_1 = $8_1 + 4 | 0;
         $22_1 = $3_1 >>> 0 < 2;
         $3_1 = $3_1 + 1 | 0;
         if ($22_1) {
          continue
         }
         break;
        };
        break label$15;
       }
       HEAP32[$0 >> 2] = 6;
       break label$13;
      }
      if (!($16_1 & HEAPU32[$19_1 + 8 >> 2] > 2)) {
       HEAP32[$0 >> 2] = 4;
       break label$13;
      }
      $2_1 = HEAP32[$19_1 >> 2];
      HEAP8[$2_1 + 53 | 0] = 2;
      $3_1 = HEAP32[$19_1 + 4 >> 2];
      HEAP32[$2_1 + 36 >> 2] = $3_1;
      HEAP32[$3_1 + 40 >> 2] = $2_1;
      HEAP8[$3_1 + 54 | 0] = 1;
      $2_1 = HEAP32[$4_1 + 48 >> 2];
      if ($2_1) {
       HEAP32[$2_1 + 44 >> 2] = HEAP32[$4_1 + 44 >> 2]
      }
      $2_1 = HEAP32[$4_1 + 44 >> 2];
      if ($2_1) {
       HEAP32[$2_1 + 48 >> 2] = HEAP32[$4_1 + 48 >> 2]
      }
      if (($4_1 | 0) == HEAP32[$0 + 18496 >> 2]) {
       HEAP32[$0 + 18496 >> 2] = HEAP32[$4_1 + 48 >> 2]
      }
      HEAP32[$4_1 + 44 >> 2] = 0;
      HEAP32[$4_1 + 48 >> 2] = HEAP32[$0 + 18504 >> 2];
      HEAP32[$0 + 18500 >> 2] = HEAP32[$0 + 18500 >> 2] + -1;
      $2_1 = HEAP32[$0 + 18504 >> 2];
      if ($2_1) {
       HEAP32[$2_1 + 44 >> 2] = $4_1
      }
      HEAP32[$0 + 18504 >> 2] = $4_1;
      HEAP32[$0 + 18508 >> 2] = HEAP32[$0 + 18508 >> 2] + 1;
      $4_1 = HEAP32[$0 + 18496 >> 2];
      $5_1 = HEAPF32[$4_1 + 16 >> 2];
      $3_1 = HEAP32[$4_1 + 48 >> 2];
      if ($3_1) {
       $5_1 = Math_fround($5_1 * $5_1);
       while (1) {
        $6_1 = HEAPF32[$3_1 + 16 >> 2];
        $6_1 = Math_fround($6_1 * $6_1);
        $2_1 = $6_1 < $5_1;
        $4_1 = $2_1 ? $3_1 : $4_1;
        $5_1 = $2_1 ? $6_1 : $5_1;
        $3_1 = HEAP32[$3_1 + 48 >> 2];
        if ($3_1) {
         continue
        }
        break;
       };
       $5_1 = HEAPF32[$4_1 + 16 >> 2];
      }
      $2_1 = HEAP32[$4_1 + 28 >> 2];
      $9_1 = HEAP32[$4_1 + 24 >> 2];
      $20 = HEAP32[$4_1 + 20 >> 2];
      $11 = HEAPF32[$4_1 + 12 >> 2];
      $14 = HEAPF32[$4_1 + 8 >> 2];
      $10 = HEAPF32[$4_1 + 4 >> 2];
      $6_1 = HEAPF32[$4_1 >> 2];
      if (($7_1 | 0) != 255) {
       continue
      }
     }
     break;
    };
    HEAPF32[$0 + 56 >> 2] = $5_1;
    HEAPF32[$0 + 40 >> 2] = $6_1;
    HEAPF32[$0 + 52 >> 2] = $11;
    HEAPF32[$0 + 48 >> 2] = $14;
    HEAPF32[$0 + 44 >> 2] = $10;
    $1_1 = $0 + 20 | 0;
    $6_1 = Math_fround($6_1 * $5_1);
    $11 = Math_fround(HEAPF32[$9_1 + 16 >> 2] - $6_1);
    $3_1 = $2_1 + 20 | 0;
    $10 = Math_fround($10 * $5_1);
    $12_1 = Math_fround(HEAPF32[$3_1 >> 2] - $10);
    $4_1 = $9_1 + 20 | 0;
    $13_1 = Math_fround(HEAPF32[$4_1 >> 2] - $10);
    $17_1 = Math_fround(HEAPF32[$2_1 + 16 >> 2] - $6_1);
    $18_1 = Math_fround(Math_fround($11 * $12_1) - Math_fround($13_1 * $17_1));
    $8_1 = $2_1 + 24 | 0;
    $5_1 = Math_fround($14 * $5_1);
    $14 = Math_fround(HEAPF32[$8_1 >> 2] - $5_1);
    $21 = Math_fround($13_1 * $14);
    $7_1 = $9_1 + 24 | 0;
    $13_1 = Math_fround(HEAPF32[$7_1 >> 2] - $5_1);
    $12_1 = Math_fround($21 - Math_fround($13_1 * $12_1));
    $14 = Math_fround(Math_fround($13_1 * $17_1) - Math_fround($11 * $14));
    $14 = Math_fround(Math_sqrt(Math_fround(Math_fround($18_1 * $18_1) + Math_fround(Math_fround($12_1 * $12_1) + Math_fround($14 * $14)))));
    HEAPF32[$1_1 >> 2] = $14;
    $15_1 = $0 + 24 | 0;
    $11 = Math_fround(HEAPF32[$2_1 + 16 >> 2] - $6_1);
    $16_1 = $20 + 20 | 0;
    $12_1 = Math_fround(HEAPF32[$16_1 >> 2] - $10);
    $13_1 = Math_fround(HEAPF32[$3_1 >> 2] - $10);
    $17_1 = Math_fround(HEAPF32[$20 + 16 >> 2] - $6_1);
    $18_1 = Math_fround(Math_fround($11 * $12_1) - Math_fround($13_1 * $17_1));
    $23_1 = Math_fround($18_1 * $18_1);
    $21 = $13_1;
    $3_1 = $20 + 24 | 0;
    $13_1 = Math_fround(HEAPF32[$3_1 >> 2] - $5_1);
    $18_1 = Math_fround(HEAPF32[$8_1 >> 2] - $5_1);
    $12_1 = Math_fround(Math_fround($21 * $13_1) - Math_fround($18_1 * $12_1));
    $11 = Math_fround(Math_fround($18_1 * $17_1) - Math_fround($11 * $13_1));
    $11 = Math_fround(Math_sqrt(Math_fround($23_1 + Math_fround(Math_fround($12_1 * $12_1) + Math_fround($11 * $11)))));
    HEAPF32[$15_1 >> 2] = $11;
    HEAP32[$0 + 4 >> 2] = $20;
    HEAP32[$0 + 36 >> 2] = 3;
    HEAP32[$0 + 12 >> 2] = $2_1;
    HEAP32[$0 + 8 >> 2] = $9_1;
    $12_1 = Math_fround(HEAPF32[$20 + 16 >> 2] - $6_1);
    $13_1 = Math_fround(HEAPF32[$4_1 >> 2] - $10);
    $10 = Math_fround(HEAPF32[$16_1 >> 2] - $10);
    $6_1 = Math_fround(HEAPF32[$9_1 + 16 >> 2] - $6_1);
    $17_1 = Math_fround(Math_fround($12_1 * $13_1) - Math_fround($10 * $6_1));
    $21 = $10;
    $10 = Math_fround(HEAPF32[$7_1 >> 2] - $5_1);
    $5_1 = Math_fround(HEAPF32[$3_1 >> 2] - $5_1);
    $13_1 = Math_fround(Math_fround($21 * $10) - Math_fround($5_1 * $13_1));
    $5_1 = Math_fround(Math_fround($5_1 * $6_1) - Math_fround($12_1 * $10));
    $6_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($17_1 * $17_1) + Math_fround(Math_fround($13_1 * $13_1) + Math_fround($5_1 * $5_1)))));
    $5_1 = Math_fround($6_1 + Math_fround($14 + $11));
    HEAPF32[$0 + 28 >> 2] = $6_1 / $5_1;
    HEAPF32[$15_1 >> 2] = $11 / $5_1;
    HEAPF32[$1_1 >> 2] = $14 / $5_1;
    $3_1 = HEAP32[$0 >> 2];
    break label$1;
   }
   HEAP32[$0 >> 2] = 8;
   $5_1 = HEAPF32[$2_1 + 8 >> 2];
   $6_1 = HEAPF32[$2_1 + 4 >> 2];
   $10 = HEAPF32[$2_1 >> 2];
   HEAP32[$0 + 52 >> 2] = 0;
   $14 = Math_fround(-$10);
   HEAPF32[$0 + 40 >> 2] = $14;
   $11 = Math_fround(-$6_1);
   HEAPF32[$0 + 44 >> 2] = $11;
   $12_1 = Math_fround(-$5_1);
   HEAPF32[$0 + 48 >> 2] = $12_1;
   $5_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($6_1 * $6_1)) + Math_fround($5_1 * $5_1))));
   label$26 : {
    if (!!($5_1 > Math_fround(0.0))) {
     $5_1 = Math_fround(Math_fround(1.0) / $5_1);
     HEAPF32[$0 + 48 >> 2] = $5_1 * $12_1;
     HEAPF32[$0 + 44 >> 2] = $5_1 * $11;
     HEAPF32[$0 + 40 >> 2] = $5_1 * $14;
     break label$26;
    }
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = 1065353216;
    HEAP32[$0 + 44 >> 2] = 0;
   }
   HEAP32[$0 + 52 >> 2] = 0;
   HEAP32[$0 + 56 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = 1;
   HEAP32[$0 + 20 >> 2] = 1065353216;
   HEAP32[$0 + 4 >> 2] = HEAP32[$9_1 >> 2];
   $3_1 = 8;
  }
  global$0 = $19_1 + 16 | 0;
  return $3_1;
 }
 
 function $544($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[$0 + 372 >> 2];
    $2_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
    label$3 : {
     if ($2_1 >>> 0 > 3) {
      break label$3
     }
     label$4 : {
      label$5 : {
       switch ($2_1 - 1 | 0) {
       default:
        HEAP32[$3_1 + 28 >> 2] = 0;
        HEAP32[$1_1 + 32 >> 2] = 2;
        HEAP32[$1_1 + 20 >> 2] = 0;
        $2_1 = HEAP32[$0 + 364 >> 2] + -1 | 0;
        HEAP32[$0 + 364 >> 2] = $2_1;
        HEAP32[$3_1 + 20 >> 2] = 0;
        HEAP32[$3_1 + 24 >> 2] = 0;
        $4_1 = $1_1;
        $1_1 = HEAP32[(($2_1 << 2) + $0 | 0) + 348 >> 2];
        HEAP32[$4_1 + 4 >> 2] = $1_1;
        HEAP32[$3_1 + 16 >> 2] = 1065353216;
        $539($0, $3_1 + 16 | 0, $1_1);
        if ($544($0)) {
         break label$2
        }
        $4_1 = HEAP32[$0 + 364 >> 2];
        $1_1 = HEAP32[$0 + 372 >> 2];
        $5_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
        $2_1 = HEAP32[($5_1 << 2) + $1_1 >> 2];
        HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2] = $2_1;
        HEAP32[$1_1 + 32 >> 2] = $5_1;
        $1_1 = HEAP32[$0 + 372 >> 2];
        HEAP32[$0 + 364 >> 2] = $4_1;
        $4_1 = HEAP32[$1_1 + 32 >> 2];
        HEAP32[$1_1 + 32 >> 2] = $4_1 + 1;
        $1_1 = $1_1 + ($4_1 << 2) | 0;
        HEAP32[$1_1 >> 2] = $2_1;
        HEAP32[$3_1 + 12 >> 2] = 0;
        HEAPF32[$3_1 + 8 >> 2] = -HEAPF32[$3_1 + 24 >> 2];
        HEAPF32[$3_1 + 4 >> 2] = -HEAPF32[$3_1 + 20 >> 2];
        HEAPF32[$3_1 >> 2] = -HEAPF32[$3_1 + 16 >> 2];
        HEAP32[$1_1 + 16 >> 2] = 0;
        $539($0, $3_1, $2_1);
        if ($544($0)) {
         break label$2
        }
        $1_1 = HEAP32[$0 + 372 >> 2];
        $2_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
        HEAP32[$1_1 + 32 >> 2] = $2_1;
        $4_1 = HEAP32[$0 + 364 >> 2];
        $1_1 = HEAP32[$1_1 + ($2_1 << 2) >> 2];
        HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2] = $1_1;
        $2_1 = $3_1 + 24 | 0;
        HEAP32[$2_1 >> 2] = 0;
        HEAP32[$2_1 + 4 >> 2] = 0;
        HEAP32[$0 + 364 >> 2] = $4_1;
        $2_1 = HEAP32[$0 + 372 >> 2];
        $4_1 = HEAP32[$2_1 + 32 >> 2];
        HEAP32[$2_1 + 32 >> 2] = $4_1 + 1;
        HEAP32[$3_1 + 16 >> 2] = 0;
        HEAP32[$3_1 + 20 >> 2] = 0;
        $2_1 = $2_1 + ($4_1 << 2) | 0;
        HEAP32[$2_1 >> 2] = $1_1;
        HEAP32[$3_1 + 20 >> 2] = 1065353216;
        HEAP32[$2_1 + 16 >> 2] = 0;
        $539($0, $3_1 + 16 | 0, $1_1);
        if (!$544($0)) {
         break label$4
        }
        break label$2;
       case 0:
        $2_1 = HEAP32[$1_1 >> 2];
        $7_1 = HEAPF32[$2_1 + 20 >> 2];
        $4_1 = HEAP32[$1_1 + 4 >> 2];
        $6_1 = HEAPF32[$4_1 + 20 >> 2];
        $8_1 = HEAPF32[$2_1 + 24 >> 2];
        $9_1 = HEAPF32[$4_1 + 24 >> 2];
        $12_1 = HEAPF32[$2_1 + 16 >> 2];
        $10 = HEAPF32[$4_1 + 16 >> 2];
        HEAP32[$3_1 + 28 >> 2] = 0;
        $13_1 = Math_fround($6_1 - $7_1);
        $7_1 = Math_fround($13_1 * Math_fround(0.0));
        $9_1 = Math_fround($9_1 - $8_1);
        $6_1 = Math_fround($9_1 * Math_fround(0.0));
        $11 = Math_fround($7_1 - $6_1);
        HEAPF32[$3_1 + 16 >> 2] = $11;
        $12_1 = Math_fround($10 - $12_1);
        $8_1 = Math_fround($12_1 * Math_fround(0.0));
        $10 = Math_fround($9_1 - $8_1);
        HEAPF32[$3_1 + 20 >> 2] = $10;
        $14 = Math_fround($8_1 - $13_1);
        HEAPF32[$3_1 + 24 >> 2] = $14;
        if (!!(Math_fround(Math_fround($14 * $14) + Math_fround(Math_fround($11 * $11) + Math_fround($10 * $10))) > Math_fround(0.0))) {
         HEAP32[$1_1 + 32 >> 2] = 3;
         HEAP32[$1_1 + 24 >> 2] = 0;
         $2_1 = HEAP32[$0 + 364 >> 2] + -1 | 0;
         HEAP32[$0 + 364 >> 2] = $2_1;
         $4_1 = $1_1;
         $1_1 = HEAP32[(($2_1 << 2) + $0 | 0) + 348 >> 2];
         HEAP32[$4_1 + 8 >> 2] = $1_1;
         $539($0, $3_1 + 16 | 0, $1_1);
         if ($544($0)) {
          break label$2
         }
         $4_1 = HEAP32[$0 + 364 >> 2];
         $1_1 = HEAP32[$0 + 372 >> 2];
         $5_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
         $2_1 = HEAP32[($5_1 << 2) + $1_1 >> 2];
         HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2] = $2_1;
         HEAP32[$1_1 + 32 >> 2] = $5_1;
         $1_1 = HEAP32[$0 + 372 >> 2];
         HEAP32[$0 + 364 >> 2] = $4_1;
         $4_1 = HEAP32[$1_1 + 32 >> 2];
         HEAP32[$1_1 + 32 >> 2] = $4_1 + 1;
         $1_1 = $1_1 + ($4_1 << 2) | 0;
         HEAP32[$1_1 >> 2] = $2_1;
         HEAP32[$3_1 + 12 >> 2] = 0;
         HEAPF32[$3_1 + 8 >> 2] = -HEAPF32[$3_1 + 24 >> 2];
         HEAPF32[$3_1 + 4 >> 2] = -HEAPF32[$3_1 + 20 >> 2];
         HEAPF32[$3_1 >> 2] = -HEAPF32[$3_1 + 16 >> 2];
         HEAP32[$1_1 + 16 >> 2] = 0;
         $539($0, $3_1, $2_1);
         if ($544($0)) {
          break label$2
         }
         $4_1 = HEAP32[$0 + 364 >> 2];
         HEAP32[$0 + 364 >> 2] = $4_1 + 1;
         $1_1 = HEAP32[$0 + 372 >> 2];
         $2_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
         HEAP32[$1_1 + 32 >> 2] = $2_1;
         HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2] = HEAP32[$1_1 + ($2_1 << 2) >> 2];
        }
        HEAP32[$3_1 + 28 >> 2] = 0;
        $11 = Math_fround($6_1 - $8_1);
        HEAPF32[$3_1 + 20 >> 2] = $11;
        $9_1 = Math_fround($7_1 - $9_1);
        HEAPF32[$3_1 + 16 >> 2] = $9_1;
        $10 = Math_fround($12_1 - $7_1);
        HEAPF32[$3_1 + 24 >> 2] = $10;
        if (Math_fround(Math_fround($10 * $10) + Math_fround(Math_fround($9_1 * $9_1) + Math_fround($11 * $11))) > Math_fround(0.0)) {
         $4_1 = HEAP32[$0 + 364 >> 2] + -1 | 0;
         HEAP32[$0 + 364 >> 2] = $4_1;
         $1_1 = HEAP32[$0 + 372 >> 2];
         $2_1 = HEAP32[$1_1 + 32 >> 2];
         HEAP32[$1_1 + 32 >> 2] = $2_1 + 1;
         $1_1 = $1_1 + ($2_1 << 2) | 0;
         HEAP32[$1_1 + 16 >> 2] = 0;
         $2_1 = $1_1;
         $1_1 = HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2];
         HEAP32[$2_1 >> 2] = $1_1;
         $539($0, $3_1 + 16 | 0, $1_1);
         if ($544($0)) {
          break label$2
         }
         $4_1 = HEAP32[$0 + 364 >> 2];
         $1_1 = HEAP32[$0 + 372 >> 2];
         $5_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
         $2_1 = HEAP32[($5_1 << 2) + $1_1 >> 2];
         HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2] = $2_1;
         HEAP32[$1_1 + 32 >> 2] = $5_1;
         $1_1 = HEAP32[$0 + 372 >> 2];
         HEAP32[$0 + 364 >> 2] = $4_1;
         $4_1 = HEAP32[$1_1 + 32 >> 2];
         HEAP32[$1_1 + 32 >> 2] = $4_1 + 1;
         $1_1 = $1_1 + ($4_1 << 2) | 0;
         HEAP32[$1_1 >> 2] = $2_1;
         HEAP32[$3_1 + 12 >> 2] = 0;
         HEAPF32[$3_1 + 8 >> 2] = -HEAPF32[$3_1 + 24 >> 2];
         HEAPF32[$3_1 + 4 >> 2] = -HEAPF32[$3_1 + 20 >> 2];
         HEAPF32[$3_1 >> 2] = -HEAPF32[$3_1 + 16 >> 2];
         HEAP32[$1_1 + 16 >> 2] = 0;
         $539($0, $3_1, $2_1);
         if ($544($0)) {
          break label$2
         }
         $4_1 = HEAP32[$0 + 364 >> 2];
         HEAP32[$0 + 364 >> 2] = $4_1 + 1;
         $1_1 = HEAP32[$0 + 372 >> 2];
         $2_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
         HEAP32[$1_1 + 32 >> 2] = $2_1;
         HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2] = HEAP32[$1_1 + ($2_1 << 2) >> 2];
        }
        HEAP32[$3_1 + 28 >> 2] = 0;
        $9_1 = Math_fround($6_1 - $12_1);
        HEAPF32[$3_1 + 20 >> 2] = $9_1;
        $6_1 = Math_fround($13_1 - $6_1);
        HEAPF32[$3_1 + 16 >> 2] = $6_1;
        $7_1 = Math_fround($8_1 - $7_1);
        HEAPF32[$3_1 + 24 >> 2] = $7_1;
        if (!(Math_fround(Math_fround($7_1 * $7_1) + Math_fround(Math_fround($6_1 * $6_1) + Math_fround($9_1 * $9_1))) > Math_fround(0.0))) {
         break label$3
        }
        $4_1 = HEAP32[$0 + 364 >> 2] + -1 | 0;
        HEAP32[$0 + 364 >> 2] = $4_1;
        $1_1 = HEAP32[$0 + 372 >> 2];
        $2_1 = HEAP32[$1_1 + 32 >> 2];
        HEAP32[$1_1 + 32 >> 2] = $2_1 + 1;
        $1_1 = $1_1 + ($2_1 << 2) | 0;
        HEAP32[$1_1 + 16 >> 2] = 0;
        $2_1 = $1_1;
        $1_1 = HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2];
        HEAP32[$2_1 >> 2] = $1_1;
        $539($0, $3_1 + 16 | 0, $1_1);
        if ($544($0)) {
         break label$2
        }
        $4_1 = HEAP32[$0 + 364 >> 2];
        $1_1 = HEAP32[$0 + 372 >> 2];
        $5_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
        $2_1 = HEAP32[($5_1 << 2) + $1_1 >> 2];
        HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2] = $2_1;
        HEAP32[$1_1 + 32 >> 2] = $5_1;
        $1_1 = HEAP32[$0 + 372 >> 2];
        HEAP32[$0 + 364 >> 2] = $4_1;
        $4_1 = HEAP32[$1_1 + 32 >> 2];
        HEAP32[$1_1 + 32 >> 2] = $4_1 + 1;
        $1_1 = $1_1 + ($4_1 << 2) | 0;
        HEAP32[$1_1 >> 2] = $2_1;
        HEAP32[$3_1 + 12 >> 2] = 0;
        HEAPF32[$3_1 + 8 >> 2] = -HEAPF32[$3_1 + 24 >> 2];
        HEAPF32[$3_1 + 4 >> 2] = -HEAPF32[$3_1 + 20 >> 2];
        HEAPF32[$3_1 >> 2] = -HEAPF32[$3_1 + 16 >> 2];
        HEAP32[$1_1 + 16 >> 2] = 0;
        $539($0, $3_1, $2_1);
        if ($544($0)) {
         break label$2
        }
        $4_1 = HEAP32[$0 + 364 >> 2];
        HEAP32[$0 + 364 >> 2] = $4_1 + 1;
        $1_1 = HEAP32[$0 + 372 >> 2];
        $2_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
        HEAP32[$1_1 + 32 >> 2] = $2_1;
        HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2] = HEAP32[$1_1 + ($2_1 << 2) >> 2];
        break label$3;
       case 1:
        HEAP32[$3_1 + 28 >> 2] = 0;
        $2_1 = HEAP32[$1_1 + 4 >> 2];
        $4_1 = HEAP32[$1_1 >> 2];
        $7_1 = HEAPF32[$4_1 + 20 >> 2];
        $8_1 = Math_fround(HEAPF32[$2_1 + 20 >> 2] - $7_1);
        $5_1 = HEAP32[$1_1 + 8 >> 2];
        $6_1 = HEAPF32[$4_1 + 24 >> 2];
        $13_1 = Math_fround(HEAPF32[$5_1 + 24 >> 2] - $6_1);
        $6_1 = Math_fround(HEAPF32[$2_1 + 24 >> 2] - $6_1);
        $9_1 = Math_fround(HEAPF32[$5_1 + 20 >> 2] - $7_1);
        $7_1 = Math_fround(Math_fround($8_1 * $13_1) - Math_fround($6_1 * $9_1));
        HEAPF32[$3_1 + 16 >> 2] = $7_1;
        $10 = $6_1;
        $6_1 = HEAPF32[$4_1 + 16 >> 2];
        $11 = Math_fround(HEAPF32[$5_1 + 16 >> 2] - $6_1);
        $12_1 = Math_fround(HEAPF32[$2_1 + 16 >> 2] - $6_1);
        $6_1 = Math_fround(Math_fround($10 * $11) - Math_fround($12_1 * $13_1));
        HEAPF32[$3_1 + 20 >> 2] = $6_1;
        $8_1 = Math_fround(Math_fround($12_1 * $9_1) - Math_fround($8_1 * $11));
        HEAPF32[$3_1 + 24 >> 2] = $8_1;
        if (!(Math_fround(Math_fround($8_1 * $8_1) + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($6_1 * $6_1))) > Math_fround(0.0))) {
         break label$3
        }
        $2_1 = $1_1 + 28 | 0;
        HEAP32[$2_1 >> 2] = 0;
        HEAP32[$2_1 + 4 >> 2] = 4;
        $2_1 = HEAP32[$0 + 364 >> 2] + -1 | 0;
        HEAP32[$0 + 364 >> 2] = $2_1;
        $4_1 = $1_1;
        $1_1 = HEAP32[(($2_1 << 2) + $0 | 0) + 348 >> 2];
        HEAP32[$4_1 + 12 >> 2] = $1_1;
        $539($0, $3_1 + 16 | 0, $1_1);
        if ($544($0)) {
         break label$2
        }
        $2_1 = HEAP32[$0 + 364 >> 2];
        $1_1 = HEAP32[$0 + 372 >> 2];
        $5_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
        $4_1 = HEAP32[($5_1 << 2) + $1_1 >> 2];
        HEAP32[(($2_1 << 2) + $0 | 0) + 348 >> 2] = $4_1;
        HEAP32[$1_1 + 32 >> 2] = $5_1;
        $1_1 = HEAP32[$0 + 372 >> 2];
        HEAP32[$0 + 364 >> 2] = $2_1;
        $5_1 = HEAP32[$1_1 + 32 >> 2];
        HEAP32[$1_1 + 32 >> 2] = $5_1 + 1;
        $1_1 = $1_1 + ($5_1 << 2) | 0;
        HEAP32[$1_1 >> 2] = $4_1;
        HEAP32[$3_1 + 12 >> 2] = 0;
        HEAPF32[$3_1 + 8 >> 2] = -HEAPF32[$3_1 + 24 >> 2];
        HEAPF32[$3_1 + 4 >> 2] = -HEAPF32[$3_1 + 20 >> 2];
        HEAPF32[$3_1 >> 2] = -HEAPF32[$3_1 + 16 >> 2];
        HEAP32[$1_1 + 16 >> 2] = 0;
        $539($0, $3_1, $4_1);
        $2_1 = 1;
        if ($544($0)) {
         break label$1
        }
        $4_1 = HEAP32[$0 + 364 >> 2];
        HEAP32[$0 + 364 >> 2] = $4_1 + 1;
        $1_1 = HEAP32[$0 + 372 >> 2];
        $2_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
        HEAP32[$1_1 + 32 >> 2] = $2_1;
        HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2] = HEAP32[$1_1 + ($2_1 << 2) >> 2];
        break label$3;
       case 2:
        break label$5;
       };
      }
      $0 = HEAP32[$1_1 >> 2];
      $4_1 = HEAP32[$1_1 + 12 >> 2];
      $7_1 = HEAPF32[$4_1 + 16 >> 2];
      $13_1 = Math_fround(HEAPF32[$0 + 16 >> 2] - $7_1);
      $5_1 = HEAP32[$1_1 + 4 >> 2];
      $6_1 = HEAPF32[$4_1 + 20 >> 2];
      $9_1 = Math_fround(HEAPF32[$5_1 + 20 >> 2] - $6_1);
      $1_1 = HEAP32[$1_1 + 8 >> 2];
      $8_1 = HEAPF32[$4_1 + 24 >> 2];
      $11 = Math_fround(HEAPF32[$1_1 + 24 >> 2] - $8_1);
      $12_1 = Math_fround(HEAPF32[$0 + 20 >> 2] - $6_1);
      $10 = Math_fround(HEAPF32[$5_1 + 24 >> 2] - $8_1);
      $14 = Math_fround(HEAPF32[$1_1 + 16 >> 2] - $7_1);
      $8_1 = Math_fround(HEAPF32[$0 + 24 >> 2] - $8_1);
      $7_1 = Math_fround(HEAPF32[$5_1 + 16 >> 2] - $7_1);
      $6_1 = Math_fround(HEAPF32[$1_1 + 20 >> 2] - $6_1);
      $7_1 = Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $9_1) * $11) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $10) * $14) + Math_fround(Math_fround($8_1 * $7_1) * $6_1)) - Math_fround(Math_fround($13_1 * $10) * $6_1)) - Math_fround(Math_fround($12_1 * $7_1) * $11))) - Math_fround(Math_fround($8_1 * $9_1) * $14));
      $2_1 = 1;
      if ($7_1 != Math_fround(0.0) & $7_1 == $7_1) {
       break label$1
      }
      break label$3;
     }
     $4_1 = HEAP32[$0 + 364 >> 2];
     $1_1 = HEAP32[$0 + 372 >> 2];
     $5_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
     $2_1 = HEAP32[($5_1 << 2) + $1_1 >> 2];
     HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2] = $2_1;
     HEAP32[$1_1 + 32 >> 2] = $5_1;
     $1_1 = HEAP32[$0 + 372 >> 2];
     HEAP32[$0 + 364 >> 2] = $4_1;
     $4_1 = HEAP32[$1_1 + 32 >> 2];
     HEAP32[$1_1 + 32 >> 2] = $4_1 + 1;
     $1_1 = $1_1 + ($4_1 << 2) | 0;
     HEAP32[$1_1 >> 2] = $2_1;
     HEAP32[$3_1 + 12 >> 2] = 0;
     HEAPF32[$3_1 + 8 >> 2] = -HEAPF32[$3_1 + 24 >> 2];
     HEAPF32[$3_1 + 4 >> 2] = -HEAPF32[$3_1 + 20 >> 2];
     HEAPF32[$3_1 >> 2] = -HEAPF32[$3_1 + 16 >> 2];
     HEAP32[$1_1 + 16 >> 2] = 0;
     $539($0, $3_1, $2_1);
     if ($544($0)) {
      break label$2
     }
     $1_1 = HEAP32[$0 + 372 >> 2];
     $2_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
     HEAP32[$1_1 + 32 >> 2] = $2_1;
     $4_1 = HEAP32[$0 + 364 >> 2];
     $1_1 = HEAP32[$1_1 + ($2_1 << 2) >> 2];
     HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2] = $1_1;
     $2_1 = $3_1 + 24 | 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 1065353216;
     HEAP32[$0 + 364 >> 2] = $4_1;
     $2_1 = HEAP32[$0 + 372 >> 2];
     $4_1 = HEAP32[$2_1 + 32 >> 2];
     HEAP32[$2_1 + 32 >> 2] = $4_1 + 1;
     HEAP32[$3_1 + 16 >> 2] = 0;
     HEAP32[$3_1 + 20 >> 2] = 0;
     $2_1 = $2_1 + ($4_1 << 2) | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     HEAP32[$2_1 + 16 >> 2] = 0;
     $539($0, $3_1 + 16 | 0, $1_1);
     if ($544($0)) {
      break label$2
     }
     $4_1 = HEAP32[$0 + 364 >> 2];
     $1_1 = HEAP32[$0 + 372 >> 2];
     $5_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
     $2_1 = HEAP32[($5_1 << 2) + $1_1 >> 2];
     HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2] = $2_1;
     HEAP32[$1_1 + 32 >> 2] = $5_1;
     $1_1 = HEAP32[$0 + 372 >> 2];
     HEAP32[$0 + 364 >> 2] = $4_1;
     $4_1 = HEAP32[$1_1 + 32 >> 2];
     HEAP32[$1_1 + 32 >> 2] = $4_1 + 1;
     $1_1 = $1_1 + ($4_1 << 2) | 0;
     HEAP32[$1_1 >> 2] = $2_1;
     HEAP32[$3_1 + 12 >> 2] = 0;
     HEAPF32[$3_1 + 8 >> 2] = -HEAPF32[$3_1 + 24 >> 2];
     HEAPF32[$3_1 + 4 >> 2] = -HEAPF32[$3_1 + 20 >> 2];
     HEAPF32[$3_1 >> 2] = -HEAPF32[$3_1 + 16 >> 2];
     HEAP32[$1_1 + 16 >> 2] = 0;
     $539($0, $3_1, $2_1);
     if ($544($0)) {
      break label$2
     }
     $4_1 = HEAP32[$0 + 364 >> 2];
     HEAP32[$0 + 364 >> 2] = $4_1 + 1;
     $1_1 = HEAP32[$0 + 372 >> 2];
     $2_1 = HEAP32[$1_1 + 32 >> 2] + -1 | 0;
     HEAP32[$1_1 + 32 >> 2] = $2_1;
     HEAP32[(($4_1 << 2) + $0 | 0) + 348 >> 2] = HEAP32[$1_1 + ($2_1 << 2) >> 2];
    }
    $2_1 = 0;
    break label$1;
   }
   $2_1 = 1;
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1;
 }
 
 function $545($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0);
  $5_1 = HEAP32[$0 + 18504 >> 2];
  if ($5_1) {
   $6_1 = HEAP32[$5_1 + 48 >> 2];
   if ($6_1) {
    HEAP32[$6_1 + 44 >> 2] = HEAP32[$5_1 + 44 >> 2]
   }
   $6_1 = HEAP32[$5_1 + 44 >> 2];
   if ($6_1) {
    HEAP32[$6_1 + 48 >> 2] = HEAP32[$5_1 + 48 >> 2]
   }
   if (($5_1 | 0) == HEAP32[$0 + 18504 >> 2]) {
    HEAP32[$0 + 18504 >> 2] = HEAP32[$5_1 + 48 >> 2]
   }
   HEAP32[$5_1 + 44 >> 2] = 0;
   HEAP32[$5_1 + 48 >> 2] = HEAP32[$0 + 18496 >> 2];
   $6_1 = $0 + 18508 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] + -1;
   $6_1 = HEAP32[$0 + 18496 >> 2];
   if ($6_1) {
    HEAP32[$6_1 + 44 >> 2] = $5_1
   }
   HEAP32[$0 + 18496 >> 2] = $5_1;
   $6_1 = $0 + 18500 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] + 1;
   HEAP8[$5_1 + 55 | 0] = 0;
   HEAP32[$5_1 + 28 >> 2] = $3_1;
   HEAP32[$5_1 + 24 >> 2] = $2_1;
   HEAP32[$5_1 + 20 >> 2] = $1_1;
   $11 = HEAPF32[$2_1 + 20 >> 2];
   $12_1 = HEAPF32[$3_1 + 24 >> 2];
   $10 = HEAPF32[$2_1 + 24 >> 2];
   $7_1 = HEAPF32[$1_1 + 24 >> 2];
   $9_1 = HEAPF32[$1_1 + 20 >> 2];
   $13_1 = HEAPF32[$3_1 + 20 >> 2];
   $15_1 = HEAPF32[$3_1 + 16 >> 2];
   $16_1 = HEAPF32[$2_1 + 16 >> 2];
   $8_1 = HEAPF32[$1_1 + 16 >> 2];
   HEAP32[$5_1 + 12 >> 2] = 0;
   $11 = Math_fround($11 - $9_1);
   $12_1 = Math_fround($12_1 - $7_1);
   $10 = Math_fround($10 - $7_1);
   $13_1 = Math_fround($13_1 - $9_1);
   $7_1 = Math_fround(Math_fround($11 * $12_1) - Math_fround($10 * $13_1));
   HEAPF32[$5_1 >> 2] = $7_1;
   $9_1 = $10;
   $10 = Math_fround($15_1 - $8_1);
   $8_1 = Math_fround($16_1 - $8_1);
   $9_1 = Math_fround(Math_fround($9_1 * $10) - Math_fround($8_1 * $12_1));
   HEAPF32[$5_1 + 4 >> 2] = $9_1;
   $8_1 = Math_fround(Math_fround($8_1 * $13_1) - Math_fround($11 * $10));
   HEAPF32[$5_1 + 8 >> 2] = $8_1;
   $14 = 2;
   label$6 : {
    $7_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($9_1 * $9_1)) + Math_fround($8_1 * $8_1))));
    if (!($7_1 > Math_fround(9.999999747378752e-05))) {
     break label$6
    }
    $6_1 = $5_1 + 16 | 0;
    label$7 : {
     if ($548($5_1, $1_1, $2_1, $6_1)) {
      break label$7
     }
     if ($548($5_1, $2_1, $3_1, $6_1)) {
      break label$7
     }
     if ($548($5_1, $3_1, $1_1, $6_1)) {
      break label$7
     }
     HEAPF32[$5_1 + 16 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + 16 >> 2] * HEAPF32[$5_1 >> 2]) + Math_fround(HEAPF32[$1_1 + 20 >> 2] * HEAPF32[$5_1 + 4 >> 2])) + Math_fround(HEAPF32[$1_1 + 24 >> 2] * HEAPF32[$5_1 + 8 >> 2])) / $7_1;
    }
    $7_1 = Math_fround(Math_fround(1.0) / $7_1);
    HEAPF32[$5_1 >> 2] = $7_1 * HEAPF32[$5_1 >> 2];
    HEAPF32[$5_1 + 4 >> 2] = $7_1 * HEAPF32[$5_1 + 4 >> 2];
    HEAPF32[$5_1 + 8 >> 2] = $7_1 * HEAPF32[$5_1 + 8 >> 2];
    if ($4_1) {
     return $5_1
    }
    $14 = 3;
    if (!(HEAPF32[$6_1 >> 2] >= Math_fround(-9.999999747378752e-06))) {
     break label$6
    }
    return $5_1;
   }
   HEAP32[$0 >> 2] = $14;
   $1_1 = HEAP32[$5_1 + 48 >> 2];
   if ($1_1) {
    HEAP32[$1_1 + 44 >> 2] = HEAP32[$5_1 + 44 >> 2]
   }
   $1_1 = HEAP32[$5_1 + 44 >> 2];
   if ($1_1) {
    HEAP32[$1_1 + 48 >> 2] = HEAP32[$5_1 + 48 >> 2]
   }
   if (($5_1 | 0) == HEAP32[$0 + 18496 >> 2]) {
    HEAP32[$0 + 18496 >> 2] = HEAP32[$5_1 + 48 >> 2]
   }
   HEAP32[$5_1 + 44 >> 2] = 0;
   HEAP32[$5_1 + 48 >> 2] = HEAP32[$0 + 18504 >> 2];
   HEAP32[$0 + 18500 >> 2] = HEAP32[$0 + 18500 >> 2] + -1;
   $1_1 = HEAP32[$0 + 18504 >> 2];
   if ($1_1) {
    HEAP32[$1_1 + 44 >> 2] = $5_1
   }
   HEAP32[$0 + 18504 >> 2] = $5_1;
   HEAP32[$0 + 18508 >> 2] = HEAP32[$0 + 18508 >> 2] + 1;
   return 0;
  }
  HEAP32[$0 >> 2] = 5;
  return 0;
 }
 
 function $546($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   if (HEAPU8[$3_1 + 55 | 0] == ($1_1 | 0)) {
    break label$1
   }
   $6_1 = $4_1 << 2;
   $7_1 = HEAP32[$6_1 + 12784 >> 2];
   if (!!(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$2_1 + 16 >> 2]) + Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$2_1 + 20 >> 2])) + Math_fround(HEAPF32[$3_1 + 8 >> 2] * HEAPF32[$2_1 + 24 >> 2])) - HEAPF32[$3_1 + 16 >> 2]) < Math_fround(-9.999999747378752e-06))) {
    $1_1 = $0;
    $0 = $3_1 + 20 | 0;
    $0 = $545($1_1, HEAP32[$0 + ($7_1 << 2) >> 2], HEAP32[$0 + $6_1 >> 2], $2_1, 0);
    if (!$0) {
     break label$1
    }
    HEAP32[$0 + 32 >> 2] = $3_1;
    HEAP8[$0 + 52 | 0] = $4_1;
    HEAP8[($3_1 + $4_1 | 0) + 52 | 0] = 0;
    HEAP32[(($4_1 << 2) + $3_1 | 0) + 32 >> 2] = $0;
    $1_1 = HEAP32[$5_1 >> 2];
    label$3 : {
     if ($1_1) {
      HEAP32[$1_1 + 36 >> 2] = $0;
      HEAP8[$1_1 + 53 | 0] = 2;
      HEAP32[$0 + 40 >> 2] = $1_1;
      HEAP8[$0 + 54 | 0] = 1;
      break label$3;
     }
     HEAP32[$5_1 + 4 >> 2] = $0;
    }
    HEAP32[$5_1 >> 2] = $0;
    HEAP32[$5_1 + 8 >> 2] = HEAP32[$5_1 + 8 >> 2] + 1;
    return 1;
   }
   HEAP8[$3_1 + 55 | 0] = $1_1;
   if (!$546($0, $1_1, $2_1, HEAP32[(($7_1 << 2) + $3_1 | 0) + 32 >> 2], HEAPU8[($3_1 + $7_1 | 0) + 52 | 0], $5_1)) {
    break label$1
   }
   $4_1 = $1_1;
   $1_1 = HEAP32[$6_1 + 12796 >> 2];
   if (!$546($0, $4_1, $2_1, HEAP32[(($1_1 << 2) + $3_1 | 0) + 32 >> 2], HEAPU8[($1_1 + $3_1 | 0) + 52 | 0], $5_1)) {
    break label$1
   }
   $1_1 = HEAP32[$3_1 + 48 >> 2];
   if ($1_1) {
    HEAP32[$1_1 + 44 >> 2] = HEAP32[$3_1 + 44 >> 2]
   }
   $1_1 = HEAP32[$3_1 + 44 >> 2];
   if ($1_1) {
    HEAP32[$1_1 + 48 >> 2] = HEAP32[$3_1 + 48 >> 2]
   }
   if (($3_1 | 0) == HEAP32[$0 + 18496 >> 2]) {
    HEAP32[$0 + 18496 >> 2] = HEAP32[$3_1 + 48 >> 2]
   }
   HEAP32[$3_1 + 44 >> 2] = 0;
   HEAP32[$3_1 + 48 >> 2] = HEAP32[$0 + 18504 >> 2];
   $1_1 = $0 + 18500 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + -1;
   $1_1 = HEAP32[$0 + 18504 >> 2];
   if ($1_1) {
    HEAP32[$1_1 + 44 >> 2] = $3_1
   }
   HEAP32[$0 + 18504 >> 2] = $3_1;
   $8_1 = 1;
   $0 = $0 + 18508 | 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  }
  return $8_1;
 }
 
 function $547($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $8_1 = HEAP32[$1_1 + 124 >> 2];
  $9_1 = HEAP32[$1_1 + 4 >> 2] + ($8_1 >> 1) | 0;
  $7_1 = HEAP32[$1_1 + 120 >> 2];
  $7_1 = $8_1 & 1 ? HEAP32[HEAP32[$9_1 >> 2] + $7_1 >> 2] : $7_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  $4_1 = HEAPF32[$2_1 >> 2];
  $5_1 = HEAPF32[$2_1 + 4 >> 2];
  $6_1 = HEAPF32[$2_1 + 8 >> 2];
  HEAPF32[$3_1 + 8 >> 2] = Math_fround(Math_fround($4_1 * HEAPF32[$1_1 + 40 >> 2]) + Math_fround($5_1 * HEAPF32[$1_1 + 44 >> 2])) + Math_fround($6_1 * HEAPF32[$1_1 + 48 >> 2]);
  HEAPF32[$3_1 + 4 >> 2] = Math_fround(Math_fround($4_1 * HEAPF32[$1_1 + 24 >> 2]) + Math_fround($5_1 * HEAPF32[$1_1 + 28 >> 2])) + Math_fround($6_1 * HEAPF32[$1_1 + 32 >> 2]);
  HEAPF32[$3_1 >> 2] = Math_fround(Math_fround($4_1 * HEAPF32[$1_1 + 8 >> 2]) + Math_fround($5_1 * HEAPF32[$1_1 + 12 >> 2])) + Math_fround($6_1 * HEAPF32[$1_1 + 16 >> 2]);
  FUNCTION_TABLE[$7_1]($3_1 + 16 | 0, $9_1, $3_1);
  HEAP32[$0 + 12 >> 2] = 0;
  $4_1 = HEAPF32[$3_1 + 16 >> 2];
  $5_1 = HEAPF32[$3_1 + 20 >> 2];
  $6_1 = HEAPF32[$3_1 + 24 >> 2];
  HEAPF32[$0 + 8 >> 2] = Math_fround(Math_fround(Math_fround($4_1 * HEAPF32[$1_1 + 88 >> 2]) + Math_fround($5_1 * HEAPF32[$1_1 + 92 >> 2])) + Math_fround($6_1 * HEAPF32[$1_1 + 96 >> 2])) + HEAPF32[$1_1 + 112 >> 2];
  HEAPF32[$0 + 4 >> 2] = Math_fround(Math_fround(Math_fround($4_1 * HEAPF32[$1_1 + 72 >> 2]) + Math_fround($5_1 * HEAPF32[$1_1 + 76 >> 2])) + Math_fround($6_1 * HEAPF32[$1_1 + 80 >> 2])) + HEAPF32[$1_1 + 108 >> 2];
  HEAPF32[$0 >> 2] = Math_fround(Math_fround(Math_fround($4_1 * HEAPF32[$1_1 + 56 >> 2]) + Math_fround($5_1 * HEAPF32[$1_1 + 60 >> 2])) + Math_fround($6_1 * HEAPF32[$1_1 - -64 >> 2])) + HEAPF32[$1_1 + 104 >> 2];
  global$0 = $3_1 + 32 | 0;
 }
 
 function $548($0, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0);
  $8_1 = HEAPF32[$2_1 + 24 >> 2];
  $4_1 = HEAPF32[$1_1 + 24 >> 2];
  $11 = Math_fround($8_1 - $4_1);
  $9_1 = HEAPF32[$2_1 + 16 >> 2];
  $6_1 = HEAPF32[$1_1 + 16 >> 2];
  $12_1 = Math_fround($9_1 - $6_1);
  $5_1 = HEAPF32[$0 + 4 >> 2];
  $10 = HEAPF32[$2_1 + 20 >> 2];
  $7_1 = HEAPF32[$1_1 + 20 >> 2];
  $13_1 = Math_fround($10 - $7_1);
  $14 = HEAPF32[$0 >> 2];
  $15_1 = HEAPF32[$0 + 8 >> 2];
  $0 = 0;
  label$1 : {
   if (!(Math_fround(Math_fround($4_1 * Math_fround(Math_fround($12_1 * $5_1) - Math_fround($13_1 * $14))) + Math_fround(Math_fround($6_1 * Math_fround(Math_fround($13_1 * $15_1) - Math_fround($11 * $5_1))) + Math_fround($7_1 * Math_fround(Math_fround($11 * $14) - Math_fround($12_1 * $15_1))))) < Math_fround(0.0))) {
    break label$1
   }
   $5_1 = Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1)) + Math_fround($4_1 * $4_1));
   label$2 : {
    if (!!(Math_fround(Math_fround(Math_fround($6_1 * $12_1) + Math_fround($7_1 * $13_1)) + Math_fround($4_1 * $11)) > Math_fround(0.0))) {
     break label$2
    }
    $5_1 = Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($10 * $10)) + Math_fround($8_1 * $8_1));
    if (!!(Math_fround(Math_fround(Math_fround($9_1 * $12_1) + Math_fround($10 * $13_1)) + Math_fround($8_1 * $11)) < Math_fround(0.0))) {
     break label$2
    }
    $5_1 = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($10 * $10)) + Math_fround($8_1 * $8_1)) * Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1)) + Math_fround($4_1 * $4_1)));
    $4_1 = Math_fround(Math_fround(Math_fround($9_1 * $6_1) + Math_fround($10 * $7_1)) + Math_fround($8_1 * $4_1));
    $4_1 = Math_fround(Math_fround($5_1 - Math_fround($4_1 * $4_1)) / Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($13_1 * $13_1)) + Math_fround($11 * $11)));
    $5_1 = $4_1 > Math_fround(0.0) ? $4_1 : Math_fround(0.0);
   }
   HEAPF32[$3_1 >> 2] = Math_sqrt($5_1);
   $0 = 1;
  }
  return $0;
 }
 
 function $549($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $9_1 = global$0 - 80 | 0;
  global$0 = $9_1;
  $0 = 0;
  HEAP32[$9_1 + 76 >> 2] = 0;
  HEAPF32[$9_1 + 64 >> 2] = HEAPF32[$5_1 + 48 >> 2] - HEAPF32[$4_1 + 48 >> 2];
  HEAPF32[$9_1 + 72 >> 2] = HEAPF32[$5_1 + 56 >> 2] - HEAPF32[$4_1 + 56 >> 2];
  HEAPF32[$9_1 + 68 >> 2] = HEAPF32[$5_1 + 52 >> 2] - HEAPF32[$4_1 + 52 >> 2];
  $1_1 = 1;
  label$1 : {
   if (!$542($2_1, $4_1, $3_1, $5_1, $9_1 - -64 | 0, $9_1 + 8 | 0)) {
    $1_1 = 0;
    if (!$537($2_1, $4_1, $3_1, $5_1, $9_1 - -64 | 0, $9_1 + 8 | 0)) {
     break label$1
    }
   }
   $0 = HEAP32[$9_1 + 16 >> 2];
   HEAP32[$7_1 >> 2] = HEAP32[$9_1 + 12 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $0;
   $2_1 = $9_1 + 20 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   $0 = $7_1 + 8 | 0;
   HEAP32[$0 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $3_1;
   $0 = $9_1 + 28 | 0;
   $2_1 = HEAP32[$0 + 4 >> 2];
   HEAP32[$8_1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $2_1;
   $2_1 = $9_1 + 36 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   $0 = $8_1 + 8 | 0;
   HEAP32[$0 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $3_1;
   $0 = HEAP32[$9_1 + 48 >> 2];
   HEAP32[$6_1 >> 2] = HEAP32[$9_1 + 44 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $0;
   $2_1 = $9_1 + 52 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   $0 = $6_1 + 8 | 0;
   HEAP32[$0 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $3_1;
   $0 = $1_1;
  }
  global$0 = $9_1 + 80 | 0;
  return $0 | 0;
 }
 
 function $552($0) {
  var $1_1 = 0;
  HEAP8[$0 + 356 | 0] = 1;
  HEAP32[$0 >> 2] = 0;
  HEAP8[$0 + 312 | 0] = 0;
  HEAP32[$0 + 292 >> 2] = 1566444395;
  HEAP32[$0 + 296 >> 2] = 1566444395;
  $1_1 = $0 + 336 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 300 | 0;
  HEAP32[$1_1 >> 2] = 1566444395;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 344 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0 + 352 | 0] = 0;
  $0 = $0 + 332 | 0;
  HEAP8[$0 | 0] = HEAPU8[$0 | 0] & 240;
 }
 
 function $553($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 292 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 296 >> 2] = $4_1;
  $4_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  $5_1 = $0 + 300 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $6_1;
  HEAP8[$0 + 356 | 0] = 1;
  $7_1 = HEAP32[$4_1 + 4 >> 2];
  $5_1 = (HEAP32[$0 >> 2] << 4) + $0 | 0;
  $6_1 = $5_1 + 12 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $7_1;
  $4_1 = $5_1 + 4 | 0;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $1_1 = (HEAP32[$0 >> 2] << 4) + $0 | 0;
  $4_1 = $1_1 + 92 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $1_1 + 84 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = (HEAP32[$0 >> 2] << 4) + $0 | 0;
  $2_1 = $1_1 + 164 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = $3_1 + 8 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $1_1 + 172 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 }
 
 function $554($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10 = Math_fround(0), $11 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19_1 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = 0, $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = 0;
  $20 = global$0 - 16 | 0;
  global$0 = $20;
  label$1 : {
   if (!HEAPU8[$0 + 356 | 0]) {
    $2_1 = HEAPU8[$0 + 312 | 0];
    break label$1;
   }
   HEAP8[$0 + 356 | 0] = 0;
   HEAP8[$0 + 352 | 0] = 0;
   $1_1 = $0 + 344 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $26_1 = $0 + 336 | 0;
   $1_1 = $26_1;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $4_1 = $0 + 332 | 0;
   $1_1 = HEAPU8[$4_1 | 0] & -16;
   HEAP8[$4_1 | 0] = $1_1;
   $4_1 = HEAP32[$0 >> 2];
   label$3 : {
    if ($4_1 >>> 0 > 4) {
     break label$3
    }
    $2_1 = $0 + 316 | 0;
    label$4 : {
     label$5 : {
      label$6 : {
       switch ($4_1 - 1 | 0) {
       case 1:
        $4_1 = $0;
        $16_1 = HEAPF32[$0 + 4 >> 2];
        $7_1 = Math_fround(HEAPF32[$0 + 20 >> 2] - $16_1);
        $19_1 = HEAPF32[$0 + 8 >> 2];
        $13_1 = Math_fround(HEAPF32[$0 + 24 >> 2] - $19_1);
        $21 = HEAPF32[$0 + 12 >> 2];
        $14 = Math_fround(HEAPF32[$0 + 28 >> 2] - $21);
        $16_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(0.0) - $16_1) * $7_1) + Math_fround(Math_fround(Math_fround(0.0) - $19_1) * $13_1)) + Math_fround(Math_fround(Math_fround(0.0) - $21) * $14));
        label$10 : {
         if (!!($16_1 > Math_fround(0.0))) {
          $10 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($13_1 * $13_1)) + Math_fround($14 * $14));
          if (!!($16_1 < $10)) {
           $10 = Math_fround($16_1 / $10);
           $2_1 = $1_1 | 3;
           break label$10;
          }
          $10 = Math_fround(1.0);
          $2_1 = $1_1 | 2;
          break label$10;
         }
         $2_1 = $1_1 | 1;
        }
        HEAP8[$4_1 + 332 | 0] = $2_1;
        $1_1 = $0 + 344 | 0;
        HEAP32[$1_1 >> 2] = 0;
        HEAP32[$1_1 + 4 >> 2] = 0;
        HEAPF32[$0 + 340 >> 2] = $10;
        $16_1 = Math_fround(Math_fround(1.0) - $10);
        HEAPF32[$0 + 336 >> 2] = $16_1;
        HEAP32[$0 + 256 >> 2] = 0;
        $7_1 = HEAPF32[$0 + 92 >> 2];
        $19_1 = Math_fround($7_1 + Math_fround($10 * Math_fround(HEAPF32[$0 + 108 >> 2] - $7_1)));
        HEAPF32[$0 + 252 >> 2] = $19_1;
        $7_1 = HEAPF32[$0 + 88 >> 2];
        $21 = Math_fround($7_1 + Math_fround($10 * Math_fround(HEAPF32[$0 + 104 >> 2] - $7_1)));
        HEAPF32[$0 + 248 >> 2] = $21;
        $7_1 = HEAPF32[$0 + 84 >> 2];
        $23_1 = Math_fround($7_1 + Math_fround($10 * Math_fround(HEAPF32[$0 + 100 >> 2] - $7_1)));
        HEAPF32[$0 + 244 >> 2] = $23_1;
        $24_1 = HEAPF32[$0 + 180 >> 2];
        $27_1 = HEAPF32[$0 + 184 >> 2];
        $7_1 = HEAPF32[$0 + 168 >> 2];
        $28_1 = HEAPF32[$0 + 188 >> 2];
        $13_1 = HEAPF32[$0 + 172 >> 2];
        $14 = HEAPF32[$0 + 164 >> 2];
        HEAP32[$0 + 288 >> 2] = 0;
        $13_1 = Math_fround($13_1 + Math_fround($10 * Math_fround($28_1 - $13_1)));
        HEAPF32[$0 + 284 >> 2] = $19_1 - $13_1;
        $7_1 = Math_fround($7_1 + Math_fround($10 * Math_fround($27_1 - $7_1)));
        HEAPF32[$0 + 280 >> 2] = $21 - $7_1;
        $14 = Math_fround($14 + Math_fround($10 * Math_fround($24_1 - $14)));
        HEAPF32[$0 + 276 >> 2] = $23_1 - $14;
        HEAP32[$0 + 272 >> 2] = 0;
        HEAPF32[$0 + 268 >> 2] = $13_1;
        HEAPF32[$0 + 264 >> 2] = $7_1;
        HEAPF32[$0 + 260 >> 2] = $14;
        $4_1 = 1;
        if (!($2_1 & 2)) {
         HEAP32[$0 >> 2] = 1;
         $4_1 = 0;
        }
        if (!($2_1 & 1)) {
         HEAP32[$0 >> 2] = $4_1;
         $2_1 = ($4_1 << 4) + $0 | 0;
         $1_1 = $2_1 + 12 | 0;
         $4_1 = HEAP32[$1_1 >> 2];
         $1_1 = HEAP32[$1_1 + 4 >> 2];
         $8_1 = $2_1 + 4 | 0;
         $5_1 = HEAP32[$8_1 >> 2];
         $8_1 = HEAP32[$8_1 + 4 >> 2];
         $11 = $2_1 + 84 | 0;
         $18_1 = HEAP32[$11 + 4 >> 2];
         $3_1 = $0 + 84 | 0;
         HEAP32[$3_1 >> 2] = HEAP32[$11 >> 2];
         HEAP32[$3_1 + 4 >> 2] = $18_1;
         $6_1 = $2_1 + 92 | 0;
         $11 = HEAP32[$6_1 + 4 >> 2];
         $3_1 = $3_1 + 8 | 0;
         HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
         HEAP32[$3_1 + 4 >> 2] = $11;
         $11 = $2_1 + 164 | 0;
         $18_1 = HEAP32[$11 + 4 >> 2];
         $3_1 = $0 + 164 | 0;
         HEAP32[$3_1 >> 2] = HEAP32[$11 >> 2];
         HEAP32[$3_1 + 4 >> 2] = $18_1;
         $2_1 = $2_1 + 172 | 0;
         $6_1 = HEAP32[$2_1 + 4 >> 2];
         $3_1 = $3_1 + 8 | 0;
         HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
         HEAP32[$3_1 + 4 >> 2] = $6_1;
         $2_1 = $0 + 4 | 0;
         HEAP32[$2_1 >> 2] = $5_1;
         HEAP32[$2_1 + 4 >> 2] = $8_1;
         $2_1 = $2_1 + 8 | 0;
         HEAP32[$2_1 >> 2] = $4_1;
         HEAP32[$2_1 + 4 >> 2] = $1_1;
        }
        $2_1 = $10 >= Math_fround(0.0) & $16_1 >= Math_fround(0.0);
        break label$3;
       case 2:
        $1_1 = $20 + 8 | 0;
        HEAP32[$1_1 >> 2] = 0;
        HEAP32[$1_1 + 4 >> 2] = 0;
        HEAP32[$20 >> 2] = 0;
        HEAP32[$20 + 4 >> 2] = 0;
        $8_1 = $0 + 4 | 0;
        $5_1 = $0 + 20 | 0;
        $3_1 = $0 + 36 | 0;
        $555($20, $8_1, $5_1, $3_1, $2_1);
        HEAP32[$0 + 256 >> 2] = 0;
        $13_1 = HEAPF32[$0 + 336 >> 2];
        $10 = HEAPF32[$0 + 340 >> 2];
        $7_1 = HEAPF32[$0 + 344 >> 2];
        $14 = Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$0 + 92 >> 2]) + Math_fround($10 * HEAPF32[$0 + 108 >> 2])) + Math_fround($7_1 * HEAPF32[$0 + 124 >> 2]));
        HEAPF32[$0 + 252 >> 2] = $14;
        $16_1 = Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$0 + 88 >> 2]) + Math_fround($10 * HEAPF32[$0 + 104 >> 2])) + Math_fround($7_1 * HEAPF32[$0 + 120 >> 2]));
        HEAPF32[$0 + 248 >> 2] = $16_1;
        $6_1 = $0 + 100 | 0;
        $11 = $0 + 116 | 0;
        $19_1 = Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$0 + 84 >> 2]) + Math_fround($10 * HEAPF32[$6_1 >> 2])) + Math_fround($7_1 * HEAPF32[$11 >> 2]));
        HEAPF32[$0 + 244 >> 2] = $19_1;
        $18_1 = $0 + 180 | 0;
        $21 = HEAPF32[$18_1 >> 2];
        $15_1 = $0 + 196 | 0;
        $23_1 = HEAPF32[$15_1 >> 2];
        $24_1 = HEAPF32[$0 + 168 >> 2];
        $27_1 = HEAPF32[$0 + 184 >> 2];
        $28_1 = HEAPF32[$0 + 200 >> 2];
        $30 = HEAPF32[$0 + 172 >> 2];
        $31_1 = HEAPF32[$0 + 188 >> 2];
        $32 = HEAPF32[$0 + 204 >> 2];
        $33_1 = HEAPF32[$0 + 164 >> 2];
        HEAP32[$0 + 288 >> 2] = 0;
        $29_1 = $14;
        $14 = Math_fround(Math_fround(Math_fround($13_1 * $30) + Math_fround($10 * $31_1)) + Math_fround($7_1 * $32));
        HEAPF32[$0 + 284 >> 2] = $29_1 - $14;
        $29_1 = $16_1;
        $16_1 = Math_fround(Math_fround(Math_fround($13_1 * $24_1) + Math_fround($10 * $27_1)) + Math_fround($7_1 * $28_1));
        HEAPF32[$0 + 280 >> 2] = $29_1 - $16_1;
        $13_1 = Math_fround(Math_fround(Math_fround($13_1 * $33_1) + Math_fround($10 * $21)) + Math_fround($7_1 * $23_1));
        HEAPF32[$0 + 276 >> 2] = $19_1 - $13_1;
        HEAP32[$0 + 272 >> 2] = 0;
        HEAPF32[$0 + 268 >> 2] = $14;
        HEAPF32[$0 + 264 >> 2] = $16_1;
        HEAPF32[$0 + 260 >> 2] = $13_1;
        label$15 : {
         label$16 : {
          label$17 : {
           label$18 : {
            label$19 : {
             $1_1 = HEAP32[$0 >> 2];
             label$20 : {
              if (($1_1 | 0) >= 4) {
               $4_1 = HEAPU8[$0 + 332 | 0];
               if ($4_1 & 8) {
                $2_1 = $1_1;
                break label$20;
               }
               $2_1 = $1_1 + -1 | 0;
               HEAP32[$0 >> 2] = $2_1;
               $1_1 = ($2_1 << 4) + $0 | 0;
               $12_1 = $1_1 + 12 | 0;
               $17_1 = HEAP32[$12_1 + 4 >> 2];
               $9_1 = $0 + 60 | 0;
               HEAP32[$9_1 >> 2] = HEAP32[$12_1 >> 2];
               HEAP32[$9_1 + 4 >> 2] = $17_1;
               $12_1 = $1_1 + 4 | 0;
               $17_1 = HEAP32[$12_1 + 4 >> 2];
               $9_1 = $0 + 52 | 0;
               HEAP32[$9_1 >> 2] = HEAP32[$12_1 >> 2];
               HEAP32[$9_1 + 4 >> 2] = $17_1;
               $12_1 = $1_1 + 92 | 0;
               $17_1 = HEAP32[$12_1 + 4 >> 2];
               $9_1 = $0 + 140 | 0;
               HEAP32[$9_1 >> 2] = HEAP32[$12_1 >> 2];
               HEAP32[$9_1 + 4 >> 2] = $17_1;
               $12_1 = $1_1 + 84 | 0;
               $17_1 = HEAP32[$12_1 + 4 >> 2];
               $9_1 = $0 + 132 | 0;
               HEAP32[$9_1 >> 2] = HEAP32[$12_1 >> 2];
               HEAP32[$9_1 + 4 >> 2] = $17_1;
               $12_1 = $1_1 + 164 | 0;
               $17_1 = HEAP32[$12_1 + 4 >> 2];
               $9_1 = $0 + 212 | 0;
               HEAP32[$9_1 >> 2] = HEAP32[$12_1 >> 2];
               HEAP32[$9_1 + 4 >> 2] = $17_1;
               $1_1 = $1_1 + 172 | 0;
               $12_1 = HEAP32[$1_1 + 4 >> 2];
               $9_1 = $0 + 220 | 0;
               HEAP32[$9_1 >> 2] = HEAP32[$1_1 >> 2];
               HEAP32[$9_1 + 4 >> 2] = $12_1;
               break label$20;
              }
              $2_1 = 3;
              if (($1_1 | 0) != 3) {
               break label$19
              }
              $4_1 = HEAPU8[$0 + 332 | 0];
             }
             if ($4_1 & 4) {
              break label$18
             }
             $2_1 = $2_1 + -1 | 0;
             HEAP32[$0 >> 2] = $2_1;
             $1_1 = ($2_1 << 4) + $0 | 0;
             $12_1 = $1_1 + 12 | 0;
             $17_1 = HEAP32[$12_1 + 4 >> 2];
             $9_1 = $3_1 + 8 | 0;
             HEAP32[$9_1 >> 2] = HEAP32[$12_1 >> 2];
             HEAP32[$9_1 + 4 >> 2] = $17_1;
             $9_1 = $1_1 + 4 | 0;
             $12_1 = HEAP32[$9_1 + 4 >> 2];
             HEAP32[$3_1 >> 2] = HEAP32[$9_1 >> 2];
             HEAP32[$3_1 + 4 >> 2] = $12_1;
             $9_1 = $1_1 + 92 | 0;
             $12_1 = HEAP32[$9_1 + 4 >> 2];
             $3_1 = $11 + 8 | 0;
             HEAP32[$3_1 >> 2] = HEAP32[$9_1 >> 2];
             HEAP32[$3_1 + 4 >> 2] = $12_1;
             $3_1 = $1_1 + 84 | 0;
             $9_1 = HEAP32[$3_1 + 4 >> 2];
             HEAP32[$11 >> 2] = HEAP32[$3_1 >> 2];
             HEAP32[$11 + 4 >> 2] = $9_1;
             $3_1 = $1_1 + 164 | 0;
             $11 = HEAP32[$3_1 + 4 >> 2];
             HEAP32[$15_1 >> 2] = HEAP32[$3_1 >> 2];
             HEAP32[$15_1 + 4 >> 2] = $11;
             $1_1 = $1_1 + 172 | 0;
             $11 = HEAP32[$1_1 + 4 >> 2];
             $3_1 = $15_1 + 8 | 0;
             HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
             HEAP32[$3_1 + 4 >> 2] = $11;
             break label$18;
            }
            $2_1 = 2;
            if (($1_1 | 0) < 2) {
             break label$17
            }
            $4_1 = HEAPU8[$0 + 332 | 0];
           }
           if ($4_1 & 2) {
            break label$16
           }
           $2_1 = $2_1 + -1 | 0;
           HEAP32[$0 >> 2] = $2_1;
           $1_1 = ($2_1 << 4) + $0 | 0;
           $11 = $1_1 + 12 | 0;
           $15_1 = HEAP32[$11 + 4 >> 2];
           $3_1 = $5_1 + 8 | 0;
           HEAP32[$3_1 >> 2] = HEAP32[$11 >> 2];
           HEAP32[$3_1 + 4 >> 2] = $15_1;
           $3_1 = $1_1 + 4 | 0;
           $11 = HEAP32[$3_1 + 4 >> 2];
           HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
           HEAP32[$5_1 + 4 >> 2] = $11;
           $3_1 = $1_1 + 92 | 0;
           $11 = HEAP32[$3_1 + 4 >> 2];
           $5_1 = $6_1 + 8 | 0;
           HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
           HEAP32[$5_1 + 4 >> 2] = $11;
           $5_1 = $1_1 + 84 | 0;
           $3_1 = HEAP32[$5_1 + 4 >> 2];
           HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
           HEAP32[$6_1 + 4 >> 2] = $3_1;
           $5_1 = $1_1 + 164 | 0;
           $3_1 = HEAP32[$5_1 + 4 >> 2];
           HEAP32[$18_1 >> 2] = HEAP32[$5_1 >> 2];
           HEAP32[$18_1 + 4 >> 2] = $3_1;
           $1_1 = $1_1 + 172 | 0;
           $3_1 = HEAP32[$1_1 + 4 >> 2];
           $5_1 = $18_1 + 8 | 0;
           HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
           HEAP32[$5_1 + 4 >> 2] = $3_1;
           break label$16;
          }
          $2_1 = 1;
          if (($1_1 | 0) != 1) {
           break label$15
          }
          $4_1 = HEAPU8[$0 + 332 | 0];
         }
         if ($4_1 & 1) {
          break label$15
         }
         $2_1 = $2_1 + -1 | 0;
         HEAP32[$0 >> 2] = $2_1;
         $2_1 = ($2_1 << 4) + $0 | 0;
         $4_1 = $2_1 + 12 | 0;
         $5_1 = HEAP32[$4_1 + 4 >> 2];
         $1_1 = $8_1 + 8 | 0;
         HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$1_1 + 4 >> 2] = $5_1;
         $1_1 = $2_1 + 4 | 0;
         $4_1 = HEAP32[$1_1 + 4 >> 2];
         HEAP32[$8_1 >> 2] = HEAP32[$1_1 >> 2];
         HEAP32[$8_1 + 4 >> 2] = $4_1;
         $8_1 = $2_1 + 92 | 0;
         $5_1 = HEAP32[$8_1 + 4 >> 2];
         $1_1 = $0 + 84 | 0;
         $4_1 = $1_1 + 8 | 0;
         HEAP32[$4_1 >> 2] = HEAP32[$8_1 >> 2];
         HEAP32[$4_1 + 4 >> 2] = $5_1;
         $4_1 = $2_1 + 84 | 0;
         $8_1 = HEAP32[$4_1 + 4 >> 2];
         HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$1_1 + 4 >> 2] = $8_1;
         $8_1 = $2_1 + 164 | 0;
         $5_1 = HEAP32[$8_1 + 4 >> 2];
         $1_1 = $0 + 164 | 0;
         HEAP32[$1_1 >> 2] = HEAP32[$8_1 >> 2];
         HEAP32[$1_1 + 4 >> 2] = $5_1;
         $2_1 = $2_1 + 172 | 0;
         $4_1 = HEAP32[$2_1 + 4 >> 2];
         $1_1 = $1_1 + 8 | 0;
         HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
         HEAP32[$1_1 + 4 >> 2] = $4_1;
        }
        $2_1 = 0;
        if (HEAPF32[$26_1 >> 2] >= Math_fround(0.0) ^ 1 | $10 >= Math_fround(0.0) ^ 1 | $7_1 >= Math_fround(0.0) ^ 1) {
         break label$3
        }
        $2_1 = HEAPF32[$0 + 348 >> 2] >= Math_fround(0.0);
        break label$3;
       case 3:
        $1_1 = $20 + 8 | 0;
        HEAP32[$1_1 >> 2] = 0;
        HEAP32[$1_1 + 4 >> 2] = 0;
        HEAP32[$20 >> 2] = 0;
        HEAP32[$20 + 4 >> 2] = 0;
        $8_1 = $0 + 4 | 0;
        $5_1 = $0 + 20 | 0;
        $3_1 = $0 + 36 | 0;
        $6_1 = $0 + 52 | 0;
        if ($556($20, $8_1, $5_1, $3_1, $6_1, $2_1)) {
         HEAP32[$0 + 256 >> 2] = 0;
         $7_1 = HEAPF32[$0 + 336 >> 2];
         $13_1 = HEAPF32[$0 + 340 >> 2];
         $14 = HEAPF32[$0 + 344 >> 2];
         $10 = HEAPF32[$0 + 348 >> 2];
         $16_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$0 + 92 >> 2]) + Math_fround($13_1 * HEAPF32[$0 + 108 >> 2])) + Math_fround($14 * HEAPF32[$0 + 124 >> 2])) + Math_fround($10 * HEAPF32[$0 + 140 >> 2]));
         HEAPF32[$0 + 252 >> 2] = $16_1;
         $19_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$0 + 88 >> 2]) + Math_fround($13_1 * HEAPF32[$0 + 104 >> 2])) + Math_fround($14 * HEAPF32[$0 + 120 >> 2])) + Math_fround($10 * HEAPF32[$0 + 136 >> 2]));
         HEAPF32[$0 + 248 >> 2] = $19_1;
         $11 = $0 + 100 | 0;
         $18_1 = $0 + 116 | 0;
         $15_1 = $0 + 132 | 0;
         $21 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$0 + 84 >> 2]) + Math_fround($13_1 * HEAPF32[$11 >> 2])) + Math_fround($14 * HEAPF32[$18_1 >> 2])) + Math_fround($10 * HEAPF32[$15_1 >> 2]));
         HEAPF32[$0 + 244 >> 2] = $21;
         HEAP32[$0 + 288 >> 2] = 0;
         HEAP32[$0 + 272 >> 2] = 0;
         $9_1 = $0 + 180 | 0;
         $12_1 = $0 + 196 | 0;
         $17_1 = $0 + 212 | 0;
         $23_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$0 + 164 >> 2]) + Math_fround($13_1 * HEAPF32[$9_1 >> 2])) + Math_fround($14 * HEAPF32[$12_1 >> 2])) + Math_fround($10 * HEAPF32[$17_1 >> 2]));
         HEAPF32[$0 + 260 >> 2] = $23_1;
         $24_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$0 + 168 >> 2]) + Math_fround($13_1 * HEAPF32[$0 + 184 >> 2])) + Math_fround($14 * HEAPF32[$0 + 200 >> 2])) + Math_fround($10 * HEAPF32[$0 + 216 >> 2]));
         HEAPF32[$0 + 264 >> 2] = $24_1;
         $7_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$0 + 172 >> 2]) + Math_fround($13_1 * HEAPF32[$0 + 188 >> 2])) + Math_fround($14 * HEAPF32[$0 + 204 >> 2])) + Math_fround($10 * HEAPF32[$0 + 220 >> 2]));
         HEAPF32[$0 + 268 >> 2] = $7_1;
         HEAPF32[$0 + 276 >> 2] = $21 - $23_1;
         HEAPF32[$0 + 280 >> 2] = $19_1 - $24_1;
         HEAPF32[$0 + 284 >> 2] = $16_1 - $7_1;
         label$24 : {
          label$25 : {
           label$26 : {
            label$27 : {
             label$28 : {
              $1_1 = HEAP32[$0 >> 2];
              label$29 : {
               if (($1_1 | 0) >= 4) {
                $4_1 = HEAPU8[$0 + 332 | 0];
                if ($4_1 & 8) {
                 $2_1 = $1_1;
                 break label$29;
                }
                $2_1 = $1_1 + -1 | 0;
                HEAP32[$0 >> 2] = $2_1;
                $1_1 = ($2_1 << 4) + $0 | 0;
                $25 = $1_1 + 12 | 0;
                $34 = HEAP32[$25 + 4 >> 2];
                $22_1 = $6_1 + 8 | 0;
                HEAP32[$22_1 >> 2] = HEAP32[$25 >> 2];
                HEAP32[$22_1 + 4 >> 2] = $34;
                $22_1 = $1_1 + 4 | 0;
                $25 = HEAP32[$22_1 + 4 >> 2];
                HEAP32[$6_1 >> 2] = HEAP32[$22_1 >> 2];
                HEAP32[$6_1 + 4 >> 2] = $25;
                $22_1 = $1_1 + 92 | 0;
                $25 = HEAP32[$22_1 + 4 >> 2];
                $6_1 = $15_1 + 8 | 0;
                HEAP32[$6_1 >> 2] = HEAP32[$22_1 >> 2];
                HEAP32[$6_1 + 4 >> 2] = $25;
                $6_1 = $1_1 + 84 | 0;
                $22_1 = HEAP32[$6_1 + 4 >> 2];
                HEAP32[$15_1 >> 2] = HEAP32[$6_1 >> 2];
                HEAP32[$15_1 + 4 >> 2] = $22_1;
                $6_1 = $1_1 + 164 | 0;
                $15_1 = HEAP32[$6_1 + 4 >> 2];
                HEAP32[$17_1 >> 2] = HEAP32[$6_1 >> 2];
                HEAP32[$17_1 + 4 >> 2] = $15_1;
                $1_1 = $1_1 + 172 | 0;
                $15_1 = HEAP32[$1_1 + 4 >> 2];
                $6_1 = $17_1 + 8 | 0;
                HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
                HEAP32[$6_1 + 4 >> 2] = $15_1;
                break label$29;
               }
               $2_1 = 3;
               if (($1_1 | 0) != 3) {
                break label$28
               }
               $4_1 = HEAPU8[$0 + 332 | 0];
              }
              if ($4_1 & 4) {
               break label$27
              }
              $2_1 = $2_1 + -1 | 0;
              HEAP32[$0 >> 2] = $2_1;
              $1_1 = ($2_1 << 4) + $0 | 0;
              $15_1 = $1_1 + 12 | 0;
              $17_1 = HEAP32[$15_1 + 4 >> 2];
              $6_1 = $3_1 + 8 | 0;
              HEAP32[$6_1 >> 2] = HEAP32[$15_1 >> 2];
              HEAP32[$6_1 + 4 >> 2] = $17_1;
              $6_1 = $1_1 + 4 | 0;
              $15_1 = HEAP32[$6_1 + 4 >> 2];
              HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
              HEAP32[$3_1 + 4 >> 2] = $15_1;
              $6_1 = $1_1 + 92 | 0;
              $15_1 = HEAP32[$6_1 + 4 >> 2];
              $3_1 = $18_1 + 8 | 0;
              HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
              HEAP32[$3_1 + 4 >> 2] = $15_1;
              $3_1 = $1_1 + 84 | 0;
              $6_1 = HEAP32[$3_1 + 4 >> 2];
              HEAP32[$18_1 >> 2] = HEAP32[$3_1 >> 2];
              HEAP32[$18_1 + 4 >> 2] = $6_1;
              $3_1 = $1_1 + 164 | 0;
              $6_1 = HEAP32[$3_1 + 4 >> 2];
              HEAP32[$12_1 >> 2] = HEAP32[$3_1 >> 2];
              HEAP32[$12_1 + 4 >> 2] = $6_1;
              $1_1 = $1_1 + 172 | 0;
              $6_1 = HEAP32[$1_1 + 4 >> 2];
              $3_1 = $12_1 + 8 | 0;
              HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
              HEAP32[$3_1 + 4 >> 2] = $6_1;
              break label$27;
             }
             $2_1 = 2;
             if (($1_1 | 0) < 2) {
              break label$26
             }
             $4_1 = HEAPU8[$0 + 332 | 0];
            }
            if ($4_1 & 2) {
             break label$25
            }
            $2_1 = $2_1 + -1 | 0;
            HEAP32[$0 >> 2] = $2_1;
            $1_1 = ($2_1 << 4) + $0 | 0;
            $6_1 = $1_1 + 12 | 0;
            $18_1 = HEAP32[$6_1 + 4 >> 2];
            $3_1 = $5_1 + 8 | 0;
            HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
            HEAP32[$3_1 + 4 >> 2] = $18_1;
            $3_1 = $1_1 + 4 | 0;
            $6_1 = HEAP32[$3_1 + 4 >> 2];
            HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
            HEAP32[$5_1 + 4 >> 2] = $6_1;
            $3_1 = $1_1 + 92 | 0;
            $6_1 = HEAP32[$3_1 + 4 >> 2];
            $5_1 = $11 + 8 | 0;
            HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
            HEAP32[$5_1 + 4 >> 2] = $6_1;
            $5_1 = $1_1 + 84 | 0;
            $3_1 = HEAP32[$5_1 + 4 >> 2];
            HEAP32[$11 >> 2] = HEAP32[$5_1 >> 2];
            HEAP32[$11 + 4 >> 2] = $3_1;
            $5_1 = $1_1 + 164 | 0;
            $3_1 = HEAP32[$5_1 + 4 >> 2];
            HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
            HEAP32[$9_1 + 4 >> 2] = $3_1;
            $1_1 = $1_1 + 172 | 0;
            $3_1 = HEAP32[$1_1 + 4 >> 2];
            $5_1 = $9_1 + 8 | 0;
            HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
            HEAP32[$5_1 + 4 >> 2] = $3_1;
            break label$25;
           }
           $2_1 = 1;
           if (($1_1 | 0) != 1) {
            break label$24
           }
           $4_1 = HEAPU8[$0 + 332 | 0];
          }
          if ($4_1 & 1) {
           break label$24
          }
          $2_1 = $2_1 + -1 | 0;
          HEAP32[$0 >> 2] = $2_1;
          $2_1 = ($2_1 << 4) + $0 | 0;
          $4_1 = $2_1 + 12 | 0;
          $5_1 = HEAP32[$4_1 + 4 >> 2];
          $1_1 = $8_1 + 8 | 0;
          HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
          HEAP32[$1_1 + 4 >> 2] = $5_1;
          $1_1 = $2_1 + 4 | 0;
          $4_1 = HEAP32[$1_1 + 4 >> 2];
          HEAP32[$8_1 >> 2] = HEAP32[$1_1 >> 2];
          HEAP32[$8_1 + 4 >> 2] = $4_1;
          $8_1 = $2_1 + 92 | 0;
          $5_1 = HEAP32[$8_1 + 4 >> 2];
          $1_1 = $0 + 84 | 0;
          $4_1 = $1_1 + 8 | 0;
          HEAP32[$4_1 >> 2] = HEAP32[$8_1 >> 2];
          HEAP32[$4_1 + 4 >> 2] = $5_1;
          $4_1 = $2_1 + 84 | 0;
          $8_1 = HEAP32[$4_1 + 4 >> 2];
          HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
          HEAP32[$1_1 + 4 >> 2] = $8_1;
          $8_1 = $2_1 + 164 | 0;
          $5_1 = HEAP32[$8_1 + 4 >> 2];
          $1_1 = $0 + 164 | 0;
          HEAP32[$1_1 >> 2] = HEAP32[$8_1 >> 2];
          HEAP32[$1_1 + 4 >> 2] = $5_1;
          $2_1 = $2_1 + 172 | 0;
          $4_1 = HEAP32[$2_1 + 4 >> 2];
          $1_1 = $1_1 + 8 | 0;
          HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
          HEAP32[$1_1 + 4 >> 2] = $4_1;
         }
         $2_1 = 0;
         if (HEAPF32[$26_1 >> 2] >= Math_fround(0.0) ^ 1 | HEAPF32[$0 + 340 >> 2] >= Math_fround(0.0) ^ 1 | HEAPF32[$0 + 344 >> 2] >= Math_fround(0.0) ^ 1) {
          break label$3
         }
         $2_1 = $10 >= Math_fround(0.0);
         break label$3;
        }
        if (!HEAPU8[$0 + 352 | 0]) {
         break label$5
        }
        break;
       case 0:
        break label$4;
       default:
        break label$6;
       };
      }
      $2_1 = 0;
      break label$3;
     }
     HEAP32[$0 + 276 >> 2] = 0;
     HEAP32[$0 + 280 >> 2] = 0;
     $2_1 = 1;
     HEAP8[$0 + 312 | 0] = 1;
     $0 = $0 + 284 | 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     break label$1;
    }
    $2_1 = HEAP32[$0 + 168 >> 2];
    HEAP32[$0 + 260 >> 2] = HEAP32[$0 + 164 >> 2];
    HEAP32[$0 + 264 >> 2] = $2_1;
    $2_1 = HEAP32[$0 + 88 >> 2];
    HEAP32[$0 + 244 >> 2] = HEAP32[$0 + 84 >> 2];
    HEAP32[$0 + 248 >> 2] = $2_1;
    $8_1 = $0 + 172 | 0;
    $5_1 = HEAP32[$8_1 + 4 >> 2];
    $4_1 = $0 + 268 | 0;
    $2_1 = $4_1;
    HEAP32[$2_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    $8_1 = $0 + 92 | 0;
    $5_1 = HEAP32[$8_1 + 4 >> 2];
    $2_1 = $0 + 252 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    HEAP8[$0 + 352 | 0] = 0;
    HEAP32[$0 + 288 >> 2] = 0;
    HEAPF32[$0 + 280 >> 2] = HEAPF32[$0 + 248 >> 2] - HEAPF32[$0 + 264 >> 2];
    HEAPF32[$0 + 276 >> 2] = HEAPF32[$0 + 244 >> 2] - HEAPF32[$0 + 260 >> 2];
    HEAPF32[$0 + 284 >> 2] = HEAPF32[$2_1 >> 2] - HEAPF32[$4_1 >> 2];
    $2_1 = $0 + 344 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    HEAP32[$0 + 336 >> 2] = 1065353216;
    HEAP32[$0 + 340 >> 2] = 0;
    HEAP8[$0 + 332 | 0] = $1_1;
    $2_1 = 1;
   }
   HEAP8[$0 + 312 | 0] = $2_1;
  }
  global$0 = $20 + 16 | 0;
  return ($2_1 & 255) != 0;
 }
 
 function $555($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = 0;
  $10 = HEAPU8[$4_1 + 16 | 0] & -16;
  HEAP8[$4_1 + 16 | 0] = $10;
  $27_1 = HEAPF32[$3_1 >> 2];
  $12_1 = HEAPF32[$1_1 >> 2];
  $17_1 = Math_fround($27_1 - $12_1);
  $11 = HEAPF32[$0 >> 2];
  $5_1 = Math_fround($11 - $12_1);
  $28_1 = HEAPF32[$3_1 + 4 >> 2];
  $13_1 = HEAPF32[$1_1 + 4 >> 2];
  $18_1 = Math_fround($28_1 - $13_1);
  $8_1 = HEAPF32[$0 + 4 >> 2];
  $6_1 = Math_fround($8_1 - $13_1);
  $29_1 = HEAPF32[$3_1 + 8 >> 2];
  $14 = HEAPF32[$1_1 + 8 >> 2];
  $19_1 = Math_fround($29_1 - $14);
  $15_1 = HEAPF32[$0 + 8 >> 2];
  $7_1 = Math_fround($15_1 - $14);
  $9_1 = Math_fround(Math_fround(Math_fround($17_1 * $5_1) + Math_fround($18_1 * $6_1)) + Math_fround($19_1 * $7_1));
  $30 = $4_1;
  $23_1 = HEAPF32[$2_1 >> 2];
  $20 = Math_fround($23_1 - $12_1);
  $24_1 = HEAPF32[$2_1 + 4 >> 2];
  $21 = Math_fround($24_1 - $13_1);
  $25 = HEAPF32[$2_1 + 8 >> 2];
  $22_1 = Math_fround($25 - $14);
  $6_1 = Math_fround(Math_fround(Math_fround($20 * $5_1) + Math_fround($21 * $6_1)) + Math_fround($22_1 * $7_1));
  label$1 : {
   if (!($6_1 <= Math_fround(0.0) ^ 1 | $9_1 <= Math_fround(0.0) ^ 1)) {
    $0 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $0;
    $0 = $1_1 + 8 | 0;
    $1_1 = HEAP32[$0 + 4 >> 2];
    $2_1 = $4_1 + 8 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    HEAP8[$4_1 + 16 | 0] = $10 | 1;
    $6_1 = Math_fround(0.0);
    $5_1 = Math_fround(0.0);
    $7_1 = Math_fround(1.0);
    break label$1;
   }
   $5_1 = Math_fround($11 - $23_1);
   $7_1 = Math_fround($8_1 - $24_1);
   $16_1 = Math_fround($15_1 - $25);
   $26_1 = Math_fround(Math_fround(Math_fround($17_1 * $5_1) + Math_fround($18_1 * $7_1)) + Math_fround($19_1 * $16_1));
   $7_1 = Math_fround(Math_fround(Math_fround($20 * $5_1) + Math_fround($21 * $7_1)) + Math_fround($22_1 * $16_1));
   if (!($7_1 >= Math_fround(0.0) ^ 1 | $26_1 <= $7_1 ^ 1)) {
    $0 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $0;
    $0 = $2_1 + 8 | 0;
    $1_1 = HEAP32[$0 + 4 >> 2];
    $2_1 = $4_1 + 8 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    HEAP8[$4_1 + 16 | 0] = $10 | 2;
    $6_1 = Math_fround(1.0);
    $5_1 = Math_fround(0.0);
    $7_1 = Math_fround(0.0);
    break label$1;
   }
   $16_1 = Math_fround(Math_fround($6_1 * $26_1) - Math_fround($7_1 * $9_1));
   label$4 : {
    if ($7_1 <= Math_fround(0.0) ^ 1 | $6_1 >= Math_fround(0.0) ^ 1) {
     break label$4
    }
    $5_1 = Math_fround(0.0);
    if (!($16_1 <= Math_fround(0.0))) {
     break label$4
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAP8[$4_1 + 16 | 0] = $10 | 3;
    $6_1 = Math_fround($6_1 / Math_fround($6_1 - $7_1));
    HEAPF32[$4_1 + 8 >> 2] = $14 + Math_fround($22_1 * $6_1);
    HEAPF32[$4_1 + 4 >> 2] = $13_1 + Math_fround($21 * $6_1);
    HEAPF32[$4_1 >> 2] = $12_1 + Math_fround($20 * $6_1);
    $7_1 = Math_fround(Math_fround(1.0) - $6_1);
    break label$1;
   }
   $5_1 = Math_fround($11 - $27_1);
   $8_1 = Math_fround($8_1 - $28_1);
   $15_1 = Math_fround($15_1 - $29_1);
   $11 = Math_fround(Math_fround(Math_fround($20 * $5_1) + Math_fround($21 * $8_1)) + Math_fround($22_1 * $15_1));
   $5_1 = Math_fround(Math_fround(Math_fround($17_1 * $5_1) + Math_fround($18_1 * $8_1)) + Math_fround($19_1 * $15_1));
   if (!($5_1 >= Math_fround(0.0) ^ 1 | $11 <= $5_1 ^ 1)) {
    $0 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $0;
    $0 = $3_1 + 8 | 0;
    $1_1 = HEAP32[$0 + 4 >> 2];
    $2_1 = $4_1 + 8 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    HEAP8[$4_1 + 16 | 0] = $10 | 4;
    $5_1 = Math_fround(1.0);
    $6_1 = Math_fround(0.0);
    $7_1 = Math_fround(0.0);
    break label$1;
   }
   $8_1 = Math_fround(Math_fround($11 * $9_1) - Math_fround($6_1 * $5_1));
   label$6 : {
    if ($5_1 <= Math_fround(0.0) ^ 1 | $9_1 >= Math_fround(0.0) ^ 1) {
     break label$6
    }
    $6_1 = Math_fround(0.0);
    if (!($8_1 <= Math_fround(0.0))) {
     break label$6
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAP8[$4_1 + 16 | 0] = $10 | 5;
    $5_1 = Math_fround($9_1 / Math_fround($9_1 - $5_1));
    HEAPF32[$4_1 + 8 >> 2] = $14 + Math_fround($19_1 * $5_1);
    HEAPF32[$4_1 + 4 >> 2] = $13_1 + Math_fround($18_1 * $5_1);
    HEAPF32[$4_1 >> 2] = $12_1 + Math_fround($17_1 * $5_1);
    $7_1 = Math_fround(Math_fround(1.0) - $5_1);
    break label$1;
   }
   label$7 : {
    $9_1 = Math_fround(Math_fround($7_1 * $5_1) - Math_fround($11 * $26_1));
    if (!($9_1 <= Math_fround(0.0))) {
     break label$7
    }
    $6_1 = Math_fround($26_1 - $7_1);
    if (!($6_1 >= Math_fround(0.0))) {
     break label$7
    }
    $5_1 = Math_fround($11 - $5_1);
    if (!($5_1 >= Math_fround(0.0))) {
     break label$7
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAP8[$4_1 + 16 | 0] = $10 | 6;
    $5_1 = Math_fround($6_1 / Math_fround($6_1 + $5_1));
    HEAPF32[$4_1 + 8 >> 2] = $25 + Math_fround(Math_fround($29_1 - $25) * $5_1);
    HEAPF32[$4_1 + 4 >> 2] = $24_1 + Math_fround(Math_fround($28_1 - $24_1) * $5_1);
    HEAPF32[$4_1 >> 2] = $23_1 + Math_fround(Math_fround($27_1 - $23_1) * $5_1);
    $6_1 = Math_fround(Math_fround(1.0) - $5_1);
    $7_1 = Math_fround(0.0);
    break label$1;
   }
   HEAP32[$4_1 + 12 >> 2] = 0;
   HEAP8[$4_1 + 16 | 0] = $10 | 7;
   $6_1 = Math_fround(Math_fround(1.0) / Math_fround($16_1 + Math_fround($9_1 + $8_1)));
   $5_1 = Math_fround($16_1 * $6_1);
   $6_1 = Math_fround($8_1 * $6_1);
   HEAPF32[$4_1 + 8 >> 2] = Math_fround($19_1 * $5_1) + Math_fround($14 + Math_fround($22_1 * $6_1));
   HEAPF32[$4_1 + 4 >> 2] = Math_fround($18_1 * $5_1) + Math_fround($13_1 + Math_fround($21 * $6_1));
   HEAPF32[$4_1 >> 2] = Math_fround($17_1 * $5_1) + Math_fround($12_1 + Math_fround($20 * $6_1));
   $7_1 = Math_fround(Math_fround(Math_fround(1.0) - $6_1) - $5_1);
  }
  HEAPF32[$30 + 20 >> 2] = $7_1;
  HEAP32[$4_1 + 32 >> 2] = 0;
  HEAPF32[$4_1 + 28 >> 2] = $5_1;
  HEAPF32[$4_1 + 24 >> 2] = $6_1;
 }
 
 function $556($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32 = 0, $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  $12_1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $12_1;
  $14 = $0 + 8 | 0;
  $12_1 = HEAP32[$14 + 4 >> 2];
  $32 = HEAP32[$14 >> 2];
  HEAP8[$5_1 + 16 | 0] = HEAPU8[$5_1 + 16 | 0] | 15;
  $24_1 = $5_1 + 8 | 0;
  HEAP32[$24_1 >> 2] = $32;
  HEAP32[$24_1 + 4 >> 2] = $12_1;
  $12_1 = 0;
  HEAP8[$6_1 + 24 | 0] = 0;
  $34 = HEAPF32[$14 >> 2];
  $11 = HEAPF32[$1_1 + 8 >> 2];
  $33_1 = Math_fround($34 - $11);
  $7_1 = HEAPF32[$2_1 + 8 >> 2];
  $10 = Math_fround($7_1 - $11);
  $35 = HEAPF32[$3_1 >> 2];
  $9_1 = HEAPF32[$1_1 >> 2];
  $8_1 = Math_fround($35 - $9_1);
  $36_1 = HEAPF32[$4_1 + 4 >> 2];
  $25 = HEAPF32[$1_1 + 4 >> 2];
  $16_1 = Math_fround($36_1 - $25);
  $37_1 = HEAPF32[$3_1 + 4 >> 2];
  $17_1 = Math_fround($37_1 - $25);
  $38 = HEAPF32[$4_1 >> 2];
  $18_1 = Math_fround($38 - $9_1);
  $22_1 = Math_fround(Math_fround($8_1 * $16_1) - Math_fround($17_1 * $18_1));
  $26_1 = HEAPF32[$2_1 >> 2];
  $15_1 = Math_fround($26_1 - $9_1);
  $39_1 = HEAPF32[$4_1 + 8 >> 2];
  $19_1 = Math_fround($39_1 - $11);
  $40_1 = HEAPF32[$3_1 + 8 >> 2];
  $13_1 = Math_fround($40_1 - $11);
  $23_1 = Math_fround(Math_fround($17_1 * $19_1) - Math_fround($13_1 * $16_1));
  $27_1 = HEAPF32[$2_1 + 4 >> 2];
  $20 = Math_fround($27_1 - $25);
  $28_1 = Math_fround(Math_fround($13_1 * $18_1) - Math_fround($8_1 * $19_1));
  $21 = Math_fround(Math_fround($10 * $22_1) + Math_fround(Math_fround($15_1 * $23_1) + Math_fround($20 * $28_1)));
  $29_1 = Math_fround($33_1 * $22_1);
  $41_1 = HEAPF32[$0 >> 2];
  $22_1 = Math_fround($41_1 - $9_1);
  $30 = Math_fround($22_1 * $23_1);
  $42 = HEAPF32[$0 + 4 >> 2];
  $23_1 = Math_fround($42 - $25);
  $14 = Math_fround($21 * $21) < Math_fround(9.99999905104687e-09) ? -1 : Math_fround(Math_fround($29_1 + Math_fround($30 + Math_fround($23_1 * $28_1))) * $21) < Math_fround(0.0);
  $28_1 = Math_fround(Math_fround($20 * $13_1) - Math_fround($10 * $17_1));
  $43_1 = Math_fround(Math_fround($10 * $8_1) - Math_fround($15_1 * $13_1));
  $44_1 = Math_fround(Math_fround($15_1 * $17_1) - Math_fround($20 * $8_1));
  $21 = Math_fround(Math_fround(Math_fround($28_1 * $18_1) + Math_fround($43_1 * $16_1)) + Math_fround($44_1 * $19_1));
  $29_1 = $13_1;
  $13_1 = Math_fround(Math_fround($20 * $18_1) - Math_fround($15_1 * $16_1));
  $30 = $8_1;
  $8_1 = Math_fround(Math_fround($10 * $16_1) - Math_fround($20 * $19_1));
  $16_1 = Math_fround(Math_fround($15_1 * $19_1) - Math_fround($10 * $18_1));
  $10 = Math_fround(Math_fround($29_1 * $13_1) + Math_fround(Math_fround($30 * $8_1) + Math_fround($17_1 * $16_1)));
  $30 = Math_fround($11 - $7_1);
  $11 = Math_fround($37_1 - $27_1);
  $17_1 = Math_fround($38 - $26_1);
  $18_1 = Math_fround($35 - $26_1);
  $15_1 = Math_fround($36_1 - $27_1);
  $19_1 = Math_fround(Math_fround($11 * $17_1) - Math_fround($18_1 * $15_1));
  $20 = Math_fround($9_1 - $26_1);
  $9_1 = Math_fround($40_1 - $7_1);
  $29_1 = $11;
  $11 = Math_fround($39_1 - $7_1);
  $15_1 = Math_fround(Math_fround($9_1 * $15_1) - Math_fround($29_1 * $11));
  $9_1 = Math_fround(Math_fround($18_1 * $11) - Math_fround($9_1 * $17_1));
  $11 = Math_fround(Math_fround($30 * $19_1) + Math_fround(Math_fround($20 * $15_1) + Math_fround(Math_fround($25 - $27_1) * $9_1)));
  $32 = Math_fround($11 * $11) < Math_fround(9.99999905104687e-09) ? -1 : Math_fround(Math_fround(Math_fround(Math_fround($34 - $7_1) * $19_1) + Math_fround(Math_fround(Math_fround($41_1 - $26_1) * $15_1) + Math_fround(Math_fround($42 - $27_1) * $9_1))) * $11) < Math_fround(0.0);
  $24_1 = Math_fround($10 * $10) < Math_fround(9.99999905104687e-09) ? -1 : Math_fround(Math_fround(Math_fround($33_1 * $13_1) + Math_fround(Math_fround($22_1 * $8_1) + Math_fround($23_1 * $16_1))) * $10) < Math_fround(0.0);
  $31_1 = Math_fround($21 * $21) < Math_fround(9.99999905104687e-09) ? -1 : Math_fround(Math_fround(Math_fround(Math_fround($22_1 * $28_1) + Math_fround($23_1 * $43_1)) + Math_fround($44_1 * $33_1)) * $21) < Math_fround(0.0);
  $45_1 = $32 | ($24_1 | ($31_1 | $14));
  label$1 : {
   if (($45_1 | 0) <= -1) {
    HEAP8[$5_1 + 36 | 0] = 1;
    break label$1;
   }
   if (!$45_1) {
    break label$1
   }
   $8_1 = Math_fround(3402823466385288598117041.0e14);
   label$3 : {
    if (!$31_1) {
     break label$3
    }
    $555($0, $1_1, $2_1, $3_1, $6_1 + 8 | 0);
    $11 = HEAPF32[$6_1 + 8 >> 2];
    $7_1 = Math_fround($11 - HEAPF32[$0 >> 2]);
    $8_1 = Math_fround($7_1 * $7_1);
    $7_1 = HEAPF32[$6_1 + 12 >> 2];
    $10 = Math_fround($7_1 - HEAPF32[$0 + 4 >> 2]);
    $8_1 = Math_fround($8_1 + Math_fround($10 * $10));
    $10 = HEAPF32[$6_1 + 16 >> 2];
    $9_1 = Math_fround($10 - HEAPF32[$0 + 8 >> 2]);
    $9_1 = Math_fround($8_1 + Math_fround($9_1 * $9_1));
    $8_1 = Math_fround(3402823466385288598117041.0e14);
    if (!($9_1 < Math_fround(3402823466385288598117041.0e14))) {
     break label$3
    }
    HEAP32[$5_1 + 12 >> 2] = HEAP32[$6_1 + 20 >> 2];
    HEAPF32[$5_1 + 8 >> 2] = $10;
    HEAPF32[$5_1 + 4 >> 2] = $7_1;
    HEAPF32[$5_1 >> 2] = $11;
    $12_1 = HEAP32[$6_1 + 32 >> 2];
    HEAP32[$5_1 + 20 >> 2] = HEAP32[$6_1 + 28 >> 2];
    HEAP32[$5_1 + 24 >> 2] = $12_1;
    HEAP32[$5_1 + 32 >> 2] = 0;
    HEAP32[$5_1 + 28 >> 2] = HEAP32[$6_1 + 36 >> 2];
    $12_1 = HEAPU8[$6_1 + 24 | 0];
    HEAP8[$5_1 + 16 | 0] = $12_1 & 1 | HEAPU8[$5_1 + 16 | 0] & 240 | $12_1 & 2 | $12_1 & 4;
    $8_1 = $9_1;
   }
   $11 = $8_1;
   label$5 : {
    if (!$14) {
     break label$5
    }
    $555($0, $1_1, $3_1, $4_1, $6_1 + 8 | 0);
    $10 = HEAPF32[$6_1 + 8 >> 2];
    $7_1 = Math_fround($10 - HEAPF32[$0 >> 2]);
    $8_1 = Math_fround($7_1 * $7_1);
    $9_1 = HEAPF32[$6_1 + 12 >> 2];
    $7_1 = Math_fround($9_1 - HEAPF32[$0 + 4 >> 2]);
    $13_1 = Math_fround($8_1 + Math_fround($7_1 * $7_1));
    $8_1 = HEAPF32[$6_1 + 16 >> 2];
    $7_1 = Math_fround($8_1 - HEAPF32[$0 + 8 >> 2]);
    $7_1 = Math_fround($13_1 + Math_fround($7_1 * $7_1));
    if (!($7_1 < $11)) {
     break label$5
    }
    HEAP32[$5_1 + 12 >> 2] = HEAP32[$6_1 + 20 >> 2];
    HEAPF32[$5_1 + 8 >> 2] = $8_1;
    HEAPF32[$5_1 + 4 >> 2] = $9_1;
    HEAPF32[$5_1 >> 2] = $10;
    HEAP32[$5_1 + 20 >> 2] = HEAP32[$6_1 + 28 >> 2];
    HEAP32[$5_1 + 24 >> 2] = 0;
    $12_1 = $6_1 + 32 | 0;
    $14 = HEAP32[$12_1 + 4 >> 2];
    $31_1 = $5_1 + 28 | 0;
    HEAP32[$31_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$31_1 + 4 >> 2] = $14;
    $12_1 = HEAPU8[$6_1 + 24 | 0];
    $14 = $12_1 << 1;
    HEAP8[$5_1 + 16 | 0] = $14 & 8 | ($14 & 4 | ($12_1 & 1 | HEAPU8[$5_1 + 16 | 0] & 240));
    $11 = $7_1;
   }
   label$6 : {
    if (!$24_1) {
     break label$6
    }
    $555($0, $1_1, $4_1, $2_1, $6_1 + 8 | 0);
    $10 = HEAPF32[$6_1 + 8 >> 2];
    $7_1 = Math_fround($10 - HEAPF32[$0 >> 2]);
    $8_1 = Math_fround($7_1 * $7_1);
    $9_1 = HEAPF32[$6_1 + 12 >> 2];
    $7_1 = Math_fround($9_1 - HEAPF32[$0 + 4 >> 2]);
    $13_1 = Math_fround($8_1 + Math_fround($7_1 * $7_1));
    $8_1 = HEAPF32[$6_1 + 16 >> 2];
    $7_1 = Math_fround($8_1 - HEAPF32[$0 + 8 >> 2]);
    $7_1 = Math_fround($13_1 + Math_fround($7_1 * $7_1));
    if (!($7_1 < $11)) {
     break label$6
    }
    HEAP32[$5_1 + 12 >> 2] = HEAP32[$6_1 + 20 >> 2];
    HEAPF32[$5_1 + 8 >> 2] = $8_1;
    HEAPF32[$5_1 + 4 >> 2] = $9_1;
    HEAPF32[$5_1 >> 2] = $10;
    HEAP32[$5_1 + 20 >> 2] = HEAP32[$6_1 + 28 >> 2];
    HEAP32[$5_1 + 28 >> 2] = 0;
    HEAP32[$5_1 + 32 >> 2] = HEAP32[$6_1 + 32 >> 2];
    HEAP32[$5_1 + 24 >> 2] = HEAP32[$6_1 + 36 >> 2];
    $1_1 = HEAPU8[$6_1 + 24 | 0];
    HEAP8[$5_1 + 16 | 0] = $1_1 & 1 | HEAPU8[$5_1 + 16 | 0] & 240 | $1_1 >>> 1 & 2 | $1_1 << 2 & 8;
    $11 = $7_1;
   }
   if (!$32) {
    $12_1 = 1;
    break label$1;
   }
   $555($0, $2_1, $4_1, $3_1, $6_1 + 8 | 0);
   $12_1 = 1;
   $7_1 = HEAPF32[$6_1 + 8 >> 2];
   $10 = Math_fround($7_1 - HEAPF32[$0 >> 2]);
   $8_1 = Math_fround($10 * $10);
   $10 = HEAPF32[$6_1 + 12 >> 2];
   $9_1 = Math_fround($10 - HEAPF32[$0 + 4 >> 2]);
   $13_1 = Math_fround($8_1 + Math_fround($9_1 * $9_1));
   $9_1 = HEAPF32[$6_1 + 16 >> 2];
   $8_1 = Math_fround($9_1 - HEAPF32[$0 + 8 >> 2]);
   if (!(Math_fround($13_1 + Math_fround($8_1 * $8_1)) < $11)) {
    break label$1
   }
   HEAP32[$5_1 + 12 >> 2] = HEAP32[$6_1 + 20 >> 2];
   HEAPF32[$5_1 + 8 >> 2] = $9_1;
   HEAPF32[$5_1 + 4 >> 2] = $10;
   HEAPF32[$5_1 >> 2] = $7_1;
   HEAP32[$5_1 + 20 >> 2] = 0;
   HEAP32[$5_1 + 24 >> 2] = HEAP32[$6_1 + 28 >> 2];
   HEAP32[$5_1 + 32 >> 2] = HEAP32[$6_1 + 32 >> 2];
   HEAP32[$5_1 + 28 >> 2] = HEAP32[$6_1 + 36 >> 2];
   $0 = HEAPU8[$6_1 + 24 | 0];
   HEAP8[$5_1 + 16 | 0] = $0 & 4 | HEAPU8[$5_1 + 16 | 0] & 240 | $0 << 1 & 2 | $0 << 2 & 8;
  }
  global$0 = $6_1 + 48 | 0;
  return $12_1;
 }
 
 function $557($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = $554($0);
  $3_1 = $0 + 284 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $1_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $2_1 = HEAP32[$0 + 280 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$0 + 276 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  return $4_1;
 }
 
 function $558($0, $1_1) {
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0);
  $5_1 = HEAP32[$0 >> 2];
  $4_1 = 0;
  label$1 : {
   if (($5_1 | 0) < 1) {
    break label$1
   }
   $2_1 = $0 + 8 | 0;
   $7_1 = HEAPF32[$0 + 308 >> 2];
   $8_1 = HEAPF32[$1_1 + 8 >> 2];
   $9_1 = HEAPF32[$1_1 + 4 >> 2];
   $10 = HEAPF32[$1_1 >> 2];
   while (1) {
    $3_1 = Math_fround($10 - HEAPF32[$2_1 + -4 >> 2]);
    $6_1 = Math_fround($3_1 * $3_1);
    $3_1 = Math_fround($9_1 - HEAPF32[$2_1 >> 2]);
    $6_1 = Math_fround($6_1 + Math_fround($3_1 * $3_1));
    $3_1 = Math_fround($8_1 - HEAPF32[$2_1 + 4 >> 2]);
    $4_1 = 1;
    if (!!(Math_fround($6_1 + Math_fround($3_1 * $3_1)) <= $7_1)) {
     break label$1
    }
    $2_1 = $2_1 + 16 | 0;
    $5_1 = $5_1 + -1 | 0;
    if ($5_1) {
     continue
    }
    break;
   };
   $4_1 = 0;
  }
  $2_1 = $4_1;
  if (!(HEAPF32[$1_1 + 12 >> 2] != HEAPF32[$0 + 304 >> 2] | HEAPF32[$1_1 + 8 >> 2] != HEAPF32[$0 + 300 >> 2] | (HEAPF32[$1_1 + 4 >> 2] != HEAPF32[$0 + 296 >> 2] | HEAPF32[$1_1 >> 2] != HEAPF32[$0 + 292 >> 2]))) {
   $2_1 = 1
  }
  return $2_1;
 }
 
 function $559($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $554($0);
  $3_1 = HEAP32[$0 + 248 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$0 + 244 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $3_1 = $0 + 252 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $1_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $3_1 = $0 + 268 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $2_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$0 + 264 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$0 + 260 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
 }
 
 function $560($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  HEAP32[$0 >> 2] = 12924;
  HEAP32[$0 + 32 >> 2] = $2_1;
  HEAP32[$0 + 28 >> 2] = $1_1;
  HEAP32[$0 + 24 >> 2] = $3_1;
  HEAP32[$0 + 20 >> 2] = $4_1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 1065353216;
  $3_1 = $0 + 12 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[$2_1 + 4 >> 2];
  (wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1))), HEAPF32[wasm2js_i32$0 + 44 >> 2] = wasm2js_f32$0;
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1));
  HEAP32[$0 + 72 >> 2] = 1;
  HEAP32[$0 + 76 >> 2] = 1;
  HEAP32[$0 + 60 >> 2] = -1;
  HEAP8[$0 + 52 | 0] = 0;
  HEAPF32[$0 + 48 >> 2] = $5_1;
  return $0;
 }
 
 function $561($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  HEAP32[$0 + 72 >> 2] = 1;
  HEAP32[$0 + 76 >> 2] = 1;
  HEAP32[$0 + 60 >> 2] = -1;
  HEAP8[$0 + 52 | 0] = 0;
  HEAPF32[$0 + 48 >> 2] = $6_1;
  HEAPF32[$0 + 44 >> 2] = $5_1;
  HEAP32[$0 + 40 >> 2] = $4_1;
  HEAP32[$0 + 36 >> 2] = $3_1;
  HEAP32[$0 + 32 >> 2] = $2_1;
  HEAP32[$0 + 28 >> 2] = $1_1;
  HEAP32[$0 + 24 >> 2] = $7_1;
  HEAP32[$0 + 20 >> 2] = $8_1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 1065353216;
  HEAP32[$0 >> 2] = 12924;
  $1_1 = $0 + 12 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  return $0;
 }
 
 function $562($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $563($0, $1_1, $2_1, $3_1);
 }
 
 function $563($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0);
  $4_1 = global$0 - 272 | 0;
  global$0 = $4_1;
  HEAP32[$0 + 56 >> 2] = 0;
  $12_1 = $4_1 + 264 | 0;
  HEAP32[$12_1 >> 2] = 0;
  HEAP32[$12_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 256 >> 2] = 0;
  HEAP32[$4_1 + 260 >> 2] = 0;
  $5_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $12_1 = $4_1 + 168 | 0;
  HEAP32[$12_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$12_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 24 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $12_1 = $4_1 + 184 | 0;
  HEAP32[$12_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$12_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 40 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $12_1 = $4_1 + 200 | 0;
  HEAP32[$12_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$12_1 + 4 >> 2] = $8_1;
  $8_1 = $1_1 + 56 | 0;
  $13_1 = HEAP32[$8_1 + 4 >> 2];
  $12_1 = $4_1 + 216 | 0;
  $5_1 = $12_1;
  HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $13_1;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 + 160 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 164 >> 2] = $5_1;
  $5_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$4_1 + 176 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$4_1 + 180 >> 2] = $5_1;
  $5_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$4_1 + 192 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$4_1 + 196 >> 2] = $5_1;
  $5_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$4_1 + 208 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$4_1 + 212 >> 2] = $5_1;
  $13_1 = $1_1 + 120 | 0;
  $18_1 = HEAP32[$13_1 + 4 >> 2];
  $5_1 = $4_1 + 152 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$13_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $18_1;
  $13_1 = $1_1 + 72 | 0;
  $18_1 = HEAP32[$13_1 + 4 >> 2];
  $8_1 = $4_1 + 104 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$13_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $18_1;
  $13_1 = $1_1 + 88 | 0;
  $18_1 = HEAP32[$13_1 + 4 >> 2];
  $8_1 = $4_1 + 120 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$13_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $18_1;
  $13_1 = $1_1 + 104 | 0;
  $18_1 = HEAP32[$13_1 + 4 >> 2];
  $8_1 = $4_1 + 136 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$13_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $18_1;
  $8_1 = HEAP32[$1_1 + 68 >> 2];
  HEAP32[$4_1 + 96 >> 2] = HEAP32[$1_1 + 64 >> 2];
  HEAP32[$4_1 + 100 >> 2] = $8_1;
  $8_1 = $1_1 + 80 | 0;
  $13_1 = HEAP32[$8_1 + 4 >> 2];
  HEAP32[$4_1 + 112 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$4_1 + 116 >> 2] = $13_1;
  $8_1 = $1_1 + 96 | 0;
  $13_1 = HEAP32[$8_1 + 4 >> 2];
  HEAP32[$4_1 + 128 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$4_1 + 132 >> 2] = $13_1;
  $8_1 = $1_1 + 112 | 0;
  $13_1 = HEAP32[$8_1 + 4 >> 2];
  HEAP32[$4_1 + 144 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$4_1 + 148 >> 2] = $13_1;
  $8_1 = $4_1 + 148 | 0;
  $6_1 = HEAPF32[$8_1 >> 2];
  $13_1 = $4_1 + 212 | 0;
  $7_1 = HEAPF32[$13_1 >> 2];
  $9_1 = HEAPF32[$4_1 + 144 >> 2];
  $10 = HEAPF32[$4_1 + 208 >> 2];
  $15_1 = HEAPF32[$12_1 >> 2];
  $11 = HEAPF32[$5_1 >> 2];
  $23_1 = Math_fround(Math_fround($15_1 + $11) * Math_fround(.5));
  HEAPF32[$12_1 >> 2] = $15_1 - $23_1;
  $24_1 = Math_fround(Math_fround($7_1 + $6_1) * Math_fround(.5));
  HEAPF32[$13_1 >> 2] = $7_1 - $24_1;
  $25 = Math_fround(Math_fround($10 + $9_1) * Math_fround(.5));
  HEAPF32[$4_1 + 208 >> 2] = $10 - $25;
  HEAPF32[$5_1 >> 2] = $11 - $23_1;
  HEAPF32[$8_1 >> 2] = $6_1 - $24_1;
  HEAPF32[$4_1 + 144 >> 2] = $9_1 - $25;
  $13_1 = 0;
  $13_1 = HEAP32[HEAP32[$0 + 28 >> 2] + 4 >> 2] + -17 >>> 0 <= 1 ? HEAP32[HEAP32[$0 + 32 >> 2] + 4 >> 2] + -17 >>> 0 < 2 : $13_1;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 1065353216;
  HEAP32[$0 + 60 >> 2] = -1;
  HEAP32[$0 + 64 >> 2] = 0;
  $12_1 = $0 + 12 | 0;
  HEAP32[$12_1 >> 2] = 0;
  HEAP32[$12_1 + 4 >> 2] = 0;
  HEAP32[6032] = HEAP32[6032] + 1;
  $14 = HEAPF32[$0 + 44 >> 2];
  $6_1 = HEAPF32[$0 + 48 >> 2];
  $18_1 = HEAPU8[$0 + 52 | 0];
  $552(HEAP32[$0 + 24 >> 2]);
  $15_1 = $18_1 ? Math_fround(0.0) : $6_1;
  $12_1 = $0 + 4 | 0;
  $7_1 = Math_fround(999999984306749440.0);
  $8_1 = 0;
  while (1) {
   HEAP32[$4_1 + 252 >> 2] = 0;
   $10 = HEAPF32[$0 + 8 >> 2];
   $11 = Math_fround(-$10);
   $6_1 = HEAPF32[$0 + 4 >> 2];
   $9_1 = HEAPF32[$0 + 12 >> 2];
   HEAPF32[$4_1 + 248 >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 + 24 >> 2] * $11) - Math_fround($6_1 * HEAPF32[$1_1 + 8 >> 2])) - Math_fround($9_1 * HEAPF32[$1_1 + 40 >> 2]);
   HEAPF32[$4_1 + 244 >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 + 20 >> 2] * $11) - Math_fround($6_1 * HEAPF32[$1_1 + 4 >> 2])) - Math_fround($9_1 * HEAPF32[$1_1 + 36 >> 2]);
   HEAPF32[$4_1 + 240 >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 + 16 >> 2] * $11) - Math_fround($6_1 * HEAPF32[$1_1 >> 2])) - Math_fround($9_1 * HEAPF32[$1_1 + 32 >> 2]);
   HEAP32[$4_1 + 236 >> 2] = 0;
   HEAPF32[$4_1 + 232 >> 2] = Math_fround(Math_fround($6_1 * HEAPF32[$1_1 + 72 >> 2]) + Math_fround($10 * HEAPF32[$1_1 + 88 >> 2])) + Math_fround($9_1 * HEAPF32[$1_1 + 104 >> 2]);
   HEAPF32[$4_1 + 228 >> 2] = Math_fround(Math_fround($6_1 * HEAPF32[$1_1 + 68 >> 2]) + Math_fround($10 * HEAPF32[$1_1 + 84 >> 2])) + Math_fround($9_1 * HEAPF32[$1_1 + 100 >> 2]);
   HEAPF32[$4_1 + 224 >> 2] = Math_fround(Math_fround($6_1 * HEAPF32[$1_1 + 64 >> 2]) + Math_fround($10 * HEAPF32[$1_1 + 80 >> 2])) + Math_fround($9_1 * HEAPF32[$1_1 + 96 >> 2]);
   $104($4_1 + 80 | 0, HEAP32[$0 + 28 >> 2], $4_1 + 240 | 0);
   $104($4_1 - -64 | 0, HEAP32[$0 + 32 >> 2], $4_1 + 224 | 0);
   HEAP32[$4_1 + 60 >> 2] = 0;
   $6_1 = HEAPF32[$4_1 + 80 >> 2];
   $10 = HEAPF32[$4_1 + 84 >> 2];
   $11 = HEAPF32[$4_1 + 88 >> 2];
   $9_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$4_1 + 192 >> 2]) + Math_fround($10 * HEAPF32[$4_1 + 196 >> 2])) + Math_fround($11 * HEAPF32[$4_1 + 200 >> 2])) + HEAPF32[$4_1 + 216 >> 2]);
   HEAPF32[$4_1 + 56 >> 2] = $9_1;
   $17_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$4_1 + 176 >> 2]) + Math_fround($10 * HEAPF32[$4_1 + 180 >> 2])) + Math_fround($11 * HEAPF32[$4_1 + 184 >> 2])) + HEAPF32[$4_1 + 212 >> 2]);
   HEAPF32[$4_1 + 52 >> 2] = $17_1;
   $20 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$4_1 + 160 >> 2]) + Math_fround($10 * HEAPF32[$4_1 + 164 >> 2])) + Math_fround($11 * HEAPF32[$4_1 + 168 >> 2])) + HEAPF32[$4_1 + 208 >> 2]);
   HEAPF32[$4_1 + 48 >> 2] = $20;
   HEAP32[$4_1 + 44 >> 2] = 0;
   $6_1 = HEAPF32[$4_1 + 64 >> 2];
   $11 = HEAPF32[$4_1 + 68 >> 2];
   $16_1 = HEAPF32[$4_1 + 72 >> 2];
   $10 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$4_1 + 128 >> 2]) + Math_fround($11 * HEAPF32[$4_1 + 132 >> 2])) + Math_fround($16_1 * HEAPF32[$4_1 + 136 >> 2])) + HEAPF32[$4_1 + 152 >> 2]);
   HEAPF32[$4_1 + 40 >> 2] = $10;
   $19_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$4_1 + 112 >> 2]) + Math_fround($11 * HEAPF32[$4_1 + 116 >> 2])) + Math_fround($16_1 * HEAPF32[$4_1 + 120 >> 2])) + HEAPF32[$4_1 + 148 >> 2]);
   HEAPF32[$4_1 + 36 >> 2] = $19_1;
   $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$4_1 + 96 >> 2]) + Math_fround($11 * HEAPF32[$4_1 + 100 >> 2])) + Math_fround($16_1 * HEAPF32[$4_1 + 104 >> 2])) + HEAPF32[$4_1 + 144 >> 2]);
   HEAPF32[$4_1 + 32 >> 2] = $6_1;
   if ($13_1) {
    HEAP32[$4_1 + 40 >> 2] = 0;
    HEAP32[$4_1 + 56 >> 2] = 0;
    $10 = Math_fround(0.0);
    $9_1 = Math_fround(0.0);
   }
   HEAP32[$4_1 + 28 >> 2] = 0;
   $11 = Math_fround($17_1 - $19_1);
   HEAPF32[$4_1 + 20 >> 2] = $11;
   $16_1 = HEAPF32[$0 + 8 >> 2];
   $6_1 = Math_fround($20 - $6_1);
   HEAPF32[$4_1 + 16 >> 2] = $6_1;
   $17_1 = HEAPF32[$0 + 4 >> 2];
   $9_1 = Math_fround($9_1 - $10);
   HEAPF32[$4_1 + 24 >> 2] = $9_1;
   label$4 : {
    label$5 : {
     $6_1 = Math_fround(Math_fround(Math_fround($6_1 * $17_1) + Math_fround($11 * $16_1)) + Math_fround($9_1 * HEAPF32[$0 + 12 >> 2]));
     if (!($6_1 > Math_fround(0.0) ^ 1 | Math_fround($6_1 * $6_1) > Math_fround($7_1 * HEAPF32[$1_1 + 128 >> 2]) ^ 1)) {
      HEAP32[$0 + 68 >> 2] = 10;
      break label$5;
     }
     if ($558(HEAP32[$0 + 24 >> 2], $4_1 + 16 | 0)) {
      $8_1 = 1;
      HEAP32[$0 + 68 >> 2] = 1;
      $5_1 = 2;
      break label$4;
     }
     $6_1 = Math_fround($7_1 - $6_1);
     if (!!($6_1 <= Math_fround($7_1 * Math_fround(9.999999974752427e-07)))) {
      $5_1 = 2;
      HEAP32[$0 + 68 >> 2] = $6_1 <= Math_fround(0.0) ? 2 : 11;
      $8_1 = 1;
      break label$4;
     }
     $553(HEAP32[$0 + 24 >> 2], $4_1 + 16 | 0, $4_1 + 48 | 0, $4_1 + 32 | 0);
     if (!$557(HEAP32[$0 + 24 >> 2], $4_1)) {
      HEAP32[$0 + 68 >> 2] = 3;
      break label$5;
     }
     $6_1 = HEAPF32[$4_1 >> 2];
     $9_1 = Math_fround($6_1 * $6_1);
     $6_1 = HEAPF32[$4_1 + 4 >> 2];
     $9_1 = Math_fround($9_1 + Math_fround($6_1 * $6_1));
     $6_1 = HEAPF32[$4_1 + 8 >> 2];
     $6_1 = Math_fround($9_1 + Math_fround($6_1 * $6_1));
     if (!!($6_1 < Math_fround(9.999999974752427e-07))) {
      $5_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$12_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$12_1 + 4 >> 2] = $5_1;
      HEAP32[$0 + 68 >> 2] = 6;
      $8_1 = $4_1 + 8 | 0;
      $21 = HEAP32[$8_1 + 4 >> 2];
      $5_1 = $12_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $21;
      break label$5;
     }
     label$11 : {
      if (!!(Math_fround($7_1 - $6_1) <= Math_fround($7_1 * Math_fround(1.1920928955078125e-07)))) {
       HEAP32[$0 + 68 >> 2] = 12;
       $8_1 = 1;
       $5_1 = 2;
       break label$11;
      }
      $5_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$12_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$12_1 + 4 >> 2] = $5_1;
      $21 = $4_1 + 8 | 0;
      $26_1 = HEAP32[$21 + 4 >> 2];
      $5_1 = $12_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$21 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $26_1;
      $21 = HEAP32[$0 + 64 >> 2];
      HEAP32[$0 + 64 >> 2] = $21 + 1;
      $5_1 = 2;
      if (($21 | 0) > 1e3) {
       break label$11
      }
      if (HEAP32[HEAP32[$0 + 24 >> 2] >> 2] != 4) {
       $5_1 = 0;
       break label$11;
      }
      HEAP32[$0 + 68 >> 2] = 13;
     }
     $7_1 = $6_1;
     break label$4;
    }
    $8_1 = 1;
    $5_1 = 2;
   }
   if (!$5_1) {
    continue
   }
   break;
  };
  $6_1 = Math_fround(0.0);
  $9_1 = $18_1 ? Math_fround(0.0) : $14;
  $10 = Math_fround($9_1 + $15_1);
  $13_1 = 0;
  $5_1 = 0;
  if ($8_1 & 1) {
   $559(HEAP32[$0 + 24 >> 2], $4_1 + 240 | 0, $4_1 + 224 | 0);
   $8_1 = $12_1 + 8 | 0;
   $18_1 = HEAP32[$8_1 + 4 >> 2];
   $5_1 = $4_1 + 264 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $18_1;
   $5_1 = HEAP32[$12_1 + 4 >> 2];
   HEAP32[$4_1 + 256 >> 2] = HEAP32[$12_1 >> 2];
   HEAP32[$4_1 + 260 >> 2] = $5_1;
   $6_1 = HEAPF32[$0 + 4 >> 2];
   $11 = HEAPF32[$0 + 8 >> 2];
   $16_1 = HEAPF32[$0 + 12 >> 2];
   $14 = Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($11 * $11)) + Math_fround($16_1 * $16_1));
   if (!!($14 < Math_fround(9.999999974752427e-07))) {
    HEAP32[$0 + 68 >> 2] = 5
   }
   $8_1 = 1;
   label$16 : {
    if (!($14 > Math_fround(1.4210854715202004e-14))) {
     $5_1 = 0;
     $8_1 = 2;
     $6_1 = Math_fround(0.0);
     break label$16;
    }
    $14 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($14)));
    HEAPF32[$4_1 + 256 >> 2] = $14 * HEAPF32[$4_1 + 256 >> 2];
    HEAPF32[$4_1 + 260 >> 2] = $14 * HEAPF32[$4_1 + 260 >> 2];
    HEAPF32[$4_1 + 264 >> 2] = $14 * HEAPF32[$4_1 + 264 >> 2];
    $17_1 = Math_fround(Math_sqrt($7_1));
    $7_1 = Math_fround($9_1 / $17_1);
    HEAPF32[$4_1 + 240 >> 2] = HEAPF32[$4_1 + 240 >> 2] - Math_fround($7_1 * $6_1);
    HEAPF32[$4_1 + 244 >> 2] = HEAPF32[$4_1 + 244 >> 2] - Math_fround($7_1 * $11);
    HEAPF32[$4_1 + 248 >> 2] = HEAPF32[$4_1 + 248 >> 2] - Math_fround($7_1 * $16_1);
    $7_1 = Math_fround($15_1 / $17_1);
    HEAPF32[$4_1 + 224 >> 2] = Math_fround($7_1 * $6_1) + HEAPF32[$4_1 + 224 >> 2];
    HEAPF32[$4_1 + 228 >> 2] = Math_fround($7_1 * $11) + HEAPF32[$4_1 + 228 >> 2];
    HEAPF32[$4_1 + 232 >> 2] = Math_fround($7_1 * $16_1) + HEAPF32[$4_1 + 232 >> 2];
    $5_1 = 1;
    $6_1 = Math_fround(Math_fround(Math_fround(1.0) / $14) - $10);
   }
   HEAP32[$0 + 60 >> 2] = $8_1;
  }
  if (!(!HEAP32[$0 + 68 >> 2] | (!HEAP32[$0 + 72 >> 2] | !HEAP32[$0 + 20 >> 2]))) {
   $13_1 = Math_fround($10 + $6_1) < HEAPF32[5850]
  }
  $8_1 = $5_1 ^ 1;
  label$19 : {
   label$20 : {
    label$21 : {
     if ($8_1 ? 0 : !$13_1) {
      break label$21
     }
     $13_1 = HEAP32[$0 + 20 >> 2];
     if (!$13_1) {
      break label$21
     }
     HEAP32[$12_1 >> 2] = 0;
     HEAP32[$12_1 + 4 >> 2] = 0;
     $18_1 = $12_1 + 8 | 0;
     HEAP32[$18_1 >> 2] = 0;
     HEAP32[$18_1 + 4 >> 2] = 0;
     HEAP32[6031] = HEAP32[6031] + 1;
     if (FUNCTION_TABLE[HEAP32[HEAP32[$13_1 >> 2] + 8 >> 2]]($13_1, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$0 + 32 >> 2], $4_1 + 160 | 0, $4_1 + 96 | 0, $12_1, $4_1 + 80 | 0, $4_1 - -64 | 0, $3_1)) {
      $16_1 = Math_fround(0.0);
      $7_1 = HEAPF32[$4_1 + 64 >> 2];
      $14 = HEAPF32[$4_1 + 80 >> 2];
      $15_1 = Math_fround($7_1 - $14);
      $17_1 = HEAPF32[$4_1 + 68 >> 2];
      $20 = HEAPF32[$4_1 + 84 >> 2];
      $11 = Math_fround($17_1 - $20);
      $19_1 = HEAPF32[$4_1 + 72 >> 2];
      $22_1 = HEAPF32[$4_1 + 88 >> 2];
      $9_1 = Math_fround($19_1 - $22_1);
      $10 = Math_fround(Math_fround(Math_fround($15_1 * $15_1) + Math_fround($11 * $11)) + Math_fround($9_1 * $9_1));
      if (!!($10 <= Math_fround(1.4210854715202004e-14))) {
       $16_1 = HEAPF32[$0 + 16 >> 2];
       $15_1 = HEAPF32[$0 + 4 >> 2];
       $11 = HEAPF32[$0 + 8 >> 2];
       $9_1 = HEAPF32[$0 + 12 >> 2];
       $10 = Math_fround(Math_fround(Math_fround($15_1 * $15_1) + Math_fround($11 * $11)) + Math_fround($9_1 * $9_1));
      }
      if (!!($10 > Math_fround(1.4210854715202004e-14))) {
       HEAP32[$0 + 60 >> 2] = 3;
       $7_1 = Math_fround($14 - $7_1);
       $14 = Math_fround($7_1 * $7_1);
       $7_1 = Math_fround($20 - $17_1);
       $14 = Math_fround($14 + Math_fround($7_1 * $7_1));
       $7_1 = Math_fround($22_1 - $19_1);
       $7_1 = Math_fround(-Math_fround(Math_sqrt(Math_fround($14 + Math_fround($7_1 * $7_1)))));
       if (!(($6_1 > $7_1 ^ -1) & ($8_1 ^ 1))) {
        $5_1 = $4_1 + 88 | 0;
        $8_1 = HEAP32[$5_1 + 4 >> 2];
        $3_1 = $4_1 + 248 | 0;
        HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$3_1 + 4 >> 2] = $8_1;
        $5_1 = $4_1 + 72 | 0;
        $8_1 = HEAP32[$5_1 + 4 >> 2];
        $3_1 = $4_1 + 232 | 0;
        HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$3_1 + 4 >> 2] = $8_1;
        $3_1 = HEAP32[$4_1 + 84 >> 2];
        HEAP32[$4_1 + 240 >> 2] = HEAP32[$4_1 + 80 >> 2];
        HEAP32[$4_1 + 244 >> 2] = $3_1;
        $3_1 = HEAP32[$4_1 + 68 >> 2];
        HEAP32[$4_1 + 224 >> 2] = HEAP32[$4_1 + 64 >> 2];
        HEAP32[$4_1 + 228 >> 2] = $3_1;
        HEAPF32[$4_1 + 268 >> 2] = $16_1;
        $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($10)));
        HEAPF32[$4_1 + 264 >> 2] = $9_1 * $6_1;
        HEAPF32[$4_1 + 260 >> 2] = $11 * $6_1;
        HEAPF32[$4_1 + 256 >> 2] = $15_1 * $6_1;
        $6_1 = $7_1;
        break label$20;
       }
       HEAP32[$0 + 60 >> 2] = 8;
       if ($5_1) {
        break label$20
       }
       break label$19;
      }
      HEAP32[$0 + 60 >> 2] = 9;
      if ($5_1) {
       break label$20
      }
      break label$19;
     }
     $11 = HEAPF32[$0 + 4 >> 2];
     $16_1 = HEAPF32[$0 + 8 >> 2];
     $14 = HEAPF32[$0 + 12 >> 2];
     if (!(Math_fround(Math_fround(Math_fround($11 * $11) + Math_fround($16_1 * $16_1)) + Math_fround($14 * $14)) > Math_fround(0.0))) {
      break label$21
     }
     $7_1 = Math_fround(HEAPF32[$4_1 + 80 >> 2] - HEAPF32[$4_1 + 64 >> 2]);
     $17_1 = Math_fround($7_1 * $7_1);
     $7_1 = Math_fround(HEAPF32[$4_1 + 84 >> 2] - HEAPF32[$4_1 + 68 >> 2]);
     $17_1 = Math_fround($17_1 + Math_fround($7_1 * $7_1));
     $7_1 = Math_fround(HEAPF32[$4_1 + 88 >> 2] - HEAPF32[$4_1 + 72 >> 2]);
     $7_1 = Math_fround(Math_fround(Math_sqrt(Math_fround($17_1 + Math_fround($7_1 * $7_1)))) - $10);
     if (!(($7_1 < $6_1 ^ -1) & ($8_1 ^ 1))) {
      $8_1 = $4_1 + 88 | 0;
      $13_1 = HEAP32[$8_1 + 4 >> 2];
      $5_1 = $4_1 + 248 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $13_1;
      $8_1 = $4_1 + 72 | 0;
      $13_1 = HEAP32[$8_1 + 4 >> 2];
      $3_1 = $4_1 + 232 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$8_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $13_1;
      HEAPF32[$5_1 >> 2] = HEAPF32[$5_1 >> 2] - Math_fround($9_1 * $14);
      HEAPF32[$3_1 >> 2] = Math_fround($15_1 * $14) + HEAPF32[$3_1 >> 2];
      $3_1 = HEAP32[$4_1 + 68 >> 2];
      HEAP32[$4_1 + 224 >> 2] = HEAP32[$4_1 + 64 >> 2];
      HEAP32[$4_1 + 228 >> 2] = $3_1;
      $3_1 = HEAP32[$4_1 + 84 >> 2];
      HEAP32[$4_1 + 240 >> 2] = HEAP32[$4_1 + 80 >> 2];
      HEAP32[$4_1 + 244 >> 2] = $3_1;
      HEAPF32[$4_1 + 224 >> 2] = Math_fround($15_1 * $11) + HEAPF32[$4_1 + 224 >> 2];
      HEAPF32[$4_1 + 228 >> 2] = Math_fround($15_1 * $16_1) + HEAPF32[$4_1 + 228 >> 2];
      HEAPF32[$4_1 + 240 >> 2] = HEAPF32[$4_1 + 240 >> 2] - Math_fround($9_1 * $11);
      HEAPF32[$4_1 + 244 >> 2] = HEAPF32[$4_1 + 244 >> 2] - Math_fround($9_1 * $16_1);
      $8_1 = $12_1 + 8 | 0;
      $13_1 = HEAP32[$8_1 + 4 >> 2];
      $3_1 = $4_1 + 264 | 0;
      $5_1 = $3_1;
      HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $13_1;
      $5_1 = HEAP32[$12_1 + 4 >> 2];
      HEAP32[$4_1 + 256 >> 2] = HEAP32[$12_1 >> 2];
      HEAP32[$4_1 + 260 >> 2] = $5_1;
      $9_1 = HEAPF32[$4_1 + 256 >> 2];
      $10 = HEAPF32[$4_1 + 260 >> 2];
      $15_1 = HEAPF32[$3_1 >> 2];
      $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($10 * $10)) + Math_fround($15_1 * $15_1)))));
      HEAPF32[$3_1 >> 2] = $15_1 * $6_1;
      HEAPF32[$4_1 + 260 >> 2] = $10 * $6_1;
      HEAPF32[$4_1 + 256 >> 2] = $9_1 * $6_1;
      HEAP32[$0 + 60 >> 2] = 6;
      $6_1 = $7_1;
      break label$20;
     }
     HEAP32[$0 + 60 >> 2] = 5;
    }
    if (!$5_1) {
     break label$19
    }
   }
   if (Math_fround($6_1 * $6_1) < HEAPF32[$1_1 + 128 >> 2] ^ 1 ? !($6_1 < Math_fround(0.0)) : 0) {
    break label$19
   }
   $3_1 = HEAP32[$4_1 + 260 >> 2];
   HEAP32[$12_1 >> 2] = HEAP32[$4_1 + 256 >> 2];
   HEAP32[$12_1 + 4 >> 2] = $3_1;
   HEAPF32[$0 + 56 >> 2] = $6_1;
   $3_1 = $4_1 + 264 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $12_1 = $12_1 + 8 | 0;
   HEAP32[$12_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$12_1 + 4 >> 2] = $5_1;
   HEAP32[$4_1 + 92 >> 2] = 0;
   $7_1 = HEAPF32[$4_1 + 256 >> 2];
   $10 = HEAPF32[$4_1 + 260 >> 2];
   $9_1 = HEAPF32[$3_1 >> 2];
   HEAPF32[$4_1 + 88 >> 2] = Math_fround(Math_fround($7_1 * HEAPF32[$1_1 + 8 >> 2]) + Math_fround($10 * HEAPF32[$1_1 + 24 >> 2])) + Math_fround($9_1 * HEAPF32[$1_1 + 40 >> 2]);
   HEAPF32[$4_1 + 84 >> 2] = Math_fround(Math_fround($7_1 * HEAPF32[$1_1 + 4 >> 2]) + Math_fround($10 * HEAPF32[$1_1 + 20 >> 2])) + Math_fround($9_1 * HEAPF32[$1_1 + 36 >> 2]);
   HEAPF32[$4_1 + 80 >> 2] = Math_fround(Math_fround($7_1 * HEAPF32[$1_1 >> 2]) + Math_fround($10 * HEAPF32[$1_1 + 16 >> 2])) + Math_fround($9_1 * HEAPF32[$1_1 + 32 >> 2]);
   HEAP32[$4_1 + 76 >> 2] = 0;
   $10 = Math_fround(-$10);
   HEAPF32[$4_1 + 72 >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 + 88 >> 2] * $10) - Math_fround($7_1 * HEAPF32[$1_1 + 72 >> 2])) - Math_fround($9_1 * HEAPF32[$1_1 + 104 >> 2]);
   HEAPF32[$4_1 + 68 >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 + 84 >> 2] * $10) - Math_fround($7_1 * HEAPF32[$1_1 + 68 >> 2])) - Math_fround($9_1 * HEAPF32[$1_1 + 100 >> 2]);
   HEAPF32[$4_1 + 64 >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 + 80 >> 2] * $10) - Math_fround($7_1 * HEAPF32[$1_1 + 64 >> 2])) - Math_fround($9_1 * HEAPF32[$1_1 + 96 >> 2]);
   $104($4_1 + 48 | 0, HEAP32[$0 + 28 >> 2], $4_1 + 80 | 0);
   $104($4_1 + 32 | 0, HEAP32[$0 + 32 >> 2], $4_1 - -64 | 0);
   $7_1 = HEAPF32[$3_1 >> 2];
   $22_1 = HEAPF32[$4_1 + 216 >> 2];
   $27_1 = HEAPF32[$4_1 + 200 >> 2];
   $28_1 = HEAPF32[$4_1 + 192 >> 2];
   $29_1 = HEAPF32[$4_1 + 196 >> 2];
   $30 = HEAPF32[$4_1 + 152 >> 2];
   $31_1 = HEAPF32[$4_1 + 136 >> 2];
   $32 = HEAPF32[$4_1 + 128 >> 2];
   $33_1 = HEAPF32[$4_1 + 132 >> 2];
   $34 = HEAPF32[$4_1 + 212 >> 2];
   $35 = HEAPF32[$4_1 + 184 >> 2];
   $36_1 = HEAPF32[$4_1 + 176 >> 2];
   $37_1 = HEAPF32[$4_1 + 180 >> 2];
   $38 = HEAPF32[$4_1 + 148 >> 2];
   $39_1 = HEAPF32[$4_1 + 120 >> 2];
   $40_1 = HEAPF32[$4_1 + 112 >> 2];
   $41_1 = HEAPF32[$4_1 + 116 >> 2];
   $42 = HEAPF32[$4_1 + 208 >> 2];
   $43_1 = HEAPF32[$4_1 + 168 >> 2];
   $15_1 = HEAPF32[$4_1 + 56 >> 2];
   $44_1 = HEAPF32[$4_1 + 160 >> 2];
   $11 = HEAPF32[$4_1 + 48 >> 2];
   $45_1 = HEAPF32[$4_1 + 164 >> 2];
   $16_1 = HEAPF32[$4_1 + 52 >> 2];
   $46_1 = HEAPF32[$4_1 + 144 >> 2];
   $47 = HEAPF32[$4_1 + 104 >> 2];
   $14 = HEAPF32[$4_1 + 40 >> 2];
   $48_1 = HEAPF32[$4_1 + 96 >> 2];
   $17_1 = HEAPF32[$4_1 + 32 >> 2];
   $49_1 = HEAPF32[$4_1 + 100 >> 2];
   $20 = HEAPF32[$4_1 + 36 >> 2];
   $10 = HEAPF32[$4_1 + 260 >> 2];
   $9_1 = HEAPF32[$4_1 + 256 >> 2];
   HEAP32[$4_1 + 92 >> 2] = 0;
   $19_1 = Math_fround(-$10);
   HEAPF32[$4_1 + 88 >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 + 24 >> 2] * $19_1) - Math_fround($9_1 * HEAPF32[$1_1 + 8 >> 2])) - Math_fround($7_1 * HEAPF32[$1_1 + 40 >> 2]);
   HEAPF32[$4_1 + 84 >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 + 20 >> 2] * $19_1) - Math_fround($9_1 * HEAPF32[$1_1 + 4 >> 2])) - Math_fround($7_1 * HEAPF32[$1_1 + 36 >> 2]);
   HEAPF32[$4_1 + 80 >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 + 16 >> 2] * $19_1) - Math_fround($9_1 * HEAPF32[$1_1 >> 2])) - Math_fround($7_1 * HEAPF32[$1_1 + 32 >> 2]);
   HEAP32[$4_1 + 76 >> 2] = 0;
   HEAPF32[$4_1 + 72 >> 2] = Math_fround(Math_fround($9_1 * HEAPF32[$1_1 + 72 >> 2]) + Math_fround($10 * HEAPF32[$1_1 + 88 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 104 >> 2]);
   HEAPF32[$4_1 + 68 >> 2] = Math_fround(Math_fround($9_1 * HEAPF32[$1_1 + 68 >> 2]) + Math_fround($10 * HEAPF32[$1_1 + 84 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 100 >> 2]);
   HEAPF32[$4_1 + 64 >> 2] = Math_fround(Math_fround($9_1 * HEAPF32[$1_1 + 64 >> 2]) + Math_fround($10 * HEAPF32[$1_1 + 80 >> 2])) + Math_fround($7_1 * HEAPF32[$1_1 + 96 >> 2]);
   $104($4_1 + 48 | 0, HEAP32[$0 + 28 >> 2], $4_1 + 80 | 0);
   $104($4_1 + 32 | 0, HEAP32[$0 + 32 >> 2], $4_1 - -64 | 0);
   $20 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($34 + Math_fround(Math_fround(Math_fround($11 * $36_1) + Math_fround($16_1 * $37_1)) + Math_fround($15_1 * $35))) - Math_fround($38 + Math_fround(Math_fround(Math_fround($17_1 * $40_1) + Math_fround($20 * $41_1)) + Math_fround($14 * $39_1)))) * $19_1) - Math_fround($9_1 * Math_fround(Math_fround($42 + Math_fround(Math_fround(Math_fround($11 * $44_1) + Math_fround($16_1 * $45_1)) + Math_fround($15_1 * $43_1))) - Math_fround($46_1 + Math_fround(Math_fround(Math_fround($17_1 * $48_1) + Math_fround($20 * $49_1)) + Math_fround($14 * $47)))))) - Math_fround($7_1 * Math_fround(Math_fround($22_1 + Math_fround(Math_fround(Math_fround($11 * $28_1) + Math_fround($16_1 * $29_1)) + Math_fround($15_1 * $27_1))) - Math_fround($30 + Math_fround(Math_fround(Math_fround($17_1 * $32) + Math_fround($20 * $33_1)) + Math_fround($14 * $31_1))))));
   $7_1 = HEAPF32[$4_1 + 48 >> 2];
   $9_1 = HEAPF32[$4_1 + 52 >> 2];
   $10 = HEAPF32[$4_1 + 56 >> 2];
   $15_1 = HEAPF32[$4_1 + 32 >> 2];
   $11 = HEAPF32[$4_1 + 36 >> 2];
   $16_1 = HEAPF32[$4_1 + 40 >> 2];
   $14 = HEAPF32[$4_1 + 256 >> 2];
   $17_1 = HEAPF32[$4_1 + 260 >> 2];
   $19_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$4_1 + 160 >> 2]) + Math_fround($9_1 * HEAPF32[$4_1 + 164 >> 2])) + Math_fround($10 * HEAPF32[$4_1 + 168 >> 2])) + HEAPF32[$4_1 + 208 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($15_1 * HEAPF32[$4_1 + 96 >> 2]) + Math_fround($11 * HEAPF32[$4_1 + 100 >> 2])) + Math_fround($16_1 * HEAPF32[$4_1 + 104 >> 2])) + HEAPF32[$4_1 + 144 >> 2])) * $14) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$4_1 + 176 >> 2]) + Math_fround($9_1 * HEAPF32[$4_1 + 180 >> 2])) + Math_fround($10 * HEAPF32[$4_1 + 184 >> 2])) + HEAPF32[$4_1 + 212 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($15_1 * HEAPF32[$4_1 + 112 >> 2]) + Math_fround($11 * HEAPF32[$4_1 + 116 >> 2])) + Math_fround($16_1 * HEAPF32[$4_1 + 120 >> 2])) + HEAPF32[$4_1 + 148 >> 2])) * $17_1));
   $9_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$4_1 + 192 >> 2]) + Math_fround($9_1 * HEAPF32[$4_1 + 196 >> 2])) + Math_fround($10 * HEAPF32[$4_1 + 200 >> 2])) + HEAPF32[$4_1 + 216 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($15_1 * HEAPF32[$4_1 + 128 >> 2]) + Math_fround($11 * HEAPF32[$4_1 + 132 >> 2])) + Math_fround($16_1 * HEAPF32[$4_1 + 136 >> 2])) + HEAPF32[$4_1 + 152 >> 2]));
   $7_1 = HEAPF32[$3_1 >> 2];
   if (!!($20 > Math_fround($19_1 + Math_fround($9_1 * $7_1)))) {
    HEAP32[$0 + 60 >> 2] = 10;
    HEAPF32[$4_1 + 264 >> 2] = -$7_1;
    HEAPF32[$4_1 + 260 >> 2] = -$17_1;
    HEAPF32[$4_1 + 256 >> 2] = -$14;
   }
   HEAP32[$4_1 + 92 >> 2] = 0;
   HEAPF32[$4_1 + 88 >> 2] = $23_1 + HEAPF32[$4_1 + 232 >> 2];
   HEAPF32[$4_1 + 84 >> 2] = $24_1 + HEAPF32[$4_1 + 228 >> 2];
   HEAPF32[$4_1 + 80 >> 2] = $25 + HEAPF32[$4_1 + 224 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $4_1 + 256 | 0, $4_1 + 80 | 0, $6_1);
  }
  global$0 = $4_1 + 272 | 0;
 }
 
 function $566($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = 0, $27_1 = 0, $28_1 = Math_fround(0), $29_1 = 0, $30 = 0, $31_1 = 0, $32 = Math_fround(0), $33_1 = 0, $34 = 0, $35 = 0, $36_1 = 0, $37_1 = 0;
  $0 = global$0 - 4240 | 0;
  global$0 = $0;
  $30 = HEAP32[$2_1 + 4 >> 2] + -17 >>> 0 <= 1 ? HEAP32[$3_1 + 4 >> 2] + -17 >>> 0 < 2 : $30;
  while (1) {
   $567();
   $15_1 = ($0 + 1264 | 0) + $10 | 0;
   HEAP32[$15_1 + 12 >> 2] = 0;
   $14 = HEAPF32[$10 + 24148 >> 2];
   $13_1 = Math_fround(-$14);
   $11 = HEAPF32[$10 + 24144 >> 2];
   $12_1 = HEAPF32[$10 + 24152 >> 2];
   HEAPF32[$15_1 + 8 >> 2] = Math_fround(Math_fround(HEAPF32[$4_1 + 24 >> 2] * $13_1) - Math_fround($11 * HEAPF32[$4_1 + 8 >> 2])) - Math_fround($12_1 * HEAPF32[$4_1 + 40 >> 2]);
   HEAPF32[$15_1 + 4 >> 2] = Math_fround(Math_fround(HEAPF32[$4_1 + 20 >> 2] * $13_1) - Math_fround($11 * HEAPF32[$4_1 + 4 >> 2])) - Math_fround($12_1 * HEAPF32[$4_1 + 36 >> 2]);
   HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(HEAPF32[$4_1 + 16 >> 2] * $13_1) - Math_fround($11 * HEAPF32[$4_1 >> 2])) - Math_fround($12_1 * HEAPF32[$4_1 + 32 >> 2]);
   $13_1 = HEAPF32[$5_1 + 32 >> 2];
   $17_1 = HEAPF32[$5_1 >> 2];
   $19_1 = HEAPF32[$5_1 + 16 >> 2];
   $21 = HEAPF32[$5_1 + 36 >> 2];
   $20 = HEAPF32[$5_1 + 4 >> 2];
   $22_1 = HEAPF32[$5_1 + 20 >> 2];
   $23_1 = HEAPF32[$5_1 + 40 >> 2];
   $24_1 = HEAPF32[$5_1 + 8 >> 2];
   $25 = HEAPF32[$5_1 + 24 >> 2];
   $15_1 = ($0 + 272 | 0) + $10 | 0;
   HEAP32[$15_1 + 12 >> 2] = 0;
   HEAPF32[$15_1 + 8 >> 2] = Math_fround(Math_fround($11 * $24_1) + Math_fround($14 * $25)) + Math_fround($12_1 * $23_1);
   HEAPF32[$15_1 + 4 >> 2] = Math_fround(Math_fround($11 * $20) + Math_fround($14 * $22_1)) + Math_fround($12_1 * $21);
   HEAPF32[$15_1 >> 2] = Math_fround(Math_fround($11 * $17_1) + Math_fround($14 * $19_1)) + Math_fround($12_1 * $13_1);
   $10 = $10 + 16 | 0;
   if (($10 | 0) != 672) {
    continue
   }
   break;
  };
  $27_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 84 >> 2]]($2_1) | 0;
  $15_1 = 42;
  label$3 : {
   if (($27_1 | 0) < 1) {
    break label$3
   }
   $10 = 0;
   $15_1 = 0;
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 88 >> 2]]($2_1, $15_1, $0 + 3248 | 0);
    HEAP32[$0 + 3260 >> 2] = 0;
    $11 = HEAPF32[$0 + 3248 >> 2];
    $12_1 = HEAPF32[$0 + 3252 >> 2];
    $14 = HEAPF32[$0 + 3256 >> 2];
    HEAPF32[$0 + 3256 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$4_1 + 32 >> 2]) + Math_fround($12_1 * HEAPF32[$4_1 + 36 >> 2])) + Math_fround($14 * HEAPF32[$4_1 + 40 >> 2]);
    HEAPF32[$0 + 3252 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$4_1 + 16 >> 2]) + Math_fround($12_1 * HEAPF32[$4_1 + 20 >> 2])) + Math_fround($14 * HEAPF32[$4_1 + 24 >> 2]);
    HEAPF32[$0 + 3248 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$4_1 >> 2]) + Math_fround($12_1 * HEAPF32[$4_1 + 4 >> 2])) + Math_fround($14 * HEAPF32[$4_1 + 8 >> 2]);
    $567();
    $26_1 = HEAP32[$0 + 3260 >> 2];
    $16_1 = $10 + 24824 | 0;
    HEAP32[$16_1 >> 2] = HEAP32[$0 + 3256 >> 2];
    HEAP32[$16_1 + 4 >> 2] = $26_1;
    $26_1 = HEAP32[$0 + 3252 >> 2];
    $16_1 = $10 + 24816 | 0;
    HEAP32[$16_1 >> 2] = HEAP32[$0 + 3248 >> 2];
    HEAP32[$16_1 + 4 >> 2] = $26_1;
    $16_1 = ($0 + 1264 | 0) + $10 | 0;
    HEAP32[$16_1 + 684 >> 2] = 0;
    $14 = HEAPF32[$0 + 3252 >> 2];
    $13_1 = Math_fround(-$14);
    $11 = HEAPF32[$0 + 3248 >> 2];
    $12_1 = HEAPF32[$0 + 3256 >> 2];
    HEAPF32[$16_1 + 680 >> 2] = Math_fround(Math_fround(HEAPF32[$4_1 + 24 >> 2] * $13_1) - Math_fround($11 * HEAPF32[$4_1 + 8 >> 2])) - Math_fround($12_1 * HEAPF32[$4_1 + 40 >> 2]);
    HEAPF32[$16_1 + 676 >> 2] = Math_fround(Math_fround(HEAPF32[$4_1 + 20 >> 2] * $13_1) - Math_fround($11 * HEAPF32[$4_1 + 4 >> 2])) - Math_fround($12_1 * HEAPF32[$4_1 + 36 >> 2]);
    HEAPF32[$16_1 + 672 >> 2] = Math_fround(Math_fround(HEAPF32[$4_1 + 16 >> 2] * $13_1) - Math_fround($11 * HEAPF32[$4_1 >> 2])) - Math_fround($12_1 * HEAPF32[$4_1 + 32 >> 2]);
    $16_1 = ($0 + 272 | 0) + $10 | 0;
    HEAP32[$16_1 + 684 >> 2] = 0;
    HEAPF32[$16_1 + 672 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$5_1 >> 2]) + Math_fround($14 * HEAPF32[$5_1 + 16 >> 2])) + Math_fround($12_1 * HEAPF32[$5_1 + 32 >> 2]);
    HEAPF32[$16_1 + 676 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$5_1 + 4 >> 2]) + Math_fround($14 * HEAPF32[$5_1 + 20 >> 2])) + Math_fround($12_1 * HEAPF32[$5_1 + 36 >> 2]);
    HEAPF32[$16_1 + 680 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$5_1 + 8 >> 2]) + Math_fround($14 * HEAPF32[$5_1 + 24 >> 2])) + Math_fround($12_1 * HEAPF32[$5_1 + 40 >> 2]);
    $10 = $10 + 16 | 0;
    $15_1 = $15_1 + 1 | 0;
    if (($27_1 | 0) != ($15_1 | 0)) {
     continue
    }
    break;
   };
   $15_1 = $15_1 + 42 | 0;
  }
  $34 = $2_1;
  $35 = $0 + 1264 | 0;
  $36_1 = $0 + 3248 | 0;
  $33_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 84 >> 2]]($3_1) | 0;
  if (($33_1 | 0) >= 1) {
   $16_1 = $15_1 << 4;
   $27_1 = 24144;
   $26_1 = $0 + 1264 | 0;
   $31_1 = $0 + 272 | 0;
   $10 = 0;
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 88 >> 2]]($3_1, $10, $0 + 3248 | 0);
    HEAP32[$0 + 3260 >> 2] = 0;
    $11 = HEAPF32[$0 + 3248 >> 2];
    $12_1 = HEAPF32[$0 + 3252 >> 2];
    $14 = HEAPF32[$0 + 3256 >> 2];
    HEAPF32[$0 + 3256 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$5_1 + 32 >> 2]) + Math_fround($12_1 * HEAPF32[$5_1 + 36 >> 2])) + Math_fround($14 * HEAPF32[$5_1 + 40 >> 2]);
    HEAPF32[$0 + 3252 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$5_1 + 16 >> 2]) + Math_fround($12_1 * HEAPF32[$5_1 + 20 >> 2])) + Math_fround($14 * HEAPF32[$5_1 + 24 >> 2]);
    HEAPF32[$0 + 3248 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$5_1 >> 2]) + Math_fround($12_1 * HEAPF32[$5_1 + 4 >> 2])) + Math_fround($14 * HEAPF32[$5_1 + 8 >> 2]);
    $567();
    $37_1 = HEAP32[$0 + 3260 >> 2];
    $18_1 = $16_1 + $27_1 | 0;
    $29_1 = $18_1 + 8 | 0;
    HEAP32[$29_1 >> 2] = HEAP32[$0 + 3256 >> 2];
    HEAP32[$29_1 + 4 >> 2] = $37_1;
    $29_1 = HEAP32[$0 + 3252 >> 2];
    HEAP32[$18_1 >> 2] = HEAP32[$0 + 3248 >> 2];
    HEAP32[$18_1 + 4 >> 2] = $29_1;
    $17_1 = HEAPF32[$4_1 + 32 >> 2];
    $19_1 = HEAPF32[$4_1 + 16 >> 2];
    $21 = HEAPF32[$4_1 >> 2];
    $20 = HEAPF32[$4_1 + 36 >> 2];
    $22_1 = HEAPF32[$4_1 + 20 >> 2];
    $23_1 = HEAPF32[$4_1 + 4 >> 2];
    $24_1 = HEAPF32[$4_1 + 40 >> 2];
    $13_1 = HEAPF32[$4_1 + 24 >> 2];
    $25 = HEAPF32[$4_1 + 8 >> 2];
    $11 = HEAPF32[$0 + 3256 >> 2];
    $14 = HEAPF32[$0 + 3252 >> 2];
    $12_1 = HEAPF32[$0 + 3248 >> 2];
    $18_1 = $16_1 + $26_1 | 0;
    HEAP32[$18_1 + 12 >> 2] = 0;
    $28_1 = $13_1;
    $13_1 = Math_fround(-$14);
    HEAPF32[$18_1 + 8 >> 2] = Math_fround(Math_fround($28_1 * $13_1) - Math_fround($12_1 * $25)) - Math_fround($11 * $24_1);
    HEAPF32[$18_1 + 4 >> 2] = Math_fround(Math_fround($22_1 * $13_1) - Math_fround($12_1 * $23_1)) - Math_fround($11 * $20);
    HEAPF32[$18_1 >> 2] = Math_fround(Math_fround($19_1 * $13_1) - Math_fround($12_1 * $21)) - Math_fround($11 * $17_1);
    $13_1 = HEAPF32[$5_1 + 32 >> 2];
    $17_1 = HEAPF32[$5_1 >> 2];
    $19_1 = HEAPF32[$5_1 + 16 >> 2];
    $21 = HEAPF32[$5_1 + 36 >> 2];
    $20 = HEAPF32[$5_1 + 4 >> 2];
    $22_1 = HEAPF32[$5_1 + 20 >> 2];
    $23_1 = HEAPF32[$5_1 + 40 >> 2];
    $24_1 = HEAPF32[$5_1 + 8 >> 2];
    $25 = HEAPF32[$5_1 + 24 >> 2];
    $18_1 = $16_1 + $31_1 | 0;
    HEAP32[$18_1 + 12 >> 2] = 0;
    HEAPF32[$18_1 + 8 >> 2] = Math_fround(Math_fround($12_1 * $24_1) + Math_fround($14 * $25)) + Math_fround($11 * $23_1);
    HEAPF32[$18_1 + 4 >> 2] = Math_fround(Math_fround($12_1 * $20) + Math_fround($14 * $22_1)) + Math_fround($11 * $21);
    HEAPF32[$18_1 >> 2] = Math_fround(Math_fround($12_1 * $17_1) + Math_fround($14 * $19_1)) + Math_fround($11 * $13_1);
    $31_1 = $31_1 + 16 | 0;
    $26_1 = $26_1 + 16 | 0;
    $27_1 = $27_1 + 16 | 0;
    $10 = $10 + 1 | 0;
    if (($33_1 | 0) != ($10 | 0)) {
     continue
    }
    break;
   };
   $15_1 = $10 + $15_1 | 0;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 76 >> 2]]($34, $35, $36_1, $15_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 76 >> 2]]($3_1, $0 + 272 | 0, $0 + 2256 | 0, $15_1);
  label$8 : {
   if (($15_1 | 0) < 1) {
    $13_1 = Math_fround(999999984306749440.0);
    $11 = Math_fround(0.0);
    $12_1 = Math_fround(0.0);
    $14 = Math_fround(0.0);
    $22_1 = Math_fround(0.0);
    break label$8;
   }
   $13_1 = Math_fround(999999984306749440.0);
   $10 = 0;
   $22_1 = Math_fround(0.0);
   $14 = Math_fround(0.0);
   $12_1 = Math_fround(0.0);
   $11 = Math_fround(0.0);
   while (1) {
    $567();
    $17_1 = HEAPF32[$10 + 24144 >> 2];
    $19_1 = HEAPF32[$10 + 24148 >> 2];
    $21 = $30 ? Math_fround(0.0) : HEAPF32[$10 + 24152 >> 2];
    label$11 : {
     if (!(+Math_fround(Math_fround(Math_fround($17_1 * $17_1) + Math_fround($19_1 * $19_1)) + Math_fround($21 * $21)) > .01)) {
      break label$11
     }
     $16_1 = ($0 + 2256 | 0) + $10 | 0;
     $20 = HEAPF32[$16_1 >> 2];
     $23_1 = HEAPF32[$16_1 + 4 >> 2];
     $24_1 = HEAPF32[$16_1 + 8 >> 2];
     $16_1 = ($0 + 3248 | 0) + $10 | 0;
     $25 = HEAPF32[$16_1 >> 2];
     $28_1 = HEAPF32[$16_1 + 4 >> 2];
     $32 = HEAPF32[$16_1 + 8 >> 2];
     $20 = Math_fround(Math_fround(Math_fround($17_1 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($20 * HEAPF32[$5_1 >> 2]) + Math_fround($23_1 * HEAPF32[$5_1 + 4 >> 2])) + Math_fround($24_1 * HEAPF32[$5_1 + 8 >> 2])) + HEAPF32[$5_1 + 48 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($25 * HEAPF32[$4_1 >> 2]) + Math_fround($28_1 * HEAPF32[$4_1 + 4 >> 2])) + Math_fround($32 * HEAPF32[$4_1 + 8 >> 2])) + HEAPF32[$4_1 + 48 >> 2]))) + Math_fround($19_1 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($20 * HEAPF32[$5_1 + 16 >> 2]) + Math_fround($23_1 * HEAPF32[$5_1 + 20 >> 2])) + Math_fround($24_1 * HEAPF32[$5_1 + 24 >> 2])) + HEAPF32[$5_1 + 52 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($25 * HEAPF32[$4_1 + 16 >> 2]) + Math_fround($28_1 * HEAPF32[$4_1 + 20 >> 2])) + Math_fround($32 * HEAPF32[$4_1 + 24 >> 2])) + HEAPF32[$4_1 + 52 >> 2])))) + Math_fround($21 * ($30 ? Math_fround(0.0) : Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($20 * HEAPF32[$5_1 + 32 >> 2]) + Math_fround($23_1 * HEAPF32[$5_1 + 36 >> 2])) + Math_fround($24_1 * HEAPF32[$5_1 + 40 >> 2])) + HEAPF32[$5_1 + 56 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($25 * HEAPF32[$4_1 + 32 >> 2]) + Math_fround($28_1 * HEAPF32[$4_1 + 36 >> 2])) + Math_fround($32 * HEAPF32[$4_1 + 40 >> 2])) + HEAPF32[$4_1 + 56 >> 2])))));
     if (!($20 < $13_1)) {
      break label$11
     }
     $22_1 = HEAPF32[$10 + 24156 >> 2];
     $11 = $17_1;
     $12_1 = $19_1;
     $14 = $21;
     $13_1 = $20;
    }
    $10 = $10 + 16 | 0;
    $15_1 = $15_1 + -1 | 0;
    if ($15_1) {
     continue
    }
    break;
   };
  }
  $106($2_1);
  $106($3_1);
  $10 = 0;
  if (!($13_1 < Math_fround(0.0))) {
   $17_1 = $106($2_1);
   $19_1 = $106($3_1);
   $1_1 = $560($0 + 192 | 0, $2_1, $3_1, $1_1, 0);
   HEAP32[$0 + 116 >> 2] = 0;
   $3_1 = $4_1 + 8 | 0;
   $10 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 - -64 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $10;
   $3_1 = $4_1 + 24 | 0;
   $10 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 80 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $10;
   $3_1 = $4_1 + 40 | 0;
   $10 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 96 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $10;
   $13_1 = Math_fround($13_1 + Math_fround(Math_fround($17_1 + $19_1) + Math_fround(.5)));
   HEAPF32[$0 + 112 >> 2] = Math_fround($14 * $13_1) + HEAPF32[$4_1 + 56 >> 2];
   HEAPF32[$0 + 108 >> 2] = Math_fround($12_1 * $13_1) + HEAPF32[$4_1 + 52 >> 2];
   $2_1 = HEAP32[$4_1 + 4 >> 2];
   HEAP32[$0 + 56 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0 + 60 >> 2] = $2_1;
   $2_1 = HEAP32[$4_1 + 20 >> 2];
   HEAP32[$0 + 72 >> 2] = HEAP32[$4_1 + 16 >> 2];
   HEAP32[$0 + 76 >> 2] = $2_1;
   $2_1 = HEAP32[$4_1 + 36 >> 2];
   HEAP32[$0 + 88 >> 2] = HEAP32[$4_1 + 32 >> 2];
   HEAP32[$0 + 92 >> 2] = $2_1;
   HEAPF32[$0 + 104 >> 2] = Math_fround($11 * $13_1) + HEAPF32[$4_1 + 48 >> 2];
   $3_1 = $5_1 + 8 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 128 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = HEAP32[$5_1 + 20 >> 2];
   $2_1 = $0 + 136 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   $3_1 = $5_1 + 24 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 144 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = HEAP32[$5_1 + 36 >> 2];
   $2_1 = $0 + 152 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 32 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   $3_1 = $5_1 + 40 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 160 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = HEAP32[$5_1 + 52 >> 2];
   $2_1 = $0 + 168 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   $3_1 = $5_1 + 56 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 176 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   HEAP32[$0 + 184 >> 2] = 1566444395;
   $2_1 = HEAP32[$5_1 + 4 >> 2];
   HEAP32[$0 + 120 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$0 + 124 >> 2] = $2_1;
   HEAP32[$1_1 + 16 >> 2] = 0;
   HEAPF32[$1_1 + 12 >> 2] = -$14;
   HEAPF32[$1_1 + 8 >> 2] = -$12_1;
   HEAPF32[$1_1 + 4 >> 2] = -$11;
   HEAP8[$0 + 48 | 0] = 0;
   HEAP32[$0 + 8 >> 2] = 13092;
   $562($1_1, $0 + 56 | 0, $0 + 8 | 0, $9_1, 0);
   $2_1 = HEAPU8[$0 + 48 | 0];
   if ($2_1) {
    $17_1 = HEAPF32[$0 + 44 >> 2];
    HEAP32[$7_1 + 12 >> 2] = 0;
    $13_1 = Math_fround($13_1 - $17_1);
    HEAPF32[$7_1 >> 2] = HEAPF32[$0 + 28 >> 2] - Math_fround($11 * $13_1);
    $1_1 = $0 + 36 | 0;
    HEAPF32[$7_1 + 8 >> 2] = HEAPF32[$1_1 >> 2] - Math_fround($14 * $13_1);
    HEAPF32[$7_1 + 4 >> 2] = HEAPF32[$0 + 32 >> 2] - Math_fround($12_1 * $13_1);
    $3_1 = HEAP32[$0 + 32 >> 2];
    HEAP32[$8_1 >> 2] = HEAP32[$0 + 28 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $3_1;
    $4_1 = HEAP32[$1_1 + 4 >> 2];
    $3_1 = $8_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    HEAPF32[$6_1 >> 2] = $11;
    HEAPF32[$6_1 + 4 >> 2] = $12_1;
    HEAPF32[$6_1 + 8 >> 2] = $14;
    HEAPF32[$6_1 + 12 >> 2] = $22_1;
   }
   $10 = ($2_1 | 0) != 0;
  }
  global$0 = $0 + 4240 | 0;
  return $10 | 0;
 }
 
 function $567() {
  if (!HEAPU8[25136]) {
   HEAP32[6202] = 1062847606;
   HEAP32[6203] = 0;
   HEAP32[6200] = 1042701022;
   HEAP32[6201] = 1056964440;
   HEAP32[6198] = 1062847606;
   HEAP32[6199] = 0;
   HEAP32[6196] = -1093024784;
   HEAP32[6197] = 1050556081;
   HEAP32[6194] = 1062847606;
   HEAP32[6195] = 0;
   HEAP32[6192] = -1093024784;
   HEAP32[6193] = -1096927567;
   HEAP32[6190] = 1062847606;
   HEAP32[6191] = 0;
   HEAP32[6188] = 1042701022;
   HEAP32[6189] = -1090519208;
   HEAP32[6186] = 1062847572;
   HEAP32[6187] = 0;
   HEAP32[6184] = 1057396286;
   HEAP32[6185] = 0;
   HEAP32[6182] = 1057396386;
   HEAP32[6183] = 0;
   HEAP32[6180] = 1060121912;
   HEAP32[6181] = 1056964507;
   HEAP32[6178] = 1057396420;
   HEAP32[6179] = 0;
   HEAP32[6176] = -1098475836;
   HEAP32[6177] = 1062148969;
   HEAP32[6174] = 1057396386;
   HEAP32[6175] = 0;
   HEAP32[6172] = -1084636143;
   HEAP32[6173] = 0;
   HEAP32[6170] = 1057396420;
   HEAP32[6171] = 0;
   HEAP32[6168] = -1098475836;
   HEAP32[6169] = -1085334679;
   HEAP32[6166] = 1057396386;
   HEAP32[6167] = 0;
   HEAP32[6164] = 1060121912;
   HEAP32[6165] = -1090519141;
   HEAP32[6162] = -2147483648;
   HEAP32[6163] = 0;
   HEAP32[6160] = 1058437413;
   HEAP32[6161] = 1062149053;
   HEAP32[6158] = -2147483648;
   HEAP32[6159] = 0;
   HEAP32[6156] = -2147483648;
   HEAP32[6157] = 1065353216;
   HEAP32[6154] = -2147483648;
   HEAP32[6155] = 0;
   HEAP32[6152] = -1089046235;
   HEAP32[6153] = 1062149053;
   HEAP32[6150] = -2147483648;
   HEAP32[6151] = 0;
   HEAP32[6148] = -1082951543;
   HEAP32[6149] = 1050556148;
   HEAP32[6146] = -2147483648;
   HEAP32[6147] = 0;
   HEAP32[6144] = -1082951543;
   HEAP32[6145] = -1096927500;
   HEAP32[6142] = 0;
   HEAP32[6143] = 0;
   HEAP32[6140] = -1089046235;
   HEAP32[6141] = -1085334595;
   HEAP32[6138] = 0;
   HEAP32[6139] = 0;
   HEAP32[6136] = 0;
   HEAP32[6137] = -1082130432;
   HEAP32[6134] = 0;
   HEAP32[6135] = 0;
   HEAP32[6132] = 1058437413;
   HEAP32[6133] = -1085334595;
   HEAP32[6130] = 0;
   HEAP32[6131] = 0;
   HEAP32[6128] = 1064532105;
   HEAP32[6129] = -1096927500;
   HEAP32[6126] = 0;
   HEAP32[6127] = 0;
   HEAP32[6124] = 1064532105;
   HEAP32[6125] = 1050556148;
   HEAP32[6122] = -1090087228;
   HEAP32[6123] = 0;
   HEAP32[6120] = 1049007812;
   HEAP32[6121] = 1062148969;
   HEAP32[6118] = -1090087262;
   HEAP32[6119] = 0;
   HEAP32[6116] = -1087361736;
   HEAP32[6117] = 1056964507;
   HEAP32[6114] = -1084636042;
   HEAP32[6115] = 0;
   HEAP32[6112] = -1104782626;
   HEAP32[6113] = 1056964440;
   HEAP32[6110] = -1090087262;
   HEAP32[6111] = 0;
   HEAP32[6108] = -1087361736;
   HEAP32[6109] = -1090519141;
   HEAP32[6106] = -1084636076;
   HEAP32[6107] = 0;
   HEAP32[6104] = -1090087362;
   HEAP32[6105] = -2147483648;
   HEAP32[6102] = -1090087262;
   HEAP32[6103] = 0;
   HEAP32[6100] = 1062847505;
   HEAP32[6101] = -2147483648;
   HEAP32[6098] = -1084636042;
   HEAP32[6099] = 0;
   HEAP32[6096] = 1054458864;
   HEAP32[6097] = 1050556081;
   HEAP32[6094] = -1090087228;
   HEAP32[6095] = 0;
   HEAP32[6092] = 1049007812;
   HEAP32[6093] = -1085334679;
   HEAP32[6090] = -1084636042;
   HEAP32[6091] = 0;
   HEAP32[6088] = -1104782626;
   HEAP32[6089] = -1090519208;
   HEAP32[6086] = -1084636042;
   HEAP32[6087] = 0;
   HEAP32[6084] = 1054458864;
   HEAP32[6085] = -1096927567;
   HEAP32[6082] = 1065353216;
   HEAP32[6083] = 0;
   HEAP32[6080] = -2147483648;
   HEAP32[6081] = 0;
   HEAP32[6078] = 1055193471;
   HEAP32[6079] = 0;
   HEAP32[6076] = 1063581978;
   HEAP32[6077] = 0;
   HEAP32[6074] = 1055193572;
   HEAP32[6075] = 0;
   HEAP32[6072] = 1049461434;
   HEAP32[6073] = 1062847522;
   HEAP32[6070] = 1055193572;
   HEAP32[6071] = 0;
   HEAP32[6068] = -1086767520;
   HEAP32[6069] = 1057396202;
   HEAP32[6066] = 1055193572;
   HEAP32[6067] = 0;
   HEAP32[6064] = -1086767520;
   HEAP32[6065] = -1090087446;
   HEAP32[6062] = 1055193605;
   HEAP32[6063] = 0;
   HEAP32[6060] = 1049461434;
   HEAP32[6061] = -1084636126;
   HEAP32[6058] = -1092290076;
   HEAP32[6059] = 0;
   HEAP32[6056] = 1060716128;
   HEAP32[6057] = 1057396202;
   HEAP32[6054] = -1092290043;
   HEAP32[6055] = 0;
   HEAP32[6052] = -1098022214;
   HEAP32[6053] = 1062847522;
   HEAP32[6050] = -1092290177;
   HEAP32[6051] = 0;
   HEAP32[6048] = -1083901670;
   HEAP32[6049] = -2147483648;
   HEAP32[6046] = -1092290076;
   HEAP32[6047] = 0;
   HEAP32[6044] = -1098022214;
   HEAP32[6045] = -1084636126;
   HEAP32[6042] = -1092290076;
   HEAP32[6043] = 0;
   HEAP32[6040] = 1060716128;
   HEAP32[6041] = -1090087446;
   HEAP32[6038] = -1082130432;
   HEAP32[6039] = 0;
   HEAP32[6036] = 0;
   HEAP32[6037] = -2147483648;
   HEAP8[25136] = 1;
  }
 }
 
 function $572($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 8 >> 2] = $4_1;
  $1_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = $0 + 12 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0 + 20 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 24 >> 2] = $1_1;
  $2_1 = $2_1 + 8 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0 + 28 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  HEAP8[$0 + 40 | 0] = 1;
  HEAPF32[$0 + 36 >> 2] = $3_1;
 }
 
 function $573($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0;
  label$1 : {
   $20 = HEAP32[$0 + 4 >> 2];
   if (($20 | 0) < 2) {
    break label$1
   }
   $7_1 = HEAP32[$0 + 12 >> 2];
   $4_1 = ($7_1 + ($20 << 4) | 0) + -16 | 0;
   $15_1 = HEAPF32[$4_1 >> 2];
   $21 = HEAPF32[$2_1 >> 2];
   $12_1 = HEAPF32[$4_1 + 4 >> 2];
   $22_1 = HEAPF32[$2_1 + 4 >> 2];
   $13_1 = HEAPF32[$4_1 + 8 >> 2];
   $23_1 = HEAPF32[$2_1 + 8 >> 2];
   $8_1 = Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $21) + Math_fround($12_1 * $22_1)) + Math_fround($13_1 * $23_1)) + $3_1);
   while (1) {
    $4_1 = ($24_1 << 4) + $7_1 | 0;
    $16_1 = HEAPF32[$4_1 >> 2];
    $17_1 = HEAPF32[$4_1 + 4 >> 2];
    $18_1 = HEAPF32[$4_1 + 8 >> 2];
    $19_1 = Math_fround(Math_fround(Math_fround(Math_fround($16_1 * $21) + Math_fround($17_1 * $22_1)) + Math_fround($18_1 * $23_1)) + $3_1);
    $14 = HEAP32[$4_1 + 12 >> 2];
    label$3 : {
     label$4 : {
      if (!!($8_1 < Math_fround(0.0))) {
       if (!!($19_1 < Math_fround(0.0))) {
        $4_1 = HEAP32[$1_1 + 4 >> 2];
        label$7 : {
         if (($4_1 | 0) != HEAP32[$1_1 + 8 >> 2]) {
          break label$7
         }
         $9_1 = $4_1 ? $4_1 << 1 : 1;
         if (($4_1 | 0) >= ($9_1 | 0)) {
          break label$7
         }
         label$8 : {
          if (!$9_1) {
           $10 = 0;
           break label$8;
          }
          $10 = $79($9_1 << 4);
          $4_1 = HEAP32[$1_1 + 4 >> 2];
         }
         if (($4_1 | 0) >= 1) {
          $7_1 = 0;
          while (1) {
           $5_1 = HEAP32[$1_1 + 12 >> 2] + $7_1 | 0;
           $11 = HEAP32[$5_1 + 4 >> 2];
           $6_1 = $7_1 + $10 | 0;
           HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
           HEAP32[$6_1 + 4 >> 2] = $11;
           $5_1 = $5_1 + 8 | 0;
           $11 = HEAP32[$5_1 + 4 >> 2];
           $6_1 = $6_1 + 8 | 0;
           HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
           HEAP32[$6_1 + 4 >> 2] = $11;
           $7_1 = $7_1 + 16 | 0;
           $4_1 = $4_1 + -1 | 0;
           if ($4_1) {
            continue
           }
           break;
          };
         }
         $4_1 = HEAP32[$1_1 + 12 >> 2];
         if ($4_1) {
          if (HEAPU8[$1_1 + 16 | 0]) {
           $80($4_1)
          }
          HEAP32[$1_1 + 12 >> 2] = 0;
         }
         HEAP32[$1_1 + 12 >> 2] = $10;
         HEAP8[$1_1 + 16 | 0] = 1;
         HEAP32[$1_1 + 8 >> 2] = $9_1;
         $4_1 = HEAP32[$1_1 + 4 >> 2];
        }
        $4_1 = HEAP32[$1_1 + 12 >> 2] + ($4_1 << 4) | 0;
        HEAP32[$4_1 + 12 >> 2] = $14;
        HEAPF32[$4_1 + 8 >> 2] = $18_1;
        HEAPF32[$4_1 + 4 >> 2] = $17_1;
        HEAPF32[$4_1 >> 2] = $16_1;
        break label$4;
       }
       $8_1 = Math_fround($8_1 / Math_fround($8_1 - $19_1));
       $13_1 = Math_fround($13_1 + Math_fround(Math_fround($18_1 - $13_1) * $8_1));
       $12_1 = Math_fround($12_1 + Math_fround(Math_fround($17_1 - $12_1) * $8_1));
       $8_1 = Math_fround($15_1 + Math_fround(Math_fround($16_1 - $15_1) * $8_1));
       $4_1 = HEAP32[$1_1 + 4 >> 2];
       label$14 : {
        if (($4_1 | 0) != HEAP32[$1_1 + 8 >> 2]) {
         break label$14
        }
        $10 = $4_1 ? $4_1 << 1 : 1;
        if (($4_1 | 0) >= ($10 | 0)) {
         break label$14
        }
        label$15 : {
         if (!$10) {
          $9_1 = 0;
          break label$15;
         }
         $9_1 = $79($10 << 4);
         $4_1 = HEAP32[$1_1 + 4 >> 2];
        }
        if (($4_1 | 0) >= 1) {
         $7_1 = 0;
         while (1) {
          $14 = HEAP32[$1_1 + 12 >> 2] + $7_1 | 0;
          $11 = HEAP32[$14 + 4 >> 2];
          $5_1 = $7_1 + $9_1 | 0;
          HEAP32[$5_1 >> 2] = HEAP32[$14 >> 2];
          HEAP32[$5_1 + 4 >> 2] = $11;
          $14 = $14 + 8 | 0;
          $6_1 = HEAP32[$14 + 4 >> 2];
          $5_1 = $5_1 + 8 | 0;
          HEAP32[$5_1 >> 2] = HEAP32[$14 >> 2];
          HEAP32[$5_1 + 4 >> 2] = $6_1;
          $7_1 = $7_1 + 16 | 0;
          $4_1 = $4_1 + -1 | 0;
          if ($4_1) {
           continue
          }
          break;
         };
        }
        $4_1 = HEAP32[$1_1 + 12 >> 2];
        if ($4_1) {
         if (HEAPU8[$1_1 + 16 | 0]) {
          $80($4_1)
         }
         HEAP32[$1_1 + 12 >> 2] = 0;
        }
        HEAP32[$1_1 + 12 >> 2] = $9_1;
        HEAP8[$1_1 + 16 | 0] = 1;
        HEAP32[$1_1 + 8 >> 2] = $10;
        $4_1 = HEAP32[$1_1 + 4 >> 2];
       }
       $4_1 = HEAP32[$1_1 + 12 >> 2] + ($4_1 << 4) | 0;
       HEAP32[$4_1 + 12 >> 2] = 0;
       HEAPF32[$4_1 + 8 >> 2] = $13_1;
       HEAPF32[$4_1 + 4 >> 2] = $12_1;
       HEAPF32[$4_1 >> 2] = $8_1;
       break label$4;
      }
      if (!($19_1 < Math_fround(0.0))) {
       break label$3
      }
      $8_1 = Math_fround($8_1 / Math_fround($8_1 - $19_1));
      $13_1 = Math_fround($13_1 + Math_fround(Math_fround($18_1 - $13_1) * $8_1));
      $12_1 = Math_fround($12_1 + Math_fround(Math_fround($17_1 - $12_1) * $8_1));
      $8_1 = Math_fround($15_1 + Math_fround(Math_fround($16_1 - $15_1) * $8_1));
      $4_1 = HEAP32[$1_1 + 4 >> 2];
      label$21 : {
       if (($4_1 | 0) != HEAP32[$1_1 + 8 >> 2]) {
        break label$21
       }
       $9_1 = $4_1 ? $4_1 << 1 : 1;
       if (($4_1 | 0) >= ($9_1 | 0)) {
        break label$21
       }
       label$22 : {
        if (!$9_1) {
         $10 = 0;
         break label$22;
        }
        $10 = $79($9_1 << 4);
        $4_1 = HEAP32[$1_1 + 4 >> 2];
       }
       if (($4_1 | 0) >= 1) {
        $7_1 = 0;
        while (1) {
         $5_1 = HEAP32[$1_1 + 12 >> 2] + $7_1 | 0;
         $11 = HEAP32[$5_1 + 4 >> 2];
         $6_1 = $7_1 + $10 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $11;
         $5_1 = $5_1 + 8 | 0;
         $11 = HEAP32[$5_1 + 4 >> 2];
         $6_1 = $6_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $11;
         $7_1 = $7_1 + 16 | 0;
         $4_1 = $4_1 + -1 | 0;
         if ($4_1) {
          continue
         }
         break;
        };
       }
       $4_1 = HEAP32[$1_1 + 12 >> 2];
       if ($4_1) {
        if (HEAPU8[$1_1 + 16 | 0]) {
         $80($4_1)
        }
        HEAP32[$1_1 + 12 >> 2] = 0;
       }
       HEAP32[$1_1 + 12 >> 2] = $10;
       HEAP8[$1_1 + 16 | 0] = 1;
       HEAP32[$1_1 + 8 >> 2] = $9_1;
       $4_1 = HEAP32[$1_1 + 4 >> 2];
      }
      $4_1 = HEAP32[$1_1 + 12 >> 2] + ($4_1 << 4) | 0;
      HEAP32[$4_1 + 12 >> 2] = 0;
      HEAPF32[$4_1 + 8 >> 2] = $13_1;
      HEAPF32[$4_1 + 4 >> 2] = $12_1;
      HEAPF32[$4_1 >> 2] = $8_1;
      $4_1 = HEAP32[$1_1 + 4 >> 2] + 1 | 0;
      HEAP32[$1_1 + 4 >> 2] = $4_1;
      label$28 : {
       if (HEAP32[$1_1 + 8 >> 2] != ($4_1 | 0)) {
        break label$28
       }
       $9_1 = $4_1 ? $4_1 << 1 : 1;
       if (($4_1 | 0) >= ($9_1 | 0)) {
        break label$28
       }
       label$29 : {
        if (!$9_1) {
         $10 = 0;
         break label$29;
        }
        $10 = $79($9_1 << 4);
        $4_1 = HEAP32[$1_1 + 4 >> 2];
       }
       if (($4_1 | 0) >= 1) {
        $7_1 = 0;
        while (1) {
         $5_1 = HEAP32[$1_1 + 12 >> 2] + $7_1 | 0;
         $11 = HEAP32[$5_1 + 4 >> 2];
         $6_1 = $7_1 + $10 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $11;
         $5_1 = $5_1 + 8 | 0;
         $11 = HEAP32[$5_1 + 4 >> 2];
         $6_1 = $6_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $11;
         $7_1 = $7_1 + 16 | 0;
         $4_1 = $4_1 + -1 | 0;
         if ($4_1) {
          continue
         }
         break;
        };
       }
       $4_1 = HEAP32[$1_1 + 12 >> 2];
       if ($4_1) {
        if (HEAPU8[$1_1 + 16 | 0]) {
         $80($4_1)
        }
        HEAP32[$1_1 + 12 >> 2] = 0;
       }
       HEAP32[$1_1 + 12 >> 2] = $10;
       HEAP8[$1_1 + 16 | 0] = 1;
       HEAP32[$1_1 + 8 >> 2] = $9_1;
       $4_1 = HEAP32[$1_1 + 4 >> 2];
      }
      $4_1 = HEAP32[$1_1 + 12 >> 2] + ($4_1 << 4) | 0;
      HEAP32[$4_1 + 12 >> 2] = $14;
      HEAPF32[$4_1 + 8 >> 2] = $18_1;
      HEAPF32[$4_1 + 4 >> 2] = $17_1;
      HEAPF32[$4_1 >> 2] = $16_1;
     }
     HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + 1;
    }
    $24_1 = $24_1 + 1 | 0;
    if (($24_1 | 0) == ($20 | 0)) {
     break label$1
    }
    $23_1 = HEAPF32[$2_1 + 8 >> 2];
    $22_1 = HEAPF32[$2_1 + 4 >> 2];
    $21 = HEAPF32[$2_1 >> 2];
    $7_1 = HEAP32[$0 + 12 >> 2];
    $8_1 = $19_1;
    $13_1 = $18_1;
    $12_1 = $17_1;
    $15_1 = $16_1;
    continue;
   };
  }
 }
 
 function $574($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0);
  $7_1 = HEAPF32[$3_1 >> 2];
  $10 = HEAPF32[$3_1 + 4 >> 2];
  $11 = HEAPF32[$3_1 + 8 >> 2];
  $13_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2] * $7_1) + Math_fround(HEAPF32[$2_1 + 4 >> 2] * $10)) + Math_fround(HEAPF32[$2_1 + 8 >> 2] * $11));
  $8_1 = Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$0 >> 2]) + Math_fround($10 * HEAPF32[$0 + 16 >> 2])) + Math_fround($11 * HEAPF32[$0 + 32 >> 2]));
  $9_1 = HEAPF32[$4_1 + 80 >> 2];
  $12_1 = Math_fround($8_1 * ($8_1 < Math_fround(0.0) ? Math_fround(-$9_1) : $9_1));
  $8_1 = Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$0 + 4 >> 2]) + Math_fround($10 * HEAPF32[$0 + 20 >> 2])) + Math_fround($11 * HEAPF32[$0 + 36 >> 2]));
  $9_1 = HEAPF32[$4_1 + 84 >> 2];
  $12_1 = Math_fround($12_1 + Math_fround($8_1 * ($8_1 < Math_fround(0.0) ? Math_fround(-$9_1) : $9_1)));
  $8_1 = Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$0 + 8 >> 2]) + Math_fround($10 * HEAPF32[$0 + 24 >> 2])) + Math_fround($11 * HEAPF32[$0 + 40 >> 2]));
  $9_1 = HEAPF32[$4_1 + 88 >> 2];
  $8_1 = Math_fround($12_1 + Math_fround($8_1 * ($8_1 < Math_fround(0.0) ? Math_fround(-$9_1) : $9_1)));
  $9_1 = HEAPF32[$4_1 + 96 >> 2];
  $12_1 = $8_1 > $9_1 ? $8_1 : $9_1;
  $8_1 = Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$1_1 >> 2]) + Math_fround($10 * HEAPF32[$1_1 + 16 >> 2])) + Math_fround($11 * HEAPF32[$1_1 + 32 >> 2]));
  $9_1 = HEAPF32[$5_1 + 80 >> 2];
  $14 = Math_fround($8_1 * ($8_1 < Math_fround(0.0) ? Math_fround(-$9_1) : $9_1));
  $8_1 = Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$1_1 + 4 >> 2]) + Math_fround($10 * HEAPF32[$1_1 + 20 >> 2])) + Math_fround($11 * HEAPF32[$1_1 + 36 >> 2]));
  $9_1 = HEAPF32[$5_1 + 84 >> 2];
  $7_1 = Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$1_1 + 8 >> 2]) + Math_fround($10 * HEAPF32[$1_1 + 24 >> 2])) + Math_fround($11 * HEAPF32[$1_1 + 40 >> 2]));
  $10 = HEAPF32[$5_1 + 88 >> 2];
  $7_1 = Math_fround(Math_fround($14 + Math_fround($8_1 * ($8_1 < Math_fround(0.0) ? Math_fround(-$9_1) : $9_1))) + Math_fround($7_1 * ($7_1 < Math_fround(0.0) ? Math_fround(-$10) : $10)));
  $10 = HEAPF32[$5_1 + 96 >> 2];
  $7_1 = Math_fround($12_1 + ($7_1 > $10 ? $7_1 : $10));
  $10 = Math_fround($13_1 + $7_1);
  $7_1 = Math_fround($7_1 - $13_1);
  return ($10 < $7_1 ? $10 : $7_1) > $6_1 ^ 1;
 }
 
 function $575($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = 0, $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0);
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  HEAP32[6287] = HEAP32[6287] + 1;
  $10 = HEAPF32[$2_1 + 52 >> 2];
  $15_1 = 20;
  $11 = HEAPF32[$2_1 + 20 >> 2];
  $19_1 = HEAPF32[$2_1 + 24 >> 2];
  $35 = HEAPF32[$3_1 + 52 >> 2];
  $36_1 = HEAPF32[$3_1 + 20 >> 2];
  $18_1 = HEAPF32[$3_1 + 24 >> 2];
  $37_1 = HEAPF32[$2_1 + 56 >> 2];
  $7_1 = HEAPF32[$0 + 68 >> 2];
  $14 = HEAPF32[$2_1 + 36 >> 2];
  $12_1 = HEAPF32[$0 + 72 >> 2];
  $20 = HEAPF32[$2_1 + 40 >> 2];
  $21 = HEAPF32[$3_1 + 56 >> 2];
  $29_1 = HEAPF32[$1_1 + 68 >> 2];
  $8_1 = HEAPF32[$3_1 + 36 >> 2];
  $30 = HEAPF32[$1_1 + 72 >> 2];
  $16_1 = HEAPF32[$3_1 + 40 >> 2];
  $22_1 = HEAPF32[$2_1 + 48 >> 2];
  $31_1 = HEAPF32[$2_1 + 8 >> 2];
  $38 = HEAPF32[$2_1 + 4 >> 2];
  $39_1 = HEAPF32[$2_1 >> 2];
  $40_1 = HEAPF32[$3_1 + 48 >> 2];
  $41_1 = HEAPF32[$3_1 + 8 >> 2];
  $28_1 = HEAPF32[$3_1 + 4 >> 2];
  $23_1 = HEAPF32[$3_1 >> 2];
  $26_1 = HEAPF32[$2_1 + 16 >> 2];
  $42 = HEAPF32[$3_1 + 16 >> 2];
  $27_1 = HEAPF32[$0 + 64 >> 2];
  $32 = HEAPF32[$2_1 + 32 >> 2];
  $9_1 = HEAPF32[$1_1 + 64 >> 2];
  $43_1 = HEAPF32[$3_1 + 32 >> 2];
  HEAP32[$6_1 + 28 >> 2] = 0;
  $37_1 = Math_fround(Math_fround($37_1 + Math_fround(Math_fround(Math_fround($27_1 * $32) + Math_fround($7_1 * $14)) + Math_fround($12_1 * $20))) - Math_fround($21 + Math_fround(Math_fround(Math_fround($9_1 * $43_1) + Math_fround($29_1 * $8_1)) + Math_fround($30 * $16_1))));
  HEAPF32[$6_1 + 24 >> 2] = $37_1;
  $35 = Math_fround(Math_fround($10 + Math_fround(Math_fround(Math_fround($27_1 * $26_1) + Math_fround($7_1 * $11)) + Math_fround($12_1 * $19_1))) - Math_fround($35 + Math_fround(Math_fround(Math_fround($9_1 * $42) + Math_fround($29_1 * $36_1)) + Math_fround($30 * $18_1))));
  HEAPF32[$6_1 + 20 >> 2] = $35;
  $36_1 = Math_fround(Math_fround($22_1 + Math_fround(Math_fround(Math_fround($27_1 * $39_1) + Math_fround($7_1 * $38)) + Math_fround($12_1 * $31_1))) - Math_fround($40_1 + Math_fround(Math_fround(Math_fround($9_1 * $23_1) + Math_fround($29_1 * $28_1)) + Math_fround($30 * $41_1))));
  HEAPF32[$6_1 + 16 >> 2] = $36_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $17_1 = HEAP32[$0 + 28 >> 2];
        if (($17_1 | 0) < 1) {
         $7_1 = Math_fround(3402823466385288598117041.0e14);
         break label$6;
        }
        $17_1 = $17_1 + -1 | 0;
        $7_1 = Math_fround(3402823466385288598117041.0e14);
        while (1) {
         $13_1 = HEAP32[$0 + 36 >> 2] + $15_1 | 0;
         $12_1 = HEAPF32[$13_1 + 8 >> 2];
         $29_1 = HEAPF32[$13_1 + 4 >> 2];
         $30 = HEAPF32[$13_1 >> 2];
         HEAP32[$6_1 + 12 >> 2] = 0;
         $14 = Math_fround(Math_fround(Math_fround($30 * $32) + Math_fround($29_1 * $14)) + Math_fround($12_1 * $20));
         HEAPF32[$6_1 + 8 >> 2] = $14;
         $11 = Math_fround(Math_fround(Math_fround($30 * $26_1) + Math_fround($29_1 * $11)) + Math_fround($12_1 * $19_1));
         HEAPF32[$6_1 + 4 >> 2] = $11;
         $12_1 = Math_fround(Math_fround(Math_fround($30 * HEAPF32[$2_1 >> 2]) + Math_fround($29_1 * HEAPF32[$2_1 + 4 >> 2])) + Math_fround($12_1 * $31_1));
         HEAPF32[$6_1 >> 2] = $12_1;
         if (!!(Math_fround(Math_fround(Math_fround($12_1 * $36_1) + Math_fround($11 * $35)) + Math_fround($14 * $37_1)) < Math_fround(0.0))) {
          HEAPF32[$6_1 + 8 >> 2] = -$14;
          HEAPF32[$6_1 + 4 >> 2] = -$11;
          HEAPF32[$6_1 >> 2] = -$12_1;
         }
         HEAP32[6285] = HEAP32[6285] + 1;
         label$10 : {
          if (HEAPU8[23404]) {
           if (!$574($2_1, $3_1, $6_1 + 16 | 0, $6_1, $0, $1_1, $7_1)) {
            break label$10
           }
          }
          $24_1 = 0;
          HEAP32[6286] = HEAP32[6286] + 1;
          $157($0, $2_1, $6_1, $6_1 + 108 | 0, $6_1 + 104 | 0, $6_1 + 80 | 0, $6_1 - -64 | 0);
          $157($1_1, $3_1, $6_1, $6_1 + 100 | 0, $6_1 + 96 | 0, $6_1 + 48 | 0, $6_1 + 32 | 0);
          $11 = HEAPF32[$6_1 + 104 >> 2];
          $14 = HEAPF32[$6_1 + 100 >> 2];
          label$12 : {
           if ($11 < $14) {
            break label$12
           }
           $12_1 = HEAPF32[$6_1 + 96 >> 2];
           $20 = HEAPF32[$6_1 + 108 >> 2];
           if ($12_1 < $20) {
            break label$12
           }
           $9_1 = Math_fround($11 - $14);
           $11 = Math_fround($12_1 - $20);
           $9_1 = $9_1 < $11 ? $9_1 : $11;
           $24_1 = 1;
          }
          if (!$24_1) {
           break label$5
          }
          if (!($9_1 < $7_1)) {
           break label$10
          }
          $13_1 = HEAP32[$6_1 + 4 >> 2];
          HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
          HEAP32[$4_1 + 4 >> 2] = $13_1;
          $25 = $6_1 + 8 | 0;
          $33_1 = HEAP32[$25 + 4 >> 2];
          $13_1 = $4_1 + 8 | 0;
          HEAP32[$13_1 >> 2] = HEAP32[$25 >> 2];
          HEAP32[$13_1 + 4 >> 2] = $33_1;
          $7_1 = $9_1;
         }
         if (!$17_1) {
          break label$6
         }
         $15_1 = $15_1 + 36 | 0;
         $17_1 = $17_1 + -1 | 0;
         $20 = HEAPF32[$2_1 + 40 >> 2];
         $14 = HEAPF32[$2_1 + 36 >> 2];
         $32 = HEAPF32[$2_1 + 32 >> 2];
         $19_1 = HEAPF32[$2_1 + 24 >> 2];
         $11 = HEAPF32[$2_1 + 20 >> 2];
         $26_1 = HEAPF32[$2_1 + 16 >> 2];
         $31_1 = HEAPF32[$2_1 + 8 >> 2];
         continue;
        };
       }
       $17_1 = HEAP32[$1_1 + 28 >> 2];
       if (($17_1 | 0) >= 1) {
        $24_1 = 20;
        while (1) {
         $13_1 = HEAP32[$1_1 + 36 >> 2] + $24_1 | 0;
         $9_1 = HEAPF32[$13_1 + 8 >> 2];
         $11 = HEAPF32[$13_1 >> 2];
         $14 = HEAPF32[$13_1 + 4 >> 2];
         HEAP32[$6_1 + 12 >> 2] = 0;
         $12_1 = Math_fround(Math_fround(Math_fround($11 * HEAPF32[$3_1 + 32 >> 2]) + Math_fround($14 * HEAPF32[$3_1 + 36 >> 2])) + Math_fround($9_1 * HEAPF32[$3_1 + 40 >> 2]));
         HEAPF32[$6_1 + 8 >> 2] = $12_1;
         $20 = Math_fround(Math_fround(Math_fround($11 * HEAPF32[$3_1 + 16 >> 2]) + Math_fround($14 * HEAPF32[$3_1 + 20 >> 2])) + Math_fround($9_1 * HEAPF32[$3_1 + 24 >> 2]));
         HEAPF32[$6_1 + 4 >> 2] = $20;
         $9_1 = Math_fround(Math_fround(Math_fround($11 * HEAPF32[$3_1 >> 2]) + Math_fround($14 * HEAPF32[$3_1 + 4 >> 2])) + Math_fround($9_1 * HEAPF32[$3_1 + 8 >> 2]));
         HEAPF32[$6_1 >> 2] = $9_1;
         if (!!(Math_fround(Math_fround(Math_fround($9_1 * $36_1) + Math_fround($20 * $35)) + Math_fround($12_1 * $37_1)) < Math_fround(0.0))) {
          HEAPF32[$6_1 + 8 >> 2] = -$12_1;
          HEAPF32[$6_1 + 4 >> 2] = -$20;
          HEAPF32[$6_1 >> 2] = -$9_1;
         }
         HEAP32[6285] = HEAP32[6285] + 1;
         label$16 : {
          if (HEAPU8[23404]) {
           if (!$574($2_1, $3_1, $6_1 + 16 | 0, $6_1, $0, $1_1, $7_1)) {
            break label$16
           }
          }
          $15_1 = 0;
          HEAP32[6286] = HEAP32[6286] + 1;
          $157($0, $2_1, $6_1, $6_1 + 108 | 0, $6_1 + 104 | 0, $6_1 + 80 | 0, $6_1 - -64 | 0);
          $157($1_1, $3_1, $6_1, $6_1 + 100 | 0, $6_1 + 96 | 0, $6_1 + 48 | 0, $6_1 + 32 | 0);
          $9_1 = HEAPF32[$6_1 + 104 >> 2];
          $11 = HEAPF32[$6_1 + 100 >> 2];
          label$18 : {
           if ($9_1 < $11) {
            break label$18
           }
           $14 = HEAPF32[$6_1 + 96 >> 2];
           $12_1 = HEAPF32[$6_1 + 108 >> 2];
           if ($14 < $12_1) {
            break label$18
           }
           $19_1 = Math_fround($9_1 - $11);
           $9_1 = Math_fround($14 - $12_1);
           $19_1 = $19_1 < $9_1 ? $19_1 : $9_1;
           $15_1 = 1;
          }
          if (!$15_1) {
           break label$5
          }
          if (!($19_1 < $7_1)) {
           break label$16
          }
          $13_1 = HEAP32[$6_1 + 4 >> 2];
          HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
          HEAP32[$4_1 + 4 >> 2] = $13_1;
          $25 = $6_1 + 8 | 0;
          $33_1 = HEAP32[$25 + 4 >> 2];
          $13_1 = $4_1 + 8 | 0;
          HEAP32[$13_1 >> 2] = HEAP32[$25 >> 2];
          HEAP32[$13_1 + 4 >> 2] = $33_1;
          $7_1 = $19_1;
         }
         $24_1 = $24_1 + 36 | 0;
         $17_1 = $17_1 + -1 | 0;
         if ($17_1) {
          continue
         }
         break;
        };
       }
       $24_1 = HEAP32[$0 + 48 >> 2];
       if (($24_1 | 0) >= 1) {
        break label$4
       }
       $25 = -1;
       $19_1 = Math_fround(0.0);
       $9_1 = Math_fround(0.0);
       $11 = Math_fround(0.0);
       $14 = Math_fround(0.0);
       $12_1 = Math_fround(0.0);
       $20 = Math_fround(0.0);
       $33_1 = -1;
       break label$3;
      }
      $3_1 = 0;
      break label$1;
     }
     $15_1 = HEAP32[$1_1 + 48 >> 2];
     $33_1 = -1;
     $13_1 = 0;
     $25 = -1;
     $20 = Math_fround(0.0);
     $12_1 = Math_fround(0.0);
     $14 = Math_fround(0.0);
     $11 = Math_fround(0.0);
     $9_1 = Math_fround(0.0);
     $19_1 = Math_fround(0.0);
     while (1) {
      if (($15_1 | 0) >= 1) {
       $17_1 = HEAP32[$0 + 56 >> 2] + ($13_1 << 4) | 0;
       $31_1 = HEAPF32[$17_1 >> 2];
       $26_1 = HEAPF32[$17_1 + 4 >> 2];
       $27_1 = HEAPF32[$17_1 + 8 >> 2];
       $29_1 = Math_fround(Math_fround(Math_fround($31_1 * HEAPF32[$2_1 + 32 >> 2]) + Math_fround($26_1 * HEAPF32[$2_1 + 36 >> 2])) + Math_fround($27_1 * HEAPF32[$2_1 + 40 >> 2]));
       $30 = Math_fround(Math_fround(Math_fround($31_1 * HEAPF32[$2_1 + 16 >> 2]) + Math_fround($26_1 * HEAPF32[$2_1 + 20 >> 2])) + Math_fround($27_1 * HEAPF32[$2_1 + 24 >> 2]));
       $31_1 = Math_fround(Math_fround(Math_fround($31_1 * HEAPF32[$2_1 >> 2]) + Math_fround($26_1 * HEAPF32[$2_1 + 4 >> 2])) + Math_fround($27_1 * HEAPF32[$2_1 + 8 >> 2]));
       $17_1 = 0;
       $24_1 = 4;
       while (1) {
        $15_1 = HEAP32[$1_1 + 56 >> 2] + $24_1 | 0;
        $32 = HEAPF32[$15_1 + 4 >> 2];
        $18_1 = HEAPF32[$15_1 + -4 >> 2];
        $21 = HEAPF32[$15_1 >> 2];
        $34 = HEAPF32[$3_1 + 40 >> 2];
        $46_1 = HEAPF32[$3_1 + 32 >> 2];
        $47 = HEAPF32[$3_1 + 36 >> 2];
        $26_1 = HEAPF32[$3_1 + 24 >> 2];
        $27_1 = HEAPF32[$3_1 + 16 >> 2];
        $10 = HEAPF32[$3_1 + 20 >> 2];
        $48_1 = HEAPF32[$3_1 + 8 >> 2];
        $49_1 = HEAPF32[$3_1 >> 2];
        $50_1 = HEAPF32[$3_1 + 4 >> 2];
        HEAP32[$6_1 + 12 >> 2] = 0;
        $26_1 = Math_fround(Math_fround(Math_fround($18_1 * $27_1) + Math_fround($21 * $10)) + Math_fround($32 * $26_1));
        $27_1 = Math_fround(Math_fround(Math_fround($18_1 * $49_1) + Math_fround($21 * $50_1)) + Math_fround($32 * $48_1));
        $10 = Math_fround(Math_fround($31_1 * $26_1) - Math_fround($30 * $27_1));
        HEAPF32[$6_1 + 8 >> 2] = $10;
        $32 = Math_fround(Math_fround(Math_fround($18_1 * $46_1) + Math_fround($21 * $47)) + Math_fround($32 * $34));
        $18_1 = Math_fround(Math_fround($29_1 * $27_1) - Math_fround($31_1 * $32));
        HEAPF32[$6_1 + 4 >> 2] = $18_1;
        $21 = Math_fround(Math_fround($30 * $32) - Math_fround($29_1 * $26_1));
        HEAPF32[$6_1 >> 2] = $21;
        label$22 : {
         if (+Math_fround(Math_abs($10)) > 1.0e-06 ^ 1 ? !(+Math_fround(Math_abs($21)) > 1.0e-06 | +Math_fround(Math_abs($18_1)) > 1.0e-06) : 0) {
          break label$22
         }
         $34 = $10;
         $10 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($10 * $10) + Math_fround(Math_fround($21 * $21) + Math_fround($18_1 * $18_1))))));
         $34 = Math_fround($34 * $10);
         HEAPF32[$6_1 + 8 >> 2] = $34;
         $18_1 = Math_fround($18_1 * $10);
         HEAPF32[$6_1 + 4 >> 2] = $18_1;
         $10 = Math_fround($21 * $10);
         HEAPF32[$6_1 >> 2] = $10;
         if (!!(Math_fround(Math_fround(Math_fround($10 * $36_1) + Math_fround($18_1 * $35)) + Math_fround($37_1 * $34)) < Math_fround(0.0))) {
          HEAPF32[$6_1 + 8 >> 2] = -$34;
          HEAPF32[$6_1 + 4 >> 2] = -$18_1;
          HEAPF32[$6_1 >> 2] = -$10;
         }
         HEAP32[6285] = HEAP32[6285] + 1;
         if (HEAPU8[23404]) {
          if (!$574($2_1, $3_1, $6_1 + 16 | 0, $6_1, $0, $1_1, $7_1)) {
           break label$22
          }
         }
         $15_1 = 0;
         HEAP32[6286] = HEAP32[6286] + 1;
         $157($0, $2_1, $6_1, $6_1 + 108 | 0, $6_1 + 104 | 0, $6_1 + 80 | 0, $6_1 - -64 | 0);
         $157($1_1, $3_1, $6_1, $6_1 + 100 | 0, $6_1 + 96 | 0, $6_1 + 48 | 0, $6_1 + 32 | 0);
         $10 = HEAPF32[$6_1 + 104 >> 2];
         $18_1 = HEAPF32[$6_1 + 100 >> 2];
         label$26 : {
          if ($10 < $18_1) {
           break label$26
          }
          $21 = HEAPF32[$6_1 + 96 >> 2];
          $34 = HEAPF32[$6_1 + 108 >> 2];
          if ($21 < $34) {
           break label$26
          }
          $8_1 = Math_fround($10 - $18_1);
          $10 = Math_fround($21 - $34);
          if (!!($8_1 < $10)) {
           $15_1 = 1;
           $39_1 = HEAPF32[$6_1 + 56 >> 2];
           $40_1 = HEAPF32[$6_1 + 52 >> 2];
           $41_1 = HEAPF32[$6_1 + 48 >> 2];
           $16_1 = HEAPF32[$6_1 + 72 >> 2];
           $22_1 = HEAPF32[$6_1 + 68 >> 2];
           $38 = HEAPF32[$6_1 + 64 >> 2];
           break label$26;
          }
          $15_1 = 1;
          $39_1 = HEAPF32[$6_1 + 40 >> 2];
          $40_1 = HEAPF32[$6_1 + 36 >> 2];
          $41_1 = HEAPF32[$6_1 + 32 >> 2];
          $16_1 = HEAPF32[$6_1 + 88 >> 2];
          $22_1 = HEAPF32[$6_1 + 84 >> 2];
          $38 = HEAPF32[$6_1 + 80 >> 2];
          $8_1 = $10;
         }
         if (!$15_1) {
          break label$2
         }
         if (!($8_1 < $7_1)) {
          break label$22
         }
         $25 = HEAP32[$6_1 + 4 >> 2];
         HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
         HEAP32[$4_1 + 4 >> 2] = $25;
         $33_1 = $6_1 + 8 | 0;
         $15_1 = HEAP32[$33_1 + 4 >> 2];
         $25 = $4_1 + 8 | 0;
         HEAP32[$25 >> 2] = HEAP32[$33_1 >> 2];
         HEAP32[$25 + 4 >> 2] = $15_1;
         $19_1 = $41_1;
         $9_1 = $40_1;
         $11 = $39_1;
         $14 = $38;
         $12_1 = $22_1;
         $20 = $16_1;
         $28_1 = $27_1;
         $23_1 = $26_1;
         $42 = $32;
         $43_1 = $31_1;
         $44_1 = $30;
         $45_1 = $29_1;
         $25 = $13_1;
         $33_1 = $17_1;
         $7_1 = $8_1;
        }
        $24_1 = $24_1 + 16 | 0;
        $17_1 = $17_1 + 1 | 0;
        $15_1 = HEAP32[$1_1 + 48 >> 2];
        if (($17_1 | 0) < ($15_1 | 0)) {
         continue
        }
        break;
       };
       $24_1 = HEAP32[$0 + 48 >> 2];
      }
      $13_1 = $13_1 + 1 | 0;
      if (($13_1 | 0) < ($24_1 | 0)) {
       continue
      }
      break;
     };
    }
    label$28 : {
     if (($25 | $33_1) < 0) {
      break label$28
     }
     $39_1 = Math_fround($19_1 - $14);
     $40_1 = Math_fround($9_1 - $12_1);
     $41_1 = Math_fround($11 - $20);
     $16_1 = Math_fround(Math_fround(Math_fround($39_1 * $28_1) + Math_fround($40_1 * $23_1)) + Math_fround($41_1 * $42));
     $38 = Math_fround(Math_fround(Math_fround($39_1 * $43_1) + Math_fround($40_1 * $44_1)) + Math_fround($41_1 * $45_1));
     $7_1 = Math_fround(0.0);
     $22_1 = Math_fround(Math_fround(Math_fround($28_1 * $43_1) + Math_fround($23_1 * $44_1)) + Math_fround($42 * $45_1));
     $8_1 = Math_fround(Math_fround(1.0) - Math_fround($22_1 * $22_1));
     label$29 : {
      if ($8_1 == Math_fround(0.0)) {
       break label$29
      }
      $7_1 = Math_fround(-1000000015047466219876688.0e6);
      $8_1 = Math_fround(Math_fround($38 - Math_fround($16_1 * $22_1)) / $8_1);
      if ($8_1 < Math_fround(-1000000015047466219876688.0e6)) {
       break label$29
      }
      $7_1 = $8_1;
      if (!($7_1 > Math_fround(1000000015047466219876688.0e6))) {
       break label$29
      }
      $7_1 = Math_fround(1000000015047466219876688.0e6);
     }
     $16_1 = Math_fround(Math_fround($22_1 * $7_1) - $16_1);
     label$30 : {
      if (!!($16_1 < Math_fround(-1000000015047466219876688.0e6))) {
       $8_1 = Math_fround($38 + Math_fround($22_1 * Math_fround(-1000000015047466219876688.0e6)));
       if ($8_1 < Math_fround(-1000000015047466219876688.0e6)) {
        $16_1 = Math_fround(-1000000015047466219876688.0e6);
        $7_1 = Math_fround(-1000000015047466219876688.0e6);
        break label$30;
       }
       $7_1 = Math_fround(1000000015047466219876688.0e6);
       if (!($8_1 > Math_fround(1000000015047466219876688.0e6))) {
        $16_1 = Math_fround(-1000000015047466219876688.0e6);
        $7_1 = $8_1;
        break label$30;
       }
       $16_1 = Math_fround(-1000000015047466219876688.0e6);
       break label$30;
      }
      if (!($16_1 > Math_fround(1000000015047466219876688.0e6))) {
       break label$30
      }
      $7_1 = Math_fround(-1000000015047466219876688.0e6);
      $16_1 = Math_fround(1000000015047466219876688.0e6);
      $8_1 = Math_fround($38 + Math_fround($22_1 * Math_fround(1000000015047466219876688.0e6)));
      if ($8_1 < Math_fround(-1000000015047466219876688.0e6)) {
       break label$30
      }
      $7_1 = $8_1;
      if (!($7_1 > Math_fround(1000000015047466219876688.0e6))) {
       break label$30
      }
      $7_1 = Math_fround(1000000015047466219876688.0e6);
     }
     HEAP32[$6_1 + 92 >> 2] = 0;
     $42 = Math_fround($42 * $16_1);
     $8_1 = Math_fround($42 + Math_fround($41_1 - Math_fround($45_1 * $7_1)));
     HEAPF32[$6_1 + 88 >> 2] = $8_1;
     $22_1 = Math_fround($23_1 * $16_1);
     $23_1 = Math_fround($22_1 + Math_fround($40_1 - Math_fround($44_1 * $7_1)));
     HEAPF32[$6_1 + 84 >> 2] = $23_1;
     $16_1 = Math_fround($28_1 * $16_1);
     $7_1 = Math_fround($16_1 + Math_fround($39_1 - Math_fround($43_1 * $7_1)));
     HEAPF32[$6_1 + 80 >> 2] = $7_1;
     $28_1 = Math_fround(Math_fround($8_1 * $8_1) + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($23_1 * $23_1)));
     if (!($28_1 > Math_fround(1.1920928955078125e-07))) {
      break label$28
     }
     $10 = $8_1;
     $43_1 = Math_fround(Math_sqrt($28_1));
     $8_1 = Math_fround(Math_fround(1.0) / $43_1);
     $28_1 = Math_fround($10 * $8_1);
     HEAPF32[$6_1 + 88 >> 2] = $28_1;
     $23_1 = Math_fround($23_1 * $8_1);
     HEAPF32[$6_1 + 84 >> 2] = $23_1;
     $7_1 = Math_fround($7_1 * $8_1);
     HEAPF32[$6_1 + 80 >> 2] = $7_1;
     if (!!(Math_fround(Math_fround(Math_fround($7_1 * $36_1) + Math_fround($23_1 * $35)) + Math_fround($28_1 * $37_1)) < Math_fround(0.0))) {
      HEAPF32[$6_1 + 88 >> 2] = -$28_1;
      HEAPF32[$6_1 + 84 >> 2] = -$23_1;
      HEAPF32[$6_1 + 80 >> 2] = -$7_1;
     }
     HEAP32[$6_1 + 76 >> 2] = 0;
     HEAPF32[$6_1 + 72 >> 2] = $11 + $42;
     HEAPF32[$6_1 + 68 >> 2] = $9_1 + $22_1;
     HEAPF32[$6_1 + 64 >> 2] = $19_1 + $16_1;
     FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 16 >> 2]]($5_1, $6_1 + 80 | 0, $6_1 - -64 | 0, Math_fround(-$43_1));
    }
    $3_1 = 1;
    $7_1 = HEAPF32[$4_1 >> 2];
    $8_1 = HEAPF32[$4_1 + 4 >> 2];
    $19_1 = HEAPF32[$4_1 + 8 >> 2];
    if (!(Math_fround(Math_fround(Math_fround($36_1 * $7_1) + Math_fround($35 * $8_1)) + Math_fround($37_1 * $19_1)) < Math_fround(0.0))) {
     break label$1
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAPF32[$4_1 + 8 >> 2] = -$19_1;
    HEAPF32[$4_1 + 4 >> 2] = -$8_1;
    HEAPF32[$4_1 >> 2] = -$7_1;
    break label$1;
   }
   $3_1 = 0;
  }
  global$0 = $6_1 + 112 | 0;
  return $3_1;
 }
 
 function $576($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = 0, $35 = 0, $36_1 = 0, $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = 0, $43_1 = 0, $44_1 = 0, $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47 = Math_fround(0);
  $14 = global$0 - 32 | 0;
  global$0 = $14;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  if (($8_1 | 0) <= -1) {
   if (HEAP32[$4_1 + 8 >> 2] <= -1) {
    $9_1 = HEAP32[$4_1 + 12 >> 2];
    if ($9_1) {
     if (HEAPU8[$4_1 + 16 | 0]) {
      $80($9_1)
     }
     HEAP32[$4_1 + 12 >> 2] = 0;
    }
    HEAP8[$4_1 + 16 | 0] = 1;
    HEAP32[$4_1 + 8 >> 2] = 0;
    HEAP32[$4_1 + 12 >> 2] = 0;
   }
   $10 = $8_1 << 4;
   while (1) {
    $11 = HEAP32[$14 + 20 >> 2];
    $9_1 = HEAP32[$4_1 + 12 >> 2] + $10 | 0;
    HEAP32[$9_1 >> 2] = HEAP32[$14 + 16 >> 2];
    HEAP32[$9_1 + 4 >> 2] = $11;
    $12_1 = $14 + 24 | 0;
    $11 = HEAP32[$12_1 + 4 >> 2];
    $9_1 = $9_1 + 8 | 0;
    HEAP32[$9_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$9_1 + 4 >> 2] = $11;
    $10 = $10 + 16 | 0;
    $9_1 = $8_1 + 1 | 0;
    $12_1 = $9_1 >>> 0 >= $8_1 >>> 0;
    $8_1 = $9_1;
    if ($12_1) {
     continue
    }
    break;
   };
  }
  $9_1 = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $12_1 = HEAP32[$3_1 + 4 >> 2];
  if (HEAP32[$4_1 + 8 >> 2] < ($12_1 | 0)) {
   label$7 : {
    if (!$12_1) {
     break label$7
    }
    $9_1 = $79($12_1 << 4);
    $10 = HEAP32[$4_1 + 4 >> 2];
    if (($10 | 0) < 1) {
     break label$7
    }
    $8_1 = 0;
    while (1) {
     $11 = HEAP32[$4_1 + 12 >> 2] + $8_1 | 0;
     $35 = HEAP32[$11 + 4 >> 2];
     $18_1 = $8_1 + $9_1 | 0;
     HEAP32[$18_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$18_1 + 4 >> 2] = $35;
     $11 = $11 + 8 | 0;
     $34 = HEAP32[$11 + 4 >> 2];
     $18_1 = $18_1 + 8 | 0;
     HEAP32[$18_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$18_1 + 4 >> 2] = $34;
     $8_1 = $8_1 + 16 | 0;
     $10 = $10 + -1 | 0;
     if ($10) {
      continue
     }
     break;
    };
   }
   $8_1 = HEAP32[$4_1 + 12 >> 2];
   if ($8_1) {
    if (HEAPU8[$4_1 + 16 | 0]) {
     $80($8_1)
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
   }
   HEAP32[$4_1 + 12 >> 2] = $9_1;
   HEAP8[$4_1 + 16 | 0] = 1;
   HEAP32[$4_1 + 8 >> 2] = $12_1;
  }
  $11 = HEAP32[$1_1 + 28 >> 2];
  label$11 : {
   if (($11 | 0) < 1) {
    break label$11
   }
   $8_1 = HEAP32[$1_1 + 36 >> 2] + 20 | 0;
   $20 = HEAPF32[$2_1 + 40 >> 2];
   $25 = HEAPF32[$2_1 + 36 >> 2];
   $17_1 = HEAPF32[$2_1 + 24 >> 2];
   $26_1 = HEAPF32[$2_1 + 20 >> 2];
   $21 = HEAPF32[$0 + 8 >> 2];
   $27_1 = HEAPF32[$0 + 4 >> 2];
   $22_1 = HEAPF32[$0 >> 2];
   $28_1 = HEAPF32[$2_1 + 32 >> 2];
   $29_1 = HEAPF32[$2_1 + 16 >> 2];
   $30 = HEAPF32[$2_1 + 8 >> 2];
   $31_1 = HEAPF32[$2_1 + 4 >> 2];
   $23_1 = HEAPF32[$2_1 >> 2];
   $10 = 0;
   $16_1 = Math_fround(3402823466385288598117041.0e14);
   $12_1 = -1;
   while (1) {
    $15_1 = HEAPF32[$8_1 >> 2];
    $13_1 = HEAPF32[$8_1 + 4 >> 2];
    $19_1 = HEAPF32[$8_1 + 8 >> 2];
    $15_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $23_1) + Math_fround($13_1 * $31_1)) + Math_fround($19_1 * $30)) * $22_1) + Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $29_1) + Math_fround($13_1 * $26_1)) + Math_fround($19_1 * $17_1)) * $27_1)) + Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $28_1) + Math_fround($13_1 * $25)) + Math_fround($19_1 * $20)) * $21));
    $9_1 = $15_1 < $16_1;
    $16_1 = $9_1 ? $15_1 : $16_1;
    $12_1 = $9_1 ? $10 : $12_1;
    $8_1 = $8_1 + 36 | 0;
    $10 = $10 + 1 | 0;
    if (($10 | 0) < ($11 | 0)) {
     continue
    }
    break;
   };
   if (($12_1 | 0) < 0) {
    break label$11
   }
   $11 = HEAP32[$1_1 + 36 >> 2] + Math_imul($12_1, 36) | 0;
   $34 = HEAP32[$11 + 4 >> 2];
   label$13 : {
    if (($34 | 0) < 1) {
     $9_1 = $3_1;
     break label$13;
    }
    $35 = $11 + 28 | 0;
    $42 = $11 + 24 | 0;
    $43_1 = $11 + 20 | 0;
    $44_1 = $11 + 12 | 0;
    $8_1 = 0;
    while (1) {
     $9_1 = $4_1;
     $12_1 = $8_1 + 1 | 0;
     $18_1 = ($12_1 | 0) == ($34 | 0);
     $24_1 = HEAP32[$1_1 + 16 >> 2];
     $10 = HEAP32[$44_1 >> 2];
     $4_1 = $24_1 + (HEAP32[$10 + (($18_1 ? 0 : $12_1) << 2) >> 2] << 4) | 0;
     $32 = HEAPF32[$4_1 + 8 >> 2];
     $23_1 = HEAPF32[$4_1 >> 2];
     $33_1 = HEAPF32[$4_1 + 4 >> 2];
     $4_1 = $24_1 + (HEAP32[$10 + ($8_1 << 2) >> 2] << 4) | 0;
     $16_1 = HEAPF32[$4_1 + 8 >> 2];
     $15_1 = HEAPF32[$4_1 >> 2];
     $13_1 = HEAPF32[$4_1 + 4 >> 2];
     $45_1 = HEAPF32[$2_1 + 56 >> 2];
     $46_1 = HEAPF32[$2_1 + 52 >> 2];
     $47 = HEAPF32[$2_1 + 48 >> 2];
     $19_1 = HEAPF32[$2_1 + 40 >> 2];
     $20 = HEAPF32[$2_1 + 32 >> 2];
     $25 = HEAPF32[$2_1 + 36 >> 2];
     $17_1 = HEAPF32[$35 >> 2];
     $26_1 = HEAPF32[$2_1 + 8 >> 2];
     $21 = HEAPF32[$43_1 >> 2];
     $27_1 = HEAPF32[$2_1 >> 2];
     $22_1 = HEAPF32[$42 >> 2];
     $28_1 = HEAPF32[$2_1 + 4 >> 2];
     $29_1 = HEAPF32[$2_1 + 24 >> 2];
     $30 = HEAPF32[$2_1 + 16 >> 2];
     $31_1 = HEAPF32[$2_1 + 20 >> 2];
     HEAP32[$14 + 28 >> 2] = 0;
     $23_1 = Math_fround($15_1 - $23_1);
     $33_1 = Math_fround($13_1 - $33_1);
     $32 = Math_fround($16_1 - $32);
     $37_1 = Math_fround(Math_fround(Math_fround($27_1 * $23_1) + Math_fround($28_1 * $33_1)) + Math_fround($26_1 * $32));
     $38 = Math_fround(Math_fround(Math_fround($30 * $21) + Math_fround($31_1 * $22_1)) + Math_fround($29_1 * $17_1));
     $39_1 = Math_fround(Math_fround(Math_fround($23_1 * $30) + Math_fround($33_1 * $31_1)) + Math_fround($32 * $29_1));
     $40_1 = Math_fround(Math_fround(Math_fround($27_1 * $21) + Math_fround($28_1 * $22_1)) + Math_fround($26_1 * $17_1));
     $41_1 = Math_fround(Math_fround($37_1 * $38) - Math_fround($39_1 * $40_1));
     HEAPF32[$14 + 24 >> 2] = -$41_1;
     $17_1 = Math_fround(Math_fround(Math_fround($20 * $21) + Math_fround($25 * $22_1)) + Math_fround($19_1 * $17_1));
     $21 = Math_fround(Math_fround(Math_fround($23_1 * $20) + Math_fround($33_1 * $25)) + Math_fround($32 * $19_1));
     $22_1 = Math_fround(Math_fround($39_1 * $17_1) - Math_fround($21 * $38));
     HEAPF32[$14 + 16 >> 2] = -$22_1;
     $17_1 = Math_fround(-Math_fround(Math_fround($21 * $40_1) - Math_fround($37_1 * $17_1)));
     HEAPF32[$14 + 20 >> 2] = $17_1;
     $4_1 = $3_1;
     $573($4_1, $9_1, $14 + 16 | 0, Math_fround(-Math_fround(Math_fround(Math_fround(Math_fround($46_1 + Math_fround(Math_fround(Math_fround($15_1 * $30) + Math_fround($13_1 * $31_1)) + Math_fround($16_1 * $29_1))) * $17_1) - Math_fround($22_1 * Math_fround($47 + Math_fround(Math_fround(Math_fround($15_1 * $27_1) + Math_fround($13_1 * $28_1)) + Math_fround($16_1 * $26_1))))) - Math_fround($41_1 * Math_fround($45_1 + Math_fround(Math_fround(Math_fround($15_1 * $20) + Math_fround($13_1 * $25)) + Math_fround($16_1 * $19_1)))))));
     $8_1 = HEAP32[$4_1 + 4 >> 2];
     if (($8_1 | 0) <= -1) {
      if (HEAP32[$4_1 + 8 >> 2] <= -1) {
       $3_1 = HEAP32[$4_1 + 12 >> 2];
       if ($3_1) {
        if (HEAPU8[$4_1 + 16 | 0]) {
         $80($3_1)
        }
        HEAP32[$4_1 + 12 >> 2] = 0;
       }
       HEAP8[$4_1 + 16 | 0] = 1;
       HEAP32[$4_1 + 8 >> 2] = 0;
       HEAP32[$4_1 + 12 >> 2] = 0;
      }
      $10 = $8_1 << 4;
      while (1) {
       $36_1 = HEAP32[$14 + 4 >> 2];
       $3_1 = HEAP32[$4_1 + 12 >> 2] + $10 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$14 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $36_1;
       $24_1 = $14 + 8 | 0;
       $36_1 = HEAP32[$24_1 + 4 >> 2];
       $3_1 = $3_1 + 8 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$24_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $36_1;
       $10 = $10 + 16 | 0;
       $3_1 = $8_1 + 1 | 0;
       $24_1 = $3_1 >>> 0 >= $8_1 >>> 0;
       $8_1 = $3_1;
       if ($24_1) {
        continue
       }
       break;
      };
     }
     HEAP32[$4_1 + 4 >> 2] = 0;
     $8_1 = $12_1;
     $3_1 = $9_1;
     if (!$18_1) {
      continue
     }
     break;
    };
   }
   $3_1 = HEAP32[$9_1 + 4 >> 2];
   if (($3_1 | 0) < 1) {
    break label$11
   }
   $16_1 = HEAPF32[$11 + 20 >> 2];
   $15_1 = HEAPF32[$11 + 24 >> 2];
   $13_1 = HEAPF32[$11 + 28 >> 2];
   $19_1 = Math_fround(Math_fround(Math_fround($16_1 * HEAPF32[$2_1 >> 2]) + Math_fround($15_1 * HEAPF32[$2_1 + 4 >> 2])) + Math_fround($13_1 * HEAPF32[$2_1 + 8 >> 2]));
   $20 = Math_fround(Math_fround(Math_fround($16_1 * HEAPF32[$2_1 + 16 >> 2]) + Math_fround($15_1 * HEAPF32[$2_1 + 20 >> 2])) + Math_fround($13_1 * HEAPF32[$2_1 + 24 >> 2]));
   $16_1 = Math_fround(Math_fround(Math_fround($16_1 * HEAPF32[$2_1 + 32 >> 2]) + Math_fround($15_1 * HEAPF32[$2_1 + 36 >> 2])) + Math_fround($13_1 * HEAPF32[$2_1 + 40 >> 2]));
   $15_1 = Math_fround(HEAPF32[$11 + 32 >> 2] - Math_fround(Math_fround(Math_fround($19_1 * HEAPF32[$2_1 + 48 >> 2]) + Math_fround($20 * HEAPF32[$2_1 + 52 >> 2])) + Math_fround($16_1 * HEAPF32[$2_1 + 56 >> 2])));
   $10 = 0;
   $12_1 = 0;
   while (1) {
    $1_1 = HEAP32[$9_1 + 12 >> 2] + $10 | 0;
    $2_1 = $1_1 + 8 | 0;
    $13_1 = Math_fround($15_1 + Math_fround(Math_fround(Math_fround($19_1 * HEAPF32[$1_1 >> 2]) + Math_fround($20 * HEAPF32[$1_1 + 4 >> 2])) + Math_fround($16_1 * HEAPF32[$2_1 >> 2])));
    $13_1 = $13_1 <= $5_1 ? $5_1 : $13_1;
    if (!!($13_1 <= $6_1)) {
     $4_1 = HEAP32[$2_1 + 4 >> 2];
     $3_1 = $14 + 24 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$14 + 16 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$14 + 20 >> 2] = $2_1;
     FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 16 >> 2]]($7_1, $0, $14 + 16 | 0, $13_1);
     $3_1 = HEAP32[$9_1 + 4 >> 2];
    }
    $10 = $10 + 16 | 0;
    $12_1 = $12_1 + 1 | 0;
    if (($12_1 | 0) < ($3_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $14 + 32 | 0;
 }
 
 function $577($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  var $10 = 0, $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20 = 0, $21 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = 0;
  $16_1 = global$0 - 32 | 0;
  global$0 = $16_1;
  HEAP32[$16_1 + 28 >> 2] = HEAP32[$0 + 12 >> 2];
  $12_1 = HEAPF32[$0 >> 2];
  $15_1 = HEAPF32[$0 + 4 >> 2];
  $17_1 = HEAPF32[$0 + 8 >> 2];
  $13_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($15_1 * $15_1)) + Math_fround($17_1 * $17_1)))));
  $21 = Math_fround($17_1 * $13_1);
  HEAPF32[$16_1 + 24 >> 2] = $21;
  $24_1 = Math_fround($15_1 * $13_1);
  HEAPF32[$16_1 + 20 >> 2] = $24_1;
  $25 = Math_fround($12_1 * $13_1);
  HEAPF32[$16_1 + 16 >> 2] = $25;
  $22_1 = -1;
  $14 = HEAP32[$2_1 + 28 >> 2];
  if (($14 | 0) >= 1) {
   $0 = HEAP32[$2_1 + 36 >> 2] + 20 | 0;
   $27_1 = HEAPF32[$4_1 + 40 >> 2];
   $28_1 = HEAPF32[$4_1 + 36 >> 2];
   $29_1 = HEAPF32[$4_1 + 24 >> 2];
   $30 = HEAPF32[$4_1 + 20 >> 2];
   $31_1 = HEAPF32[$4_1 + 32 >> 2];
   $32 = HEAPF32[$4_1 + 16 >> 2];
   $33_1 = HEAPF32[$4_1 + 8 >> 2];
   $34 = HEAPF32[$4_1 + 4 >> 2];
   $35 = HEAPF32[$4_1 >> 2];
   $13_1 = Math_fround(-3402823466385288598117041.0e14);
   while (1) {
    $12_1 = HEAPF32[$0 >> 2];
    $15_1 = HEAPF32[$0 + 4 >> 2];
    $17_1 = HEAPF32[$0 + 8 >> 2];
    $12_1 = Math_fround(Math_fround(Math_fround($25 * Math_fround(Math_fround(Math_fround($12_1 * $35) + Math_fround($15_1 * $34)) + Math_fround($17_1 * $33_1))) + Math_fround($24_1 * Math_fround(Math_fround(Math_fround($12_1 * $32) + Math_fround($15_1 * $30)) + Math_fround($17_1 * $29_1)))) + Math_fround($21 * Math_fround(Math_fround(Math_fround($12_1 * $31_1) + Math_fround($15_1 * $28_1)) + Math_fround($17_1 * $27_1))));
    $10 = $12_1 > $13_1;
    $13_1 = $10 ? $12_1 : $13_1;
    $22_1 = $10 ? $11 : $22_1;
    $0 = $0 + 36 | 0;
    $11 = $11 + 1 | 0;
    if (($11 | 0) < ($14 | 0)) {
     continue
    }
    break;
   };
  }
  $0 = HEAP32[$7_1 + 4 >> 2];
  if (($0 | 0) <= -1) {
   if (HEAP32[$7_1 + 8 >> 2] <= -1) {
    $10 = HEAP32[$7_1 + 12 >> 2];
    if ($10) {
     if (HEAPU8[$7_1 + 16 | 0]) {
      $80($10)
     }
     HEAP32[$7_1 + 12 >> 2] = 0;
    }
    HEAP8[$7_1 + 16 | 0] = 1;
    HEAP32[$7_1 + 8 >> 2] = 0;
    HEAP32[$7_1 + 12 >> 2] = 0;
   }
   $11 = $0 << 4;
   while (1) {
    $18_1 = HEAP32[$16_1 + 4 >> 2];
    $10 = HEAP32[$7_1 + 12 >> 2] + $11 | 0;
    HEAP32[$10 >> 2] = HEAP32[$16_1 >> 2];
    HEAP32[$10 + 4 >> 2] = $18_1;
    $14 = $16_1 + 8 | 0;
    $18_1 = HEAP32[$14 + 4 >> 2];
    $10 = $10 + 8 | 0;
    HEAP32[$10 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$10 + 4 >> 2] = $18_1;
    $11 = $11 + 16 | 0;
    $10 = $0 + 1 | 0;
    $14 = $10 >>> 0 >= $0 >>> 0;
    $0 = $10;
    if ($14) {
     continue
    }
    break;
   };
  }
  HEAP32[$7_1 + 4 >> 2] = 0;
  $0 = HEAP32[$2_1 + 36 >> 2] + Math_imul($22_1, 36) | 0;
  $26_1 = HEAP32[$0 + 4 >> 2];
  if (($26_1 | 0) >= 1) {
   $36_1 = $0 + 12 | 0;
   $11 = 0;
   $10 = 0;
   while (1) {
    $0 = HEAP32[$2_1 + 16 >> 2] + (HEAP32[HEAP32[$36_1 >> 2] + ($10 << 2) >> 2] << 4) | 0;
    $13_1 = HEAPF32[$0 >> 2];
    $12_1 = HEAPF32[$0 + 4 >> 2];
    $15_1 = HEAPF32[$0 + 8 >> 2];
    $17_1 = Math_fround(Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$4_1 + 32 >> 2]) + Math_fround($12_1 * HEAPF32[$4_1 + 36 >> 2])) + Math_fround($15_1 * HEAPF32[$4_1 + 40 >> 2])) + HEAPF32[$4_1 + 56 >> 2]);
    $21 = Math_fround(Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$4_1 + 16 >> 2]) + Math_fround($12_1 * HEAPF32[$4_1 + 20 >> 2])) + Math_fround($15_1 * HEAPF32[$4_1 + 24 >> 2])) + HEAPF32[$4_1 + 52 >> 2]);
    $13_1 = Math_fround(Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$4_1 >> 2]) + Math_fround($12_1 * HEAPF32[$4_1 + 4 >> 2])) + Math_fround($15_1 * HEAPF32[$4_1 + 8 >> 2])) + HEAPF32[$4_1 + 48 >> 2]);
    label$10 : {
     if (HEAP32[$7_1 + 8 >> 2] != ($11 | 0)) {
      break label$10
     }
     $14 = $11 ? $11 << 1 : 1;
     if (($11 | 0) >= ($14 | 0)) {
      break label$10
     }
     label$11 : {
      if (!$14) {
       $18_1 = 0;
       break label$11;
      }
      $18_1 = $79($14 << 4);
      $11 = HEAP32[$7_1 + 4 >> 2];
     }
     if (($11 | 0) >= 1) {
      $0 = 0;
      while (1) {
       $20 = HEAP32[$7_1 + 12 >> 2] + $0 | 0;
       $23_1 = HEAP32[$20 + 4 >> 2];
       $19_1 = $0 + $18_1 | 0;
       HEAP32[$19_1 >> 2] = HEAP32[$20 >> 2];
       HEAP32[$19_1 + 4 >> 2] = $23_1;
       $20 = $20 + 8 | 0;
       $23_1 = HEAP32[$20 + 4 >> 2];
       $19_1 = $19_1 + 8 | 0;
       HEAP32[$19_1 >> 2] = HEAP32[$20 >> 2];
       HEAP32[$19_1 + 4 >> 2] = $23_1;
       $0 = $0 + 16 | 0;
       $11 = $11 + -1 | 0;
       if ($11) {
        continue
       }
       break;
      };
     }
     $0 = HEAP32[$7_1 + 12 >> 2];
     if ($0) {
      if (HEAPU8[$7_1 + 16 | 0]) {
       $80($0)
      }
      HEAP32[$7_1 + 12 >> 2] = 0;
     }
     HEAP32[$7_1 + 12 >> 2] = $18_1;
     HEAP8[$7_1 + 16 | 0] = 1;
     HEAP32[$7_1 + 8 >> 2] = $14;
     $11 = HEAP32[$7_1 + 4 >> 2];
    }
    $0 = HEAP32[$7_1 + 12 >> 2] + ($11 << 4) | 0;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAPF32[$0 + 8 >> 2] = $17_1;
    HEAPF32[$0 + 4 >> 2] = $21;
    HEAPF32[$0 >> 2] = $13_1;
    $11 = HEAP32[$7_1 + 4 >> 2] + 1 | 0;
    HEAP32[$7_1 + 4 >> 2] = $11;
    $10 = $10 + 1 | 0;
    if (($10 | 0) != ($26_1 | 0)) {
     continue
    }
    break;
   };
  }
  if (($22_1 | 0) > -1) {
   $576($16_1 + 16 | 0, $1_1, $3_1, $7_1, $8_1, $5_1, $6_1, $9_1)
  }
  global$0 = $16_1 + 32 | 0;
 }
 
 function $579($0, $1_1, $2_1, $3_1) {
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $3_1;
  HEAP32[$0 >> 2] = 13328;
  return $0;
 }
 
 function $580($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0);
  $6_1 = global$0 - 288 | 0;
  global$0 = $6_1;
  $552(HEAP32[$0 + 4 >> 2]);
  $9_1 = HEAPF32[$1_1 + 52 >> 2];
  $10 = HEAPF32[$2_1 + 52 >> 2];
  $12_1 = HEAPF32[$3_1 + 52 >> 2];
  $14 = HEAPF32[$4_1 + 52 >> 2];
  $7_1 = $1_1 + 56 | 0;
  $15_1 = HEAPF32[$7_1 >> 2];
  $16_1 = HEAPF32[$2_1 + 56 >> 2];
  $11 = $3_1 + 56 | 0;
  $19_1 = HEAPF32[$11 >> 2];
  $20 = HEAPF32[$4_1 + 56 >> 2];
  $21 = HEAPF32[$1_1 + 48 >> 2];
  $22_1 = HEAPF32[$2_1 + 48 >> 2];
  $23_1 = HEAPF32[$3_1 + 48 >> 2];
  $24_1 = HEAPF32[$4_1 + 48 >> 2];
  HEAP8[$6_1 + 264 | 0] = 0;
  HEAP32[$6_1 + 260 >> 2] = 1566444395;
  HEAP32[$6_1 + 224 >> 2] = 13380;
  $18_1 = $560($6_1 + 144 | 0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 4 >> 2], 0);
  $8_1 = $1_1 + 8 | 0;
  $13_1 = HEAP32[$8_1 + 4 >> 2];
  $0 = $6_1 + 16 | 0;
  HEAP32[$0 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $13_1;
  $8_1 = $1_1 + 24 | 0;
  $13_1 = HEAP32[$8_1 + 4 >> 2];
  $0 = $6_1 + 32 | 0;
  HEAP32[$0 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $13_1;
  $8_1 = $1_1 + 40 | 0;
  $13_1 = HEAP32[$8_1 + 4 >> 2];
  $0 = $6_1 + 48 | 0;
  HEAP32[$0 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $13_1;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0 = $6_1 - -64 | 0;
  HEAP32[$0 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $8_1;
  $7_1 = $3_1 + 8 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0 = $6_1 + 80 | 0;
  HEAP32[$0 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $8_1;
  HEAP32[$6_1 + 136 >> 2] = 1566444395;
  $0 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$6_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 12 >> 2] = $0;
  $0 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$6_1 + 24 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$6_1 + 28 >> 2] = $0;
  $0 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$6_1 + 40 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$6_1 + 44 >> 2] = $0;
  $0 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$6_1 + 56 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$6_1 + 60 >> 2] = $0;
  $0 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$6_1 + 72 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 76 >> 2] = $0;
  $7_1 = $3_1 + 24 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0 = $6_1 + 96 | 0;
  HEAP32[$0 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $8_1;
  $7_1 = HEAP32[$3_1 + 20 >> 2];
  $0 = $6_1 + 88 | 0;
  HEAP32[$0 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$0 + 4 >> 2] = $7_1;
  $7_1 = $3_1 + 40 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0 = $6_1 + 112 | 0;
  HEAP32[$0 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $8_1;
  $7_1 = HEAP32[$3_1 + 36 >> 2];
  $0 = $6_1 + 104 | 0;
  HEAP32[$0 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$0 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$11 + 4 >> 2];
  $0 = $6_1 + 128 | 0;
  HEAP32[$0 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$0 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 52 >> 2];
  $0 = $6_1 + 120 | 0;
  HEAP32[$0 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$0 + 4 >> 2] = $7_1;
  $562($18_1, $6_1 + 8 | 0, $6_1 + 224 | 0, 0, 0);
  $7_1 = $6_1 + 252 | 0;
  $11 = HEAP32[$7_1 + 4 >> 2];
  $0 = $6_1 + 280 | 0;
  HEAP32[$0 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $11;
  $0 = HEAP32[$6_1 + 248 >> 2];
  HEAP32[$6_1 + 272 >> 2] = HEAP32[$6_1 + 244 >> 2];
  HEAP32[$6_1 + 276 >> 2] = $0;
  $7_1 = 0;
  label$1 : {
   if (!HEAPU8[$6_1 + 264 | 0]) {
    break label$1
   }
   $15_1 = Math_fround(Math_fround($16_1 - $15_1) - Math_fround($20 - $19_1));
   $14 = Math_fround(Math_fround($10 - $9_1) - Math_fround($14 - $12_1));
   $16_1 = Math_fround(Math_fround($22_1 - $21) - Math_fround($24_1 - $23_1));
   $0 = HEAP32[$6_1 + 232 >> 2];
   $8_1 = HEAP32[$6_1 + 236 >> 2];
   $13_1 = HEAP32[$6_1 + 228 >> 2];
   $12_1 = HEAPF32[$6_1 + 260 >> 2];
   label$3 : {
    label$4 : {
     if (!($12_1 > Math_fround(1.0000000474974513e-03))) {
      $9_1 = Math_fround(0.0);
      $12_1 = HEAPF32[$6_1 + 240 >> 2];
      break label$4;
     }
     $11 = $6_1 + 244 | 0;
     $17_1 = 33;
     $10 = Math_fround(0.0);
     while (1) {
      $17_1 = $17_1 + -1 | 0;
      $7_1 = 0;
      if (!$17_1) {
       break label$1
      }
      $9_1 = Math_fround($10 - Math_fround($12_1 / Math_fround(Math_fround($15_1 * (wasm2js_scratch_store_i32(0, $8_1), wasm2js_scratch_load_f32())) + Math_fround(Math_fround($14 * (wasm2js_scratch_store_i32(0, $0), wasm2js_scratch_load_f32())) + Math_fround($16_1 * (wasm2js_scratch_store_i32(0, $13_1), wasm2js_scratch_load_f32()))))));
      $7_1 = 0;
      if ($9_1 <= $10) {
       break label$1
      }
      $7_1 = 0;
      if ($9_1 < Math_fround(0.0)) {
       break label$1
      }
      $7_1 = 0;
      if ($9_1 > Math_fround(1.0)) {
       break label$1
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] >> 2]]($5_1, $9_1);
      $10 = Math_fround(Math_fround(1.0) - $9_1);
      HEAPF32[$6_1 + 56 >> 2] = Math_fround($10 * HEAPF32[$1_1 + 48 >> 2]) + Math_fround($9_1 * HEAPF32[$2_1 + 48 >> 2]);
      HEAPF32[$6_1 + 60 >> 2] = Math_fround($10 * HEAPF32[$1_1 + 52 >> 2]) + Math_fround($9_1 * HEAPF32[$2_1 + 52 >> 2]);
      HEAPF32[$6_1 + 64 >> 2] = Math_fround($10 * HEAPF32[$1_1 + 56 >> 2]) + Math_fround($9_1 * HEAPF32[$2_1 + 56 >> 2]);
      HEAPF32[$6_1 + 120 >> 2] = Math_fround($10 * HEAPF32[$3_1 + 48 >> 2]) + Math_fround($9_1 * HEAPF32[$4_1 + 48 >> 2]);
      HEAPF32[$6_1 + 124 >> 2] = Math_fround($10 * HEAPF32[$3_1 + 52 >> 2]) + Math_fround($9_1 * HEAPF32[$4_1 + 52 >> 2]);
      HEAPF32[$6_1 + 128 >> 2] = Math_fround($10 * HEAPF32[$3_1 + 56 >> 2]) + Math_fround($9_1 * HEAPF32[$4_1 + 56 >> 2]);
      $562($18_1, $6_1 + 8 | 0, $6_1 + 224 | 0, 0, 0);
      $7_1 = 0;
      if (!HEAPU8[$6_1 + 264 | 0]) {
       break label$1
      }
      $12_1 = HEAPF32[$6_1 + 260 >> 2];
      if (!!($12_1 < Math_fround(0.0))) {
       HEAPF32[$5_1 + 164 >> 2] = $9_1;
       $0 = HEAP32[$6_1 + 232 >> 2];
       HEAP32[$5_1 + 132 >> 2] = HEAP32[$6_1 + 228 >> 2];
       HEAP32[$5_1 + 136 >> 2] = $0;
       $1_1 = HEAP32[$6_1 + 240 >> 2];
       $0 = $5_1 + 140 | 0;
       HEAP32[$0 >> 2] = HEAP32[$6_1 + 236 >> 2];
       HEAP32[$0 + 4 >> 2] = $1_1;
       $0 = HEAP32[$11 + 4 >> 2];
       HEAP32[$5_1 + 148 >> 2] = HEAP32[$11 >> 2];
       HEAP32[$5_1 + 152 >> 2] = $0;
       $1_1 = $11 + 8 | 0;
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       $0 = $5_1 + 156 | 0;
       HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0 + 4 >> 2] = $2_1;
       break label$3;
      }
      $7_1 = $11 + 8 | 0;
      $8_1 = HEAP32[$7_1 + 4 >> 2];
      $0 = $6_1 + 280 | 0;
      HEAP32[$0 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$0 + 4 >> 2] = $8_1;
      $0 = HEAP32[$11 + 4 >> 2];
      HEAP32[$6_1 + 272 >> 2] = HEAP32[$11 >> 2];
      HEAP32[$6_1 + 276 >> 2] = $0;
      $13_1 = HEAP32[$6_1 + 228 >> 2];
      $0 = HEAP32[$6_1 + 232 >> 2];
      $8_1 = HEAP32[$6_1 + 236 >> 2];
      $10 = $9_1;
      if ($12_1 > Math_fround(1.0000000474974513e-03)) {
       continue
      }
      break;
     };
     $12_1 = HEAPF32[$6_1 + 240 >> 2];
    }
    $7_1 = 0;
    if (Math_fround(Math_fround($15_1 * (wasm2js_scratch_store_i32(0, $8_1), wasm2js_scratch_load_f32())) + Math_fround(Math_fround($14 * (wasm2js_scratch_store_i32(0, $0), wasm2js_scratch_load_f32())) + Math_fround($16_1 * (wasm2js_scratch_store_i32(0, $13_1), wasm2js_scratch_load_f32())))) >= Math_fround(-HEAPF32[$5_1 + 172 >> 2])) {
     break label$1
    }
    HEAP32[$5_1 + 132 >> 2] = $13_1;
    HEAPF32[$5_1 + 164 >> 2] = $9_1;
    $1_1 = HEAP32[$6_1 + 276 >> 2];
    HEAP32[$5_1 + 148 >> 2] = HEAP32[$6_1 + 272 >> 2];
    HEAP32[$5_1 + 152 >> 2] = $1_1;
    HEAPF32[$5_1 + 144 >> 2] = $12_1;
    HEAP32[$5_1 + 140 >> 2] = $8_1;
    HEAP32[$5_1 + 136 >> 2] = $0;
    $1_1 = $6_1 + 280 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0 = $5_1 + 156 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0 + 4 >> 2] = $2_1;
   }
   $7_1 = 1;
  }
  global$0 = $6_1 + 288 | 0;
  return $7_1 | 0;
 }
 
 function $585($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0;
  if (!!(HEAPF32[$0 + 36 >> 2] > $3_1)) {
   HEAP8[$0 + 40 | 0] = 1;
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0 + 8 >> 2] = $4_1;
   $1_1 = $1_1 + 8 | 0;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   $4_1 = $0 + 12 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$0 + 20 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$0 + 24 >> 2] = $1_1;
   $2_1 = $2_1 + 8 | 0;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $0 + 28 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   HEAPF32[$0 + 36 >> 2] = $3_1;
  }
 }
 
 function $586($0, $1_1) {
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 3;
  HEAP32[$0 >> 2] = 13440;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$0 + 8 >> 2] = $1_1;
 }
 
 function $589($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 13460;
  label$1 : {
   if (!HEAPU8[$0 + 52 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 56 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  $1_1 = HEAP32[$0 + 44 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 48 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 44 >> 2] = 0;
  }
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 + 48 | 0] = 1;
  $1_1 = HEAP32[$0 + 24 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 28 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 24 >> 2] = 0;
  }
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP8[$0 + 28 | 0] = 1;
  return $0 | 0;
 }
 
 function $590($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 13460;
  label$1 : {
   if (!HEAPU8[$0 + 52 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 56 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  $1_1 = HEAP32[$0 + 44 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 48 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 44 >> 2] = 0;
  }
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 + 48 | 0] = 1;
  $1_1 = HEAP32[$0 + 24 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 28 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 24 >> 2] = 0;
  }
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP8[$0 + 28 | 0] = 1;
  $37($0);
 }
 
 function $591($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = 0, $21 = 0, $22_1 = Math_fround(0), $23_1 = 0, $24_1 = Math_fround(0), $25 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32 = 0, $33_1 = Math_fround(0), $34 = 0, $35 = 0, $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = 0, $47 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = 0, $55_1 = Math_fround(0), $56_1 = Math_fround(0), $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = Math_fround(0), $69_1 = 0, $70_1 = 0, $71_1 = 0;
  $6_1 = global$0 - 928 | 0;
  global$0 = $6_1;
  $5_1 = HEAP32[$0 + 56 >> 2];
  if (!$5_1) {
   $5_1 = HEAP32[$0 + 4 >> 2];
   $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2]]($5_1, HEAP32[$1_1 + 8 >> 2], HEAP32[$2_1 + 8 >> 2]) | 0;
   HEAP8[$0 + 52 | 0] = 1;
   HEAP32[$0 + 56 >> 2] = $5_1;
  }
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $13_1 = HEAP32[$2_1 + 4 >> 2];
  label$2 : {
   label$3 : {
    $19_1 = HEAP32[$1_1 + 4 >> 2];
    $11 = HEAP32[$19_1 + 4 >> 2] + -8 | 0;
    if ($11 >>> 0 > 2) {
     break label$3
    }
    label$4 : {
     switch ($11 - 1 | 0) {
     case 1:
      $11 = HEAP32[$13_1 + 4 >> 2] + -8 | 0;
      if ($11 >>> 0 > 2) {
       break label$3
      }
      label$6 : {
       switch ($11 - 1 | 0) {
       case 1:
        $3_1 = $19_1 + 32 | 0;
        $0 = HEAP32[$19_1 + 56 >> 2];
        $40_1 = HEAPF32[$3_1 + ($0 << 2) >> 2];
        $7_1 = HEAPF32[$3_1 + (($0 + 2 | 0) % 3 << 2) >> 2];
        $11 = $13_1 + 32 | 0;
        $3_1 = HEAP32[$13_1 + 56 >> 2];
        $8_1 = HEAPF32[$5_1 + 784 >> 2];
        $7_1 = $592($6_1 + 432 | 0, $6_1 + 8 | 0, $40_1, $7_1, HEAPF32[$11 + ($3_1 << 2) >> 2], HEAPF32[$11 + (($3_1 + 2 | 0) % 3 << 2) >> 2], $0, $3_1, HEAP32[$1_1 + 12 >> 2], HEAP32[$2_1 + 12 >> 2], $8_1);
        if (!!($7_1 < $8_1)) {
         FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $6_1 + 432 | 0, $6_1 + 8 | 0, $7_1)
        }
        $0 = HEAP32[$4_1 + 4 >> 2];
        if (!HEAP32[$0 + 780 >> 2]) {
         break label$2
        }
        $1_1 = HEAP32[$0 + 772 >> 2];
        $2_1 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2];
        if (($1_1 | 0) != ($2_1 | 0)) {
         $219($0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0, $2_1 + 4 | 0);
         break label$2;
        }
        $219($0, $1_1 + 4 | 0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0);
        break label$2;
       case 0:
        break label$3;
       default:
        break label$6;
       };
      }
      $3_1 = $19_1 + 32 | 0;
      $0 = HEAP32[$19_1 + 56 >> 2];
      $8_1 = HEAPF32[$5_1 + 784 >> 2];
      $7_1 = $592($6_1 + 432 | 0, $6_1 + 8 | 0, HEAPF32[$3_1 + ($0 << 2) >> 2], HEAPF32[$3_1 + (($0 + 2 | 0) % 3 << 2) >> 2], Math_fround(0.0), Math_fround(HEAPF32[$13_1 + 32 >> 2] * HEAPF32[$13_1 + 16 >> 2]), $0, 1, HEAP32[$1_1 + 12 >> 2], HEAP32[$2_1 + 12 >> 2], $8_1);
      if (!!($7_1 < $8_1)) {
       FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $6_1 + 432 | 0, $6_1 + 8 | 0, $7_1)
      }
      $0 = HEAP32[$4_1 + 4 >> 2];
      if (!HEAP32[$0 + 780 >> 2]) {
       break label$2
      }
      $1_1 = HEAP32[$0 + 772 >> 2];
      $2_1 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2];
      if (($1_1 | 0) != ($2_1 | 0)) {
       $219($0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0, $2_1 + 4 | 0);
       break label$2;
      }
      $219($0, $1_1 + 4 | 0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0);
      break label$2;
     case 0:
      break label$3;
     default:
      break label$4;
     };
    }
    if (HEAP32[$13_1 + 4 >> 2] != 10) {
     break label$3
    }
    $3_1 = $13_1 + 32 | 0;
    $0 = HEAP32[$13_1 + 56 >> 2];
    $8_1 = HEAPF32[$5_1 + 784 >> 2];
    $7_1 = $592($6_1 + 432 | 0, $6_1 + 8 | 0, Math_fround(0.0), Math_fround(HEAPF32[$19_1 + 32 >> 2] * HEAPF32[$19_1 + 16 >> 2]), HEAPF32[$3_1 + ($0 << 2) >> 2], HEAPF32[$3_1 + (($0 + 2 | 0) % 3 << 2) >> 2], 1, $0, HEAP32[$1_1 + 12 >> 2], HEAP32[$2_1 + 12 >> 2], $8_1);
    if (!!($7_1 < $8_1)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $6_1 + 432 | 0, $6_1 + 8 | 0, $7_1)
    }
    $0 = HEAP32[$4_1 + 4 >> 2];
    if (!HEAP32[$0 + 780 >> 2]) {
     break label$2
    }
    $1_1 = HEAP32[$0 + 772 >> 2];
    $2_1 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2];
    if (($1_1 | 0) != ($2_1 | 0)) {
     $219($0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0, $2_1 + 4 | 0);
     break label$2;
    }
    $219($0, $1_1 + 4 | 0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0);
    break label$2;
   }
   HEAP32[$6_1 + 920 >> 2] = 1566444395;
   HEAP8[$6_1 + 764 | 0] = 0;
   HEAP32[$6_1 + 740 >> 2] = 953267991;
   $21 = $560($6_1 + 352 | 0, $19_1, $13_1, $6_1 + 432 | 0, HEAP32[$0 + 8 >> 2]);
   HEAP32[$21 + 32 >> 2] = $13_1;
   HEAP32[$21 + 28 >> 2] = $19_1;
   $8_1 = Math_fround(Math_fround(Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$19_1 >> 2] + 48 >> 2]]($19_1)) + Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$13_1 >> 2] + 48 >> 2]]($13_1))) + HEAPF32[HEAP32[$0 + 56 >> 2] + 784 >> 2]) + HEAPF32[$4_1 + 32 >> 2]);
   HEAPF32[$6_1 + 920 >> 2] = $8_1 * $8_1;
   $5_1 = HEAP32[$1_1 + 12 >> 2];
   $11 = $5_1 + 8 | 0;
   $17_1 = HEAP32[$11 + 4 >> 2];
   $16_1 = $6_1 + 800 | 0;
   HEAP32[$16_1 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$16_1 + 4 >> 2] = $17_1;
   $11 = HEAP32[$5_1 >> 2];
   $17_1 = HEAP32[$5_1 + 4 >> 2];
   $16_1 = $5_1 + 24 | 0;
   $15_1 = HEAP32[$16_1 + 4 >> 2];
   $20 = $6_1 + 816 | 0;
   HEAP32[$20 >> 2] = HEAP32[$16_1 >> 2];
   HEAP32[$20 + 4 >> 2] = $15_1;
   $16_1 = HEAP32[$5_1 + 16 >> 2];
   $15_1 = HEAP32[$5_1 + 20 >> 2];
   $20 = $5_1 + 40 | 0;
   $23_1 = HEAP32[$20 + 4 >> 2];
   $32 = $6_1 + 832 | 0;
   HEAP32[$32 >> 2] = HEAP32[$20 >> 2];
   HEAP32[$32 + 4 >> 2] = $23_1;
   $20 = HEAP32[$5_1 + 32 >> 2];
   $23_1 = HEAP32[$5_1 + 36 >> 2];
   $32 = $5_1 + 56 | 0;
   $31_1 = HEAP32[$32 + 4 >> 2];
   $25 = $6_1 + 848 | 0;
   HEAP32[$25 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$25 + 4 >> 2] = $31_1;
   HEAP32[$6_1 + 792 >> 2] = $11;
   HEAP32[$6_1 + 796 >> 2] = $17_1;
   HEAP32[$6_1 + 808 >> 2] = $16_1;
   HEAP32[$6_1 + 812 >> 2] = $15_1;
   HEAP32[$6_1 + 824 >> 2] = $20;
   HEAP32[$6_1 + 828 >> 2] = $23_1;
   $11 = HEAP32[$5_1 + 52 >> 2];
   HEAP32[$6_1 + 840 >> 2] = HEAP32[$5_1 + 48 >> 2];
   HEAP32[$6_1 + 844 >> 2] = $11;
   $5_1 = HEAP32[$2_1 + 12 >> 2];
   $11 = $5_1 + 8 | 0;
   $17_1 = HEAP32[$11 + 4 >> 2];
   $16_1 = $6_1 + 864 | 0;
   HEAP32[$16_1 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$16_1 + 4 >> 2] = $17_1;
   $11 = HEAP32[$5_1 + 4 >> 2];
   HEAP32[$6_1 + 856 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$6_1 + 860 >> 2] = $11;
   $17_1 = HEAP32[$5_1 + 20 >> 2];
   $11 = $6_1 + 872 | 0;
   HEAP32[$11 >> 2] = HEAP32[$5_1 + 16 >> 2];
   HEAP32[$11 + 4 >> 2] = $17_1;
   $17_1 = $5_1 + 24 | 0;
   $16_1 = HEAP32[$17_1 + 4 >> 2];
   $15_1 = $6_1 + 880 | 0;
   HEAP32[$15_1 >> 2] = HEAP32[$17_1 >> 2];
   HEAP32[$15_1 + 4 >> 2] = $16_1;
   $17_1 = $5_1 + 40 | 0;
   $16_1 = HEAP32[$17_1 + 4 >> 2];
   $15_1 = $6_1 + 896 | 0;
   HEAP32[$15_1 >> 2] = HEAP32[$17_1 >> 2];
   HEAP32[$15_1 + 4 >> 2] = $16_1;
   $16_1 = HEAP32[$5_1 + 36 >> 2];
   $17_1 = $6_1 + 888 | 0;
   $15_1 = $17_1;
   HEAP32[$15_1 >> 2] = HEAP32[$5_1 + 32 >> 2];
   HEAP32[$15_1 + 4 >> 2] = $16_1;
   $15_1 = HEAP32[$5_1 + 52 >> 2];
   $16_1 = $6_1 + 904 | 0;
   HEAP32[$16_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
   HEAP32[$16_1 + 4 >> 2] = $15_1;
   $5_1 = $5_1 + 56 | 0;
   $15_1 = HEAP32[$5_1 + 4 >> 2];
   $20 = $6_1 + 912 | 0;
   HEAP32[$20 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$20 + 4 >> 2] = $15_1;
   label$14 : {
    $5_1 = HEAP32[$19_1 + 4 >> 2];
    if (($5_1 | 0) > 6) {
     break label$14
    }
    $15_1 = HEAP32[$13_1 + 4 >> 2];
    if (($15_1 | 0) > 6) {
     break label$14
    }
    HEAP32[$6_1 + 344 >> 2] = 13580;
    $8_1 = Math_fround(0.0);
    if ($5_1) {
     $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$19_1 >> 2] + 48 >> 2]]($19_1));
     $15_1 = HEAP32[$13_1 + 4 >> 2];
    }
    if ($15_1) {
     $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$13_1 >> 2] + 48 >> 2]]($13_1))
    }
    HEAP8[$6_1 + 44 | 0] = 0;
    HEAPF32[$6_1 + 36 >> 2] = $7_1;
    HEAPF32[$6_1 + 32 >> 2] = $8_1;
    HEAP32[$6_1 + 12 >> 2] = $4_1;
    HEAP32[$6_1 + 8 >> 2] = 13756;
    if (!HEAP32[$19_1 + 56 >> 2]) {
     break label$14
    }
    if (HEAP32[$13_1 + 56 >> 2]) {
     $7_1 = HEAPF32[HEAP32[$0 + 56 >> 2] + 784 >> 2];
     label$18 : {
      label$19 : {
       if (HEAPU8[$3_1 + 24 | 0]) {
        $8_1 = Math_fround(-1000000015047466219876688.0e6);
        if ($575(HEAP32[$19_1 + 56 >> 2], HEAP32[$13_1 + 56 >> 2], HEAP32[$1_1 + 12 >> 2], HEAP32[$2_1 + 12 >> 2], $6_1 + 248 | 0, $4_1)) {
         break label$19
        }
        break label$18;
       }
       $562($21, $6_1 + 792 | 0, $6_1 + 8 | 0, HEAP32[$3_1 + 20 >> 2], 0);
       $3_1 = $6_1 + 24 | 0;
       $5_1 = HEAP32[$3_1 + 4 >> 2];
       $11 = $6_1 + 256 | 0;
       HEAP32[$11 >> 2] = HEAP32[$3_1 >> 2];
       HEAP32[$11 + 4 >> 2] = $5_1;
       $3_1 = HEAP32[$6_1 + 20 >> 2];
       HEAP32[$6_1 + 248 >> 2] = HEAP32[$6_1 + 16 >> 2];
       HEAP32[$6_1 + 252 >> 2] = $3_1;
       $8_1 = HEAPF32[$6_1 + 40 >> 2];
       if (!HEAPU8[$6_1 + 44 | 0] | $8_1 < Math_fround(0.0) ^ 1) {
        break label$18
       }
      }
      $5_1 = HEAP32[$0 + 16 >> 2];
      if (($5_1 | 0) <= -1) {
       if (HEAP32[$0 + 20 >> 2] <= -1) {
        $3_1 = HEAP32[$0 + 24 >> 2];
        if ($3_1) {
         if (HEAPU8[$0 + 28 | 0]) {
          $80($3_1)
         }
         HEAP32[$0 + 24 >> 2] = 0;
        }
        HEAP32[$0 + 20 >> 2] = 0;
        HEAP32[$0 + 24 >> 2] = 0;
        HEAP8[$0 + 28 | 0] = 1;
       }
       $11 = $5_1 << 4;
       while (1) {
        $3_1 = HEAP32[$6_1 + 332 >> 2];
        $21 = HEAP32[$0 + 24 >> 2] + $11 | 0;
        $17_1 = $21;
        HEAP32[$17_1 >> 2] = HEAP32[$6_1 + 328 >> 2];
        HEAP32[$17_1 + 4 >> 2] = $3_1;
        $3_1 = $6_1 + 336 | 0;
        $17_1 = HEAP32[$3_1 + 4 >> 2];
        $21 = $21 + 8 | 0;
        HEAP32[$21 >> 2] = HEAP32[$3_1 >> 2];
        HEAP32[$21 + 4 >> 2] = $17_1;
        $11 = $11 + 16 | 0;
        $3_1 = $5_1 + 1 | 0;
        $21 = $3_1 >>> 0 >= $5_1 >>> 0;
        $5_1 = $3_1;
        if ($21) {
         continue
        }
        break;
       };
      }
      HEAP32[$0 + 16 >> 2] = 0;
      $577($6_1 + 248 | 0, HEAP32[$19_1 + 56 >> 2], HEAP32[$13_1 + 56 >> 2], HEAP32[$1_1 + 12 >> 2], HEAP32[$2_1 + 12 >> 2], Math_fround($8_1 - $7_1), $7_1, $0 + 12 | 0, $0 + 32 | 0, $4_1);
     }
     if (!HEAPU8[$0 + 52 | 0]) {
      break label$2
     }
     $0 = HEAP32[$4_1 + 4 >> 2];
     if (!HEAP32[$0 + 780 >> 2]) {
      break label$2
     }
     $1_1 = HEAP32[$0 + 772 >> 2];
     $2_1 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2];
     if (($1_1 | 0) != ($2_1 | 0)) {
      $219($0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0, $2_1 + 4 | 0);
      break label$2;
     }
     $219($0, $1_1 + 4 | 0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0);
     break label$2;
    }
    if (HEAP32[$13_1 + 4 >> 2] != 1) {
     break label$14
    }
    HEAP32[$6_1 + 252 >> 2] = 0;
    $5_1 = HEAP32[$2_1 + 12 >> 2];
    $12_1 = HEAPF32[$5_1 + 56 >> 2];
    $26_1 = HEAPF32[$5_1 + 36 >> 2];
    $33_1 = HEAPF32[$5_1 + 40 >> 2];
    $36_1 = HEAPF32[$5_1 + 52 >> 2];
    $38 = HEAPF32[$5_1 + 20 >> 2];
    $39_1 = HEAPF32[$5_1 + 24 >> 2];
    $8_1 = HEAPF32[$13_1 + 68 >> 2];
    $7_1 = HEAPF32[$13_1 + 60 >> 2];
    $10 = HEAPF32[$13_1 - -64 >> 2];
    $45_1 = HEAPF32[$5_1 + 32 >> 2];
    $41_1 = HEAPF32[$5_1 + 16 >> 2];
    $22_1 = HEAPF32[$5_1 + 48 >> 2];
    $24_1 = HEAPF32[$5_1 + 8 >> 2];
    $42 = HEAPF32[$5_1 >> 2];
    $43_1 = HEAPF32[$5_1 + 4 >> 2];
    $5_1 = $79(16);
    HEAP32[$6_1 + 256 >> 2] = 1;
    HEAP32[$6_1 + 260 >> 2] = $5_1;
    HEAP8[$6_1 + 264 | 0] = 1;
    HEAPF32[$5_1 >> 2] = $22_1 + Math_fround(Math_fround(Math_fround($7_1 * $42) + Math_fround($10 * $43_1)) + Math_fround($8_1 * $24_1));
    HEAPF32[$5_1 + 4 >> 2] = $36_1 + Math_fround(Math_fround(Math_fround($7_1 * $41_1) + Math_fround($10 * $38)) + Math_fround($8_1 * $39_1));
    HEAP32[$5_1 + 12 >> 2] = 0;
    HEAPF32[$5_1 + 8 >> 2] = $12_1 + Math_fround(Math_fround(Math_fround($7_1 * $45_1) + Math_fround($10 * $26_1)) + Math_fround($8_1 * $33_1));
    $11 = HEAP32[$6_1 + 252 >> 2] + 1 | 0;
    HEAP32[$6_1 + 252 >> 2] = $11;
    $8_1 = HEAPF32[$13_1 + 76 >> 2];
    $5_1 = HEAP32[$2_1 + 12 >> 2];
    $7_1 = HEAPF32[$13_1 + 80 >> 2];
    $10 = HEAPF32[$13_1 + 84 >> 2];
    $12_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$5_1 + 32 >> 2]) + Math_fround($7_1 * HEAPF32[$5_1 + 36 >> 2])) + Math_fround($10 * HEAPF32[$5_1 + 40 >> 2])) + HEAPF32[$5_1 + 56 >> 2]);
    $26_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$5_1 + 16 >> 2]) + Math_fround($7_1 * HEAPF32[$5_1 + 20 >> 2])) + Math_fround($10 * HEAPF32[$5_1 + 24 >> 2])) + HEAPF32[$5_1 + 52 >> 2]);
    $8_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$5_1 >> 2]) + Math_fround($7_1 * HEAPF32[$5_1 + 4 >> 2])) + Math_fround($10 * HEAPF32[$5_1 + 8 >> 2])) + HEAPF32[$5_1 + 48 >> 2]);
    label$27 : {
     if (HEAP32[$6_1 + 256 >> 2] != ($11 | 0)) {
      break label$27
     }
     $17_1 = $11 ? $11 << 1 : 1;
     if (($11 | 0) >= ($17_1 | 0)) {
      break label$27
     }
     label$28 : {
      if (!$17_1) {
       $16_1 = 0;
       break label$28;
      }
      $16_1 = $79($17_1 << 4);
      $11 = HEAP32[$6_1 + 252 >> 2];
     }
     if (($11 | 0) >= 1) {
      $5_1 = 0;
      while (1) {
       $15_1 = HEAP32[$6_1 + 260 >> 2] + $5_1 | 0;
       $20 = HEAP32[$15_1 + 4 >> 2];
       $23_1 = $5_1 + $16_1 | 0;
       HEAP32[$23_1 >> 2] = HEAP32[$15_1 >> 2];
       HEAP32[$23_1 + 4 >> 2] = $20;
       $15_1 = $15_1 + 8 | 0;
       $20 = HEAP32[$15_1 + 4 >> 2];
       $23_1 = $23_1 + 8 | 0;
       HEAP32[$23_1 >> 2] = HEAP32[$15_1 >> 2];
       HEAP32[$23_1 + 4 >> 2] = $20;
       $5_1 = $5_1 + 16 | 0;
       $11 = $11 + -1 | 0;
       if ($11) {
        continue
       }
       break;
      };
     }
     $5_1 = HEAP32[$6_1 + 260 >> 2];
     if ($5_1) {
      if (HEAPU8[$6_1 + 264 | 0]) {
       $80($5_1)
      }
      HEAP32[$6_1 + 260 >> 2] = 0;
     }
     HEAP32[$6_1 + 260 >> 2] = $16_1;
     HEAP8[$6_1 + 264 | 0] = 1;
     HEAP32[$6_1 + 256 >> 2] = $17_1;
     $11 = HEAP32[$6_1 + 252 >> 2];
    }
    $5_1 = HEAP32[$6_1 + 260 >> 2] + ($11 << 4) | 0;
    HEAP32[$5_1 + 12 >> 2] = 0;
    HEAPF32[$5_1 + 8 >> 2] = $12_1;
    HEAPF32[$5_1 + 4 >> 2] = $26_1;
    HEAPF32[$5_1 >> 2] = $8_1;
    $11 = HEAP32[$6_1 + 252 >> 2] + 1 | 0;
    HEAP32[$6_1 + 252 >> 2] = $11;
    $8_1 = HEAPF32[$13_1 + 92 >> 2];
    $2_1 = HEAP32[$2_1 + 12 >> 2];
    $7_1 = HEAPF32[$13_1 + 96 >> 2];
    $10 = HEAPF32[$13_1 + 100 >> 2];
    $12_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$2_1 >> 2]) + Math_fround($7_1 * HEAPF32[$2_1 + 4 >> 2])) + Math_fround($10 * HEAPF32[$2_1 + 8 >> 2])) + HEAPF32[$2_1 + 48 >> 2]);
    $26_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$2_1 + 32 >> 2]) + Math_fround($7_1 * HEAPF32[$2_1 + 36 >> 2])) + Math_fround($10 * HEAPF32[$2_1 + 40 >> 2])) + HEAPF32[$2_1 + 56 >> 2]);
    $8_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$2_1 + 16 >> 2]) + Math_fround($7_1 * HEAPF32[$2_1 + 20 >> 2])) + Math_fround($10 * HEAPF32[$2_1 + 24 >> 2])) + HEAPF32[$2_1 + 52 >> 2]);
    label$34 : {
     if (HEAP32[$6_1 + 256 >> 2] != ($11 | 0)) {
      break label$34
     }
     $2_1 = $11 ? $11 << 1 : 1;
     if (($11 | 0) >= ($2_1 | 0)) {
      break label$34
     }
     label$35 : {
      if (!$2_1) {
       $17_1 = 0;
       break label$35;
      }
      $17_1 = $79($2_1 << 4);
      $11 = HEAP32[$6_1 + 252 >> 2];
     }
     if (($11 | 0) >= 1) {
      $5_1 = 0;
      while (1) {
       $16_1 = HEAP32[$6_1 + 260 >> 2] + $5_1 | 0;
       $15_1 = HEAP32[$16_1 + 4 >> 2];
       $20 = $5_1 + $17_1 | 0;
       HEAP32[$20 >> 2] = HEAP32[$16_1 >> 2];
       HEAP32[$20 + 4 >> 2] = $15_1;
       $16_1 = $16_1 + 8 | 0;
       $15_1 = HEAP32[$16_1 + 4 >> 2];
       $20 = $20 + 8 | 0;
       HEAP32[$20 >> 2] = HEAP32[$16_1 >> 2];
       HEAP32[$20 + 4 >> 2] = $15_1;
       $5_1 = $5_1 + 16 | 0;
       $11 = $11 + -1 | 0;
       if ($11) {
        continue
       }
       break;
      };
     }
     $5_1 = HEAP32[$6_1 + 260 >> 2];
     if ($5_1) {
      if (HEAPU8[$6_1 + 264 | 0]) {
       $80($5_1)
      }
      HEAP32[$6_1 + 260 >> 2] = 0;
     }
     HEAP32[$6_1 + 260 >> 2] = $17_1;
     HEAP8[$6_1 + 264 | 0] = 1;
     HEAP32[$6_1 + 256 >> 2] = $2_1;
     $11 = HEAP32[$6_1 + 252 >> 2];
    }
    $2_1 = HEAP32[$6_1 + 260 >> 2] + ($11 << 4) | 0;
    HEAP32[$2_1 + 12 >> 2] = 0;
    HEAPF32[$2_1 + 8 >> 2] = $26_1;
    HEAPF32[$2_1 + 4 >> 2] = $8_1;
    HEAPF32[$2_1 >> 2] = $12_1;
    HEAP32[$6_1 + 252 >> 2] = HEAP32[$6_1 + 252 >> 2] + 1;
    $8_1 = HEAPF32[HEAP32[$0 + 56 >> 2] + 784 >> 2];
    $562($21, $6_1 + 792 | 0, $6_1 + 344 | 0, HEAP32[$3_1 + 20 >> 2], 0);
    $7_1 = HEAPF32[$21 + 4 >> 2];
    $10 = HEAPF32[$21 + 8 >> 2];
    $12_1 = HEAPF32[$21 + 12 >> 2];
    $26_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($10 * $10)) + Math_fround($12_1 * $12_1));
    if (!!($26_1 > Math_fround(1.1920928955078125e-07))) {
     HEAP32[$6_1 + 340 >> 2] = 0;
     $40_1 = $12_1;
     $12_1 = Math_fround(Math_fround(1.0) / $26_1);
     HEAPF32[$6_1 + 336 >> 2] = $40_1 * $12_1;
     HEAPF32[$6_1 + 332 >> 2] = $10 * $12_1;
     HEAPF32[$6_1 + 328 >> 2] = $7_1 * $12_1;
     $7_1 = Math_fround(Math_fround(HEAPF32[$21 + 56 >> 2] - Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$19_1 >> 2] + 48 >> 2]]($19_1))) - Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$13_1 >> 2] + 48 >> 2]]($13_1)));
     $13_1 = HEAP32[$0 + 36 >> 2];
     if (($13_1 | 0) <= -1) {
      if (HEAP32[$0 + 40 >> 2] <= -1) {
       $2_1 = HEAP32[$0 + 44 >> 2];
       if ($2_1) {
        if (HEAPU8[$0 + 48 | 0]) {
         $80($2_1)
        }
        HEAP32[$0 + 44 >> 2] = 0;
       }
       HEAP32[$0 + 40 >> 2] = 0;
       HEAP32[$0 + 44 >> 2] = 0;
       HEAP8[$0 + 48 | 0] = 1;
      }
      $5_1 = $13_1 << 4;
      while (1) {
       $2_1 = HEAP32[$6_1 + 316 >> 2];
       $3_1 = HEAP32[$0 + 44 >> 2] + $5_1 | 0;
       $11 = $3_1;
       HEAP32[$11 >> 2] = HEAP32[$6_1 + 312 >> 2];
       HEAP32[$11 + 4 >> 2] = $2_1;
       $2_1 = $6_1 + 320 | 0;
       $11 = HEAP32[$2_1 + 4 >> 2];
       $3_1 = $3_1 + 8 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $11;
       $5_1 = $5_1 + 16 | 0;
       $2_1 = $13_1 + 1 | 0;
       $3_1 = $2_1 >>> 0 >= $13_1 >>> 0;
       $13_1 = $2_1;
       if ($3_1) {
        continue
       }
       break;
      };
     }
     HEAP32[$0 + 36 >> 2] = 0;
     $576($6_1 + 328 | 0, HEAP32[$19_1 + 56 >> 2], HEAP32[$1_1 + 12 >> 2], $6_1 + 248 | 0, $0 + 32 | 0, Math_fround($7_1 - $8_1), $8_1, $4_1);
    }
    label$47 : {
     if (!HEAPU8[$0 + 52 | 0]) {
      break label$47
     }
     $0 = HEAP32[$4_1 + 4 >> 2];
     if (!HEAP32[$0 + 780 >> 2]) {
      break label$47
     }
     $1_1 = HEAP32[$0 + 772 >> 2];
     $2_1 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2];
     if (($1_1 | 0) != ($2_1 | 0)) {
      $219($0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0, $2_1 + 4 | 0);
      break label$47;
     }
     $219($0, $1_1 + 4 | 0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0);
    }
    $0 = HEAP32[$6_1 + 260 >> 2];
    if (!$0) {
     break label$2
    }
    if (HEAPU8[$6_1 + 264 | 0]) {
     $80($0)
    }
    HEAP32[$6_1 + 260 >> 2] = 0;
    break label$2;
   }
   $562($21, $6_1 + 792 | 0, $4_1, HEAP32[$3_1 + 20 >> 2], 0);
   label$50 : {
    if (!HEAP32[$0 + 64 >> 2] | HEAP32[HEAP32[$4_1 + 4 >> 2] + 780 >> 2] >= HEAP32[$0 + 68 >> 2]) {
     break label$50
    }
    $8_1 = HEAPF32[$21 + 4 >> 2];
    $7_1 = HEAPF32[$21 + 8 >> 2];
    $10 = HEAPF32[$21 + 12 >> 2];
    $12_1 = Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($7_1 * $7_1)) + Math_fround($10 * $10));
    if (!($12_1 > Math_fround(1.1920928955078125e-07))) {
     break label$50
    }
    $15_1 = $6_1 + 856 | 0;
    $20 = $6_1 + 840 | 0;
    $23_1 = $6_1 + 824 | 0;
    $32 = $6_1 + 808 | 0;
    $40_1 = $7_1;
    $7_1 = Math_fround(Math_fround(1.0) / $12_1);
    $26_1 = Math_fround($40_1 * $7_1);
    $45_1 = Math_fround($8_1 * $7_1);
    $41_1 = Math_fround($10 * $7_1);
    label$51 : {
     if (!!(Math_fround(Math_abs($41_1)) > Math_fround(.7071067690849304))) {
      $8_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($41_1 * $41_1) + Math_fround($26_1 * $26_1)))));
      $7_1 = Math_fround($26_1 * $8_1);
      $8_1 = Math_fround($8_1 * Math_fround(-$41_1));
      $10 = Math_fround(0.0);
      break label$51;
     }
     $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($45_1 * $45_1) + Math_fround($26_1 * $26_1)))));
     $8_1 = Math_fround($45_1 * $7_1);
     $10 = Math_fround($7_1 * Math_fround(-$26_1));
     $7_1 = Math_fround(0.0);
    }
    $12_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$19_1 >> 2] + 16 >> 2]]($19_1));
    $33_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$13_1 >> 2] + 16 >> 2]]($13_1));
    $36_1 = HEAPF32[5848];
    $19_1 = $12_1 < $33_1;
    $5_1 = $19_1 ? $6_1 + 792 | 0 : $15_1;
    $13_1 = $5_1 + 8 | 0;
    $31_1 = HEAP32[$13_1 + 4 >> 2];
    $57_1 = $6_1 + 256 | 0;
    $25 = $57_1;
    HEAP32[$25 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$25 + 4 >> 2] = $31_1;
    $13_1 = $19_1 ? $32 : $11;
    $31_1 = $13_1 + 8 | 0;
    $25 = HEAP32[$31_1 + 4 >> 2];
    $34 = $6_1 + 272 | 0;
    HEAP32[$34 >> 2] = HEAP32[$31_1 >> 2];
    HEAP32[$34 + 4 >> 2] = $25;
    $31_1 = $19_1 ? $23_1 : $17_1;
    $25 = $31_1 + 8 | 0;
    $34 = HEAP32[$25 + 4 >> 2];
    $46_1 = $6_1 + 288 | 0;
    HEAP32[$46_1 >> 2] = HEAP32[$25 >> 2];
    HEAP32[$46_1 + 4 >> 2] = $34;
    $25 = $19_1 ? $20 : $16_1;
    $34 = $25 + 8 | 0;
    $46_1 = HEAP32[$34 + 4 >> 2];
    $54_1 = $6_1 + 304 | 0;
    HEAP32[$54_1 >> 2] = HEAP32[$34 >> 2];
    HEAP32[$54_1 + 4 >> 2] = $46_1;
    $34 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$6_1 + 248 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$6_1 + 252 >> 2] = $34;
    $5_1 = HEAP32[$13_1 + 4 >> 2];
    HEAP32[$6_1 + 264 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$6_1 + 268 >> 2] = $5_1;
    $5_1 = HEAP32[$31_1 + 4 >> 2];
    HEAP32[$6_1 + 280 >> 2] = HEAP32[$31_1 >> 2];
    HEAP32[$6_1 + 284 >> 2] = $5_1;
    $5_1 = HEAP32[$25 + 4 >> 2];
    HEAP32[$6_1 + 296 >> 2] = HEAP32[$25 >> 2];
    HEAP32[$6_1 + 300 >> 2] = $5_1;
    $5_1 = HEAP32[$0 + 64 >> 2];
    if (($5_1 | 0) < 1) {
     break label$50
    }
    $40_1 = $7_1;
    $12_1 = Math_fround(Math_fround(Math_min(Math_fround($36_1 / ($19_1 ? $12_1 : $33_1)), Math_fround(.39269909262657166))) * Math_fround(.5));
    $68_1 = Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($8_1 * $8_1)) + Math_fround($7_1 * $7_1));
    $7_1 = Math_fround($493($12_1) / Math_fround(Math_sqrt($68_1)));
    $33_1 = Math_fround($40_1 * $7_1);
    $36_1 = Math_fround($8_1 * $7_1);
    $38 = Math_fround($10 * $7_1);
    $39_1 = $494($12_1);
    $40_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($41_1 * $41_1) + Math_fround(Math_fround($45_1 * $45_1) + Math_fround($26_1 * $26_1)))));
    $31_1 = $6_1 + 296 | 0;
    $25 = $6_1 + 224 | 0;
    $34 = $6_1 + 208 | 0;
    $46_1 = $6_1 + 280 | 0;
    $54_1 = $6_1 + 192 | 0;
    $58_1 = $6_1 + 264 | 0;
    $59_1 = $6_1 + 176 | 0;
    $60_1 = $6_1 + 160 | 0;
    $61_1 = $6_1 + 144 | 0;
    $62_1 = $6_1 + 128 | 0;
    $63_1 = $6_1 + 112 | 0;
    $64_1 = $6_1 + 96 | 0;
    $65_1 = $6_1 + 80 | 0;
    $66_1 = $6_1 - -64 | 0;
    $67_1 = $6_1 + 48 | 0;
    $13_1 = 0;
    while (1) {
     if (!!($68_1 > Math_fround(1.1920928955078125e-07))) {
      $12_1 = Math_fround(Math_fround(Math_fround(Math_fround(6.2831854820251465) / Math_fround($5_1 | 0)) * Math_fround($13_1 | 0)) * Math_fround(.5));
      $10 = Math_fround($493($12_1) / $40_1);
      $8_1 = Math_fround($41_1 * $10);
      $7_1 = Math_fround($26_1 * $10);
      $10 = Math_fround($45_1 * $10);
      $12_1 = $494($12_1);
      label$55 : {
       if (!!$19_1) {
        $5_1 = HEAP32[$1_1 + 12 >> 2];
        $42 = HEAPF32[$5_1 >> 2];
        $43_1 = HEAPF32[$5_1 + 4 >> 2];
        $47 = HEAPF32[$5_1 + 8 >> 2];
        HEAP32[$6_1 + 804 >> 2] = 0;
        $48_1 = HEAPF32[$5_1 + 36 >> 2];
        $49_1 = HEAPF32[$5_1 + 20 >> 2];
        $50_1 = HEAPF32[$5_1 + 40 >> 2];
        $51_1 = HEAPF32[$5_1 + 24 >> 2];
        $52_1 = HEAPF32[$5_1 + 32 >> 2];
        $53_1 = HEAPF32[$5_1 + 16 >> 2];
        HEAP32[$6_1 + 836 >> 2] = 0;
        HEAP32[$6_1 + 820 >> 2] = 0;
        $27_1 = Math_fround(Math_fround($33_1 * $10) + Math_fround(Math_fround(Math_fround($36_1 * $12_1) - Math_fround($39_1 * $7_1)) - Math_fround($38 * $8_1)));
        $28_1 = Math_fround(Math_fround($33_1 * $8_1) + Math_fround(Math_fround($36_1 * $7_1) + Math_fround(Math_fround($39_1 * $12_1) + Math_fround($38 * $10))));
        $29_1 = Math_fround(Math_fround($36_1 * $8_1) + Math_fround(Math_fround(Math_fround($38 * $12_1) - Math_fround($39_1 * $10)) - Math_fround($33_1 * $7_1)));
        $30 = Math_fround(Math_fround($38 * $7_1) + Math_fround(Math_fround(Math_fround($33_1 * $12_1) - Math_fround($39_1 * $8_1)) - Math_fround($36_1 * $10)));
        $22_1 = Math_fround(Math_fround(Math_fround($8_1 * $27_1) + Math_fround(Math_fround($10 * $28_1) + Math_fround($12_1 * $29_1))) - Math_fround($7_1 * $30));
        $24_1 = Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $28_1) - Math_fround($10 * $29_1)) - Math_fround($7_1 * $27_1)) - Math_fround($8_1 * $30));
        $44_1 = Math_fround(Math_fround(Math_fround($7_1 * $29_1) + Math_fround(Math_fround($8_1 * $28_1) + Math_fround($12_1 * $30))) - Math_fround($10 * $27_1));
        $8_1 = Math_fround(Math_fround(Math_fround($10 * $30) + Math_fround(Math_fround($12_1 * $27_1) + Math_fround($7_1 * $28_1))) - Math_fround($8_1 * $29_1));
        $7_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround($24_1 * $24_1) + Math_fround(Math_fround($44_1 * $44_1) + Math_fround(Math_fround($22_1 * $22_1) + Math_fround($8_1 * $8_1)))));
        $10 = Math_fround($44_1 * $7_1);
        $28_1 = Math_fround($22_1 * $10);
        $12_1 = Math_fround($8_1 * $7_1);
        $29_1 = Math_fround($24_1 * $12_1);
        $27_1 = Math_fround($28_1 - $29_1);
        $30 = Math_fround($8_1 * $10);
        $37_1 = Math_fround($22_1 * $7_1);
        $55_1 = Math_fround($24_1 * $37_1);
        $7_1 = Math_fround($30 + $55_1);
        $37_1 = Math_fround($22_1 * $37_1);
        $56_1 = Math_fround($8_1 * $12_1);
        $8_1 = Math_fround(Math_fround(1.0) - Math_fround($37_1 + $56_1));
        HEAPF32[$6_1 + 832 >> 2] = Math_fround(Math_fround($47 * $27_1) + Math_fround($51_1 * $7_1)) + Math_fround($50_1 * $8_1);
        HEAPF32[$6_1 + 828 >> 2] = Math_fround(Math_fround($27_1 * $43_1) + Math_fround($7_1 * $49_1)) + Math_fround($8_1 * $48_1);
        HEAPF32[$6_1 + 824 >> 2] = Math_fround(Math_fround($27_1 * $42) + Math_fround($7_1 * $53_1)) + Math_fround($8_1 * $52_1);
        $12_1 = Math_fround($22_1 * $12_1);
        $22_1 = Math_fround($24_1 * $10);
        $8_1 = Math_fround($12_1 + $22_1);
        $24_1 = Math_fround($44_1 * $10);
        $7_1 = Math_fround(Math_fround(1.0) - Math_fround($37_1 + $24_1));
        $10 = Math_fround($30 - $55_1);
        HEAPF32[$6_1 + 816 >> 2] = Math_fround(Math_fround($47 * $8_1) + Math_fround($51_1 * $7_1)) + Math_fround($50_1 * $10);
        HEAPF32[$6_1 + 812 >> 2] = Math_fround(Math_fround($8_1 * $43_1) + Math_fround($7_1 * $49_1)) + Math_fround($10 * $48_1);
        HEAPF32[$6_1 + 808 >> 2] = Math_fround(Math_fround($8_1 * $42) + Math_fround($7_1 * $53_1)) + Math_fround($10 * $52_1);
        $8_1 = Math_fround(Math_fround(1.0) - Math_fround($56_1 + $24_1));
        $7_1 = Math_fround($12_1 - $22_1);
        $10 = Math_fround($28_1 + $29_1);
        HEAPF32[$6_1 + 800 >> 2] = Math_fround(Math_fround($47 * $8_1) + Math_fround($51_1 * $7_1)) + Math_fround($50_1 * $10);
        HEAPF32[$6_1 + 796 >> 2] = Math_fround(Math_fround($8_1 * $43_1) + Math_fround($7_1 * $49_1)) + Math_fround($10 * $48_1);
        HEAPF32[$6_1 + 792 >> 2] = Math_fround(Math_fround($8_1 * $42) + Math_fround($7_1 * $53_1)) + Math_fround($10 * $52_1);
        $5_1 = HEAP32[$2_1 + 12 >> 2];
        $14 = HEAP32[$5_1 + 4 >> 2];
        HEAP32[$15_1 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$15_1 + 4 >> 2] = $14;
        $9_1 = $5_1 + 8 | 0;
        $14 = HEAP32[$9_1 + 4 >> 2];
        $18_1 = $15_1 + 8 | 0;
        HEAP32[$18_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$18_1 + 4 >> 2] = $14;
        $9_1 = $5_1 + 24 | 0;
        $14 = HEAP32[$9_1 + 4 >> 2];
        $18_1 = $11 + 8 | 0;
        HEAP32[$18_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$18_1 + 4 >> 2] = $14;
        $9_1 = HEAP32[$5_1 + 20 >> 2];
        HEAP32[$11 >> 2] = HEAP32[$5_1 + 16 >> 2];
        HEAP32[$11 + 4 >> 2] = $9_1;
        $9_1 = $5_1 + 40 | 0;
        $14 = HEAP32[$9_1 + 4 >> 2];
        $18_1 = $17_1 + 8 | 0;
        HEAP32[$18_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$18_1 + 4 >> 2] = $14;
        $9_1 = HEAP32[$5_1 + 36 >> 2];
        HEAP32[$17_1 >> 2] = HEAP32[$5_1 + 32 >> 2];
        HEAP32[$17_1 + 4 >> 2] = $9_1;
        $9_1 = $5_1 + 56 | 0;
        $14 = HEAP32[$9_1 + 4 >> 2];
        $18_1 = $16_1 + 8 | 0;
        HEAP32[$18_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$18_1 + 4 >> 2] = $14;
        $9_1 = HEAP32[$5_1 + 52 >> 2];
        HEAP32[$16_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
        HEAP32[$16_1 + 4 >> 2] = $9_1;
        break label$55;
       }
       $5_1 = HEAP32[$1_1 + 12 >> 2];
       $9_1 = $5_1 + 8 | 0;
       $14 = HEAP32[$9_1 >> 2];
       $9_1 = HEAP32[$9_1 + 4 >> 2];
       $18_1 = HEAP32[$5_1 >> 2];
       $70_1 = HEAP32[$5_1 + 4 >> 2];
       $35 = HEAP32[$5_1 + 20 >> 2];
       HEAP32[$32 >> 2] = HEAP32[$5_1 + 16 >> 2];
       HEAP32[$32 + 4 >> 2] = $35;
       $35 = $5_1 + 24 | 0;
       $71_1 = HEAP32[$35 + 4 >> 2];
       $69_1 = $32 + 8 | 0;
       HEAP32[$69_1 >> 2] = HEAP32[$35 >> 2];
       HEAP32[$69_1 + 4 >> 2] = $71_1;
       $35 = $6_1 + 800 | 0;
       HEAP32[$35 >> 2] = $14;
       HEAP32[$35 + 4 >> 2] = $9_1;
       $9_1 = HEAP32[$5_1 + 36 >> 2];
       HEAP32[$23_1 >> 2] = HEAP32[$5_1 + 32 >> 2];
       HEAP32[$23_1 + 4 >> 2] = $9_1;
       $9_1 = $5_1 + 40 | 0;
       $14 = HEAP32[$9_1 + 4 >> 2];
       $35 = $23_1 + 8 | 0;
       HEAP32[$35 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$35 + 4 >> 2] = $14;
       $9_1 = $5_1 + 56 | 0;
       $14 = HEAP32[$9_1 + 4 >> 2];
       $35 = $20 + 8 | 0;
       HEAP32[$35 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$35 + 4 >> 2] = $14;
       $9_1 = HEAP32[$5_1 + 52 >> 2];
       HEAP32[$20 >> 2] = HEAP32[$5_1 + 48 >> 2];
       HEAP32[$20 + 4 >> 2] = $9_1;
       HEAP32[$6_1 + 792 >> 2] = $18_1;
       HEAP32[$6_1 + 796 >> 2] = $70_1;
       $5_1 = HEAP32[$2_1 + 12 >> 2];
       $42 = HEAPF32[$5_1 + 36 >> 2];
       $43_1 = HEAPF32[$5_1 + 20 >> 2];
       $47 = HEAPF32[$5_1 + 40 >> 2];
       $48_1 = HEAPF32[$5_1 + 24 >> 2];
       $49_1 = HEAPF32[$5_1 + 32 >> 2];
       $50_1 = HEAPF32[$5_1 >> 2];
       $51_1 = HEAPF32[$5_1 + 16 >> 2];
       $52_1 = HEAPF32[$5_1 + 4 >> 2];
       $53_1 = HEAPF32[$5_1 + 8 >> 2];
       HEAP32[$6_1 + 900 >> 2] = 0;
       HEAP32[$6_1 + 884 >> 2] = 0;
       HEAP32[$6_1 + 868 >> 2] = 0;
       $27_1 = Math_fround(Math_fround($33_1 * $10) + Math_fround(Math_fround(Math_fround($36_1 * $12_1) - Math_fround($39_1 * $7_1)) - Math_fround($38 * $8_1)));
       $28_1 = Math_fround(Math_fround($33_1 * $8_1) + Math_fround(Math_fround($36_1 * $7_1) + Math_fround(Math_fround($39_1 * $12_1) + Math_fround($38 * $10))));
       $29_1 = Math_fround(Math_fround($36_1 * $8_1) + Math_fround(Math_fround(Math_fround($38 * $12_1) - Math_fround($39_1 * $10)) - Math_fround($33_1 * $7_1)));
       $30 = Math_fround(Math_fround($38 * $7_1) + Math_fround(Math_fround(Math_fround($33_1 * $12_1) - Math_fround($39_1 * $8_1)) - Math_fround($36_1 * $10)));
       $22_1 = Math_fround(Math_fround(Math_fround($8_1 * $27_1) + Math_fround(Math_fround($10 * $28_1) + Math_fround($12_1 * $29_1))) - Math_fround($7_1 * $30));
       $24_1 = Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $28_1) - Math_fround($10 * $29_1)) - Math_fround($7_1 * $27_1)) - Math_fround($8_1 * $30));
       $44_1 = Math_fround(Math_fround(Math_fround($7_1 * $29_1) + Math_fround(Math_fround($8_1 * $28_1) + Math_fround($12_1 * $30))) - Math_fround($10 * $27_1));
       $8_1 = Math_fround(Math_fround(Math_fround($10 * $30) + Math_fround(Math_fround($12_1 * $27_1) + Math_fround($7_1 * $28_1))) - Math_fround($8_1 * $29_1));
       $7_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround($24_1 * $24_1) + Math_fround(Math_fround($44_1 * $44_1) + Math_fround(Math_fround($22_1 * $22_1) + Math_fround($8_1 * $8_1)))));
       $10 = Math_fround($44_1 * $7_1);
       $28_1 = Math_fround($22_1 * $10);
       $12_1 = Math_fround($8_1 * $7_1);
       $29_1 = Math_fround($24_1 * $12_1);
       $27_1 = Math_fround($28_1 - $29_1);
       $30 = Math_fround($8_1 * $10);
       $37_1 = Math_fround($22_1 * $7_1);
       $55_1 = Math_fround($24_1 * $37_1);
       $7_1 = Math_fround($30 + $55_1);
       $37_1 = Math_fround($22_1 * $37_1);
       $56_1 = Math_fround($8_1 * $12_1);
       $8_1 = Math_fround(Math_fround(1.0) - Math_fround($37_1 + $56_1));
       HEAPF32[$6_1 + 896 >> 2] = Math_fround(Math_fround($53_1 * $27_1) + Math_fround($48_1 * $7_1)) + Math_fround($47 * $8_1);
       HEAPF32[$6_1 + 892 >> 2] = Math_fround(Math_fround($27_1 * $52_1) + Math_fround($7_1 * $43_1)) + Math_fround($8_1 * $42);
       HEAPF32[$6_1 + 888 >> 2] = Math_fround(Math_fround($27_1 * $50_1) + Math_fround($7_1 * $51_1)) + Math_fround($8_1 * $49_1);
       $12_1 = Math_fround($22_1 * $12_1);
       $22_1 = Math_fround($24_1 * $10);
       $8_1 = Math_fround($12_1 + $22_1);
       $24_1 = Math_fround($44_1 * $10);
       $7_1 = Math_fround(Math_fround(1.0) - Math_fround($37_1 + $24_1));
       $10 = Math_fround($30 - $55_1);
       HEAPF32[$6_1 + 880 >> 2] = Math_fround(Math_fround($53_1 * $8_1) + Math_fround($48_1 * $7_1)) + Math_fround($47 * $10);
       HEAPF32[$6_1 + 876 >> 2] = Math_fround(Math_fround($8_1 * $52_1) + Math_fround($7_1 * $43_1)) + Math_fround($10 * $42);
       HEAPF32[$6_1 + 872 >> 2] = Math_fround(Math_fround($8_1 * $50_1) + Math_fround($7_1 * $51_1)) + Math_fround($10 * $49_1);
       $8_1 = Math_fround(Math_fround(1.0) - Math_fround($56_1 + $24_1));
       $7_1 = Math_fround($12_1 - $22_1);
       $10 = Math_fround($28_1 + $29_1);
       HEAPF32[$6_1 + 864 >> 2] = Math_fround(Math_fround($53_1 * $8_1) + Math_fround($48_1 * $7_1)) + Math_fround($47 * $10);
       HEAPF32[$6_1 + 860 >> 2] = Math_fround(Math_fround($8_1 * $52_1) + Math_fround($7_1 * $43_1)) + Math_fround($10 * $42);
       HEAPF32[$6_1 + 856 >> 2] = Math_fround(Math_fround($8_1 * $50_1) + Math_fround($7_1 * $51_1)) + Math_fround($10 * $49_1);
      }
      $5_1 = HEAP32[$6_1 + 796 >> 2];
      HEAP32[$67_1 >> 2] = HEAP32[$6_1 + 792 >> 2];
      HEAP32[$67_1 + 4 >> 2] = $5_1;
      $5_1 = HEAP32[$32 + 4 >> 2];
      HEAP32[$66_1 >> 2] = HEAP32[$32 >> 2];
      HEAP32[$66_1 + 4 >> 2] = $5_1;
      $5_1 = HEAP32[$23_1 + 4 >> 2];
      HEAP32[$65_1 >> 2] = HEAP32[$23_1 >> 2];
      HEAP32[$65_1 + 4 >> 2] = $5_1;
      $5_1 = HEAP32[$20 + 4 >> 2];
      HEAP32[$64_1 >> 2] = HEAP32[$20 >> 2];
      HEAP32[$64_1 + 4 >> 2] = $5_1;
      $5_1 = $6_1 + 800 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      $14 = $67_1 + 8 | 0;
      HEAP32[$14 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$14 + 4 >> 2] = $9_1;
      $5_1 = $32 + 8 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      $14 = $66_1 + 8 | 0;
      HEAP32[$14 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$14 + 4 >> 2] = $9_1;
      $5_1 = $23_1 + 8 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      $14 = $65_1 + 8 | 0;
      HEAP32[$14 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$14 + 4 >> 2] = $9_1;
      $5_1 = $20 + 8 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      $14 = $64_1 + 8 | 0;
      HEAP32[$14 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$14 + 4 >> 2] = $9_1;
      HEAP32[$6_1 + 40 >> 2] = 0;
      HEAP32[$6_1 + 44 >> 2] = $4_1;
      HEAP32[$6_1 + 8 >> 2] = 13940;
      $5_1 = HEAP32[$3_1 + 20 >> 2];
      $9_1 = $15_1 + 8 | 0;
      $14 = HEAP32[$9_1 + 4 >> 2];
      $18_1 = $63_1 + 8 | 0;
      HEAP32[$18_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$18_1 + 4 >> 2] = $14;
      $9_1 = HEAP32[$15_1 + 4 >> 2];
      HEAP32[$63_1 >> 2] = HEAP32[$15_1 >> 2];
      HEAP32[$63_1 + 4 >> 2] = $9_1;
      $9_1 = $11 + 8 | 0;
      $14 = HEAP32[$9_1 + 4 >> 2];
      $18_1 = $62_1 + 8 | 0;
      HEAP32[$18_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$18_1 + 4 >> 2] = $14;
      $9_1 = HEAP32[$11 + 4 >> 2];
      HEAP32[$62_1 >> 2] = HEAP32[$11 >> 2];
      HEAP32[$62_1 + 4 >> 2] = $9_1;
      $9_1 = $17_1 + 8 | 0;
      $14 = HEAP32[$9_1 + 4 >> 2];
      $18_1 = $61_1 + 8 | 0;
      HEAP32[$18_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$18_1 + 4 >> 2] = $14;
      $9_1 = HEAP32[$17_1 + 4 >> 2];
      HEAP32[$61_1 >> 2] = HEAP32[$17_1 >> 2];
      HEAP32[$61_1 + 4 >> 2] = $9_1;
      $9_1 = $16_1 + 8 | 0;
      $14 = HEAP32[$9_1 + 4 >> 2];
      $18_1 = $60_1 + 8 | 0;
      HEAP32[$18_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$18_1 + 4 >> 2] = $14;
      $9_1 = HEAP32[$16_1 + 4 >> 2];
      HEAP32[$60_1 >> 2] = HEAP32[$16_1 >> 2];
      HEAP32[$60_1 + 4 >> 2] = $9_1;
      $9_1 = HEAP32[$57_1 + 4 >> 2];
      $14 = $59_1 + 8 | 0;
      HEAP32[$14 >> 2] = HEAP32[$57_1 >> 2];
      HEAP32[$14 + 4 >> 2] = $9_1;
      $9_1 = HEAP32[$6_1 + 252 >> 2];
      HEAP32[$59_1 >> 2] = HEAP32[$6_1 + 248 >> 2];
      HEAP32[$59_1 + 4 >> 2] = $9_1;
      $9_1 = $58_1 + 8 | 0;
      $14 = HEAP32[$9_1 + 4 >> 2];
      $18_1 = $54_1 + 8 | 0;
      HEAP32[$18_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$18_1 + 4 >> 2] = $14;
      $9_1 = HEAP32[$58_1 + 4 >> 2];
      HEAP32[$54_1 >> 2] = HEAP32[$58_1 >> 2];
      HEAP32[$54_1 + 4 >> 2] = $9_1;
      $9_1 = $46_1 + 8 | 0;
      $14 = HEAP32[$9_1 + 4 >> 2];
      $18_1 = $34 + 8 | 0;
      HEAP32[$18_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$18_1 + 4 >> 2] = $14;
      $9_1 = HEAP32[$46_1 + 4 >> 2];
      HEAP32[$34 >> 2] = HEAP32[$46_1 >> 2];
      HEAP32[$34 + 4 >> 2] = $9_1;
      $9_1 = $31_1 + 8 | 0;
      $14 = HEAP32[$9_1 + 4 >> 2];
      $18_1 = $25 + 8 | 0;
      HEAP32[$18_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$18_1 + 4 >> 2] = $14;
      $9_1 = HEAP32[$31_1 + 4 >> 2];
      HEAP32[$25 >> 2] = HEAP32[$31_1 >> 2];
      HEAP32[$25 + 4 >> 2] = $9_1;
      HEAP32[$6_1 + 244 >> 2] = $5_1;
      HEAP8[$6_1 + 240 | 0] = $19_1;
      $562($21, $6_1 + 792 | 0, $6_1 + 8 | 0, $5_1, 0);
      $5_1 = HEAP32[$0 + 64 >> 2];
     }
     $13_1 = $13_1 + 1 | 0;
     if (($13_1 | 0) < ($5_1 | 0)) {
      continue
     }
     break;
    };
   }
   if (!HEAPU8[$0 + 52 | 0]) {
    break label$2
   }
   $0 = HEAP32[$4_1 + 4 >> 2];
   if (!HEAP32[$0 + 780 >> 2]) {
    break label$2
   }
   $1_1 = HEAP32[$0 + 772 >> 2];
   $2_1 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2];
   if (($1_1 | 0) != ($2_1 | 0)) {
    $219($0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0, $2_1 + 4 | 0);
    break label$2;
   }
   $219($0, $1_1 + 4 | 0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0);
  }
  global$0 = $6_1 + 928 | 0;
 }
 
 function $592($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10) {
  var $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0);
  $7_1 = ($7_1 << 2) + $9_1 | 0;
  $17_1 = HEAPF32[$7_1 >> 2];
  $18_1 = Math_fround(HEAPF32[$9_1 + 48 >> 2] - HEAPF32[$8_1 + 48 >> 2]);
  $21 = HEAPF32[$7_1 + 16 >> 2];
  $22_1 = Math_fround(HEAPF32[$9_1 + 52 >> 2] - HEAPF32[$8_1 + 52 >> 2]);
  $23_1 = HEAPF32[$7_1 + 32 >> 2];
  $24_1 = Math_fround(HEAPF32[$9_1 + 56 >> 2] - HEAPF32[$8_1 + 56 >> 2]);
  $13_1 = Math_fround(Math_fround(Math_fround($17_1 * $18_1) + Math_fround($21 * $22_1)) + Math_fround($23_1 * $24_1));
  $6_1 = ($6_1 << 2) + $8_1 | 0;
  $19_1 = HEAPF32[$6_1 >> 2];
  $14 = HEAPF32[$6_1 + 16 >> 2];
  $16_1 = HEAPF32[$6_1 + 32 >> 2];
  $20 = Math_fround(Math_fround(Math_fround($19_1 * $18_1) + Math_fround($14 * $22_1)) + Math_fround($16_1 * $24_1));
  $15_1 = Math_fround(Math_fround(Math_fround($19_1 * $17_1) + Math_fround($14 * $21)) + Math_fround($16_1 * $23_1));
  $12_1 = Math_fround(Math_fround(1.0) - Math_fround($15_1 * $15_1));
  label$1 : {
   if ($12_1 == Math_fround(0.0)) {
    break label$1
   }
   $12_1 = Math_fround(Math_fround($20 - Math_fround($15_1 * $13_1)) / $12_1);
   $11 = Math_fround(-$2_1);
   if ($12_1 < $11) {
    break label$1
   }
   $11 = $12_1;
   if (!($11 > $2_1)) {
    break label$1
   }
   $11 = $2_1;
  }
  $12_1 = Math_fround(Math_fround($15_1 * $11) - $13_1);
  $13_1 = Math_fround(-$4_1);
  label$2 : {
   label$3 : {
    if (!!($12_1 < $13_1)) {
     $4_1 = Math_fround($20 - Math_fround($15_1 * $4_1));
     $11 = Math_fround(-$2_1);
     if ($4_1 < $11) {
      $12_1 = $13_1;
      break label$2;
     }
     if (!($4_1 > $2_1)) {
      $12_1 = $13_1;
      $11 = $4_1;
      break label$2;
     }
     $4_1 = $13_1;
     break label$3;
    }
    if (!($12_1 > $4_1)) {
     break label$2
    }
    $13_1 = Math_fround(Math_fround($15_1 * $4_1) + $20);
    $11 = Math_fround(-$2_1);
    if ($13_1 < $11) {
     $12_1 = $4_1;
     break label$2;
    }
    if (!($13_1 > $2_1)) {
     $12_1 = $4_1;
     $11 = $13_1;
     break label$2;
    }
   }
   $12_1 = $4_1;
   $11 = $2_1;
  }
  $13_1 = Math_fround($23_1 * $12_1);
  $2_1 = Math_fround($13_1 + Math_fround($24_1 - Math_fround($16_1 * $11)));
  $15_1 = Math_fround($17_1 * $12_1);
  $4_1 = Math_fround($15_1 + Math_fround($18_1 - Math_fround($19_1 * $11)));
  $20 = Math_fround($21 * $12_1);
  $12_1 = Math_fround($20 + Math_fround($22_1 - Math_fround($14 * $11)));
  $11 = Math_fround(Math_fround($2_1 * $2_1) + Math_fround(Math_fround($4_1 * $4_1) + Math_fround($12_1 * $12_1)));
  $17_1 = Math_fround(Math_sqrt($11));
  $18_1 = Math_fround(Math_fround($17_1 - $3_1) - $5_1);
  if (!($18_1 > $10)) {
   label$10 : {
    if (!!($11 <= Math_fround(1.4210854715202004e-14))) {
     if (!!(Math_fround(Math_abs($16_1)) > Math_fround(.7071067690849304))) {
      HEAP32[$0 >> 2] = 0;
      $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($14 * $14) + Math_fround($16_1 * $16_1)))));
      $2_1 = Math_fround($14 * $3_1);
      HEAPF32[$0 + 8 >> 2] = $2_1;
      $11 = Math_fround($3_1 * Math_fround(-$16_1));
      HEAPF32[$0 + 4 >> 2] = $11;
      $3_1 = Math_fround(0.0);
      break label$10;
     }
     HEAP32[$0 + 8 >> 2] = 0;
     $2_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($19_1 * $19_1) + Math_fround($14 * $14)))));
     $11 = Math_fround($19_1 * $2_1);
     HEAPF32[$0 + 4 >> 2] = $11;
     $3_1 = Math_fround($2_1 * Math_fround(-$14));
     HEAPF32[$0 >> 2] = $3_1;
     $2_1 = Math_fround(0.0);
     break label$10;
    }
    HEAP32[$0 + 12 >> 2] = 0;
    $3_1 = Math_fround(Math_fround(-1.0) / $17_1);
    $2_1 = Math_fround($2_1 * $3_1);
    HEAPF32[$0 + 8 >> 2] = $2_1;
    $11 = Math_fround($12_1 * $3_1);
    HEAPF32[$0 + 4 >> 2] = $11;
    $3_1 = Math_fround($4_1 * $3_1);
    HEAPF32[$0 >> 2] = $3_1;
   }
   $4_1 = HEAPF32[$9_1 + 48 >> 2];
   $10 = HEAPF32[$9_1 + 52 >> 2];
   $12_1 = HEAPF32[$9_1 + 56 >> 2];
   HEAP32[$1_1 + 12 >> 2] = 0;
   HEAPF32[$1_1 + 8 >> 2] = Math_fround($13_1 + $12_1) + Math_fround($2_1 * $5_1);
   HEAPF32[$1_1 + 4 >> 2] = Math_fround($20 + $10) + Math_fround($11 * $5_1);
   HEAPF32[$1_1 >> 2] = Math_fround($15_1 + $4_1) + Math_fround($3_1 * $5_1);
  }
  return $18_1;
 }
 
 function $593($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0;
  $0 = global$0 - 608 | 0;
  global$0 = $0;
  $5_1 = Math_fround(HEAPF32[$1_1 + 116 >> 2] - HEAPF32[$1_1 + 52 >> 2]);
  $6_1 = Math_fround($5_1 * $5_1);
  $5_1 = Math_fround(HEAPF32[$1_1 + 120 >> 2] - HEAPF32[$1_1 + 56 >> 2]);
  $6_1 = Math_fround($6_1 + Math_fround($5_1 * $5_1));
  $5_1 = Math_fround(HEAPF32[$1_1 + 124 >> 2] - HEAPF32[$1_1 + 60 >> 2]);
  $6_1 = Math_fround($6_1 + Math_fround($5_1 * $5_1));
  $5_1 = HEAPF32[$1_1 + 276 >> 2];
  label$1 : {
   if (!!($6_1 < Math_fround($5_1 * $5_1))) {
    $6_1 = Math_fround(1.0);
    $5_1 = Math_fround(HEAPF32[$2_1 + 116 >> 2] - HEAPF32[$2_1 + 52 >> 2]);
    $7_1 = Math_fround($5_1 * $5_1);
    $5_1 = Math_fround(HEAPF32[$2_1 + 120 >> 2] - HEAPF32[$2_1 + 56 >> 2]);
    $7_1 = Math_fround($7_1 + Math_fround($5_1 * $5_1));
    $5_1 = Math_fround(HEAPF32[$2_1 + 124 >> 2] - HEAPF32[$2_1 + 60 >> 2]);
    $7_1 = Math_fround($7_1 + Math_fround($5_1 * $5_1));
    $5_1 = HEAPF32[$2_1 + 276 >> 2];
    if ($7_1 < Math_fround($5_1 * $5_1)) {
     break label$1
    }
   }
   $6_1 = Math_fround(1.0);
   if (HEAPU8[25152]) {
    break label$1
   }
   $9_1 = HEAP32[$1_1 + 192 >> 2];
   $8_1 = HEAP32[$2_1 + 272 >> 2];
   $145($0 + 552 | 0);
   $4_1 = $0 + 580 | 0;
   $3_1 = $4_1;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $11 = $0 + 576 | 0;
   HEAP32[$11 >> 2] = 1065353216;
   $10 = $0 + 588 | 0;
   $3_1 = $10;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $12_1 = $0 + 596 | 0;
   HEAP32[$12_1 >> 2] = 0;
   HEAP32[$0 + 568 >> 2] = 1065353216;
   HEAP32[$0 + 572 >> 2] = 1065353216;
   HEAP32[$0 + 556 >> 2] = 8;
   HEAP32[$0 + 552 >> 2] = 7868;
   HEAP32[$0 + 604 >> 2] = 0;
   HEAP32[$0 + 600 >> 2] = $8_1;
   HEAP32[$0 + 584 >> 2] = $8_1;
   HEAP32[$0 + 548 >> 2] = 0;
   HEAP32[$0 + 540 >> 2] = 1566444395;
   HEAP32[$0 + 544 >> 2] = 0;
   HEAP32[$0 + 376 >> 2] = 14008;
   $13_1 = $0 + 348 | 0;
   HEAP8[$13_1 | 0] = 0;
   HEAP32[$0 + 324 >> 2] = 953267991;
   $3_1 = $579($0, $9_1, $0 + 552 | 0, $0 + 16 | 0);
   $14 = $1_1 + 4 | 0;
   $15_1 = $1_1 + 68 | 0;
   $8_1 = $2_1 + 4 | 0;
   $9_1 = $2_1 + 68 | 0;
   $6_1 = Math_fround(1.0);
   label$3 : {
    if (!$580($3_1, $14, $15_1, $8_1, $9_1, $0 + 376 | 0)) {
     break label$3
    }
    $5_1 = HEAPF32[$0 + 540 >> 2];
    if (!!(HEAPF32[$1_1 + 268 >> 2] > $5_1)) {
     HEAPF32[$1_1 + 268 >> 2] = $5_1
    }
    if (!!(HEAPF32[$2_1 + 268 >> 2] > $5_1)) {
     HEAPF32[$2_1 + 268 >> 2] = $5_1
    }
    $6_1 = Math_fround(1.0);
    if (!($5_1 < Math_fround(1.0))) {
     break label$3
    }
    $6_1 = $5_1;
   }
   $3_1 = HEAP32[$2_1 + 192 >> 2];
   $16_1 = HEAP32[$1_1 + 272 >> 2];
   $145($0 + 552 | 0);
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 0;
   HEAP32[$11 >> 2] = 1065353216;
   HEAP32[$10 >> 2] = 0;
   HEAP32[$10 + 4 >> 2] = 0;
   HEAP32[$12_1 >> 2] = 0;
   HEAP32[$0 + 568 >> 2] = 1065353216;
   HEAP32[$0 + 572 >> 2] = 1065353216;
   HEAP32[$0 + 556 >> 2] = 8;
   HEAP32[$0 + 552 >> 2] = 7868;
   HEAP32[$0 + 604 >> 2] = 0;
   HEAP32[$0 + 600 >> 2] = $16_1;
   HEAP32[$0 + 584 >> 2] = $16_1;
   HEAP32[$0 + 548 >> 2] = 0;
   HEAP32[$0 + 540 >> 2] = 1566444395;
   HEAP32[$0 + 544 >> 2] = 0;
   HEAP32[$0 + 376 >> 2] = 14008;
   HEAP8[$13_1 | 0] = 0;
   HEAP32[$0 + 324 >> 2] = 953267991;
   label$6 : {
    if (!$580($579($0, $0 + 552 | 0, $3_1, $0 + 16 | 0), $14, $15_1, $8_1, $9_1, $0 + 376 | 0)) {
     break label$6
    }
    $5_1 = HEAPF32[$0 + 540 >> 2];
    if (!!(HEAPF32[$1_1 + 268 >> 2] > $5_1)) {
     HEAPF32[$1_1 + 268 >> 2] = $5_1
    }
    if (!!(HEAPF32[$2_1 + 268 >> 2] > $5_1)) {
     HEAPF32[$2_1 + 268 >> 2] = $5_1
    }
    if (!($6_1 > $5_1)) {
     break label$6
    }
    $6_1 = $5_1;
   }
  }
  global$0 = $0 + 608 | 0;
  return Math_fround($6_1);
 }
 
 function $595($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 56 >> 2]]($2_1, 72) | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = HEAP32[$0 + 12 >> 2];
  $5_1 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 8 >> 2];
  $72($2_1, $1_1);
  HEAP8[$2_1 + 28 | 0] = 1;
  HEAP32[$2_1 + 8 >> 2] = $0;
  HEAP32[$2_1 >> 2] = 13460;
  HEAP32[$2_1 + 24 >> 2] = 0;
  HEAP8[$2_1 + 48 | 0] = 1;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 44 >> 2] = 0;
  HEAP32[$2_1 + 64 >> 2] = $4_1;
  HEAP32[$2_1 + 68 >> 2] = $5_1;
  HEAP8[$2_1 + 60 | 0] = 0;
  HEAP32[$2_1 + 56 >> 2] = $3_1;
  HEAP8[$2_1 + 52 | 0] = 0;
  HEAP32[$2_1 + 36 >> 2] = 0;
  HEAP32[$2_1 + 40 >> 2] = 0;
  return $2_1 | 0;
 }
 
 function $596($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0 + 56 >> 2];
  if (!(!$3_1 | !HEAPU8[$0 + 52 | 0])) {
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   label$2 : {
    if (($2_1 | 0) != HEAP32[$1_1 + 8 >> 2]) {
     break label$2
    }
    $5_1 = $2_1 ? $2_1 << 1 : 1;
    if (($2_1 | 0) >= ($5_1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$5_1) {
      break label$3
     }
     $6_1 = $79($5_1 << 2);
     $2_1 = HEAP32[$1_1 + 4 >> 2];
    }
    if (($2_1 | 0) >= 1) {
     $3_1 = 0;
     $4_1 = $2_1;
     while (1) {
      HEAP32[$3_1 + $6_1 >> 2] = HEAP32[HEAP32[$1_1 + 12 >> 2] + $3_1 >> 2];
      $3_1 = $3_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break;
     };
    }
    $4_1 = HEAP32[$1_1 + 12 >> 2];
    if ($4_1) {
     if (HEAPU8[$1_1 + 16 | 0]) {
      $80($4_1);
      $2_1 = HEAP32[$1_1 + 4 >> 2];
     }
     HEAP32[$1_1 + 12 >> 2] = 0;
    }
    HEAP32[$1_1 + 12 >> 2] = $6_1;
    HEAP8[$1_1 + 16 | 0] = 1;
    HEAP32[$1_1 + 8 >> 2] = $5_1;
    $3_1 = HEAP32[$0 + 56 >> 2];
   }
   HEAP32[$1_1 + 4 >> 2] = $2_1 + 1;
   HEAP32[HEAP32[$1_1 + 12 >> 2] + ($2_1 << 2) >> 2] = $3_1;
  }
 }
 
 function $600($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
 }
 
 function $604($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[$0 + 32 >> 2] = $3_1;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 12 >> 2] = $5_1;
  $5_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $7_1 = $0 + 16 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $9_1 = HEAPF32[$5_1 >> 2];
  $10 = HEAPF32[$2_1 >> 2];
  $11 = HEAPF32[$1_1 >> 2];
  $12_1 = HEAPF32[$2_1 + 4 >> 2];
  $13_1 = HEAPF32[$1_1 + 4 >> 2];
  $14 = HEAPF32[$2_1 + 8 >> 2];
  $6_1 = HEAPF32[$0 + 28 >> 2];
  $3_1 = Math_fround(Math_fround($6_1 + HEAPF32[$0 + 24 >> 2]) + $3_1);
  HEAPF32[$0 + 32 >> 2] = $3_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 + 8 >> 2] = $14 - Math_fround($6_1 * $9_1);
  HEAPF32[$4_1 + 4 >> 2] = $12_1 - Math_fround($6_1 * $13_1);
  HEAPF32[$4_1 >> 2] = $10 - Math_fround($11 * $6_1);
  if (!!($3_1 < Math_fround(0.0))) {
   HEAP8[$0 + 36 | 0] = 1
  }
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1_1, $4_1, $3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $606($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0);
  $14 = global$0 - 16 | 0;
  global$0 = $14;
  $27_1 = HEAPF32[$1_1 + 8 >> 2];
  $25 = HEAPF32[$2_1 + 8 >> 2];
  $10 = Math_fround(Math_fround($27_1 * $3_1) + $25);
  $28_1 = HEAPF32[$1_1 + 4 >> 2];
  $26_1 = HEAPF32[$2_1 + 4 >> 2];
  $29_1 = Math_fround(Math_fround($28_1 * $3_1) + $26_1);
  $30 = HEAPF32[$1_1 >> 2];
  $4_1 = Math_fround($30 * $3_1);
  $3_1 = HEAPF32[$2_1 >> 2];
  $31_1 = Math_fround($4_1 + $3_1);
  label$1 : {
   if (HEAPU8[$0 + 232 | 0]) {
    $15_1 = HEAPF32[$0 + 56 >> 2];
    $11 = Math_fround(-HEAPF32[$0 + 92 >> 2]);
    $16_1 = HEAPF32[$0 + 40 >> 2];
    $9_1 = HEAPF32[$0 + 88 >> 2];
    $8_1 = HEAPF32[$0 + 72 >> 2];
    $4_1 = HEAPF32[$0 + 96 >> 2];
    $20 = Math_fround(Math_fround(Math_fround($15_1 * $11) - Math_fround($16_1 * $9_1)) - Math_fround($8_1 * $4_1));
    $5_1 = HEAPF32[$0 + 200 >> 2];
    $17_1 = HEAPF32[$0 + 60 >> 2];
    $18_1 = HEAPF32[$0 + 44 >> 2];
    $12_1 = HEAPF32[$0 + 76 >> 2];
    $23_1 = Math_fround(Math_fround(Math_fround($17_1 * $11) - Math_fround($18_1 * $9_1)) - Math_fround($12_1 * $4_1));
    $6_1 = HEAPF32[$0 + 204 >> 2];
    $19_1 = HEAPF32[$0 - -64 >> 2];
    $7_1 = Math_fround($19_1 * $11);
    $11 = HEAPF32[$0 + 48 >> 2];
    $7_1 = Math_fround($7_1 - Math_fround($11 * $9_1));
    $9_1 = HEAPF32[$0 + 80 >> 2];
    $21 = Math_fround($7_1 - Math_fround($9_1 * $4_1));
    $4_1 = HEAPF32[$0 + 208 >> 2];
    $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($20 * $5_1) + Math_fround($23_1 * $6_1)) + Math_fround($21 * $4_1)) + HEAPF32[$0 + 224 >> 2]) + Math_fround(Math_fround($10 * Math_fround(Math_fround(Math_fround($8_1 * $5_1) + Math_fround($12_1 * $6_1)) + Math_fround($9_1 * $4_1))) + Math_fround(Math_fround($31_1 * Math_fround(Math_fround(Math_fround($16_1 * $5_1) + Math_fround($18_1 * $6_1)) + Math_fround($11 * $4_1))) + Math_fround($29_1 * Math_fround(Math_fround(Math_fround($15_1 * $5_1) + Math_fround($17_1 * $6_1)) + Math_fround($19_1 * $4_1))))));
    $5_1 = HEAPF32[$0 + 168 >> 2];
    $6_1 = HEAPF32[$0 + 172 >> 2];
    $4_1 = HEAPF32[$0 + 176 >> 2];
    $5_1 = Math_fround(Math_fround(Math_fround($10 * Math_fround(Math_fround(Math_fround($8_1 * $5_1) + Math_fround($12_1 * $6_1)) + Math_fround($9_1 * $4_1))) + Math_fround(Math_fround($31_1 * Math_fround(Math_fround(Math_fround($16_1 * $5_1) + Math_fround($18_1 * $6_1)) + Math_fround($11 * $4_1))) + Math_fround($29_1 * Math_fround(Math_fround(Math_fround($15_1 * $5_1) + Math_fround($17_1 * $6_1)) + Math_fround($19_1 * $4_1))))) + Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $20) + Math_fround($23_1 * $6_1)) + Math_fround($21 * $4_1)) + HEAPF32[$0 + 216 >> 2]));
    $6_1 = Math_fround($30 * Math_fround($5_1 - $3_1));
    $4_1 = $10;
    $3_1 = HEAPF32[$0 + 184 >> 2];
    $10 = HEAPF32[$0 + 188 >> 2];
    $12_1 = Math_fround(Math_fround($8_1 * $3_1) + Math_fround($12_1 * $10));
    $8_1 = HEAPF32[$0 + 192 >> 2];
    $10 = Math_fround(Math_fround(Math_fround($4_1 * Math_fround($12_1 + Math_fround($9_1 * $8_1))) + Math_fround(Math_fround($31_1 * Math_fround(Math_fround(Math_fround($16_1 * $3_1) + Math_fround($18_1 * $10)) + Math_fround($11 * $8_1))) + Math_fround($29_1 * Math_fround(Math_fround(Math_fround($15_1 * $3_1) + Math_fround($17_1 * $10)) + Math_fround($19_1 * $8_1))))) + Math_fround(Math_fround(Math_fround(Math_fround($20 * $3_1) + Math_fround($23_1 * $10)) + Math_fround($21 * $8_1)) + HEAPF32[$0 + 220 >> 2]));
    $3_1 = Math_fround(Math_fround($6_1 + Math_fround($28_1 * Math_fround($10 - $26_1))) + Math_fround($27_1 * Math_fround($7_1 - $25)));
    HEAPF32[$14 + 8 >> 2] = $7_1 + Math_fround($27_1 * $3_1);
    HEAPF32[$14 + 4 >> 2] = $10 + Math_fround($28_1 * $3_1);
    HEAPF32[$14 >> 2] = $5_1 + Math_fround($30 * $3_1);
    break label$1;
   }
   $34 = HEAPF32[$0 + 224 >> 2];
   $15_1 = HEAPF32[$0 + 208 >> 2];
   $16_1 = HEAPF32[$0 + 200 >> 2];
   $8_1 = HEAPF32[$0 + 204 >> 2];
   $35 = HEAPF32[$0 + 216 >> 2];
   $5_1 = HEAPF32[$0 + 172 >> 2];
   $17_1 = HEAPF32[$0 + 176 >> 2];
   $18_1 = HEAPF32[$0 + 168 >> 2];
   $12_1 = HEAPF32[$0 + 120 >> 2];
   $7_1 = Math_fround(-HEAPF32[$0 + 156 >> 2]);
   $6_1 = HEAPF32[$0 + 104 >> 2];
   $22_1 = HEAPF32[$0 + 152 >> 2];
   $19_1 = HEAPF32[$0 + 136 >> 2];
   $24_1 = HEAPF32[$0 + 160 >> 2];
   $11 = Math_fround(Math_fround(Math_fround($12_1 * $7_1) - Math_fround($6_1 * $22_1)) - Math_fround($19_1 * $24_1));
   $9_1 = HEAPF32[$0 + 124 >> 2];
   $4_1 = HEAPF32[$0 + 108 >> 2];
   $20 = HEAPF32[$0 + 140 >> 2];
   $23_1 = Math_fround(Math_fround(Math_fround($9_1 * $7_1) - Math_fround($4_1 * $22_1)) - Math_fround($20 * $24_1));
   $21 = HEAPF32[$0 + 128 >> 2];
   $13_1 = Math_fround($21 * $7_1);
   $7_1 = HEAPF32[$0 + 112 >> 2];
   $13_1 = Math_fround($13_1 - Math_fround($7_1 * $22_1));
   $22_1 = HEAPF32[$0 + 144 >> 2];
   $24_1 = Math_fround($13_1 - Math_fround($22_1 * $24_1));
   $13_1 = HEAPF32[$0 + 184 >> 2];
   $32 = HEAPF32[$0 + 188 >> 2];
   $33_1 = HEAPF32[$0 + 192 >> 2];
   $13_1 = Math_fround(Math_fround(Math_fround($25 * Math_fround(Math_fround(Math_fround($19_1 * $13_1) + Math_fround($20 * $32)) + Math_fround($22_1 * $33_1))) + Math_fround(Math_fround($3_1 * Math_fround(Math_fround(Math_fround($6_1 * $13_1) + Math_fround($4_1 * $32)) + Math_fround($7_1 * $33_1))) + Math_fround($26_1 * Math_fround(Math_fround(Math_fround($12_1 * $13_1) + Math_fround($9_1 * $32)) + Math_fround($21 * $33_1))))) + Math_fround(Math_fround(Math_fround(Math_fround($11 * $13_1) + Math_fround($23_1 * $32)) + Math_fround($24_1 * $33_1)) + HEAPF32[$0 + 220 >> 2]));
   HEAPF32[$14 + 4 >> 2] = $13_1;
   $5_1 = Math_fround(Math_fround(Math_fround($25 * Math_fround(Math_fround(Math_fround($19_1 * $18_1) + Math_fround($20 * $5_1)) + Math_fround($22_1 * $17_1))) + Math_fround(Math_fround($3_1 * Math_fround(Math_fround(Math_fround($6_1 * $18_1) + Math_fround($4_1 * $5_1)) + Math_fround($7_1 * $17_1))) + Math_fround($26_1 * Math_fround(Math_fround(Math_fround($12_1 * $18_1) + Math_fround($9_1 * $5_1)) + Math_fround($21 * $17_1))))) + Math_fround($35 + Math_fround(Math_fround(Math_fround($18_1 * $11) + Math_fround($23_1 * $5_1)) + Math_fround($24_1 * $17_1))));
   HEAPF32[$14 >> 2] = $5_1;
   $3_1 = Math_fround(Math_fround($34 + Math_fround(Math_fround(Math_fround($11 * $16_1) + Math_fround($23_1 * $8_1)) + Math_fround($24_1 * $15_1))) + Math_fround(Math_fround($25 * Math_fround(Math_fround(Math_fround($19_1 * $16_1) + Math_fround($20 * $8_1)) + Math_fround($22_1 * $15_1))) + Math_fround(Math_fround($3_1 * Math_fround(Math_fround(Math_fround($6_1 * $16_1) + Math_fround($4_1 * $8_1)) + Math_fround($7_1 * $15_1))) + Math_fround($26_1 * Math_fround(Math_fround(Math_fround($12_1 * $16_1) + Math_fround($9_1 * $8_1)) + Math_fround($21 * $15_1))))));
   HEAPF32[$14 + 8 >> 2] = $3_1;
   $3_1 = Math_fround(Math_fround(Math_fround($30 * Math_fround($31_1 - $5_1)) + Math_fround($28_1 * Math_fround($29_1 - $13_1))) + Math_fround($27_1 * Math_fround($10 - $3_1)));
  }
  HEAP32[$14 + 12 >> 2] = 0;
  $0 = HEAP32[$0 + 36 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1_1, $14, $3_1);
  global$0 = $14 + 16 | 0;
 }
 
 function $612() {
  
 }
 
 function $613($0, $1_1) {
  FUNCTION_TABLE[HEAP32[5852]]($1_1);
  return $0;
 }
 
 function $614() {
  FUNCTION_TABLE[HEAP32[5853]]();
 }
 
 function $615($0, $1_1, $2_1, $3_1) {
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $3_1;
  HEAP32[$0 >> 2] = 14076;
  return $0;
 }
 
 function $616($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = 0, $45_1 = 0, $46_1 = 0, $47 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = Math_fround(0), $55_1 = Math_fround(0), $56_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = 0;
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  $552(HEAP32[$0 + 4 >> 2]);
  $14 = $3_1 + 40 | 0;
  $40_1 = HEAPF32[$14 >> 2];
  $18_1 = $3_1 + 36 | 0;
  $41_1 = HEAPF32[$18_1 >> 2];
  $15_1 = $3_1 + 24 | 0;
  $42 = HEAPF32[$15_1 >> 2];
  $23_1 = $3_1 + 20 | 0;
  $43_1 = HEAPF32[$23_1 >> 2];
  $44_1 = $1_1 + 20 | 0;
  $24_1 = HEAPF32[$44_1 >> 2];
  $45_1 = $1_1 + 36 | 0;
  $25 = HEAPF32[$45_1 >> 2];
  $46_1 = $1_1 + 24 | 0;
  $26_1 = HEAPF32[$46_1 >> 2];
  $47 = $1_1 + 52 | 0;
  $27_1 = HEAPF32[$47 >> 2];
  $8_1 = HEAPF32[$2_1 + 52 >> 2];
  $48_1 = $3_1 + 52 | 0;
  $28_1 = HEAPF32[$48_1 >> 2];
  $11 = HEAPF32[$4_1 + 52 >> 2];
  $49_1 = $1_1 + 40 | 0;
  $29_1 = HEAPF32[$49_1 >> 2];
  $50_1 = $1_1 + 56 | 0;
  $30 = HEAPF32[$50_1 >> 2];
  $12_1 = HEAPF32[$2_1 + 56 >> 2];
  $51_1 = $3_1 + 56 | 0;
  $31_1 = HEAPF32[$51_1 >> 2];
  $7_1 = HEAPF32[$4_1 + 56 >> 2];
  $52_1 = HEAPF32[$3_1 + 32 >> 2];
  $53_1 = HEAPF32[$3_1 + 16 >> 2];
  $54_1 = HEAPF32[$3_1 + 8 >> 2];
  $55_1 = HEAPF32[$3_1 + 4 >> 2];
  $56_1 = HEAPF32[$3_1 >> 2];
  $32 = HEAPF32[$1_1 >> 2];
  $33_1 = HEAPF32[$1_1 + 16 >> 2];
  $34 = HEAPF32[$1_1 + 32 >> 2];
  $35 = HEAPF32[$1_1 + 4 >> 2];
  $36_1 = HEAPF32[$1_1 + 8 >> 2];
  $37_1 = HEAPF32[$1_1 + 48 >> 2];
  $10 = HEAPF32[$2_1 + 48 >> 2];
  $38 = HEAPF32[$3_1 + 48 >> 2];
  $9_1 = HEAPF32[$4_1 + 48 >> 2];
  $22_1 = HEAP32[$0 + 8 >> 2];
  HEAP32[$6_1 + 60 >> 2] = 0;
  $19_1 = Math_fround(Math_fround($8_1 - $27_1) - Math_fround($11 - $28_1));
  $8_1 = Math_fround(-$19_1);
  $16_1 = Math_fround(Math_fround($10 - $37_1) - Math_fround($9_1 - $38));
  $17_1 = Math_fround(Math_fround($12_1 - $30) - Math_fround($7_1 - $31_1));
  HEAPF32[$6_1 + 56 >> 2] = Math_fround(Math_fround($26_1 * $8_1) - Math_fround($36_1 * $16_1)) - Math_fround($29_1 * $17_1);
  HEAPF32[$6_1 + 52 >> 2] = Math_fround(Math_fround($24_1 * $8_1) - Math_fround($16_1 * $35)) - Math_fround($17_1 * $25);
  HEAPF32[$6_1 + 48 >> 2] = Math_fround(Math_fround($33_1 * $8_1) - Math_fround($16_1 * $32)) - Math_fround($17_1 * $34);
  FUNCTION_TABLE[HEAP32[HEAP32[$22_1 >> 2] + 64 >> 2]]($6_1 + 80 | 0, $22_1, $6_1 + 48 | 0);
  HEAP32[$6_1 + 76 >> 2] = 0;
  $8_1 = HEAPF32[$6_1 + 80 >> 2];
  $11 = HEAPF32[$6_1 + 84 >> 2];
  $12_1 = HEAPF32[$6_1 + 88 >> 2];
  HEAPF32[$6_1 + 72 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$1_1 + 32 >> 2]) + Math_fround($11 * HEAPF32[$45_1 >> 2])) + Math_fround($12_1 * HEAPF32[$49_1 >> 2])) + HEAPF32[$50_1 >> 2];
  HEAPF32[$6_1 + 68 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$1_1 + 16 >> 2]) + Math_fround($11 * HEAPF32[$44_1 >> 2])) + Math_fround($12_1 * HEAPF32[$46_1 >> 2])) + HEAPF32[$47 >> 2];
  HEAPF32[$6_1 + 64 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$1_1 >> 2]) + Math_fround($11 * HEAPF32[$1_1 + 4 >> 2])) + Math_fround($12_1 * HEAPF32[$1_1 + 8 >> 2])) + HEAPF32[$1_1 + 48 >> 2];
  $22_1 = HEAP32[$0 + 12 >> 2];
  HEAP32[$6_1 + 28 >> 2] = 0;
  HEAPF32[$6_1 + 24 >> 2] = Math_fround(Math_fround($16_1 * HEAPF32[$3_1 + 8 >> 2]) + Math_fround($19_1 * HEAPF32[$15_1 >> 2])) + Math_fround($17_1 * HEAPF32[$14 >> 2]);
  HEAPF32[$6_1 + 20 >> 2] = Math_fround(Math_fround($16_1 * HEAPF32[$3_1 + 4 >> 2]) + Math_fround($19_1 * HEAPF32[$23_1 >> 2])) + Math_fround($17_1 * HEAPF32[$18_1 >> 2]);
  HEAPF32[$6_1 + 16 >> 2] = Math_fround(Math_fround($16_1 * HEAPF32[$3_1 >> 2]) + Math_fround($19_1 * HEAPF32[$3_1 + 16 >> 2])) + Math_fround($17_1 * HEAPF32[$3_1 + 32 >> 2]);
  FUNCTION_TABLE[HEAP32[HEAP32[$22_1 >> 2] + 64 >> 2]]($6_1 + 32 | 0, $22_1, $6_1 + 16 | 0);
  HEAP32[$6_1 + 60 >> 2] = 0;
  $8_1 = HEAPF32[$6_1 + 32 >> 2];
  $11 = HEAPF32[$6_1 + 36 >> 2];
  $12_1 = HEAPF32[$6_1 + 40 >> 2];
  $9_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$3_1 + 32 >> 2]) + Math_fround($11 * HEAPF32[$18_1 >> 2])) + Math_fround($12_1 * HEAPF32[$14 >> 2])) + HEAPF32[$51_1 >> 2]);
  HEAPF32[$6_1 + 56 >> 2] = $9_1;
  $10 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$3_1 >> 2]) + Math_fround($11 * HEAPF32[$3_1 + 4 >> 2])) + Math_fround($12_1 * HEAPF32[$3_1 + 8 >> 2])) + HEAPF32[$3_1 + 48 >> 2]);
  HEAPF32[$6_1 + 48 >> 2] = $10;
  $8_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$3_1 + 16 >> 2]) + Math_fround($11 * HEAPF32[$23_1 >> 2])) + Math_fround($12_1 * HEAPF32[$15_1 >> 2])) + HEAPF32[$48_1 >> 2]);
  HEAPF32[$6_1 + 52 >> 2] = $8_1;
  HEAP32[$6_1 + 92 >> 2] = 0;
  $7_1 = Math_fround(HEAPF32[$6_1 + 68 >> 2] - $8_1);
  HEAPF32[$6_1 + 84 >> 2] = $7_1;
  $10 = Math_fround(HEAPF32[$6_1 + 64 >> 2] - $10);
  HEAPF32[$6_1 + 80 >> 2] = $10;
  $9_1 = Math_fround(HEAPF32[$6_1 + 72 >> 2] - $9_1);
  HEAPF32[$6_1 + 88 >> 2] = $9_1;
  $8_1 = Math_fround(0.0);
  $11 = Math_fround(0.0);
  $12_1 = Math_fround(0.0);
  label$1 : {
   label$2 : {
    if (!(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($7_1 * $7_1)) + Math_fround($9_1 * $9_1)) > Math_fround(9.999999747378752e-05))) {
     break label$2
    }
    $14 = -33;
    while (1) {
     $18_1 = $14 + 1 | 0;
     if ($18_1 >>> 0 < $14 >>> 0) {
      break label$2
     }
     $15_1 = HEAP32[$0 + 8 >> 2];
     $14 = 0;
     HEAP32[$6_1 + 12 >> 2] = 0;
     $7_1 = Math_fround(-HEAPF32[$6_1 + 84 >> 2]);
     $10 = HEAPF32[$6_1 + 80 >> 2];
     $9_1 = HEAPF32[$6_1 + 88 >> 2];
     HEAPF32[$6_1 + 8 >> 2] = Math_fround(Math_fround($26_1 * $7_1) - Math_fround($36_1 * $10)) - Math_fround($29_1 * $9_1);
     HEAPF32[$6_1 + 4 >> 2] = Math_fround(Math_fround($24_1 * $7_1) - Math_fround($35 * $10)) - Math_fround($25 * $9_1);
     HEAPF32[$6_1 >> 2] = Math_fround(Math_fround($33_1 * $7_1) - Math_fround($32 * $10)) - Math_fround($34 * $9_1);
     FUNCTION_TABLE[HEAP32[HEAP32[$15_1 >> 2] + 64 >> 2]]($6_1 + 16 | 0, $15_1, $6_1);
     HEAP32[$6_1 + 76 >> 2] = 0;
     $7_1 = HEAPF32[$6_1 + 16 >> 2];
     $10 = HEAPF32[$6_1 + 20 >> 2];
     $9_1 = HEAPF32[$6_1 + 24 >> 2];
     HEAPF32[$6_1 + 72 >> 2] = $30 + Math_fround(Math_fround(Math_fround($34 * $7_1) + Math_fround($25 * $10)) + Math_fround($29_1 * $9_1));
     HEAPF32[$6_1 + 68 >> 2] = $27_1 + Math_fround(Math_fround(Math_fround($33_1 * $7_1) + Math_fround($24_1 * $10)) + Math_fround($26_1 * $9_1));
     HEAPF32[$6_1 + 64 >> 2] = $37_1 + Math_fround(Math_fround(Math_fround($32 * $7_1) + Math_fround($35 * $10)) + Math_fround($36_1 * $9_1));
     $15_1 = HEAP32[$0 + 12 >> 2];
     HEAP32[$6_1 + 12 >> 2] = 0;
     $7_1 = HEAPF32[$6_1 + 80 >> 2];
     $10 = HEAPF32[$6_1 + 84 >> 2];
     $9_1 = HEAPF32[$6_1 + 88 >> 2];
     HEAPF32[$6_1 + 8 >> 2] = Math_fround(Math_fround($54_1 * $7_1) + Math_fround($42 * $10)) + Math_fround($40_1 * $9_1);
     HEAPF32[$6_1 + 4 >> 2] = Math_fround(Math_fround($55_1 * $7_1) + Math_fround($43_1 * $10)) + Math_fround($41_1 * $9_1);
     HEAPF32[$6_1 >> 2] = Math_fround(Math_fround($56_1 * $7_1) + Math_fround($53_1 * $10)) + Math_fround($52_1 * $9_1);
     FUNCTION_TABLE[HEAP32[HEAP32[$15_1 >> 2] + 64 >> 2]]($6_1 + 16 | 0, $15_1, $6_1);
     HEAP32[$6_1 + 60 >> 2] = 0;
     HEAP32[$6_1 + 44 >> 2] = 0;
     $7_1 = HEAPF32[$6_1 + 16 >> 2];
     $10 = HEAPF32[$6_1 + 20 >> 2];
     $9_1 = HEAPF32[$6_1 + 24 >> 2];
     $20 = Math_fround($31_1 + Math_fround(Math_fround(Math_fround($52_1 * $7_1) + Math_fround($41_1 * $10)) + Math_fround($40_1 * $9_1)));
     HEAPF32[$6_1 + 56 >> 2] = $20;
     $20 = Math_fround(HEAPF32[$6_1 + 72 >> 2] - $20);
     HEAPF32[$6_1 + 40 >> 2] = $20;
     $21 = Math_fround($28_1 + Math_fround(Math_fround(Math_fround($53_1 * $7_1) + Math_fround($43_1 * $10)) + Math_fround($42 * $9_1)));
     HEAPF32[$6_1 + 52 >> 2] = $21;
     $21 = Math_fround(HEAPF32[$6_1 + 68 >> 2] - $21);
     HEAPF32[$6_1 + 36 >> 2] = $21;
     $7_1 = Math_fround($38 + Math_fround(Math_fround(Math_fround($56_1 * $7_1) + Math_fround($55_1 * $10)) + Math_fround($54_1 * $9_1)));
     HEAPF32[$6_1 + 48 >> 2] = $7_1;
     $39_1 = Math_fround(HEAPF32[$6_1 + 64 >> 2] - $7_1);
     HEAPF32[$6_1 + 32 >> 2] = $39_1;
     if ($13_1 > Math_fround(1.0)) {
      break label$1
     }
     $7_1 = HEAPF32[$6_1 + 80 >> 2];
     $10 = HEAPF32[$6_1 + 84 >> 2];
     $9_1 = HEAPF32[$6_1 + 88 >> 2];
     $57_1 = Math_fround(Math_fround(Math_fround($39_1 * $7_1) + Math_fround($21 * $10)) + Math_fround($20 * $9_1));
     if (!!($57_1 > Math_fround(0.0))) {
      $8_1 = Math_fround(Math_fround(Math_fround($16_1 * $7_1) + Math_fround($19_1 * $10)) + Math_fround($17_1 * $9_1));
      if ($8_1 >= Math_fround(-1.4210854715202004e-14)) {
       break label$1
      }
      HEAP32[$6_1 + 44 >> 2] = 0;
      HEAPF32[$6_1 + 40 >> 2] = $20;
      HEAPF32[$6_1 + 36 >> 2] = $21;
      HEAPF32[$6_1 + 32 >> 2] = $39_1;
      $13_1 = Math_fround($13_1 - Math_fround($57_1 / $8_1));
      $8_1 = Math_fround(Math_fround(1.0) - $13_1);
      $31_1 = Math_fround(Math_fround($8_1 * HEAPF32[$3_1 + 56 >> 2]) + Math_fround($13_1 * HEAPF32[$4_1 + 56 >> 2]));
      $28_1 = Math_fround(Math_fround($8_1 * HEAPF32[$3_1 + 52 >> 2]) + Math_fround($13_1 * HEAPF32[$4_1 + 52 >> 2]));
      $38 = Math_fround(Math_fround($8_1 * HEAPF32[$3_1 + 48 >> 2]) + Math_fround($13_1 * HEAPF32[$4_1 + 48 >> 2]));
      $30 = Math_fround(Math_fround($8_1 * HEAPF32[$1_1 + 56 >> 2]) + Math_fround($13_1 * HEAPF32[$2_1 + 56 >> 2]));
      $27_1 = Math_fround(Math_fround($8_1 * HEAPF32[$1_1 + 52 >> 2]) + Math_fround($13_1 * HEAPF32[$2_1 + 52 >> 2]));
      $37_1 = Math_fround(Math_fround($8_1 * HEAPF32[$1_1 + 48 >> 2]) + Math_fround($13_1 * HEAPF32[$2_1 + 48 >> 2]));
      $58_1 = HEAP32[$6_1 + 92 >> 2];
      $11 = $10;
      $12_1 = $9_1;
      $8_1 = $7_1;
     }
     if (!$558(HEAP32[$0 + 4 >> 2], $6_1 + 32 | 0)) {
      $553(HEAP32[$0 + 4 >> 2], $6_1 + 32 | 0, $6_1 - -64 | 0, $6_1 + 48 | 0)
     }
     if (!$557(HEAP32[$0 + 4 >> 2], $6_1 + 80 | 0)) {
      break label$2
     }
     $14 = $18_1;
     $7_1 = HEAPF32[$6_1 + 80 >> 2];
     $9_1 = Math_fround($7_1 * $7_1);
     $7_1 = HEAPF32[$6_1 + 84 >> 2];
     $9_1 = Math_fround($9_1 + Math_fround($7_1 * $7_1));
     $7_1 = HEAPF32[$6_1 + 88 >> 2];
     if (Math_fround($9_1 + Math_fround($7_1 * $7_1)) > Math_fround(9.999999747378752e-05)) {
      continue
     }
     break;
    };
   }
   HEAPF32[$5_1 + 164 >> 2] = $13_1;
   $7_1 = Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($11 * $11)) + Math_fround($12_1 * $12_1));
   label$6 : {
    if (!!($7_1 >= Math_fround(1.4210854715202004e-14))) {
     HEAP32[$5_1 + 144 >> 2] = $58_1;
     $9_1 = $12_1;
     $12_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($7_1)));
     $13_1 = Math_fround($9_1 * $12_1);
     HEAPF32[$5_1 + 140 >> 2] = $13_1;
     $11 = Math_fround($11 * $12_1);
     HEAPF32[$5_1 + 136 >> 2] = $11;
     $8_1 = Math_fround($8_1 * $12_1);
     HEAPF32[$5_1 + 132 >> 2] = $8_1;
     break label$6;
    }
    HEAP32[$5_1 + 132 >> 2] = 0;
    HEAP32[$5_1 + 136 >> 2] = 0;
    $1_1 = $5_1 + 140 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $13_1 = Math_fround(0.0);
    $11 = Math_fround(0.0);
    $8_1 = Math_fround(0.0);
   }
   $14 = 0;
   if (Math_fround(Math_fround(Math_fround($16_1 * $8_1) + Math_fround($19_1 * $11)) + Math_fround($17_1 * $13_1)) >= Math_fround(-HEAPF32[$5_1 + 172 >> 2])) {
    break label$1
   }
   $559(HEAP32[$0 + 4 >> 2], $6_1 + 16 | 0, $6_1);
   $1_1 = $6_1 + 8 | 0;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $0 = $5_1 + 156 | 0;
   HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2_1;
   $0 = HEAP32[$6_1 + 4 >> 2];
   HEAP32[$5_1 + 148 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 152 >> 2] = $0;
   $14 = 1;
  }
  global$0 = $6_1 + 96 | 0;
  return $14 | 0;
 }
 
 function $618($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $72($0, $1_1);
  HEAP32[$0 >> 2] = 14136;
  HEAP32[$0 + 8 >> 2] = 14164;
  HEAP32[$0 + 60 >> 2] = 0;
  $5_1 = $4_1 ? $2_1 : $3_1;
  HEAP32[$0 + 48 >> 2] = $5_1;
  $2_1 = $4_1 ? $3_1 : $2_1;
  HEAP32[$0 + 44 >> 2] = $2_1;
  $3_1 = $0 + 56 | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 >> 2] = $1_1;
  $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$5_1 + 8 >> 2]) | 0;
  HEAP32[$0 + 72 >> 2] = $1_1;
  $2_1 = HEAP32[$3_1 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $1_1);
  HEAP8[$0 + 76 | 0] = $4_1;
 }
 
 function $619($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  HEAP32[$0 + 8 >> 2] = 14164;
  HEAP32[$0 >> 2] = 14136;
  $1_1 = $0 + 56 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = $0 + 72 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, HEAP32[$3_1 >> 2]);
  $1_1 = HEAP32[$1_1 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, HEAP32[$3_1 >> 2]);
  return $0 | 0;
 }
 
 function $620($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  HEAP32[$0 + 8 >> 2] = 14164;
  HEAP32[$0 >> 2] = 14136;
  $1_1 = $0 + 56 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = $0 + 72 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, HEAP32[$3_1 >> 2]);
  $1_1 = HEAP32[$1_1 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, HEAP32[$3_1 >> 2]);
  $80($0);
 }
 
 function $621($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0 + 72 >> 2];
  if ($3_1) {
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   label$2 : {
    if (($2_1 | 0) != HEAP32[$1_1 + 8 >> 2]) {
     break label$2
    }
    $5_1 = $2_1 ? $2_1 << 1 : 1;
    if (($2_1 | 0) >= ($5_1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$5_1) {
      break label$3
     }
     $6_1 = $79($5_1 << 2);
     $2_1 = HEAP32[$1_1 + 4 >> 2];
    }
    if (($2_1 | 0) >= 1) {
     $3_1 = 0;
     $4_1 = $2_1;
     while (1) {
      HEAP32[$3_1 + $6_1 >> 2] = HEAP32[HEAP32[$1_1 + 12 >> 2] + $3_1 >> 2];
      $3_1 = $3_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break;
     };
    }
    $4_1 = HEAP32[$1_1 + 12 >> 2];
    if ($4_1) {
     if (HEAPU8[$1_1 + 16 | 0]) {
      $80($4_1);
      $2_1 = HEAP32[$1_1 + 4 >> 2];
     }
     HEAP32[$1_1 + 12 >> 2] = 0;
    }
    HEAP32[$1_1 + 12 >> 2] = $6_1;
    HEAP8[$1_1 + 16 | 0] = 1;
    HEAP32[$1_1 + 8 >> 2] = $5_1;
    $3_1 = HEAP32[$0 + 72 >> 2];
   }
   HEAP32[$1_1 + 4 >> 2] = $2_1 + 1;
   HEAP32[HEAP32[$1_1 + 12 >> 2] + ($2_1 << 2) >> 2] = $3_1;
  }
 }
 
 function $622($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 14164;
  $1_1 = HEAP32[$0 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1, HEAP32[$0 + 64 >> 2]);
  $1_1 = HEAP32[$0 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, HEAP32[$0 + 64 >> 2]);
  return $0 | 0;
 }
 
 function $623($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 14164;
  $1_1 = HEAP32[$0 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1, HEAP32[$0 + 64 >> 2]);
  $1_1 = HEAP32[$0 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, HEAP32[$0 + 64 >> 2]);
  $80($0);
 }
 
 function $624($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 144 | 0;
  global$0 = $5_1;
  $613($5_1 + 136 | 0, 14176);
  $7_1 = HEAPF32[$1_1 >> 2];
  $9_1 = HEAPF32[$1_1 + 16 >> 2];
  $11 = $7_1 < $9_1 ? $7_1 : $9_1;
  $10 = HEAPF32[$1_1 + 32 >> 2];
  label$1 : {
   if (($11 < $10 ? $11 : $10) > HEAPF32[$0 + 20 >> 2]) {
    break label$1
   }
   $4_1 = ($7_1 > $9_1 ^ 1) << 4;
   if (HEAPF32[(HEAPF32[$1_1 + $4_1 >> 2] > $10 ? $4_1 : 32) + $1_1 >> 2] < HEAPF32[$0 + 4 >> 2]) {
    break label$1
   }
   $7_1 = HEAPF32[$1_1 + 8 >> 2];
   $4_1 = $1_1 + 24 | 0;
   $9_1 = HEAPF32[$4_1 >> 2];
   $11 = $7_1 < $9_1 ? $7_1 : $9_1;
   $8_1 = $1_1 + 40 | 0;
   $10 = HEAPF32[$8_1 >> 2];
   if (($11 < $10 ? $11 : $10) > HEAPF32[$0 + 28 >> 2]) {
    break label$1
   }
   $4_1 = $7_1 > $9_1 ? $1_1 + 8 | 0 : $4_1;
   if (HEAPF32[(HEAPF32[$4_1 >> 2] > $10 ? $4_1 : $8_1) >> 2] < HEAPF32[$0 + 12 >> 2]) {
    break label$1
   }
   $7_1 = HEAPF32[$1_1 + 4 >> 2];
   $4_1 = $1_1 + 20 | 0;
   $9_1 = HEAPF32[$4_1 >> 2];
   $11 = $7_1 < $9_1 ? $7_1 : $9_1;
   $8_1 = $1_1 + 36 | 0;
   $10 = HEAPF32[$8_1 >> 2];
   if (($11 < $10 ? $11 : $10) > HEAPF32[$0 + 24 >> 2]) {
    break label$1
   }
   $4_1 = $7_1 > $9_1 ? $1_1 + 4 | 0 : $4_1;
   if (HEAP32[HEAP32[HEAP32[$0 + 36 >> 2] + 4 >> 2] + 4 >> 2] > 19 | HEAPF32[(HEAPF32[$4_1 >> 2] > $10 ? $4_1 : $8_1) >> 2] < HEAPF32[$0 + 8 >> 2]) {
    break label$1
   }
   $8_1 = HEAP32[$0 + 48 >> 2];
   $13_1 = $179($5_1 + 24 | 0);
   $6_1 = $1_1 + 8 | 0;
   $12_1 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $5_1 + 92 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $12_1;
   $6_1 = HEAP32[$1_1 + 20 >> 2];
   $4_1 = $5_1 + 100 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $6_1;
   $6_1 = $1_1 + 24 | 0;
   $12_1 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $5_1 + 108 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $12_1;
   $6_1 = HEAP32[$1_1 + 36 >> 2];
   $4_1 = $5_1 + 116 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $6_1;
   $6_1 = $1_1 + 40 | 0;
   $12_1 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $5_1 + 124 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $12_1;
   HEAP32[$5_1 + 24 >> 2] = 14368;
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$5_1 + 84 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$5_1 + 88 >> 2] = $4_1;
   HEAP32[$5_1 + 72 >> 2] = HEAP32[$0 + 56 >> 2];
   HEAP32[$5_1 + 28 >> 2] = 1;
   HEAP32[$5_1 + 20 >> 2] = $3_1;
   HEAP32[$5_1 + 16 >> 2] = $2_1;
   $1_1 = HEAP32[$0 + 40 >> 2];
   HEAP32[$5_1 >> 2] = $1_1;
   $4_1 = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$5_1 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2];
   HEAP32[$5_1 + 8 >> 2] = $4_1;
   $7_1 = HEAPF32[HEAP32[$0 + 44 >> 2] + 32 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $5_1 + 24;
   $1_1 = HEAP32[$0 + 36 >> 2];
   label$2 : {
    if (!!($7_1 > Math_fround(0.0))) {
     $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 8 >> 2]]($8_1, $1_1, $5_1, 0, 2) | 0;
     break label$2;
    }
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 8 >> 2]]($8_1, $1_1, $5_1, HEAP32[$0 + 64 >> 2], 1) | 0;
   }
   $4_1 = HEAP32[$0 + 44 >> 2];
   $6_1 = HEAP32[$4_1 + 8 >> 2];
   label$4 : {
    if (HEAP32[$6_1 + 8 >> 2] == HEAP32[HEAP32[$0 + 40 >> 2] + 8 >> 2]) {
     HEAP32[$4_1 + 8 >> 2] = $5_1;
     FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $2_1, $3_1);
     break label$4;
    }
    $6_1 = HEAP32[$4_1 + 12 >> 2];
    HEAP32[$4_1 + 12 >> 2] = $5_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $2_1, $3_1);
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, HEAP32[$0 + 36 >> 2], $5_1, HEAP32[$0 + 52 >> 2], HEAP32[$0 + 44 >> 2]);
   $2_1 = HEAP32[$0 + 44 >> 2];
   HEAP32[(HEAP32[HEAP32[$2_1 + 8 >> 2] + 8 >> 2] == HEAP32[HEAP32[$0 + 40 >> 2] + 8 >> 2] ? 8 : 12) + $2_1 >> 2] = $6_1;
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 60 >> 2]]($8_1, $1_1);
   $193($13_1);
  }
  $614();
  global$0 = $5_1 + 144 | 0;
 }
 
 function $625($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0);
  $6_1 = global$0 + -64 | 0;
  global$0 = $6_1;
  HEAPF32[$0 + 56 >> 2] = $1_1;
  HEAP32[$0 + 52 >> 2] = $2_1;
  HEAP32[$0 + 40 >> 2] = $4_1;
  HEAP32[$0 + 36 >> 2] = $3_1;
  HEAP32[$0 + 44 >> 2] = $5_1;
  $2_1 = HEAP32[$4_1 + 12 >> 2];
  $7_1 = HEAPF32[$2_1 + 52 >> 2];
  $17_1 = HEAPF32[$2_1 + 56 >> 2];
  $4_1 = HEAP32[$3_1 + 12 >> 2];
  $18_1 = HEAPF32[$4_1 + 52 >> 2];
  $19_1 = HEAPF32[$4_1 + 56 >> 2];
  $8_1 = HEAPF32[$2_1 + 20 >> 2];
  $9_1 = HEAPF32[$2_1 + 36 >> 2];
  $20 = HEAPF32[$4_1 + 20 >> 2];
  $21 = HEAPF32[$4_1 + 36 >> 2];
  $22_1 = HEAPF32[$4_1 + 24 >> 2];
  $10 = HEAPF32[$2_1 + 24 >> 2];
  $23_1 = HEAPF32[$4_1 + 40 >> 2];
  $11 = HEAPF32[$2_1 + 40 >> 2];
  $24_1 = HEAPF32[$4_1 + 32 >> 2];
  $12_1 = HEAPF32[$2_1 + 32 >> 2];
  $25 = HEAPF32[$4_1 >> 2];
  $13_1 = HEAPF32[$2_1 >> 2];
  $26_1 = HEAPF32[$4_1 + 16 >> 2];
  $14 = HEAPF32[$2_1 + 16 >> 2];
  $27_1 = HEAPF32[$2_1 + 48 >> 2];
  $28_1 = HEAPF32[$4_1 + 48 >> 2];
  $15_1 = HEAPF32[$2_1 + 4 >> 2];
  $29_1 = HEAPF32[$4_1 + 4 >> 2];
  $30 = HEAPF32[$4_1 + 8 >> 2];
  $16_1 = HEAPF32[$2_1 + 8 >> 2];
  HEAP32[$6_1 + 60 >> 2] = 0;
  HEAP32[$6_1 + 44 >> 2] = 0;
  HEAP32[$6_1 + 28 >> 2] = 0;
  HEAPF32[$6_1 + 40 >> 2] = Math_fround(Math_fround($16_1 * $30) + Math_fround($10 * $22_1)) + Math_fround($11 * $23_1);
  HEAPF32[$6_1 + 36 >> 2] = Math_fround(Math_fround($16_1 * $29_1) + Math_fround($10 * $20)) + Math_fround($11 * $21);
  HEAPF32[$6_1 + 24 >> 2] = Math_fround(Math_fround($15_1 * $30) + Math_fround($8_1 * $22_1)) + Math_fround($9_1 * $23_1);
  HEAPF32[$6_1 + 20 >> 2] = Math_fround(Math_fround($15_1 * $29_1) + Math_fround($8_1 * $20)) + Math_fround($9_1 * $21);
  $7_1 = Math_fround(-$7_1);
  HEAPF32[$6_1 + 56 >> 2] = Math_fround(Math_fround(Math_fround($10 * $7_1) - Math_fround($16_1 * $27_1)) - Math_fround($11 * $17_1)) + Math_fround(Math_fround(Math_fround($16_1 * $28_1) + Math_fround($10 * $18_1)) + Math_fround($11 * $19_1));
  HEAPF32[$6_1 + 52 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $7_1) - Math_fround($15_1 * $27_1)) - Math_fround($9_1 * $17_1)) + Math_fround(Math_fround(Math_fround($15_1 * $28_1) + Math_fround($8_1 * $18_1)) + Math_fround($9_1 * $19_1));
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAPF32[$6_1 >> 2] = Math_fround(Math_fround($13_1 * $25) + Math_fround($14 * $26_1)) + Math_fround($12_1 * $24_1);
  HEAPF32[$6_1 + 32 >> 2] = Math_fround(Math_fround($16_1 * $25) + Math_fround($10 * $26_1)) + Math_fround($11 * $24_1);
  HEAPF32[$6_1 + 16 >> 2] = Math_fround(Math_fround($15_1 * $25) + Math_fround($8_1 * $26_1)) + Math_fround($9_1 * $24_1);
  HEAPF32[$6_1 + 8 >> 2] = Math_fround(Math_fround($13_1 * $30) + Math_fround($14 * $22_1)) + Math_fround($12_1 * $23_1);
  HEAPF32[$6_1 + 4 >> 2] = Math_fround(Math_fround($13_1 * $29_1) + Math_fround($14 * $20)) + Math_fround($12_1 * $21);
  HEAPF32[$6_1 + 48 >> 2] = Math_fround(Math_fround(Math_fround($14 * $7_1) - Math_fround($13_1 * $27_1)) - Math_fround($12_1 * $17_1)) + Math_fround(Math_fround(Math_fround($13_1 * $28_1) + Math_fround($14 * $18_1)) + Math_fround($12_1 * $19_1));
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $6_1, $0 + 4 | 0, $0 + 20 | 0);
  $1_1 = Math_fround(HEAPF32[$5_1 + 32 >> 2] + $1_1);
  HEAPF32[$0 + 20 >> 2] = $1_1 + HEAPF32[$0 + 20 >> 2];
  $2_1 = $0 + 24 | 0;
  HEAPF32[$2_1 >> 2] = $1_1 + HEAPF32[$2_1 >> 2];
  $2_1 = $0 + 28 | 0;
  HEAPF32[$2_1 >> 2] = $1_1 + HEAPF32[$2_1 >> 2];
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] - $1_1;
  $2_1 = $0 + 8 | 0;
  HEAPF32[$2_1 >> 2] = HEAPF32[$2_1 >> 2] - $1_1;
  $0 = $0 + 12 | 0;
  HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] - $1_1;
  global$0 = $6_1 - -64 | 0;
 }
 
 function $626($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0);
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $613($7_1 + 8 | 0, 14218);
  $6_1 = HEAPU8[$0 + 76 | 0];
  $8_1 = $6_1 ? $1_1 : $2_1;
  $5_1 = HEAP32[$8_1 + 4 >> 2];
  label$1 : {
   if (HEAP32[$5_1 + 4 >> 2] + -21 >>> 0 > 8) {
    break label$1
   }
   $1_1 = $6_1 ? $2_1 : $1_1;
   if (HEAP32[HEAP32[$1_1 + 4 >> 2] + 4 >> 2] > 19) {
    break label$1
   }
   $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 48 >> 2]]($5_1));
   $2_1 = $0 + 72 | 0;
   HEAP32[$4_1 + 4 >> 2] = HEAP32[$2_1 >> 2];
   $6_1 = $0 + 8 | 0;
   $625($6_1, $9_1, $3_1, $1_1, $8_1, $4_1);
   $2_1 = HEAP32[$2_1 >> 2];
   HEAP32[$2_1 + 776 >> 2] = HEAP32[$8_1 + 8 >> 2];
   HEAP32[$2_1 + 772 >> 2] = HEAP32[$1_1 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $6_1, $0 + 12 | 0, $0 + 28 | 0);
   $1_1 = HEAP32[$4_1 + 4 >> 2];
   if (HEAP32[$1_1 + 780 >> 2]) {
    $3_1 = HEAP32[$1_1 + 772 >> 2];
    $5_1 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2];
    $2_1 = ($3_1 | 0) == ($5_1 | 0);
    $6_1 = $1_1;
    $1_1 = HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2];
    $219($6_1, ($2_1 ? $3_1 : $1_1) + 4 | 0, ($2_1 ? $1_1 : $5_1) + 4 | 0);
   }
   $0 = $0 + 44 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
  }
  $614();
  global$0 = $7_1 + 16 | 0;
 }
 
 function $627($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0);
  $3_1 = global$0 - 240 | 0;
  global$0 = $3_1;
  $45_1 = Math_fround(1.0);
  $4_1 = HEAPU8[$0 + 76 | 0];
  $0 = $4_1 ? $2_1 : $1_1;
  $5_1 = Math_fround(HEAPF32[$0 + 116 >> 2] - HEAPF32[$0 + 52 >> 2]);
  $6_1 = Math_fround($5_1 * $5_1);
  $5_1 = Math_fround(HEAPF32[$0 + 120 >> 2] - HEAPF32[$0 + 56 >> 2]);
  $6_1 = Math_fround($6_1 + Math_fround($5_1 * $5_1));
  $5_1 = Math_fround(HEAPF32[$0 + 124 >> 2] - HEAPF32[$0 + 60 >> 2]);
  $6_1 = Math_fround($6_1 + Math_fround($5_1 * $5_1));
  $5_1 = HEAPF32[$0 + 276 >> 2];
  label$1 : {
   if ($6_1 < Math_fround($5_1 * $5_1)) {
    break label$1
   }
   $1_1 = $4_1 ? $1_1 : $2_1;
   $2_1 = HEAP32[$1_1 + 192 >> 2];
   if (HEAP32[$2_1 + 4 >> 2] + -21 >>> 0 > 8) {
    break label$1
   }
   $27_1 = HEAPF32[$0 + 92 >> 2];
   $28_1 = HEAPF32[$0 + 76 >> 2];
   $29_1 = HEAPF32[$0 + 108 >> 2];
   $30 = HEAPF32[$0 + 88 >> 2];
   $31_1 = HEAPF32[$0 + 72 >> 2];
   $32 = HEAPF32[$0 + 104 >> 2];
   $33_1 = HEAPF32[$0 + 100 >> 2];
   $34 = HEAPF32[$0 + 84 >> 2];
   $35 = HEAPF32[$0 + 68 >> 2];
   $11 = HEAPF32[$1_1 + 36 >> 2];
   $12_1 = HEAPF32[$1_1 + 20 >> 2];
   $13_1 = HEAPF32[$1_1 + 4 >> 2];
   $36_1 = HEAPF32[$0 + 28 >> 2];
   $37_1 = HEAPF32[$0 + 12 >> 2];
   $38 = HEAPF32[$0 + 44 >> 2];
   $39_1 = HEAPF32[$0 + 24 >> 2];
   $40_1 = HEAPF32[$0 + 8 >> 2];
   $41_1 = HEAPF32[$0 + 40 >> 2];
   $42 = HEAPF32[$0 + 36 >> 2];
   $43_1 = HEAPF32[$0 + 20 >> 2];
   $44_1 = HEAPF32[$0 + 4 >> 2];
   $14 = HEAPF32[$1_1 + 12 >> 2];
   $21 = HEAPF32[$0 + 116 >> 2];
   $15_1 = HEAPF32[$1_1 + 28 >> 2];
   $6_1 = HEAPF32[$0 + 120 >> 2];
   $16_1 = HEAPF32[$1_1 + 44 >> 2];
   $22_1 = HEAPF32[$0 + 124 >> 2];
   $46_1 = Math_fround(Math_fround(Math_fround($14 * $21) + Math_fround($15_1 * $6_1)) + Math_fround($16_1 * $22_1));
   $17_1 = HEAPF32[$1_1 + 24 >> 2];
   $23_1 = Math_fround(-HEAPF32[$1_1 + 56 >> 2]);
   $18_1 = HEAPF32[$1_1 + 8 >> 2];
   $19_1 = HEAPF32[$1_1 + 52 >> 2];
   $20 = HEAPF32[$1_1 + 40 >> 2];
   $24_1 = HEAPF32[$1_1 + 60 >> 2];
   $10 = Math_fround(Math_fround(Math_fround($17_1 * $23_1) - Math_fround($18_1 * $19_1)) - Math_fround($20 * $24_1));
   $5_1 = Math_fround($10 + Math_fround(Math_fround(Math_fround($18_1 * $21) + Math_fround($17_1 * $6_1)) + Math_fround($20 * $22_1)));
   $7_1 = HEAPF32[$0 + 56 >> 2];
   $8_1 = HEAPF32[$0 + 52 >> 2];
   $9_1 = HEAPF32[$0 + 60 >> 2];
   HEAP32[$3_1 + 236 >> 2] = 0;
   $26_1 = Math_fround(Math_fround(Math_fround($15_1 * $23_1) - Math_fround($14 * $19_1)) - Math_fround($16_1 * $24_1));
   $25 = Math_fround($26_1 + Math_fround(Math_fround(Math_fround($14 * $8_1) + Math_fround($15_1 * $7_1)) + Math_fround($16_1 * $9_1)));
   HEAPF32[$3_1 + 232 >> 2] = $25;
   $10 = Math_fround($10 + Math_fround(Math_fround(Math_fround($18_1 * $8_1) + Math_fround($17_1 * $7_1)) + Math_fround($20 * $9_1)));
   HEAPF32[$3_1 + 228 >> 2] = $10;
   $19_1 = Math_fround(Math_fround(Math_fround($12_1 * $23_1) - Math_fround($13_1 * $19_1)) - Math_fround($11 * $24_1));
   $9_1 = Math_fround($19_1 + Math_fround(Math_fround(Math_fround($13_1 * $8_1) + Math_fround($12_1 * $7_1)) + Math_fround($11 * $9_1)));
   HEAPF32[$3_1 + 224 >> 2] = $9_1;
   $23_1 = $9_1;
   $7_1 = Math_fround($19_1 + Math_fround(Math_fround(Math_fround($13_1 * $21) + Math_fround($12_1 * $6_1)) + Math_fround($11 * $22_1)));
   if (!!($7_1 < $9_1)) {
    HEAPF32[$3_1 + 224 >> 2] = $7_1;
    $23_1 = $7_1;
   }
   $21 = $10;
   if (!!($5_1 < $10)) {
    HEAPF32[$3_1 + 228 >> 2] = $5_1;
    $21 = $5_1;
   }
   $8_1 = Math_fround($26_1 + $46_1);
   $6_1 = $25;
   if (!!($8_1 < $6_1)) {
    HEAPF32[$3_1 + 232 >> 2] = $8_1;
    $6_1 = $8_1;
   }
   HEAP32[$3_1 + 220 >> 2] = 0;
   HEAPF32[$3_1 + 216 >> 2] = $25;
   HEAPF32[$3_1 + 212 >> 2] = $10;
   HEAPF32[$3_1 + 208 >> 2] = $9_1;
   $22_1 = $9_1;
   if (!!($9_1 < $7_1)) {
    HEAPF32[$3_1 + 208 >> 2] = $7_1;
    $22_1 = $7_1;
   }
   $19_1 = $10;
   if (!!($10 < $5_1)) {
    HEAPF32[$3_1 + 212 >> 2] = $5_1;
    $19_1 = $5_1;
   }
   $24_1 = $25;
   if (!!($25 < $8_1)) {
    HEAPF32[$3_1 + 216 >> 2] = $8_1;
    $24_1 = $8_1;
   }
   $26_1 = $6_1;
   $6_1 = HEAPF32[$0 + 272 >> 2];
   HEAPF32[$3_1 + 232 >> 2] = $26_1 - $6_1;
   HEAPF32[$3_1 + 228 >> 2] = $21 - $6_1;
   HEAPF32[$3_1 + 224 >> 2] = $23_1 - $6_1;
   HEAPF32[$3_1 + 216 >> 2] = $6_1 + $24_1;
   HEAPF32[$3_1 + 212 >> 2] = $6_1 + $19_1;
   HEAPF32[$3_1 + 208 >> 2] = $6_1 + $22_1;
   HEAP32[$3_1 + 128 >> 2] = 0;
   HEAPF32[$3_1 + 124 >> 2] = $8_1;
   HEAPF32[$3_1 + 120 >> 2] = $5_1;
   HEAPF32[$3_1 + 116 >> 2] = $7_1;
   HEAP32[$3_1 + 112 >> 2] = 0;
   HEAPF32[$3_1 + 108 >> 2] = Math_fround(Math_fround($14 * $28_1) + Math_fround($15_1 * $27_1)) + Math_fround($16_1 * $29_1);
   HEAPF32[$3_1 + 104 >> 2] = Math_fround(Math_fround($14 * $31_1) + Math_fround($15_1 * $30)) + Math_fround($16_1 * $32);
   HEAPF32[$3_1 + 100 >> 2] = Math_fround(Math_fround($14 * $35) + Math_fround($15_1 * $34)) + Math_fround($16_1 * $33_1);
   HEAP32[$3_1 + 96 >> 2] = 0;
   HEAPF32[$3_1 + 92 >> 2] = Math_fround(Math_fround($18_1 * $28_1) + Math_fround($17_1 * $27_1)) + Math_fround($20 * $29_1);
   HEAPF32[$3_1 + 88 >> 2] = Math_fround(Math_fround($18_1 * $31_1) + Math_fround($17_1 * $30)) + Math_fround($20 * $32);
   HEAPF32[$3_1 + 84 >> 2] = Math_fround(Math_fround($18_1 * $35) + Math_fround($17_1 * $34)) + Math_fround($20 * $33_1);
   HEAP32[$3_1 + 80 >> 2] = 0;
   HEAPF32[$3_1 + 76 >> 2] = Math_fround(Math_fround($13_1 * $28_1) + Math_fround($12_1 * $27_1)) + Math_fround($11 * $29_1);
   HEAPF32[$3_1 + 72 >> 2] = Math_fround(Math_fround($13_1 * $31_1) + Math_fround($12_1 * $30)) + Math_fround($11 * $32);
   HEAP32[$3_1 - -64 >> 2] = 0;
   HEAPF32[$3_1 + 60 >> 2] = $25;
   HEAPF32[$3_1 + 56 >> 2] = $10;
   HEAPF32[$3_1 + 52 >> 2] = $9_1;
   HEAP32[$3_1 + 48 >> 2] = 0;
   HEAPF32[$3_1 + 44 >> 2] = Math_fround(Math_fround($14 * $37_1) + Math_fround($15_1 * $36_1)) + Math_fround($16_1 * $38);
   HEAPF32[$3_1 + 40 >> 2] = Math_fround(Math_fround($14 * $40_1) + Math_fround($15_1 * $39_1)) + Math_fround($16_1 * $41_1);
   HEAPF32[$3_1 + 36 >> 2] = Math_fround(Math_fround($14 * $44_1) + Math_fround($15_1 * $43_1)) + Math_fround($16_1 * $42);
   HEAP32[$3_1 + 32 >> 2] = 0;
   HEAPF32[$3_1 + 28 >> 2] = Math_fround(Math_fround($18_1 * $37_1) + Math_fround($17_1 * $36_1)) + Math_fround($20 * $38);
   HEAPF32[$3_1 + 24 >> 2] = Math_fround(Math_fround($18_1 * $40_1) + Math_fround($17_1 * $39_1)) + Math_fround($20 * $41_1);
   HEAPF32[$3_1 + 20 >> 2] = Math_fround(Math_fround($18_1 * $44_1) + Math_fround($17_1 * $43_1)) + Math_fround($20 * $42);
   HEAP32[$3_1 + 16 >> 2] = 0;
   HEAPF32[$3_1 + 12 >> 2] = Math_fround(Math_fround($13_1 * $37_1) + Math_fround($12_1 * $36_1)) + Math_fround($11 * $38);
   HEAPF32[$3_1 + 8 >> 2] = Math_fround(Math_fround($13_1 * $40_1) + Math_fround($12_1 * $39_1)) + Math_fround($11 * $41_1);
   HEAPF32[$3_1 + 196 >> 2] = $6_1;
   HEAPF32[$3_1 + 68 >> 2] = Math_fround(Math_fround($13_1 * $35) + Math_fround($12_1 * $34)) + Math_fround($11 * $33_1);
   HEAPF32[$3_1 + 4 >> 2] = Math_fround(Math_fround($13_1 * $44_1) + Math_fround($12_1 * $43_1)) + Math_fround($11 * $42);
   HEAP32[$3_1 >> 2] = 14504;
   HEAP32[$3_1 + 200 >> 2] = HEAP32[$0 + 268 >> 2];
   label$8 : {
    if (!$2_1) {
     break label$8
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 64 >> 2]]($2_1, $3_1, $3_1 + 224 | 0, $3_1 + 208 | 0);
    $5_1 = HEAPF32[$3_1 + 200 >> 2];
    if (!($5_1 < HEAPF32[$0 + 268 >> 2])) {
     break label$8
    }
    HEAPF32[$0 + 268 >> 2] = $5_1;
    $45_1 = $5_1;
   }
  }
  global$0 = $3_1 + 240 | 0;
  return Math_fround($45_1);
 }
 
 function $631($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0);
  $2_1 = global$0 - 800 | 0;
  global$0 = $2_1;
  $613($2_1 + 792 | 0, 14688);
  $3_1 = $2_1 + 740 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 752 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 748 >> 2] = 1065353216;
  $3_1 = $2_1 + 772 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 768 >> 2] = 1065353216;
  $3_1 = $2_1 + 780 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 788 >> 2] = 0;
  HEAP32[$2_1 + 732 >> 2] = 0;
  HEAP32[$2_1 + 736 >> 2] = 0;
  HEAP32[$2_1 + 728 >> 2] = 1065353216;
  HEAP32[$2_1 + 760 >> 2] = 0;
  HEAP32[$2_1 + 764 >> 2] = 0;
  HEAP32[$2_1 + 720 >> 2] = 0;
  HEAP32[$2_1 + 724 >> 2] = 0;
  HEAP32[$2_1 + 552 >> 2] = 14008;
  HEAP32[$2_1 + 716 >> 2] = HEAP32[$0 + 200 >> 2];
  $3_1 = HEAP32[$0 + 196 >> 2];
  $145($2_1 + 496 | 0);
  $4_1 = $2_1 + 524 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 520 >> 2] = 1065353216;
  $4_1 = $2_1 + 532 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 540 >> 2] = 0;
  HEAP32[$2_1 + 512 >> 2] = 1065353216;
  HEAP32[$2_1 + 516 >> 2] = 1065353216;
  HEAP32[$2_1 + 496 >> 2] = 7868;
  HEAP32[$2_1 + 548 >> 2] = 0;
  HEAP32[$2_1 + 544 >> 2] = $3_1;
  HEAP32[$2_1 + 528 >> 2] = $3_1;
  HEAP32[$2_1 + 500 >> 2] = 8;
  $3_1 = $179($2_1 + 384 | 0);
  $4_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $6_1 = $2_1 + 452 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $5_1;
  $4_1 = HEAP32[$1_1 + 20 >> 2];
  $5_1 = $2_1 + 460 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $4_1;
  $4_1 = $1_1 + 24 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $6_1 = $2_1 + 468 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $5_1;
  $4_1 = HEAP32[$1_1 + 36 >> 2];
  $5_1 = $2_1 + 476 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $4_1;
  $4_1 = $1_1 + 40 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $6_1 = $2_1 + 484 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $5_1;
  HEAP32[$2_1 + 388 >> 2] = 1;
  HEAP32[$2_1 + 384 >> 2] = 14368;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 444 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 448 >> 2] = $4_1;
  HEAP8[$2_1 + 356 | 0] = 0;
  HEAP32[$2_1 + 332 >> 2] = 953267991;
  label$1 : {
   if (!$616($615($2_1 + 8 | 0, $2_1 + 496 | 0, $2_1 + 384 | 0, $2_1 + 24 | 0), $0 + 4 | 0, $0 + 68 | 0, $2_1 + 728 | 0, $2_1 + 728 | 0, $2_1 + 552 | 0)) {
    break label$1
   }
   $7_1 = HEAPF32[$2_1 + 716 >> 2];
   if (!(HEAPF32[$0 + 200 >> 2] > $7_1)) {
    break label$1
   }
   HEAPF32[$0 + 200 >> 2] = $7_1;
  }
  $193($3_1);
  $614();
  global$0 = $2_1 + 800 | 0;
 }
 
 function $632($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $72($0, $1_1);
  HEAP8[$0 + 24 | 0] = 1;
  HEAP32[$0 >> 2] = 14712;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $5_1 = $0 + 12 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $5_1 = $0 + 32 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP8[$0 + 68 | 0] = $4_1;
  $5_1 = $0 + 52 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP8[$0 + 76 | 0] = 0;
  HEAP32[$0 + 72 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 80 >> 2] = HEAP32[HEAP32[($4_1 ? $3_1 : $2_1) + 4 >> 2] + 72 >> 2];
  $633($0, $2_1, $3_1);
 }
 
 function $633($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $8_1 = HEAP32[$0 + 52 >> 2];
  $11 = HEAPU8[$0 + 68 | 0];
  $9_1 = $11 ? $2_1 : $1_1;
  $10 = HEAP32[$9_1 + 4 >> 2];
  $6_1 = HEAP32[$10 + 20 >> 2];
  if (($8_1 | 0) < ($6_1 | 0)) {
   if (HEAP32[$0 + 56 >> 2] < ($6_1 | 0)) {
    label$3 : {
     if (!$6_1) {
      $3_1 = $8_1;
      break label$3;
     }
     $7_1 = $79($6_1 << 2);
     $3_1 = HEAP32[$0 + 52 >> 2];
    }
    if (($3_1 | 0) >= 1) {
     while (1) {
      HEAP32[$4_1 + $7_1 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + $4_1 >> 2];
      $4_1 = $4_1 + 4 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       continue
      }
      break;
     }
    }
    $3_1 = HEAP32[$0 + 60 >> 2];
    if ($3_1) {
     if (HEAPU8[$0 - -64 | 0]) {
      $80($3_1)
     }
     HEAP32[$0 + 60 >> 2] = 0;
    }
    HEAP32[$0 + 60 >> 2] = $7_1;
    HEAP32[$0 + 56 >> 2] = $6_1;
    HEAP8[$0 - -64 | 0] = 1;
   }
   $4_1 = $8_1 << 2;
   $3_1 = $6_1 - $8_1 | 0;
   while (1) {
    HEAP32[HEAP32[$0 + 60 >> 2] + $4_1 >> 2] = 0;
    $4_1 = $4_1 + 4 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 52 >> 2] = $6_1;
  if (($6_1 | 0) >= 1) {
   $1_1 = $11 ? $1_1 : $2_1;
   $3_1 = 64;
   $4_1 = 0;
   $7_1 = 0;
   while (1) {
    label$12 : {
     if (HEAP32[$10 + 68 >> 2]) {
      HEAP32[HEAP32[$0 + 60 >> 2] + $4_1 >> 2] = 0;
      break label$12;
     }
     $2_1 = HEAP32[HEAP32[$10 + 28 >> 2] + $3_1 >> 2];
     HEAP32[$5_1 + 28 >> 2] = $7_1;
     HEAP32[$5_1 + 24 >> 2] = -1;
     HEAP32[$5_1 + 8 >> 2] = $9_1;
     $8_1 = HEAP32[$9_1 + 12 >> 2];
     HEAP32[$5_1 + 16 >> 2] = HEAP32[$9_1 + 8 >> 2];
     HEAP32[$5_1 + 20 >> 2] = $8_1;
     HEAP32[$5_1 + 12 >> 2] = $2_1;
     $2_1 = HEAP32[$0 + 4 >> 2];
     $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $5_1 + 8 | 0, $1_1, HEAP32[$0 + 72 >> 2], 1) | 0;
     HEAP32[HEAP32[$0 + 60 >> 2] + $4_1 >> 2] = $2_1;
    }
    $3_1 = $3_1 + 80 | 0;
    $4_1 = $4_1 + 4 | 0;
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) != ($6_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $634($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  HEAP32[$0 >> 2] = 14712;
  $3_1 = HEAP32[$0 + 52 >> 2];
  if (($3_1 | 0) >= 1) {
   while (1) {
    $2_1 = HEAP32[HEAP32[$0 + 60 >> 2] + $1_1 >> 2];
    if ($2_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] >> 2]]($2_1) | 0;
     $2_1 = HEAP32[$0 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 60 >> 2]]($2_1, HEAP32[HEAP32[$0 + 60 >> 2] + $1_1 >> 2]);
    }
    $1_1 = $1_1 + 4 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   }
  }
  $1_1 = HEAP32[$0 + 60 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 - -64 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 60 >> 2] = 0;
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $1_1 = HEAP32[$0 + 40 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 44 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 40 >> 2] = 0;
  }
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $1_1 = HEAP32[$0 + 20 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 24 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 20 >> 2] = 0;
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 24 | 0] = 1;
  return $0 | 0;
 }
 
 function $635($0) {
  $0 = $0 | 0;
  $37($634($0));
 }
 
 function $636($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = 0, $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = 0, $36_1 = 0, $37_1 = 0, $38 = 0, $39_1 = 0;
  $5_1 = global$0 - 176 | 0;
  global$0 = $5_1;
  $18_1 = HEAPU8[$0 + 68 | 0];
  $35 = $18_1 ? $2_1 : $1_1;
  $32 = HEAP32[$35 + 4 >> 2];
  if (HEAP32[$32 + 72 >> 2] != HEAP32[$0 + 80 >> 2]) {
   $8_1 = HEAP32[$0 + 52 >> 2];
   if (($8_1 | 0) >= 1) {
    while (1) {
     $7_1 = HEAP32[HEAP32[$0 + 60 >> 2] + $6_1 >> 2];
     if ($7_1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] >> 2]]($7_1) | 0;
      $7_1 = HEAP32[$0 + 4 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 60 >> 2]]($7_1, HEAP32[HEAP32[$0 + 60 >> 2] + $6_1 >> 2]);
     }
     $6_1 = $6_1 + 4 | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue
     }
     break;
    }
   }
   $633($0, $1_1, $2_1);
   HEAP32[$0 + 80 >> 2] = HEAP32[$32 + 72 >> 2];
  }
  $7_1 = HEAP32[$0 + 52 >> 2];
  label$5 : {
   if (!$7_1) {
    break label$5
   }
   $8_1 = HEAP32[$32 + 68 >> 2];
   HEAP32[$5_1 + 164 >> 2] = $4_1;
   HEAP32[$5_1 + 160 >> 2] = $3_1;
   $18_1 = $18_1 ? $1_1 : $2_1;
   HEAP32[$5_1 + 152 >> 2] = $18_1;
   HEAP32[$5_1 + 148 >> 2] = $35;
   HEAP32[$5_1 + 144 >> 2] = 14784;
   HEAP32[$5_1 + 172 >> 2] = HEAP32[$0 + 72 >> 2];
   HEAP32[$5_1 + 168 >> 2] = HEAP32[$0 + 60 >> 2];
   HEAP32[$5_1 + 156 >> 2] = HEAP32[$0 + 4 >> 2];
   $6_1 = HEAP32[$0 + 32 >> 2];
   if (($6_1 | 0) <= -1) {
    if (HEAP32[$0 + 36 >> 2] <= -1) {
     $1_1 = HEAP32[$0 + 40 >> 2];
     if ($1_1) {
      if (HEAPU8[$0 + 44 | 0]) {
       $80($1_1)
      }
      HEAP32[$0 + 40 >> 2] = 0;
     }
     HEAP32[$0 + 36 >> 2] = 0;
     HEAP32[$0 + 40 >> 2] = 0;
     HEAP8[$0 + 44 | 0] = 1;
    }
    $7_1 = $6_1 << 2;
    while (1) {
     HEAP32[HEAP32[$0 + 40 >> 2] + $7_1 >> 2] = 0;
     $7_1 = $7_1 + 4 | 0;
     $1_1 = $6_1 + 1 | 0;
     $2_1 = $1_1 >>> 0 >= $6_1 >>> 0;
     $6_1 = $1_1;
     if ($2_1) {
      continue
     }
     break;
    };
    $7_1 = HEAP32[$0 + 52 >> 2];
   }
   HEAP32[$0 + 32 >> 2] = 0;
   if (($7_1 | 0) >= 1) {
    $38 = $0 + 28 | 0;
    $2_1 = 0;
    while (1) {
     $1_1 = HEAP32[HEAP32[$0 + 60 >> 2] + ($2_1 << 2) >> 2];
     if ($1_1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, $38);
      $6_1 = HEAP32[$0 + 32 >> 2];
      if (($6_1 | 0) >= 1) {
       $7_1 = 0;
       $1_1 = 0;
       while (1) {
        $3_1 = HEAP32[HEAP32[$0 + 40 >> 2] + $7_1 >> 2];
        if (HEAP32[$3_1 + 780 >> 2]) {
         HEAP32[$4_1 + 4 >> 2] = $3_1;
         $36_1 = HEAP32[$3_1 + 772 >> 2];
         $37_1 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2];
         $6_1 = ($36_1 | 0) == ($37_1 | 0);
         $39_1 = $3_1;
         $3_1 = HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2];
         $219($39_1, ($6_1 ? $36_1 : $3_1) + 4 | 0, ($6_1 ? $3_1 : $37_1) + 4 | 0);
         HEAP32[$4_1 + 4 >> 2] = 0;
         $6_1 = HEAP32[$0 + 32 >> 2];
        }
        $7_1 = $7_1 + 4 | 0;
        $1_1 = $1_1 + 1 | 0;
        if (($1_1 | 0) < ($6_1 | 0)) {
         continue
        }
        break;
       };
      }
      if (($6_1 | 0) <= -1) {
       if (HEAP32[$0 + 36 >> 2] <= -1) {
        $1_1 = HEAP32[$0 + 40 >> 2];
        if ($1_1) {
         if (HEAPU8[$0 + 44 | 0]) {
          $80($1_1)
         }
         HEAP32[$0 + 40 >> 2] = 0;
        }
        HEAP8[$0 + 44 | 0] = 1;
        HEAP32[$0 + 36 >> 2] = 0;
        HEAP32[$0 + 40 >> 2] = 0;
       }
       $7_1 = $6_1 << 2;
       while (1) {
        HEAP32[HEAP32[$0 + 40 >> 2] + $7_1 >> 2] = 0;
        $7_1 = $7_1 + 4 | 0;
        $1_1 = $6_1 + 1 | 0;
        $3_1 = $1_1 >>> 0 >= $6_1 >>> 0;
        $6_1 = $1_1;
        if ($3_1) {
         continue
        }
        break;
       };
      }
      HEAP32[$0 + 32 >> 2] = 0;
      $7_1 = HEAP32[$0 + 52 >> 2];
     }
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) < ($7_1 | 0)) {
      continue
     }
     break;
    };
   }
   label$22 : {
    if (!$8_1) {
     if (($7_1 | 0) < 1) {
      break label$22
     }
     $6_1 = 0;
     $8_1 = 64;
     while (1) {
      $637($5_1 + 144 | 0, HEAP32[HEAP32[$32 + 28 >> 2] + $8_1 >> 2], $6_1);
      $8_1 = $8_1 + 80 | 0;
      $6_1 = $6_1 + 1 | 0;
      if (($7_1 | 0) != ($6_1 | 0)) {
       continue
      }
      break;
     };
     break label$22;
    }
    $1_1 = HEAP32[$35 + 12 >> 2];
    $19_1 = HEAPF32[$1_1 + 52 >> 2];
    $20 = HEAPF32[$1_1 + 56 >> 2];
    $2_1 = HEAP32[$18_1 + 12 >> 2];
    $21 = HEAPF32[$2_1 + 52 >> 2];
    $22_1 = HEAPF32[$2_1 + 56 >> 2];
    $9_1 = HEAPF32[$1_1 + 20 >> 2];
    $10 = HEAPF32[$1_1 + 36 >> 2];
    $23_1 = HEAPF32[$2_1 + 20 >> 2];
    $24_1 = HEAPF32[$2_1 + 36 >> 2];
    $25 = HEAPF32[$2_1 + 24 >> 2];
    $11 = HEAPF32[$1_1 + 24 >> 2];
    $26_1 = HEAPF32[$2_1 + 40 >> 2];
    $12_1 = HEAPF32[$1_1 + 40 >> 2];
    $27_1 = HEAPF32[$2_1 + 32 >> 2];
    $13_1 = HEAPF32[$1_1 + 32 >> 2];
    $28_1 = HEAPF32[$2_1 >> 2];
    $14 = HEAPF32[$1_1 >> 2];
    $29_1 = HEAPF32[$2_1 + 16 >> 2];
    $15_1 = HEAPF32[$1_1 + 16 >> 2];
    $30 = HEAPF32[$1_1 + 48 >> 2];
    $31_1 = HEAPF32[$2_1 + 48 >> 2];
    $16_1 = HEAPF32[$1_1 + 4 >> 2];
    $33_1 = HEAPF32[$2_1 + 4 >> 2];
    $34 = HEAPF32[$2_1 + 8 >> 2];
    $17_1 = HEAPF32[$1_1 + 8 >> 2];
    HEAP32[$5_1 + 108 >> 2] = 0;
    HEAP32[$5_1 + 92 >> 2] = 0;
    HEAP32[$5_1 + 76 >> 2] = 0;
    HEAPF32[$5_1 + 88 >> 2] = Math_fround(Math_fround($17_1 * $34) + Math_fround($11 * $25)) + Math_fround($12_1 * $26_1);
    HEAPF32[$5_1 + 84 >> 2] = Math_fround(Math_fround($17_1 * $33_1) + Math_fround($11 * $23_1)) + Math_fround($12_1 * $24_1);
    HEAPF32[$5_1 + 72 >> 2] = Math_fround(Math_fround($16_1 * $34) + Math_fround($9_1 * $25)) + Math_fround($10 * $26_1);
    HEAPF32[$5_1 + 68 >> 2] = Math_fround(Math_fround($16_1 * $33_1) + Math_fround($9_1 * $23_1)) + Math_fround($10 * $24_1);
    $19_1 = Math_fround(-$19_1);
    HEAPF32[$5_1 + 104 >> 2] = Math_fround(Math_fround(Math_fround($11 * $19_1) - Math_fround($17_1 * $30)) - Math_fround($12_1 * $20)) + Math_fround(Math_fround(Math_fround($17_1 * $31_1) + Math_fround($11 * $21)) + Math_fround($12_1 * $22_1));
    HEAPF32[$5_1 + 100 >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $19_1) - Math_fround($16_1 * $30)) - Math_fround($10 * $20)) + Math_fround(Math_fround(Math_fround($16_1 * $31_1) + Math_fround($9_1 * $21)) + Math_fround($10 * $22_1));
    HEAP32[$5_1 + 60 >> 2] = 0;
    HEAPF32[$5_1 + 48 >> 2] = Math_fround(Math_fround($14 * $28_1) + Math_fround($15_1 * $29_1)) + Math_fround($13_1 * $27_1);
    HEAPF32[$5_1 + 80 >> 2] = Math_fround(Math_fround($17_1 * $28_1) + Math_fround($11 * $29_1)) + Math_fround($12_1 * $27_1);
    HEAPF32[$5_1 + 64 >> 2] = Math_fround(Math_fround($16_1 * $28_1) + Math_fround($9_1 * $29_1)) + Math_fround($10 * $27_1);
    HEAPF32[$5_1 + 56 >> 2] = Math_fround(Math_fround($14 * $34) + Math_fround($15_1 * $25)) + Math_fround($13_1 * $26_1);
    HEAPF32[$5_1 + 52 >> 2] = Math_fround(Math_fround($14 * $33_1) + Math_fround($15_1 * $23_1)) + Math_fround($13_1 * $24_1);
    HEAPF32[$5_1 + 96 >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $19_1) - Math_fround($14 * $30)) - Math_fround($13_1 * $20)) + Math_fround(Math_fround(Math_fround($14 * $31_1) + Math_fround($15_1 * $21)) + Math_fround($13_1 * $22_1));
    $1_1 = HEAP32[$18_1 + 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $5_1 + 48 | 0, $5_1 + 128 | 0, $5_1 + 112 | 0);
    $9_1 = HEAPF32[$4_1 + 32 >> 2];
    HEAPF32[$5_1 + 128 >> 2] = HEAPF32[$5_1 + 128 >> 2] - $9_1;
    HEAPF32[$5_1 + 132 >> 2] = HEAPF32[$5_1 + 132 >> 2] - $9_1;
    HEAPF32[$5_1 + 136 >> 2] = HEAPF32[$5_1 + 136 >> 2] - $9_1;
    HEAPF32[$5_1 + 112 >> 2] = $9_1 + HEAPF32[$5_1 + 112 >> 2];
    HEAPF32[$5_1 + 116 >> 2] = $9_1 + HEAPF32[$5_1 + 116 >> 2];
    HEAPF32[$5_1 + 120 >> 2] = $9_1 + HEAPF32[$5_1 + 120 >> 2];
    $2_1 = HEAP32[$5_1 + 140 >> 2];
    $1_1 = $5_1 + 24 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 136 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$5_1 + 124 >> 2];
    $1_1 = $5_1 + 40 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 120 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $1_1 = HEAP32[$5_1 + 116 >> 2];
    HEAP32[$5_1 + 32 >> 2] = HEAP32[$5_1 + 112 >> 2];
    HEAP32[$5_1 + 36 >> 2] = $1_1;
    $1_1 = HEAP32[$5_1 + 132 >> 2];
    HEAP32[$5_1 + 16 >> 2] = HEAP32[$5_1 + 128 >> 2];
    HEAP32[$5_1 + 20 >> 2] = $1_1;
    $638(HEAP32[$8_1 >> 2], $5_1 + 16 | 0, $0 + 8 | 0, $5_1 + 144 | 0);
   }
   $1_1 = HEAP32[$0 + 52 >> 2];
   $6_1 = HEAP32[$0 + 32 >> 2];
   if (($6_1 | 0) <= -1) {
    if (HEAP32[$0 + 36 >> 2] <= -1) {
     $2_1 = HEAP32[$0 + 40 >> 2];
     if ($2_1) {
      if (HEAPU8[$0 + 44 | 0]) {
       $80($2_1)
      }
      HEAP32[$0 + 40 >> 2] = 0;
     }
     HEAP32[$0 + 36 >> 2] = 0;
     HEAP32[$0 + 40 >> 2] = 0;
     HEAP8[$0 + 44 | 0] = 1;
    }
    $7_1 = $6_1 << 2;
    while (1) {
     HEAP32[HEAP32[$0 + 40 >> 2] + $7_1 >> 2] = 0;
     $7_1 = $7_1 + 4 | 0;
     $2_1 = $6_1 + 1 | 0;
     $3_1 = $2_1 >>> 0 >= $6_1 >>> 0;
     $6_1 = $2_1;
     if ($3_1) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 + 32 >> 2] = 0;
   if (($1_1 | 0) < 1) {
    break label$5
   }
   $4_1 = 64;
   $8_1 = 0;
   while (1) {
    label$31 : {
     if (!HEAP32[HEAP32[$0 + 60 >> 2] + $8_1 >> 2]) {
      break label$31
     }
     $2_1 = HEAP32[$32 + 28 >> 2] + $4_1 | 0;
     $6_1 = HEAP32[$2_1 >> 2];
     $3_1 = HEAP32[$35 + 12 >> 2];
     $33_1 = HEAPF32[$3_1 + 52 >> 2];
     $34 = HEAPF32[$3_1 + 56 >> 2];
     $20 = HEAPF32[$2_1 + -16 >> 2];
     $21 = HEAPF32[$2_1 + -12 >> 2];
     $22_1 = HEAPF32[$2_1 + -8 >> 2];
     $9_1 = HEAPF32[$3_1 + 20 >> 2];
     $10 = HEAPF32[$3_1 + 24 >> 2];
     $23_1 = HEAPF32[$2_1 + -64 >> 2];
     $24_1 = HEAPF32[$2_1 + -48 >> 2];
     $25 = HEAPF32[$2_1 + -32 >> 2];
     $26_1 = HEAPF32[$2_1 + -60 >> 2];
     $27_1 = HEAPF32[$2_1 + -44 >> 2];
     $28_1 = HEAPF32[$2_1 + -28 >> 2];
     $29_1 = HEAPF32[$2_1 + -56 >> 2];
     $11 = HEAPF32[$3_1 + 36 >> 2];
     $30 = HEAPF32[$2_1 + -40 >> 2];
     $12_1 = HEAPF32[$3_1 + 40 >> 2];
     $31_1 = HEAPF32[$2_1 + -24 >> 2];
     $19_1 = HEAPF32[$3_1 + 48 >> 2];
     $13_1 = HEAPF32[$3_1 + 8 >> 2];
     $14 = HEAPF32[$3_1 >> 2];
     $15_1 = HEAPF32[$3_1 + 4 >> 2];
     $16_1 = HEAPF32[$3_1 + 16 >> 2];
     $17_1 = HEAPF32[$3_1 + 32 >> 2];
     $7_1 = 0;
     HEAP32[$5_1 + 108 >> 2] = 0;
     HEAP32[$5_1 + 92 >> 2] = 0;
     HEAP32[$5_1 + 76 >> 2] = 0;
     HEAP32[$5_1 + 60 >> 2] = 0;
     HEAPF32[$5_1 + 88 >> 2] = Math_fround(Math_fround($17_1 * $29_1) + Math_fround($11 * $30)) + Math_fround($12_1 * $31_1);
     HEAPF32[$5_1 + 84 >> 2] = Math_fround(Math_fround($17_1 * $26_1) + Math_fround($11 * $27_1)) + Math_fround($12_1 * $28_1);
     HEAPF32[$5_1 + 80 >> 2] = Math_fround(Math_fround($17_1 * $23_1) + Math_fround($11 * $24_1)) + Math_fround($12_1 * $25);
     HEAPF32[$5_1 + 72 >> 2] = Math_fround(Math_fround($16_1 * $29_1) + Math_fround($9_1 * $30)) + Math_fround($10 * $31_1);
     HEAPF32[$5_1 + 68 >> 2] = Math_fround(Math_fround($16_1 * $26_1) + Math_fround($9_1 * $27_1)) + Math_fround($10 * $28_1);
     HEAPF32[$5_1 + 64 >> 2] = Math_fround(Math_fround($16_1 * $23_1) + Math_fround($9_1 * $24_1)) + Math_fround($10 * $25);
     HEAPF32[$5_1 + 56 >> 2] = Math_fround(Math_fround($14 * $29_1) + Math_fround($15_1 * $30)) + Math_fround($13_1 * $31_1);
     HEAPF32[$5_1 + 52 >> 2] = Math_fround(Math_fround($14 * $26_1) + Math_fround($15_1 * $27_1)) + Math_fround($13_1 * $28_1);
     HEAPF32[$5_1 + 48 >> 2] = Math_fround(Math_fround($14 * $23_1) + Math_fround($15_1 * $24_1)) + Math_fround($13_1 * $25);
     HEAPF32[$5_1 + 104 >> 2] = $34 + Math_fround(Math_fround(Math_fround($17_1 * $20) + Math_fround($11 * $21)) + Math_fround($12_1 * $22_1));
     HEAPF32[$5_1 + 100 >> 2] = $33_1 + Math_fround(Math_fround(Math_fround($16_1 * $20) + Math_fround($9_1 * $21)) + Math_fround($10 * $22_1));
     HEAPF32[$5_1 + 96 >> 2] = $19_1 + Math_fround(Math_fround(Math_fround($14 * $20) + Math_fround($15_1 * $21)) + Math_fround($13_1 * $22_1));
     FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 8 >> 2]]($6_1, $5_1 + 48 | 0, $5_1 + 16 | 0, $5_1 + 128 | 0);
     $2_1 = HEAP32[$18_1 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, HEAP32[$18_1 + 12 >> 2], $5_1 + 112 | 0, $5_1);
     $6_1 = 0;
     label$32 : {
      if (HEAPF32[$5_1 + 16 >> 2] > HEAPF32[$5_1 >> 2]) {
       break label$32
      }
      $6_1 = 0;
      if (HEAPF32[$5_1 + 128 >> 2] < HEAPF32[$5_1 + 112 >> 2]) {
       break label$32
      }
      $6_1 = 1;
     }
     $7_1 = HEAPF32[$5_1 + 136 >> 2] < HEAPF32[$5_1 + 120 >> 2] | HEAPF32[$5_1 + 24 >> 2] > HEAPF32[$5_1 + 8 >> 2] ? $7_1 : $6_1;
     if ($7_1 ^ 1 ? 0 : !(HEAPF32[$5_1 + 132 >> 2] < HEAPF32[$5_1 + 116 >> 2] | HEAPF32[$5_1 + 20 >> 2] > HEAPF32[$5_1 + 4 >> 2])) {
      break label$31
     }
     $2_1 = HEAP32[HEAP32[$0 + 60 >> 2] + $8_1 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] >> 2]]($2_1) | 0;
     $2_1 = HEAP32[$0 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 60 >> 2]]($2_1, HEAP32[HEAP32[$0 + 60 >> 2] + $8_1 >> 2]);
     HEAP32[HEAP32[$0 + 60 >> 2] + $8_1 >> 2] = 0;
    }
    $4_1 = $4_1 + 80 | 0;
    $8_1 = $8_1 + 4 | 0;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue
    }
    break;
   };
  }
  global$0 = $5_1 + 176 | 0;
 }
 
 function $637($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0);
  $3_1 = global$0 - 160 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[$0 + 4 >> 2];
  $5_1 = HEAP32[$4_1 + 12 >> 2];
  $16_1 = HEAPF32[$5_1 + 52 >> 2];
  $10 = HEAPF32[$5_1 + 56 >> 2];
  $6_1 = HEAPF32[$5_1 + 24 >> 2];
  $11 = HEAPF32[$5_1 + 20 >> 2];
  $7_1 = HEAPF32[$5_1 + 40 >> 2];
  $8_1 = HEAPF32[$5_1 + 36 >> 2];
  $4_1 = HEAP32[HEAP32[$4_1 + 4 >> 2] + 28 >> 2];
  $27_1 = HEAPF32[$5_1 + 48 >> 2];
  $12_1 = HEAPF32[$5_1 + 8 >> 2];
  $13_1 = HEAPF32[$5_1 >> 2];
  $14 = HEAPF32[$5_1 + 4 >> 2];
  $15_1 = HEAPF32[$5_1 + 16 >> 2];
  $9_1 = HEAPF32[$5_1 + 32 >> 2];
  $5_1 = 0;
  HEAP32[$3_1 + 156 >> 2] = 0;
  HEAP32[$3_1 + 140 >> 2] = 0;
  HEAP32[$3_1 + 124 >> 2] = 0;
  $4_1 = $4_1 + Math_imul($2_1, 80) | 0;
  $17_1 = HEAPF32[$4_1 + 8 >> 2];
  $18_1 = HEAPF32[$4_1 + 24 >> 2];
  $19_1 = HEAPF32[$4_1 + 40 >> 2];
  HEAPF32[$3_1 + 136 >> 2] = Math_fround(Math_fround($9_1 * $17_1) + Math_fround($8_1 * $18_1)) + Math_fround($7_1 * $19_1);
  $20 = HEAPF32[$4_1 + 4 >> 2];
  $21 = HEAPF32[$4_1 + 20 >> 2];
  $22_1 = HEAPF32[$4_1 + 36 >> 2];
  HEAPF32[$3_1 + 132 >> 2] = Math_fround(Math_fround($9_1 * $20) + Math_fround($8_1 * $21)) + Math_fround($7_1 * $22_1);
  HEAPF32[$3_1 + 120 >> 2] = Math_fround(Math_fround($15_1 * $17_1) + Math_fround($11 * $18_1)) + Math_fround($6_1 * $19_1);
  HEAPF32[$3_1 + 116 >> 2] = Math_fround(Math_fround($15_1 * $20) + Math_fround($11 * $21)) + Math_fround($6_1 * $22_1);
  $23_1 = $10;
  $10 = HEAPF32[$4_1 + 48 >> 2];
  $24_1 = HEAPF32[$4_1 + 52 >> 2];
  $25 = HEAPF32[$4_1 + 56 >> 2];
  HEAPF32[$3_1 + 152 >> 2] = $23_1 + Math_fround(Math_fround(Math_fround($9_1 * $10) + Math_fround($8_1 * $24_1)) + Math_fround($7_1 * $25));
  HEAPF32[$3_1 + 148 >> 2] = $16_1 + Math_fround(Math_fround(Math_fround($15_1 * $10) + Math_fround($11 * $24_1)) + Math_fround($6_1 * $25));
  HEAP32[$3_1 + 108 >> 2] = 0;
  $23_1 = $9_1;
  $9_1 = HEAPF32[$4_1 >> 2];
  $16_1 = $8_1;
  $8_1 = HEAPF32[$4_1 + 16 >> 2];
  $28_1 = $7_1;
  $7_1 = HEAPF32[$4_1 + 32 >> 2];
  HEAPF32[$3_1 + 128 >> 2] = Math_fround(Math_fround($23_1 * $9_1) + Math_fround($16_1 * $8_1)) + Math_fround($28_1 * $7_1);
  HEAPF32[$3_1 + 112 >> 2] = Math_fround(Math_fround($15_1 * $9_1) + Math_fround($11 * $8_1)) + Math_fround($6_1 * $7_1);
  HEAPF32[$3_1 + 96 >> 2] = Math_fround(Math_fround($13_1 * $9_1) + Math_fround($14 * $8_1)) + Math_fround($12_1 * $7_1);
  HEAPF32[$3_1 + 104 >> 2] = Math_fround(Math_fround($13_1 * $17_1) + Math_fround($14 * $18_1)) + Math_fround($12_1 * $19_1);
  HEAPF32[$3_1 + 100 >> 2] = Math_fround(Math_fround($13_1 * $20) + Math_fround($14 * $21)) + Math_fround($12_1 * $22_1);
  HEAPF32[$3_1 + 144 >> 2] = $27_1 + Math_fround(Math_fround(Math_fround($13_1 * $10) + Math_fround($14 * $24_1)) + Math_fround($12_1 * $25));
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 96 | 0, $3_1 + 80 | 0, $3_1 - -64 | 0);
  $6_1 = HEAPF32[HEAP32[$0 + 20 >> 2] + 32 >> 2];
  HEAPF32[$3_1 + 80 >> 2] = HEAPF32[$3_1 + 80 >> 2] - $6_1;
  HEAPF32[$3_1 + 84 >> 2] = HEAPF32[$3_1 + 84 >> 2] - $6_1;
  HEAPF32[$3_1 + 88 >> 2] = HEAPF32[$3_1 + 88 >> 2] - $6_1;
  HEAPF32[$3_1 + 64 >> 2] = $6_1 + HEAPF32[$3_1 + 64 >> 2];
  HEAPF32[$3_1 + 68 >> 2] = $6_1 + HEAPF32[$3_1 + 68 >> 2];
  HEAPF32[$3_1 + 72 >> 2] = $6_1 + HEAPF32[$3_1 + 72 >> 2];
  $4_1 = HEAP32[$0 + 8 >> 2];
  $26_1 = HEAP32[$4_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$26_1 >> 2] + 8 >> 2]]($26_1, HEAP32[$4_1 + 12 >> 2], $3_1 + 48 | 0, $3_1 + 32 | 0);
  $4_1 = HEAP32[6289];
  label$1 : {
   if ($4_1) {
    if (!FUNCTION_TABLE[$4_1](HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2], $1_1)) {
     break label$1
    }
   }
   $5_1 = HEAPF32[$3_1 + 64 >> 2] < HEAPF32[$3_1 + 48 >> 2] | HEAPF32[$3_1 + 80 >> 2] > HEAPF32[$3_1 + 32 >> 2] ? $5_1 : 1;
   $4_1 = 0;
   $4_1 = HEAPF32[$3_1 + 72 >> 2] < HEAPF32[$3_1 + 56 >> 2] | HEAPF32[$3_1 + 88 >> 2] > HEAPF32[$3_1 + 40 >> 2] ? $4_1 : $5_1;
   if (HEAPF32[$3_1 + 68 >> 2] < HEAPF32[$3_1 + 52 >> 2] | HEAPF32[$3_1 + 84 >> 2] > HEAPF32[$3_1 + 36 >> 2] | $4_1 ^ 1) {
    break label$1
   }
   HEAP32[$3_1 + 28 >> 2] = $2_1;
   HEAP32[$3_1 + 24 >> 2] = -1;
   HEAP32[$3_1 + 12 >> 2] = $1_1;
   $1_1 = HEAP32[$0 + 4 >> 2];
   HEAP32[$3_1 + 8 >> 2] = $1_1;
   HEAP32[$3_1 + 16 >> 2] = HEAP32[$1_1 + 8 >> 2];
   $6_1 = HEAPF32[HEAP32[$0 + 20 >> 2] + 32 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $3_1 + 96;
   label$5 : {
    if (!!($6_1 > Math_fround(0.0))) {
     $1_1 = HEAP32[$0 + 12 >> 2];
     $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 8 | 0, HEAP32[$0 + 8 >> 2], 0, 2) | 0;
     break label$5;
    }
    $5_1 = $2_1 << 2;
    $1_1 = HEAP32[$5_1 + HEAP32[$0 + 24 >> 2] >> 2];
    if ($1_1) {
     break label$5
    }
    $1_1 = HEAP32[$0 + 12 >> 2];
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 8 | 0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 28 >> 2], 1) | 0;
    HEAP32[$5_1 + HEAP32[$0 + 24 >> 2] >> 2] = $1_1;
    $1_1 = HEAP32[$5_1 + HEAP32[$0 + 24 >> 2] >> 2];
   }
   $5_1 = HEAP32[$0 + 20 >> 2];
   $4_1 = HEAP32[$5_1 + 8 >> 2];
   label$7 : {
    if (HEAP32[$4_1 + 8 >> 2] == HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2]) {
     HEAP32[$5_1 + 8 >> 2] = $3_1 + 8;
     FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 8 >> 2]]($5_1, -1, $2_1);
     break label$7;
    }
    $4_1 = HEAP32[$5_1 + 12 >> 2];
    HEAP32[$5_1 + 12 >> 2] = $3_1 + 8;
    FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2]]($5_1, -1, $2_1);
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 8 | 0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
   $1_1 = HEAP32[$0 + 20 >> 2];
   HEAP32[(HEAP32[HEAP32[$1_1 + 8 >> 2] + 8 >> 2] == HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2] ? 8 : 12) + $1_1 >> 2] = $4_1;
  }
  global$0 = $3_1 + 160 | 0;
 }
 
 function $638($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0);
  if ($0) {
   $9_1 = HEAPF32[$1_1 + 24 >> 2];
   $10 = HEAPF32[$1_1 + 20 >> 2];
   $5_1 = HEAP32[$2_1 + 8 >> 2];
   $11 = HEAPF32[$1_1 + 16 >> 2];
   $12_1 = HEAPF32[$1_1 + 8 >> 2];
   $13_1 = HEAPF32[$1_1 + 4 >> 2];
   $14 = HEAPF32[$1_1 >> 2];
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   if (($1_1 | 0) <= -1) {
    if (($5_1 | 0) <= -1) {
     $4_1 = HEAP32[$2_1 + 12 >> 2];
     if ($4_1) {
      if (HEAPU8[$2_1 + 16 | 0]) {
       $80($4_1)
      }
      HEAP32[$2_1 + 12 >> 2] = 0;
     }
     HEAP8[$2_1 + 16 | 0] = 1;
     HEAP32[$2_1 + 8 >> 2] = 0;
     HEAP32[$2_1 + 12 >> 2] = 0;
     $5_1 = 0;
    }
    $4_1 = $1_1 << 2;
    while (1) {
     HEAP32[HEAP32[$2_1 + 12 >> 2] + $4_1 >> 2] = 0;
     $4_1 = $4_1 + 4 | 0;
     $6_1 = $1_1 + 1 | 0;
     $7_1 = $6_1 >>> 0 >= $1_1 >>> 0;
     $1_1 = $6_1;
     if ($7_1) {
      continue
     }
     break;
    };
   }
   $6_1 = 0;
   HEAP32[$2_1 + 4 >> 2] = 0;
   if (($5_1 | 0) <= 63) {
    $5_1 = $79(256);
    $6_1 = HEAP32[$2_1 + 4 >> 2];
    if (($6_1 | 0) >= 1) {
     $1_1 = 0;
     $4_1 = $6_1;
     while (1) {
      HEAP32[$1_1 + $5_1 >> 2] = HEAP32[HEAP32[$2_1 + 12 >> 2] + $1_1 >> 2];
      $1_1 = $1_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break;
     };
    }
    $1_1 = HEAP32[$2_1 + 12 >> 2];
    if ($1_1) {
     if (HEAPU8[$2_1 + 16 | 0]) {
      $80($1_1);
      $6_1 = HEAP32[$2_1 + 4 >> 2];
     }
     HEAP32[$2_1 + 12 >> 2] = 0;
    }
    HEAP32[$2_1 + 12 >> 2] = $5_1;
    HEAP8[$2_1 + 16 | 0] = 1;
    HEAP32[$2_1 + 8 >> 2] = 64;
    $5_1 = 64;
   }
   label$12 : {
    if (($5_1 | 0) != ($6_1 | 0)) {
     break label$12
    }
    $8_1 = $5_1 << 1;
    if (($5_1 | 0) >= ($8_1 | 0)) {
     $6_1 = $5_1;
     break label$12;
    }
    $1_1 = 0;
    label$14 : {
     label$15 : {
      if (!$5_1) {
       $7_1 = 0;
       $6_1 = $5_1;
       break label$15;
      }
      $7_1 = $79($5_1 << 3);
      $6_1 = HEAP32[$2_1 + 4 >> 2];
      if (($6_1 | 0) < 1) {
       break label$14
      }
     }
     $4_1 = $6_1;
     while (1) {
      HEAP32[$1_1 + $7_1 >> 2] = HEAP32[HEAP32[$2_1 + 12 >> 2] + $1_1 >> 2];
      $1_1 = $1_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break;
     };
    }
    $1_1 = HEAP32[$2_1 + 12 >> 2];
    if ($1_1) {
     if (HEAPU8[$2_1 + 16 | 0]) {
      $80($1_1);
      $6_1 = HEAP32[$2_1 + 4 >> 2];
     }
     HEAP32[$2_1 + 12 >> 2] = 0;
    }
    HEAP32[$2_1 + 12 >> 2] = $7_1;
    HEAP8[$2_1 + 16 | 0] = 1;
    HEAP32[$2_1 + 8 >> 2] = $8_1;
   }
   $1_1 = $6_1 + 1 | 0;
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   HEAP32[HEAP32[$2_1 + 12 >> 2] + ($6_1 << 2) >> 2] = $0;
   while (1) {
    $4_1 = $1_1 + -1 | 0;
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $6_1 = HEAP32[$2_1 + 12 >> 2];
    $7_1 = HEAP32[$6_1 + ($4_1 << 2) >> 2];
    label$21 : {
     if (!(HEAPF32[$7_1 >> 2] <= $11)) {
      $1_1 = $4_1;
      break label$21;
     }
     if (!(HEAPF32[$7_1 + 16 >> 2] >= $14)) {
      $1_1 = $4_1;
      break label$21;
     }
     if (!(HEAPF32[$7_1 + 4 >> 2] <= $10)) {
      $1_1 = $4_1;
      break label$21;
     }
     if (!(HEAPF32[$7_1 + 20 >> 2] >= $13_1)) {
      $1_1 = $4_1;
      break label$21;
     }
     if (!(HEAPF32[$7_1 + 8 >> 2] <= $9_1)) {
      $1_1 = $4_1;
      break label$21;
     }
     if (!(HEAPF32[$7_1 + 24 >> 2] >= $12_1)) {
      $1_1 = $4_1;
      break label$21;
     }
     if (HEAP32[$7_1 + 40 >> 2]) {
      $0 = HEAP32[$2_1 + 8 >> 2];
      label$29 : {
       if (($4_1 | 0) != ($0 | 0)) {
        break label$29
       }
       $0 = $4_1 ? $4_1 << 1 : 1;
       if (($1_1 | 0) > ($0 | 0)) {
        $0 = $4_1;
        break label$29;
       }
       label$31 : {
        if (!$0) {
         $6_1 = 0;
         break label$31;
        }
        $6_1 = $79($0 << 2);
        $4_1 = HEAP32[$2_1 + 4 >> 2];
       }
       if (($4_1 | 0) >= 1) {
        $1_1 = 0;
        $5_1 = $4_1;
        while (1) {
         HEAP32[$1_1 + $6_1 >> 2] = HEAP32[HEAP32[$2_1 + 12 >> 2] + $1_1 >> 2];
         $1_1 = $1_1 + 4 | 0;
         $5_1 = $5_1 + -1 | 0;
         if ($5_1) {
          continue
         }
         break;
        };
       }
       $1_1 = HEAP32[$2_1 + 12 >> 2];
       if ($1_1) {
        if (HEAPU8[$2_1 + 16 | 0]) {
         $80($1_1);
         $4_1 = HEAP32[$2_1 + 4 >> 2];
        }
        HEAP32[$2_1 + 12 >> 2] = 0;
       }
       HEAP32[$2_1 + 12 >> 2] = $6_1;
       HEAP8[$2_1 + 16 | 0] = 1;
       HEAP32[$2_1 + 8 >> 2] = $0;
      }
      $5_1 = $4_1 + 1 | 0;
      HEAP32[$2_1 + 4 >> 2] = $5_1;
      HEAP32[($4_1 << 2) + $6_1 >> 2] = HEAP32[$7_1 + 36 >> 2];
      label$37 : {
       if (($0 | 0) != ($5_1 | 0)) {
        break label$37
       }
       $8_1 = $0 ? $0 << 1 : 1;
       if (($0 | 0) >= ($8_1 | 0)) {
        $5_1 = $0;
        break label$37;
       }
       label$39 : {
        if (!$8_1) {
         $6_1 = 0;
         break label$39;
        }
        $6_1 = $79($8_1 << 2);
        $0 = HEAP32[$2_1 + 4 >> 2];
       }
       $5_1 = $0;
       if (($5_1 | 0) >= 1) {
        $1_1 = 0;
        $4_1 = $5_1;
        while (1) {
         HEAP32[$1_1 + $6_1 >> 2] = HEAP32[HEAP32[$2_1 + 12 >> 2] + $1_1 >> 2];
         $1_1 = $1_1 + 4 | 0;
         $4_1 = $4_1 + -1 | 0;
         if ($4_1) {
          continue
         }
         break;
        };
       }
       $0 = HEAP32[$2_1 + 12 >> 2];
       if ($0) {
        if (HEAPU8[$2_1 + 16 | 0]) {
         $80($0);
         $5_1 = HEAP32[$2_1 + 4 >> 2];
        }
        HEAP32[$2_1 + 12 >> 2] = 0;
       }
       HEAP32[$2_1 + 12 >> 2] = $6_1;
       HEAP8[$2_1 + 16 | 0] = 1;
       HEAP32[$2_1 + 8 >> 2] = $8_1;
      }
      $1_1 = $5_1 + 1 | 0;
      HEAP32[$2_1 + 4 >> 2] = $1_1;
      HEAP32[HEAP32[$2_1 + 12 >> 2] + ($5_1 << 2) >> 2] = HEAP32[$7_1 + 40 >> 2];
      break label$21;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $7_1);
     $1_1 = HEAP32[$2_1 + 4 >> 2];
    }
    if (($1_1 | 0) > 0) {
     continue
    }
    break;
   };
  }
 }
 
 function $640($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = 0, $33_1 = 0, $34 = 0, $35 = 0, $36_1 = 0, $37_1 = 0, $38 = 0;
  $16_1 = HEAP32[$0 + 52 >> 2];
  if (($16_1 | 0) < 1) {
   return Math_fround(Math_fround(1.0))
  }
  $5_1 = HEAPU8[$0 + 68 | 0];
  $33_1 = $5_1 ? $1_1 : $2_1;
  $1_1 = $5_1 ? $2_1 : $1_1;
  $34 = HEAP32[$1_1 - -64 >> 2];
  $29_1 = HEAPF32[$1_1 + 60 >> 2];
  $30 = HEAPF32[$1_1 + 56 >> 2];
  $31_1 = HEAPF32[$1_1 + 52 >> 2];
  $35 = HEAP32[$1_1 + 48 >> 2];
  $7_1 = HEAPF32[$1_1 + 44 >> 2];
  $8_1 = HEAPF32[$1_1 + 40 >> 2];
  $9_1 = HEAPF32[$1_1 + 36 >> 2];
  $5_1 = 32;
  $36_1 = HEAP32[$1_1 + 32 >> 2];
  $10 = HEAPF32[$1_1 + 28 >> 2];
  $11 = HEAPF32[$1_1 + 24 >> 2];
  $12_1 = HEAPF32[$1_1 + 20 >> 2];
  $37_1 = HEAP32[$1_1 + 16 >> 2];
  $13_1 = HEAPF32[$1_1 + 12 >> 2];
  $14 = HEAPF32[$1_1 + 8 >> 2];
  $2_1 = HEAP32[$1_1 + 304 >> 2];
  $15_1 = HEAPF32[$1_1 + 4 >> 2];
  $38 = HEAP32[$1_1 + 192 >> 2];
  $17_1 = Math_fround(1.0);
  while (1) {
   HEAP32[$1_1 + 304 >> 2] = $2_1 + 1;
   $2_1 = HEAP32[$38 + 28 >> 2] + $5_1 | 0;
   $6_1 = HEAPF32[$2_1 + 24 >> 2];
   $18_1 = HEAPF32[$2_1 + 16 >> 2];
   $19_1 = HEAPF32[$2_1 + 20 >> 2];
   $20 = HEAPF32[$2_1 >> 2];
   $21 = HEAPF32[$2_1 + -32 >> 2];
   $22_1 = HEAPF32[$2_1 + -16 >> 2];
   $23_1 = HEAPF32[$2_1 + 4 >> 2];
   $24_1 = HEAPF32[$2_1 + -28 >> 2];
   $25 = HEAPF32[$2_1 + -12 >> 2];
   $26_1 = HEAPF32[$2_1 + 8 >> 2];
   $27_1 = HEAPF32[$2_1 + -24 >> 2];
   $28_1 = HEAPF32[$2_1 + -8 >> 2];
   HEAP32[$1_1 + 64 >> 2] = 0;
   HEAP32[$1_1 + 48 >> 2] = 0;
   HEAP32[$1_1 + 32 >> 2] = 0;
   HEAP32[$1_1 + 16 >> 2] = 0;
   HEAPF32[$1_1 + 44 >> 2] = Math_fround(Math_fround($9_1 * $27_1) + Math_fround($8_1 * $28_1)) + Math_fround($7_1 * $26_1);
   HEAPF32[$1_1 + 40 >> 2] = Math_fround(Math_fround($9_1 * $24_1) + Math_fround($8_1 * $25)) + Math_fround($7_1 * $23_1);
   HEAPF32[$1_1 + 36 >> 2] = Math_fround(Math_fround($9_1 * $21) + Math_fround($8_1 * $22_1)) + Math_fround($7_1 * $20);
   HEAPF32[$1_1 + 28 >> 2] = Math_fround(Math_fround($12_1 * $27_1) + Math_fround($11 * $28_1)) + Math_fround($10 * $26_1);
   HEAPF32[$1_1 + 24 >> 2] = Math_fround(Math_fround($12_1 * $24_1) + Math_fround($11 * $25)) + Math_fround($10 * $23_1);
   HEAPF32[$1_1 + 20 >> 2] = Math_fround(Math_fround($12_1 * $21) + Math_fround($11 * $22_1)) + Math_fround($10 * $20);
   HEAPF32[$1_1 + 12 >> 2] = Math_fround(Math_fround($15_1 * $27_1) + Math_fround($14 * $28_1)) + Math_fround($13_1 * $26_1);
   HEAPF32[$1_1 + 8 >> 2] = Math_fround(Math_fround($15_1 * $24_1) + Math_fround($14 * $25)) + Math_fround($13_1 * $23_1);
   HEAPF32[$1_1 + 4 >> 2] = Math_fround(Math_fround($15_1 * $21) + Math_fround($14 * $22_1)) + Math_fround($13_1 * $20);
   HEAPF32[$1_1 + 60 >> 2] = $29_1 + Math_fround(Math_fround(Math_fround($9_1 * $18_1) + Math_fround($8_1 * $19_1)) + Math_fround($7_1 * $6_1));
   HEAPF32[$1_1 + 56 >> 2] = $30 + Math_fround(Math_fround(Math_fround($12_1 * $18_1) + Math_fround($11 * $19_1)) + Math_fround($10 * $6_1));
   HEAPF32[$1_1 + 52 >> 2] = $31_1 + Math_fround(Math_fround(Math_fround($15_1 * $18_1) + Math_fround($14 * $19_1)) + Math_fround($13_1 * $6_1));
   $2_1 = HEAP32[HEAP32[$0 + 60 >> 2] + $32 >> 2];
   $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1, $1_1, $33_1, $3_1, $4_1));
   HEAP32[$1_1 + 64 >> 2] = $34;
   HEAPF32[$1_1 + 60 >> 2] = $29_1;
   HEAPF32[$1_1 + 56 >> 2] = $30;
   HEAPF32[$1_1 + 52 >> 2] = $31_1;
   HEAP32[$1_1 + 48 >> 2] = $35;
   HEAPF32[$1_1 + 44 >> 2] = $7_1;
   HEAPF32[$1_1 + 40 >> 2] = $8_1;
   HEAPF32[$1_1 + 36 >> 2] = $9_1;
   HEAP32[$1_1 + 32 >> 2] = $36_1;
   HEAPF32[$1_1 + 28 >> 2] = $10;
   HEAPF32[$1_1 + 24 >> 2] = $11;
   HEAPF32[$1_1 + 20 >> 2] = $12_1;
   HEAP32[$1_1 + 16 >> 2] = $37_1;
   HEAPF32[$1_1 + 12 >> 2] = $13_1;
   HEAPF32[$1_1 + 8 >> 2] = $14;
   HEAPF32[$1_1 + 4 >> 2] = $15_1;
   $2_1 = HEAP32[$1_1 + 304 >> 2] + 1 | 0;
   HEAP32[$1_1 + 304 >> 2] = $2_1;
   $17_1 = $6_1 < $17_1 ? $6_1 : $17_1;
   $5_1 = $5_1 + 80 | 0;
   $32 = $32 + 4 | 0;
   $16_1 = $16_1 + -1 | 0;
   if ($16_1) {
    continue
   }
   break;
  };
  return Math_fround($17_1);
 }
 
 function $641($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0 + 52 >> 2];
  if (($2_1 | 0) >= 1) {
   while (1) {
    $3_1 = HEAP32[HEAP32[$0 + 60 >> 2] + $4_1 >> 2];
    if ($3_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $1_1);
     $2_1 = HEAP32[$0 + 52 >> 2];
    }
    $4_1 = $4_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $643($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0;
  $3_1 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2] + 28 >> 2];
  $0 = HEAP32[$1_1 + 36 >> 2];
  $637($2_1, HEAP32[($3_1 + Math_imul($0, 80) | 0) + 64 >> 2], $0);
 }
 
 function $644($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  HEAP32[$0 >> 2] = 14860;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $2_1 = $0 + 8 | 0;
  $1_1 = $2_1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1_1 = $0 + 28 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  $1_1 = $0 + 48 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $79(24);
  $2_1 = HEAP32[$2_1 >> 2];
  if (($2_1 | 0) >= 1) {
   while (1) {
    $4_1 = HEAP32[$0 + 16 >> 2] + $3_1 | 0;
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    $5_1 = $1_1 + $3_1 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $6_1;
    HEAP32[$5_1 + 8 >> 2] = HEAP32[$4_1 + 8 >> 2];
    $3_1 = $3_1 + 12 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   }
  }
  $3_1 = HEAP32[$0 + 16 >> 2];
  if ($3_1) {
   if (HEAPU8[$0 + 20 | 0]) {
    $80($3_1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = $1_1;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = 2;
  $645($0);
 }
 
 function $645($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = HEAP32[$0 + 28 >> 2];
  $3_1 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (($7_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAP32[$0 + 32 >> 2] >= ($3_1 | 0)) {
     $4_1 = HEAP32[$0 + 36 >> 2];
     break label$2;
    }
    label$4 : {
     if (!$3_1) {
      $2_1 = $7_1;
      break label$4;
     }
     $4_1 = $79($3_1 << 2);
     $2_1 = HEAP32[$0 + 28 >> 2];
    }
    $1_1 = HEAP32[$0 + 36 >> 2];
    label$6 : {
     if (($2_1 | 0) >= 1) {
      $5_1 = $4_1;
      $6_1 = $1_1;
      while (1) {
       HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
       $5_1 = $5_1 + 4 | 0;
       $6_1 = $6_1 + 4 | 0;
       $2_1 = $2_1 + -1 | 0;
       if ($2_1) {
        continue
       }
       break;
      };
      break label$6;
     }
     if ($1_1) {
      break label$6
     }
     HEAP32[$0 + 36 >> 2] = $4_1;
     HEAP32[$0 + 32 >> 2] = $3_1;
     HEAP8[$0 + 40 | 0] = 1;
     break label$2;
    }
    if (HEAPU8[$0 + 40 | 0]) {
     $80($1_1)
    }
    HEAP32[$0 + 36 >> 2] = $4_1;
    HEAP8[$0 + 40 | 0] = 1;
    HEAP32[$0 + 32 >> 2] = $3_1;
   }
   $2_1 = $7_1 << 2;
   $8_1 = $3_1 << 2;
   $17($2_1 + $4_1 | 0, 0, $8_1 - $2_1 | 0);
   HEAP32[$0 + 28 >> 2] = $3_1;
   $9_1 = HEAP32[$0 + 48 >> 2];
   if (($9_1 | 0) < ($3_1 | 0)) {
    label$11 : {
     if (HEAP32[$0 + 52 >> 2] >= ($3_1 | 0)) {
      $4_1 = HEAP32[$0 + 56 >> 2];
      break label$11;
     }
     label$13 : {
      if (!$3_1) {
       $4_1 = 0;
       $2_1 = $9_1;
       break label$13;
      }
      $4_1 = $79($8_1);
      $2_1 = HEAP32[$0 + 48 >> 2];
     }
     $1_1 = HEAP32[$0 + 56 >> 2];
     label$15 : {
      if (($2_1 | 0) >= 1) {
       $5_1 = $4_1;
       $6_1 = $1_1;
       while (1) {
        HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
        $5_1 = $5_1 + 4 | 0;
        $6_1 = $6_1 + 4 | 0;
        $2_1 = $2_1 + -1 | 0;
        if ($2_1) {
         continue
        }
        break;
       };
       break label$15;
      }
      if ($1_1) {
       break label$15
      }
      HEAP32[$0 + 56 >> 2] = $4_1;
      HEAP32[$0 + 52 >> 2] = $3_1;
      HEAP8[$0 + 60 | 0] = 1;
      break label$11;
     }
     if (HEAPU8[$0 + 60 | 0]) {
      $80($1_1)
     }
     HEAP32[$0 + 56 >> 2] = $4_1;
     HEAP8[$0 + 60 | 0] = 1;
     HEAP32[$0 + 52 >> 2] = $3_1;
    }
    $2_1 = $9_1 << 2;
    $17($2_1 + $4_1 | 0, 0, $8_1 - $2_1 | 0);
   }
   HEAP32[$0 + 48 >> 2] = $3_1;
   if (($3_1 | 0) >= 1) {
    $17(HEAP32[$0 + 36 >> 2], 255, $8_1);
    $17(HEAP32[$0 + 56 >> 2], 255, $8_1);
   }
   if (($7_1 | 0) < 1) {
    break label$1
   }
   $6_1 = HEAP32[$0 + 56 >> 2];
   $5_1 = HEAP32[$0 + 16 >> 2];
   $4_1 = HEAP32[$0 + 36 >> 2];
   $2_1 = 0;
   while (1) {
    $1_1 = HEAP32[$5_1 >> 2] | HEAP32[$5_1 + 4 >> 2] << 16;
    $1_1 = ($1_1 << 15 ^ -1) + $1_1 | 0;
    $1_1 = Math_imul($1_1 >>> 10 ^ $1_1, 9);
    $1_1 = $1_1 >>> 6 ^ $1_1;
    $1_1 = ($1_1 << 11 ^ -1) + $1_1 | 0;
    $1_1 = $4_1 + ((HEAP32[$0 + 12 >> 2] + -1 & ($1_1 >>> 16 ^ $1_1)) << 2) | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$1_1 >> 2] = $2_1;
    $5_1 = $5_1 + 12 | 0;
    $6_1 = $6_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $646($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 14860;
  $1_1 = HEAP32[$0 + 56 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 60 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1_1 = HEAP32[$0 + 36 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 40 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1_1 = HEAP32[$0 + 16 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 20 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  return $0 | 0;
 }
 
 function $647($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 14860;
  $1_1 = HEAP32[$0 + 56 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 60 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1_1 = HEAP32[$0 + 36 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 40 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1_1 = HEAP32[$0 + 16 >> 2];
  if (!(!$1_1 | !HEAPU8[$0 + 20 | 0])) {
   $80($1_1)
  }
  $37($0);
 }
 
 function $648($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[$0 + 16 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 20 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  $1_1 = HEAP32[$0 + 36 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 40 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1_1 = HEAP32[$0 + 56 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 60 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  if (HEAP32[$0 + 12 >> 2] <= 1) {
   $5_1 = $79(24);
   $2_1 = HEAP32[$0 + 8 >> 2];
   if (($2_1 | 0) >= 1) {
    $1_1 = 0;
    while (1) {
     $3_1 = HEAP32[$0 + 16 >> 2] + $1_1 | 0;
     $6_1 = HEAP32[$3_1 + 4 >> 2];
     $4_1 = $1_1 + $5_1 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $6_1;
     HEAP32[$4_1 + 8 >> 2] = HEAP32[$3_1 + 8 >> 2];
     $1_1 = $1_1 + 12 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue
     }
     break;
    };
   }
   $1_1 = HEAP32[$0 + 16 >> 2];
   if ($1_1) {
    if (HEAPU8[$0 + 20 | 0]) {
     $80($1_1)
    }
    HEAP32[$0 + 16 >> 2] = 0;
   }
   HEAP32[$0 + 16 >> 2] = $5_1;
   HEAP8[$0 + 20 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = 2;
  }
  $645($0);
 }
 
 function $649($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  HEAP32[6292] = HEAP32[6292] + 1;
  $3_1 = $2_1 << 16 | $1_1;
  $3_1 = ($3_1 << 15 ^ -1) + $3_1 | 0;
  $3_1 = Math_imul($3_1 >>> 10 ^ $3_1, 9);
  $3_1 = $3_1 >>> 6 ^ $3_1;
  $3_1 = ($3_1 << 11 ^ -1) + $3_1 | 0;
  $3_1 = HEAP32[$0 + 12 >> 2] + -1 & ($3_1 >>> 16 ^ $3_1);
  label$1 : {
   label$2 : {
    if (($3_1 | 0) >= HEAP32[$0 + 28 >> 2]) {
     break label$2
    }
    $3_1 = HEAP32[HEAP32[$0 + 36 >> 2] + ($3_1 << 2) >> 2];
    if (($3_1 | 0) == -1) {
     break label$2
    }
    $5_1 = HEAP32[$0 + 16 >> 2];
    while (1) {
     $4_1 = Math_imul($3_1, 12) + $5_1 | 0;
     if (HEAP32[$4_1 + 4 >> 2] == ($2_1 | 0) ? ($1_1 | 0) == HEAP32[$4_1 >> 2] : 0) {
      break label$1
     }
     $3_1 = HEAP32[HEAP32[$0 + 56 >> 2] + ($3_1 << 2) >> 2];
     if (($3_1 | 0) != -1) {
      continue
     }
     break;
    };
   }
   $4_1 = 0;
  }
  return $4_1;
 }
 
 function $650($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0;
  $3_1 = $2_1 << 16 | $1_1;
  $3_1 = ($3_1 << 15 ^ -1) + $3_1 | 0;
  $3_1 = Math_imul($3_1 >>> 10 ^ $3_1, 9);
  $3_1 = $3_1 >>> 6 ^ $3_1;
  $3_1 = ($3_1 << 11 ^ -1) + $3_1 | 0;
  $12_1 = $3_1 >>> 16 ^ $3_1;
  $3_1 = HEAP32[$0 + 12 >> 2];
  $10 = $12_1 & $3_1 + -1;
  $4_1 = HEAP32[HEAP32[$0 + 36 >> 2] + ($10 << 2) >> 2];
  label$1 : {
   if (($4_1 | 0) != -1) {
    $11 = HEAP32[$0 + 16 >> 2];
    while (1) {
     $5_1 = $11 + Math_imul($4_1, 12) | 0;
     if (HEAP32[$5_1 + 4 >> 2] == ($2_1 | 0) ? ($1_1 | 0) == HEAP32[$5_1 >> 2] : 0) {
      break label$1
     }
     $4_1 = HEAP32[HEAP32[$0 + 56 >> 2] + ($4_1 << 2) >> 2];
     if (($4_1 | 0) != -1) {
      continue
     }
     break;
    };
   }
   label$5 : {
    label$6 : {
     $8_1 = $0;
     $6_1 = HEAP32[$0 + 8 >> 2];
     $4_1 = $6_1;
     if (($3_1 | 0) == ($4_1 | 0)) {
      $9_1 = $3_1 ? $3_1 << 1 : 1;
      $13_1 = ($3_1 | 0) >= ($9_1 | 0);
      if (!$13_1) {
       break label$6
      }
      $4_1 = $3_1;
     }
     HEAP32[$8_1 + 8 >> 2] = $4_1 + 1;
     $7_1 = HEAP32[$0 + 16 >> 2];
     $5_1 = $7_1 + Math_imul($6_1, 12) | 0;
     break label$5;
    }
    label$8 : {
     if (!$9_1) {
      break label$8
     }
     $7_1 = $79(Math_imul($9_1, 12));
     $3_1 = HEAP32[$0 + 8 >> 2];
    }
    if (($3_1 | 0) >= 1) {
     $4_1 = 0;
     while (1) {
      $5_1 = HEAP32[$0 + 16 >> 2] + $4_1 | 0;
      $11 = HEAP32[$5_1 + 4 >> 2];
      $8_1 = $4_1 + $7_1 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $11;
      HEAP32[$8_1 + 8 >> 2] = HEAP32[$5_1 + 8 >> 2];
      $4_1 = $4_1 + 12 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       continue
      }
      break;
     };
    }
    $3_1 = HEAP32[$0 + 16 >> 2];
    if ($3_1) {
     if (HEAPU8[$0 + 20 | 0]) {
      $80($3_1)
     }
     HEAP32[$0 + 16 >> 2] = 0;
    }
    HEAP32[$0 + 16 >> 2] = $7_1;
    HEAP32[$0 + 12 >> 2] = $9_1;
    HEAP8[$0 + 20 | 0] = 1;
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
    $5_1 = Math_imul($6_1, 12) + $7_1 | 0;
    if ($13_1) {
     break label$5
    }
    $645($0);
    $10 = HEAP32[$0 + 12 >> 2] + -1 & $12_1;
   }
   HEAP32[$5_1 >> 2] = $1_1;
   $1_1 = Math_imul($6_1, 12) + $7_1 | 0;
   HEAP32[$1_1 + 8 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = $2_1;
   $1_1 = HEAP32[$0 + 56 >> 2] + ($6_1 << 2) | 0;
   $0 = HEAP32[$0 + 36 >> 2] + ($10 << 2) | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = $6_1;
  }
  return $5_1;
 }
 
 function $651($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0;
  HEAP32[6290] = HEAP32[6290] + 1;
  $8_1 = HEAP32[$0 + 36 >> 2];
  $3_1 = $2_1 << 16 | $1_1;
  $3_1 = ($3_1 << 15 ^ -1) + $3_1 | 0;
  $3_1 = Math_imul($3_1 >>> 10 ^ $3_1, 9);
  $3_1 = $3_1 >>> 6 ^ $3_1;
  $3_1 = ($3_1 << 11 ^ -1) + $3_1 | 0;
  $5_1 = $8_1 + ((HEAP32[$0 + 12 >> 2] + -1 & ($3_1 >>> 16 ^ $3_1)) << 2) | 0;
  $3_1 = HEAP32[$5_1 >> 2];
  label$1 : {
   if (($3_1 | 0) == -1) {
    break label$1
   }
   $6_1 = HEAP32[$0 + 16 >> 2];
   $4_1 = $3_1;
   while (1) {
    $9_1 = $6_1 + Math_imul($4_1, 12) | 0;
    if (!(HEAP32[$9_1 + 4 >> 2] == ($2_1 | 0) ? ($1_1 | 0) == HEAP32[$9_1 >> 2] : 0)) {
     $4_1 = HEAP32[HEAP32[$0 + 56 >> 2] + ($4_1 << 2) >> 2];
     if (($4_1 | 0) != -1) {
      continue
     }
     break label$1;
    }
    break;
   };
   $10 = HEAP32[($6_1 + Math_imul($4_1, 12) | 0) + 8 >> 2];
   $2_1 = HEAP32[$0 + 56 >> 2];
   label$5 : {
    label$6 : {
     if (($3_1 | 0) != ($4_1 | 0)) {
      while (1) {
       $1_1 = $3_1;
       $3_1 = HEAP32[$2_1 + ($3_1 << 2) >> 2];
       if (($3_1 | 0) != ($4_1 | 0)) {
        continue
       }
       break;
      };
      $3_1 = HEAP32[$2_1 + ($4_1 << 2) >> 2];
      $7_1 = $3_1;
      if (($1_1 | 0) == -1) {
       break label$6
      }
      HEAP32[$2_1 + ($1_1 << 2) >> 2] = $3_1;
      break label$5;
     }
     $7_1 = HEAP32[$2_1 + ($4_1 << 2) >> 2];
    }
    HEAP32[$5_1 >> 2] = $7_1;
   }
   $5_1 = HEAP32[$0 + 8 >> 2] + -1 | 0;
   if (($4_1 | 0) == ($5_1 | 0)) {
    HEAP32[$0 + 8 >> 2] = $4_1;
    return $10 | 0;
   }
   label$10 : {
    label$11 : {
     $6_1 = $6_1 + Math_imul($5_1, 12) | 0;
     $1_1 = HEAP32[$6_1 + 4 >> 2] << 16 | HEAP32[$6_1 >> 2];
     $1_1 = ($1_1 << 15 ^ -1) + $1_1 | 0;
     $1_1 = Math_imul($1_1 >>> 10 ^ $1_1, 9);
     $1_1 = $1_1 >>> 6 ^ $1_1;
     $1_1 = ($1_1 << 11 ^ -1) + $1_1 | 0;
     $7_1 = HEAP32[$0 + 12 >> 2] + -1 & ($1_1 >>> 16 ^ $1_1);
     $8_1 = $8_1 + ($7_1 << 2) | 0;
     $3_1 = HEAP32[$8_1 >> 2];
     if (($3_1 | 0) == ($5_1 | 0)) {
      $3_1 = HEAP32[$2_1 + ($5_1 << 2) >> 2];
      break label$11;
     }
     while (1) {
      $1_1 = $3_1;
      $3_1 = HEAP32[$2_1 + ($3_1 << 2) >> 2];
      if (($5_1 | 0) != ($3_1 | 0)) {
       continue
      }
      break;
     };
     $3_1 = HEAP32[$2_1 + ($5_1 << 2) >> 2];
     if (($1_1 | 0) == -1) {
      break label$11
     }
     HEAP32[$2_1 + ($1_1 << 2) >> 2] = $3_1;
     break label$10;
    }
    HEAP32[$8_1 >> 2] = $3_1;
   }
   $1_1 = HEAP32[$6_1 + 4 >> 2];
   HEAP32[$9_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $1_1;
   HEAP32[$9_1 + 8 >> 2] = HEAP32[$6_1 + 8 >> 2];
   $1_1 = HEAP32[$0 + 36 >> 2] + ($7_1 << 2) | 0;
   HEAP32[HEAP32[$0 + 56 >> 2] + ($4_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$1_1 >> 2] = $4_1;
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -1;
  }
  return $10 | 0;
 }
 
 function $652($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[6291] = HEAP32[6291] + 1;
  return $650($0, $1_1, $2_1) | 0;
 }
 
 function $653($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 16 >> 2];
 }
 
 function $654($0, $1_1, $2_1, $3_1) {
  $632($0, $1_1, $2_1, $3_1, 0);
  HEAP8[$0 + 104 | 0] = 1;
  HEAP32[$0 >> 2] = 14924;
  HEAP32[$0 + 100 >> 2] = 0;
  $1_1 = $0 + 92 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $79(64);
  $644($1_1);
  HEAP32[$0 + 84 >> 2] = $1_1;
  HEAP32[$0 + 108 >> 2] = HEAP32[HEAP32[$2_1 + 4 >> 2] + 72 >> 2];
  HEAP32[$0 + 112 >> 2] = HEAP32[HEAP32[$3_1 + 4 >> 2] + 72 >> 2];
 }
 
 function $655($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  HEAP32[$0 >> 2] = 14924;
  $1_1 = 8;
  $2_1 = HEAP32[$0 + 84 >> 2];
  $3_1 = HEAP32[$2_1 + 8 >> 2];
  if (($3_1 | 0) >= 1) {
   while (1) {
    $4_1 = HEAP32[HEAP32[$2_1 + 16 >> 2] + $1_1 >> 2];
    if ($4_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] >> 2]]($4_1) | 0;
     $5_1 = HEAP32[$0 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 60 >> 2]]($5_1, $4_1);
    }
    $1_1 = $1_1 + 12 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   };
   $2_1 = HEAP32[$0 + 84 >> 2];
  }
  $648($2_1);
  $1_1 = HEAP32[$0 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 84 >> 2]);
  $1_1 = HEAP32[$0 + 100 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 104 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 100 >> 2] = 0;
  }
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP8[$0 + 104 | 0] = 1;
  $634($0);
  return $0 | 0;
 }
 
 function $656($0) {
  $0 = $0 | 0;
  $37($655($0));
 }
 
 function $657($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = 8;
  $0 = HEAP32[$0 + 84 >> 2];
  $3_1 = HEAP32[$0 + 8 >> 2];
  if (($3_1 | 0) >= 1) {
   while (1) {
    $4_1 = HEAP32[HEAP32[$0 + 16 >> 2] + $2_1 >> 2];
    if ($4_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $1_1);
     $3_1 = HEAP32[$0 + 8 >> 2];
    }
    $2_1 = $2_1 + 12 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < ($3_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $658($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = 0, $21 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = 0, $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = 0, $40_1 = Math_fround(0), $41_1 = 0, $42 = 0, $43_1 = 0, $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0);
  $5_1 = global$0 - 3328 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    $42 = HEAP32[$1_1 + 4 >> 2];
    $21 = HEAP32[$42 + 68 >> 2];
    if ($21) {
     $43_1 = HEAP32[$2_1 + 4 >> 2];
     $36_1 = HEAP32[$43_1 + 68 >> 2];
     if ($36_1) {
      break label$2
     }
    }
    $636($0, $1_1, $2_1, $3_1, $4_1);
    break label$1;
   }
   if (!(HEAP32[$43_1 + 72 >> 2] == HEAP32[$0 + 112 >> 2] ? HEAP32[$42 + 72 >> 2] == HEAP32[$0 + 108 >> 2] : 0)) {
    $7_1 = 8;
    $6_1 = HEAP32[$0 + 84 >> 2];
    $8_1 = HEAP32[$6_1 + 8 >> 2];
    if (($8_1 | 0) >= 1) {
     while (1) {
      $16_1 = HEAP32[HEAP32[$6_1 + 16 >> 2] + $7_1 >> 2];
      if ($16_1) {
       FUNCTION_TABLE[HEAP32[HEAP32[$16_1 >> 2] >> 2]]($16_1) | 0;
       $11 = HEAP32[$0 + 4 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 60 >> 2]]($11, $16_1);
      }
      $7_1 = $7_1 + 12 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue
      }
      break;
     };
     $6_1 = HEAP32[$0 + 84 >> 2];
    }
    $648($6_1);
    HEAP32[$0 + 108 >> 2] = HEAP32[$42 + 72 >> 2];
    HEAP32[$0 + 112 >> 2] = HEAP32[$43_1 + 72 >> 2];
   }
   HEAP32[$5_1 + 84 >> 2] = 0;
   HEAP8[$5_1 + 88 | 0] = 1;
   HEAP32[$5_1 + 76 >> 2] = 0;
   HEAP32[$5_1 + 80 >> 2] = 0;
   $213($5_1 + 112 | 0);
   $213($5_1 + 916 | 0);
   $213($5_1 + 1720 | 0);
   $213($5_1 + 2524 | 0);
   $6_1 = HEAP32[$5_1 + 84 >> 2];
   if ($6_1) {
    if (HEAPU8[$5_1 + 88 | 0]) {
     $80($6_1)
    }
    HEAP32[$5_1 + 84 >> 2] = 0;
   }
   HEAP32[$5_1 + 76 >> 2] = 0;
   HEAP32[$5_1 + 80 >> 2] = 4;
   $16_1 = HEAP32[$0 + 84 >> 2];
   HEAP8[$5_1 + 88 | 0] = 0;
   $9_1 = HEAP32[$16_1 + 8 >> 2];
   HEAP32[$5_1 + 84 >> 2] = $5_1 + 112;
   label$11 : {
    label$12 : {
     if (($9_1 | 0) <= 0) {
      $7_1 = $5_1 + 112 | 0;
      break label$12;
     }
     $11 = 0;
     while (1) {
      $6_1 = HEAP32[(HEAP32[$16_1 + 16 >> 2] + Math_imul($11, 12) | 0) + 8 >> 2];
      if ($6_1) {
       FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 16 >> 2]]($6_1, $5_1 + 72 | 0);
       $7_1 = HEAP32[$5_1 + 76 >> 2];
       if (($7_1 | 0) >= 1) {
        $9_1 = 0;
        $8_1 = 0;
        while (1) {
         $6_1 = HEAP32[HEAP32[$5_1 + 84 >> 2] + $9_1 >> 2];
         if (HEAP32[$6_1 + 780 >> 2]) {
          HEAP32[$4_1 + 4 >> 2] = $6_1;
          $39_1 = HEAP32[$6_1 + 772 >> 2];
          $20 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2];
          $7_1 = ($39_1 | 0) == ($20 | 0);
          $41_1 = $6_1;
          $6_1 = HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2];
          $219($41_1, ($7_1 ? $39_1 : $6_1) + 4 | 0, ($7_1 ? $6_1 : $20) + 4 | 0);
          HEAP32[$4_1 + 4 >> 2] = 0;
          $7_1 = HEAP32[$5_1 + 76 >> 2];
         }
         $9_1 = $9_1 + 4 | 0;
         $8_1 = $8_1 + 1 | 0;
         if (($8_1 | 0) < ($7_1 | 0)) {
          continue
         }
         break;
        };
       }
       if (($7_1 | 0) <= -1) {
        if (HEAP32[$5_1 + 80 >> 2] <= -1) {
         $6_1 = HEAP32[$5_1 + 84 >> 2];
         if ($6_1) {
          if (HEAPU8[$5_1 + 88 | 0]) {
           $80($6_1)
          }
          HEAP32[$5_1 + 84 >> 2] = 0;
         }
         HEAP8[$5_1 + 88 | 0] = 1;
         HEAP32[$5_1 + 80 >> 2] = 0;
         HEAP32[$5_1 + 84 >> 2] = 0;
        }
        $9_1 = $7_1 << 2;
        while (1) {
         HEAP32[HEAP32[$5_1 + 84 >> 2] + $9_1 >> 2] = 0;
         $9_1 = $9_1 + 4 | 0;
         $6_1 = $7_1 + 1 | 0;
         $8_1 = $6_1 >>> 0 >= $7_1 >>> 0;
         $7_1 = $6_1;
         if ($8_1) {
          continue
         }
         break;
        };
       }
       HEAP32[$5_1 + 76 >> 2] = 0;
       $9_1 = HEAP32[$16_1 + 8 >> 2];
      }
      $11 = $11 + 1 | 0;
      if (($11 | 0) < ($9_1 | 0)) {
       continue
      }
      break;
     };
     $7_1 = HEAP32[$5_1 + 84 >> 2];
     if (!$7_1) {
      break label$11
     }
    }
    if (HEAPU8[$5_1 + 88 | 0]) {
     $80($7_1)
    }
    HEAP32[$5_1 + 84 >> 2] = 0;
   }
   HEAP32[$5_1 + 92 >> 2] = $3_1;
   HEAP32[$5_1 + 76 >> 2] = 0;
   HEAP32[$5_1 + 72 >> 2] = 15004;
   HEAP32[$5_1 + 88 >> 2] = HEAP32[$0 + 4 >> 2];
   HEAP32[$5_1 + 104 >> 2] = HEAP32[$0 + 72 >> 2];
   HEAP32[$5_1 + 100 >> 2] = HEAP32[$0 + 84 >> 2];
   HEAP32[$5_1 + 84 >> 2] = $2_1;
   $3_1 = HEAP32[$2_1 + 12 >> 2];
   $10 = HEAPF32[$3_1 + 56 >> 2];
   HEAP32[$5_1 + 80 >> 2] = $1_1;
   $6_1 = HEAP32[$1_1 + 12 >> 2];
   $12_1 = HEAPF32[$6_1 + 40 >> 2];
   $32 = HEAPF32[$3_1 + 52 >> 2];
   $13_1 = HEAPF32[$6_1 + 24 >> 2];
   $26_1 = HEAPF32[$3_1 + 48 >> 2];
   $18_1 = HEAPF32[$6_1 + 8 >> 2];
   $33_1 = HEAPF32[$6_1 + 56 >> 2];
   $37_1 = HEAPF32[$6_1 + 52 >> 2];
   $27_1 = HEAPF32[$6_1 + 48 >> 2];
   $14 = HEAPF32[$6_1 + 36 >> 2];
   $15_1 = HEAPF32[$6_1 + 20 >> 2];
   $19_1 = HEAPF32[$6_1 + 4 >> 2];
   $28_1 = HEAPF32[$3_1 + 40 >> 2];
   $34 = HEAPF32[$3_1 + 24 >> 2];
   $29_1 = HEAPF32[$3_1 + 8 >> 2];
   $35 = HEAPF32[$3_1 + 36 >> 2];
   $23_1 = HEAPF32[$3_1 + 20 >> 2];
   $30 = HEAPF32[$3_1 + 4 >> 2];
   $22_1 = HEAPF32[$6_1 >> 2];
   $24_1 = HEAPF32[$6_1 + 16 >> 2];
   $17_1 = HEAPF32[$6_1 + 32 >> 2];
   $31_1 = HEAPF32[$3_1 + 16 >> 2];
   $38 = HEAPF32[$3_1 >> 2];
   $40_1 = HEAPF32[$3_1 + 32 >> 2];
   HEAP32[$5_1 + 96 >> 2] = $4_1;
   $3_1 = HEAP32[$21 >> 2];
   label$25 : {
    if (!$3_1) {
     break label$25
    }
    $6_1 = HEAP32[$36_1 >> 2];
    if (!$6_1) {
     break label$25
    }
    $37_1 = Math_fround(-$37_1);
    $44_1 = Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $37_1) - Math_fround($18_1 * $27_1)) - Math_fround($12_1 * $33_1)) + Math_fround(Math_fround(Math_fround($18_1 * $26_1) + Math_fround($13_1 * $32)) + Math_fround($12_1 * $10)));
    $49_1 = Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $37_1) - Math_fround($19_1 * $27_1)) - Math_fround($14 * $33_1)) + Math_fround(Math_fround(Math_fround($19_1 * $26_1) + Math_fround($15_1 * $32)) + Math_fround($14 * $10)));
    $32 = Math_fround(Math_fround(Math_fround(Math_fround($24_1 * $37_1) - Math_fround($22_1 * $27_1)) - Math_fround($17_1 * $33_1)) + Math_fround(Math_fround(Math_fround($22_1 * $26_1) + Math_fround($24_1 * $32)) + Math_fround($17_1 * $10)));
    $10 = HEAPF32[$4_1 + 32 >> 2];
    HEAP32[$5_1 + 116 >> 2] = $6_1;
    HEAP32[$5_1 + 112 >> 2] = $3_1;
    $26_1 = Math_fround(Math_fround(Math_fround($18_1 * $29_1) + Math_fround($13_1 * $34)) + Math_fround($12_1 * $28_1));
    $33_1 = Math_fround(Math_abs($26_1));
    $27_1 = Math_fround(Math_fround(Math_fround($18_1 * $30) + Math_fround($13_1 * $23_1)) + Math_fround($12_1 * $35));
    $37_1 = Math_fround(Math_abs($27_1));
    $45_1 = Math_fround(Math_fround(Math_fround($18_1 * $38) + Math_fround($13_1 * $31_1)) + Math_fround($12_1 * $40_1));
    $50_1 = Math_fround(Math_abs($45_1));
    $46_1 = Math_fround(Math_fround(Math_fround($19_1 * $29_1) + Math_fround($15_1 * $34)) + Math_fround($14 * $28_1));
    $51_1 = Math_fround(Math_abs($46_1));
    $47 = Math_fround(Math_fround(Math_fround($19_1 * $30) + Math_fround($15_1 * $23_1)) + Math_fround($14 * $35));
    $52_1 = Math_fround(Math_abs($47));
    $48_1 = Math_fround(Math_fround(Math_fround($19_1 * $38) + Math_fround($15_1 * $31_1)) + Math_fround($14 * $40_1));
    $53_1 = Math_fround(Math_abs($48_1));
    $28_1 = Math_fround(Math_fround(Math_fround($22_1 * $29_1) + Math_fround($24_1 * $34)) + Math_fround($17_1 * $28_1));
    $34 = Math_fround(Math_abs($28_1));
    $29_1 = Math_fround(Math_fround(Math_fround($22_1 * $30) + Math_fround($24_1 * $23_1)) + Math_fround($17_1 * $35));
    $35 = Math_fround(Math_abs($29_1));
    $22_1 = Math_fround(Math_fround(Math_fround($22_1 * $38) + Math_fround($24_1 * $31_1)) + Math_fround($17_1 * $40_1));
    $24_1 = Math_fround(Math_abs($22_1));
    $36_1 = 124;
    $8_1 = 0;
    $11 = 128;
    $6_1 = $5_1 + 112 | 0;
    $3_1 = 128;
    $9_1 = 1;
    while (1) {
     label$27 : {
      label$28 : {
       label$29 : {
        $39_1 = $9_1 + -1 | 0;
        $41_1 = $39_1 << 3;
        $7_1 = $41_1 + $6_1 | 0;
        $25 = HEAP32[$7_1 >> 2];
        $20 = HEAP32[$7_1 + 4 >> 2];
        $14 = HEAPF32[$20 + 16 >> 2];
        $15_1 = HEAPF32[$20 >> 2];
        $12_1 = Math_fround(Math_fround(Math_fround($14 - $15_1) * Math_fround(.5)) + Math_fround(0.0));
        $19_1 = HEAPF32[$20 + 20 >> 2];
        $17_1 = HEAPF32[$20 + 4 >> 2];
        $13_1 = Math_fround(Math_fround(Math_fround($19_1 - $17_1) * Math_fround(.5)) + Math_fround(0.0));
        $23_1 = HEAPF32[$20 + 24 >> 2];
        $30 = HEAPF32[$20 + 8 >> 2];
        $18_1 = Math_fround(Math_fround(Math_fround($23_1 - $30) * Math_fround(.5)) + Math_fround(0.0));
        $31_1 = Math_fround(Math_fround(Math_fround($24_1 * $12_1) + Math_fround($35 * $13_1)) + Math_fround($34 * $18_1));
        $14 = Math_fround(Math_fround($14 + $15_1) * Math_fround(.5));
        $15_1 = Math_fround(Math_fround($19_1 + $17_1) * Math_fround(.5));
        $19_1 = Math_fround(Math_fround($23_1 + $30) * Math_fround(.5));
        $17_1 = Math_fround($32 + Math_fround(Math_fround(Math_fround($22_1 * $14) + Math_fround($29_1 * $15_1)) + Math_fround($28_1 * $19_1)));
        label$30 : {
         if (HEAPF32[$25 >> 2] <= Math_fround($10 + Math_fround($31_1 + $17_1)) ^ 1 | HEAPF32[$25 + 16 >> 2] >= Math_fround(Math_fround($17_1 - $31_1) - $10) ^ 1) {
          break label$30
         }
         $17_1 = Math_fround(Math_fround(Math_fround($53_1 * $12_1) + Math_fround($52_1 * $13_1)) + Math_fround($51_1 * $18_1));
         $23_1 = Math_fround($49_1 + Math_fround(Math_fround(Math_fround($48_1 * $14) + Math_fround($47 * $15_1)) + Math_fround($46_1 * $19_1)));
         if (HEAPF32[$25 + 4 >> 2] <= Math_fround($10 + Math_fround($17_1 + $23_1)) ^ 1 | HEAPF32[$25 + 20 >> 2] >= Math_fround(Math_fround($23_1 - $17_1) - $10) ^ 1) {
          break label$30
         }
         $12_1 = Math_fround(Math_fround(Math_fround($50_1 * $12_1) + Math_fround($37_1 * $13_1)) + Math_fround($33_1 * $18_1));
         $13_1 = Math_fround($44_1 + Math_fround(Math_fround(Math_fround($45_1 * $14) + Math_fround($27_1 * $15_1)) + Math_fround($26_1 * $19_1)));
         if (HEAPF32[$25 + 8 >> 2] <= Math_fround($10 + Math_fround($12_1 + $13_1)) ^ 1 | HEAPF32[$25 + 24 >> 2] >= Math_fround(Math_fround($13_1 - $12_1) - $10) ^ 1) {
          break label$30
         }
         label$31 : {
          if (($39_1 | 0) <= ($36_1 | 0)) {
           $16_1 = $11;
           $7_1 = $6_1;
           $21 = $8_1;
           break label$31;
          }
          $16_1 = $11 << 1;
          label$33 : {
           if (!(($11 | 0) >= ($16_1 | 0) | ($3_1 | 0) >= ($16_1 | 0))) {
            label$35 : {
             label$36 : {
              label$37 : {
               label$38 : {
                if (!$11) {
                 $7_1 = 0;
                 break label$38;
                }
                $7_1 = $79($11 << 4);
                if (($11 | 0) < 1) {
                 break label$38
                }
                $36_1 = $7_1;
                $3_1 = $6_1;
                while (1) {
                 $21 = HEAP32[$3_1 + 4 >> 2];
                 HEAP32[$36_1 >> 2] = HEAP32[$3_1 >> 2];
                 HEAP32[$36_1 + 4 >> 2] = $21;
                 $36_1 = $36_1 + 8 | 0;
                 $3_1 = $3_1 + 8 | 0;
                 $11 = $11 + -1 | 0;
                 if ($11) {
                  continue
                 }
                 break;
                };
                if (!($8_1 & 255)) {
                 break label$36
                }
                break label$37;
               }
               $21 = 1;
               $3_1 = $21;
               if (!$6_1) {
                break label$35
               }
               $3_1 = $16_1;
               if (!($8_1 & 255)) {
                break label$33
               }
              }
              $80($6_1);
             }
             $3_1 = 1;
            }
            $21 = $3_1;
            $3_1 = $16_1;
            break label$33;
           }
           $7_1 = $6_1;
           $21 = $8_1;
          }
          $36_1 = $16_1 + -4 | 0;
         }
         $6_1 = HEAP32[$20 + 40 >> 2];
         if (HEAP32[$25 + 40 >> 2]) {
          $8_1 = HEAP32[$25 + 36 >> 2];
          if ($6_1) {
           $6_1 = $7_1 + $41_1 | 0;
           HEAP32[$6_1 + 4 >> 2] = HEAP32[$20 + 36 >> 2];
           HEAP32[$6_1 >> 2] = $8_1;
           $8_1 = HEAP32[$25 + 40 >> 2];
           $6_1 = ($9_1 << 3) + $7_1 | 0;
           HEAP32[$6_1 + 4 >> 2] = HEAP32[$20 + 36 >> 2];
           HEAP32[$6_1 >> 2] = $8_1;
           $8_1 = HEAP32[$25 + 36 >> 2];
           HEAP32[$6_1 + 12 >> 2] = HEAP32[$20 + 40 >> 2];
           HEAP32[$6_1 + 8 >> 2] = $8_1;
           $8_1 = HEAP32[$25 + 40 >> 2];
           HEAP32[$6_1 + 20 >> 2] = HEAP32[$20 + 40 >> 2];
           HEAP32[$6_1 + 16 >> 2] = $8_1;
           $9_1 = $9_1 + 3 | 0;
           break label$28;
          }
          $6_1 = $7_1 + $41_1 | 0;
          HEAP32[$6_1 + 4 >> 2] = $20;
          HEAP32[$6_1 >> 2] = $8_1;
          $6_1 = HEAP32[$25 + 40 >> 2];
          $8_1 = ($9_1 << 3) + $7_1 | 0;
          HEAP32[$8_1 + 4 >> 2] = $20;
          HEAP32[$8_1 >> 2] = $6_1;
          break label$29;
         }
         if ($6_1) {
          $6_1 = $7_1 + $41_1 | 0;
          HEAP32[$6_1 + 4 >> 2] = HEAP32[$20 + 36 >> 2];
          HEAP32[$6_1 >> 2] = $25;
          $6_1 = ($9_1 << 3) + $7_1 | 0;
          HEAP32[$6_1 + 4 >> 2] = HEAP32[$20 + 40 >> 2];
          HEAP32[$6_1 >> 2] = $25;
          break label$29;
         }
         FUNCTION_TABLE[HEAP32[HEAP32[$5_1 + 72 >> 2] + 8 >> 2]]($5_1 + 72 | 0, $25, $20);
         $11 = $16_1;
         $6_1 = $7_1;
         $8_1 = $21;
        }
        $9_1 = $39_1;
        break label$27;
       }
       $9_1 = $9_1 + 1 | 0;
      }
      $11 = $16_1;
      $6_1 = $7_1;
      $8_1 = $21;
     }
     if ($9_1) {
      continue
     }
     break;
    };
    if (!$6_1 | !($8_1 & 255)) {
     break label$25
    }
    $80($6_1);
   }
   $16_1 = HEAP32[$0 + 84 >> 2];
   if (HEAP32[$16_1 + 8 >> 2] >= 1) {
    $6_1 = 0;
    while (1) {
     $21 = Math_imul($6_1, 12);
     $3_1 = $21 + HEAP32[$16_1 + 16 >> 2] | 0;
     $8_1 = HEAP32[$3_1 + 8 >> 2];
     label$46 : {
      if (!$8_1) {
       break label$46
      }
      $3_1 = HEAP32[$42 + 28 >> 2] + Math_imul(HEAP32[$3_1 >> 2], 80) | 0;
      $11 = HEAP32[$3_1 + 64 >> 2];
      $7_1 = HEAP32[$1_1 + 12 >> 2];
      $38 = HEAPF32[$7_1 + 52 >> 2];
      $40_1 = HEAPF32[$7_1 + 56 >> 2];
      $17_1 = HEAPF32[$3_1 + 48 >> 2];
      $32 = HEAPF32[$3_1 + 52 >> 2];
      $26_1 = HEAPF32[$3_1 + 56 >> 2];
      $33_1 = HEAPF32[$3_1 + 4 >> 2];
      $27_1 = HEAPF32[$3_1 + 20 >> 2];
      $28_1 = HEAPF32[$3_1 + 36 >> 2];
      $34 = HEAPF32[$3_1 + 8 >> 2];
      $29_1 = HEAPF32[$3_1 + 24 >> 2];
      $35 = HEAPF32[$3_1 + 40 >> 2];
      $10 = HEAPF32[$7_1 + 20 >> 2];
      $12_1 = HEAPF32[$7_1 + 24 >> 2];
      $23_1 = HEAPF32[$3_1 >> 2];
      $13_1 = HEAPF32[$7_1 + 36 >> 2];
      $30 = HEAPF32[$3_1 + 16 >> 2];
      $18_1 = HEAPF32[$7_1 + 40 >> 2];
      $31_1 = HEAPF32[$3_1 + 32 >> 2];
      $37_1 = HEAPF32[$7_1 + 48 >> 2];
      $14 = HEAPF32[$7_1 + 8 >> 2];
      $15_1 = HEAPF32[$7_1 >> 2];
      $19_1 = HEAPF32[$7_1 + 4 >> 2];
      $22_1 = HEAPF32[$7_1 + 16 >> 2];
      $24_1 = HEAPF32[$7_1 + 32 >> 2];
      HEAP32[$5_1 + 172 >> 2] = 0;
      HEAP32[$5_1 + 156 >> 2] = 0;
      HEAP32[$5_1 + 140 >> 2] = 0;
      HEAP32[$5_1 + 124 >> 2] = 0;
      HEAPF32[$5_1 + 144 >> 2] = Math_fround(Math_fround($24_1 * $23_1) + Math_fround($13_1 * $30)) + Math_fround($18_1 * $31_1);
      HEAPF32[$5_1 + 128 >> 2] = Math_fround(Math_fround($22_1 * $23_1) + Math_fround($10 * $30)) + Math_fround($12_1 * $31_1);
      HEAPF32[$5_1 + 112 >> 2] = Math_fround(Math_fround($15_1 * $23_1) + Math_fround($19_1 * $30)) + Math_fround($14 * $31_1);
      HEAPF32[$5_1 + 152 >> 2] = Math_fround(Math_fround($24_1 * $34) + Math_fround($13_1 * $29_1)) + Math_fround($18_1 * $35);
      HEAPF32[$5_1 + 148 >> 2] = Math_fround(Math_fround($24_1 * $33_1) + Math_fround($13_1 * $27_1)) + Math_fround($18_1 * $28_1);
      HEAPF32[$5_1 + 136 >> 2] = Math_fround(Math_fround($22_1 * $34) + Math_fround($10 * $29_1)) + Math_fround($12_1 * $35);
      HEAPF32[$5_1 + 132 >> 2] = Math_fround(Math_fround($22_1 * $33_1) + Math_fround($10 * $27_1)) + Math_fround($12_1 * $28_1);
      HEAPF32[$5_1 + 120 >> 2] = Math_fround(Math_fround($15_1 * $34) + Math_fround($19_1 * $29_1)) + Math_fround($14 * $35);
      HEAPF32[$5_1 + 116 >> 2] = Math_fround(Math_fround($15_1 * $33_1) + Math_fround($19_1 * $27_1)) + Math_fround($14 * $28_1);
      HEAPF32[$5_1 + 168 >> 2] = $40_1 + Math_fround(Math_fround(Math_fround($24_1 * $17_1) + Math_fround($13_1 * $32)) + Math_fround($18_1 * $26_1));
      HEAPF32[$5_1 + 164 >> 2] = $38 + Math_fround(Math_fround(Math_fround($22_1 * $17_1) + Math_fround($10 * $32)) + Math_fround($12_1 * $26_1));
      HEAPF32[$5_1 + 160 >> 2] = $37_1 + Math_fround(Math_fround(Math_fround($15_1 * $17_1) + Math_fround($19_1 * $32)) + Math_fround($14 * $26_1));
      FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 8 >> 2]]($11, $5_1 + 112 | 0, $5_1 + 56 | 0, $5_1 + 40 | 0);
      $10 = HEAPF32[$4_1 + 32 >> 2];
      HEAPF32[$5_1 + 56 >> 2] = HEAPF32[$5_1 + 56 >> 2] - $10;
      HEAPF32[$5_1 + 60 >> 2] = HEAPF32[$5_1 + 60 >> 2] - $10;
      HEAPF32[$5_1 + 64 >> 2] = HEAPF32[$5_1 + 64 >> 2] - $10;
      HEAPF32[$5_1 + 40 >> 2] = $10 + HEAPF32[$5_1 + 40 >> 2];
      HEAPF32[$5_1 + 44 >> 2] = $10 + HEAPF32[$5_1 + 44 >> 2];
      HEAPF32[$5_1 + 48 >> 2] = $10 + HEAPF32[$5_1 + 48 >> 2];
      $3_1 = HEAP32[$43_1 + 28 >> 2] + Math_imul(HEAP32[($21 + HEAP32[$16_1 + 16 >> 2] | 0) + 4 >> 2], 80) | 0;
      $11 = HEAP32[$3_1 + 64 >> 2];
      $7_1 = HEAP32[$2_1 + 12 >> 2];
      $40_1 = HEAPF32[$7_1 + 52 >> 2];
      $37_1 = HEAPF32[$7_1 + 56 >> 2];
      $32 = HEAPF32[$3_1 + 48 >> 2];
      $26_1 = HEAPF32[$3_1 + 52 >> 2];
      $33_1 = HEAPF32[$3_1 + 56 >> 2];
      $27_1 = HEAPF32[$3_1 + 4 >> 2];
      $28_1 = HEAPF32[$3_1 + 20 >> 2];
      $34 = HEAPF32[$3_1 + 36 >> 2];
      $29_1 = HEAPF32[$3_1 + 8 >> 2];
      $35 = HEAPF32[$3_1 + 24 >> 2];
      $23_1 = HEAPF32[$3_1 + 40 >> 2];
      $12_1 = HEAPF32[$7_1 + 20 >> 2];
      $13_1 = HEAPF32[$7_1 + 24 >> 2];
      $30 = HEAPF32[$3_1 >> 2];
      $18_1 = HEAPF32[$7_1 + 36 >> 2];
      $31_1 = HEAPF32[$3_1 + 16 >> 2];
      $14 = HEAPF32[$7_1 + 40 >> 2];
      $38 = HEAPF32[$3_1 + 32 >> 2];
      $44_1 = HEAPF32[$7_1 + 48 >> 2];
      $15_1 = HEAPF32[$7_1 + 8 >> 2];
      $19_1 = HEAPF32[$7_1 >> 2];
      $22_1 = HEAPF32[$7_1 + 4 >> 2];
      $24_1 = HEAPF32[$7_1 + 16 >> 2];
      $17_1 = HEAPF32[$7_1 + 32 >> 2];
      HEAP32[$5_1 + 172 >> 2] = 0;
      HEAP32[$5_1 + 156 >> 2] = 0;
      HEAP32[$5_1 + 140 >> 2] = 0;
      HEAP32[$5_1 + 124 >> 2] = 0;
      HEAPF32[$5_1 + 144 >> 2] = Math_fround(Math_fround($17_1 * $30) + Math_fround($18_1 * $31_1)) + Math_fround($14 * $38);
      HEAPF32[$5_1 + 128 >> 2] = Math_fround(Math_fround($24_1 * $30) + Math_fround($12_1 * $31_1)) + Math_fround($13_1 * $38);
      HEAPF32[$5_1 + 112 >> 2] = Math_fround(Math_fround($19_1 * $30) + Math_fround($22_1 * $31_1)) + Math_fround($15_1 * $38);
      HEAPF32[$5_1 + 152 >> 2] = Math_fround(Math_fround($17_1 * $29_1) + Math_fround($18_1 * $35)) + Math_fround($14 * $23_1);
      HEAPF32[$5_1 + 148 >> 2] = Math_fround(Math_fround($17_1 * $27_1) + Math_fround($18_1 * $28_1)) + Math_fround($14 * $34);
      HEAPF32[$5_1 + 136 >> 2] = Math_fround(Math_fround($24_1 * $29_1) + Math_fround($12_1 * $35)) + Math_fround($13_1 * $23_1);
      HEAPF32[$5_1 + 132 >> 2] = Math_fround(Math_fround($24_1 * $27_1) + Math_fround($12_1 * $28_1)) + Math_fround($13_1 * $34);
      HEAPF32[$5_1 + 120 >> 2] = Math_fround(Math_fround($19_1 * $29_1) + Math_fround($22_1 * $35)) + Math_fround($15_1 * $23_1);
      HEAPF32[$5_1 + 116 >> 2] = Math_fround(Math_fround($19_1 * $27_1) + Math_fround($22_1 * $28_1)) + Math_fround($15_1 * $34);
      HEAPF32[$5_1 + 168 >> 2] = $37_1 + Math_fround(Math_fround(Math_fround($17_1 * $32) + Math_fround($18_1 * $26_1)) + Math_fround($14 * $33_1));
      HEAPF32[$5_1 + 164 >> 2] = $40_1 + Math_fround(Math_fround(Math_fround($24_1 * $32) + Math_fround($12_1 * $26_1)) + Math_fround($13_1 * $33_1));
      HEAPF32[$5_1 + 160 >> 2] = $44_1 + Math_fround(Math_fround(Math_fround($19_1 * $32) + Math_fround($22_1 * $26_1)) + Math_fround($15_1 * $33_1));
      FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 8 >> 2]]($11, $5_1 + 112 | 0, $5_1 + 24 | 0, $5_1 + 8 | 0);
      $12_1 = Math_fround(HEAPF32[$5_1 + 24 >> 2] - $10);
      HEAPF32[$5_1 + 24 >> 2] = $12_1;
      $13_1 = Math_fround(HEAPF32[$5_1 + 28 >> 2] - $10);
      HEAPF32[$5_1 + 28 >> 2] = $13_1;
      $18_1 = Math_fround(HEAPF32[$5_1 + 32 >> 2] - $10);
      HEAPF32[$5_1 + 32 >> 2] = $18_1;
      $14 = Math_fround($10 + HEAPF32[$5_1 + 8 >> 2]);
      HEAPF32[$5_1 + 8 >> 2] = $14;
      $15_1 = Math_fround($10 + HEAPF32[$5_1 + 16 >> 2]);
      HEAPF32[$5_1 + 16 >> 2] = $15_1;
      $10 = Math_fround($10 + HEAPF32[$5_1 + 12 >> 2]);
      HEAPF32[$5_1 + 12 >> 2] = $10;
      label$47 : {
       if (HEAPF32[$5_1 + 44 >> 2] < $13_1 | HEAPF32[$5_1 + 60 >> 2] > $10 | (HEAPF32[$5_1 + 40 >> 2] < $12_1 | HEAPF32[$5_1 + 56 >> 2] > $14)) {
        break label$47
       }
       if (HEAPF32[$5_1 + 64 >> 2] > $15_1) {
        break label$47
       }
       if (!(HEAPF32[$5_1 + 48 >> 2] < $18_1)) {
        break label$46
       }
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] >> 2]]($8_1) | 0;
      $3_1 = HEAP32[$0 + 4 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 60 >> 2]]($3_1, $8_1);
      $3_1 = $21 + HEAP32[$16_1 + 16 >> 2] | 0;
      $36_1 = HEAP32[$3_1 + 4 >> 2];
      $39_1 = HEAP32[$3_1 >> 2];
      $9_1 = HEAP32[$0 + 92 >> 2];
      label$48 : {
       if (($9_1 | 0) != HEAP32[$0 + 96 >> 2]) {
        break label$48
       }
       $3_1 = $9_1 ? $9_1 << 1 : 1;
       if (($9_1 | 0) >= ($3_1 | 0)) {
        break label$48
       }
       label$49 : {
        if (!$3_1) {
         $11 = 0;
         break label$49;
        }
        $11 = $79(Math_imul($3_1, 12));
        $9_1 = HEAP32[$0 + 92 >> 2];
       }
       if (($9_1 | 0) >= 1) {
        $7_1 = 0;
        while (1) {
         $21 = HEAP32[$0 + 100 >> 2] + $7_1 | 0;
         $20 = HEAP32[$21 + 4 >> 2];
         $8_1 = $7_1 + $11 | 0;
         HEAP32[$8_1 >> 2] = HEAP32[$21 >> 2];
         HEAP32[$8_1 + 4 >> 2] = $20;
         HEAP32[$8_1 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
         $7_1 = $7_1 + 12 | 0;
         $9_1 = $9_1 + -1 | 0;
         if ($9_1) {
          continue
         }
         break;
        };
       }
       $7_1 = HEAP32[$0 + 100 >> 2];
       if ($7_1) {
        if (HEAPU8[$0 + 104 | 0]) {
         $80($7_1)
        }
        HEAP32[$0 + 100 >> 2] = 0;
       }
       HEAP32[$0 + 100 >> 2] = $11;
       HEAP8[$0 + 104 | 0] = 1;
       HEAP32[$0 + 96 >> 2] = $3_1;
       $9_1 = HEAP32[$0 + 92 >> 2];
      }
      $3_1 = HEAP32[$0 + 100 >> 2] + Math_imul($9_1, 12) | 0;
      HEAP32[$3_1 + 8 >> 2] = 0;
      HEAP32[$3_1 + 4 >> 2] = $36_1;
      HEAP32[$3_1 >> 2] = $39_1;
      HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 92 >> 2] + 1;
     }
     $6_1 = $6_1 + 1 | 0;
     if (($6_1 | 0) < HEAP32[$16_1 + 8 >> 2]) {
      continue
     }
     break;
    };
   }
   if (HEAP32[$0 + 92 >> 2] >= 1) {
    $9_1 = 0;
    $7_1 = 4;
    while (1) {
     $1_1 = HEAP32[$0 + 84 >> 2];
     $2_1 = HEAP32[$0 + 100 >> 2] + $7_1 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, HEAP32[$2_1 + -4 >> 2], HEAP32[$2_1 >> 2]) | 0;
     $7_1 = $7_1 + 12 | 0;
     $9_1 = $9_1 + 1 | 0;
     if (($9_1 | 0) < HEAP32[$0 + 92 >> 2]) {
      continue
     }
     break;
    };
   }
   $1_1 = HEAP32[$0 + 100 >> 2];
   if ($1_1) {
    if (HEAPU8[$0 + 104 | 0]) {
     $80($1_1)
    }
    HEAP32[$0 + 100 >> 2] = 0;
   }
   HEAP32[$0 + 100 >> 2] = 0;
   HEAP32[$0 + 92 >> 2] = 0;
   HEAP32[$0 + 96 >> 2] = 0;
   HEAP8[$0 + 104 | 0] = 1;
  }
  global$0 = $5_1 + 3328 | 0;
 }
 
 function $659($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function $661($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 256 | 0;
  global$0 = $3_1;
  $613($3_1 + 248 | 0, 15080);
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  $26_1 = HEAP32[$2_1 + 36 >> 2];
  $31_1 = Math_imul($26_1, 80);
  $28_1 = HEAP32[$0 + 12 >> 2];
  $32 = HEAP32[$28_1 + 4 >> 2] + 28 | 0;
  $24_1 = HEAP32[($31_1 + HEAP32[$32 >> 2] | 0) + 64 >> 2];
  $2_1 = HEAP32[$0 + 8 >> 2];
  $27_1 = HEAP32[$1_1 + 36 >> 2];
  $1_1 = HEAP32[HEAP32[$2_1 + 4 >> 2] + 28 >> 2] + Math_imul($27_1, 80) | 0;
  $25 = HEAP32[$1_1 + 64 >> 2];
  $2_1 = HEAP32[$2_1 + 12 >> 2];
  $14 = HEAPF32[$2_1 + 52 >> 2];
  $9_1 = HEAPF32[$2_1 + 56 >> 2];
  $7_1 = HEAPF32[$2_1 + 24 >> 2];
  $8_1 = HEAPF32[$2_1 + 20 >> 2];
  $4_1 = HEAPF32[$2_1 + 40 >> 2];
  $5_1 = HEAPF32[$2_1 + 36 >> 2];
  $29_1 = HEAPF32[$2_1 + 48 >> 2];
  $10 = HEAPF32[$2_1 + 8 >> 2];
  $11 = HEAPF32[$2_1 >> 2];
  $12_1 = HEAPF32[$2_1 + 4 >> 2];
  $13_1 = HEAPF32[$2_1 + 16 >> 2];
  $6_1 = HEAPF32[$2_1 + 32 >> 2];
  $2_1 = 0;
  HEAP32[$3_1 + 244 >> 2] = 0;
  HEAP32[$3_1 + 228 >> 2] = 0;
  HEAP32[$3_1 + 212 >> 2] = 0;
  $15_1 = HEAPF32[$1_1 + 8 >> 2];
  $16_1 = HEAPF32[$1_1 + 24 >> 2];
  $17_1 = HEAPF32[$1_1 + 40 >> 2];
  HEAPF32[$3_1 + 224 >> 2] = Math_fround(Math_fround($6_1 * $15_1) + Math_fround($5_1 * $16_1)) + Math_fround($4_1 * $17_1);
  $18_1 = HEAPF32[$1_1 + 4 >> 2];
  $19_1 = HEAPF32[$1_1 + 20 >> 2];
  $20 = HEAPF32[$1_1 + 36 >> 2];
  HEAPF32[$3_1 + 220 >> 2] = Math_fround(Math_fround($6_1 * $18_1) + Math_fround($5_1 * $19_1)) + Math_fround($4_1 * $20);
  HEAPF32[$3_1 + 208 >> 2] = Math_fround(Math_fround($13_1 * $15_1) + Math_fround($8_1 * $16_1)) + Math_fround($7_1 * $17_1);
  HEAPF32[$3_1 + 204 >> 2] = Math_fround(Math_fround($13_1 * $18_1) + Math_fround($8_1 * $19_1)) + Math_fround($7_1 * $20);
  $21 = $9_1;
  $9_1 = HEAPF32[$1_1 + 48 >> 2];
  $22_1 = HEAPF32[$1_1 + 52 >> 2];
  $23_1 = HEAPF32[$1_1 + 56 >> 2];
  HEAPF32[$3_1 + 240 >> 2] = $21 + Math_fround(Math_fround(Math_fround($6_1 * $9_1) + Math_fround($5_1 * $22_1)) + Math_fround($4_1 * $23_1));
  HEAPF32[$3_1 + 236 >> 2] = $14 + Math_fround(Math_fround(Math_fround($13_1 * $9_1) + Math_fround($8_1 * $22_1)) + Math_fround($7_1 * $23_1));
  HEAP32[$3_1 + 196 >> 2] = 0;
  $21 = $6_1;
  $6_1 = HEAPF32[$1_1 >> 2];
  $14 = $5_1;
  $5_1 = HEAPF32[$1_1 + 16 >> 2];
  $30 = $4_1;
  $4_1 = HEAPF32[$1_1 + 32 >> 2];
  HEAPF32[$3_1 + 216 >> 2] = Math_fround(Math_fround($21 * $6_1) + Math_fround($14 * $5_1)) + Math_fround($30 * $4_1);
  HEAPF32[$3_1 + 200 >> 2] = Math_fround(Math_fround($13_1 * $6_1) + Math_fround($8_1 * $5_1)) + Math_fround($7_1 * $4_1);
  HEAPF32[$3_1 + 192 >> 2] = Math_fround(Math_fround($11 * $15_1) + Math_fround($12_1 * $16_1)) + Math_fround($10 * $17_1);
  HEAPF32[$3_1 + 188 >> 2] = Math_fround(Math_fround($11 * $18_1) + Math_fround($12_1 * $19_1)) + Math_fround($10 * $20);
  HEAPF32[$3_1 + 184 >> 2] = Math_fround(Math_fround($11 * $6_1) + Math_fround($12_1 * $5_1)) + Math_fround($10 * $4_1);
  HEAPF32[$3_1 + 232 >> 2] = $29_1 + Math_fround(Math_fround(Math_fround($11 * $9_1) + Math_fround($12_1 * $22_1)) + Math_fround($10 * $23_1));
  $1_1 = HEAP32[$28_1 + 12 >> 2];
  $14 = HEAPF32[$1_1 + 52 >> 2];
  $9_1 = HEAPF32[$1_1 + 56 >> 2];
  $7_1 = HEAPF32[$1_1 + 24 >> 2];
  $8_1 = HEAPF32[$1_1 + 20 >> 2];
  $4_1 = HEAPF32[$1_1 + 40 >> 2];
  $5_1 = HEAPF32[$1_1 + 36 >> 2];
  $28_1 = HEAP32[$32 >> 2];
  $29_1 = HEAPF32[$1_1 + 48 >> 2];
  $10 = HEAPF32[$1_1 + 8 >> 2];
  $11 = HEAPF32[$1_1 >> 2];
  $12_1 = HEAPF32[$1_1 + 4 >> 2];
  $13_1 = HEAPF32[$1_1 + 16 >> 2];
  $6_1 = HEAPF32[$1_1 + 32 >> 2];
  HEAP32[$3_1 + 180 >> 2] = 0;
  HEAP32[$3_1 + 164 >> 2] = 0;
  HEAP32[$3_1 + 148 >> 2] = 0;
  $1_1 = $28_1 + $31_1 | 0;
  $15_1 = HEAPF32[$1_1 + 8 >> 2];
  $16_1 = HEAPF32[$1_1 + 24 >> 2];
  $17_1 = HEAPF32[$1_1 + 40 >> 2];
  HEAPF32[$3_1 + 160 >> 2] = Math_fround(Math_fround($6_1 * $15_1) + Math_fround($5_1 * $16_1)) + Math_fround($4_1 * $17_1);
  $18_1 = HEAPF32[$1_1 + 4 >> 2];
  $19_1 = HEAPF32[$1_1 + 20 >> 2];
  $20 = HEAPF32[$1_1 + 36 >> 2];
  HEAPF32[$3_1 + 156 >> 2] = Math_fround(Math_fround($6_1 * $18_1) + Math_fround($5_1 * $19_1)) + Math_fround($4_1 * $20);
  HEAPF32[$3_1 + 144 >> 2] = Math_fround(Math_fround($13_1 * $15_1) + Math_fround($8_1 * $16_1)) + Math_fround($7_1 * $17_1);
  HEAPF32[$3_1 + 140 >> 2] = Math_fround(Math_fround($13_1 * $18_1) + Math_fround($8_1 * $19_1)) + Math_fround($7_1 * $20);
  $21 = $9_1;
  $9_1 = HEAPF32[$1_1 + 48 >> 2];
  $22_1 = HEAPF32[$1_1 + 52 >> 2];
  $23_1 = HEAPF32[$1_1 + 56 >> 2];
  HEAPF32[$3_1 + 176 >> 2] = $21 + Math_fround(Math_fround(Math_fround($6_1 * $9_1) + Math_fround($5_1 * $22_1)) + Math_fround($4_1 * $23_1));
  HEAPF32[$3_1 + 172 >> 2] = $14 + Math_fround(Math_fround(Math_fround($13_1 * $9_1) + Math_fround($8_1 * $22_1)) + Math_fround($7_1 * $23_1));
  HEAP32[$3_1 + 132 >> 2] = 0;
  $21 = $6_1;
  $6_1 = HEAPF32[$1_1 >> 2];
  $14 = $5_1;
  $5_1 = HEAPF32[$1_1 + 16 >> 2];
  $30 = $4_1;
  $4_1 = HEAPF32[$1_1 + 32 >> 2];
  HEAPF32[$3_1 + 152 >> 2] = Math_fround(Math_fround($21 * $6_1) + Math_fround($14 * $5_1)) + Math_fround($30 * $4_1);
  HEAPF32[$3_1 + 136 >> 2] = Math_fround(Math_fround($13_1 * $6_1) + Math_fround($8_1 * $5_1)) + Math_fround($7_1 * $4_1);
  HEAPF32[$3_1 + 128 >> 2] = Math_fround(Math_fround($11 * $15_1) + Math_fround($12_1 * $16_1)) + Math_fround($10 * $17_1);
  HEAPF32[$3_1 + 124 >> 2] = Math_fround(Math_fround($11 * $18_1) + Math_fround($12_1 * $19_1)) + Math_fround($10 * $20);
  HEAPF32[$3_1 + 120 >> 2] = Math_fround(Math_fround($11 * $6_1) + Math_fround($12_1 * $5_1)) + Math_fround($10 * $4_1);
  HEAPF32[$3_1 + 168 >> 2] = $29_1 + Math_fround(Math_fround(Math_fround($11 * $9_1) + Math_fround($12_1 * $22_1)) + Math_fround($10 * $23_1));
  FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 8 >> 2]]($25, $3_1 + 184 | 0, $3_1 + 104 | 0, $3_1 + 88 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$24_1 >> 2] + 8 >> 2]]($24_1, $3_1 + 120 | 0, $3_1 + 72 | 0, $3_1 + 56 | 0);
  $7_1 = HEAPF32[HEAP32[$0 + 24 >> 2] + 32 >> 2];
  $8_1 = Math_fround(HEAPF32[$3_1 + 104 >> 2] - $7_1);
  HEAPF32[$3_1 + 104 >> 2] = $8_1;
  HEAPF32[$3_1 + 108 >> 2] = HEAPF32[$3_1 + 108 >> 2] - $7_1;
  HEAPF32[$3_1 + 112 >> 2] = HEAPF32[$3_1 + 112 >> 2] - $7_1;
  HEAPF32[$3_1 + 88 >> 2] = $7_1 + HEAPF32[$3_1 + 88 >> 2];
  HEAPF32[$3_1 + 92 >> 2] = $7_1 + HEAPF32[$3_1 + 92 >> 2];
  HEAPF32[$3_1 + 96 >> 2] = $7_1 + HEAPF32[$3_1 + 96 >> 2];
  $1_1 = HEAP32[6293];
  label$1 : {
   if ($1_1) {
    if (!FUNCTION_TABLE[$1_1]($25, $24_1)) {
     break label$1
    }
    $8_1 = HEAPF32[$3_1 + 104 >> 2];
   }
   if (!($8_1 > HEAPF32[$3_1 + 56 >> 2] | HEAPF32[$3_1 + 88 >> 2] < HEAPF32[$3_1 + 72 >> 2])) {
    $2_1 = 1
   }
   $1_1 = 0;
   $1_1 = HEAPF32[$3_1 + 96 >> 2] < HEAPF32[$3_1 + 80 >> 2] | HEAPF32[$3_1 + 112 >> 2] > HEAPF32[$3_1 + 64 >> 2] ? $1_1 : $2_1;
   if (HEAPF32[$3_1 + 92 >> 2] < HEAPF32[$3_1 + 76 >> 2] | HEAPF32[$3_1 + 108 >> 2] > HEAPF32[$3_1 + 60 >> 2] | $1_1 ^ 1) {
    break label$1
   }
   HEAP32[$3_1 + 48 >> 2] = -1;
   HEAP32[$3_1 + 36 >> 2] = $25;
   $1_1 = HEAP32[$0 + 8 >> 2];
   HEAP32[$3_1 + 32 >> 2] = $1_1;
   HEAP32[$3_1 + 40 >> 2] = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$3_1 + 44 >> 2] = $3_1 + 184;
   HEAP32[$3_1 + 52 >> 2] = $27_1;
   HEAP32[$3_1 + 24 >> 2] = -1;
   HEAP32[$3_1 + 12 >> 2] = $24_1;
   $1_1 = HEAP32[$0 + 12 >> 2];
   HEAP32[$3_1 + 8 >> 2] = $1_1;
   HEAP32[$3_1 + 16 >> 2] = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $3_1 + 120;
   HEAP32[$3_1 + 28 >> 2] = $26_1;
   $1_1 = $649(HEAP32[$0 + 28 >> 2], $27_1, $26_1);
   label$5 : {
    if (!!(HEAPF32[HEAP32[$0 + 24 >> 2] + 32 >> 2] > Math_fround(0.0))) {
     $1_1 = HEAP32[$0 + 16 >> 2];
     $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 32 | 0, $3_1 + 8 | 0, 0, 2) | 0;
     break label$5;
    }
    if ($1_1) {
     $2_1 = HEAP32[$1_1 + 8 >> 2];
     break label$5;
    }
    $1_1 = HEAP32[$0 + 16 >> 2];
    $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 32 | 0, $3_1 + 8 | 0, HEAP32[$0 + 32 >> 2], 1) | 0;
    $1_1 = HEAP32[$0 + 28 >> 2];
    (wasm2js_i32$0 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $27_1, $26_1) | 0, wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
   }
   $1_1 = HEAP32[$0 + 24 >> 2];
   $24_1 = HEAP32[$1_1 + 12 >> 2];
   $25 = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$1_1 + 12 >> 2] = $3_1 + 8;
   HEAP32[$1_1 + 8 >> 2] = $3_1 + 32;
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, -1, $27_1);
   $1_1 = HEAP32[$0 + 24 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, -1, $26_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $3_1 + 32 | 0, $3_1 + 8 | 0, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]);
   $0 = HEAP32[$0 + 24 >> 2];
   HEAP32[$0 + 8 >> 2] = $25;
   HEAP32[$0 + 12 >> 2] = $24_1;
  }
  $614();
  global$0 = $3_1 + 256 | 0;
 }
 
 function $668($0, $1_1, $2_1, $3_1) {
  $72($0, $1_1);
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 8 | 0] = 0;
  HEAP32[$0 >> 2] = 15188;
  $1_1 = HEAP32[$0 + 4 >> 2];
  $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$3_1 + 8 >> 2]) | 0;
  HEAP8[$0 + 8 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = $1_1;
 }
 
 function $669($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 15188;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  return $0 | 0;
 }
 
 function $670($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 15188;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  $37($0);
 }
 
 function $671($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $0 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (!$0) {
    break label$1
   }
   HEAP32[$4_1 + 4 >> 2] = $0;
   $6_1 = HEAP32[$1_1 + 12 >> 2];
   $8_1 = HEAP32[$2_1 + 12 >> 2];
   $12_1 = Math_fround(HEAPF32[$6_1 + 48 >> 2] - HEAPF32[$8_1 + 48 >> 2]);
   $9_1 = Math_fround(HEAPF32[$6_1 + 52 >> 2] - HEAPF32[$8_1 + 52 >> 2]);
   $10 = Math_fround(HEAPF32[$6_1 + 56 >> 2] - HEAPF32[$8_1 + 56 >> 2]);
   $5_1 = Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($9_1 * $9_1)) + Math_fround($10 * $10));
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $11 = HEAPF32[$6_1 + 16 >> 2];
   $7_1 = HEAPF32[$6_1 + 32 >> 2];
   $1_1 = HEAP32[$1_1 + 4 >> 2];
   $13_1 = HEAPF32[$1_1 + 16 >> 2];
   $14 = HEAPF32[$1_1 + 32 >> 2];
   $6_1 = HEAP32[$0 + 780 >> 2];
   if (($6_1 | 0) >= 1) {
    $1_1 = $0 + 4 | 0;
    $8_1 = 0;
    while (1) {
     $214($1_1);
     $1_1 = $1_1 + 192 | 0;
     $8_1 = $8_1 + 1 | 0;
     $6_1 = HEAP32[$0 + 780 >> 2];
     if (($8_1 | 0) < ($6_1 | 0)) {
      continue
     }
     break;
    };
   }
   $5_1 = Math_fround(Math_sqrt($5_1));
   $11 = Math_fround($7_1 * $11);
   $7_1 = Math_fround($14 * $13_1);
   label$4 : {
    if (!$6_1) {
     break label$4
    }
    $1_1 = HEAP32[6024];
    if (!$1_1) {
     break label$4
    }
    HEAP32[$3_1 + 16 >> 2] = $0;
    FUNCTION_TABLE[$1_1]($3_1 + 16 | 0);
   }
   HEAP32[$0 + 780 >> 2] = 0;
   $7_1 = Math_fround($7_1 + $11);
   if ($5_1 > Math_fround($7_1 + HEAPF32[$4_1 + 32 >> 2])) {
    break label$1
   }
   HEAP32[$3_1 + 24 >> 2] = 0;
   HEAP32[$3_1 + 28 >> 2] = 0;
   HEAP32[$3_1 + 16 >> 2] = 1065353216;
   HEAP32[$3_1 + 20 >> 2] = 0;
   $7_1 = Math_fround($5_1 - $7_1);
   label$5 : {
    if (!($5_1 > Math_fround(1.1920928955078125e-07))) {
     $5_1 = Math_fround(1.0);
     $10 = Math_fround(0.0);
     $9_1 = Math_fround(0.0);
     break label$5;
    }
    HEAP32[$3_1 + 28 >> 2] = 0;
    $5_1 = Math_fround(Math_fround(1.0) / $5_1);
    $10 = Math_fround($10 * $5_1);
    HEAPF32[$3_1 + 24 >> 2] = $10;
    $9_1 = Math_fround($9_1 * $5_1);
    HEAPF32[$3_1 + 20 >> 2] = $9_1;
    $5_1 = Math_fround($12_1 * $5_1);
    HEAPF32[$3_1 + 16 >> 2] = $5_1;
   }
   HEAP32[$3_1 + 12 >> 2] = 0;
   $0 = HEAP32[$2_1 + 12 >> 2];
   HEAPF32[$3_1 >> 2] = Math_fround($11 * $5_1) + HEAPF32[$0 + 48 >> 2];
   HEAPF32[$3_1 + 8 >> 2] = Math_fround($11 * $10) + HEAPF32[$0 + 56 >> 2];
   HEAPF32[$3_1 + 4 >> 2] = Math_fround($11 * $9_1) + HEAPF32[$0 + 52 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $3_1 + 16 | 0, $3_1, $7_1);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $673($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0 + 12 >> 2];
  if (!(!$3_1 | !HEAPU8[$0 + 8 | 0])) {
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   label$2 : {
    if (($2_1 | 0) != HEAP32[$1_1 + 8 >> 2]) {
     break label$2
    }
    $5_1 = $2_1 ? $2_1 << 1 : 1;
    if (($2_1 | 0) >= ($5_1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$5_1) {
      break label$3
     }
     $6_1 = $79($5_1 << 2);
     $2_1 = HEAP32[$1_1 + 4 >> 2];
    }
    if (($2_1 | 0) >= 1) {
     $3_1 = 0;
     $4_1 = $2_1;
     while (1) {
      HEAP32[$3_1 + $6_1 >> 2] = HEAP32[HEAP32[$1_1 + 12 >> 2] + $3_1 >> 2];
      $3_1 = $3_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break;
     };
    }
    $4_1 = HEAP32[$1_1 + 12 >> 2];
    if ($4_1) {
     if (HEAPU8[$1_1 + 16 | 0]) {
      $80($4_1);
      $2_1 = HEAP32[$1_1 + 4 >> 2];
     }
     HEAP32[$1_1 + 12 >> 2] = 0;
    }
    HEAP32[$1_1 + 12 >> 2] = $6_1;
    HEAP8[$1_1 + 16 | 0] = 1;
    HEAP32[$1_1 + 8 >> 2] = $5_1;
    $3_1 = HEAP32[$0 + 12 >> 2];
   }
   HEAP32[$1_1 + 4 >> 2] = $2_1 + 1;
   HEAP32[HEAP32[$1_1 + 12 >> 2] + ($2_1 << 2) >> 2] = $3_1;
  }
 }
 
 function $675($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0);
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 108 >> 2] = 0;
  $5_1 = HEAPF32[$1_1 + 80 >> 2];
  $6_1 = HEAPF32[$1_1 + 96 >> 2];
  $17_1 = HEAPF32[$1_1 + 120 >> 2];
  $26_1 = HEAPF32[$1_1 + 56 >> 2];
  $21 = HEAPF32[$1_1 + 112 >> 2];
  $22_1 = HEAPF32[$1_1 + 116 >> 2];
  $27_1 = HEAPF32[$1_1 + 52 >> 2];
  $7_1 = HEAPF32[$1_1 + 68 >> 2];
  $9_1 = HEAPF32[$1_1 + 84 >> 2];
  $10 = HEAPF32[$1_1 + 100 >> 2];
  $8_1 = HEAPF32[$1_1 + 20 >> 2];
  $15_1 = HEAPF32[$1_1 + 36 >> 2];
  $11 = HEAPF32[$1_1 + 72 >> 2];
  $12_1 = HEAPF32[$1_1 + 88 >> 2];
  $16_1 = HEAPF32[$1_1 + 24 >> 2];
  $13_1 = HEAPF32[$1_1 + 104 >> 2];
  $18_1 = HEAPF32[$1_1 + 40 >> 2];
  $14 = HEAPF32[$1_1 + 64 >> 2];
  $19_1 = HEAPF32[$1_1 + 32 >> 2];
  $20 = HEAPF32[$1_1 >> 2];
  $23_1 = HEAPF32[$1_1 + 16 >> 2];
  $28_1 = HEAPF32[$1_1 + 48 >> 2];
  $24_1 = HEAPF32[$1_1 + 4 >> 2];
  $25 = HEAPF32[$1_1 + 8 >> 2];
  HEAP32[$3_1 + 100 >> 2] = 0;
  HEAP32[$3_1 + 84 >> 2] = 0;
  HEAP32[$3_1 + 68 >> 2] = 0;
  HEAPF32[$3_1 + 80 >> 2] = Math_fround(Math_fround($25 * $11) + Math_fround($16_1 * $12_1)) + Math_fround($18_1 * $13_1);
  HEAPF32[$3_1 + 76 >> 2] = Math_fround(Math_fround($24_1 * $11) + Math_fround($8_1 * $12_1)) + Math_fround($15_1 * $13_1);
  HEAPF32[$3_1 - -64 >> 2] = Math_fround(Math_fround($25 * $7_1) + Math_fround($16_1 * $9_1)) + Math_fround($18_1 * $10);
  HEAPF32[$3_1 + 60 >> 2] = Math_fround(Math_fround($24_1 * $7_1) + Math_fround($8_1 * $9_1)) + Math_fround($15_1 * $10);
  $21 = Math_fround($28_1 - $21);
  $22_1 = Math_fround($27_1 - $22_1);
  $17_1 = Math_fround($26_1 - $17_1);
  HEAPF32[$3_1 + 96 >> 2] = Math_fround(Math_fround($11 * $21) + Math_fround($12_1 * $22_1)) + Math_fround($13_1 * $17_1);
  HEAPF32[$3_1 + 92 >> 2] = Math_fround(Math_fround($21 * $7_1) + Math_fround($22_1 * $9_1)) + Math_fround($17_1 * $10);
  HEAP32[$3_1 + 52 >> 2] = 0;
  HEAPF32[$3_1 + 72 >> 2] = Math_fround(Math_fround($20 * $11) + Math_fround($23_1 * $12_1)) + Math_fround($19_1 * $13_1);
  HEAPF32[$3_1 + 56 >> 2] = Math_fround(Math_fround($20 * $7_1) + Math_fround($23_1 * $9_1)) + Math_fround($19_1 * $10);
  HEAPF32[$3_1 + 48 >> 2] = Math_fround(Math_fround($14 * $25) + Math_fround($5_1 * $16_1)) + Math_fround($6_1 * $18_1);
  HEAPF32[$3_1 + 44 >> 2] = Math_fround(Math_fround($14 * $24_1) + Math_fround($5_1 * $8_1)) + Math_fround($6_1 * $15_1);
  HEAPF32[$3_1 + 40 >> 2] = Math_fround(Math_fround($14 * $20) + Math_fround($5_1 * $23_1)) + Math_fround($6_1 * $19_1);
  HEAPF32[$3_1 + 88 >> 2] = Math_fround(Math_fround($21 * $14) + Math_fround($22_1 * $5_1)) + Math_fround($17_1 * $6_1);
  label$1 : {
   if (!$676($0, $3_1 + 88 | 0, $3_1 + 128 | 0, $3_1 + 112 | 0, $3_1 + 108 | 0, HEAPF32[$0 + 12 >> 2])) {
    break label$1
   }
   if ($4_1) {
    $9_1 = HEAPF32[$1_1 + 72 >> 2];
    $10 = HEAPF32[$1_1 + 64 >> 2];
    $11 = HEAPF32[$1_1 + 68 >> 2];
    $12_1 = HEAPF32[$1_1 + 88 >> 2];
    $13_1 = HEAPF32[$1_1 + 80 >> 2];
    $14 = HEAPF32[$1_1 + 84 >> 2];
    $8_1 = HEAPF32[$1_1 + 104 >> 2];
    $15_1 = HEAPF32[$1_1 + 96 >> 2];
    $16_1 = HEAPF32[$1_1 + 100 >> 2];
    $5_1 = HEAPF32[$3_1 + 120 >> 2];
    $6_1 = HEAPF32[$3_1 + 112 >> 2];
    $7_1 = HEAPF32[$3_1 + 116 >> 2];
    HEAP32[$3_1 + 36 >> 2] = 0;
    $18_1 = Math_fround(Math_fround(Math_fround($6_1 * $15_1) + Math_fround($7_1 * $16_1)) + Math_fround($5_1 * $8_1));
    HEAPF32[$3_1 + 32 >> 2] = -$18_1;
    $19_1 = Math_fround(Math_fround(Math_fround($6_1 * $13_1) + Math_fround($7_1 * $14)) + Math_fround($5_1 * $12_1));
    HEAPF32[$3_1 + 28 >> 2] = -$19_1;
    $20 = Math_fround(Math_fround(Math_fround($10 * $6_1) + Math_fround($11 * $7_1)) + Math_fround($9_1 * $5_1));
    HEAPF32[$3_1 + 24 >> 2] = -$20;
    HEAP32[$3_1 + 20 >> 2] = 0;
    $6_1 = HEAPF32[$3_1 + 128 >> 2];
    $7_1 = HEAPF32[$3_1 + 132 >> 2];
    $17_1 = $8_1;
    $8_1 = HEAPF32[$3_1 + 136 >> 2];
    $5_1 = HEAPF32[$3_1 + 108 >> 2];
    HEAPF32[$3_1 + 16 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $6_1) + Math_fround($16_1 * $7_1)) + Math_fround($17_1 * $8_1)) + HEAPF32[$1_1 + 120 >> 2]) + Math_fround($18_1 * $5_1);
    HEAPF32[$3_1 + 12 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $13_1) + Math_fround($7_1 * $14)) + Math_fround($8_1 * $12_1)) + HEAPF32[$1_1 + 116 >> 2]) + Math_fround($19_1 * $5_1);
    HEAPF32[$3_1 + 8 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $10) + Math_fround($7_1 * $11)) + Math_fround($8_1 * $9_1)) + HEAPF32[$1_1 + 112 >> 2]) + Math_fround($20 * $5_1);
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $3_1 + 24 | 0, $3_1 + 8 | 0, $5_1);
    break label$1;
   }
   HEAP32[$3_1 + 36 >> 2] = 0;
   $5_1 = HEAPF32[$3_1 + 112 >> 2];
   $9_1 = HEAPF32[$1_1 + 96 >> 2];
   $6_1 = HEAPF32[$3_1 + 116 >> 2];
   $10 = HEAPF32[$1_1 + 100 >> 2];
   $7_1 = HEAPF32[$3_1 + 120 >> 2];
   $11 = HEAPF32[$1_1 + 104 >> 2];
   HEAPF32[$3_1 + 32 >> 2] = Math_fround(Math_fround($5_1 * $9_1) + Math_fround($6_1 * $10)) + Math_fround($7_1 * $11);
   $12_1 = HEAPF32[$1_1 + 80 >> 2];
   $13_1 = HEAPF32[$1_1 + 84 >> 2];
   $14 = HEAPF32[$1_1 + 88 >> 2];
   HEAPF32[$3_1 + 28 >> 2] = Math_fround(Math_fround($5_1 * $12_1) + Math_fround($6_1 * $13_1)) + Math_fround($7_1 * $14);
   $8_1 = HEAPF32[$1_1 + 64 >> 2];
   $15_1 = HEAPF32[$1_1 + 68 >> 2];
   $16_1 = HEAPF32[$1_1 + 72 >> 2];
   HEAPF32[$3_1 + 24 >> 2] = Math_fround(Math_fround($5_1 * $8_1) + Math_fround($6_1 * $15_1)) + Math_fround($7_1 * $16_1);
   HEAP32[$3_1 + 20 >> 2] = 0;
   $5_1 = HEAPF32[$3_1 + 128 >> 2];
   $6_1 = HEAPF32[$3_1 + 132 >> 2];
   $7_1 = HEAPF32[$3_1 + 136 >> 2];
   HEAPF32[$3_1 + 16 >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $5_1) + Math_fround($10 * $6_1)) + Math_fround($11 * $7_1)) + HEAPF32[$1_1 + 120 >> 2];
   HEAPF32[$3_1 + 12 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * $12_1) + Math_fround($6_1 * $13_1)) + Math_fround($7_1 * $14)) + HEAPF32[$1_1 + 116 >> 2];
   HEAPF32[$3_1 + 8 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * $8_1) + Math_fround($6_1 * $15_1)) + Math_fround($7_1 * $16_1)) + HEAPF32[$1_1 + 112 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $3_1 + 24 | 0, $3_1 + 8 | 0, HEAPF32[$3_1 + 108 >> 2]);
  }
  global$0 = $3_1 + 144 | 0;
 }
 
 function $676($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = 0;
  $9_1 = global$0 - 32 | 0;
  global$0 = $9_1;
  $10 = HEAP32[$0 + 8 >> 2];
  $7_1 = HEAPF32[$10 + 60 >> 2];
  $6_1 = Math_fround(HEAPF32[$10 + 76 >> 2] - $7_1);
  $15_1 = HEAPF32[$10 - -64 >> 2];
  $8_1 = Math_fround(HEAPF32[$10 + 96 >> 2] - $15_1);
  $11 = Math_fround(HEAPF32[$10 + 80 >> 2] - $15_1);
  $14 = Math_fround(HEAPF32[$10 + 92 >> 2] - $7_1);
  $16_1 = Math_fround(Math_fround($6_1 * $8_1) - Math_fround($11 * $14));
  $19_1 = $11;
  $17_1 = HEAPF32[$10 + 68 >> 2];
  $11 = Math_fround(HEAPF32[$10 + 100 >> 2] - $17_1);
  $12_1 = Math_fround(HEAPF32[$10 + 84 >> 2] - $17_1);
  $8_1 = Math_fround(Math_fround($19_1 * $11) - Math_fround($12_1 * $8_1));
  $14 = Math_fround(Math_fround($12_1 * $14) - Math_fround($6_1 * $11));
  $11 = Math_fround(Math_fround($16_1 * $16_1) + Math_fround(Math_fround($8_1 * $8_1) + Math_fround($14 * $14)));
  label$1 : {
   if (!($11 >= Math_fround(1.4210854715202004e-14))) {
    break label$1
   }
   $18_1 = HEAP32[$0 + 4 >> 2];
   $19_1 = Math_fround(HEAPF32[$18_1 + 32 >> 2] * HEAPF32[$18_1 + 16 >> 2]);
   $6_1 = Math_fround($19_1 + $5_1);
   $5_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($11)));
   $11 = Math_fround($8_1 * $5_1);
   $8_1 = HEAPF32[$1_1 >> 2];
   $14 = Math_fround($14 * $5_1);
   $12_1 = HEAPF32[$1_1 + 4 >> 2];
   $20 = Math_fround(Math_fround($11 * Math_fround($8_1 - $7_1)) + Math_fround($14 * Math_fround($12_1 - $15_1)));
   $15_1 = Math_fround($16_1 * $5_1);
   $7_1 = HEAPF32[$1_1 + 8 >> 2];
   $5_1 = Math_fround($20 + Math_fround($15_1 * Math_fround($7_1 - $17_1)));
   if (!!($5_1 < Math_fround(0.0))) {
    $15_1 = Math_fround(-$15_1);
    $14 = Math_fround(-$14);
    $11 = Math_fround(-$11);
    $5_1 = Math_fround(-$5_1);
   }
   if (!($5_1 < $6_1)) {
    break label$1
   }
   $13_1 = $1_1 + 8 | 0;
   $18_1 = HEAP32[$13_1 + 4 >> 2];
   $28_1 = $9_1 + 24 | 0;
   HEAP32[$28_1 >> 2] = HEAP32[$13_1 >> 2];
   HEAP32[$28_1 + 4 >> 2] = $18_1;
   $13_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$9_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$9_1 + 20 >> 2] = $13_1;
   $13_1 = 0;
   HEAP32[$9_1 + 12 >> 2] = 0;
   HEAPF32[$9_1 + 8 >> 2] = $15_1;
   HEAPF32[$9_1 + 4 >> 2] = $14;
   HEAPF32[$9_1 >> 2] = $11;
   label$3 : {
    if ($677($10 + 60 | 0, $9_1, $9_1 + 16 | 0)) {
     $21 = Math_fround($7_1 - Math_fround($5_1 * $15_1));
     $22_1 = Math_fround($12_1 - Math_fround($5_1 * $14));
     $23_1 = Math_fround($8_1 - Math_fround($5_1 * $11));
     $20 = Math_fround($6_1 * $6_1);
     break label$3;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 100 >> 2]]($10) | 0) < 1) {
     break label$1
    }
    $20 = Math_fround($6_1 * $6_1);
    $18_1 = 0;
    $10 = 0;
    while (1) {
     $13_1 = HEAP32[$0 + 8 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$13_1 >> 2] + 104 >> 2]]($13_1, $10, $9_1 + 16 | 0, $9_1);
     $6_1 = Math_fround(0.0);
     $24_1 = HEAPF32[$9_1 + 16 >> 2];
     $5_1 = Math_fround(HEAPF32[$1_1 >> 2] - $24_1);
     $12_1 = Math_fround(HEAPF32[$9_1 >> 2] - $24_1);
     $25 = HEAPF32[$9_1 + 20 >> 2];
     $7_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] - $25);
     $16_1 = Math_fround(HEAPF32[$9_1 + 4 >> 2] - $25);
     $26_1 = HEAPF32[$9_1 + 24 >> 2];
     $8_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] - $26_1);
     $17_1 = Math_fround(HEAPF32[$9_1 + 8 >> 2] - $26_1);
     $27_1 = Math_fround(Math_fround(Math_fround($5_1 * $12_1) + Math_fround($7_1 * $16_1)) + Math_fround($8_1 * $17_1));
     label$6 : {
      if (!($27_1 > Math_fround(0.0))) {
       break label$6
      }
      $6_1 = Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($16_1 * $16_1)) + Math_fround($17_1 * $17_1));
      if (!!($27_1 < $6_1)) {
       $6_1 = Math_fround($27_1 / $6_1);
       $8_1 = Math_fround($8_1 - Math_fround($17_1 * $6_1));
       $7_1 = Math_fround($7_1 - Math_fround($16_1 * $6_1));
       $5_1 = Math_fround($5_1 - Math_fround($12_1 * $6_1));
       break label$6;
      }
      $8_1 = Math_fround($8_1 - $17_1);
      $7_1 = Math_fround($7_1 - $16_1);
      $5_1 = Math_fround($5_1 - $12_1);
      $6_1 = Math_fround(1.0);
     }
     if (!!(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($7_1 * $7_1)) + Math_fround($8_1 * $8_1)) < $20)) {
      $23_1 = Math_fround($24_1 + Math_fround($12_1 * $6_1));
      $22_1 = Math_fround($25 + Math_fround($16_1 * $6_1));
      $18_1 = 1;
      $21 = Math_fround($26_1 + Math_fround($17_1 * $6_1));
     }
     $10 = $10 + 1 | 0;
     $13_1 = HEAP32[$0 + 8 >> 2];
     if (($10 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$13_1 >> 2] + 100 >> 2]]($13_1) | 0)) {
      continue
     }
     break;
    };
    $13_1 = 0;
    if (!$18_1) {
     break label$1
    }
    $7_1 = HEAPF32[$1_1 + 8 >> 2];
    $12_1 = HEAPF32[$1_1 + 4 >> 2];
    $8_1 = HEAPF32[$1_1 >> 2];
   }
   $5_1 = Math_fround($8_1 - $23_1);
   $8_1 = Math_fround($12_1 - $22_1);
   $7_1 = Math_fround($7_1 - $21);
   $6_1 = Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($8_1 * $8_1)) + Math_fround($7_1 * $7_1));
   if (!($6_1 < $20)) {
    break label$1
   }
   label$9 : {
    if (!!($6_1 > Math_fround(1.1920928955078125e-07))) {
     HEAP32[$3_1 + 12 >> 2] = 0;
     $11 = $7_1;
     $6_1 = Math_fround(Math_sqrt($6_1));
     $7_1 = Math_fround(Math_fround(1.0) / $6_1);
     HEAPF32[$3_1 + 8 >> 2] = $11 * $7_1;
     HEAPF32[$3_1 + 4 >> 2] = $8_1 * $7_1;
     HEAPF32[$3_1 >> 2] = $5_1 * $7_1;
     $19_1 = Math_fround($19_1 - $6_1);
     break label$9;
    }
    HEAP32[$3_1 + 12 >> 2] = 0;
    HEAPF32[$3_1 + 8 >> 2] = $15_1;
    HEAPF32[$3_1 + 4 >> 2] = $14;
    HEAPF32[$3_1 >> 2] = $11;
   }
   HEAP32[$2_1 + 12 >> 2] = 0;
   HEAPF32[$2_1 + 8 >> 2] = $21;
   HEAPF32[$2_1 + 4 >> 2] = $22_1;
   HEAPF32[$2_1 >> 2] = $23_1;
   HEAPF32[$4_1 >> 2] = -$19_1;
   $13_1 = 1;
  }
  global$0 = $9_1 + 32 | 0;
  return $13_1;
 }
 
 function $677($0, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0);
  $10 = HEAPF32[$0 + 40 >> 2];
  $8_1 = HEAPF32[$0 + 24 >> 2];
  $13_1 = Math_fround($10 - $8_1);
  $11 = HEAPF32[$2_1 + 8 >> 2];
  $15_1 = HEAPF32[$0 + 32 >> 2];
  $4_1 = HEAPF32[$0 + 16 >> 2];
  $7_1 = Math_fround($15_1 - $4_1);
  $5_1 = HEAPF32[$1_1 + 4 >> 2];
  $16_1 = HEAPF32[$0 + 36 >> 2];
  $9_1 = HEAPF32[$0 + 20 >> 2];
  $6_1 = Math_fround($16_1 - $9_1);
  $12_1 = HEAPF32[$1_1 >> 2];
  $14 = Math_fround(Math_fround($11 - $8_1) * Math_fround(Math_fround($7_1 * $5_1) - Math_fround($6_1 * $12_1)));
  $17_1 = HEAPF32[$2_1 >> 2];
  $3_1 = $6_1;
  $6_1 = HEAPF32[$1_1 + 8 >> 2];
  $18_1 = HEAPF32[$2_1 + 4 >> 2];
  $13_1 = Math_fround($14 + Math_fround(Math_fround(Math_fround($17_1 - $4_1) * Math_fround(Math_fround($3_1 * $6_1) - Math_fround($13_1 * $5_1))) + Math_fround(Math_fround($18_1 - $9_1) * Math_fround(Math_fround($13_1 * $12_1) - Math_fround($7_1 * $6_1)))));
  $3_1 = $8_1;
  $8_1 = HEAPF32[$0 + 8 >> 2];
  $7_1 = Math_fround($3_1 - $8_1);
  $3_1 = $4_1;
  $4_1 = HEAPF32[$0 >> 2];
  $14 = Math_fround($3_1 - $4_1);
  $3_1 = $9_1;
  $9_1 = HEAPF32[$0 + 4 >> 2];
  $3_1 = Math_fround($3_1 - $9_1);
  $7_1 = Math_fround(Math_fround(Math_fround($11 - $8_1) * Math_fround(Math_fround($14 * $5_1) - Math_fround($3_1 * $12_1))) + Math_fround(Math_fround(Math_fround($17_1 - $4_1) * Math_fround(Math_fround($3_1 * $6_1) - Math_fround($7_1 * $5_1))) + Math_fround(Math_fround($18_1 - $9_1) * Math_fround(Math_fround($7_1 * $12_1) - Math_fround($14 * $6_1)))));
  $0 = 1;
  $3_1 = Math_fround($11 - $10);
  $11 = Math_fround($4_1 - $15_1);
  $4_1 = Math_fround($9_1 - $16_1);
  $10 = Math_fround($8_1 - $10);
  $5_1 = Math_fround(Math_fround($3_1 * Math_fround(Math_fround($11 * $5_1) - Math_fround($4_1 * $12_1))) + Math_fround(Math_fround(Math_fround($17_1 - $15_1) * Math_fround(Math_fround($4_1 * $6_1) - Math_fround($10 * $5_1))) + Math_fround(Math_fround($18_1 - $16_1) * Math_fround(Math_fround($10 * $12_1) - Math_fround($11 * $6_1)))));
  if (!($13_1 > Math_fround(0.0) ? !($5_1 > Math_fround(0.0) ^ 1 | $7_1 > Math_fround(0.0) ^ 1) : 0)) {
   $0 = $7_1 <= Math_fround(0.0) & $13_1 <= Math_fround(0.0) & $5_1 <= Math_fround(0.0)
  }
  return $0;
 }
 
 function $679($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $72($0, $2_1);
  HEAP8[$0 + 16 | 0] = $5_1;
  HEAP32[$0 + 12 >> 2] = $1_1;
  HEAP8[$0 + 8 | 0] = 0;
  HEAP32[$0 >> 2] = 15324;
  if (!$1_1) {
   $1_1 = HEAP32[$0 + 4 >> 2];
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, HEAP32[$3_1 + 8 >> 2], HEAP32[$4_1 + 8 >> 2]) | 0;
   HEAP8[$0 + 8 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = $1_1;
  }
 }
 
 function $680($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 15324;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  return $0 | 0;
 }
 
 function $681($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 15324;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  $37($0);
 }
 
 function $682($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0;
  $5_1 = global$0 - 160 | 0;
  global$0 = $5_1;
  $10 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (!$10) {
    break label$1
   }
   HEAP32[$4_1 + 4 >> 2] = $10;
   $6_1 = HEAPU8[$0 + 16 | 0];
   $7_1 = $6_1 ? $2_1 : $1_1;
   $12_1 = HEAP32[$7_1 + 4 >> 2];
   $6_1 = $6_1 ? $1_1 : $2_1;
   $2_1 = HEAP32[$6_1 + 4 >> 2];
   $1_1 = $5_1 + 144 | 0;
   HEAPF32[$1_1 + 12 >> 2] = HEAPF32[$10 + 784 >> 2] + HEAPF32[$4_1 + 32 >> 2];
   HEAP32[$1_1 + 8 >> 2] = $2_1;
   HEAP32[$1_1 + 4 >> 2] = $12_1;
   HEAP32[$1_1 >> 2] = 15264;
   $10 = $1_1;
   HEAP32[$5_1 + 136 >> 2] = 1566444395;
   $1_1 = HEAP32[$7_1 + 12 >> 2];
   $7_1 = HEAP32[$1_1 >> 2];
   $12_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $1_1 + 8 | 0;
   $13_1 = HEAP32[$2_1 >> 2];
   $2_1 = HEAP32[$2_1 + 4 >> 2];
   $8_1 = $1_1 + 24 | 0;
   $11 = HEAP32[$8_1 + 4 >> 2];
   $9_1 = $5_1 + 32 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $11;
   $8_1 = $5_1 + 16 | 0;
   HEAP32[$8_1 >> 2] = $13_1;
   HEAP32[$8_1 + 4 >> 2] = $2_1;
   $2_1 = HEAP32[$1_1 + 16 >> 2];
   $13_1 = HEAP32[$1_1 + 20 >> 2];
   $8_1 = $1_1 + 40 | 0;
   $11 = HEAP32[$8_1 + 4 >> 2];
   $9_1 = $5_1 + 48 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $11;
   $8_1 = HEAP32[$1_1 + 32 >> 2];
   $11 = HEAP32[$1_1 + 36 >> 2];
   $9_1 = $1_1 + 56 | 0;
   $15_1 = HEAP32[$9_1 + 4 >> 2];
   $14 = $5_1 - -64 | 0;
   HEAP32[$14 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$14 + 4 >> 2] = $15_1;
   HEAP32[$5_1 + 8 >> 2] = $7_1;
   HEAP32[$5_1 + 12 >> 2] = $12_1;
   HEAP32[$5_1 + 24 >> 2] = $2_1;
   HEAP32[$5_1 + 28 >> 2] = $13_1;
   HEAP32[$5_1 + 40 >> 2] = $8_1;
   HEAP32[$5_1 + 44 >> 2] = $11;
   $2_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$5_1 + 56 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$5_1 + 60 >> 2] = $2_1;
   $1_1 = HEAP32[$6_1 + 12 >> 2];
   $2_1 = $1_1 + 8 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $7_1 = $5_1 + 80 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $6_1;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$5_1 + 72 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$5_1 + 76 >> 2] = $2_1;
   $2_1 = $1_1 + 24 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $7_1 = $5_1 + 96 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $6_1;
   $2_1 = HEAP32[$1_1 + 20 >> 2];
   $6_1 = $5_1 + 88 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $2_1;
   $2_1 = $1_1 + 40 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $7_1 = $5_1 + 112 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $6_1;
   $2_1 = HEAP32[$1_1 + 36 >> 2];
   $6_1 = $5_1 + 104 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $2_1;
   $2_1 = HEAP32[$1_1 + 52 >> 2];
   $6_1 = $5_1 + 120 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $2_1;
   $1_1 = $1_1 + 56 | 0;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $6_1 = $5_1 + 128 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $2_1;
   $675($10, $5_1 + 8 | 0, $4_1, HEAP32[$3_1 + 20 >> 2], HEAPU8[$0 + 16 | 0]);
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $0 = HEAP32[$4_1 + 4 >> 2];
   if (!HEAP32[$0 + 780 >> 2]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 772 >> 2];
   $2_1 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2];
   if (($1_1 | 0) != ($2_1 | 0)) {
    $219($0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0, $2_1 + 4 | 0);
    break label$1;
   }
   $219($0, $1_1 + 4 | 0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0);
  }
  global$0 = $5_1 + 160 | 0;
 }
 
 function $685($0) {
  var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0);
  $1_1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $5_1 = $1_1 >>> 31;
  $1_1 = $1_1 & 2147483647;
  label$1 : {
   if ($1_1 >>> 0 >= 1283457024) {
    if ($0 != $0) {
     break label$1
    }
    return $5_1 ? Math_fround(-1.570796251296997) : Math_fround(1.570796251296997);
   }
   label$3 : {
    if ($1_1 >>> 0 <= 1054867455) {
     $3_1 = -1;
     if ($1_1 >>> 0 >= 964689920) {
      break label$3
     }
     break label$1;
    }
    $0 = Math_fround(Math_abs($0));
    if ($1_1 >>> 0 <= 1066926079) {
     if ($1_1 >>> 0 <= 1060110335) {
      $0 = Math_fround(Math_fround(Math_fround($0 + $0) + Math_fround(-1.0)) / Math_fround($0 + Math_fround(2.0)));
      $3_1 = 0;
      break label$3;
     }
     $0 = Math_fround(Math_fround($0 + Math_fround(-1.0)) / Math_fround($0 + Math_fround(1.0)));
     $3_1 = 1;
     break label$3;
    }
    if ($1_1 >>> 0 <= 1075576831) {
     $0 = Math_fround(Math_fround($0 + Math_fround(-1.5)) / Math_fround(Math_fround($0 * Math_fround(1.5)) + Math_fround(1.0)));
     $3_1 = 2;
     break label$3;
    }
    $0 = Math_fround(Math_fround(-1.0) / $0);
    $3_1 = 3;
   }
   $1_1 = $3_1;
   $4_1 = Math_fround($0 * $0);
   $2_1 = Math_fround($4_1 * $4_1);
   $6_1 = Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
   $2_1 = Math_fround($4_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
   if (($1_1 | 0) <= -1) {
    return Math_fround($0 - Math_fround($0 * Math_fround($6_1 + $2_1)))
   }
   $1_1 = $1_1 << 2;
   $0 = Math_fround(HEAPF32[$1_1 + 15408 >> 2] - Math_fround(Math_fround(Math_fround($0 * Math_fround($6_1 + $2_1)) - HEAPF32[$1_1 + 15424 >> 2]) - $0));
   $0 = $5_1 ? Math_fround(-$0) : $0;
  }
  return $0;
 }
 
 function $686($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0;
  if (!($1_1 == $1_1 & $0 == $0)) {
   return Math_fround($0 + $1_1)
  }
  $2_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(0));
  if (($2_1 | 0) == 1065353216) {
   return $685($0)
  }
  $7_1 = $2_1 >>> 30 & 2;
  $3_1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $5_1 = $3_1 >>> 31;
  $4_1 = $7_1 | $5_1;
  label$3 : {
   label$4 : {
    label$5 : {
     $3_1 = $3_1 & 2147483647;
     if (!$3_1) {
      label$7 : {
       switch ($4_1 - 2 | 0) {
       case 0:
        break label$5;
       case 1:
        break label$7;
       default:
        break label$4;
       };
      }
      return Math_fround(-3.1415927410125732);
     }
     $2_1 = $2_1 & 2147483647;
     if (($2_1 | 0) != 2139095040) {
      if (!$2_1) {
       return $5_1 ? Math_fround(-1.5707963705062866) : Math_fround(1.5707963705062866)
      }
      if (!($2_1 + 218103808 >>> 0 >= $3_1 >>> 0 ? ($3_1 | 0) != 2139095040 : 0)) {
       return $5_1 ? Math_fround(-1.5707963705062866) : Math_fround(1.5707963705062866)
      }
      label$12 : {
       if ($3_1 + 218103808 >>> 0 < $2_1 >>> 0) {
        $6_1 = Math_fround(0.0);
        if ($7_1) {
         break label$12
        }
       }
       $6_1 = $685(Math_fround(Math_abs(Math_fround($0 / $1_1))));
      }
      $1_1 = $6_1;
      if ($4_1 >>> 0 <= 2) {
       $0 = $1_1;
       label$15 : {
        switch ($4_1 - 1 | 0) {
        case 0:
         return Math_fround(-$1_1);
        case 1:
         break label$15;
        default:
         break label$4;
        };
       }
       return Math_fround(Math_fround(3.1415927410125732) - Math_fround($1_1 + Math_fround(8.742277657347586e-08)));
      }
      return Math_fround(Math_fround($1_1 + Math_fround(8.742277657347586e-08)) + Math_fround(-3.1415927410125732));
     }
     if (($3_1 | 0) == 2139095040) {
      break label$3
     }
     return HEAPF32[($4_1 << 2) + 15456 >> 2];
    }
    $0 = Math_fround(3.1415927410125732);
   }
   return $0;
  }
  return HEAPF32[($4_1 << 2) + 15440 >> 2];
 }
 
 function $688($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $10 = global$0 + -64 | 0;
  global$0 = $10;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $5_1 = $0 + -1 | 0;
      if ($5_1 >>> 0 <= 1) {
       if ($5_1 - 1) {
        break label$4
       }
       break label$3;
      }
      if (($0 | 0) >= 2) {
       $7_1 = $0 + -1 | 0;
       $5_1 = $1_1;
       while (1) {
        $13_1 = $9_1;
        $9_1 = HEAPF32[$5_1 + 12 >> 2];
        $8_1 = HEAPF32[$5_1 + 4 >> 2];
        $15_1 = Math_fround($9_1 + $8_1);
        $12_1 = HEAPF32[$5_1 >> 2];
        $5_1 = $5_1 + 8 | 0;
        $14 = HEAPF32[$5_1 >> 2];
        $8_1 = Math_fround(Math_fround($12_1 * $9_1) - Math_fround($14 * $8_1));
        $9_1 = Math_fround($13_1 + Math_fround($15_1 * $8_1));
        $6_1 = Math_fround($6_1 + $8_1);
        $11 = Math_fround($11 + Math_fround(Math_fround($12_1 + $14) * $8_1));
        $7_1 = $7_1 + -1 | 0;
        if ($7_1) {
         continue
        }
        break;
       };
      }
      $8_1 = Math_fround(999999984306749440.0);
      $13_1 = $6_1;
      $5_1 = ($0 << 3) + $1_1 | 0;
      $12_1 = HEAPF32[$5_1 + -8 >> 2];
      $14 = HEAPF32[$1_1 + 4 >> 2];
      $15_1 = HEAPF32[$1_1 >> 2];
      $17_1 = HEAPF32[$5_1 + -4 >> 2];
      $6_1 = Math_fround(Math_fround($12_1 * $14) - Math_fround($15_1 * $17_1));
      $13_1 = Math_fround($13_1 + $6_1);
      if (!!(Math_fround(Math_abs($13_1)) > Math_fround(1.1920928955078125e-07))) {
       $8_1 = Math_fround(Math_fround(1.0) / Math_fround($13_1 * Math_fround(3.0)))
      }
      $7_1 = 0;
      if (($0 | 0) <= 0) {
       break label$1
      }
      $9_1 = Math_fround(Math_fround($9_1 + Math_fround(Math_fround($14 + $17_1) * $6_1)) * $8_1);
      $6_1 = Math_fround(Math_fround($11 + Math_fround(Math_fround($12_1 + $15_1) * $6_1)) * $8_1);
      break label$2;
     }
     $9_1 = HEAPF32[$1_1 + 4 >> 2];
     $6_1 = HEAPF32[$1_1 >> 2];
     break label$2;
    }
    $9_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 4 >> 2] + HEAPF32[$1_1 + 12 >> 2]) * Math_fround(.5));
    $6_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2] + HEAPF32[$1_1 + 8 >> 2]) * Math_fround(.5));
   }
   $5_1 = $10 + 32 | 0;
   $7_1 = $0;
   while (1) {
    (wasm2js_i32$0 = $5_1, wasm2js_f32$0 = $686(Math_fround(HEAPF32[$1_1 + 4 >> 2] - $9_1), Math_fround(HEAPF32[$1_1 >> 2] - $6_1))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $1_1 = $1_1 + 8 | 0;
    $5_1 = $5_1 + 4 | 0;
    $7_1 = $7_1 + -1 | 0;
    if ($7_1) {
     continue
    }
    break;
   };
   $1_1 = $10;
   $5_1 = $0;
   while (1) {
    $7_1 = 1;
    HEAP32[$1_1 >> 2] = 1;
    $1_1 = $1_1 + 4 | 0;
    $5_1 = $5_1 + -1 | 0;
    if ($5_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$4_1 >> 2] = $3_1;
  $1_1 = $3_1 << 2;
  $5_1 = $1_1 + $10 | 0;
  HEAP32[$5_1 >> 2] = 0;
  label$11 : {
   if (($2_1 | 0) < 2) {
    break label$11
   }
   $4_1 = $4_1 + 4 | 0;
   if (!$7_1) {
    $1_1 = $2_1 + -1 | 0;
    while (1) {
     HEAP32[$4_1 >> 2] = $3_1;
     HEAP32[$5_1 >> 2] = 0;
     $4_1 = $4_1 + 4 | 0;
     $1_1 = $1_1 + -1 | 0;
     if ($1_1) {
      continue
     }
     break;
    };
    break label$11;
   }
   $9_1 = Math_fround(Math_fround(6.2831854820251465) / Math_fround($2_1 | 0));
   $8_1 = HEAPF32[$1_1 + ($10 + 32 | 0) >> 2];
   $16_1 = 1;
   while (1) {
    HEAP32[$4_1 >> 2] = $3_1;
    $6_1 = Math_fround(Math_fround($9_1 * Math_fround($16_1 | 0)) + $8_1);
    $12_1 = $6_1 > Math_fround(3.1415927410125732) ? Math_fround($6_1 + Math_fround(-6.2831854820251465)) : $6_1;
    $6_1 = Math_fround(1.0e9);
    $5_1 = $10 + 32 | 0;
    $1_1 = $10;
    $18_1 = $3_1;
    $7_1 = 0;
    while (1) {
     label$16 : {
      if (!HEAP32[$1_1 >> 2]) {
       break label$16
      }
      $11 = Math_fround(Math_abs(Math_fround(HEAPF32[$5_1 >> 2] - $12_1)));
      $11 = $11 > Math_fround(3.1415927410125732) ? Math_fround(Math_fround(6.2831854820251465) - $11) : $11;
      if (!($11 < $6_1)) {
       break label$16
      }
      HEAP32[$4_1 >> 2] = $7_1;
      $18_1 = $7_1;
      $6_1 = $11;
     }
     $1_1 = $1_1 + 4 | 0;
     $5_1 = $5_1 + 4 | 0;
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) != ($0 | 0)) {
      continue
     }
     break;
    };
    HEAP32[($18_1 << 2) + $10 >> 2] = 0;
    $4_1 = $4_1 + 4 | 0;
    $16_1 = $16_1 + 1 | 0;
    if (($16_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $10 - -64 | 0;
 }
 
 function $689($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  var $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = 0, $36_1 = 0, $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = 0, $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = Math_fround(0), $55_1 = Math_fround(0), $56_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0;
  $10 = global$0 - 368 | 0;
  global$0 = $10;
  $40_1 = Math_fround(HEAPF32[$2_1 >> 2] * Math_fround(.5));
  HEAPF32[$10 + 356 >> 2] = $40_1;
  $31_1 = HEAPF32[$1_1 + 36 >> 2];
  $41_1 = $1_1 + 4 | 0;
  $32 = HEAPF32[$41_1 >> 2];
  $23_1 = HEAPF32[$1_1 + 20 >> 2];
  $47 = HEAPF32[$1_1 + 40 >> 2];
  $36_1 = $1_1 + 8 | 0;
  $48_1 = HEAPF32[$36_1 >> 2];
  $33_1 = HEAPF32[$1_1 + 24 >> 2];
  $17_1 = HEAPF32[$1_1 + 16 >> 2];
  $20 = HEAPF32[$1_1 + 32 >> 2];
  $16_1 = HEAPF32[$0 >> 2];
  $18_1 = HEAPF32[$3_1 >> 2];
  $14 = HEAPF32[$0 + 4 >> 2];
  $12_1 = HEAPF32[$3_1 + 4 >> 2];
  $11 = HEAPF32[$0 + 8 >> 2];
  $13_1 = HEAPF32[$3_1 + 8 >> 2];
  $58_1 = HEAPF32[$1_1 >> 2];
  $42 = Math_fround(HEAPF32[$2_1 + 4 >> 2] * Math_fround(.5));
  HEAPF32[$10 + 360 >> 2] = $42;
  $37_1 = Math_fround(HEAPF32[$2_1 + 8 >> 2] * Math_fround(.5));
  HEAPF32[$10 + 364 >> 2] = $37_1;
  $38 = Math_fround(HEAPF32[$5_1 >> 2] * Math_fround(.5));
  HEAPF32[$10 + 344 >> 2] = $38;
  $43_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] * Math_fround(.5));
  HEAPF32[$10 + 348 >> 2] = $43_1;
  $44_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] * Math_fround(.5));
  HEAPF32[$10 + 352 >> 2] = $44_1;
  $15_1 = Math_fround($18_1 - $16_1);
  $21 = Math_fround($12_1 - $14);
  $24_1 = Math_fround($13_1 - $11);
  $49_1 = Math_fround(Math_fround(Math_fround($58_1 * $15_1) + Math_fround($17_1 * $21)) + Math_fround($20 * $24_1));
  $39_1 = HEAPF32[$4_1 >> 2];
  $45_1 = HEAPF32[$4_1 + 16 >> 2];
  $12_1 = HEAPF32[$4_1 + 32 >> 2];
  $51_1 = Math_fround(Math_fround(Math_fround($58_1 * $39_1) + Math_fround($17_1 * $45_1)) + Math_fround($20 * $12_1));
  $16_1 = Math_fround(Math_abs($51_1));
  $46_1 = HEAPF32[$4_1 + 4 >> 2];
  $27_1 = HEAPF32[$4_1 + 20 >> 2];
  $28_1 = HEAPF32[$4_1 + 36 >> 2];
  $52_1 = Math_fround(Math_fround(Math_fround($58_1 * $46_1) + Math_fround($17_1 * $27_1)) + Math_fround($20 * $28_1));
  $18_1 = Math_fround(Math_abs($52_1));
  $29_1 = HEAPF32[$4_1 + 8 >> 2];
  $22_1 = HEAPF32[$4_1 + 24 >> 2];
  $26_1 = HEAPF32[$4_1 + 40 >> 2];
  $53_1 = Math_fround(Math_fround(Math_fround($58_1 * $29_1) + Math_fround($17_1 * $22_1)) + Math_fround($20 * $26_1));
  $14 = Math_fround(Math_abs($53_1));
  $11 = Math_fround(Math_fround(Math_abs($49_1)) - Math_fround(Math_fround(Math_fround($40_1 + Math_fround($38 * $16_1)) + Math_fround($43_1 * $18_1)) + Math_fround($44_1 * $14)));
  label$1 : {
   if ($11 > Math_fround(0.0)) {
    break label$1
   }
   $54_1 = Math_fround(Math_fround(Math_fround($32 * $29_1) + Math_fround($23_1 * $22_1)) + Math_fround($31_1 * $26_1));
   $34 = Math_fround(Math_abs($54_1));
   $55_1 = Math_fround(Math_fround(Math_fround($32 * $46_1) + Math_fround($23_1 * $27_1)) + Math_fround($31_1 * $28_1));
   $30 = Math_fround(Math_abs($55_1));
   $56_1 = Math_fround(Math_fround(Math_fround($32 * $39_1) + Math_fround($23_1 * $45_1)) + Math_fround($31_1 * $12_1));
   $25 = Math_fround(Math_abs($56_1));
   $13_1 = Math_fround(-3402823466385288598117041.0e14);
   $2_1 = 0;
   if (!!($11 > Math_fround(-3402823466385288598117041.0e14))) {
    $35 = $49_1 < Math_fround(0.0);
    $13_1 = $11;
    $19_1 = $1_1;
    $2_1 = 1;
   }
   $50_1 = Math_fround(Math_fround(Math_fround($15_1 * $32) + Math_fround($21 * $23_1)) + Math_fround($24_1 * $31_1));
   $11 = Math_fround(Math_fround(Math_abs($50_1)) - Math_fround(Math_fround(Math_fround($42 + Math_fround($38 * $25)) + Math_fround($43_1 * $30)) + Math_fround($44_1 * $34)));
   if ($11 > Math_fround(0.0)) {
    break label$1
   }
   $57_1 = Math_fround(Math_fround(Math_fround($48_1 * $29_1) + Math_fround($33_1 * $22_1)) + Math_fround($47 * $26_1));
   $23_1 = Math_fround(Math_abs($57_1));
   $31_1 = Math_fround(Math_fround(Math_fround($48_1 * $46_1) + Math_fround($33_1 * $27_1)) + Math_fround($47 * $28_1));
   $17_1 = Math_fround(Math_abs($31_1));
   $32 = Math_fround(Math_fround(Math_fround($48_1 * $39_1) + Math_fround($33_1 * $45_1)) + Math_fround($47 * $12_1));
   $20 = Math_fround(Math_abs($32));
   if (!!($11 > $13_1)) {
    $35 = $50_1 < Math_fround(0.0);
    $13_1 = $11;
    $19_1 = $41_1;
    $2_1 = 2;
   }
   $33_1 = Math_fround(Math_fround(Math_fround($15_1 * $48_1) + Math_fround($21 * $33_1)) + Math_fround($24_1 * $47));
   $11 = Math_fround(Math_fround(Math_abs($33_1)) - Math_fround(Math_fround(Math_fround($37_1 + Math_fround($38 * $20)) + Math_fround($43_1 * $17_1)) + Math_fround($44_1 * $23_1)));
   if ($11 > Math_fround(0.0)) {
    break label$1
   }
   if (!!($11 > $13_1)) {
    $35 = $33_1 < Math_fround(0.0);
    $13_1 = $11;
    $19_1 = $36_1;
    $2_1 = 3;
   }
   $12_1 = Math_fround(Math_fround(Math_fround($15_1 * $39_1) + Math_fround($21 * $45_1)) + Math_fround($24_1 * $12_1));
   $11 = Math_fround(Math_fround(Math_abs($12_1)) - Math_fround($38 + Math_fround(Math_fround($37_1 * $20) + Math_fround(Math_fround($40_1 * $16_1) + Math_fround($42 * $25)))));
   if ($11 > Math_fround(0.0)) {
    break label$1
   }
   if (!!($11 > $13_1)) {
    $35 = $12_1 < Math_fround(0.0);
    $13_1 = $11;
    $19_1 = $4_1;
    $2_1 = 4;
   }
   $12_1 = Math_fround(Math_fround(Math_fround($15_1 * $46_1) + Math_fround($21 * $27_1)) + Math_fround($24_1 * $28_1));
   $11 = Math_fround(Math_fround(Math_abs($12_1)) - Math_fround($43_1 + Math_fround(Math_fround($37_1 * $17_1) + Math_fround(Math_fround($40_1 * $18_1) + Math_fround($42 * $30)))));
   if ($11 > Math_fround(0.0)) {
    break label$1
   }
   if (!!($11 > $13_1)) {
    $19_1 = $4_1 + 4 | 0;
    $35 = $12_1 < Math_fround(0.0);
    $13_1 = $11;
    $2_1 = 5;
   }
   $12_1 = Math_fround(Math_fround(Math_fround($15_1 * $29_1) + Math_fround($21 * $22_1)) + Math_fround($24_1 * $26_1));
   $11 = Math_fround(Math_fround(Math_abs($12_1)) - Math_fround($44_1 + Math_fround(Math_fround($37_1 * $23_1) + Math_fround(Math_fround($40_1 * $14) + Math_fround($42 * $34)))));
   if ($11 > Math_fround(0.0)) {
    break label$1
   }
   if (!!($11 > $13_1)) {
    $19_1 = $4_1 + 8 | 0;
    $35 = $12_1 < Math_fround(0.0);
    $13_1 = $11;
    $2_1 = 6;
   }
   $12_1 = Math_fround(Math_fround($33_1 * $56_1) - Math_fround($50_1 * $32));
   $28_1 = Math_fround($18_1 + Math_fround(9.999999747378752e-06));
   $29_1 = Math_fround($20 + Math_fround(9.999999747378752e-06));
   $22_1 = Math_fround($25 + Math_fround(9.999999747378752e-06));
   $26_1 = Math_fround($14 + Math_fround(9.999999747378752e-06));
   $11 = Math_fround(Math_fround(Math_abs($12_1)) - Math_fround(Math_fround($44_1 * $28_1) + Math_fround(Math_fround(Math_fround($42 * $29_1) + Math_fround($37_1 * $22_1)) + Math_fround($43_1 * $26_1))));
   if ($11 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $39_1 = Math_fround($17_1 + Math_fround(9.999999747378752e-06));
   $45_1 = Math_fround($30 + Math_fround(9.999999747378752e-06));
   $46_1 = Math_fround($16_1 + Math_fround(9.999999747378752e-06));
   $24_1 = Math_fround(0.0);
   $25 = Math_fround($56_1 * $56_1);
   $18_1 = Math_fround(Math_fround($32 * $32) + Math_fround(0.0));
   $14 = Math_fround(Math_sqrt(Math_fround($25 + $18_1)));
   label$8 : {
    if (!($14 > Math_fround(1.1920928955078125e-07))) {
     $21 = Math_fround(0.0);
     $15_1 = Math_fround(0.0);
     break label$8;
    }
    $21 = Math_fround(0.0);
    $11 = Math_fround($11 / $14);
    $15_1 = Math_fround(0.0);
    if (!(Math_fround($11 * Math_fround(1.0499999523162842)) > $13_1)) {
     break label$8
    }
    $35 = $12_1 < Math_fround(0.0);
    $21 = Math_fround($56_1 / $14);
    $24_1 = Math_fround(Math_fround(0.0) / $14);
    $19_1 = 0;
    $2_1 = 7;
    $13_1 = $11;
    $15_1 = Math_fround(Math_fround(-$32) / $14);
   }
   $12_1 = Math_fround(Math_fround($33_1 * $55_1) - Math_fround($50_1 * $31_1));
   $11 = Math_fround(Math_fround(Math_abs($12_1)) - Math_fround(Math_fround($44_1 * $46_1) + Math_fround(Math_fround(Math_fround($42 * $39_1) + Math_fround($37_1 * $45_1)) + Math_fround($38 * $26_1))));
   if ($11 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $27_1 = Math_fround($23_1 + Math_fround(9.999999747378752e-06));
   $30 = Math_fround($34 + Math_fround(9.999999747378752e-06));
   $23_1 = Math_fround($55_1 * $55_1);
   $14 = Math_fround(Math_fround($31_1 * $31_1) + Math_fround(0.0));
   $16_1 = Math_fround(Math_sqrt(Math_fround($23_1 + $14)));
   label$10 : {
    if (!($16_1 > Math_fround(1.1920928955078125e-07))) {
     break label$10
    }
    $11 = Math_fround($11 / $16_1);
    if (!(Math_fround($11 * Math_fround(1.0499999523162842)) > $13_1)) {
     break label$10
    }
    $35 = $12_1 < Math_fround(0.0);
    $21 = Math_fround($55_1 / $16_1);
    $15_1 = Math_fround(Math_fround(-$31_1) / $16_1);
    $24_1 = Math_fround(Math_fround(0.0) / $16_1);
    $19_1 = 0;
    $2_1 = 8;
    $13_1 = $11;
   }
   $12_1 = Math_fround(Math_fround($33_1 * $54_1) - Math_fround($50_1 * $57_1));
   $11 = Math_fround(Math_fround(Math_abs($12_1)) - Math_fround(Math_fround($43_1 * $46_1) + Math_fround(Math_fround($38 * $28_1) + Math_fround(Math_fround($42 * $27_1) + Math_fround($37_1 * $30)))));
   if ($11 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $17_1 = Math_fround($54_1 * $54_1);
   $20 = Math_fround(Math_fround($57_1 * $57_1) + Math_fround(0.0));
   $16_1 = Math_fround(Math_sqrt(Math_fround($17_1 + $20)));
   label$11 : {
    if (!($16_1 > Math_fround(1.1920928955078125e-07))) {
     break label$11
    }
    $11 = Math_fround($11 / $16_1);
    if (!(Math_fround($11 * Math_fround(1.0499999523162842)) > $13_1)) {
     break label$11
    }
    $35 = $12_1 < Math_fround(0.0);
    $21 = Math_fround($54_1 / $16_1);
    $15_1 = Math_fround(Math_fround(-$57_1) / $16_1);
    $24_1 = Math_fround(Math_fround(0.0) / $16_1);
    $19_1 = 0;
    $2_1 = 9;
    $13_1 = $11;
   }
   $12_1 = Math_fround(Math_fround($49_1 * $32) - Math_fround($33_1 * $51_1));
   $11 = Math_fround(Math_fround(Math_abs($12_1)) - Math_fround(Math_fround($44_1 * $45_1) + Math_fround(Math_fround(Math_fround($40_1 * $29_1) + Math_fround($37_1 * $46_1)) + Math_fround($43_1 * $30))));
   if ($11 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $16_1 = Math_fround($51_1 * $51_1);
   $18_1 = Math_fround(Math_sqrt(Math_fround($16_1 + $18_1)));
   label$12 : {
    if (!($18_1 > Math_fround(1.1920928955078125e-07))) {
     break label$12
    }
    $11 = Math_fround($11 / $18_1);
    if (!(Math_fround($11 * Math_fround(1.0499999523162842)) > $13_1)) {
     break label$12
    }
    $35 = $12_1 < Math_fround(0.0);
    $21 = Math_fround(Math_fround(-$51_1) / $18_1);
    $15_1 = Math_fround(Math_fround(0.0) / $18_1);
    $24_1 = Math_fround($32 / $18_1);
    $19_1 = 0;
    $2_1 = 10;
    $13_1 = $11;
   }
   $12_1 = Math_fround(Math_fround($49_1 * $31_1) - Math_fround($33_1 * $52_1));
   $11 = Math_fround(Math_fround(Math_abs($12_1)) - Math_fround(Math_fround($44_1 * $22_1) + Math_fround(Math_fround(Math_fround($40_1 * $39_1) + Math_fround($37_1 * $28_1)) + Math_fround($38 * $30))));
   if ($11 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $18_1 = Math_fround($52_1 * $52_1);
   $14 = Math_fround(Math_sqrt(Math_fround($18_1 + $14)));
   label$13 : {
    if (!($14 > Math_fround(1.1920928955078125e-07))) {
     break label$13
    }
    $11 = Math_fround($11 / $14);
    if (!(Math_fround($11 * Math_fround(1.0499999523162842)) > $13_1)) {
     break label$13
    }
    $35 = $12_1 < Math_fround(0.0);
    $21 = Math_fround(Math_fround(-$52_1) / $14);
    $15_1 = Math_fround(Math_fround(0.0) / $14);
    $24_1 = Math_fround($31_1 / $14);
    $19_1 = 0;
    $2_1 = 11;
    $13_1 = $11;
   }
   $12_1 = Math_fround(Math_fround($49_1 * $57_1) - Math_fround($33_1 * $53_1));
   $11 = Math_fround(Math_fround(Math_abs($12_1)) - Math_fround(Math_fround($43_1 * $22_1) + Math_fround(Math_fround($38 * $45_1) + Math_fround(Math_fround($40_1 * $27_1) + Math_fround($37_1 * $26_1)))));
   if ($11 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $14 = Math_fround($53_1 * $53_1);
   $20 = Math_fround(Math_sqrt(Math_fround($14 + $20)));
   label$14 : {
    if (!($20 > Math_fround(1.1920928955078125e-07))) {
     break label$14
    }
    $11 = Math_fround($11 / $20);
    if (!(Math_fround($11 * Math_fround(1.0499999523162842)) > $13_1)) {
     break label$14
    }
    $35 = $12_1 < Math_fround(0.0);
    $21 = Math_fround(Math_fround(-$53_1) / $20);
    $15_1 = Math_fround(Math_fround(0.0) / $20);
    $24_1 = Math_fround($57_1 / $20);
    $19_1 = 0;
    $2_1 = 12;
    $13_1 = $11;
   }
   $12_1 = Math_fround(Math_fround($50_1 * $51_1) - Math_fround($49_1 * $56_1));
   $11 = Math_fround(Math_fround(Math_abs($12_1)) - Math_fround(Math_fround($44_1 * $39_1) + Math_fround(Math_fround(Math_fround($40_1 * $22_1) + Math_fround($42 * $46_1)) + Math_fround($43_1 * $27_1))));
   if ($11 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $16_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($25 + $16_1) + Math_fround(0.0))));
   label$15 : {
    if (!($16_1 > Math_fround(1.1920928955078125e-07))) {
     break label$15
    }
    $11 = Math_fround($11 / $16_1);
    if (!(Math_fround($11 * Math_fround(1.0499999523162842)) > $13_1)) {
     break label$15
    }
    $35 = $12_1 < Math_fround(0.0);
    $21 = Math_fround(Math_fround(0.0) / $16_1);
    $15_1 = Math_fround($51_1 / $16_1);
    $24_1 = Math_fround(Math_fround(-$56_1) / $16_1);
    $19_1 = 0;
    $2_1 = 13;
    $13_1 = $11;
   }
   $12_1 = Math_fround(Math_fround($50_1 * $52_1) - Math_fround($49_1 * $55_1));
   $11 = Math_fround(Math_fround(Math_abs($12_1)) - Math_fround(Math_fround($44_1 * $29_1) + Math_fround(Math_fround(Math_fround($40_1 * $45_1) + Math_fround($42 * $28_1)) + Math_fround($38 * $27_1))));
   if ($11 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $18_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($23_1 + $18_1) + Math_fround(0.0))));
   label$16 : {
    if (!($18_1 > Math_fround(1.1920928955078125e-07))) {
     break label$16
    }
    $11 = Math_fround($11 / $18_1);
    if (!(Math_fround($11 * Math_fround(1.0499999523162842)) > $13_1)) {
     break label$16
    }
    $35 = $12_1 < Math_fround(0.0);
    $21 = Math_fround(Math_fround(0.0) / $18_1);
    $15_1 = Math_fround($52_1 / $18_1);
    $24_1 = Math_fround(Math_fround(-$55_1) / $18_1);
    $19_1 = 0;
    $2_1 = 14;
    $13_1 = $11;
   }
   $12_1 = Math_fround(Math_fround($50_1 * $53_1) - Math_fround($49_1 * $54_1));
   $11 = Math_fround(Math_fround(Math_abs($12_1)) - Math_fround(Math_fround($43_1 * $29_1) + Math_fround(Math_fround($38 * $39_1) + Math_fround(Math_fround($40_1 * $30) + Math_fround($42 * $26_1)))));
   if ($11 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   label$17 : {
    label$18 : {
     label$19 : {
      label$20 : {
       $14 = Math_fround(Math_sqrt(Math_fround(Math_fround($17_1 + $14) + Math_fround(0.0))));
       if (!($14 > Math_fround(1.1920928955078125e-07))) {
        break label$20
       }
       $11 = Math_fround($11 / $14);
       if (!(Math_fround($11 * Math_fround(1.0499999523162842)) > $13_1)) {
        break label$20
       }
       $35 = $12_1 < Math_fround(0.0);
       $21 = Math_fround(Math_fround(0.0) / $14);
       $15_1 = Math_fround($53_1 / $14);
       $24_1 = Math_fround(Math_fround(-$54_1) / $14);
       $2_1 = 15;
       break label$19;
      }
      if (!$2_1) {
       break label$1
      }
      if ($19_1) {
       break label$18
      }
      $11 = $13_1;
     }
     $14 = Math_fround(Math_fround(Math_fround($58_1 * $24_1) + Math_fround($15_1 * HEAPF32[$1_1 + 4 >> 2])) + Math_fround($21 * HEAPF32[$1_1 + 8 >> 2]));
     HEAPF32[$6_1 >> 2] = $14;
     $17_1 = Math_fround(Math_fround(Math_fround($24_1 * HEAPF32[$1_1 + 16 >> 2]) + Math_fround($15_1 * HEAPF32[$1_1 + 20 >> 2])) + Math_fround($21 * HEAPF32[$1_1 + 24 >> 2]));
     HEAPF32[$6_1 + 4 >> 2] = $17_1;
     $15_1 = Math_fround(Math_fround(Math_fround($24_1 * HEAPF32[$1_1 + 32 >> 2]) + Math_fround($15_1 * HEAPF32[$1_1 + 36 >> 2])) + Math_fround($21 * HEAPF32[$1_1 + 40 >> 2]));
     HEAPF32[$6_1 + 8 >> 2] = $15_1;
     break label$17;
    }
    $14 = HEAPF32[$19_1 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$19_1 >> 2];
    $17_1 = HEAPF32[$19_1 + 16 >> 2];
    HEAP32[$6_1 + 4 >> 2] = HEAP32[$19_1 + 16 >> 2];
    $15_1 = HEAPF32[$19_1 + 32 >> 2];
    HEAP32[$6_1 + 8 >> 2] = HEAP32[$19_1 + 32 >> 2];
    $11 = $13_1;
   }
   if ($35) {
    HEAPF32[$6_1 + 8 >> 2] = -$15_1;
    HEAPF32[$6_1 + 4 >> 2] = -$17_1;
    HEAPF32[$6_1 >> 2] = -$14;
   }
   HEAPF32[$7_1 >> 2] = -$11;
   if (($2_1 | 0) >= 7) {
    $19_1 = $10 + 120 | 0;
    HEAP32[$19_1 >> 2] = HEAP32[$0 + 8 >> 2];
    $5_1 = HEAP32[$0 + 4 >> 2];
    HEAP32[$10 + 112 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$10 + 116 >> 2] = $5_1;
    $13_1 = Math_fround(0.0);
    $26_1 = HEAPF32[$10 + 112 >> 2];
    $25 = HEAPF32[$10 + 116 >> 2];
    $12_1 = HEAPF32[$10 + 356 >> 2];
    $15_1 = $12_1;
    $14 = Math_fround(-$12_1);
    $27_1 = HEAPF32[$6_1 >> 2];
    $23_1 = HEAPF32[$1_1 >> 2];
    $7_1 = $6_1 + 4 | 0;
    $34 = HEAPF32[$7_1 >> 2];
    $17_1 = HEAPF32[$1_1 + 16 >> 2];
    $5_1 = $6_1 + 8 | 0;
    $30 = HEAPF32[$5_1 >> 2];
    $12_1 = HEAPF32[$1_1 + 32 >> 2];
    $28_1 = Math_fround(Math_fround(Math_fround($27_1 * $23_1) + Math_fround($34 * $17_1)) + Math_fround($30 * $12_1)) > Math_fround(0.0) ? $15_1 : $14;
    $14 = Math_fround(HEAPF32[$19_1 >> 2] + Math_fround($28_1 * $12_1));
    $12_1 = HEAPF32[$10 + 360 >> 2];
    $15_1 = $12_1;
    $18_1 = Math_fround(-$12_1);
    $20 = HEAPF32[$1_1 + 4 >> 2];
    $16_1 = HEAPF32[$1_1 + 20 >> 2];
    $12_1 = HEAPF32[$1_1 + 36 >> 2];
    $29_1 = Math_fround(Math_fround(Math_fround($27_1 * $20) + Math_fround($34 * $16_1)) + Math_fround($30 * $12_1)) > Math_fround(0.0) ? $15_1 : $18_1;
    $15_1 = Math_fround($14 + Math_fround($29_1 * $12_1));
    $18_1 = HEAPF32[$1_1 + 8 >> 2];
    $14 = HEAPF32[$1_1 + 24 >> 2];
    $12_1 = HEAPF32[$1_1 + 40 >> 2];
    $22_1 = Math_fround(Math_fround(Math_fround($27_1 * $18_1) + Math_fround($34 * $14)) + Math_fround($30 * $12_1)) > Math_fround(0.0) ? $37_1 : Math_fround(-$37_1);
    HEAPF32[$19_1 >> 2] = $15_1 + Math_fround($22_1 * $12_1);
    HEAPF32[$10 + 116 >> 2] = Math_fround(Math_fround($25 + Math_fround($28_1 * $17_1)) + Math_fround($29_1 * $16_1)) + Math_fround($22_1 * $14);
    HEAPF32[$10 + 112 >> 2] = Math_fround(Math_fround($26_1 + Math_fround($28_1 * $23_1)) + Math_fround($29_1 * $20)) + Math_fround($22_1 * $18_1);
    $0 = $10 + 216 | 0;
    HEAP32[$0 >> 2] = HEAP32[$3_1 + 8 >> 2];
    $23_1 = HEAPF32[$4_1 >> 2];
    $17_1 = HEAPF32[$4_1 + 16 >> 2];
    $12_1 = HEAPF32[$4_1 + 32 >> 2];
    $22_1 = Math_fround(Math_fround(Math_fround($27_1 * $23_1) + Math_fround($34 * $17_1)) + Math_fround($30 * $12_1)) > Math_fround(0.0) ? Math_fround(-$38) : $38;
    $14 = Math_fround(HEAPF32[$0 >> 2] + Math_fround($22_1 * $12_1));
    $12_1 = HEAPF32[$10 + 348 >> 2];
    $18_1 = Math_fround(-$12_1);
    $15_1 = $12_1;
    $20 = HEAPF32[$4_1 + 4 >> 2];
    $16_1 = HEAPF32[$4_1 + 20 >> 2];
    $12_1 = HEAPF32[$4_1 + 36 >> 2];
    $26_1 = Math_fround(Math_fround(Math_fround($27_1 * $20) + Math_fround($34 * $16_1)) + Math_fround($30 * $12_1)) > Math_fround(0.0) ? $18_1 : $15_1;
    $21 = Math_fround($14 + Math_fround($26_1 * $12_1));
    $12_1 = HEAPF32[$10 + 352 >> 2];
    $24_1 = Math_fround(-$12_1);
    $15_1 = $12_1;
    $18_1 = HEAPF32[$4_1 + 8 >> 2];
    $14 = HEAPF32[$4_1 + 24 >> 2];
    $12_1 = HEAPF32[$4_1 + 40 >> 2];
    $25 = Math_fround(Math_fround(Math_fround($27_1 * $18_1) + Math_fround($34 * $14)) + Math_fround($30 * $12_1)) > Math_fround(0.0) ? $24_1 : $15_1;
    $28_1 = Math_fround($21 + Math_fround($25 * $12_1));
    HEAPF32[$0 >> 2] = $28_1;
    $0 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$10 + 208 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$10 + 212 >> 2] = $0;
    $29_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$10 + 208 >> 2] + Math_fround($22_1 * $23_1)) + Math_fround($26_1 * $20)) + Math_fround($25 * $18_1));
    HEAPF32[$10 + 208 >> 2] = $29_1;
    $22_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$10 + 212 >> 2] + Math_fround($22_1 * $17_1)) + Math_fround($26_1 * $16_1)) + Math_fround($25 * $14));
    HEAPF32[$10 + 212 >> 2] = $22_1;
    $3_1 = $2_1 + -7 | 0;
    $0 = ($3_1 | 0) / 3 | 0;
    $1_1 = $1_1 + ($0 << 2) | 0;
    $12_1 = HEAPF32[$1_1 >> 2];
    $0 = ($3_1 - Math_imul($0, 3) << 2) + $4_1 | 0;
    $26_1 = HEAPF32[$0 >> 2];
    $20 = HEAPF32[$1_1 + 16 >> 2];
    $25 = HEAPF32[$0 + 16 >> 2];
    $16_1 = HEAPF32[$1_1 + 32 >> 2];
    $23_1 = HEAPF32[$0 + 32 >> 2];
    $17_1 = Math_fround(Math_fround(Math_fround($12_1 * $26_1) + Math_fround($20 * $25)) + Math_fround($16_1 * $23_1));
    $18_1 = Math_fround(Math_fround(1.0) - Math_fround($17_1 * $17_1));
    if (!($18_1 <= Math_fround(9.999999747378752e-05))) {
     $14 = Math_fround($29_1 - HEAPF32[$10 + 112 >> 2]);
     $15_1 = Math_fround($14 * $12_1);
     $12_1 = Math_fround($22_1 - HEAPF32[$10 + 116 >> 2]);
     $13_1 = Math_fround($28_1 - HEAPF32[$19_1 >> 2]);
     $13_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15_1 + Math_fround($12_1 * $20)) + Math_fround($13_1 * $16_1)) * $17_1) - Math_fround(Math_fround(Math_fround($14 * $26_1) + Math_fround($12_1 * $25)) + Math_fround($13_1 * $23_1))) * Math_fround(Math_fround(1.0) / $18_1));
    }
    HEAPF32[$10 + 216 >> 2] = $28_1 + Math_fround($13_1 * $23_1);
    HEAPF32[$10 + 212 >> 2] = $22_1 + Math_fround($13_1 * $25);
    HEAPF32[$10 + 208 >> 2] = $29_1 + Math_fround($13_1 * $26_1);
    HEAP32[$10 + 284 >> 2] = 0;
    HEAPF32[$10 + 280 >> 2] = -HEAPF32[$5_1 >> 2];
    HEAPF32[$10 + 276 >> 2] = -HEAPF32[$7_1 >> 2];
    HEAPF32[$10 + 272 >> 2] = -HEAPF32[$6_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 16 >> 2]]($9_1, $10 + 272 | 0, $10 + 208 | 0, $11);
    HEAP32[$8_1 >> 2] = $2_1;
    break label$1;
   }
   $31_1 = HEAPF32[$6_1 >> 2];
   label$24 : {
    if (($2_1 | 0) <= 3) {
     $32 = HEAPF32[$6_1 + 8 >> 2];
     $47 = HEAPF32[$6_1 + 4 >> 2];
     $59_1 = $10 + 356 | 0;
     $19_1 = $4_1;
     $36_1 = $10 + 344 | 0;
     break label$24;
    }
    $31_1 = Math_fround(-$31_1);
    $32 = Math_fround(-HEAPF32[$6_1 + 8 >> 2]);
    $47 = Math_fround(-HEAPF32[$6_1 + 4 >> 2]);
    $5_1 = $3_1;
    $59_1 = $10 + 344 | 0;
    $3_1 = $0;
    $0 = $5_1;
    $19_1 = $1_1;
    $1_1 = $4_1;
    $36_1 = $10 + 356 | 0;
   }
   $12_1 = Math_fround(Math_fround(Math_fround($31_1 * HEAPF32[$19_1 >> 2]) + Math_fround($47 * HEAPF32[$19_1 + 16 >> 2])) + Math_fround($32 * HEAPF32[$19_1 + 32 >> 2]));
   HEAPF32[$10 + 328 >> 2] = $12_1;
   $11 = Math_fround(Math_fround(Math_fround($31_1 * HEAPF32[$19_1 + 4 >> 2]) + Math_fround($47 * HEAPF32[$19_1 + 20 >> 2])) + Math_fround($32 * HEAPF32[$19_1 + 36 >> 2]));
   HEAPF32[$10 + 332 >> 2] = $11;
   $13_1 = Math_fround(Math_fround(Math_fround($31_1 * HEAPF32[$19_1 + 8 >> 2]) + Math_fround($47 * HEAPF32[$19_1 + 24 >> 2])) + Math_fround($32 * HEAPF32[$19_1 + 40 >> 2]));
   HEAPF32[$10 + 336 >> 2] = $13_1;
   $14 = Math_fround(Math_abs($13_1));
   $11 = Math_fround(Math_abs($11));
   $13_1 = Math_fround(Math_abs($12_1));
   label$26 : {
    if (!!($11 > $13_1)) {
     $7_1 = $11 > $14;
     $4_1 = $7_1 ? 1 : 2;
     $5_1 = 0;
     break label$26;
    }
    $7_1 = $13_1 > $14;
    $4_1 = ($7_1 ^ 1) << 1;
    $5_1 = $7_1;
   }
   $63_1 = $5_1;
   $4_1 = $4_1 << 2;
   $12_1 = HEAPF32[$4_1 + $36_1 >> 2];
   $11 = Math_fround($12_1 * HEAPF32[$4_1 + $19_1 >> 2]);
   $13_1 = Math_fround(HEAPF32[$3_1 >> 2] - HEAPF32[$0 >> 2]);
   $64_1 = $7_1 ? 2 : 1;
   $5_1 = $10;
   label$28 : {
    if (!(HEAPF32[$4_1 + ($10 + 328 | 0) >> 2] < Math_fround(0.0))) {
     $15_1 = Math_fround($13_1 - $11);
     HEAPF32[$10 + 312 >> 2] = $15_1;
     $11 = Math_fround(Math_fround(HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$0 + 4 >> 2]) - Math_fround($12_1 * HEAPF32[($4_1 | 16) + $19_1 >> 2]));
     HEAPF32[$10 + 316 >> 2] = $11;
     $34 = Math_fround(Math_fround(HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$0 + 8 >> 2]) - Math_fround($12_1 * HEAPF32[($4_1 | 32) + $19_1 >> 2]));
     break label$28;
    }
    $15_1 = Math_fround($13_1 + $11);
    HEAPF32[$10 + 312 >> 2] = $15_1;
    $11 = Math_fround(Math_fround(HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$0 + 4 >> 2]) + Math_fround($12_1 * HEAPF32[($4_1 | 16) + $19_1 >> 2]));
    HEAPF32[$10 + 316 >> 2] = $11;
    $34 = Math_fround(Math_fround(HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$0 + 8 >> 2]) + Math_fround($12_1 * HEAPF32[($4_1 | 32) + $19_1 >> 2]));
   }
   HEAPF32[$5_1 + 320 >> 2] = $34;
   $7_1 = 1;
   $62_1 = (($2_1 | 0) < 4 ? -1 : -4) + $2_1 | 0;
   label$30 : {
    label$31 : {
     if ($62_1 >>> 0 <= 1) {
      $4_1 = 2;
      if ($62_1 - 1) {
       break label$30
      }
      break label$31;
     }
     $4_1 = 1;
    }
    $7_1 = 0;
   }
   $3_1 = 2;
   $5_1 = $4_1 << 2;
   $4_1 = $5_1 + $1_1 | 0;
   $16_1 = HEAPF32[$4_1 >> 2];
   $18_1 = HEAPF32[$4_1 + 16 >> 2];
   $14 = HEAPF32[$4_1 + 32 >> 2];
   $48_1 = Math_fround(Math_fround(Math_fround($15_1 * $16_1) + Math_fround($11 * $18_1)) + Math_fround($34 * $14));
   $4_1 = $63_1 << 2;
   $60_1 = $4_1 + $19_1 | 0;
   $26_1 = HEAPF32[$60_1 >> 2];
   $25 = HEAPF32[$60_1 + 16 >> 2];
   $12_1 = HEAPF32[$60_1 + 32 >> 2];
   $30 = Math_fround(Math_fround(Math_fround($16_1 * $26_1) + Math_fround($18_1 * $25)) + Math_fround($14 * $12_1));
   $13_1 = HEAPF32[$4_1 + $36_1 >> 2];
   $23_1 = Math_fround($30 * $13_1);
   $17_1 = Math_fround($48_1 + $23_1);
   $4_1 = $64_1 << 2;
   $61_1 = $4_1 + $19_1 | 0;
   $20 = HEAPF32[$61_1 >> 2];
   $21 = Math_fround($16_1 * $20);
   $16_1 = HEAPF32[$61_1 + 16 >> 2];
   $21 = Math_fround($21 + Math_fround($18_1 * $16_1));
   $18_1 = HEAPF32[$61_1 + 32 >> 2];
   $28_1 = Math_fround($21 + Math_fround($14 * $18_1));
   $14 = HEAPF32[$4_1 + $36_1 >> 2];
   $27_1 = Math_fround($28_1 * $14);
   HEAPF32[$10 + 300 >> 2] = $17_1 - $27_1;
   $4_1 = $7_1 << 2;
   $1_1 = $4_1 + $1_1 | 0;
   $29_1 = HEAPF32[$1_1 >> 2];
   $22_1 = HEAPF32[$1_1 + 16 >> 2];
   $15_1 = Math_fround(Math_fround($15_1 * $29_1) + Math_fround($11 * $22_1));
   $11 = HEAPF32[$1_1 + 32 >> 2];
   $33_1 = Math_fround($15_1 + Math_fround($34 * $11));
   $25 = Math_fround(Math_fround(Math_fround($29_1 * $26_1) + Math_fround($22_1 * $25)) + Math_fround($11 * $12_1));
   $12_1 = Math_fround($13_1 * $25);
   $13_1 = Math_fround($33_1 + $12_1);
   $18_1 = Math_fround(Math_fround(Math_fround($29_1 * $20) + Math_fround($22_1 * $16_1)) + Math_fround($11 * $18_1));
   $16_1 = Math_fround($14 * $18_1);
   HEAPF32[$10 + 296 >> 2] = $13_1 - $16_1;
   HEAPF32[$10 + 292 >> 2] = $17_1 + $27_1;
   $21 = Math_fround($13_1 + $16_1);
   HEAPF32[$10 + 288 >> 2] = $21;
   $11 = Math_fround($48_1 - $23_1);
   $14 = Math_fround($11 + $27_1);
   HEAPF32[$10 + 284 >> 2] = $14;
   $13_1 = Math_fround($33_1 - $12_1);
   $15_1 = Math_fround($13_1 + $16_1);
   HEAPF32[$10 + 280 >> 2] = $15_1;
   $11 = Math_fround($11 - $27_1);
   HEAPF32[$10 + 276 >> 2] = $11;
   $17_1 = Math_fround($13_1 - $16_1);
   HEAPF32[$10 + 272 >> 2] = $17_1;
   $1_1 = $5_1 + $59_1 | 0;
   $16_1 = HEAPF32[$1_1 >> 2];
   $65_1 = HEAP32[$1_1 >> 2];
   $1_1 = $4_1 + $59_1 | 0;
   $35 = HEAP32[$1_1 >> 2];
   $20 = HEAPF32[$1_1 >> 2];
   $12_1 = Math_fround(-$20);
   label$34 : {
    label$35 : {
     label$36 : {
      $24_1 = Math_fround(-$17_1);
      $4_1 = $20 > $24_1;
      label$37 : {
       if (!$4_1) {
        $5_1 = 0;
        $3_1 = 1;
        $1_1 = $10 + 208 | 0;
        $13_1 = Math_fround(-$15_1);
        $7_1 = $20 > $13_1;
        if ($4_1 ^ $7_1) {
         break label$37
        }
        break label$36;
       }
       HEAPF32[$10 + 212 >> 2] = $11;
       HEAPF32[$10 + 208 >> 2] = $17_1;
       $1_1 = $10 + 208 | 8;
       $5_1 = 1;
       $13_1 = Math_fround(-$15_1);
       $7_1 = $20 > $13_1;
       if (($4_1 | 0) == ($7_1 | 0)) {
        break label$36
       }
      }
      HEAPF32[$1_1 >> 2] = $12_1;
      HEAPF32[$1_1 + 4 >> 2] = $11 + Math_fround(Math_fround($12_1 - $17_1) * Math_fround(Math_fround($14 - $11) / Math_fround($15_1 - $17_1)));
      $1_1 = $1_1 + 8 | 0;
      if ($7_1) {
       break label$35
      }
      $5_1 = $3_1;
      break label$34;
     }
     $3_1 = $5_1;
     if (!$7_1) {
      break label$34
     }
    }
    HEAPF32[$1_1 + 4 >> 2] = $14;
    HEAPF32[$1_1 >> 2] = $15_1;
    $5_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 8 | 0;
    $15_1 = HEAPF32[$10 + 280 >> 2];
    $13_1 = Math_fround(-$15_1);
    $21 = HEAPF32[$10 + 288 >> 2];
   }
   label$33 : {
    if (($13_1 < $20 | 0) != ($20 > Math_fround(-$21) | 0)) {
     $13_1 = HEAPF32[$10 + 292 >> 2];
     $11 = HEAPF32[$10 + 284 >> 2];
     HEAPF32[$1_1 >> 2] = $12_1;
     HEAPF32[$1_1 + 4 >> 2] = $11 + Math_fround(Math_fround($12_1 - $15_1) * Math_fround(Math_fround($13_1 - $11) / Math_fround($21 - $15_1)));
     $5_1 = $5_1 + 1 | 0;
     if ($5_1 & 8) {
      break label$33
     }
     $1_1 = $1_1 + 8 | 0;
    }
    $15_1 = HEAPF32[$10 + 288 >> 2];
    $14 = Math_fround(-$15_1);
    if (!!($20 > $14)) {
     HEAPF32[$1_1 >> 2] = $15_1;
     HEAP32[$1_1 + 4 >> 2] = HEAP32[$10 + 292 >> 2];
     $5_1 = $5_1 + 1 | 0;
     if ($5_1 & 8) {
      break label$33
     }
     $15_1 = HEAPF32[$10 + 288 >> 2];
     $14 = Math_fround(-$15_1);
     $1_1 = $1_1 + 8 | 0;
    }
    $3_1 = $14 < $20;
    $14 = HEAPF32[$10 + 296 >> 2];
    $21 = Math_fround(-$14);
    if (($3_1 | 0) != ($20 > $21 | 0)) {
     $13_1 = HEAPF32[$10 + 300 >> 2];
     $11 = HEAPF32[$10 + 292 >> 2];
     HEAPF32[$1_1 >> 2] = $12_1;
     HEAPF32[$1_1 + 4 >> 2] = $11 + Math_fround(Math_fround($12_1 - $15_1) * Math_fround(Math_fround($13_1 - $11) / Math_fround($14 - $15_1)));
     $5_1 = $5_1 + 1 | 0;
     if ($5_1 & 8) {
      break label$33
     }
     $14 = HEAPF32[$10 + 296 >> 2];
     $21 = Math_fround(-$14);
     $1_1 = $1_1 + 8 | 0;
    }
    if (!!($21 < $20)) {
     HEAPF32[$1_1 >> 2] = $14;
     HEAP32[$1_1 + 4 >> 2] = HEAP32[$10 + 300 >> 2];
     $5_1 = $5_1 + 1 | 0;
     if ($5_1 & 8) {
      break label$33
     }
     $17_1 = HEAPF32[$10 + 272 >> 2];
     $24_1 = Math_fround(-$17_1);
     $14 = HEAPF32[$10 + 296 >> 2];
     $21 = Math_fround(-$14);
     $1_1 = $1_1 + 8 | 0;
    }
    label$43 : {
     label$44 : {
      label$45 : {
       if (($21 < $20 | 0) != ($24_1 < $20 | 0)) {
        $13_1 = HEAPF32[$10 + 276 >> 2];
        $11 = HEAPF32[$10 + 300 >> 2];
        HEAPF32[$1_1 >> 2] = $12_1;
        HEAPF32[$1_1 + 4 >> 2] = $11 + Math_fround(Math_fround($12_1 - $14) * Math_fround(Math_fround($13_1 - $11) / Math_fround($17_1 - $14)));
        $5_1 = $5_1 + 1 | 0;
        if ($5_1 & 8) {
         break label$33
        }
        break label$45;
       }
       if (($5_1 | 0) >= 1) {
        break label$45
       }
       $5_1 = 0;
       break label$44;
      }
      $3_1 = 0;
      $1_1 = $10 + 208 | 0;
      $4_1 = $10 + 112 | 0;
      while (1) {
       $17_1 = HEAPF32[$1_1 >> 2];
       if (!!($17_1 < $20)) {
        HEAPF32[$4_1 >> 2] = $17_1;
        HEAP32[$4_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
        $3_1 = $3_1 + 1 | 0;
        if ($3_1 & 8) {
         $5_1 = $3_1;
         break label$44;
        }
        $17_1 = HEAPF32[$1_1 >> 2];
        $4_1 = $4_1 + 8 | 0;
       }
       $7_1 = $1_1 + 8 | 0;
       $41_1 = ($5_1 | 0) > 1;
       $36_1 = $41_1 ? $7_1 : $10 + 208 | 0;
       $11 = HEAPF32[$36_1 >> 2];
       if (($17_1 < $20 | 0) != ($11 < $20 | 0)) {
        $12_1 = HEAPF32[$1_1 + 4 >> 2];
        $13_1 = HEAPF32[$36_1 + 4 >> 2];
        HEAP32[$4_1 >> 2] = $35;
        HEAPF32[$4_1 + 4 >> 2] = $12_1 + Math_fround(Math_fround($20 - $17_1) * Math_fround(Math_fround($13_1 - $12_1) / Math_fround($11 - $17_1)));
        $3_1 = $3_1 + 1 | 0;
        if ($3_1 & 8) {
         $5_1 = $3_1;
         break label$44;
        }
        $4_1 = $4_1 + 8 | 0;
       }
       $5_1 = $5_1 + -1 | 0;
       $1_1 = $7_1;
       if ($41_1) {
        continue
       }
       break;
      };
      if (($3_1 | 0) < 1) {
       $5_1 = 0;
       break label$44;
      }
      $14 = Math_fround(-$16_1);
      $7_1 = 0;
      $4_1 = $10 + 208 | 0;
      $1_1 = $10 + 112 | 0;
      while (1) {
       $5_1 = $1_1 + 4 | 0;
       $15_1 = HEAPF32[$5_1 >> 2];
       $17_1 = Math_fround(-$15_1);
       if (!!($16_1 > $17_1)) {
        HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
        HEAP32[$4_1 + 4 >> 2] = HEAP32[$5_1 >> 2];
        $7_1 = $7_1 + 1 | 0;
        if ($7_1 & 8) {
         $5_1 = $7_1;
         break label$43;
        }
        $15_1 = HEAPF32[$5_1 >> 2];
        $17_1 = Math_fround(-$15_1);
        $4_1 = $4_1 + 8 | 0;
       }
       $5_1 = $1_1 + 8 | 0;
       $41_1 = ($3_1 | 0) > 1;
       $36_1 = $41_1 ? $5_1 : $10 + 112 | 0;
       $11 = HEAPF32[$36_1 + 4 >> 2];
       if (($17_1 < $16_1 | 0) != ($16_1 > Math_fround(-$11) | 0)) {
        $13_1 = HEAPF32[$36_1 >> 2];
        $12_1 = HEAPF32[$1_1 >> 2];
        HEAPF32[$4_1 + 4 >> 2] = $14;
        HEAPF32[$4_1 >> 2] = $12_1 + Math_fround(Math_fround($14 - $15_1) * Math_fround(Math_fround($13_1 - $12_1) / Math_fround($11 - $15_1)));
        $7_1 = $7_1 + 1 | 0;
        if ($7_1 & 8) {
         $5_1 = $7_1;
         break label$43;
        }
        $4_1 = $4_1 + 8 | 0;
       }
       $3_1 = $3_1 + -1 | 0;
       $1_1 = $5_1;
       if ($41_1) {
        continue
       }
       break;
      };
      $5_1 = 0;
      if (($7_1 | 0) < 1) {
       break label$44
      }
      $1_1 = $10 + 208 | 0;
      $4_1 = $10 + 112 | 0;
      while (1) {
       $3_1 = $1_1 + 4 | 0;
       $17_1 = HEAPF32[$3_1 >> 2];
       if (!!($17_1 < $16_1)) {
        HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
        HEAP32[$4_1 + 4 >> 2] = HEAP32[$3_1 >> 2];
        $5_1 = $5_1 + 1 | 0;
        if ($5_1 & 8) {
         break label$44
        }
        $17_1 = HEAPF32[$3_1 >> 2];
        $4_1 = $4_1 + 8 | 0;
       }
       $3_1 = $1_1 + 8 | 0;
       $41_1 = ($7_1 | 0) > 1;
       $36_1 = $41_1 ? $3_1 : $10 + 208 | 0;
       $11 = HEAPF32[$36_1 + 4 >> 2];
       if (($17_1 < $16_1 | 0) != ($11 < $16_1 | 0)) {
        $13_1 = HEAPF32[$36_1 >> 2];
        $12_1 = HEAPF32[$1_1 >> 2];
        HEAP32[$4_1 + 4 >> 2] = $65_1;
        HEAPF32[$4_1 >> 2] = $12_1 + Math_fround(Math_fround($16_1 - $17_1) * Math_fround(Math_fround($13_1 - $12_1) / Math_fround($11 - $17_1)));
        $5_1 = $5_1 + 1 | 0;
        if ($5_1 & 8) {
         break label$44
        }
        $4_1 = $4_1 + 8 | 0;
       }
       $7_1 = $7_1 + -1 | 0;
       $1_1 = $3_1;
       if ($41_1) {
        continue
       }
       break;
      };
     }
     $7($10 + 208 | 0, $10 + 112 | 0, $5_1 << 3);
    }
    if (($5_1 | 0) >= 1) {
     break label$33
    }
    break label$1;
   }
   $13_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround($25 * $28_1) - Math_fround($30 * $18_1)));
   $45_1 = Math_fround($13_1 * Math_fround(-$30));
   $46_1 = Math_fround($28_1 * $13_1);
   $27_1 = Math_fround($18_1 * $13_1);
   $34 = Math_fround($25 * $13_1);
   $30 = HEAPF32[($62_1 << 2) + $59_1 >> 2];
   $3_1 = $64_1 << 2;
   $28_1 = HEAPF32[($3_1 | 32) + $19_1 >> 2];
   $1_1 = $63_1 << 2;
   $29_1 = HEAPF32[($1_1 | 32) + $19_1 >> 2];
   $22_1 = HEAPF32[($3_1 | 16) + $19_1 >> 2];
   $26_1 = HEAPF32[($1_1 | 16) + $19_1 >> 2];
   $25 = HEAPF32[$61_1 >> 2];
   $23_1 = HEAPF32[$60_1 >> 2];
   $4_1 = 0;
   $1_1 = $10 + 208 | 0;
   $17_1 = HEAPF32[$10 + 320 >> 2];
   $20 = HEAPF32[$10 + 316 >> 2];
   $16_1 = HEAPF32[$10 + 312 >> 2];
   while (1) {
    $3_1 = ($10 + 112 | 0) + Math_imul($4_1, 12) | 0;
    $18_1 = HEAPF32[$1_1 >> 2];
    $11 = Math_fround($18_1 - $33_1);
    $14 = HEAPF32[$1_1 + 4 >> 2];
    $13_1 = Math_fround($14 - $48_1);
    $39_1 = Math_fround(Math_fround($46_1 * $11) - Math_fround($27_1 * $13_1));
    $13_1 = Math_fround(Math_fround($45_1 * $11) + Math_fround($34 * $13_1));
    $12_1 = Math_fround(Math_fround($20 + Math_fround($39_1 * $26_1)) + Math_fround($13_1 * $22_1));
    HEAPF32[$3_1 + 4 >> 2] = $12_1;
    $11 = Math_fround(Math_fround($16_1 + Math_fround($39_1 * $23_1)) + Math_fround($13_1 * $25));
    HEAPF32[$3_1 >> 2] = $11;
    $13_1 = Math_fround(Math_fround($17_1 + Math_fround($39_1 * $29_1)) + Math_fround($13_1 * $28_1));
    HEAPF32[$3_1 + 8 >> 2] = $13_1;
    $13_1 = Math_fround($30 - Math_fround(Math_fround(Math_fround($31_1 * $11) + Math_fround($47 * $12_1)) + Math_fround($32 * $13_1)));
    HEAPF32[($10 + 80 | 0) + ($4_1 << 2) >> 2] = $13_1;
    if (!!($13_1 >= Math_fround(0.0))) {
     $3_1 = $4_1 << 3;
     HEAPF32[$3_1 + ($10 + 208 | 0) >> 2] = $18_1;
     HEAPF32[($10 + 208 | 0) + ($3_1 | 4) >> 2] = $14;
     $4_1 = $4_1 + 1 | 0;
    }
    $1_1 = $1_1 + 8 | 0;
    $5_1 = $5_1 + -1 | 0;
    if ($5_1) {
     continue
    }
    break;
   };
   if (($4_1 | 0) < 1) {
    break label$1
   }
   $1_1 = ($4_1 | 0) < 4 ? $4_1 : 4;
   $5_1 = ($1_1 | 0) > 1 ? $1_1 : 1;
   label$64 : {
    if (($4_1 | 0) <= ($5_1 | 0)) {
     if (($2_1 | 0) >= 4) {
      $3_1 = $10 + 80 | 0;
      $1_1 = $10 + 112 | 0;
      $5_1 = $4_1;
      while (1) {
       $12_1 = HEAPF32[$6_1 >> 2];
       $14 = HEAPF32[$3_1 >> 2];
       HEAPF32[$10 + 32 >> 2] = Math_fround(HEAPF32[$1_1 >> 2] + HEAPF32[$0 >> 2]) - Math_fround($12_1 * $14);
       $11 = HEAPF32[$6_1 + 4 >> 2];
       HEAPF32[$10 + 36 >> 2] = Math_fround(HEAPF32[$1_1 + 4 >> 2] + HEAPF32[$0 + 4 >> 2]) - Math_fround($14 * $11);
       $13_1 = HEAPF32[$6_1 + 8 >> 2];
       HEAPF32[$10 + 40 >> 2] = Math_fround(HEAPF32[$1_1 + 8 >> 2] + HEAPF32[$0 + 8 >> 2]) - Math_fround($14 * $13_1);
       HEAP32[$10 + 76 >> 2] = 0;
       HEAPF32[$10 + 72 >> 2] = -$13_1;
       HEAPF32[$10 + 68 >> 2] = -$11;
       HEAPF32[$10 + 64 >> 2] = -$12_1;
       FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 16 >> 2]]($9_1, $10 - -64 | 0, $10 + 32 | 0, Math_fround(-$14));
       $1_1 = $1_1 + 12 | 0;
       $3_1 = $3_1 + 4 | 0;
       $5_1 = $5_1 + -1 | 0;
       if ($5_1) {
        continue
       }
       break;
      };
      break label$64;
     }
     $3_1 = $10 + 80 | 0;
     $1_1 = $10 + 112 | 0;
     $5_1 = $4_1;
     while (1) {
      HEAPF32[$10 + 32 >> 2] = HEAPF32[$1_1 >> 2] + HEAPF32[$0 >> 2];
      HEAPF32[$10 + 36 >> 2] = HEAPF32[$1_1 + 4 >> 2] + HEAPF32[$0 + 4 >> 2];
      HEAPF32[$10 + 40 >> 2] = HEAPF32[$1_1 + 8 >> 2] + HEAPF32[$0 + 8 >> 2];
      HEAP32[$10 + 76 >> 2] = 0;
      HEAPF32[$10 + 72 >> 2] = -HEAPF32[$6_1 + 8 >> 2];
      HEAPF32[$10 + 68 >> 2] = -HEAPF32[$6_1 + 4 >> 2];
      HEAPF32[$10 + 64 >> 2] = -HEAPF32[$6_1 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 16 >> 2]]($9_1, $10 - -64 | 0, $10 + 32 | 0, Math_fround(-HEAPF32[$3_1 >> 2]));
      $1_1 = $1_1 + 12 | 0;
      $3_1 = $3_1 + 4 | 0;
      $5_1 = $5_1 + -1 | 0;
      if ($5_1) {
       continue
      }
      break;
     };
     break label$64;
    }
    $19_1 = 0;
    if (($4_1 | 0) >= 2) {
     $1_1 = $10 + 80 | 4;
     $14 = HEAPF32[$10 + 80 >> 2];
     $3_1 = 1;
     while (1) {
      $13_1 = HEAPF32[$1_1 >> 2];
      $7_1 = $13_1 > $14;
      $14 = $7_1 ? $13_1 : $14;
      $19_1 = $7_1 ? $3_1 : $19_1;
      $1_1 = $1_1 + 4 | 0;
      $3_1 = $3_1 + 1 | 0;
      if (($4_1 | 0) != ($3_1 | 0)) {
       continue
      }
      break;
     };
    }
    $688($4_1, $10 + 208 | 0, $5_1, $19_1, $10 + 32 | 0);
    if (($2_1 | 0) >= 4) {
     $1_1 = $10 + 32 | 0;
     $3_1 = 0;
     while (1) {
      $4_1 = HEAP32[$1_1 >> 2];
      $7_1 = ($10 + 112 | 0) + Math_imul($4_1, 12) | 0;
      $16_1 = Math_fround(HEAPF32[$7_1 >> 2] + HEAPF32[$0 >> 2]);
      HEAPF32[$10 + 64 >> 2] = $16_1;
      $18_1 = Math_fround(HEAPF32[$7_1 + 4 >> 2] + HEAPF32[$0 + 4 >> 2]);
      HEAPF32[$10 + 68 >> 2] = $18_1;
      $14 = Math_fround(HEAPF32[$7_1 + 8 >> 2] + HEAPF32[$0 + 8 >> 2]);
      HEAPF32[$10 + 72 >> 2] = $14;
      HEAP32[$10 + 28 >> 2] = 0;
      $12_1 = HEAPF32[$6_1 + 8 >> 2];
      HEAPF32[$10 + 24 >> 2] = -$12_1;
      $11 = HEAPF32[$6_1 + 4 >> 2];
      HEAPF32[$10 + 20 >> 2] = -$11;
      $13_1 = HEAPF32[$6_1 >> 2];
      HEAPF32[$10 + 16 >> 2] = -$13_1;
      HEAP32[$10 + 12 >> 2] = 0;
      $15_1 = $12_1;
      $12_1 = HEAPF32[($10 + 80 | 0) + ($4_1 << 2) >> 2];
      HEAPF32[$10 + 8 >> 2] = $14 - Math_fround($15_1 * $12_1);
      HEAPF32[$10 + 4 >> 2] = $18_1 - Math_fround($11 * $12_1);
      HEAPF32[$10 >> 2] = $16_1 - Math_fround($13_1 * $12_1);
      FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 16 >> 2]]($9_1, $10 + 16 | 0, $10, Math_fround(-$12_1));
      $1_1 = $1_1 + 4 | 0;
      $3_1 = $3_1 + 1 | 0;
      if ($3_1 >>> 0 < $5_1 >>> 0) {
       continue
      }
      break;
     };
     break label$64;
    }
    $1_1 = $10 + 32 | 0;
    $3_1 = 0;
    while (1) {
     $4_1 = HEAP32[$1_1 >> 2];
     $7_1 = ($10 + 112 | 0) + Math_imul($4_1, 12) | 0;
     HEAPF32[$10 + 64 >> 2] = HEAPF32[$7_1 >> 2] + HEAPF32[$0 >> 2];
     HEAPF32[$10 + 68 >> 2] = HEAPF32[$7_1 + 4 >> 2] + HEAPF32[$0 + 4 >> 2];
     HEAPF32[$10 + 72 >> 2] = HEAPF32[$7_1 + 8 >> 2] + HEAPF32[$0 + 8 >> 2];
     HEAP32[$10 + 28 >> 2] = 0;
     HEAPF32[$10 + 24 >> 2] = -HEAPF32[$6_1 + 8 >> 2];
     HEAPF32[$10 + 20 >> 2] = -HEAPF32[$6_1 + 4 >> 2];
     HEAPF32[$10 + 16 >> 2] = -HEAPF32[$6_1 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 16 >> 2]]($9_1, $10 + 16 | 0, $10 - -64 | 0, Math_fround(-HEAPF32[($10 + 80 | 0) + ($4_1 << 2) >> 2]));
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     if ($3_1 >>> 0 < $5_1 >>> 0) {
      continue
     }
     break;
    };
   }
   HEAP32[$8_1 >> 2] = $2_1;
  }
  global$0 = $10 + 368 | 0;
 }
 
 function $690($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $3_1 = global$0 - 160 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 112 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 64 >> 2] = HEAP32[$1_1 + 64 >> 2];
  $4_1 = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$3_1 + 116 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 120 >> 2] = $4_1;
  $4_1 = $1_1 + 68 | 0;
  $7_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$3_1 + 68 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 72 >> 2] = $7_1;
  $4_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$3_1 + 128 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$3_1 + 132 >> 2] = $4_1;
  $4_1 = $1_1 + 80 | 0;
  $7_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$3_1 + 80 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 84 >> 2] = $7_1;
  HEAP32[$3_1 + 136 >> 2] = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$3_1 + 88 >> 2] = HEAP32[$1_1 + 88 >> 2];
  HEAP32[$3_1 + 144 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$3_1 + 96 >> 2] = HEAP32[$1_1 + 96 >> 2];
  HEAP32[$3_1 + 100 >> 2] = HEAP32[$1_1 + 100 >> 2];
  $4_1 = $1_1 + 36 | 0;
  $7_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$3_1 + 148 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 152 >> 2] = $7_1;
  HEAP32[$3_1 + 104 >> 2] = HEAP32[$1_1 + 104 >> 2];
  $4_1 = HEAP32[$0 + 4 >> 2];
  $6_1 = HEAPF32[$4_1 + 40 >> 2];
  $5_1 = HEAPF32[$4_1 + 36 >> 2];
  $8_1 = HEAPF32[$4_1 + 32 >> 2];
  $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 48 >> 2]]($4_1));
  $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 48 >> 2]]($4_1));
  $11 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 48 >> 2]]($4_1));
  HEAP32[$3_1 + 36 >> 2] = 0;
  $5_1 = Math_fround($5_1 + $10);
  HEAPF32[$3_1 + 28 >> 2] = $5_1 + $5_1;
  $5_1 = Math_fround($8_1 + $9_1);
  HEAPF32[$3_1 + 24 >> 2] = $5_1 + $5_1;
  $6_1 = Math_fround($6_1 + $11);
  HEAPF32[$3_1 + 32 >> 2] = $6_1 + $6_1;
  $0 = HEAP32[$0 + 8 >> 2];
  $6_1 = HEAPF32[$0 + 40 >> 2];
  $5_1 = HEAPF32[$0 + 36 >> 2];
  $8_1 = HEAPF32[$0 + 32 >> 2];
  $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $11 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  HEAP32[$3_1 + 20 >> 2] = 0;
  $5_1 = Math_fround($5_1 + $10);
  HEAPF32[$3_1 + 12 >> 2] = $5_1 + $5_1;
  $5_1 = Math_fround($8_1 + $9_1);
  HEAPF32[$3_1 + 8 >> 2] = $5_1 + $5_1;
  $6_1 = Math_fround($6_1 + $11);
  HEAPF32[$3_1 + 16 >> 2] = $6_1 + $6_1;
  $689($1_1 + 48 | 0, $3_1 + 112 | 0, $3_1 + 24 | 0, $1_1 + 112 | 0, $3_1 - -64 | 0, $3_1 + 8 | 0, $3_1 + 48 | 0, $3_1 + 44 | 0, $3_1 + 40 | 0, $2_1);
  global$0 = $3_1 + 160 | 0;
 }
 
 function $692($0, $1_1, $2_1, $3_1) {
  $72($0, $1_1);
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 8 | 0] = 0;
  HEAP32[$0 >> 2] = 15532;
  $1_1 = HEAP32[$0 + 4 >> 2];
  if (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($1_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$3_1 + 8 >> 2])) {
   $1_1 = HEAP32[$0 + 4 >> 2];
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$3_1 + 8 >> 2]) | 0;
   HEAP8[$0 + 8 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = $1_1;
  }
 }
 
 function $693($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 15532;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  return $0 | 0;
 }
 
 function $694($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 15532;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  $37($0);
 }
 
 function $695($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0;
  $5_1 = global$0 - 160 | 0;
  global$0 = $5_1;
  $11 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (!$11) {
    break label$1
   }
   HEAP32[$4_1 + 4 >> 2] = $11;
   $11 = HEAP32[$2_1 + 4 >> 2];
   $15_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$5_1 + 152 >> 2] = 1566444395;
   $1_1 = HEAP32[$1_1 + 12 >> 2];
   $6_1 = $1_1 + 8 | 0;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $8_1 = $5_1 + 32 | 0;
   HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $7_1;
   $6_1 = HEAP32[$1_1 >> 2];
   $7_1 = HEAP32[$1_1 + 4 >> 2];
   $8_1 = $1_1 + 24 | 0;
   $12_1 = HEAP32[$8_1 + 4 >> 2];
   $9_1 = $5_1 + 48 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $12_1;
   $8_1 = HEAP32[$1_1 + 16 >> 2];
   $12_1 = HEAP32[$1_1 + 20 >> 2];
   $9_1 = $1_1 + 40 | 0;
   $13_1 = HEAP32[$9_1 + 4 >> 2];
   $10 = $5_1 - -64 | 0;
   HEAP32[$10 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$10 + 4 >> 2] = $13_1;
   $9_1 = HEAP32[$1_1 + 32 >> 2];
   $13_1 = HEAP32[$1_1 + 36 >> 2];
   $10 = $1_1 + 56 | 0;
   $16_1 = HEAP32[$10 + 4 >> 2];
   $14 = $5_1 + 80 | 0;
   HEAP32[$14 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$14 + 4 >> 2] = $16_1;
   HEAP32[$5_1 + 24 >> 2] = $6_1;
   HEAP32[$5_1 + 28 >> 2] = $7_1;
   HEAP32[$5_1 + 40 >> 2] = $8_1;
   HEAP32[$5_1 + 44 >> 2] = $12_1;
   HEAP32[$5_1 + 56 >> 2] = $9_1;
   HEAP32[$5_1 + 60 >> 2] = $13_1;
   $6_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$5_1 + 72 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$5_1 + 76 >> 2] = $6_1;
   $1_1 = HEAP32[$2_1 + 12 >> 2];
   $2_1 = $1_1 + 8 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $7_1 = $5_1 + 96 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $6_1;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$5_1 + 88 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$5_1 + 92 >> 2] = $2_1;
   $2_1 = HEAP32[$1_1 + 20 >> 2];
   $6_1 = $5_1 + 104 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $2_1;
   $2_1 = $1_1 + 24 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $7_1 = $5_1 + 112 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $6_1;
   $2_1 = $1_1 + 40 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $7_1 = $5_1 + 128 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $6_1;
   $2_1 = HEAP32[$1_1 + 36 >> 2];
   $6_1 = $5_1 + 120 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $2_1;
   $2_1 = HEAP32[$1_1 + 52 >> 2];
   $6_1 = $5_1 + 136 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $2_1;
   $1_1 = $1_1 + 56 | 0;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $6_1 = $5_1 + 144 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $2_1;
   $1_1 = $5_1 + 8 | 0;
   HEAP32[$1_1 + 8 >> 2] = $11;
   HEAP32[$1_1 + 4 >> 2] = $15_1;
   HEAP32[$1_1 >> 2] = 15480;
   $690($1_1, $5_1 + 24 | 0, $4_1, HEAP32[$3_1 + 20 >> 2], 0);
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $0 = HEAP32[$4_1 + 4 >> 2];
   if (!HEAP32[$0 + 780 >> 2]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 772 >> 2];
   $2_1 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2];
   if (($1_1 | 0) != ($2_1 | 0)) {
    $219($0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0, $2_1 + 4 | 0);
    break label$1;
   }
   $219($0, $1_1 + 4 | 0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0);
  }
  global$0 = $5_1 + 160 | 0;
 }
 
 function $698($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $69($0, $1_1);
  HEAP32[$0 + 24 >> 2] = $6_1;
  HEAP32[$0 + 20 >> 2] = $5_1;
  HEAP8[$0 + 16 | 0] = $4_1;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 8 | 0] = 0;
  HEAP32[$0 >> 2] = 15604;
  $1_1 = HEAP32[$0 + 4 >> 2];
  $5_1 = $4_1 ? $3_1 : $2_1;
  $2_1 = $4_1 ? $2_1 : $3_1;
  if (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($1_1, HEAP32[$5_1 + 8 >> 2], HEAP32[$2_1 + 8 >> 2])) {
   $1_1 = HEAP32[$0 + 4 >> 2];
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, HEAP32[$5_1 + 8 >> 2], HEAP32[$2_1 + 8 >> 2]) | 0;
   HEAP8[$0 + 8 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = $1_1;
  }
 }
 
 function $699($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 15604;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  return $0 | 0;
 }
 
 function $700($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 15604;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  $37($0);
 }
 
 function $701($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = 0, $37_1 = 0, $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0);
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  $36_1 = HEAPU8[$0 + 16 | 0];
  $37_1 = $36_1 ? $2_1 : $3_1;
  $12_1 = HEAP32[$37_1 + 12 >> 2];
  $44_1 = HEAPF32[$12_1 + 56 >> 2];
  $38 = HEAPF32[$12_1 + 52 >> 2];
  $45_1 = HEAPF32[$12_1 + 48 >> 2];
  $3_1 = $36_1 ? $3_1 : $2_1;
  $2_1 = HEAP32[$3_1 + 12 >> 2];
  $46_1 = HEAPF32[$2_1 + 56 >> 2];
  $47 = HEAPF32[$2_1 + 52 >> 2];
  $48_1 = HEAPF32[$2_1 + 48 >> 2];
  $36_1 = HEAP32[$3_1 + 4 >> 2];
  $15_1 = HEAPF32[$12_1 + 40 >> 2];
  $9_1 = HEAPF32[$12_1 + 8 >> 2];
  $10 = HEAPF32[$12_1 + 24 >> 2];
  $11 = HEAPF32[$12_1 + 36 >> 2];
  $19_1 = HEAPF32[$12_1 + 4 >> 2];
  $22_1 = HEAPF32[$12_1 + 20 >> 2];
  $3_1 = HEAP32[$37_1 + 4 >> 2];
  $20 = HEAPF32[$12_1 + 32 >> 2];
  $27_1 = HEAPF32[$2_1 + 40 >> 2];
  $28_1 = HEAPF32[$2_1 + 32 >> 2];
  $29_1 = HEAPF32[$2_1 + 36 >> 2];
  $23_1 = HEAPF32[$12_1 >> 2];
  $30 = HEAPF32[$2_1 + 8 >> 2];
  $31_1 = HEAPF32[$2_1 >> 2];
  $32 = HEAPF32[$2_1 + 4 >> 2];
  $24_1 = HEAPF32[$12_1 + 16 >> 2];
  $33_1 = HEAPF32[$2_1 + 24 >> 2];
  $34 = HEAPF32[$2_1 + 16 >> 2];
  $35 = HEAPF32[$2_1 + 20 >> 2];
  $8_1 = HEAPF32[$1_1 + 12 >> 2];
  $13_1 = HEAPF32[$1_1 + 8 >> 2];
  $5_1 = HEAPF32[$1_1 >> 2];
  $7_1 = HEAPF32[$1_1 + 4 >> 2];
  HEAP32[$6_1 + 28 >> 2] = 0;
  $16_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($7_1 * $7_1)) + Math_fround($13_1 * $13_1)) + Math_fround($8_1 * $8_1)));
  $14 = Math_fround($13_1 * $16_1);
  $39_1 = Math_fround($5_1 * $14);
  $17_1 = Math_fround($7_1 * $16_1);
  $40_1 = Math_fround($8_1 * $17_1);
  $21 = Math_fround($39_1 + $40_1);
  $26_1 = Math_fround($7_1 * $14);
  $18_1 = Math_fround($5_1 * $16_1);
  $41_1 = Math_fround($8_1 * $18_1);
  $16_1 = Math_fround($26_1 - $41_1);
  $42 = Math_fround($5_1 * $18_1);
  $43_1 = Math_fround($7_1 * $17_1);
  $7_1 = Math_fround(Math_fround(1.0) - Math_fround($42 + $43_1));
  $18_1 = Math_fround(Math_fround(Math_fround($28_1 * $21) + Math_fround($29_1 * $16_1)) + Math_fround($27_1 * $7_1));
  $25 = Math_fround(Math_fround(Math_fround($31_1 * $21) + Math_fround($32 * $16_1)) + Math_fround($30 * $7_1));
  $7_1 = Math_fround(Math_fround(Math_fround($34 * $21) + Math_fround($35 * $16_1)) + Math_fround($33_1 * $7_1));
  $2_1 = $3_1 + 56 | 0;
  $16_1 = Math_fround(-HEAPF32[$2_1 >> 2]);
  $21 = HEAPF32[$3_1 + 52 >> 2];
  $49_1 = Math_fround(Math_fround(Math_fround(Math_fround($11 * $18_1) + Math_fround(Math_fround($19_1 * $25) + Math_fround($22_1 * $7_1))) * $16_1) - Math_fround($21 * Math_fround(Math_fround($20 * $18_1) + Math_fround(Math_fround($23_1 * $25) + Math_fround($24_1 * $7_1)))));
  $18_1 = Math_fround(Math_fround($15_1 * $18_1) + Math_fround(Math_fround($9_1 * $25) + Math_fround($10 * $7_1)));
  $12_1 = $3_1 + 60 | 0;
  $7_1 = HEAPF32[$12_1 >> 2];
  HEAPF32[$6_1 + 24 >> 2] = $49_1 - Math_fround($18_1 * $7_1);
  $18_1 = Math_fround($26_1 + $41_1);
  $17_1 = Math_fround($5_1 * $17_1);
  $25 = Math_fround($8_1 * $14);
  $5_1 = Math_fround($17_1 - $25);
  $26_1 = Math_fround($13_1 * $14);
  $8_1 = Math_fround(Math_fround(1.0) - Math_fround($42 + $26_1));
  $13_1 = Math_fround(Math_fround($27_1 * $18_1) + Math_fround(Math_fround($28_1 * $5_1) + Math_fround($29_1 * $8_1)));
  $14 = Math_fround(Math_fround($30 * $18_1) + Math_fround(Math_fround($31_1 * $5_1) + Math_fround($32 * $8_1)));
  $5_1 = Math_fround(Math_fround($33_1 * $18_1) + Math_fround(Math_fround($34 * $5_1) + Math_fround($35 * $8_1)));
  HEAPF32[$6_1 + 20 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($11 * $13_1) + Math_fround(Math_fround($19_1 * $14) + Math_fround($22_1 * $5_1))) * $16_1) - Math_fround($21 * Math_fround(Math_fround($20 * $13_1) + Math_fround(Math_fround($23_1 * $14) + Math_fround($24_1 * $5_1))))) - Math_fround($7_1 * Math_fround(Math_fround($15_1 * $13_1) + Math_fround(Math_fround($9_1 * $14) + Math_fround($10 * $5_1))));
  $5_1 = Math_fround($39_1 - $40_1);
  $8_1 = Math_fround($17_1 + $25);
  $13_1 = Math_fround(Math_fround(1.0) - Math_fround($43_1 + $26_1));
  $14 = Math_fround(Math_fround($27_1 * $5_1) + Math_fround(Math_fround($29_1 * $8_1) + Math_fround($28_1 * $13_1)));
  $17_1 = Math_fround(Math_fround($30 * $5_1) + Math_fround(Math_fround($32 * $8_1) + Math_fround($31_1 * $13_1)));
  $5_1 = Math_fround(Math_fround($33_1 * $5_1) + Math_fround(Math_fround($35 * $8_1) + Math_fround($34 * $13_1)));
  HEAPF32[$6_1 + 16 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($11 * $14) + Math_fround(Math_fround($19_1 * $17_1) + Math_fround($22_1 * $5_1))) * $16_1) - Math_fround($21 * Math_fround(Math_fround($20 * $14) + Math_fround(Math_fround($23_1 * $17_1) + Math_fround($24_1 * $5_1))))) - Math_fround($7_1 * Math_fround(Math_fround($15_1 * $14) + Math_fround(Math_fround($9_1 * $17_1) + Math_fround($10 * $5_1))));
  FUNCTION_TABLE[HEAP32[HEAP32[$36_1 >> 2] + 64 >> 2]]($6_1 + 32 | 0, $36_1, $6_1 + 16 | 0);
  $1_1 = HEAP32[$37_1 + 12 >> 2];
  $21 = HEAPF32[$1_1 + 48 >> 2];
  $18_1 = HEAPF32[$1_1 + 32 >> 2];
  $25 = HEAPF32[$1_1 + 16 >> 2];
  $39_1 = HEAPF32[$1_1 + 8 >> 2];
  $40_1 = HEAPF32[$1_1 + 4 >> 2];
  $26_1 = HEAPF32[$1_1 >> 2];
  $41_1 = HEAPF32[$1_1 + 56 >> 2];
  $42 = HEAPF32[$1_1 + 52 >> 2];
  $43_1 = HEAPF32[$1_1 + 40 >> 2];
  $49_1 = HEAPF32[$1_1 + 36 >> 2];
  $50_1 = HEAPF32[$1_1 + 24 >> 2];
  $51_1 = HEAPF32[$1_1 + 20 >> 2];
  $52_1 = HEAPF32[$3_1 + 68 >> 2];
  $13_1 = HEAPF32[$12_1 >> 2];
  $14 = HEAPF32[$3_1 + 52 >> 2];
  $16_1 = HEAPF32[$2_1 >> 2];
  $5_1 = HEAPF32[$6_1 + 40 >> 2];
  $8_1 = HEAPF32[$6_1 + 32 >> 2];
  $7_1 = HEAPF32[$6_1 + 36 >> 2];
  $53_1 = HEAPF32[HEAP32[$0 + 12 >> 2] + 784 >> 2];
  HEAP32[$4_1 + 4 >> 2] = HEAP32[$0 + 12 >> 2];
  $17_1 = Math_fround(-$38);
  $38 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($48_1 * $9_1) + Math_fround($47 * $10)) + Math_fround($46_1 * $15_1)) + Math_fround(Math_fround(Math_fround($10 * $17_1) - Math_fround($9_1 * $45_1)) - Math_fround($15_1 * $44_1))) + Math_fround(Math_fround(Math_fround($8_1 * Math_fround(Math_fround(Math_fround($31_1 * $9_1) + Math_fround($34 * $10)) + Math_fround($28_1 * $15_1))) + Math_fround($7_1 * Math_fround(Math_fround(Math_fround($32 * $9_1) + Math_fround($35 * $10)) + Math_fround($29_1 * $15_1)))) + Math_fround($5_1 * Math_fround(Math_fround(Math_fround($30 * $9_1) + Math_fround($33_1 * $10)) + Math_fround($27_1 * $15_1)))));
  $20 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($48_1 * $23_1) + Math_fround($47 * $24_1)) + Math_fround($46_1 * $20)) + Math_fround(Math_fround(Math_fround($24_1 * $17_1) - Math_fround($23_1 * $45_1)) - Math_fround($20 * $44_1))) + Math_fround(Math_fround(Math_fround($8_1 * Math_fround(Math_fround(Math_fround($31_1 * $23_1) + Math_fround($34 * $24_1)) + Math_fround($28_1 * $20))) + Math_fround($7_1 * Math_fround(Math_fround(Math_fround($32 * $23_1) + Math_fround($35 * $24_1)) + Math_fround($29_1 * $20)))) + Math_fround($5_1 * Math_fround(Math_fround(Math_fround($30 * $23_1) + Math_fround($33_1 * $24_1)) + Math_fround($27_1 * $20)))));
  $19_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($48_1 * $19_1) + Math_fround($47 * $22_1)) + Math_fround($46_1 * $11)) + Math_fround(Math_fround(Math_fround($22_1 * $17_1) - Math_fround($19_1 * $45_1)) - Math_fround($11 * $44_1))) + Math_fround(Math_fround(Math_fround($8_1 * Math_fround(Math_fround(Math_fround($31_1 * $19_1) + Math_fround($34 * $22_1)) + Math_fround($28_1 * $11))) + Math_fround($7_1 * Math_fround(Math_fround(Math_fround($32 * $19_1) + Math_fround($35 * $22_1)) + Math_fround($29_1 * $11)))) + Math_fround($5_1 * Math_fround(Math_fround(Math_fround($30 * $19_1) + Math_fround($33_1 * $22_1)) + Math_fround($27_1 * $11)))));
  $15_1 = Math_fround(Math_fround(Math_fround($13_1 * $38) + Math_fround(Math_fround($14 * $20) + Math_fround($16_1 * $19_1))) - $52_1);
  if (!!($15_1 < $53_1)) {
   HEAP32[$6_1 + 28 >> 2] = 0;
   $0 = HEAP32[$37_1 + 12 >> 2];
   $9_1 = HEAPF32[$3_1 + 52 >> 2];
   $10 = HEAPF32[$3_1 + 56 >> 2];
   $11 = HEAPF32[$3_1 + 60 >> 2];
   HEAPF32[$6_1 + 16 >> 2] = Math_fround(Math_fround(HEAPF32[$0 >> 2] * $9_1) + Math_fround(HEAPF32[$0 + 4 >> 2] * $10)) + Math_fround(HEAPF32[$0 + 8 >> 2] * $11);
   HEAPF32[$6_1 + 24 >> 2] = Math_fround(Math_fround($9_1 * HEAPF32[$0 + 32 >> 2]) + Math_fround($10 * HEAPF32[$0 + 36 >> 2])) + Math_fround($11 * HEAPF32[$0 + 40 >> 2]);
   HEAPF32[$6_1 + 20 >> 2] = Math_fround(Math_fround($9_1 * HEAPF32[$0 + 16 >> 2]) + Math_fround($10 * HEAPF32[$0 + 20 >> 2])) + Math_fround($11 * HEAPF32[$0 + 24 >> 2]);
   HEAP32[$6_1 + 12 >> 2] = 0;
   $9_1 = Math_fround($20 - Math_fround($14 * $15_1));
   $10 = Math_fround($19_1 - Math_fround($16_1 * $15_1));
   $11 = Math_fround($38 - Math_fround($13_1 * $15_1));
   HEAPF32[$6_1 + 8 >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $18_1) + Math_fround($10 * $49_1)) + Math_fround($11 * $43_1)) + $41_1;
   HEAPF32[$6_1 + 4 >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $25) + Math_fround($10 * $51_1)) + Math_fround($11 * $50_1)) + $42;
   HEAPF32[$6_1 >> 2] = Math_fround(Math_fround($39_1 * $11) + Math_fround(Math_fround($26_1 * $9_1) + Math_fround($40_1 * $10))) + $21;
   FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $6_1 + 16 | 0, $6_1, $15_1);
  }
  global$0 = $6_1 + 48 | 0;
 }
 
 function $702($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0, $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = 0, $31_1 = Math_fround(0), $32 = 0, $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = 0, $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = Math_fround(0), $55_1 = Math_fround(0), $56_1 = Math_fround(0);
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!HEAP32[$0 + 12 >> 2]) {
    break label$1
   }
   $10 = HEAPU8[$0 + 16 | 0];
   $32 = $10 ? $1_1 : $2_1;
   $6_1 = HEAP32[$32 + 12 >> 2];
   $18_1 = HEAPF32[$6_1 + 56 >> 2];
   $42 = HEAPF32[$6_1 + 52 >> 2];
   $19_1 = HEAPF32[$6_1 + 48 >> 2];
   $10 = $10 ? $2_1 : $1_1;
   $11 = HEAP32[$10 + 12 >> 2];
   $20 = HEAPF32[$11 + 56 >> 2];
   $33_1 = HEAPF32[$11 + 52 >> 2];
   $34 = HEAPF32[$11 + 48 >> 2];
   $30 = HEAP32[$10 + 4 >> 2];
   $22_1 = HEAPF32[$11 + 32 >> 2];
   $23_1 = HEAPF32[$11 >> 2];
   $24_1 = HEAPF32[$11 + 16 >> 2];
   $21 = HEAPF32[$11 + 36 >> 2];
   $25 = HEAPF32[$11 + 20 >> 2];
   $26_1 = HEAPF32[$11 + 4 >> 2];
   $5_1 = HEAPF32[$6_1 + 40 >> 2];
   $7_1 = HEAPF32[$6_1 + 24 >> 2];
   $8_1 = HEAPF32[$6_1 + 8 >> 2];
   $9_1 = HEAPF32[$6_1 + 36 >> 2];
   $14 = HEAPF32[$6_1 + 20 >> 2];
   $16_1 = HEAPF32[$6_1 + 4 >> 2];
   $10 = HEAP32[$32 + 4 >> 2];
   $15_1 = HEAPF32[$6_1 + 32 >> 2];
   $12_1 = HEAPF32[$11 + 40 >> 2];
   $17_1 = HEAPF32[$6_1 + 16 >> 2];
   $27_1 = HEAPF32[$11 + 24 >> 2];
   $13_1 = HEAPF32[$6_1 >> 2];
   $28_1 = HEAPF32[$11 + 8 >> 2];
   HEAP32[$3_1 + 28 >> 2] = 0;
   $36_1 = Math_fround(Math_fround(Math_fround($28_1 * $16_1) + Math_fround($27_1 * $14)) + Math_fround($12_1 * $9_1));
   $11 = $10 + 56 | 0;
   $29_1 = Math_fround(-HEAPF32[$11 >> 2]);
   $37_1 = Math_fround(Math_fround(Math_fround($28_1 * $13_1) + Math_fround($27_1 * $17_1)) + Math_fround($12_1 * $15_1));
   $31_1 = HEAPF32[$10 + 52 >> 2];
   $27_1 = Math_fround(Math_fround(Math_fround($28_1 * $8_1) + Math_fround($27_1 * $7_1)) + Math_fround($12_1 * $5_1));
   $38 = $10 + 60 | 0;
   $12_1 = HEAPF32[$38 >> 2];
   HEAPF32[$3_1 + 24 >> 2] = Math_fround(Math_fround($36_1 * $29_1) - Math_fround($37_1 * $31_1)) - Math_fround($27_1 * $12_1);
   $28_1 = Math_fround(Math_fround(Math_fround($26_1 * $16_1) + Math_fround($25 * $14)) + Math_fround($21 * $9_1));
   $39_1 = Math_fround(Math_fround(Math_fround($26_1 * $13_1) + Math_fround($25 * $17_1)) + Math_fround($21 * $15_1));
   $40_1 = Math_fround(Math_fround(Math_fround($26_1 * $8_1) + Math_fround($25 * $7_1)) + Math_fround($21 * $5_1));
   HEAPF32[$3_1 + 20 >> 2] = Math_fround(Math_fround($28_1 * $29_1) - Math_fround($31_1 * $39_1)) - Math_fround($12_1 * $40_1);
   $41_1 = Math_fround(Math_fround(Math_fround($23_1 * $16_1) + Math_fround($24_1 * $14)) + Math_fround($22_1 * $9_1));
   $21 = Math_fround($41_1 * $29_1);
   $29_1 = Math_fround(Math_fround(Math_fround($23_1 * $13_1) + Math_fround($24_1 * $17_1)) + Math_fround($22_1 * $15_1));
   $35 = $12_1;
   $12_1 = Math_fround(Math_fround(Math_fround($23_1 * $8_1) + Math_fround($24_1 * $7_1)) + Math_fround($22_1 * $5_1));
   HEAPF32[$3_1 + 16 >> 2] = Math_fround($21 - Math_fround($31_1 * $29_1)) - Math_fround($35 * $12_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$30 >> 2] + 64 >> 2]]($3_1 + 32 | 0, $30, $3_1 + 16 | 0);
   $6_1 = HEAP32[$32 + 12 >> 2];
   $31_1 = HEAPF32[$6_1 + 48 >> 2];
   $43_1 = HEAPF32[$6_1 + 32 >> 2];
   $44_1 = HEAPF32[$6_1 + 16 >> 2];
   $45_1 = HEAPF32[$6_1 + 8 >> 2];
   $46_1 = HEAPF32[$6_1 + 4 >> 2];
   $47 = HEAPF32[$6_1 >> 2];
   $48_1 = HEAPF32[$6_1 + 56 >> 2];
   $49_1 = HEAPF32[$6_1 + 52 >> 2];
   $50_1 = HEAPF32[$6_1 + 40 >> 2];
   $51_1 = HEAPF32[$6_1 + 36 >> 2];
   $52_1 = HEAPF32[$6_1 + 24 >> 2];
   $53_1 = HEAPF32[$6_1 + 20 >> 2];
   $54_1 = HEAPF32[$10 + 68 >> 2];
   $21 = HEAPF32[$38 >> 2];
   $25 = HEAPF32[$10 + 52 >> 2];
   $26_1 = HEAPF32[$11 >> 2];
   $22_1 = HEAPF32[$3_1 + 40 >> 2];
   $23_1 = HEAPF32[$3_1 + 32 >> 2];
   $24_1 = HEAPF32[$3_1 + 36 >> 2];
   $55_1 = HEAPF32[HEAP32[$0 + 12 >> 2] + 784 >> 2];
   HEAP32[$4_1 + 4 >> 2] = HEAP32[$0 + 12 >> 2];
   $56_1 = Math_fround(Math_fround(Math_fround($34 * $8_1) + Math_fround($33_1 * $7_1)) + Math_fround($20 * $5_1));
   $35 = $7_1;
   $7_1 = Math_fround(-$42);
   $12_1 = Math_fround(Math_fround($56_1 + Math_fround(Math_fround(Math_fround($35 * $7_1) - Math_fround($19_1 * $8_1)) - Math_fround($18_1 * $5_1))) + Math_fround(Math_fround(Math_fround($12_1 * $23_1) + Math_fround($40_1 * $24_1)) + Math_fround($27_1 * $22_1)));
   $15_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($34 * $13_1) + Math_fround($33_1 * $17_1)) + Math_fround($20 * $15_1)) + Math_fround(Math_fround(Math_fround($17_1 * $7_1) - Math_fround($19_1 * $13_1)) - Math_fround($18_1 * $15_1))) + Math_fround(Math_fround(Math_fround($29_1 * $23_1) + Math_fround($39_1 * $24_1)) + Math_fround($37_1 * $22_1)));
   $14 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($34 * $16_1) + Math_fround($33_1 * $14)) + Math_fround($20 * $9_1)) + Math_fround(Math_fround(Math_fround($14 * $7_1) - Math_fround($19_1 * $16_1)) - Math_fround($18_1 * $9_1))) + Math_fround(Math_fround(Math_fround($41_1 * $23_1) + Math_fround($28_1 * $24_1)) + Math_fround($36_1 * $22_1)));
   $5_1 = Math_fround(Math_fround(Math_fround($21 * $12_1) + Math_fround(Math_fround($25 * $15_1) + Math_fround($26_1 * $14))) - $54_1);
   if (!!($5_1 < $55_1)) {
    HEAP32[$3_1 + 28 >> 2] = 0;
    $6_1 = HEAP32[$32 + 12 >> 2];
    $7_1 = HEAPF32[$10 + 52 >> 2];
    $8_1 = HEAPF32[$10 + 56 >> 2];
    $9_1 = HEAPF32[$10 + 60 >> 2];
    HEAPF32[$3_1 + 16 >> 2] = Math_fround(Math_fround(HEAPF32[$6_1 >> 2] * $7_1) + Math_fround(HEAPF32[$6_1 + 4 >> 2] * $8_1)) + Math_fround(HEAPF32[$6_1 + 8 >> 2] * $9_1);
    HEAPF32[$3_1 + 24 >> 2] = Math_fround(Math_fround($7_1 * HEAPF32[$6_1 + 32 >> 2]) + Math_fround($8_1 * HEAPF32[$6_1 + 36 >> 2])) + Math_fround($9_1 * HEAPF32[$6_1 + 40 >> 2]);
    HEAPF32[$3_1 + 20 >> 2] = Math_fround(Math_fround($7_1 * HEAPF32[$6_1 + 16 >> 2]) + Math_fround($8_1 * HEAPF32[$6_1 + 20 >> 2])) + Math_fround($9_1 * HEAPF32[$6_1 + 24 >> 2]);
    HEAP32[$3_1 + 12 >> 2] = 0;
    $7_1 = Math_fround($15_1 - Math_fround($25 * $5_1));
    $8_1 = Math_fround($14 - Math_fround($26_1 * $5_1));
    $9_1 = Math_fround($12_1 - Math_fround($21 * $5_1));
    HEAPF32[$3_1 + 8 >> 2] = Math_fround(Math_fround(Math_fround($7_1 * $43_1) + Math_fround($8_1 * $51_1)) + Math_fround($9_1 * $50_1)) + $48_1;
    HEAPF32[$3_1 + 4 >> 2] = Math_fround(Math_fround(Math_fround($7_1 * $44_1) + Math_fround($8_1 * $53_1)) + Math_fround($9_1 * $52_1)) + $49_1;
    HEAPF32[$3_1 >> 2] = Math_fround(Math_fround($45_1 * $9_1) + Math_fround(Math_fround($47 * $7_1) + Math_fround($46_1 * $8_1))) + $31_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $3_1 + 16 | 0, $3_1, $5_1);
   }
   label$3 : {
    if (HEAP32[$30 + 4 >> 2] > 6 | HEAP32[HEAP32[$4_1 + 4 >> 2] + 780 >> 2] >= HEAP32[$0 + 24 >> 2]) {
     break label$3
    }
    $7_1 = HEAPF32[$10 + 60 >> 2];
    label$4 : {
     if (!!(Math_fround(Math_abs($7_1)) > Math_fround(.7071067690849304))) {
      $5_1 = HEAPF32[$10 + 56 >> 2];
      $8_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($5_1 * $5_1)))));
      $5_1 = Math_fround($5_1 * $8_1);
      $7_1 = Math_fround($8_1 * Math_fround(-$7_1));
      $8_1 = Math_fround(0.0);
      break label$4;
     }
     $5_1 = HEAPF32[$10 + 52 >> 2];
     $8_1 = HEAPF32[$10 + 56 >> 2];
     $9_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($8_1 * $8_1)))));
     $7_1 = Math_fround($5_1 * $9_1);
     $5_1 = Math_fround(0.0);
     $8_1 = Math_fround($9_1 * Math_fround(-$8_1));
    }
    $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$30 >> 2] + 16 >> 2]]($30));
    $6_1 = 0;
    $9_1 = Math_fround(Math_fround(Math_min(Math_fround(HEAPF32[5848] / $9_1), Math_fround(.39269909262657166))) * Math_fround(.5));
    $16_1 = $493($9_1);
    $11 = HEAP32[$0 + 20 >> 2];
    $14 = $494($9_1);
    if (($11 | 0) < 1) {
     break label$3
    }
    $12_1 = $5_1;
    $5_1 = Math_fround($16_1 / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($7_1 * $7_1)) + Math_fround($5_1 * $5_1)))));
    $16_1 = Math_fround($12_1 * $5_1);
    $15_1 = Math_fround($7_1 * $5_1);
    $17_1 = Math_fround($8_1 * $5_1);
    while (1) {
     $7_1 = HEAPF32[$10 + 56 >> 2];
     $9_1 = HEAPF32[$10 + 52 >> 2];
     $5_1 = HEAPF32[$10 + 60 >> 2];
     $8_1 = Math_fround(Math_fround(Math_fround(Math_fround(6.2831854820251465) / Math_fround($11 | 0)) * Math_fround($6_1 | 0)) * Math_fround(.5));
     $13_1 = Math_fround($493($8_1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($7_1 * $7_1)) + Math_fround($5_1 * $5_1)))));
     $5_1 = Math_fround($5_1 * $13_1);
     $7_1 = Math_fround($7_1 * $13_1);
     $8_1 = $494($8_1);
     $9_1 = Math_fround($9_1 * $13_1);
     $13_1 = Math_fround(Math_fround($16_1 * $5_1) + Math_fround(Math_fround($15_1 * $7_1) + Math_fround(Math_fround($14 * $8_1) + Math_fround($17_1 * $9_1))));
     $18_1 = Math_fround(Math_fround($15_1 * $5_1) + Math_fround(Math_fround(Math_fround($17_1 * $8_1) - Math_fround($14 * $9_1)) - Math_fround($16_1 * $7_1)));
     $19_1 = Math_fround(Math_fround($16_1 * $9_1) + Math_fround(Math_fround(Math_fround($15_1 * $8_1) - Math_fround($14 * $7_1)) - Math_fround($17_1 * $5_1)));
     $20 = Math_fround(Math_fround($17_1 * $7_1) + Math_fround(Math_fround(Math_fround($16_1 * $8_1) - Math_fround($14 * $5_1)) - Math_fround($15_1 * $9_1)));
     HEAPF32[$3_1 + 28 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $13_1) - Math_fround($9_1 * $18_1)) - Math_fround($7_1 * $19_1)) - Math_fround($5_1 * $20);
     HEAPF32[$3_1 + 24 >> 2] = Math_fround(Math_fround($7_1 * $18_1) + Math_fround(Math_fround($5_1 * $13_1) + Math_fround($8_1 * $20))) - Math_fround($9_1 * $19_1);
     HEAPF32[$3_1 + 20 >> 2] = Math_fround(Math_fround($9_1 * $20) + Math_fround(Math_fround($8_1 * $19_1) + Math_fround($7_1 * $13_1))) - Math_fround($5_1 * $18_1);
     HEAPF32[$3_1 + 16 >> 2] = Math_fround(Math_fround($5_1 * $19_1) + Math_fround(Math_fround($9_1 * $13_1) + Math_fround($8_1 * $18_1))) - Math_fround($7_1 * $20);
     $701($0, $3_1 + 16 | 0, $1_1, $2_1, $4_1);
     $6_1 = $6_1 + 1 | 0;
     $11 = HEAP32[$0 + 20 >> 2];
     if (($6_1 | 0) < ($11 | 0)) {
      continue
     }
     break;
    };
   }
   if (!HEAPU8[$0 + 8 | 0] | !HEAP32[HEAP32[$0 + 12 >> 2] + 780 >> 2]) {
    break label$1
   }
   $0 = HEAP32[$4_1 + 4 >> 2];
   if (!HEAP32[$0 + 780 >> 2]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 772 >> 2];
   $2_1 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2];
   if (($1_1 | 0) != ($2_1 | 0)) {
    $219($0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0, $2_1 + 4 | 0);
    break label$1;
   }
   $219($0, $1_1 + 4 | 0, HEAP32[HEAP32[$4_1 + 12 >> 2] + 8 >> 2] + 4 | 0);
  }
  global$0 = $3_1 + 48 | 0;
 }
 
 function $705($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  HEAP32[$0 >> 2] = 15680;
  $3_1 = HEAP32[$1_1 + 20 >> 2];
  $2_1 = $79(4);
  HEAP32[$0 + 24 >> 2] = $2_1;
  HEAP32[$2_1 >> 2] = $3_1 ? 12816 : 13024;
  $2_1 = $79(20);
  $586($2_1, HEAP32[$0 + 24 >> 2]);
  HEAP32[$0 + 28 >> 2] = $2_1;
  $2_1 = $79(8);
  HEAP32[$2_1 >> 2] = 15796;
  HEAP8[$2_1 + 4 | 0] = 0;
  HEAP32[$0 + 32 >> 2] = $2_1;
  $2_1 = $79(8);
  HEAP32[$2_1 >> 2] = 15880;
  HEAP8[$2_1 + 4 | 0] = 0;
  HEAP32[$0 + 36 >> 2] = $2_1;
  $2_1 = $79(8);
  HEAP32[$2_1 >> 2] = 15972;
  HEAP8[$2_1 + 4 | 0] = 0;
  HEAP32[$0 + 40 >> 2] = $2_1;
  $2_1 = $79(8);
  HEAP32[$2_1 >> 2] = 16052;
  HEAP8[$2_1 + 4 | 0] = 0;
  HEAP32[$0 + 44 >> 2] = $2_1;
  $2_1 = $79(8);
  HEAP32[$2_1 >> 2] = 16140;
  HEAP8[$2_1 + 4 | 0] = 0;
  HEAP32[$0 + 48 >> 2] = $2_1;
  $2_1 = $79(8);
  HEAP32[$2_1 >> 2] = 16224;
  HEAP8[$2_1 + 4 | 0] = 0;
  HEAP32[$0 + 52 >> 2] = $2_1;
  $2_1 = $79(8);
  HEAP32[$2_1 >> 2] = 16292;
  HEAP8[$2_1 + 4 | 0] = 0;
  HEAP32[$0 + 56 >> 2] = $2_1;
  $2_1 = $79(8);
  HEAP32[$2_1 >> 2] = 16376;
  HEAP8[$2_1 + 4 | 0] = 0;
  HEAP32[$0 + 72 >> 2] = $2_1;
  $2_1 = $79(8);
  HEAP32[$0 + 76 >> 2] = $2_1;
  HEAP32[$2_1 >> 2] = 16376;
  HEAP8[$2_1 + 4 | 0] = 1;
  $2_1 = $79(8);
  HEAP32[$2_1 >> 2] = 16460;
  HEAP8[$2_1 + 4 | 0] = 0;
  HEAP32[$0 + 68 >> 2] = $2_1;
  $2_1 = $79(16);
  HEAP32[$2_1 + 8 >> 2] = 1;
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAP32[$2_1 >> 2] = 16536;
  HEAP8[$2_1 + 4 | 0] = 0;
  HEAP32[$0 + 84 >> 2] = $2_1;
  $2_1 = $79(16);
  HEAP32[$2_1 + 8 >> 2] = 1;
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAP32[$2_1 >> 2] = 16536;
  HEAP32[$0 + 80 >> 2] = $2_1;
  HEAP8[$2_1 + 4 | 0] = 1;
  $7_1 = HEAP32[$1_1 + 16 >> 2];
  $2_1 = HEAP32[$1_1 >> 2];
  label$1 : {
   if ($2_1) {
    HEAP32[$0 + 8 >> 2] = $2_1;
    HEAP8[$0 + 12 | 0] = 0;
    break label$1;
   }
   HEAP8[$0 + 12 | 0] = 1;
   $5_1 = $79(24);
   HEAP32[$5_1 + 20 >> 2] = 0;
   HEAP32[$5_1 >> 2] = 804;
   $2_1 = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   $3_1 = $79(Math_imul($2_1, 804));
   HEAP32[$5_1 + 12 >> 2] = $3_1;
   HEAP32[$5_1 + 16 >> 2] = $3_1;
   $2_1 = HEAP32[$5_1 + 4 >> 2];
   HEAP32[$5_1 + 8 >> 2] = $2_1;
   $6_1 = $2_1 + -1 | 0;
   label$3 : {
    if (!$6_1) {
     $2_1 = $3_1;
     break label$3;
    }
    $4_1 = HEAP32[$5_1 >> 2];
    while (1) {
     $2_1 = $3_1 + $4_1 | 0;
     HEAP32[$3_1 >> 2] = $2_1;
     $3_1 = $2_1;
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue
     }
     break;
    };
   }
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = $5_1;
  }
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  if ($2_1) {
   HEAP32[$0 + 16 >> 2] = $2_1;
   HEAP8[$0 + 20 | 0] = 0;
   return;
  }
  HEAP8[$0 + 20 | 0] = 1;
  $4_1 = $79(24);
  HEAP32[$4_1 + 20 >> 2] = 0;
  $2_1 = ($7_1 | 0) > 80 ? $7_1 : 80;
  $2_1 = ($2_1 | 0) > 116 ? $2_1 + 16 & -16 : 128;
  HEAP32[$4_1 >> 2] = $2_1;
  $1_1 = HEAP32[$1_1 + 12 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $3_1 = $79(Math_imul($1_1, $2_1));
  HEAP32[$4_1 + 12 >> 2] = $3_1;
  HEAP32[$4_1 + 16 >> 2] = $3_1;
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  $6_1 = $1_1 + -1 | 0;
  label$7 : {
   if (!$6_1) {
    $2_1 = $3_1;
    break label$7;
   }
   $1_1 = HEAP32[$4_1 >> 2];
   while (1) {
    $2_1 = $1_1 + $3_1 | 0;
    HEAP32[$3_1 >> 2] = $2_1;
    $3_1 = $2_1;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = $4_1;
 }
 
 function $706($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 15680;
  if (HEAPU8[$0 + 20 | 0]) {
   $80(HEAP32[HEAP32[$0 + 16 >> 2] + 16 >> 2]);
   $80(HEAP32[$0 + 16 >> 2]);
  }
  if (HEAPU8[$0 + 12 | 0]) {
   $80(HEAP32[HEAP32[$0 + 8 >> 2] + 16 >> 2]);
   $80(HEAP32[$0 + 8 >> 2]);
  }
  $1_1 = HEAP32[$0 + 28 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 28 >> 2]);
  $1_1 = HEAP32[$0 + 32 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 32 >> 2]);
  $1_1 = HEAP32[$0 + 36 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 36 >> 2]);
  $1_1 = HEAP32[$0 + 40 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 40 >> 2]);
  $1_1 = HEAP32[$0 + 44 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 44 >> 2]);
  $1_1 = HEAP32[$0 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 48 >> 2]);
  $1_1 = HEAP32[$0 + 52 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 52 >> 2]);
  $1_1 = HEAP32[$0 + 56 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 56 >> 2]);
  $1_1 = HEAP32[$0 + 72 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 72 >> 2]);
  $1_1 = HEAP32[$0 + 76 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 76 >> 2]);
  $1_1 = HEAP32[$0 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 68 >> 2]);
  $1_1 = HEAP32[$0 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 84 >> 2]);
  $1_1 = HEAP32[$0 + 80 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 80 >> 2]);
  $1_1 = HEAP32[$0 + 24 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 24 >> 2]);
  return $0 | 0;
 }
 
 function $707($0) {
  $0 = $0 | 0;
  $37($706($0));
 }
 
 function $708($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = ($1_1 | 0) != 8;
  if (!($3_1 | ($2_1 | 0) != 8)) {
   return HEAP32[$0 + 56 >> 2]
  }
  if (!(($2_1 | 0) != 1 | $3_1)) {
   return HEAP32[$0 + 72 >> 2]
  }
  if (!(($1_1 | 0) != 1 | ($2_1 | 0) != 8)) {
   return HEAP32[$0 + 76 >> 2]
  }
  if (!(($2_1 | 0) != 28 | ($1_1 | 0) > 19)) {
   return HEAP32[$0 + 84 >> 2]
  }
  if (!(($1_1 | 0) != 28 | ($2_1 | 0) > 19)) {
   return HEAP32[$0 + 80 >> 2]
  }
  label$6 : {
   if (($1_1 | 0) <= 19) {
    if (($2_1 | 0) <= 19) {
     return HEAP32[$0 + 28 >> 2]
    }
    if ($2_1 + -21 >>> 0 > 8) {
     break label$6
    }
    return HEAP32[$0 + 32 >> 2];
   }
   if (!(($2_1 | 0) > 19 | $1_1 + -21 >>> 0 > 8)) {
    return HEAP32[$0 + 36 >> 2]
   }
   if (($1_1 | 0) != 31) {
    break label$6
   }
   if (($2_1 | 0) == 31) {
    return HEAP32[$0 + 44 >> 2]
   }
   return HEAP32[$0 + 40 >> 2];
  }
  if (($2_1 | 0) == 31) {
   return HEAP32[$0 + 48 >> 2]
  }
  return HEAP32[$0 + 52 >> 2];
 }
 
 function $709($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = ($1_1 | 0) != 8;
  if (!($3_1 | ($2_1 | 0) != 8)) {
   return HEAP32[$0 + 56 >> 2]
  }
  if (!(($2_1 | 0) != 1 | $3_1)) {
   return HEAP32[$0 + 72 >> 2]
  }
  if (!(($1_1 | 0) != 1 | ($2_1 | 0) != 8)) {
   return HEAP32[$0 + 76 >> 2]
  }
  if (!($1_1 | $2_1)) {
   return HEAP32[$0 + 68 >> 2]
  }
  if (!(($2_1 | 0) != 28 | ($1_1 | 0) > 19)) {
   return HEAP32[$0 + 84 >> 2]
  }
  if (!(($1_1 | 0) != 28 | ($2_1 | 0) > 19)) {
   return HEAP32[$0 + 80 >> 2]
  }
  label$7 : {
   if (($1_1 | 0) <= 19) {
    if (($2_1 | 0) <= 19) {
     return HEAP32[$0 + 28 >> 2]
    }
    if ($2_1 + -21 >>> 0 > 8) {
     break label$7
    }
    return HEAP32[$0 + 32 >> 2];
   }
   if (!(($2_1 | 0) > 19 | $1_1 + -21 >>> 0 > 8)) {
    return HEAP32[$0 + 36 >> 2]
   }
   if (($1_1 | 0) != 31) {
    break label$7
   }
   if (($2_1 | 0) == 31) {
    return HEAP32[$0 + 44 >> 2]
   }
   return HEAP32[$0 + 40 >> 2];
  }
  if (($2_1 | 0) == 31) {
   return HEAP32[$0 + 48 >> 2]
  }
  return HEAP32[$0 + 52 >> 2];
 }
 
 function $710($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function $711($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 16 >> 2];
 }
 
 function $713($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0 = HEAP32[$1_1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 80) | 0;
  $618($0, $1_1, $2_1, $3_1, 0);
  return $0 | 0;
 }
 
 function $715($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0 = HEAP32[$1_1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 80) | 0;
  $618($0, $1_1, $2_1, $3_1, 1);
  return $0 | 0;
 }
 
 function $717($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0 = HEAP32[$1_1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 84) | 0;
  $632($0, $1_1, $2_1, $3_1, 0);
  return $0 | 0;
 }
 
 function $719($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0 = HEAP32[$1_1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 116) | 0;
  $654($0, $1_1, $2_1, $3_1);
  return $0 | 0;
 }
 
 function $721($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0 = HEAP32[$1_1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 84) | 0;
  $632($0, $1_1, $2_1, $3_1, 1);
  return $0 | 0;
 }
 
 function $723($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0 = HEAP32[$1_1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 8) | 0;
  $69($0, $1_1);
  HEAP32[$0 >> 2] = 15128;
  return $0 | 0;
 }
 
 function $725($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0 = HEAP32[$1_1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 16) | 0;
  $668($0, $1_1, $2_1, $3_1);
  return $0 | 0;
 }
 
 function $727($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 56 >> 2]]($4_1, 20) | 0;
  $679($4_1, HEAP32[$1_1 + 4 >> 2], $1_1, $2_1, $3_1, HEAPU8[$0 + 4 | 0]);
  return $4_1 | 0;
 }
 
 function $729($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0 = HEAP32[$1_1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 16) | 0;
  $692($0, $1_1, $2_1, $3_1);
  return $0 | 0;
 }
 
 function $731($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 56 >> 2]]($4_1, 28) | 0;
  $698($4_1, $1_1, $2_1, $3_1, HEAPU8[$0 + 4 | 0], HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2]);
  return $4_1 | 0;
 }
 
 function $732($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  HEAP32[$0 >> 2] = 16616;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $2_1 = $0 + 8 | 0;
  $1_1 = $2_1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $1_1 = $0 + 32 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 60 >> 2] = 0;
  $1_1 = $0 + 52 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $79(32);
  $3_1 = HEAP32[$2_1 >> 2];
  if (($3_1 | 0) >= 1) {
   $2_1 = 12;
   while (1) {
    $4_1 = $2_1 + $1_1 | 0;
    $5_1 = HEAP32[$0 + 16 >> 2] + $2_1 | 0;
    HEAP32[$4_1 + -12 >> 2] = HEAP32[$5_1 + -12 >> 2];
    $6_1 = $5_1 + -8 | 0;
    $8_1 = HEAP32[$6_1 + 4 >> 2];
    $7_1 = $4_1 + -8 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $8_1;
    HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
    $2_1 = $2_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   };
  }
  $2_1 = HEAP32[$0 + 16 >> 2];
  if ($2_1) {
   if (HEAPU8[$0 + 20 | 0]) {
    $80($2_1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = $1_1;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = 2;
  $733($0);
 }
 
 function $733($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = HEAP32[$0 + 32 >> 2];
  $3_1 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (($7_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAP32[$0 + 36 >> 2] >= ($3_1 | 0)) {
     $4_1 = HEAP32[$0 + 40 >> 2];
     break label$2;
    }
    label$4 : {
     if (!$3_1) {
      $2_1 = $7_1;
      break label$4;
     }
     $4_1 = $79($3_1 << 2);
     $2_1 = HEAP32[$0 + 32 >> 2];
    }
    $1_1 = HEAP32[$0 + 40 >> 2];
    label$6 : {
     if (($2_1 | 0) >= 1) {
      $5_1 = $4_1;
      $6_1 = $1_1;
      while (1) {
       HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
       $5_1 = $5_1 + 4 | 0;
       $6_1 = $6_1 + 4 | 0;
       $2_1 = $2_1 + -1 | 0;
       if ($2_1) {
        continue
       }
       break;
      };
      break label$6;
     }
     if ($1_1) {
      break label$6
     }
     HEAP32[$0 + 40 >> 2] = $4_1;
     HEAP32[$0 + 36 >> 2] = $3_1;
     HEAP8[$0 + 44 | 0] = 1;
     break label$2;
    }
    if (HEAPU8[$0 + 44 | 0]) {
     $80($1_1)
    }
    HEAP32[$0 + 40 >> 2] = $4_1;
    HEAP8[$0 + 44 | 0] = 1;
    HEAP32[$0 + 36 >> 2] = $3_1;
   }
   $2_1 = $7_1 << 2;
   $8_1 = $3_1 << 2;
   $17($2_1 + $4_1 | 0, 0, $8_1 - $2_1 | 0);
   HEAP32[$0 + 32 >> 2] = $3_1;
   $9_1 = HEAP32[$0 + 52 >> 2];
   if (($9_1 | 0) < ($3_1 | 0)) {
    label$11 : {
     if (HEAP32[$0 + 56 >> 2] >= ($3_1 | 0)) {
      $4_1 = HEAP32[$0 + 60 >> 2];
      break label$11;
     }
     label$13 : {
      if (!$3_1) {
       $4_1 = 0;
       $2_1 = $9_1;
       break label$13;
      }
      $4_1 = $79($8_1);
      $2_1 = HEAP32[$0 + 52 >> 2];
     }
     $1_1 = HEAP32[$0 + 60 >> 2];
     label$15 : {
      if (($2_1 | 0) >= 1) {
       $5_1 = $4_1;
       $6_1 = $1_1;
       while (1) {
        HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
        $5_1 = $5_1 + 4 | 0;
        $6_1 = $6_1 + 4 | 0;
        $2_1 = $2_1 + -1 | 0;
        if ($2_1) {
         continue
        }
        break;
       };
       break label$15;
      }
      if ($1_1) {
       break label$15
      }
      HEAP32[$0 + 60 >> 2] = $4_1;
      HEAP32[$0 + 56 >> 2] = $3_1;
      HEAP8[$0 - -64 | 0] = 1;
      break label$11;
     }
     if (HEAPU8[$0 - -64 | 0]) {
      $80($1_1)
     }
     HEAP32[$0 + 60 >> 2] = $4_1;
     HEAP8[$0 + 64 | 0] = 1;
     HEAP32[$0 + 56 >> 2] = $3_1;
    }
    $2_1 = $9_1 << 2;
    $17($2_1 + $4_1 | 0, 0, $8_1 - $2_1 | 0);
   }
   HEAP32[$0 + 52 >> 2] = $3_1;
   if (($3_1 | 0) >= 1) {
    $17(HEAP32[$0 + 40 >> 2], 255, $8_1);
    $17(HEAP32[$0 + 60 >> 2], 255, $8_1);
   }
   if (($7_1 | 0) < 1) {
    break label$1
   }
   $6_1 = HEAP32[$0 + 60 >> 2];
   $5_1 = HEAP32[$0 + 16 >> 2];
   $4_1 = HEAP32[$0 + 40 >> 2];
   $2_1 = 0;
   while (1) {
    $1_1 = HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2] | HEAP32[HEAP32[$5_1 + 4 >> 2] + 12 >> 2] << 16;
    $1_1 = ($1_1 << 15 ^ -1) + $1_1 | 0;
    $1_1 = Math_imul($1_1 >>> 10 ^ $1_1, 9);
    $1_1 = $1_1 >>> 6 ^ $1_1;
    $1_1 = ($1_1 << 11 ^ -1) + $1_1 | 0;
    $1_1 = $4_1 + ((HEAP32[$0 + 12 >> 2] + -1 & ($1_1 >>> 16 ^ $1_1)) << 2) | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$1_1 >> 2] = $2_1;
    $5_1 = $5_1 + 16 | 0;
    $6_1 = $6_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $734($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 16616;
  $1_1 = HEAP32[$0 + 60 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 - -64 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 60 >> 2] = 0;
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $1_1 = HEAP32[$0 + 40 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 44 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 40 >> 2] = 0;
  }
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $1_1 = HEAP32[$0 + 16 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 20 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  return $0 | 0;
 }
 
 function $735($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 16616;
  $1_1 = HEAP32[$0 + 60 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 - -64 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 60 >> 2] = 0;
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $1_1 = HEAP32[$0 + 40 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 44 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 40 >> 2] = 0;
  }
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $1_1 = HEAP32[$0 + 16 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 20 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  $80($0);
 }
 
 function $736($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $0 = HEAP32[$1_1 + 8 >> 2];
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 60 >> 2]]($2_1, HEAP32[$1_1 + 8 >> 2]);
   HEAP32[$1_1 + 8 >> 2] = 0;
  }
 }
 
 function $737($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $2_1;
  HEAP32[$3_1 + 8 >> 2] = $0;
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  HEAP32[$3_1 >> 2] = 16832;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $3_1, $2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $738($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  HEAP32[$3_1 + 8 >> 2] = 16976;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $3_1 + 8 | 0, $2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $739($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  HEAP32[6297] = HEAP32[6297] + 1;
  $3_1 = HEAP32[$1_1 + 12 >> 2] > HEAP32[$2_1 + 12 >> 2];
  $4_1 = HEAP32[($3_1 ? $1_1 : $2_1) + 12 >> 2];
  $5_1 = HEAP32[($3_1 ? $2_1 : $1_1) + 12 >> 2];
  $1_1 = $5_1 | $4_1 << 16;
  $1_1 = ($1_1 << 15 ^ -1) + $1_1 | 0;
  $1_1 = Math_imul($1_1 >>> 10 ^ $1_1, 9);
  $1_1 = $1_1 >>> 6 ^ $1_1;
  $1_1 = ($1_1 << 11 ^ -1) + $1_1 | 0;
  $1_1 = HEAP32[$0 + 12 >> 2] + -1 & ($1_1 >>> 16 ^ $1_1);
  label$1 : {
   label$2 : {
    if (($1_1 | 0) >= HEAP32[$0 + 32 >> 2]) {
     break label$2
    }
    $1_1 = HEAP32[HEAP32[$0 + 40 >> 2] + ($1_1 << 2) >> 2];
    if (($1_1 | 0) == -1) {
     break label$2
    }
    $2_1 = HEAP32[$0 + 16 >> 2];
    while (1) {
     $6_1 = $1_1 << 4;
     $3_1 = $6_1 + $2_1 | 0;
     if (HEAP32[HEAP32[($2_1 + $6_1 | 0) + 4 >> 2] + 12 >> 2] == ($4_1 | 0) ? ($5_1 | 0) == HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2] : 0) {
      break label$1
     }
     $1_1 = HEAP32[HEAP32[$0 + 60 >> 2] + ($1_1 << 2) >> 2];
     if (($1_1 | 0) != -1) {
      continue
     }
     break;
    };
   }
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $740($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0;
  $4_1 = HEAP32[$1_1 + 12 >> 2] > HEAP32[$2_1 + 12 >> 2];
  $8_1 = $4_1 ? $1_1 : $2_1;
  $6_1 = HEAP32[$8_1 + 12 >> 2];
  $9_1 = $4_1 ? $2_1 : $1_1;
  $5_1 = HEAP32[$9_1 + 12 >> 2];
  $1_1 = $6_1 << 16 | $5_1;
  $1_1 = ($1_1 << 15 ^ -1) + $1_1 | 0;
  $1_1 = Math_imul($1_1 >>> 10 ^ $1_1, 9);
  $1_1 = $1_1 >>> 6 ^ $1_1;
  $1_1 = ($1_1 << 11 ^ -1) + $1_1 | 0;
  $12_1 = $1_1 >>> 16 ^ $1_1;
  $4_1 = HEAP32[$0 + 12 >> 2];
  $10 = $12_1 & $4_1 + -1;
  $1_1 = HEAP32[HEAP32[$0 + 40 >> 2] + ($10 << 2) >> 2];
  label$1 : {
   if (($1_1 | 0) != -1) {
    $3_1 = HEAP32[$0 + 16 >> 2];
    while (1) {
     $7_1 = $1_1 << 4;
     $2_1 = $7_1 + $3_1 | 0;
     if (($6_1 | 0) == HEAP32[HEAP32[($3_1 + $7_1 | 0) + 4 >> 2] + 12 >> 2] ? HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2] == ($5_1 | 0) : 0) {
      break label$1
     }
     $1_1 = HEAP32[HEAP32[$0 + 60 >> 2] + ($1_1 << 2) >> 2];
     if (($1_1 | 0) != -1) {
      continue
     }
     break;
    };
   }
   $1_1 = $4_1;
   $6_1 = HEAP32[$0 + 8 >> 2];
   $2_1 = $6_1;
   label$5 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$5
    }
    $2_1 = $4_1;
    $3_1 = $1_1 ? $1_1 << 1 : 1;
    if (($1_1 | 0) >= ($3_1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$3_1) {
      $5_1 = 0;
      $2_1 = $4_1;
      break label$6;
     }
     $5_1 = $79($3_1 << 4);
     $2_1 = HEAP32[$0 + 8 >> 2];
    }
    if (($2_1 | 0) >= 1) {
     $1_1 = 12;
     while (1) {
      $7_1 = $1_1 + $5_1 | 0;
      $11 = HEAP32[$0 + 16 >> 2] + $1_1 | 0;
      HEAP32[$7_1 + -12 >> 2] = HEAP32[$11 + -12 >> 2];
      $13_1 = $11 + -8 | 0;
      $15_1 = HEAP32[$13_1 + 4 >> 2];
      $14 = $7_1 + -8 | 0;
      HEAP32[$14 >> 2] = HEAP32[$13_1 >> 2];
      HEAP32[$14 + 4 >> 2] = $15_1;
      HEAP32[$7_1 >> 2] = HEAP32[$11 >> 2];
      $1_1 = $1_1 + 16 | 0;
      $2_1 = $2_1 + -1 | 0;
      if ($2_1) {
       continue
      }
      break;
     };
    }
    $1_1 = HEAP32[$0 + 16 >> 2];
    if ($1_1) {
     if (HEAPU8[$0 + 20 | 0]) {
      $80($1_1)
     }
     HEAP32[$0 + 16 >> 2] = 0;
    }
    HEAP32[$0 + 16 >> 2] = $5_1;
    HEAP32[$0 + 12 >> 2] = $3_1;
    HEAP8[$0 + 20 | 0] = 1;
    $2_1 = HEAP32[$0 + 8 >> 2];
    $1_1 = $3_1;
   }
   HEAP32[$0 + 8 >> 2] = $2_1 + 1;
   $5_1 = $6_1 << 4;
   $3_1 = HEAP32[$0 + 16 >> 2];
   $2_1 = HEAP32[$0 + 68 >> 2];
   if ($2_1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $9_1, $8_1) | 0;
    $1_1 = HEAP32[$0 + 12 >> 2];
   }
   $2_1 = $3_1 + $5_1 | 0;
   if (($4_1 | 0) < ($1_1 | 0)) {
    $733($0);
    $10 = HEAP32[$0 + 12 >> 2] + -1 & $12_1;
   }
   $4_1 = HEAP32[$8_1 + 12 >> 2];
   $5_1 = HEAP32[$9_1 + 12 >> 2];
   $1_1 = $3_1 + ($6_1 << 4) | 0;
   HEAP32[$1_1 + 8 >> 2] = 0;
   HEAP32[$1_1 + 12 >> 2] = 0;
   $3_1 = $1_1;
   $1_1 = ($5_1 | 0) < ($4_1 | 0);
   HEAP32[$3_1 + 4 >> 2] = $1_1 ? $8_1 : $9_1;
   $4_1 = HEAP32[$0 + 60 >> 2] + ($6_1 << 2) | 0;
   $0 = HEAP32[$0 + 40 >> 2] + ($10 << 2) | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$2_1 >> 2] = $1_1 ? $9_1 : $8_1;
   HEAP32[$0 >> 2] = $6_1;
  }
  return $2_1;
 }
 
 function $741($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0;
  HEAP32[6295] = HEAP32[6295] + 1;
  $4_1 = HEAP32[$1_1 + 12 >> 2] > HEAP32[$2_1 + 12 >> 2];
  $6_1 = $4_1 ? $1_1 : $2_1;
  $5_1 = HEAP32[$6_1 + 12 >> 2];
  $8_1 = $4_1 ? $2_1 : $1_1;
  $7_1 = HEAP32[$8_1 + 12 >> 2];
  $1_1 = $5_1 << 16 | $7_1;
  $1_1 = ($1_1 << 15 ^ -1) + $1_1 | 0;
  $1_1 = Math_imul($1_1 >>> 10 ^ $1_1, 9);
  $1_1 = $1_1 >>> 6 ^ $1_1;
  $1_1 = ($1_1 << 11 ^ -1) + $1_1 | 0;
  $9_1 = HEAP32[$0 + 12 >> 2] + -1 & ($1_1 >>> 16 ^ $1_1);
  $1_1 = HEAP32[HEAP32[$0 + 40 >> 2] + ($9_1 << 2) >> 2];
  label$1 : {
   if (($1_1 | 0) == -1) {
    break label$1
   }
   $4_1 = HEAP32[$0 + 16 >> 2];
   while (1) {
    $2_1 = $4_1 + ($1_1 << 4) | 0;
    if (!(($5_1 | 0) == HEAP32[HEAP32[$2_1 + 4 >> 2] + 12 >> 2] ? HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2] == ($7_1 | 0) : 0)) {
     $1_1 = HEAP32[HEAP32[$0 + 60 >> 2] + ($1_1 << 2) >> 2];
     if (($1_1 | 0) != -1) {
      continue
     }
     break label$1;
    }
    break;
   };
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $2_1, $3_1);
   $10 = HEAP32[($4_1 + ($1_1 << 4) | 0) + 12 >> 2];
   $5_1 = HEAP32[$0 + 60 >> 2];
   label$5 : {
    label$6 : {
     $7_1 = HEAP32[$0 + 40 >> 2] + ($9_1 << 2) | 0;
     $1_1 = HEAP32[$7_1 >> 2];
     $4_1 = $2_1 - HEAP32[$0 + 16 >> 2] >> 4;
     if (($1_1 | 0) == ($4_1 | 0)) {
      $1_1 = HEAP32[$5_1 + ($4_1 << 2) >> 2];
      break label$6;
     }
     while (1) {
      $2_1 = $1_1;
      $1_1 = HEAP32[$5_1 + ($1_1 << 2) >> 2];
      if (($4_1 | 0) != ($1_1 | 0)) {
       continue
      }
      break;
     };
     $1_1 = HEAP32[$5_1 + ($4_1 << 2) >> 2];
     if (($2_1 | 0) == -1) {
      break label$6
     }
     HEAP32[$5_1 + ($2_1 << 2) >> 2] = $1_1;
     break label$5;
    }
    HEAP32[$7_1 >> 2] = $1_1;
   }
   $5_1 = HEAP32[$0 + 8 >> 2] + -1 | 0;
   $1_1 = HEAP32[$0 + 68 >> 2];
   if ($1_1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $8_1, $6_1, $3_1) | 0
   }
   if (($5_1 | 0) == ($4_1 | 0)) {
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -1;
    return $10 | 0;
   }
   $3_1 = HEAP32[$0 + 60 >> 2];
   label$11 : {
    label$12 : {
     $8_1 = HEAP32[$0 + 16 >> 2];
     $6_1 = $8_1 + ($5_1 << 4) | 0;
     $1_1 = HEAP32[HEAP32[$6_1 + 4 >> 2] + 12 >> 2] << 16 | HEAP32[HEAP32[$6_1 >> 2] + 12 >> 2];
     $1_1 = ($1_1 << 15 ^ -1) + $1_1 | 0;
     $1_1 = Math_imul($1_1 >>> 10 ^ $1_1, 9);
     $1_1 = $1_1 >>> 6 ^ $1_1;
     $1_1 = ($1_1 << 11 ^ -1) + $1_1 | 0;
     $7_1 = HEAP32[$0 + 12 >> 2] + -1 & ($1_1 >>> 16 ^ $1_1);
     $9_1 = HEAP32[$0 + 40 >> 2] + ($7_1 << 2) | 0;
     $1_1 = HEAP32[$9_1 >> 2];
     if (($1_1 | 0) == ($5_1 | 0)) {
      $1_1 = HEAP32[$3_1 + ($5_1 << 2) >> 2];
      break label$12;
     }
     while (1) {
      $2_1 = $1_1;
      $1_1 = HEAP32[$3_1 + ($1_1 << 2) >> 2];
      if (($5_1 | 0) != ($1_1 | 0)) {
       continue
      }
      break;
     };
     $1_1 = HEAP32[$3_1 + ($5_1 << 2) >> 2];
     if (($2_1 | 0) == -1) {
      break label$12
     }
     HEAP32[$3_1 + ($2_1 << 2) >> 2] = $1_1;
     break label$11;
    }
    HEAP32[$9_1 >> 2] = $1_1;
   }
   $2_1 = HEAP32[$6_1 + 4 >> 2];
   $1_1 = $8_1 + ($4_1 << 4) | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $2_1;
   $2_1 = $6_1 + 8 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $1_1 + 8 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $3_1;
   $1_1 = HEAP32[$0 + 40 >> 2] + ($7_1 << 2) | 0;
   HEAP32[HEAP32[$0 + 60 >> 2] + ($4_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$1_1 >> 2] = $4_1;
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -1;
  }
  return $10 | 0;
 }
 
 function $742($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $613($3_1 + 8 | 0, 16684);
  if (HEAP32[$0 + 8 >> 2] >= 1) {
   while (1) {
    $5_1 = HEAP32[$0 + 16 >> 2] + ($4_1 << 4) | 0;
    label$3 : {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $5_1)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$5_1 >> 2], HEAP32[$5_1 + 4 >> 2], $2_1) | 0;
      HEAP32[6294] = HEAP32[6294] + -1;
      break label$3;
     }
     $4_1 = $4_1 + 1 | 0;
    }
    if (($4_1 | 0) < HEAP32[$0 + 8 >> 2]) {
     continue
    }
    break;
   }
  }
  $614();
  global$0 = $3_1 + 16 | 0;
 }
 
 function $743($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 20 >> 2] = 0;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 + 16 >> 2] = 0;
  $4_1 = HEAP32[$0 + 8 >> 2];
  HEAP8[$3_1 + 24 | 0] = 1;
  label$1 : {
   if (($4_1 | 0) < 1) {
    break label$1
   }
   $4_1 = 0;
   while (1) {
    $5_1 = HEAP32[$0 + 16 >> 2] + ($7_1 << 4) | 0;
    label$3 : {
     if (($2_1 | 0) != ($4_1 | 0)) {
      break label$3
     }
     $6_1 = $4_1 ? $4_1 << 1 : 1;
     if (($4_1 | 0) >= ($6_1 | 0)) {
      $2_1 = $4_1;
      break label$3;
     }
     if ($6_1) {
      $8_1 = $79($6_1 << 4)
     } else {
      $8_1 = 0
     }
     if (($4_1 | 0) >= 1) {
      $2_1 = 12;
      while (1) {
       $9_1 = $2_1 + $8_1 | 0;
       $10 = HEAP32[$3_1 + 20 >> 2] + $2_1 | 0;
       HEAP32[$9_1 + -12 >> 2] = HEAP32[$10 + -12 >> 2];
       $11 = $10 + -8 | 0;
       $13_1 = HEAP32[$11 + 4 >> 2];
       $12_1 = $9_1 + -8 | 0;
       HEAP32[$12_1 >> 2] = HEAP32[$11 >> 2];
       HEAP32[$12_1 + 4 >> 2] = $13_1;
       HEAP32[$9_1 >> 2] = HEAP32[$10 >> 2];
       $2_1 = $2_1 + 16 | 0;
       $4_1 = $4_1 + -1 | 0;
       if ($4_1) {
        continue
       }
       break;
      };
     }
     $2_1 = HEAP32[$3_1 + 20 >> 2];
     if ($2_1) {
      if (HEAPU8[$3_1 + 24 | 0]) {
       $80($2_1)
      }
      HEAP32[$3_1 + 20 >> 2] = 0;
     }
     HEAP32[$3_1 + 20 >> 2] = $8_1;
     HEAP8[$3_1 + 24 | 0] = 1;
     HEAP32[$3_1 + 16 >> 2] = $6_1;
     $2_1 = HEAP32[$3_1 + 12 >> 2];
    }
    $2_1 = HEAP32[$3_1 + 20 >> 2] + ($2_1 << 4) | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
    $4_1 = HEAP32[$5_1 + 8 >> 2];
    HEAP32[$2_1 + 4 >> 2] = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$2_1 + 8 >> 2] = $4_1;
    HEAP32[$2_1 + 12 >> 2] = HEAP32[$5_1 + 12 >> 2];
    $6_1 = HEAP32[$3_1 + 12 >> 2];
    $2_1 = $6_1 + 1 | 0;
    HEAP32[$3_1 + 12 >> 2] = $2_1;
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) < HEAP32[$0 + 8 >> 2]) {
     $4_1 = HEAP32[$3_1 + 16 >> 2];
     continue;
    }
    break;
   };
   if (($6_1 | 0) < 0) {
    break label$1
   }
   $4_1 = -1;
   $5_1 = HEAP32[$3_1 + 20 >> 2];
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$5_1 >> 2], HEAP32[$5_1 + 4 >> 2], $1_1) | 0;
    $5_1 = $5_1 + 16 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < ($6_1 | 0)) {
     continue
    }
    break;
   };
  }
  if (HEAP32[$0 + 52 >> 2] >= 1) {
   $2_1 = HEAP32[$0 + 60 >> 2];
   $5_1 = 0;
   while (1) {
    HEAP32[$2_1 >> 2] = -1;
    $2_1 = $2_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < HEAP32[$0 + 52 >> 2]) {
     continue
    }
    break;
   };
   $2_1 = HEAP32[$3_1 + 12 >> 2];
  }
  if (($2_1 | 0) >= 2) {
   $773($3_1 + 8 | 0, $3_1, 0, $2_1 + -1 | 0);
   $2_1 = HEAP32[$3_1 + 12 >> 2];
  }
  $5_1 = HEAP32[$3_1 + 20 >> 2];
  if (($2_1 | 0) >= 1) {
   $1_1 = 0;
   $2_1 = 4;
   while (1) {
    $4_1 = $2_1 + $5_1 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4_1 + -4 >> 2], HEAP32[$4_1 >> 2]) | 0;
    $2_1 = $2_1 + 16 | 0;
    $5_1 = HEAP32[$3_1 + 20 >> 2];
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) < HEAP32[$3_1 + 12 >> 2]) {
     continue
    }
    break;
   };
  }
  if ($5_1) {
   if (HEAPU8[$3_1 + 24 | 0]) {
    $80($5_1)
   }
   HEAP32[$3_1 + 20 >> 2] = 0;
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $744($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  HEAP32[6296] = HEAP32[6296] + 1;
  $3_1 = HEAP32[$0 + 24 >> 2];
  label$1 : {
   label$2 : {
    if ($3_1) {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $1_1, $2_1)) {
      break label$2
     }
     break label$1;
    }
    if (!(HEAP32[$2_1 + 8 >> 2] & HEAP32[$1_1 + 4 >> 2]) | !(HEAP32[$1_1 + 8 >> 2] & HEAP32[$2_1 + 4 >> 2])) {
     break label$1
    }
   }
   $4_1 = $740($0, $1_1, $2_1);
  }
  return $4_1 | 0;
 }
 
 function $747($0) {
  $0 = $0 | 0;
  return $0 + 4 | 0;
 }
 
 function $748($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function $749($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 24 >> 2] = $1_1;
 }
 
 function $751($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 68 >> 2] = $1_1;
 }
 
 function $753($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  if (!(($2_1 | 0) != HEAP32[$1_1 + 4 >> 2] ? ($2_1 | 0) != HEAP32[$1_1 >> 2] : 0)) {
   $2_1 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 32 >> 2]]($2_1, $1_1, HEAP32[$0 + 12 >> 2]);
  }
  return 0;
 }
 
 function $755($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $0 = HEAP32[$0 + 4 >> 2];
  return ($0 | 0) == HEAP32[$1_1 >> 2] | ($0 | 0) == HEAP32[$1_1 + 4 >> 2];
 }
 
 function $756($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$0 >> 2] = 17140;
  $473($0 + 4 | 0);
  $473($0 + 44 | 0);
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP8[$0 + 172 | 0] = 1;
  $1_1 = $0 + 160 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0 + 153 | 0] = 256;
  HEAP8[$0 + 154 | 0] = 1;
  HEAP8[$0 + 152 | 0] = 1;
  HEAP32[$0 + 124 >> 2] = 0;
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP32[$0 + 104 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP32[$0 + 116 >> 2] = 10;
  HEAP32[$0 + 120 >> 2] = 1;
  HEAP32[$0 + 108 >> 2] = 1;
  HEAP32[$0 + 112 >> 2] = 0;
  $2_1 = $79(72);
  $732($2_1);
  $1_1 = HEAP32[$0 + 160 >> 2];
  HEAP32[$0 + 148 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = $2_1;
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 144 >> 2] = 0;
  $2_1 = $0 + 84 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP32[$3_1 + 20 >> 2] = 0;
  HEAP8[$3_1 + 24 | 0] = 1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 + 16 >> 2] = 0;
  label$2 : {
   if (($1_1 | 0) >= 2) {
    $4_1 = $1_1 + -1 | 0;
    $1_1 = 36;
    while (1) {
     $2_1 = HEAP32[$0 + 168 >> 2] + $1_1 | 0;
     $7_1 = $2_1 + -12 | 0;
     $5_1 = $2_1 + -4 | 0;
     $6_1 = HEAP32[$5_1 >> 2];
     if ($6_1) {
      if (HEAPU8[$2_1 | 0]) {
       $80($6_1)
      }
      HEAP32[$5_1 >> 2] = 0;
     }
     HEAP32[$5_1 >> 2] = 0;
     HEAP32[$7_1 >> 2] = 0;
     HEAP8[$2_1 | 0] = 1;
     HEAP32[$2_1 + -8 >> 2] = 0;
     $1_1 = $1_1 + 20 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue
     }
     break;
    };
    break label$2;
   }
   if (($1_1 | 0) == 1) {
    break label$2
   }
   $757($0 + 156 | 0);
   $4_1 = Math_imul($1_1, 20);
   $1_1 = $1_1 + -1 | 0;
   while (1) {
    $758(HEAP32[$0 + 168 >> 2] + $4_1 | 0, $3_1 + 8 | 0);
    $4_1 = $4_1 + 20 | 0;
    $2_1 = $1_1 + 1 | 0;
    $5_1 = $2_1 >>> 0 >= $1_1 >>> 0;
    $1_1 = $2_1;
    if ($5_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 160 >> 2] = 1;
  $0 = HEAP32[$3_1 + 20 >> 2];
  if ($0) {
   if (HEAPU8[$3_1 + 24 | 0]) {
    $80($0)
   }
   HEAP32[$3_1 + 20 >> 2] = 0;
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $757($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  if (HEAP32[$0 + 8 >> 2] < 1) {
   $5_1 = $79(20);
   $1_1 = HEAP32[$0 + 4 >> 2];
   label$4 : {
    if (($1_1 | 0) < 1) {
     break label$4
    }
    while (1) {
     $758($2_1 + $5_1 | 0, HEAP32[$0 + 12 >> 2] + $2_1 | 0);
     $2_1 = $2_1 + 20 | 0;
     $1_1 = $1_1 + -1 | 0;
     if ($1_1) {
      continue
     }
     break;
    };
    $3_1 = HEAP32[$0 + 4 >> 2];
    if (($3_1 | 0) < 1) {
     break label$4
    }
    $1_1 = 8;
    while (1) {
     $2_1 = HEAP32[$0 + 12 >> 2] + $1_1 | 0;
     $7_1 = $2_1 + -4 | 0;
     $4_1 = $2_1 + 4 | 0;
     $6_1 = HEAP32[$4_1 >> 2];
     if ($6_1) {
      if (HEAPU8[$2_1 + 8 | 0]) {
       $80($6_1)
      }
      HEAP32[$4_1 >> 2] = 0;
     }
     HEAP32[$7_1 >> 2] = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP8[$2_1 + 8 | 0] = 1;
     $1_1 = $1_1 + 20 | 0;
     $3_1 = $3_1 + -1 | 0;
     if ($3_1) {
      continue
     }
     break;
    };
   }
   $1_1 = HEAP32[$0 + 12 >> 2];
   if ($1_1) {
    if (HEAPU8[$0 + 16 | 0]) {
     $80($1_1)
    }
    HEAP32[$0 + 12 >> 2] = 0;
   }
   HEAP32[$0 + 12 >> 2] = $5_1;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = 1;
  }
 }
 
 function $758($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 16 | 0] = 1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  if (($4_1 | 0) <= 0) {
   HEAP32[$0 + 4 >> 2] = $4_1;
   return;
  }
  $5_1 = $79($4_1 << 2);
  $3_1 = HEAP32[$0 + 4 >> 2];
  if (($3_1 | 0) >= 1) {
   while (1) {
    HEAP32[$2_1 + $5_1 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + $2_1 >> 2];
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue
    }
    break;
   }
  }
  $3_1 = HEAP32[$0 + 12 >> 2];
  if ($3_1) {
   if (HEAPU8[$0 + 16 | 0]) {
    $80($3_1)
   }
   HEAP32[$0 + 12 >> 2] = 0;
  }
  HEAP32[$0 + 12 >> 2] = $5_1;
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 8 >> 2] = $4_1;
  $2_1 = 0;
  $3_1 = $4_1;
  while (1) {
   HEAP32[$2_1 + $5_1 >> 2] = 0;
   $2_1 = $2_1 + 4 | 0;
   $5_1 = HEAP32[$0 + 12 >> 2];
   $3_1 = $3_1 + -1 | 0;
   if ($3_1) {
    continue
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $4_1;
  if (($4_1 | 0) >= 1) {
   $2_1 = 0;
   while (1) {
    HEAP32[$2_1 + $5_1 >> 2] = HEAP32[HEAP32[$1_1 + 12 >> 2] + $2_1 >> 2];
    $2_1 = $2_1 + 4 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue
    }
    break;
   };
  }
 }
 
 function $759($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  HEAP32[$0 >> 2] = 17140;
  if (HEAPU8[$0 + 152 | 0]) {
   $1_1 = HEAP32[$0 + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $80(HEAP32[$0 + 96 >> 2]);
  }
  $2_1 = HEAP32[$0 + 160 >> 2];
  if (($2_1 | 0) >= 1) {
   $3_1 = 8;
   while (1) {
    $1_1 = HEAP32[$0 + 168 >> 2] + $3_1 | 0;
    $6_1 = $1_1 + -4 | 0;
    $4_1 = $1_1 + 4 | 0;
    $5_1 = HEAP32[$4_1 >> 2];
    if ($5_1) {
     if (HEAPU8[$1_1 + 8 | 0]) {
      $80($5_1)
     }
     HEAP32[$4_1 >> 2] = 0;
    }
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP8[$1_1 + 8 | 0] = 1;
    $3_1 = $3_1 + 20 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  $1_1 = HEAP32[$0 + 168 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 172 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 168 >> 2] = 0;
  }
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP32[$0 + 160 >> 2] = 0;
  HEAP32[$0 + 164 >> 2] = 0;
  HEAP8[$0 + 172 | 0] = 1;
  $474($0 + 44 | 0);
  $474($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $760($0) {
  $0 = $0 | 0;
  $37($759($0));
 }
 
 function $761($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $3_1 = $79(64);
  HEAP32[$3_1 + 8 >> 2] = $6_1;
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  HEAP32[$3_1 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 20 >> 2] = $4_1;
  $4_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $5_1 = $3_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $8_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$3_1 + 32 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 36 >> 2] = $5_1;
  $5_1 = $2_1 + 8 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = $3_1 + 40 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $8_1;
  HEAP32[$3_1 + 52 >> 2] = 0;
  HEAP32[$3_1 + 56 >> 2] = 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $6_1 = $7_1 + 24 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $8_1;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $7_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 60 >> 2] = HEAP32[$0 + 104 >> 2];
  HEAP32[$7_1 + 32 >> 2] = $2_1;
  HEAP32[$7_1 + 36 >> 2] = $5_1;
  $2_1 = HEAP32[$0 + 148 >> 2] + 1 | 0;
  HEAP32[$3_1 + 12 >> 2] = $2_1;
  HEAP32[$0 + 148 >> 2] = $2_1;
  HEAP32[$7_1 + 16 >> 2] = $4_1;
  HEAP32[$7_1 + 20 >> 2] = $1_1;
  $2_1 = $0 + 4 | 0;
  $1_1 = $480($2_1, $7_1 + 16 | 0, $3_1);
  HEAP32[$3_1 + 52 >> 2] = 0;
  HEAP32[$3_1 + 48 >> 2] = $1_1;
  $1_1 = ((HEAP32[$0 + 104 >> 2] << 2) + $0 | 0) + 84 | 0;
  HEAP32[$3_1 + 56 >> 2] = HEAP32[$1_1 >> 2];
  $4_1 = HEAP32[$1_1 >> 2];
  if ($4_1) {
   HEAP32[$4_1 + 52 >> 2] = $3_1
  }
  HEAP32[$1_1 >> 2] = $3_1;
  if (!HEAPU8[$0 + 153 | 0]) {
   HEAP32[$7_1 + 8 >> 2] = $3_1;
   HEAP32[$7_1 >> 2] = 17268;
   HEAP32[$7_1 + 4 >> 2] = $0;
   $762($2_1, HEAP32[$0 + 4 >> 2], $7_1 + 16 | 0, $7_1);
   $0 = $0 + 44 | 0;
   $762($0, HEAP32[$0 >> 2], $7_1 + 16 | 0, $7_1);
  }
  global$0 = $7_1 + 48 | 0;
  return $3_1 | 0;
 }
 
 function $762($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0);
  $10 = global$0 - 256 | 0;
  global$0 = $10;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $12_1 = HEAPF32[$2_1 + 24 >> 2];
   $13_1 = HEAPF32[$2_1 + 20 >> 2];
   $14 = HEAPF32[$2_1 + 16 >> 2];
   $15_1 = HEAPF32[$2_1 + 8 >> 2];
   $16_1 = HEAPF32[$2_1 + 4 >> 2];
   $17_1 = HEAPF32[$2_1 >> 2];
   HEAP32[$10 >> 2] = $1_1;
   $4_1 = 64;
   $0 = $10;
   $2_1 = 1;
   while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       $1_1 = $2_1 + -1 | 0;
       $11 = $1_1 << 2;
       $5_1 = HEAP32[$11 + $0 >> 2];
       label$6 : {
        if (HEAPF32[$5_1 >> 2] <= $14 ^ 1 | HEAPF32[$5_1 + 16 >> 2] >= $17_1 ^ 1 | (HEAPF32[$5_1 + 4 >> 2] <= $13_1 ^ 1 | HEAPF32[$5_1 + 20 >> 2] >= $16_1 ^ 1)) {
         break label$6
        }
        if (HEAPF32[$5_1 + 8 >> 2] <= $12_1 ^ 1 | HEAPF32[$5_1 + 24 >> 2] >= $15_1 ^ 1) {
         break label$6
        }
        if (HEAP32[$5_1 + 40 >> 2]) {
         if (($1_1 | 0) != ($4_1 | 0)) {
          break label$5
         }
         $6_1 = $4_1 ? $4_1 << 1 : 1;
         if (($2_1 | 0) > ($6_1 | 0)) {
          break label$5
         }
         if ($6_1) {
          $1_1 = $79($6_1 << 2)
         } else {
          $1_1 = 0
         }
         label$10 : {
          label$11 : {
           if (($2_1 | 0) >= 2) {
            $7_1 = $1_1;
            $8_1 = $0;
            while (1) {
             HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
             $7_1 = $7_1 + 4 | 0;
             $8_1 = $8_1 + 4 | 0;
             $4_1 = $4_1 + -1 | 0;
             if ($4_1) {
              continue
             }
             break;
            };
            if ($9_1) {
             break label$11
            }
            break label$10;
           }
           if (!$0 | !$9_1) {
            break label$10
           }
          }
          $80($0);
         }
         $9_1 = 1;
         break label$4;
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $5_1);
       }
       break label$3;
      }
      $6_1 = $4_1;
      $1_1 = $0;
     }
     HEAP32[$1_1 + $11 >> 2] = HEAP32[$5_1 + 36 >> 2];
     label$14 : {
      if (($2_1 | 0) != ($6_1 | 0)) {
       $4_1 = $6_1;
       $0 = $1_1;
       break label$14;
      }
      $4_1 = $2_1 ? $2_1 << 1 : 1;
      if (($2_1 | 0) >= ($4_1 | 0)) {
       $4_1 = $2_1;
       $0 = $1_1;
       break label$14;
      }
      if ($4_1) {
       $0 = $79($4_1 << 2)
      } else {
       $0 = 0
      }
      label$19 : {
       label$20 : {
        if (($2_1 | 0) >= 1) {
         $7_1 = $0;
         $6_1 = $1_1;
         $8_1 = $2_1;
         while (1) {
          HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
          $7_1 = $7_1 + 4 | 0;
          $6_1 = $6_1 + 4 | 0;
          $8_1 = $8_1 + -1 | 0;
          if ($8_1) {
           continue
          }
          break;
         };
         if ($9_1) {
          break label$20
         }
         break label$19;
        }
        if (!$1_1 | !$9_1) {
         break label$19
        }
       }
       $80($1_1);
      }
      $9_1 = 1;
     }
     HEAP32[($2_1 << 2) + $0 >> 2] = HEAP32[$5_1 + 40 >> 2];
     $1_1 = $2_1 + 1 | 0;
    }
    $2_1 = $1_1;
    if (($2_1 | 0) > 0) {
     continue
    }
    break;
   };
   if (!$0 | !$9_1) {
    break label$1
   }
   $80($0);
  }
  global$0 = $10 + 256 | 0;
 }
 
 function $763($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $483(HEAP32[$1_1 + 60 >> 2] == 2 ? $0 + 44 | 0 : $0 + 4 | 0, HEAP32[$1_1 + 48 >> 2]);
  $4_1 = HEAP32[$1_1 + 56 >> 2];
  $3_1 = HEAP32[$1_1 + 52 >> 2];
  label$1 : {
   if ($3_1) {
    $3_1 = $3_1 + 56 | 0;
    break label$1;
   }
   $3_1 = ((HEAP32[$1_1 + 60 >> 2] << 2) + $0 | 0) + 84 | 0;
  }
  HEAP32[$3_1 >> 2] = $4_1;
  $3_1 = HEAP32[$1_1 + 56 >> 2];
  if ($3_1) {
   HEAP32[$3_1 + 52 >> 2] = HEAP32[$1_1 + 52 >> 2]
  }
  $3_1 = HEAP32[$0 + 96 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $1_1, $2_1);
  $80($1_1);
  HEAP8[$0 + 154 | 0] = 1;
 }
 
 function $764($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $0 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $0;
  $0 = $2_1 + 8 | 0;
  $2_1 = $1_1 + 24 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $4_1;
  $2_1 = $1_1 + 40 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $0 = $3_1 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $4_1;
  $0 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $0;
 }
 
 function $765($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = 17340;
  HEAP32[$2_1 + 12 >> 2] = $3_1;
  $6_1 = $3_1 + 4 | 0;
  $7_1 = $3_1 + 20 | 0;
  $8_1 = HEAP32[$0 + 168 >> 2];
  $766($0 + 4 | 0, HEAP32[$0 + 4 >> 2], $1_1, $6_1, $7_1, HEAPF32[$3_1 + 32 >> 2], $4_1, $5_1, $8_1, $2_1 + 8 | 0);
  $0 = $0 + 44 | 0;
  $766($0, HEAP32[$0 >> 2], $1_1, $6_1, $7_1, HEAPF32[$3_1 + 32 >> 2], $4_1, $5_1, $8_1, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $766($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  var $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0);
  $12_1 = global$0 - 32 | 0;
  global$0 = $12_1;
  if ($1_1) {
   $11 = HEAP32[$8_1 + 4 >> 2];
   if (($11 | 0) <= 127) {
    if (HEAP32[$8_1 + 8 >> 2] <= 127) {
     $13_1 = $79(512);
     $0 = HEAP32[$8_1 + 4 >> 2];
     if (($0 | 0) >= 1) {
      while (1) {
       HEAP32[$10 + $13_1 >> 2] = HEAP32[HEAP32[$8_1 + 12 >> 2] + $10 >> 2];
       $10 = $10 + 4 | 0;
       $0 = $0 + -1 | 0;
       if ($0) {
        continue
       }
       break;
      }
     }
     $0 = HEAP32[$8_1 + 12 >> 2];
     if ($0) {
      if (HEAPU8[$8_1 + 16 | 0]) {
       $80($0)
      }
      HEAP32[$8_1 + 12 >> 2] = 0;
     }
     HEAP32[$8_1 + 12 >> 2] = $13_1;
     HEAP8[$8_1 + 16 | 0] = 1;
     HEAP32[$8_1 + 8 >> 2] = 128;
    }
    $10 = $11 << 2;
    $0 = $11 + -128 | 0;
    while (1) {
     HEAP32[HEAP32[$8_1 + 12 >> 2] + $10 >> 2] = 0;
     $10 = $10 + 4 | 0;
     $11 = $0 + 1 | 0;
     $13_1 = $11 >>> 0 >= $0 >>> 0;
     $0 = $11;
     if ($13_1) {
      continue
     }
     break;
    };
   }
   HEAP32[$8_1 + 4 >> 2] = 128;
   HEAP32[HEAP32[$8_1 + 12 >> 2] >> 2] = $1_1;
   $10 = 126;
   $0 = 1;
   while (1) {
    HEAP32[$12_1 + 12 >> 2] = 0;
    $13_1 = HEAP32[$8_1 + 12 >> 2];
    $1_1 = $0 + -1 | 0;
    $22_1 = $1_1 << 2;
    $11 = HEAP32[$13_1 + $22_1 >> 2];
    HEAPF32[$12_1 + 8 >> 2] = HEAPF32[$11 + 8 >> 2] - HEAPF32[$7_1 + 8 >> 2];
    HEAPF32[$12_1 + 4 >> 2] = HEAPF32[$11 + 4 >> 2] - HEAPF32[$7_1 + 4 >> 2];
    HEAPF32[$12_1 >> 2] = HEAPF32[$11 >> 2] - HEAPF32[$7_1 >> 2];
    $16_1 = HEAPF32[$11 + 24 >> 2];
    $17_1 = HEAPF32[$11 + 16 >> 2];
    $14 = HEAPF32[$6_1 + 8 >> 2];
    $18_1 = HEAPF32[$6_1 >> 2];
    HEAPF32[$12_1 + 20 >> 2] = HEAPF32[$11 + 20 >> 2] - HEAPF32[$6_1 + 4 >> 2];
    HEAPF32[$12_1 + 16 >> 2] = $17_1 - $18_1;
    HEAPF32[$12_1 + 24 >> 2] = $16_1 - $14;
    HEAP32[$12_1 + 28 >> 2] = 0;
    $15_1 = HEAP32[$4_1 + 4 >> 2];
    $18_1 = HEAPF32[$2_1 + 4 >> 2];
    $20 = HEAPF32[$3_1 + 4 >> 2];
    $16_1 = Math_fround(Math_fround(HEAPF32[(($15_1 << 4) + $12_1 | 0) + 4 >> 2] - $18_1) * $20);
    $14 = HEAPF32[$3_1 >> 2];
    $19_1 = HEAP32[$4_1 >> 2];
    $21 = HEAPF32[$2_1 >> 2];
    $17_1 = Math_fround($14 * Math_fround(HEAPF32[(1 - $19_1 << 4) + $12_1 >> 2] - $21));
    label$10 : {
     label$11 : {
      if ($16_1 > $17_1) {
       break label$11
      }
      $14 = Math_fround(Math_fround(HEAPF32[($19_1 << 4) + $12_1 >> 2] - $21) * $14);
      $18_1 = Math_fround($20 * Math_fround(HEAPF32[((1 - $15_1 << 4) + $12_1 | 0) + 4 >> 2] - $18_1));
      if ($14 > $18_1) {
       break label$11
      }
      $15_1 = HEAP32[$4_1 + 8 >> 2];
      $21 = HEAPF32[$2_1 + 8 >> 2];
      $23_1 = HEAPF32[$3_1 + 8 >> 2];
      $20 = Math_fround(Math_fround(HEAPF32[(($15_1 << 4) + $12_1 | 0) + 8 >> 2] - $21) * $23_1);
      $17_1 = $18_1 < $17_1 ? $18_1 : $17_1;
      if ($20 > $17_1) {
       break label$11
      }
      $16_1 = $16_1 > $14 ? $16_1 : $14;
      $14 = Math_fround($23_1 * Math_fround(HEAPF32[((1 - $15_1 << 4) + $12_1 | 0) + 8 >> 2] - $21));
      if ($16_1 > $14 | ($20 > $16_1 ? $20 : $16_1) < $5_1 ^ 1 | ($14 < $17_1 ? $14 : $17_1) > Math_fround(0.0) ^ 1) {
       break label$11
      }
      if (HEAP32[$11 + 40 >> 2]) {
       if (($1_1 | 0) > ($10 | 0)) {
        $1_1 = HEAP32[$8_1 + 4 >> 2];
        $15_1 = $1_1 << 1;
        if (($1_1 | 0) < ($15_1 | 0)) {
         if (HEAP32[$8_1 + 8 >> 2] < ($15_1 | 0)) {
          label$16 : {
           if (!$1_1) {
            $13_1 = 0;
            break label$16;
           }
           $13_1 = $79($1_1 << 3);
           $19_1 = HEAP32[$8_1 + 4 >> 2];
           if (($19_1 | 0) < 1) {
            break label$16
           }
           $10 = 0;
           while (1) {
            HEAP32[$10 + $13_1 >> 2] = HEAP32[HEAP32[$8_1 + 12 >> 2] + $10 >> 2];
            $10 = $10 + 4 | 0;
            $19_1 = $19_1 + -1 | 0;
            if ($19_1) {
             continue
            }
            break;
           };
          }
          $10 = HEAP32[$8_1 + 12 >> 2];
          if ($10) {
           if (HEAPU8[$8_1 + 16 | 0]) {
            $80($10)
           }
           HEAP32[$8_1 + 12 >> 2] = 0;
          }
          HEAP32[$8_1 + 12 >> 2] = $13_1;
          HEAP8[$8_1 + 16 | 0] = 1;
          HEAP32[$8_1 + 8 >> 2] = $15_1;
         }
         $10 = $1_1 << 2;
         while (1) {
          HEAP32[$10 + $13_1 >> 2] = 0;
          $10 = $10 + 4 | 0;
          $13_1 = HEAP32[$8_1 + 12 >> 2];
          $1_1 = $1_1 + -1 | 0;
          if ($1_1) {
           continue
          }
          break;
         };
        }
        HEAP32[$8_1 + 4 >> 2] = $15_1;
        $10 = $15_1 + -2 | 0;
       }
       HEAP32[$13_1 + $22_1 >> 2] = HEAP32[$11 + 36 >> 2];
       HEAP32[HEAP32[$8_1 + 12 >> 2] + ($0 << 2) >> 2] = HEAP32[$11 + 40 >> 2];
       $0 = $0 + 1 | 0;
       break label$10;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 12 >> 2]]($9_1, $11);
     }
     $0 = $1_1;
    }
    if ($0) {
     continue
    }
    break;
   };
  }
  global$0 = $12_1 + 32 | 0;
 }
 
 function $767($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 44 >> 2] = $3_1;
  HEAP32[$4_1 + 40 >> 2] = 17412;
  $5_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $3_1 = $4_1 + 16 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $6_1;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $3_1 = $4_1 + 32 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $6_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $3_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 24 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 28 >> 2] = $1_1;
  $762($0 + 4 | 0, HEAP32[$0 + 4 >> 2], $4_1 + 8 | 0, $4_1 + 40 | 0);
  $0 = $0 + 44 | 0;
  $762($0, HEAP32[$0 >> 2], $4_1 + 8 | 0, $4_1 + 40 | 0);
  global$0 = $4_1 + 48 | 0;
 }
 
 function $768($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $6_1 = $2_1 + 8 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $4_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $7_1;
  $6_1 = $3_1 + 8 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $4_1 + 40 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $7_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $5_1;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$4_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 36 >> 2] = $5_1;
  label$1 : {
   if (HEAP32[$1_1 + 60 >> 2] == 2) {
    $483($0 + 44 | 0, HEAP32[$1_1 + 48 >> 2]);
    (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $480($0 + 4 | 0, $4_1 + 16 | 0, $1_1)), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
    $6_1 = 1;
    break label$1;
   }
   $6_1 = 1;
   HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 128 >> 2] + 1;
   label$3 : {
    $5_1 = HEAP32[$1_1 + 48 >> 2];
    if (HEAPF32[$5_1 >> 2] <= HEAPF32[$4_1 + 32 >> 2] ^ 1 | HEAPF32[$5_1 + 16 >> 2] >= HEAPF32[$4_1 + 16 >> 2] ^ 1 | (HEAPF32[$5_1 + 4 >> 2] <= HEAPF32[$4_1 + 36 >> 2] ^ 1 | HEAPF32[$5_1 + 20 >> 2] >= HEAPF32[$4_1 + 20 >> 2] ^ 1)) {
     break label$3
    }
    if (HEAPF32[$5_1 + 8 >> 2] <= HEAPF32[$4_1 + 40 >> 2] ^ 1 | HEAPF32[$5_1 + 24 >> 2] >= HEAPF32[$4_1 + 24 >> 2] ^ 1) {
     break label$3
    }
    $9_1 = HEAPF32[$1_1 + 20 >> 2];
    $10 = HEAPF32[$1_1 + 24 >> 2];
    $14 = HEAPF32[$2_1 >> 2];
    $15_1 = HEAPF32[$2_1 + 4 >> 2];
    $16_1 = HEAPF32[$2_1 + 8 >> 2];
    $11 = HEAPF32[$1_1 + 16 >> 2];
    HEAP32[$4_1 + 12 >> 2] = 0;
    $8_1 = HEAPF32[$0 + 100 >> 2];
    $12_1 = Math_fround($8_1 * Math_fround(Math_fround(HEAPF32[$1_1 + 40 >> 2] - $10) * Math_fround(.5)));
    HEAPF32[$4_1 + 8 >> 2] = $12_1;
    $13_1 = Math_fround($8_1 * Math_fround(Math_fround(HEAPF32[$1_1 + 36 >> 2] - $9_1) * Math_fround(.5)));
    HEAPF32[$4_1 + 4 >> 2] = $13_1;
    $8_1 = Math_fround($8_1 * Math_fround(Math_fround(HEAPF32[$1_1 + 32 >> 2] - $11) * Math_fround(.5)));
    HEAPF32[$4_1 >> 2] = $8_1;
    $9_1 = Math_fround($15_1 - $9_1);
    if (!!(Math_fround($14 - $11) < Math_fround(0.0))) {
     HEAPF32[$4_1 >> 2] = -$8_1
    }
    $10 = Math_fround($16_1 - $10);
    if (!!($9_1 < Math_fround(0.0))) {
     HEAPF32[$4_1 + 4 >> 2] = -$13_1
    }
    if (!!($10 < Math_fround(0.0))) {
     HEAPF32[$4_1 + 8 >> 2] = -$12_1
    }
    $6_1 = 0;
    if (!$482($0 + 4 | 0, $5_1, $4_1 + 16 | 0, $4_1)) {
     break label$1
    }
    $6_1 = 1;
    HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 132 >> 2] + 1;
    break label$1;
   }
   $481($0 + 4 | 0, $5_1, $4_1 + 16 | 0);
   HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 132 >> 2] + 1;
  }
  $7_1 = HEAP32[$1_1 + 56 >> 2];
  $5_1 = HEAP32[$1_1 + 52 >> 2];
  label$7 : {
   if ($5_1) {
    $5_1 = $5_1 + 56 | 0;
    break label$7;
   }
   $5_1 = ((HEAP32[$1_1 + 60 >> 2] << 2) + $0 | 0) + 84 | 0;
  }
  HEAP32[$5_1 >> 2] = $7_1;
  $5_1 = HEAP32[$1_1 + 56 >> 2];
  if ($5_1) {
   HEAP32[$5_1 + 52 >> 2] = HEAP32[$1_1 + 52 >> 2]
  }
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 20 >> 2] = $5_1;
  $2_1 = $2_1 + 8 | 0;
  $7_1 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $1_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $7_1;
  $5_1 = $3_1 + 8 | 0;
  $7_1 = HEAP32[$5_1 + 4 >> 2];
  $2_1 = $1_1 + 40 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$1_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 36 >> 2] = $2_1;
  HEAP32[$1_1 + 52 >> 2] = 0;
  $3_1 = HEAP32[$0 + 104 >> 2];
  $2_1 = (($3_1 << 2) + $0 | 0) + 84 | 0;
  HEAP32[$1_1 + 56 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 60 >> 2] = $3_1;
  $3_1 = HEAP32[$2_1 >> 2];
  if ($3_1) {
   HEAP32[$3_1 + 52 >> 2] = $1_1
  }
  HEAP32[$2_1 >> 2] = $1_1;
  label$11 : {
   if (!$6_1) {
    break label$11
   }
   HEAP8[$0 + 154 | 0] = 1;
   if (HEAPU8[$0 + 153 | 0]) {
    break label$11
   }
   HEAP32[$4_1 >> 2] = 17268;
   HEAP32[$4_1 + 4 >> 2] = $0;
   $2_1 = $0 + 44 | 0;
   $769($2_1, HEAP32[$2_1 >> 2], HEAP32[$1_1 + 48 >> 2], $4_1);
   $769($0 + 4 | 0, HEAP32[$0 + 4 >> 2], HEAP32[$1_1 + 48 >> 2], $4_1);
  }
  global$0 = $4_1 + 48 | 0;
 }
 
 function $769($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0;
  if (!(!$1_1 | !$2_1)) {
   if (!(HEAP32[$0 + 24 >> 2] > 127 | HEAP32[$0 + 28 >> 2] > 127)) {
    $8_1 = $79(1024);
    $4_1 = HEAP32[$0 + 24 >> 2];
    if (($4_1 | 0) >= 1) {
     while (1) {
      $7_1 = HEAP32[$0 + 32 >> 2] + $6_1 | 0;
      $9_1 = HEAP32[$7_1 + 4 >> 2];
      $5_1 = $6_1 + $8_1 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $9_1;
      $6_1 = $6_1 + 8 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break;
     }
    }
    $4_1 = HEAP32[$0 + 32 >> 2];
    if ($4_1) {
     if (HEAPU8[$0 + 36 | 0]) {
      $80($4_1)
     }
     HEAP32[$0 + 32 >> 2] = 0;
    }
    HEAP32[$0 + 32 >> 2] = $8_1;
    HEAP32[$0 + 28 >> 2] = 128;
    HEAP8[$0 + 36 | 0] = 1;
   }
   HEAP32[$0 + 24 >> 2] = 128;
   $8_1 = HEAP32[$0 + 32 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $2_1;
   HEAP32[$8_1 >> 2] = $1_1;
   $2_1 = 124;
   $1_1 = 1;
   while (1) {
    $7_1 = HEAP32[$0 + 32 >> 2];
    $8_1 = $1_1;
    $1_1 = $1_1 + -1 | 0;
    $10 = $1_1 << 3;
    $4_1 = $7_1 + $10 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $4_1 = HEAP32[$4_1 >> 2];
    if (($1_1 | 0) > ($2_1 | 0)) {
     $2_1 = HEAP32[$0 + 24 >> 2];
     $9_1 = $2_1 << 1;
     if (!(($2_1 | 0) >= ($9_1 | 0) | HEAP32[$0 + 28 >> 2] >= ($9_1 | 0))) {
      label$10 : {
       if (!$2_1) {
        $7_1 = 0;
        break label$10;
       }
       $7_1 = $79($2_1 << 4);
       $2_1 = HEAP32[$0 + 24 >> 2];
       if (($2_1 | 0) < 1) {
        break label$10
       }
       $6_1 = 0;
       while (1) {
        $11 = HEAP32[$0 + 32 >> 2] + $6_1 | 0;
        $13_1 = HEAP32[$11 + 4 >> 2];
        $12_1 = $6_1 + $7_1 | 0;
        HEAP32[$12_1 >> 2] = HEAP32[$11 >> 2];
        HEAP32[$12_1 + 4 >> 2] = $13_1;
        $6_1 = $6_1 + 8 | 0;
        $2_1 = $2_1 + -1 | 0;
        if ($2_1) {
         continue
        }
        break;
       };
      }
      $2_1 = HEAP32[$0 + 32 >> 2];
      if ($2_1) {
       if (HEAPU8[$0 + 36 | 0]) {
        $80($2_1)
       }
       HEAP32[$0 + 32 >> 2] = 0;
      }
      HEAP32[$0 + 32 >> 2] = $7_1;
      HEAP8[$0 + 36 | 0] = 1;
      HEAP32[$0 + 28 >> 2] = $9_1;
     }
     HEAP32[$0 + 24 >> 2] = $9_1;
     $2_1 = $9_1 + -4 | 0;
    }
    label$15 : {
     if (($4_1 | 0) == ($5_1 | 0)) {
      if (!HEAP32[$4_1 + 40 >> 2]) {
       break label$15
      }
      $1_1 = $7_1 + $10 | 0;
      $5_1 = HEAP32[$4_1 + 36 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $5_1;
      HEAP32[$1_1 >> 2] = $5_1;
      $1_1 = $8_1 << 3;
      $5_1 = $1_1 + HEAP32[$0 + 32 >> 2] | 0;
      $6_1 = HEAP32[$4_1 + 40 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $6_1;
      HEAP32[$5_1 >> 2] = $6_1;
      $5_1 = HEAP32[$4_1 + 40 >> 2];
      $1_1 = ($1_1 + HEAP32[$0 + 32 >> 2] | 0) + 8 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$4_1 + 36 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $5_1;
      $1_1 = $8_1 + 2 | 0;
      break label$15;
     }
     if (HEAPF32[$4_1 >> 2] <= HEAPF32[$5_1 + 16 >> 2] ^ 1 | HEAPF32[$4_1 + 16 >> 2] >= HEAPF32[$5_1 >> 2] ^ 1 | (HEAPF32[$4_1 + 4 >> 2] <= HEAPF32[$5_1 + 20 >> 2] ^ 1 | HEAPF32[$4_1 + 20 >> 2] >= HEAPF32[$5_1 + 4 >> 2] ^ 1)) {
      break label$15
     }
     if (HEAPF32[$4_1 + 8 >> 2] <= HEAPF32[$5_1 + 24 >> 2] ^ 1 | HEAPF32[$4_1 + 24 >> 2] >= HEAPF32[$5_1 + 8 >> 2] ^ 1) {
      break label$15
     }
     $6_1 = HEAP32[$5_1 + 40 >> 2];
     if (HEAP32[$4_1 + 40 >> 2]) {
      $1_1 = HEAP32[$4_1 + 36 >> 2];
      if ($6_1) {
       $6_1 = $7_1 + $10 | 0;
       HEAP32[$6_1 + 4 >> 2] = HEAP32[$5_1 + 36 >> 2];
       HEAP32[$6_1 >> 2] = $1_1;
       $6_1 = HEAP32[$4_1 + 40 >> 2];
       $1_1 = $8_1 << 3;
       $7_1 = $1_1 + HEAP32[$0 + 32 >> 2] | 0;
       HEAP32[$7_1 + 4 >> 2] = HEAP32[$5_1 + 36 >> 2];
       HEAP32[$7_1 >> 2] = $6_1;
       $6_1 = HEAP32[$4_1 + 36 >> 2];
       $7_1 = $1_1 + HEAP32[$0 + 32 >> 2] | 0;
       HEAP32[$7_1 + 12 >> 2] = HEAP32[$5_1 + 40 >> 2];
       HEAP32[$7_1 + 8 >> 2] = $6_1;
       $4_1 = HEAP32[$4_1 + 40 >> 2];
       $1_1 = $1_1 + HEAP32[$0 + 32 >> 2] | 0;
       HEAP32[$1_1 + 20 >> 2] = HEAP32[$5_1 + 40 >> 2];
       HEAP32[$1_1 + 16 >> 2] = $4_1;
       $1_1 = $8_1 + 3 | 0;
       break label$15;
      }
      $6_1 = $7_1 + $10 | 0;
      HEAP32[$6_1 + 4 >> 2] = $5_1;
      HEAP32[$6_1 >> 2] = $1_1;
      $1_1 = HEAP32[$4_1 + 40 >> 2];
      $4_1 = HEAP32[$0 + 32 >> 2] + ($8_1 << 3) | 0;
      HEAP32[$4_1 + 4 >> 2] = $5_1;
      HEAP32[$4_1 >> 2] = $1_1;
      $1_1 = $8_1 + 1 | 0;
      break label$15;
     }
     if ($6_1) {
      $1_1 = $7_1 + $10 | 0;
      HEAP32[$1_1 + 4 >> 2] = HEAP32[$5_1 + 36 >> 2];
      HEAP32[$1_1 >> 2] = $4_1;
      $1_1 = HEAP32[$0 + 32 >> 2] + ($8_1 << 3) | 0;
      HEAP32[$1_1 + 4 >> 2] = HEAP32[$5_1 + 40 >> 2];
      HEAP32[$1_1 >> 2] = $4_1;
      $1_1 = $8_1 + 1 | 0;
      break label$15;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $4_1, $5_1);
    }
    if ($1_1) {
     continue
    }
    break;
   };
  }
 }
 
 function $770($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $771($0, $1_1);
  $772($0, $1_1);
 }
 
 function $771($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = Math_fround(0);
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $11 = $0 + 4 | 0;
  $477($11, ((Math_imul(HEAP32[$0 + 112 >> 2], HEAP32[$0 + 16 >> 2]) | 0) / 100 | 0) + 1 | 0);
  if (HEAP32[$0 + 124 >> 2]) {
   $2_1 = ((Math_imul(HEAP32[$0 + 108 >> 2], HEAP32[$0 + 56 >> 2]) | 0) / 100 | 0) + 1 | 0;
   $477($0 + 44 | 0, $2_1);
   $2_1 = HEAP32[$0 + 124 >> 2] - $2_1 | 0;
   HEAP32[$0 + 124 >> 2] = ($2_1 | 0) > 0 ? $2_1 : 0;
  }
  $2_1 = (HEAP32[$0 + 104 >> 2] + 1 | 0) % 2 | 0;
  HEAP32[$0 + 104 >> 2] = $2_1;
  $3_1 = HEAP32[(($2_1 << 2) + $0 | 0) + 84 >> 2];
  if ($3_1) {
   $7_1 = $0 + 44 | 0;
   $12_1 = $5_1 + 16 | 0;
   while (1) {
    $2_1 = HEAP32[$3_1 + 56 >> 2];
    $4_1 = HEAP32[$3_1 + 52 >> 2];
    label$4 : {
     if ($4_1) {
      $4_1 = $4_1 + 56 | 0;
      break label$4;
     }
     $4_1 = ((HEAP32[$3_1 + 60 >> 2] << 2) + $0 | 0) + 84 | 0;
    }
    HEAP32[$4_1 >> 2] = $2_1;
    $4_1 = HEAP32[$3_1 + 56 >> 2];
    if ($4_1) {
     HEAP32[$4_1 + 52 >> 2] = HEAP32[$3_1 + 52 >> 2]
    }
    HEAP32[$3_1 + 52 >> 2] = 0;
    HEAP32[$3_1 + 56 >> 2] = HEAP32[$0 + 92 >> 2];
    $4_1 = HEAP32[$0 + 92 >> 2];
    if ($4_1) {
     HEAP32[$4_1 + 52 >> 2] = $3_1
    }
    HEAP32[$0 + 92 >> 2] = $3_1;
    $483($11, HEAP32[$3_1 + 48 >> 2]);
    $8_1 = $3_1 + 24 | 0;
    $4_1 = HEAP32[$8_1 + 4 >> 2];
    $6_1 = $5_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $4_1;
    $10 = HEAP32[$3_1 + 16 >> 2];
    $9_1 = HEAP32[$3_1 + 20 >> 2];
    $4_1 = HEAP32[$3_1 + 36 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$3_1 + 32 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $4_1;
    $8_1 = $3_1 + 40 | 0;
    $4_1 = HEAP32[$8_1 + 4 >> 2];
    $6_1 = $12_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $4_1;
    HEAP32[$5_1 >> 2] = $10;
    HEAP32[$5_1 + 4 >> 2] = $9_1;
    $4_1 = $480($7_1, $5_1, $3_1);
    HEAP32[$3_1 + 60 >> 2] = 2;
    HEAP32[$3_1 + 48 >> 2] = $4_1;
    $3_1 = $2_1;
    if ($2_1) {
     continue
    }
    break;
   };
   HEAP8[$0 + 154 | 0] = 1;
   HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 56 >> 2];
  }
  HEAP32[$5_1 >> 2] = 17268;
  HEAP32[$5_1 + 4 >> 2] = $0;
  label$8 : {
   if (!HEAPU8[$0 + 153 | 0]) {
    break label$8
   }
   $769($11, HEAP32[$0 + 4 >> 2], HEAP32[$0 + 44 >> 2], $5_1);
   if (!HEAPU8[$0 + 153 | 0]) {
    break label$8
   }
   $2_1 = HEAP32[$11 >> 2];
   $769($11, $2_1, $2_1, $5_1);
  }
  label$9 : {
   if (!HEAPU8[$0 + 154 | 0]) {
    break label$9
   }
   $2_1 = HEAP32[$0 + 96 >> 2];
   $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1) | 0;
   $4_1 = HEAP32[$6_1 + 4 >> 2];
   if (($4_1 | 0) < 1) {
    break label$9
   }
   $10 = $0 + 144 | 0;
   $3_1 = HEAP32[$0 + 120 >> 2];
   $2_1 = (Math_imul(HEAP32[$0 + 116 >> 2], $4_1) | 0) / 100 | 0;
   $2_1 = ($3_1 | 0) > ($2_1 | 0) ? $3_1 : $2_1;
   $9_1 = ($4_1 | 0) < ($2_1 | 0) ? $4_1 : $2_1;
   label$10 : {
    if (($9_1 | 0) >= 1) {
     $3_1 = 0;
     while (1) {
      $2_1 = HEAP32[$6_1 + 12 >> 2] + ((HEAP32[$10 >> 2] + $3_1 | 0) % ($4_1 | 0) << 4) | 0;
      $8_1 = HEAP32[$2_1 >> 2];
      $7_1 = HEAP32[$8_1 + 48 >> 2];
      $4_1 = HEAP32[$2_1 + 4 >> 2];
      $2_1 = HEAP32[$4_1 + 48 >> 2];
      label$13 : {
       label$14 : {
        if (HEAPF32[$7_1 >> 2] <= HEAPF32[$2_1 + 16 >> 2] ^ 1 | HEAPF32[$7_1 + 16 >> 2] >= HEAPF32[$2_1 >> 2] ^ 1 | (HEAPF32[$7_1 + 4 >> 2] <= HEAPF32[$2_1 + 20 >> 2] ^ 1 | HEAPF32[$7_1 + 20 >> 2] >= HEAPF32[$2_1 + 4 >> 2] ^ 1)) {
         break label$14
        }
        if (!(HEAPF32[$7_1 + 8 >> 2] <= HEAPF32[$2_1 + 24 >> 2])) {
         break label$14
        }
        if (HEAPF32[$7_1 + 24 >> 2] >= HEAPF32[$2_1 + 8 >> 2]) {
         break label$13
        }
       }
       $2_1 = HEAP32[$0 + 96 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1, $8_1, $4_1, $1_1) | 0;
       $3_1 = $3_1 + -1 | 0;
       $9_1 = $9_1 + -1 | 0;
      }
      $4_1 = HEAP32[$6_1 + 4 >> 2];
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) < ($9_1 | 0)) {
       continue
      }
      break;
     };
     $10 = $0 + 144 | 0;
     $3_1 = 0;
     if (($4_1 | 0) <= 0) {
      break label$10
     }
    }
    $3_1 = (HEAP32[$10 >> 2] + $9_1 | 0) % ($4_1 | 0) | 0;
   }
   HEAP32[$10 >> 2] = $3_1;
  }
  HEAP8[$0 + 154 | 0] = 0;
  HEAP32[$0 + 120 >> 2] = 1;
  HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] + 1;
  $2_1 = HEAP32[$0 + 132 >> 2];
  $3_1 = $0;
  $1_1 = HEAP32[$0 + 128 >> 2];
  $13_1 = Math_fround(0.0);
  label$15 : {
   if (!$1_1) {
    break label$15
   }
   $13_1 = Math_fround(Math_fround($2_1 >>> 0) / Math_fround($1_1 >>> 0));
  }
  HEAPF32[$3_1 + 136 >> 2] = $13_1;
  HEAP32[$0 + 132 >> 2] = $2_1 >>> 1;
  HEAP32[$0 + 128 >> 2] = $1_1 >>> 1;
  global$0 = $5_1 + 32 | 0;
 }
 
 function $772($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0;
  $11 = global$0 - 16 | 0;
  global$0 = $11;
  $2_1 = HEAP32[$0 + 96 >> 2];
  if (FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 56 >> 2]]($2_1)) {
   $2_1 = HEAP32[$0 + 96 >> 2];
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1) | 0;
   $2_1 = HEAP32[$3_1 + 4 >> 2];
   if (($2_1 | 0) >= 2) {
    $773($3_1, $11 + 8 | 0, 0, $2_1 + -1 | 0);
    $2_1 = HEAP32[$3_1 + 4 >> 2];
   }
   if (($2_1 | 0) >= 1) {
    while (1) {
     $7_1 = HEAP32[$3_1 + 12 >> 2] + $12_1 | 0;
     $4_1 = HEAP32[$7_1 + 4 >> 2];
     $6_1 = $8_1;
     $8_1 = HEAP32[$7_1 >> 2];
     label$5 : {
      label$6 : {
       if (($4_1 | 0) == ($5_1 | 0) ? ($6_1 | 0) == ($8_1 | 0) : 0) {
        break label$6
       }
       $5_1 = HEAP32[$8_1 + 48 >> 2];
       $6_1 = HEAP32[$4_1 + 48 >> 2];
       if (HEAPF32[$5_1 >> 2] <= HEAPF32[$6_1 + 16 >> 2] ^ 1 | HEAPF32[$5_1 + 16 >> 2] >= HEAPF32[$6_1 >> 2] ^ 1 | (HEAPF32[$5_1 + 4 >> 2] <= HEAPF32[$6_1 + 20 >> 2] ^ 1 | HEAPF32[$5_1 + 20 >> 2] >= HEAPF32[$6_1 + 4 >> 2] ^ 1)) {
        break label$6
       }
       if (!(HEAPF32[$5_1 + 8 >> 2] <= HEAPF32[$6_1 + 24 >> 2])) {
        break label$6
       }
       if (HEAPF32[$5_1 + 24 >> 2] >= HEAPF32[$6_1 + 8 >> 2]) {
        break label$5
       }
      }
      $2_1 = HEAP32[$0 + 96 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 32 >> 2]]($2_1, $7_1, $1_1);
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 0;
      $9_1 = $9_1 + 1 | 0;
      $2_1 = HEAP32[$3_1 + 4 >> 2];
     }
     $12_1 = $12_1 + 16 | 0;
     $5_1 = $4_1;
     $10 = $10 + 1 | 0;
     if (($10 | 0) < ($2_1 | 0)) {
      continue
     }
     break;
    };
    if (($2_1 | 0) >= 2) {
     $773($3_1, $11, 0, $2_1 + -1 | 0);
     $2_1 = HEAP32[$3_1 + 4 >> 2];
    }
    $0 = $2_1 - $9_1 | 0;
    if (($9_1 | 0) <= -1) {
     if (HEAP32[$3_1 + 8 >> 2] < ($0 | 0)) {
      label$11 : {
       if (!$0) {
        $10 = 0;
        $1_1 = $2_1;
        break label$11;
       }
       $10 = $79($0 << 4);
       $1_1 = HEAP32[$3_1 + 4 >> 2];
      }
      if (($1_1 | 0) >= 1) {
       $4_1 = 12;
       while (1) {
        $8_1 = $4_1 + $10 | 0;
        $5_1 = HEAP32[$3_1 + 12 >> 2] + $4_1 | 0;
        HEAP32[$8_1 + -12 >> 2] = HEAP32[$5_1 + -12 >> 2];
        $7_1 = $5_1 + -8 | 0;
        $12_1 = HEAP32[$7_1 + 4 >> 2];
        $6_1 = $8_1 + -8 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $12_1;
        HEAP32[$8_1 >> 2] = HEAP32[$5_1 >> 2];
        $4_1 = $4_1 + 16 | 0;
        $1_1 = $1_1 + -1 | 0;
        if ($1_1) {
         continue
        }
        break;
       };
      }
      $1_1 = HEAP32[$3_1 + 12 >> 2];
      if ($1_1) {
       if (HEAPU8[$3_1 + 16 | 0]) {
        $80($1_1)
       }
       HEAP32[$3_1 + 12 >> 2] = 0;
      }
      HEAP32[$3_1 + 12 >> 2] = $10;
      HEAP8[$3_1 + 16 | 0] = 1;
      HEAP32[$3_1 + 8 >> 2] = $0;
     }
     $4_1 = $2_1 << 4;
     while (1) {
      $1_1 = HEAP32[$3_1 + 12 >> 2] + $4_1 | 0;
      HEAP32[$1_1 >> 2] = 0;
      HEAP32[$1_1 + 4 >> 2] = 0;
      $1_1 = $1_1 + 8 | 0;
      HEAP32[$1_1 >> 2] = 0;
      HEAP32[$1_1 + 4 >> 2] = 0;
      $4_1 = $4_1 + 16 | 0;
      $1_1 = $9_1 + 1 | 0;
      $2_1 = $1_1 >>> 0 >= $9_1 >>> 0;
      $9_1 = $1_1;
      if ($2_1) {
       continue
      }
      break;
     };
    }
    $2_1 = $0;
   }
   HEAP32[$3_1 + 4 >> 2] = $2_1;
  }
  global$0 = $11 + 16 | 0;
 }
 
 function $773($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0;
  while (1) {
   $16_1 = $2_1;
   $12_1 = HEAP32[$0 + 12 >> 2];
   $10 = $12_1 + (($2_1 + $3_1 | 0) / 2 << 4) | 0;
   $15_1 = HEAP32[$10 + 8 >> 2];
   $11 = HEAP32[$10 + 4 >> 2];
   $14 = HEAP32[$10 >> 2];
   $10 = $3_1;
   while (1) {
    label$3 : {
     if (!$14) {
      $9_1 = ($2_1 << 4) + $12_1 | 0;
      while (1) {
       $7_1 = -1;
       $4_1 = -1;
       $5_1 = HEAP32[$9_1 >> 2];
       if ($5_1) {
        $4_1 = HEAP32[$5_1 + 12 >> 2]
       }
       $6_1 = HEAP32[$9_1 + 4 >> 2];
       if ($6_1) {
        $7_1 = HEAP32[$6_1 + 12 >> 2]
       }
       if ($11) {
        $8_1 = HEAP32[$11 + 12 >> 2]
       } else {
        $8_1 = -1
       }
       label$10 : {
        if (($4_1 | 0) > -1) {
         break label$10
        }
        if (!($5_1 | ($7_1 | 0) > ($8_1 | 0))) {
         if (($6_1 | 0) != ($11 | 0)) {
          break label$3
         }
         if (HEAPU32[$9_1 + 8 >> 2] > $15_1 >>> 0) {
          break label$10
         }
         break label$3;
        }
        if (($7_1 | 0) <= ($8_1 | 0) | $5_1) {
         break label$3
        }
       }
       $9_1 = $9_1 + 16 | 0;
       $2_1 = $2_1 + 1 | 0;
       continue;
      };
     }
     $9_1 = ($2_1 << 4) + $12_1 | 0;
     $13_1 = HEAP32[$14 + 12 >> 2];
     while (1) {
      $7_1 = -1;
      $4_1 = -1;
      $5_1 = HEAP32[$9_1 >> 2];
      if ($5_1) {
       $4_1 = HEAP32[$5_1 + 12 >> 2]
      }
      $6_1 = HEAP32[$9_1 + 4 >> 2];
      if ($6_1) {
       $7_1 = HEAP32[$6_1 + 12 >> 2]
      }
      if ($11) {
       $8_1 = HEAP32[$11 + 12 >> 2]
      } else {
       $8_1 = -1
      }
      label$17 : {
       if (($4_1 | 0) > ($13_1 | 0)) {
        break label$17
       }
       if (!(($5_1 | 0) != ($14 | 0) | ($7_1 | 0) > ($8_1 | 0))) {
        if (($6_1 | 0) != ($11 | 0) | HEAPU32[$9_1 + 8 >> 2] <= $15_1 >>> 0) {
         break label$3
        }
        break label$17;
       }
       if (($5_1 | 0) != ($14 | 0) | ($7_1 | 0) <= ($8_1 | 0)) {
        break label$3
       }
      }
      $9_1 = $9_1 + 16 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue;
     };
    }
    label$19 : {
     if (!$14) {
      $4_1 = ($10 << 4) + $12_1 | 0;
      while (1) {
       $8_1 = -1;
       $7_1 = -1;
       $6_1 = HEAP32[$4_1 >> 2];
       if ($6_1) {
        $7_1 = HEAP32[$6_1 + 12 >> 2]
       }
       $8_1 = $11 ? HEAP32[$11 + 12 >> 2] : $8_1;
       $13_1 = HEAP32[$4_1 + 4 >> 2];
       $5_1 = -1;
       label$24 : {
        if (!$13_1) {
         break label$24
        }
        $5_1 = HEAP32[$13_1 + 12 >> 2];
       }
       label$26 : {
        if (($7_1 | 0) < -1) {
         break label$26
        }
        if (!($6_1 | ($8_1 | 0) > ($5_1 | 0))) {
         if (($11 | 0) != ($13_1 | 0)) {
          break label$19
         }
         if (HEAPU32[$4_1 + 8 >> 2] < $15_1 >>> 0) {
          break label$26
         }
         break label$19;
        }
        if (($8_1 | 0) <= ($5_1 | 0) | $6_1) {
         break label$19
        }
       }
       $4_1 = $4_1 + -16 | 0;
       $10 = $10 + -1 | 0;
       continue;
      };
     }
     $4_1 = ($10 << 4) + $12_1 | 0;
     $17_1 = HEAP32[$14 + 12 >> 2];
     while (1) {
      $8_1 = -1;
      $7_1 = -1;
      $6_1 = HEAP32[$4_1 >> 2];
      if ($6_1) {
       $7_1 = HEAP32[$6_1 + 12 >> 2]
      }
      $8_1 = $11 ? HEAP32[$11 + 12 >> 2] : $8_1;
      $13_1 = HEAP32[$4_1 + 4 >> 2];
      $5_1 = -1;
      label$31 : {
       if (!$13_1) {
        break label$31
       }
       $5_1 = HEAP32[$13_1 + 12 >> 2];
      }
      label$33 : {
       if (($17_1 | 0) > ($7_1 | 0)) {
        break label$33
       }
       if (!(($6_1 | 0) != ($14 | 0) | ($8_1 | 0) > ($5_1 | 0))) {
        if (($11 | 0) != ($13_1 | 0) | HEAPU32[$4_1 + 8 >> 2] >= $15_1 >>> 0) {
         break label$19
        }
        break label$33;
       }
       if (($6_1 | 0) != ($14 | 0) | ($8_1 | 0) <= ($5_1 | 0)) {
        break label$19
       }
      }
      $4_1 = $4_1 + -16 | 0;
      $10 = $10 + -1 | 0;
      continue;
     };
    }
    if (($2_1 | 0) <= ($10 | 0)) {
     $7_1 = ($2_1 << 4) + $12_1 | 0;
     $8_1 = HEAP32[$7_1 + 4 >> 2];
     $5_1 = HEAP32[$7_1 + 8 >> 2];
     $7_1 = HEAP32[$7_1 + 12 >> 2];
     $12_1 = HEAP32[$9_1 >> 2];
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$9_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $6_1;
     $4_1 = $4_1 + 8 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $9_1 = $9_1 + 8 | 0;
     HEAP32[$9_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $6_1;
     $4_1 = HEAP32[$0 + 12 >> 2] + ($10 << 4) | 0;
     HEAP32[$4_1 + 12 >> 2] = $7_1;
     HEAP32[$4_1 + 4 >> 2] = $8_1;
     HEAP32[$4_1 + 8 >> 2] = $5_1;
     HEAP32[$4_1 >> 2] = $12_1;
     $10 = $10 + -1 | 0;
     $2_1 = $2_1 + 1 | 0;
    }
    if (($2_1 | 0) <= ($10 | 0)) {
     $12_1 = HEAP32[$0 + 12 >> 2];
     continue;
    }
    break;
   };
   if (($10 | 0) > ($16_1 | 0)) {
    $773($0, $1_1, $16_1, $10)
   }
   if (($2_1 | 0) < ($3_1 | 0)) {
    continue
   }
   break;
  };
 }
 
 function $776($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $5_1 = HEAP32[$0 + 44 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   if ($0) {
    $6_1 = HEAPF32[$0 >> 2];
    if ($5_1) {
     $3_1 = HEAPF32[$0 + 20 >> 2];
     $4_1 = HEAPF32[$5_1 + 20 >> 2];
     $7_1 = $3_1 > $4_1 ? $3_1 : $4_1;
     $3_1 = HEAPF32[$0 + 8 >> 2];
     $4_1 = HEAPF32[$5_1 + 8 >> 2];
     $8_1 = $3_1 < $4_1 ? $3_1 : $4_1;
     $3_1 = HEAPF32[$0 + 4 >> 2];
     $4_1 = HEAPF32[$5_1 + 4 >> 2];
     $9_1 = $3_1 < $4_1 ? $3_1 : $4_1;
     $3_1 = HEAPF32[$0 + 16 >> 2];
     $4_1 = HEAPF32[$5_1 + 16 >> 2];
     $10 = $3_1 > $4_1 ? $3_1 : $4_1;
     $3_1 = HEAPF32[$5_1 >> 2];
     $6_1 = $6_1 < $3_1 ? $6_1 : $3_1;
     $3_1 = HEAPF32[$0 + 24 >> 2];
     $4_1 = HEAPF32[$5_1 + 24 >> 2];
     if (!($3_1 > $4_1)) {
      $3_1 = $4_1;
      break label$1;
     }
     break label$1;
    }
    $4_1 = HEAPF32[$0 + 28 >> 2];
    $3_1 = HEAPF32[$0 + 24 >> 2];
    $7_1 = HEAPF32[$0 + 20 >> 2];
    $10 = HEAPF32[$0 + 16 >> 2];
    $11 = HEAPF32[$0 + 12 >> 2];
    $8_1 = HEAPF32[$0 + 8 >> 2];
    $9_1 = HEAPF32[$0 + 4 >> 2];
    break label$1;
   }
   if (!$5_1) {
    break label$1
   }
   $4_1 = HEAPF32[$5_1 + 28 >> 2];
   $3_1 = HEAPF32[$5_1 + 24 >> 2];
   $7_1 = HEAPF32[$5_1 + 20 >> 2];
   $10 = HEAPF32[$5_1 + 16 >> 2];
   $11 = HEAPF32[$5_1 + 12 >> 2];
   $8_1 = HEAPF32[$5_1 + 8 >> 2];
   $9_1 = HEAPF32[$5_1 + 4 >> 2];
   $6_1 = HEAPF32[$5_1 >> 2];
  }
  HEAPF32[$1_1 + 12 >> 2] = $11;
  HEAPF32[$1_1 + 8 >> 2] = $8_1;
  HEAPF32[$1_1 + 4 >> 2] = $9_1;
  HEAPF32[$1_1 >> 2] = $6_1;
  HEAPF32[$2_1 + 12 >> 2] = $4_1;
  HEAPF32[$2_1 + 8 >> 2] = $3_1;
  HEAPF32[$2_1 + 4 >> 2] = $7_1;
  HEAPF32[$2_1 >> 2] = $10;
 }
 
 function $777($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  if (HEAP32[$0 + 16 >> 2] == (0 - HEAP32[$0 + 56 >> 2] | 0)) {
   $476($0 + 4 | 0);
   $476($0 + 44 | 0);
   HEAP8[$0 + 153 | 0] = 256;
   HEAP8[$0 + 154 | 0] = 1;
   HEAP32[$0 + 124 >> 2] = 0;
   HEAP32[$0 + 104 >> 2] = 0;
   HEAP32[$0 + 116 >> 2] = 10;
   HEAP32[$0 + 120 >> 2] = 1;
   HEAP32[$0 + 108 >> 2] = 1;
   HEAP32[$0 + 112 >> 2] = 0;
   $1_1 = $0 + 84 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$0 + 92 >> 2] = 0;
   HEAP32[$0 + 128 >> 2] = 0;
   HEAP32[$0 + 132 >> 2] = 0;
   $1_1 = $0 + 136 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $0 = $0 + 144 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
  }
 }
 
 function $780($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  if (($1_1 | 0) != ($2_1 | 0)) {
   $3_1 = HEAP32[HEAP32[$0 + 4 >> 2] + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, HEAP32[$1_1 + 36 >> 2], HEAP32[$2_1 + 36 >> 2]) | 0;
   $0 = HEAP32[$0 + 4 >> 2];
   HEAP32[$0 + 120 >> 2] = HEAP32[$0 + 120 >> 2] + 1;
  }
 }
 
 function $781($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1_1, HEAP32[HEAP32[$0 + 8 >> 2] + 48 >> 2]);
 }
 
 function $783($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$1_1 + 36 >> 2]) | 0;
 }
 
 function $786($0, $1_1) {
  return Math_fround(($0 ? Math_fround(-$1_1) : $1_1) * $1_1);
 }
 
 function $790($0, $1_1) {
  var $2_1 = 0, $3_1 = 0.0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0.0, $9_1 = 0, $10 = 0.0;
  $4_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(0));
  $6_1 = $4_1 << 1;
  $9_1 = $6_1 + -1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
      label$5 : {
       if ($2_1 + -8388608 >>> 0 <= 2130706431) {
        if ($9_1 >>> 0 > 4278190078) {
         break label$5
        }
        break label$3;
       }
       if ($9_1 >>> 0 < 4278190079) {
        break label$4
       }
      }
      $7_1 = Math_fround(1.0);
      if (!$6_1 | ($2_1 | 0) == 1065353216) {
       break label$2
      }
      $2_1 = $2_1 << 1;
      if (!($6_1 >>> 0 < 4278190081 ? $2_1 >>> 0 <= 4278190080 : 0)) {
       return Math_fround($0 + $1_1)
      }
      if (($2_1 | 0) == 2130706432) {
       break label$2
      }
      return ($4_1 ^ -1) >>> 31 == ($2_1 >>> 0 < 2130706432 | 0) ? Math_fround(0.0) : Math_fround($1_1 * $1_1);
     }
     if (($2_1 << 1) + -1 >>> 0 >= 4278190079) {
      $7_1 = Math_fround($0 * $0);
      label$10 : {
       if (($2_1 | 0) > -1) {
        break label$10
       }
       $2_1 = $4_1 >>> 23 & 255;
       if ($2_1 + -127 >>> 0 > 23) {
        break label$10
       }
       $2_1 = 1 << 150 - $2_1;
       $7_1 = $2_1 & $4_1 ? ($2_1 + -1 & $4_1 ? $7_1 : Math_fround(-$7_1)) : $7_1;
      }
      if (($4_1 | 0) > -1) {
       break label$2
      }
      return Math_fround(Math_fround(1.0) / $7_1);
     }
     if (($2_1 | 0) <= -1) {
      $5_1 = $4_1 >>> 23 & 255;
      if ($5_1 >>> 0 < 127) {
       break label$1
      }
      label$12 : {
       if ($5_1 >>> 0 <= 150) {
        $5_1 = 1 << 150 - $5_1;
        if ($5_1 + -1 & $4_1) {
         break label$1
        }
        $6_1 = 65536;
        if ($4_1 & $5_1) {
         break label$12
        }
       }
       $6_1 = 0;
      }
      $5_1 = $6_1;
      $2_1 = $2_1 & 2147483647;
     }
     if ($2_1 >>> 0 > 8388607) {
      break label$3
     }
     $2_1 = ((wasm2js_scratch_store_f32(Math_fround($0 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(0)) & 2147483647) + -192937984 | 0;
    }
    $4_1 = $2_1 + -1060306944 | 0;
    $6_1 = $4_1 >>> 15 & 240;
    $3_1 = HEAPF64[$6_1 + 17480 >> 3] * +(wasm2js_scratch_store_i32(0, $2_1 - ($4_1 & -8388608) | 0), wasm2js_scratch_load_f32()) + -1.0;
    $8_1 = $3_1 * $3_1;
    $3_1 = ((HEAPF64[2218] + HEAPF64[2217] * $3_1) * ($8_1 * $8_1) + ($8_1 * (HEAPF64[2220] + HEAPF64[2219] * $3_1) + (HEAPF64[$6_1 + 17488 >> 3] + +($4_1 >> 23) + $3_1 * HEAPF64[2221]))) * +$1_1;
    wasm2js_scratch_store_f64(+$3_1);
    $2_1 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    label$14 : {
     $2_1 = $2_1 & 2147450880;
     if (($2_1 | 0) == 1079967744 | $2_1 >>> 0 < 1079967744) {
      break label$14
     }
     if (!!($3_1 > 127.99999995700433)) {
      return $786($5_1, Math_fround(1584563250285286751870879.0e5))
     }
     if (!($3_1 <= -150.0)) {
      break label$14
     }
     return $786($5_1, Math_fround(2.524354896707238e-29));
    }
    $10 = $3_1;
    $3_1 = HEAPF64[2254];
    $8_1 = $10 + $3_1;
    $3_1 = $10 - ($8_1 - $3_1);
    $3_1 = $3_1 * $3_1 * (HEAPF64[2256] + HEAPF64[2255] * $3_1) + ($3_1 * HEAPF64[2257] + 1.0);
    wasm2js_scratch_store_f64(+$8_1);
    wasm2js_scratch_load_i32(1) | 0;
    $2_1 = wasm2js_scratch_load_i32(0) | 0;
    $4_1 = $5_1 + $2_1 << 15;
    $5_1 = (($2_1 & 31) << 3) + 17776 | 0;
    $6_1 = HEAP32[$5_1 >> 2];
    $2_1 = $6_1;
    $4_1 = HEAP32[$5_1 + 4 >> 2] + $4_1 | 0;
    wasm2js_scratch_store_i32(0, $2_1 | 0);
    wasm2js_scratch_store_i32(1, ($2_1 >>> 0 < $2_1 >>> 0 ? $4_1 + 1 | 0 : $4_1) | 0);
    $7_1 = Math_fround($3_1 * +wasm2js_scratch_load_f64());
   }
   return $7_1;
  }
  $0 = Math_fround($0 - $0);
  return Math_fround($0 / $0);
 }
 
 function $791($0) {
  var $1_1 = Math_fround(0), $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0);
  $3_1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $2_1 = $3_1 & 2147483647;
  if ($2_1 >>> 0 >= 1065353216) {
   if (($2_1 | 0) == 1065353216) {
    return ($3_1 | 0) < 0 ? Math_fround(3.141592502593994) : Math_fround(0.0)
   }
   return Math_fround(Math_fround(0.0) / Math_fround($0 - $0));
  }
  label$3 : {
   if ($2_1 >>> 0 <= 1056964607) {
    $1_1 = Math_fround(1.570796251296997);
    if ($2_1 >>> 0 < 847249409) {
     break label$3
    }
    $1_1 = Math_fround($0 * $0);
    return Math_fround(Math_fround(Math_fround(Math_fround(7.549789415861596e-08) - Math_fround(Math_fround(Math_fround($1_1 * Math_fround(Math_fround($1_1 * Math_fround(Math_fround($1_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($1_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0))) * $0)) - $0) + Math_fround(1.570796251296997));
   }
   if (($3_1 | 0) <= -1) {
    $0 = Math_fround(Math_fround($0 + Math_fround(1.0)) * Math_fround(.5));
    $1_1 = Math_fround(Math_sqrt($0));
    $0 = Math_fround(Math_fround(1.570796251296997) - Math_fround($1_1 + Math_fround(Math_fround($1_1 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($0 * Math_fround(-.7066296339035034)) + Math_fround(1.0)))) + Math_fround(-7.549789415861596e-08))));
    return Math_fround($0 + $0);
   }
   $0 = Math_fround(Math_fround(Math_fround(1.0) - $0) * Math_fround(.5));
   $4_1 = Math_fround(Math_sqrt($0));
   $1_1 = (wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32($4_1), wasm2js_scratch_load_i32(0)) & -4096), wasm2js_scratch_load_f32());
   $0 = Math_fround(Math_fround(Math_fround($4_1 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($0 * Math_fround(-.7066296339035034)) + Math_fround(1.0)))) + Math_fround(Math_fround($0 - Math_fround($1_1 * $1_1)) / Math_fround($4_1 + $1_1))) + $1_1);
   $1_1 = Math_fround($0 + $0);
  }
  return $1_1;
 }
 
 function $792($0, $1_1) {
  var $2_1 = 0;
  $305($0);
  HEAP8[$0 + 560 | 0] = 1;
  HEAP32[$0 >> 2] = 18112;
  HEAP32[$0 + 556 >> 2] = 0;
  $2_1 = $0 + 548 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $793($0, $1_1);
 }
 
 function $793($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$0 + 372 >> 2] = 0;
  HEAP32[$0 + 376 >> 2] = 0;
  HEAP32[$0 + 252 >> 2] = 2;
  HEAP32[$0 + 604 >> 2] = 1065353216;
  HEAP32[$0 + 608 >> 2] = 1065353216;
  HEAP32[$0 + 408 >> 2] = 1065353216;
  HEAP32[$0 + 412 >> 2] = 1065353216;
  HEAP32[$0 + 472 >> 2] = 0;
  HEAP32[$0 + 476 >> 2] = 0;
  $2_1 = $0 + 380 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0 + 388 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0 + 396 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0 + 612 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0 + 420 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0 + 416 >> 2] = 1065353216;
  $2_1 = $0 + 428 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0 + 436 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0 + 444 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0 + 452 >> 2] = 0;
  $2_1 = $0 + 480 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0 + 488 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0 + 496 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $7_1 = HEAPF32[$1_1 + 96 >> 2];
  $5_1 = HEAPF32[$1_1 + 92 >> 2];
  HEAPF32[$6_1 + 12 >> 2] = $5_1;
  HEAPF32[$6_1 + 8 >> 2] = $7_1;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 1065353216;
  HEAP32[$0 + 504 >> 2] = HEAP32[($5_1 < Math_fround(0.0) ? $6_1 + 4 | 0 : $5_1 > Math_fround(1.0) ? $6_1 : $6_1 + 12 | 0) >> 2];
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 1065353216;
  HEAP32[$0 + 508 >> 2] = HEAP32[($7_1 < Math_fround(0.0) ? $6_1 + 4 | 0 : $7_1 > Math_fround(1.0) ? $6_1 : $6_1 + 8 | 0) >> 2];
  HEAP32[$0 + 668 >> 2] = 0;
  HEAP32[$0 + 672 >> 2] = 0;
  $2_1 = HEAP32[$1_1 + 120 >> 2];
  HEAP32[$0 + 532 >> 2] = HEAP32[$1_1 + 116 >> 2];
  HEAP32[$0 + 536 >> 2] = $2_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 540 >> 2] = $3_1;
  HEAP8[$0 + 512 | 0] = HEAPU8[$1_1 + 124 | 0];
  $2_1 = HEAP32[$1_1 + 132 >> 2];
  HEAP32[$0 + 516 >> 2] = HEAP32[$1_1 + 128 >> 2];
  HEAP32[$0 + 520 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 140 >> 2];
  HEAP32[$0 + 524 >> 2] = HEAP32[$1_1 + 136 >> 2];
  HEAP32[$0 + 528 >> 2] = $2_1;
  label$1 : {
   if ($3_1) {
    $2_1 = $0 + 4 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $2_1);
    break label$1;
   }
   $2_1 = HEAP32[$1_1 + 12 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$0 + 8 >> 2] = $2_1;
   $3_1 = $1_1 + 16 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 12 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $1_1 + 32 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 28 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $1_1 + 24 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 20 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $1_1 + 40 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 36 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $1_1 + 48 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 44 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $1_1 - -64 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 60 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $1_1 + 56 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 52 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $2_1 = $0 + 4 | 0;
  }
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0 + 68 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 72 >> 2] = $3_1;
  $3_1 = $0 + 156 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0 + 148 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0 + 140 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $4_1 = $0 + 20 | 0;
  $22_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $0 + 84 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $22_1;
  $2_1 = $2_1 + 8 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $0 + 76 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $3_1 = $0 + 28 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 92 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $0 + 36 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 100 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $0 + 44 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 108 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $0 + 52 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 116 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $0 + 60 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 124 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  HEAP32[$0 + 228 >> 2] = HEAP32[$1_1 + 100 >> 2];
  HEAP32[$0 + 236 >> 2] = HEAP32[$1_1 + 104 >> 2];
  HEAP32[$0 + 240 >> 2] = HEAP32[$1_1 + 108 >> 2];
  HEAP32[$0 + 232 >> 2] = HEAP32[$1_1 + 112 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$1_1 + 72 >> 2]);
  $2_1 = HEAP32[6299];
  HEAP32[$0 + 568 >> 2] = $2_1;
  HEAP32[6299] = $2_1 + 1;
  $7_1 = Math_fround(0.0);
  $2_1 = HEAP32[$0 + 204 >> 2];
  $5_1 = HEAPF32[$1_1 >> 2];
  label$3 : {
   if ($5_1 == Math_fround(0.0)) {
    HEAP32[$0 + 204 >> 2] = $2_1 | 1;
    break label$3;
   }
   HEAP32[$0 + 204 >> 2] = $2_1 & -2;
   $7_1 = Math_fround(Math_fround(1.0) / $5_1);
  }
  HEAP32[$0 + 436 >> 2] = 0;
  HEAPF32[$0 + 404 >> 2] = $7_1;
  HEAPF32[$0 + 432 >> 2] = $5_1 * HEAPF32[$0 + 448 >> 2];
  HEAPF32[$0 + 428 >> 2] = $5_1 * HEAPF32[$0 + 444 >> 2];
  HEAPF32[$0 + 424 >> 2] = $5_1 * HEAPF32[$0 + 440 >> 2];
  $5_1 = HEAPF32[$1_1 + 84 >> 2];
  $8_1 = HEAPF32[$1_1 + 80 >> 2];
  $15_1 = HEAPF32[$1_1 + 76 >> 2];
  HEAPF32[$0 + 620 >> 2] = $7_1 * HEAPF32[$0 + 408 >> 2];
  $2_1 = $0 + 624 | 0;
  HEAPF32[$2_1 >> 2] = $7_1 * HEAPF32[$0 + 412 >> 2];
  $3_1 = $0 + 628 | 0;
  HEAPF32[$3_1 >> 2] = $7_1 * HEAPF32[$0 + 416 >> 2];
  $1_1 = $0 + 632 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$0 + 468 >> 2] = 0;
  $16_1 = $15_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $15_1) : Math_fround(0.0);
  HEAPF32[$0 + 456 >> 2] = $16_1;
  $17_1 = $8_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $8_1) : Math_fround(0.0);
  HEAPF32[$0 + 460 >> 2] = $17_1;
  $18_1 = $5_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $5_1) : Math_fround(0.0);
  HEAPF32[$0 + 464 >> 2] = $18_1;
  $5_1 = HEAPF32[$0 + 12 >> 2];
  $8_1 = HEAPF32[$0 + 8 >> 2];
  $15_1 = HEAPF32[$0 + 28 >> 2];
  $19_1 = HEAPF32[$0 + 20 >> 2];
  $20 = HEAPF32[$0 + 24 >> 2];
  $12_1 = HEAPF32[$0 + 44 >> 2];
  $13_1 = HEAPF32[$0 + 36 >> 2];
  $14 = HEAPF32[$0 + 40 >> 2];
  $21 = HEAPF32[$0 + 4 >> 2];
  HEAP32[$0 + 564 >> 2] = 8;
  HEAP32[$0 + 368 >> 2] = 0;
  HEAP32[$0 + 352 >> 2] = 0;
  HEAP32[$0 + 336 >> 2] = 0;
  $9_1 = Math_fround($16_1 * $13_1);
  $10 = Math_fround($17_1 * $14);
  $11 = Math_fround($18_1 * $12_1);
  HEAPF32[$0 + 364 >> 2] = Math_fround(Math_fround($13_1 * $9_1) + Math_fround($14 * $10)) + Math_fround($12_1 * $11);
  HEAPF32[$0 + 360 >> 2] = Math_fround(Math_fround($19_1 * $9_1) + Math_fround($20 * $10)) + Math_fround($15_1 * $11);
  HEAPF32[$0 + 356 >> 2] = Math_fround(Math_fround($21 * $9_1) + Math_fround($8_1 * $10)) + Math_fround($5_1 * $11);
  $9_1 = Math_fround($16_1 * $19_1);
  $10 = Math_fround($17_1 * $20);
  $11 = Math_fround($18_1 * $15_1);
  HEAPF32[$0 + 348 >> 2] = Math_fround(Math_fround($13_1 * $9_1) + Math_fround($14 * $10)) + Math_fround($12_1 * $11);
  HEAPF32[$0 + 344 >> 2] = Math_fround(Math_fround($19_1 * $9_1) + Math_fround($20 * $10)) + Math_fround($15_1 * $11);
  HEAPF32[$0 + 340 >> 2] = Math_fround(Math_fround($21 * $9_1) + Math_fround($8_1 * $10)) + Math_fround($5_1 * $11);
  $9_1 = $13_1;
  $13_1 = Math_fround($16_1 * $21);
  $10 = $14;
  $14 = Math_fround($17_1 * $8_1);
  $11 = $12_1;
  $12_1 = Math_fround($18_1 * $5_1);
  HEAPF32[$0 + 332 >> 2] = Math_fround(Math_fround($9_1 * $13_1) + Math_fround($10 * $14)) + Math_fround($11 * $12_1);
  HEAPF32[$0 + 328 >> 2] = Math_fround(Math_fround($13_1 * $19_1) + Math_fround($14 * $20)) + Math_fround($12_1 * $15_1);
  HEAPF32[$0 + 324 >> 2] = Math_fround(Math_fround($21 * $13_1) + Math_fround($8_1 * $14)) + Math_fround($5_1 * $12_1);
  $4_1 = $0 + 596 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $0 + 588 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $0 + 580 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$0 + 572 >> 2] = 0;
  HEAP32[$0 + 576 >> 2] = 0;
  $5_1 = HEAPF32[$0 + 408 >> 2];
  $8_1 = HEAPF32[$0 + 412 >> 2];
  HEAPF32[$3_1 >> 2] = $7_1 * HEAPF32[$0 + 416 >> 2];
  HEAPF32[$2_1 >> 2] = $7_1 * $8_1;
  HEAPF32[$0 + 620 >> 2] = $7_1 * $5_1;
  HEAP32[$0 + 664 >> 2] = 0;
  $2_1 = $0 + 656 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0 + 648 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $0 = $0 + 640 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $794($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[$3_1 + 8 >> 2] = $2_1;
  HEAPF32[$3_1 + 12 >> 2] = $1_1;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAP32[$0 + 504 >> 2] = HEAP32[($1_1 < Math_fround(0.0) ? $3_1 + 4 | 0 : $1_1 > Math_fround(1.0) ? $3_1 : $3_1 + 12 | 0) >> 2];
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAP32[$0 + 508 >> 2] = HEAP32[($2_1 < Math_fround(0.0) ? $3_1 + 4 | 0 : $2_1 > Math_fround(1.0) ? $3_1 : $3_1 + 8 | 0) >> 2];
 }
 
 function $795($0, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $4_1 = HEAP32[$0 + 204 >> 2];
  label$1 : {
   if ($1_1 == Math_fround(0.0)) {
    HEAP32[$0 + 204 >> 2] = $4_1 | 1;
    break label$1;
   }
   HEAP32[$0 + 204 >> 2] = $4_1 & -2;
   $3_1 = Math_fround(Math_fround(1.0) / $1_1);
  }
  HEAPF32[$0 + 404 >> 2] = $3_1;
  HEAP32[$0 + 436 >> 2] = 0;
  HEAPF32[$0 + 424 >> 2] = HEAPF32[$0 + 440 >> 2] * $1_1;
  HEAPF32[$0 + 432 >> 2] = HEAPF32[$0 + 448 >> 2] * $1_1;
  HEAPF32[$0 + 428 >> 2] = HEAPF32[$0 + 444 >> 2] * $1_1;
  $1_1 = HEAPF32[$2_1 + 8 >> 2];
  $5_1 = HEAPF32[$2_1 + 4 >> 2];
  $6_1 = HEAPF32[$2_1 >> 2];
  HEAPF32[$0 + 620 >> 2] = HEAPF32[$0 + 408 >> 2] * $3_1;
  HEAPF32[$0 + 624 >> 2] = $3_1 * HEAPF32[$0 + 412 >> 2];
  HEAPF32[$0 + 628 >> 2] = $3_1 * HEAPF32[$0 + 416 >> 2];
  HEAP32[$0 + 632 >> 2] = 0;
  HEAP32[$0 + 468 >> 2] = 0;
  HEAPF32[$0 + 456 >> 2] = $6_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $6_1) : Math_fround(0.0);
  HEAPF32[$0 + 460 >> 2] = $5_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $5_1) : Math_fround(0.0);
  HEAPF32[$0 + 464 >> 2] = $1_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $1_1) : Math_fround(0.0);
 }
 
 function $796($0) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0);
  HEAP32[$0 + 368 >> 2] = 0;
  HEAP32[$0 + 352 >> 2] = 0;
  HEAP32[$0 + 336 >> 2] = 0;
  $13_1 = HEAPF32[$0 + 456 >> 2];
  $1_1 = HEAPF32[$0 + 36 >> 2];
  $2_1 = Math_fround($13_1 * $1_1);
  $14 = HEAPF32[$0 + 460 >> 2];
  $3_1 = HEAPF32[$0 + 40 >> 2];
  $4_1 = Math_fround($14 * $3_1);
  $15_1 = HEAPF32[$0 + 464 >> 2];
  $5_1 = HEAPF32[$0 + 44 >> 2];
  $6_1 = Math_fround($15_1 * $5_1);
  HEAPF32[$0 + 364 >> 2] = Math_fround(Math_fround($2_1 * $1_1) + Math_fround($4_1 * $3_1)) + Math_fround($6_1 * $5_1);
  $10 = HEAPF32[$0 + 20 >> 2];
  $11 = HEAPF32[$0 + 24 >> 2];
  $12_1 = HEAPF32[$0 + 28 >> 2];
  HEAPF32[$0 + 360 >> 2] = Math_fround(Math_fround($2_1 * $10) + Math_fround($4_1 * $11)) + Math_fround($6_1 * $12_1);
  $7_1 = $2_1;
  $2_1 = HEAPF32[$0 + 4 >> 2];
  $8_1 = $4_1;
  $4_1 = HEAPF32[$0 + 8 >> 2];
  $9_1 = $6_1;
  $6_1 = HEAPF32[$0 + 12 >> 2];
  HEAPF32[$0 + 356 >> 2] = Math_fround(Math_fround($7_1 * $2_1) + Math_fround($8_1 * $4_1)) + Math_fround($9_1 * $6_1);
  $7_1 = Math_fround($13_1 * $10);
  $8_1 = Math_fround($14 * $11);
  $9_1 = Math_fround($15_1 * $12_1);
  HEAPF32[$0 + 348 >> 2] = Math_fround(Math_fround($1_1 * $7_1) + Math_fround($3_1 * $8_1)) + Math_fround($5_1 * $9_1);
  HEAPF32[$0 + 344 >> 2] = Math_fround(Math_fround($7_1 * $10) + Math_fround($8_1 * $11)) + Math_fround($9_1 * $12_1);
  HEAPF32[$0 + 340 >> 2] = Math_fround(Math_fround($7_1 * $2_1) + Math_fround($8_1 * $4_1)) + Math_fround($9_1 * $6_1);
  $7_1 = $1_1;
  $1_1 = Math_fround($2_1 * $13_1);
  $8_1 = $3_1;
  $3_1 = Math_fround($4_1 * $14);
  $9_1 = $5_1;
  $5_1 = Math_fround($6_1 * $15_1);
  HEAPF32[$0 + 332 >> 2] = Math_fround(Math_fround($7_1 * $1_1) + Math_fround($8_1 * $3_1)) + Math_fround($9_1 * $5_1);
  HEAPF32[$0 + 328 >> 2] = Math_fround(Math_fround($1_1 * $10) + Math_fround($3_1 * $11)) + Math_fround($5_1 * $12_1);
  HEAPF32[$0 + 324 >> 2] = Math_fround(Math_fround($1_1 * $2_1) + Math_fround($3_1 * $4_1)) + Math_fround($5_1 * $6_1);
 }
 
 function $797($0, $1_1, $2_1) {
  $798($0 + 4 | 0, $0 + 372 | 0, $0 + 388 | 0, $1_1, $2_1);
 }
 
 function $798($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0;
  $13_1 = global$0 - 16 | 0;
  global$0 = $13_1;
  $5_1 = HEAPF32[$0 + 52 >> 2];
  $6_1 = HEAPF32[$0 + 56 >> 2];
  $8_1 = HEAPF32[$0 + 48 >> 2];
  $7_1 = HEAPF32[$1_1 >> 2];
  $9_1 = HEAPF32[$1_1 + 4 >> 2];
  $10 = HEAPF32[$1_1 + 8 >> 2];
  HEAP32[$4_1 + 60 >> 2] = 0;
  HEAPF32[$4_1 + 56 >> 2] = $6_1 + Math_fround($10 * $3_1);
  HEAPF32[$4_1 + 52 >> 2] = $5_1 + Math_fround($9_1 * $3_1);
  HEAPF32[$4_1 + 48 >> 2] = $8_1 + Math_fround($7_1 * $3_1);
  $8_1 = HEAPF32[$2_1 >> 2];
  $11 = HEAPF32[$2_1 + 4 >> 2];
  $12_1 = HEAPF32[$2_1 + 8 >> 2];
  $5_1 = Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($11 * $11)) + Math_fround($12_1 * $12_1));
  $5_1 = $5_1 > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_sqrt($5_1)) : Math_fround(0.0);
  $6_1 = Math_fround($5_1 * $3_1) > Math_fround(.7853981852531433) ? Math_fround(Math_fround(.7853981852531433) / $3_1) : $5_1;
  label$1 : {
   if (!!($6_1 < Math_fround(1.0000000474974513e-03))) {
    $5_1 = Math_fround(Math_fround($3_1 * Math_fround(.5)) + Math_fround($6_1 * Math_fround(Math_fround(Math_fround(Math_fround($3_1 * $3_1) * $3_1) * Math_fround(-.02083333395421505)) * $6_1)));
    break label$1;
   }
   $5_1 = Math_fround($493(Math_fround(Math_fround($6_1 * Math_fround(.5)) * $3_1)) / $6_1);
  }
  $1078($0, $13_1);
  $7_1 = HEAPF32[$13_1 + 12 >> 2];
  $9_1 = $494(Math_fround(Math_fround($6_1 * $3_1) * Math_fround(.5)));
  $10 = Math_fround($8_1 * $5_1);
  $14 = HEAPF32[$13_1 >> 2];
  $11 = Math_fround($11 * $5_1);
  $15_1 = HEAPF32[$13_1 + 4 >> 2];
  $5_1 = Math_fround($12_1 * $5_1);
  $12_1 = HEAPF32[$13_1 + 8 >> 2];
  $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $9_1) - Math_fround($10 * $14)) - Math_fround($11 * $15_1)) - Math_fround($5_1 * $12_1));
  $8_1 = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $7_1) + Math_fround($9_1 * $12_1)) + Math_fround($10 * $15_1)) - Math_fround($11 * $14));
  $3_1 = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $14) + Math_fround($10 * $7_1)) + Math_fround($11 * $12_1)) - Math_fround($5_1 * $15_1));
  $5_1 = Math_fround(Math_fround(Math_fround($5_1 * $14) + Math_fround(Math_fround($11 * $7_1) + Math_fround($9_1 * $15_1))) - Math_fround($10 * $12_1));
  $7_1 = Math_fround(Math_fround($6_1 * $6_1) + Math_fround(Math_fround($8_1 * $8_1) + Math_fround(Math_fround($3_1 * $3_1) + Math_fround($5_1 * $5_1))));
  if (!!($7_1 > Math_fround(1.1920928955078125e-07))) {
   $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($7_1)));
   $6_1 = Math_fround($6_1 * $7_1);
   $8_1 = Math_fround($8_1 * $7_1);
   $5_1 = Math_fround($5_1 * $7_1);
   $3_1 = Math_fround($3_1 * $7_1);
   $7_1 = Math_fround(Math_fround($6_1 * $6_1) + Math_fround(Math_fround($8_1 * $8_1) + Math_fround(Math_fround($5_1 * $5_1) + Math_fround($3_1 * $3_1))));
  }
  label$4 : {
   if (!!($7_1 > Math_fround(1.1920928955078125e-07))) {
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAP32[$4_1 + 44 >> 2] = 0;
    HEAP32[$4_1 + 28 >> 2] = 0;
    $9_1 = Math_fround(Math_fround(2.0) / $7_1);
    $7_1 = Math_fround($8_1 * $9_1);
    $10 = Math_fround($5_1 * $7_1);
    $14 = Math_fround($3_1 * $9_1);
    $11 = Math_fround($6_1 * $14);
    HEAPF32[$4_1 + 36 >> 2] = $10 + $11;
    $15_1 = Math_fround($3_1 * $7_1);
    $9_1 = Math_fround($5_1 * $9_1);
    $12_1 = Math_fround($6_1 * $9_1);
    HEAPF32[$4_1 + 32 >> 2] = $15_1 - $12_1;
    HEAPF32[$4_1 + 24 >> 2] = $10 - $11;
    $10 = Math_fround($3_1 * $9_1);
    $6_1 = Math_fround($6_1 * $7_1);
    HEAPF32[$4_1 + 16 >> 2] = $10 + $6_1;
    HEAPF32[$4_1 + 8 >> 2] = $15_1 + $12_1;
    HEAPF32[$4_1 + 4 >> 2] = $10 - $6_1;
    $3_1 = Math_fround($3_1 * $14);
    $5_1 = Math_fround($5_1 * $9_1);
    HEAPF32[$4_1 + 40 >> 2] = Math_fround(1.0) - Math_fround($3_1 + $5_1);
    $6_1 = $3_1;
    $3_1 = Math_fround($8_1 * $7_1);
    HEAPF32[$4_1 + 20 >> 2] = Math_fround(1.0) - Math_fround($6_1 + $3_1);
    HEAPF32[$4_1 >> 2] = Math_fround(1.0) - Math_fround($5_1 + $3_1);
    break label$4;
   }
   $1_1 = HEAP32[$0 + 4 >> 2];
   HEAP32[$4_1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $1_1;
   $2_1 = $0 + 8 | 0;
   $16_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $4_1 + 8 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $16_1;
   $1_1 = HEAP32[$0 + 20 >> 2];
   HEAP32[$4_1 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
   HEAP32[$4_1 + 20 >> 2] = $1_1;
   $2_1 = $0 + 24 | 0;
   $16_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $4_1 + 24 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $16_1;
   $1_1 = HEAP32[$0 + 36 >> 2];
   HEAP32[$4_1 + 32 >> 2] = HEAP32[$0 + 32 >> 2];
   HEAP32[$4_1 + 36 >> 2] = $1_1;
   $0 = $0 + 40 | 0;
   $2_1 = HEAP32[$0 + 4 >> 2];
   $1_1 = $4_1 + 40 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $2_1;
  }
  global$0 = $13_1 + 16 | 0;
 }
 
 function $799($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = Math_fround(0), $11 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  if ($1_1 != Math_fround(0.0)) {
   $2_1 = HEAP32[$0 + 540 >> 2];
   if ($2_1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $0 + 4 | 0)
   }
   HEAP32[$0 + 384 >> 2] = 0;
   $2_1 = $0 + 380 | 0;
   $1_1 = Math_fround(Math_fround(1.0) / $1_1);
   $6_1 = $0 + 60 | 0;
   $7_1 = $0 + 124 | 0;
   HEAPF32[$2_1 >> 2] = $1_1 * Math_fround(HEAPF32[$6_1 >> 2] - HEAPF32[$7_1 >> 2]);
   HEAPF32[$0 + 376 >> 2] = $1_1 * Math_fround(HEAPF32[$0 + 56 >> 2] - HEAPF32[$0 + 120 >> 2]);
   $8_1 = $0 + 52 | 0;
   $9_1 = $0 + 116 | 0;
   HEAPF32[$0 + 372 >> 2] = $1_1 * Math_fround(HEAPF32[$8_1 >> 2] - HEAPF32[$9_1 >> 2]);
   $800($0 + 68 | 0, $0 + 4 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0);
   HEAP32[$0 + 400 >> 2] = 0;
   $3_1 = $0 + 396 | 0;
   $10 = HEAPF32[$5_1 + 12 >> 2];
   HEAPF32[$3_1 >> 2] = $1_1 * Math_fround($10 * HEAPF32[$5_1 + 24 >> 2]);
   HEAPF32[$0 + 392 >> 2] = $1_1 * Math_fround($10 * HEAPF32[$5_1 + 20 >> 2]);
   HEAPF32[$0 + 388 >> 2] = $1_1 * Math_fround($10 * HEAPF32[$5_1 + 16 >> 2]);
   $11 = HEAP32[$2_1 + 4 >> 2];
   $4_1 = $0 + 140 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $11;
   $2_1 = HEAP32[$0 + 376 >> 2];
   HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 372 >> 2];
   HEAP32[$0 + 136 >> 2] = $2_1;
   $2_1 = HEAP32[$0 + 392 >> 2];
   HEAP32[$0 + 148 >> 2] = HEAP32[$0 + 388 >> 2];
   HEAP32[$0 + 152 >> 2] = $2_1;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 156 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $2_1 = HEAP32[$0 + 8 >> 2];
   HEAP32[$0 + 68 >> 2] = HEAP32[$0 + 4 >> 2];
   HEAP32[$0 + 72 >> 2] = $2_1;
   $3_1 = $0 + 12 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 76 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $0 + 20 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 84 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $0 + 28 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 92 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $0 + 44 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 108 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $2_1 = $0 + 100 | 0;
   $0 = $0 + 36 | 0;
   $3_1 = HEAP32[$0 + 4 >> 2];
   HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   $0 = HEAP32[$6_1 + 4 >> 2];
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $0;
   $0 = HEAP32[$8_1 + 4 >> 2];
   HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $0;
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $800($0, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0);
  $5_1 = global$0 + -64 | 0;
  global$0 = $5_1;
  $15_1 = HEAPF32[$1_1 + 24 >> 2];
  $16_1 = HEAPF32[$1_1 + 20 >> 2];
  $17_1 = HEAPF32[$1_1 + 40 >> 2];
  $18_1 = HEAPF32[$1_1 + 36 >> 2];
  $9_1 = HEAPF32[$0 + 40 >> 2];
  $10 = HEAPF32[$0 + 20 >> 2];
  $13_1 = HEAPF32[$0 + 36 >> 2];
  $11 = HEAPF32[$0 + 24 >> 2];
  $19_1 = HEAPF32[$1_1 + 8 >> 2];
  $20 = HEAPF32[$1_1 >> 2];
  $21 = HEAPF32[$1_1 + 4 >> 2];
  $22_1 = HEAPF32[$1_1 + 16 >> 2];
  $23_1 = HEAPF32[$1_1 + 32 >> 2];
  $6_1 = HEAPF32[$0 + 8 >> 2];
  $7_1 = HEAPF32[$0 + 4 >> 2];
  $14 = HEAPF32[$0 + 32 >> 2];
  $12_1 = HEAPF32[$0 + 16 >> 2];
  $8_1 = HEAPF32[$0 >> 2];
  HEAP32[$5_1 + 60 >> 2] = 0;
  HEAP32[$5_1 + 44 >> 2] = 0;
  $25 = Math_fround(Math_fround($10 * $9_1) - Math_fround($11 * $13_1));
  $26_1 = Math_fround(Math_fround($11 * $14) - Math_fround($9_1 * $12_1));
  $27_1 = Math_fround(Math_fround($13_1 * $12_1) - Math_fround($10 * $14));
  $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround($8_1 * $25) + Math_fround($7_1 * $26_1)) + Math_fround($6_1 * $27_1)));
  $24_1 = Math_fround(Math_fround(Math_fround($11 * $7_1) - Math_fround($10 * $6_1)) * $4_1);
  $11 = Math_fround(Math_fround(Math_fround($12_1 * $6_1) - Math_fround($11 * $8_1)) * $4_1);
  $10 = Math_fround(Math_fround(Math_fround($10 * $8_1) - Math_fround($12_1 * $7_1)) * $4_1);
  HEAPF32[$5_1 + 56 >> 2] = Math_fround(Math_fround($23_1 * $24_1) + Math_fround($18_1 * $11)) + Math_fround($17_1 * $10);
  $12_1 = Math_fround(Math_fround(Math_fround($13_1 * $6_1) - Math_fround($9_1 * $7_1)) * $4_1);
  $6_1 = Math_fround(Math_fround(Math_fround($9_1 * $8_1) - Math_fround($14 * $6_1)) * $4_1);
  $7_1 = Math_fround(Math_fround(Math_fround($14 * $7_1) - Math_fround($13_1 * $8_1)) * $4_1);
  HEAPF32[$5_1 + 52 >> 2] = Math_fround(Math_fround($23_1 * $12_1) + Math_fround($18_1 * $6_1)) + Math_fround($17_1 * $7_1);
  HEAPF32[$5_1 + 40 >> 2] = Math_fround(Math_fround($24_1 * $22_1) + Math_fround($11 * $16_1)) + Math_fround($10 * $15_1);
  HEAPF32[$5_1 + 36 >> 2] = Math_fround(Math_fround($12_1 * $22_1) + Math_fround($6_1 * $16_1)) + Math_fround($7_1 * $15_1);
  HEAP32[$5_1 + 28 >> 2] = 0;
  $8_1 = Math_fround($25 * $4_1);
  $9_1 = Math_fround($26_1 * $4_1);
  $4_1 = Math_fround($27_1 * $4_1);
  HEAPF32[$5_1 + 48 >> 2] = Math_fround(Math_fround($23_1 * $8_1) + Math_fround($18_1 * $9_1)) + Math_fround($17_1 * $4_1);
  HEAPF32[$5_1 + 32 >> 2] = Math_fround(Math_fround($8_1 * $22_1) + Math_fround($9_1 * $16_1)) + Math_fround($4_1 * $15_1);
  HEAPF32[$5_1 + 24 >> 2] = Math_fround($19_1 * $10) + Math_fround(Math_fround($20 * $24_1) + Math_fround($21 * $11));
  HEAPF32[$5_1 + 20 >> 2] = Math_fround($19_1 * $7_1) + Math_fround(Math_fround($20 * $12_1) + Math_fround($21 * $6_1));
  HEAPF32[$5_1 + 16 >> 2] = Math_fround($19_1 * $4_1) + Math_fround(Math_fround($20 * $8_1) + Math_fround($21 * $9_1));
  $1078($5_1 + 16 | 0, $5_1);
  $8_1 = HEAPF32[$5_1 >> 2];
  $7_1 = HEAPF32[$5_1 + 4 >> 2];
  $6_1 = HEAPF32[$5_1 + 8 >> 2];
  $9_1 = HEAPF32[$5_1 + 12 >> 2];
  $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($7_1 * $7_1)) + Math_fround($6_1 * $6_1)) + Math_fround($9_1 * $9_1)))));
  $6_1 = Math_fround($6_1 * $4_1);
  HEAPF32[$5_1 + 8 >> 2] = $6_1;
  $7_1 = Math_fround($7_1 * $4_1);
  HEAPF32[$5_1 + 4 >> 2] = $7_1;
  $8_1 = Math_fround($8_1 * $4_1);
  HEAPF32[$5_1 >> 2] = $8_1;
  $4_1 = Math_fround($9_1 * $4_1);
  HEAPF32[$5_1 + 12 >> 2] = $4_1;
  $4_1 = $791(Math_fround(Math_min(Math_fround(Math_max($4_1, Math_fround(-1.0))), Math_fround(1.0))));
  HEAPF32[$3_1 >> 2] = $4_1 + $4_1;
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAPF32[$2_1 + 8 >> 2] = $6_1;
  HEAPF32[$2_1 + 4 >> 2] = $7_1;
  HEAPF32[$2_1 >> 2] = $8_1;
  $4_1 = Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($7_1 * $7_1)) + Math_fround($6_1 * $6_1));
  label$1 : {
   if (!!($4_1 < Math_fround(1.4210854715202004e-14))) {
    HEAP32[$2_1 + 8 >> 2] = 0;
    HEAP32[$2_1 + 12 >> 2] = 0;
    HEAP32[$2_1 >> 2] = 1065353216;
    HEAP32[$2_1 + 4 >> 2] = 0;
    break label$1;
   }
   $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($4_1)));
   HEAPF32[$2_1 + 8 >> 2] = $6_1 * $4_1;
   HEAPF32[$2_1 + 4 >> 2] = $7_1 * $4_1;
   HEAPF32[$2_1 >> 2] = $8_1 * $4_1;
  }
  global$0 = $5_1 - -64 | 0;
 }
 
 function $801($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $2_1 = HEAPF32[$0 + 404 >> 2];
  if ($2_1 != Math_fround(0.0)) {
   $4_1 = HEAPF32[$1_1 >> 2];
   $5_1 = HEAPF32[$1_1 + 4 >> 2];
   $6_1 = HEAPF32[$1_1 + 8 >> 2];
   HEAP32[$0 + 436 >> 2] = 0;
   $2_1 = Math_fround(Math_fround(1.0) / $2_1);
   HEAPF32[$0 + 432 >> 2] = $6_1 * $2_1;
   HEAPF32[$0 + 428 >> 2] = $2_1 * $5_1;
   HEAPF32[$0 + 424 >> 2] = $2_1 * $4_1;
  }
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 440 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 444 >> 2] = $3_1;
  $1_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 448 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3_1;
 }
 
 function $802($0, $1_1) {
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0);
  $9_1 = HEAPF32[$0 + 504 >> 2];
  $4_1 = $790(Math_fround(Math_fround(1.0) - $9_1), $1_1);
  $6_1 = Math_fround($4_1 * HEAPF32[$0 + 372 >> 2]);
  HEAPF32[$0 + 372 >> 2] = $6_1;
  $2_1 = $0 + 376 | 0;
  $3_1 = Math_fround($4_1 * HEAPF32[$2_1 >> 2]);
  HEAPF32[$2_1 >> 2] = $3_1;
  $2_1 = $0 + 380 | 0;
  $4_1 = Math_fround($4_1 * HEAPF32[$2_1 >> 2]);
  HEAPF32[$2_1 >> 2] = $4_1;
  $10 = HEAPF32[$0 + 508 >> 2];
  $5_1 = $790(Math_fround(Math_fround(1.0) - $10), $1_1);
  $1_1 = Math_fround($5_1 * HEAPF32[$0 + 388 >> 2]);
  HEAPF32[$0 + 388 >> 2] = $1_1;
  $2_1 = $0 + 392 | 0;
  $7_1 = Math_fround($5_1 * HEAPF32[$2_1 >> 2]);
  HEAPF32[$2_1 >> 2] = $7_1;
  $2_1 = $0 + 396 | 0;
  $5_1 = Math_fround($5_1 * HEAPF32[$2_1 >> 2]);
  HEAPF32[$2_1 >> 2] = $5_1;
  label$1 : {
   if (!HEAPU8[$0 + 512 | 0]) {
    break label$1
   }
   if (!(Math_fround(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($7_1 * $7_1)) + Math_fround($5_1 * $5_1)) < HEAPF32[$0 + 524 >> 2] ^ 1 | Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($3_1 * $3_1)) + Math_fround($4_1 * $4_1)) < HEAPF32[$0 + 520 >> 2] ^ 1)) {
    $8_1 = HEAPF32[$0 + 516 >> 2];
    $5_1 = Math_fround($5_1 * $8_1);
    HEAPF32[$0 + 396 >> 2] = $5_1;
    $7_1 = Math_fround($7_1 * $8_1);
    HEAPF32[$0 + 392 >> 2] = $7_1;
    $1_1 = Math_fround($1_1 * $8_1);
    HEAPF32[$0 + 388 >> 2] = $1_1;
    $4_1 = Math_fround($4_1 * $8_1);
    HEAPF32[$0 + 380 >> 2] = $4_1;
    $3_1 = Math_fround($3_1 * $8_1);
    HEAPF32[$0 + 376 >> 2] = $3_1;
    $6_1 = Math_fround($6_1 * $8_1);
    HEAPF32[$0 + 372 >> 2] = $6_1;
   }
   $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($3_1 * $3_1)) + Math_fround($4_1 * $4_1))));
   label$3 : {
    if (!($8_1 < $9_1)) {
     break label$3
    }
    if (!!($8_1 > Math_fround(.004999999888241291))) {
     $9_1 = $4_1;
     $4_1 = Math_fround(Math_fround(1.0) / $8_1);
     HEAPF32[$0 + 380 >> 2] = $9_1 - Math_fround(Math_fround($9_1 * $4_1) * Math_fround(.004999999888241291));
     HEAPF32[$0 + 376 >> 2] = $3_1 - Math_fround(Math_fround($3_1 * $4_1) * Math_fround(.004999999888241291));
     HEAPF32[$0 + 372 >> 2] = $6_1 - Math_fround(Math_fround($6_1 * $4_1) * Math_fround(.004999999888241291));
     break label$3;
    }
    $2_1 = $0 + 372 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = $2_1 + 8 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
   }
   $3_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($7_1 * $7_1)) + Math_fround($5_1 * $5_1))));
   if (!($3_1 < $10)) {
    break label$1
   }
   if (!!($3_1 > Math_fround(.004999999888241291))) {
    $3_1 = Math_fround(Math_fround(1.0) / $3_1);
    HEAPF32[$0 + 396 >> 2] = $5_1 - Math_fround(Math_fround($5_1 * $3_1) * Math_fround(.004999999888241291));
    HEAPF32[$0 + 392 >> 2] = $7_1 - Math_fround(Math_fround($7_1 * $3_1) * Math_fround(.004999999888241291));
    HEAPF32[$0 + 388 >> 2] = $1_1 - Math_fround(Math_fround($1_1 * $3_1) * Math_fround(.004999999888241291));
    return;
   }
   $0 = $0 + 388 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $0 + 8 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
  }
 }
 
 function $803($0) {
  var $1_1 = 0;
  if (!(HEAPU8[$0 + 204 | 0] & 3)) {
   HEAPF32[$0 + 472 >> 2] = Math_fround(HEAPF32[$0 + 424 >> 2] * HEAPF32[$0 + 408 >> 2]) + HEAPF32[$0 + 472 >> 2];
   $1_1 = $0 + 476 | 0;
   HEAPF32[$1_1 >> 2] = Math_fround(HEAPF32[$0 + 428 >> 2] * HEAPF32[$0 + 412 >> 2]) + HEAPF32[$1_1 >> 2];
   $1_1 = $0 + 480 | 0;
   HEAPF32[$1_1 >> 2] = Math_fround(HEAPF32[$0 + 432 >> 2] * HEAPF32[$0 + 416 >> 2]) + HEAPF32[$1_1 >> 2];
  }
 }
 
 function $804($0, $1_1) {
  $805($0, $1_1);
 }
 
 function $805($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0;
  label$1 : {
   if (HEAPU8[$0 + 204 | 0] & 2) {
    $2_1 = HEAP32[$0 + 8 >> 2];
    HEAP32[$0 + 68 >> 2] = HEAP32[$0 + 4 >> 2];
    HEAP32[$0 + 72 >> 2] = $2_1;
    $3_1 = $0 + 12 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0 + 76 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0 + 20 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0 + 84 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0 + 28 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0 + 92 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0 + 36 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0 + 100 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0 + 44 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0 + 108 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0 + 52 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0 + 116 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0 + 60 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0 + 124 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    break label$1;
   }
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$0 + 68 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0 + 72 >> 2] = $2_1;
   $3_1 = $1_1 + 8 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 76 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $1_1 + 24 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 92 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = HEAP32[$1_1 + 20 >> 2];
   $2_1 = $0 + 84 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   $3_1 = HEAP32[$1_1 + 36 >> 2];
   $2_1 = $0 + 100 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   $3_1 = $1_1 + 40 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 108 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $1_1 + 56 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0 + 124 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = HEAP32[$1_1 + 52 >> 2];
   $2_1 = $0 + 116 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
  }
  $2_1 = HEAP32[$0 + 392 >> 2];
  HEAP32[$0 + 148 >> 2] = HEAP32[$0 + 388 >> 2];
  HEAP32[$0 + 152 >> 2] = $2_1;
  $2_1 = HEAP32[$0 + 376 >> 2];
  HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 372 >> 2];
  HEAP32[$0 + 136 >> 2] = $2_1;
  $3_1 = $0 + 396 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 156 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $0 + 380 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 140 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $4_1 = $1_1 + 8 | 0;
  $14 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $0 + 12 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $14;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 8 >> 2] = $3_1;
  $14 = $1_1 + 24 | 0;
  $6_1 = HEAP32[$14 + 4 >> 2];
  $3_1 = $0 + 28 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $6_1;
  $6_1 = HEAP32[$1_1 + 20 >> 2];
  $4_1 = $0 + 20 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $5_1 = $1_1 + 40 | 0;
  $10 = HEAP32[$5_1 + 4 >> 2];
  $14 = $0 + 44 | 0;
  $6_1 = $14;
  HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $10;
  $10 = HEAP32[$1_1 + 36 >> 2];
  $6_1 = $0 + 36 | 0;
  $5_1 = $6_1;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $10;
  $10 = $1_1 + 56 | 0;
  $24_1 = HEAP32[$10 + 4 >> 2];
  $5_1 = $0 + 60 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $24_1;
  $10 = HEAP32[$1_1 + 52 >> 2];
  $5_1 = $0 + 52 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $10;
  $15_1 = HEAPF32[$0 + 8 >> 2];
  $16_1 = HEAPF32[$2_1 >> 2];
  $17_1 = HEAPF32[$3_1 >> 2];
  $18_1 = HEAPF32[$4_1 >> 2];
  $19_1 = HEAPF32[$0 + 24 >> 2];
  $11 = HEAPF32[$14 >> 2];
  $21 = HEAPF32[$0 + 464 >> 2];
  $12_1 = HEAPF32[$6_1 >> 2];
  $13_1 = HEAPF32[$0 + 40 >> 2];
  $22_1 = HEAPF32[$0 + 460 >> 2];
  $20 = HEAPF32[$0 + 4 >> 2];
  $23_1 = HEAPF32[$0 + 456 >> 2];
  HEAP32[$0 + 368 >> 2] = 0;
  HEAP32[$0 + 352 >> 2] = 0;
  HEAP32[$0 + 336 >> 2] = 0;
  $7_1 = Math_fround($23_1 * $12_1);
  $8_1 = Math_fround($22_1 * $13_1);
  $9_1 = Math_fround($21 * $11);
  HEAPF32[$0 + 364 >> 2] = Math_fround(Math_fround($12_1 * $7_1) + Math_fround($13_1 * $8_1)) + Math_fround($11 * $9_1);
  HEAPF32[$0 + 360 >> 2] = Math_fround(Math_fround($18_1 * $7_1) + Math_fround($19_1 * $8_1)) + Math_fround($17_1 * $9_1);
  HEAPF32[$0 + 356 >> 2] = Math_fround(Math_fround($20 * $7_1) + Math_fround($15_1 * $8_1)) + Math_fround($16_1 * $9_1);
  $7_1 = Math_fround($23_1 * $18_1);
  $8_1 = Math_fround($22_1 * $19_1);
  $9_1 = Math_fround($21 * $17_1);
  HEAPF32[$0 + 348 >> 2] = Math_fround(Math_fround($12_1 * $7_1) + Math_fround($13_1 * $8_1)) + Math_fround($11 * $9_1);
  HEAPF32[$0 + 344 >> 2] = Math_fround(Math_fround($18_1 * $7_1) + Math_fround($19_1 * $8_1)) + Math_fround($17_1 * $9_1);
  HEAPF32[$0 + 340 >> 2] = Math_fround(Math_fround($20 * $7_1) + Math_fround($15_1 * $8_1)) + Math_fround($16_1 * $9_1);
  $7_1 = $12_1;
  $12_1 = Math_fround($20 * $23_1);
  $8_1 = $13_1;
  $13_1 = Math_fround($15_1 * $22_1);
  $9_1 = $11;
  $11 = Math_fround($16_1 * $21);
  HEAPF32[$0 + 332 >> 2] = Math_fround(Math_fround($7_1 * $12_1) + Math_fround($8_1 * $13_1)) + Math_fround($9_1 * $11);
  HEAPF32[$0 + 328 >> 2] = Math_fround(Math_fround($12_1 * $18_1) + Math_fround($13_1 * $19_1)) + Math_fround($11 * $17_1);
  HEAPF32[$0 + 324 >> 2] = Math_fround(Math_fround($20 * $12_1) + Math_fround($15_1 * $13_1)) + Math_fround($16_1 * $11);
 }
 
 function $806($0, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0);
  HEAP32[$0 + 12 >> 2] = 0;
  $4_1 = HEAPF32[$1_1 + 388 >> 2];
  $3_1 = HEAPF32[$1_1 + 456 >> 2];
  $13_1 = $3_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3_1) : Math_fround(0.0);
  $14 = HEAPF32[$1_1 + 20 >> 2];
  $5_1 = Math_fround($13_1 * $14);
  $8_1 = HEAPF32[$1_1 + 4 >> 2];
  $3_1 = HEAPF32[$1_1 + 460 >> 2];
  $19_1 = $3_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3_1) : Math_fround(0.0);
  $15_1 = HEAPF32[$1_1 + 24 >> 2];
  $9_1 = Math_fround($19_1 * $15_1);
  $10 = HEAPF32[$1_1 + 8 >> 2];
  $3_1 = HEAPF32[$1_1 + 464 >> 2];
  $20 = $3_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3_1) : Math_fround(0.0);
  $16_1 = HEAPF32[$1_1 + 28 >> 2];
  $11 = Math_fround($20 * $16_1);
  $17_1 = HEAPF32[$1_1 + 12 >> 2];
  $3_1 = HEAPF32[$1_1 + 392 >> 2];
  $12_1 = Math_fround(Math_fround($4_1 * Math_fround(Math_fround(Math_fround($5_1 * $8_1) + Math_fround($9_1 * $10)) + Math_fround($11 * $17_1))) + Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $14) + Math_fround($9_1 * $15_1)) + Math_fround($11 * $16_1)) * $3_1));
  $18_1 = HEAPF32[$1_1 + 36 >> 2];
  $6_1 = $9_1;
  $9_1 = HEAPF32[$1_1 + 40 >> 2];
  $7_1 = $11;
  $11 = HEAPF32[$1_1 + 44 >> 2];
  $6_1 = Math_fround(Math_fround(Math_fround($5_1 * $18_1) + Math_fround($6_1 * $9_1)) + Math_fround($7_1 * $11));
  $5_1 = HEAPF32[$1_1 + 396 >> 2];
  $21 = Math_fround($12_1 + Math_fround($6_1 * $5_1));
  $7_1 = Math_fround($13_1 * $8_1);
  $12_1 = Math_fround($19_1 * $10);
  $6_1 = Math_fround($20 * $17_1);
  $12_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $8_1) + Math_fround($12_1 * $10)) + Math_fround($6_1 * $17_1)) * $4_1) + Math_fround($3_1 * Math_fround(Math_fround(Math_fround($7_1 * $14) + Math_fround($12_1 * $15_1)) + Math_fround($6_1 * $16_1)))) + Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $18_1) + Math_fround($12_1 * $9_1)) + Math_fround($6_1 * $11)) * $5_1));
  $7_1 = Math_fround(Math_fround($4_1 * $21) - Math_fround($3_1 * $12_1));
  HEAPF32[$0 + 8 >> 2] = $7_1;
  $6_1 = $4_1;
  $4_1 = Math_fround($13_1 * $18_1);
  $13_1 = Math_fround($8_1 * $4_1);
  $8_1 = Math_fround($19_1 * $9_1);
  $13_1 = Math_fround($13_1 + Math_fround($10 * $8_1));
  $10 = Math_fround($20 * $11);
  $14 = Math_fround(Math_fround(Math_fround($6_1 * Math_fround($13_1 + Math_fround($17_1 * $10))) + Math_fround($3_1 * Math_fround(Math_fround(Math_fround($4_1 * $14) + Math_fround($8_1 * $15_1)) + Math_fround($10 * $16_1)))) + Math_fround($5_1 * Math_fround(Math_fround(Math_fround($4_1 * $18_1) + Math_fround($8_1 * $9_1)) + Math_fround($10 * $11))));
  $4_1 = Math_fround(Math_fround($5_1 * $12_1) - Math_fround($6_1 * $14));
  HEAPF32[$0 + 4 >> 2] = $4_1;
  $3_1 = Math_fround(Math_fround($3_1 * $14) - Math_fround($5_1 * $21));
  HEAPF32[$0 >> 2] = $3_1;
  $5_1 = Math_fround(Math_fround($7_1 * $7_1) + Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1)));
  if (!!($5_1 > Math_fround($2_1 * $2_1))) {
   $2_1 = Math_fround(Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($5_1))) * $2_1);
   HEAPF32[$0 + 8 >> 2] = $7_1 * $2_1;
   HEAPF32[$0 + 4 >> 2] = $4_1 * $2_1;
   HEAPF32[$0 >> 2] = $3_1 * $2_1;
  }
 }
 
 function $807($0, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0);
  $20 = global$0 - 16 | 0;
  global$0 = $20;
  $5_1 = HEAPF32[$1_1 + 464 >> 2];
  $7_1 = HEAPF32[$1_1 + 460 >> 2];
  $22_1 = HEAPF32[$1_1 + 396 >> 2];
  $23_1 = HEAPF32[$1_1 + 392 >> 2];
  $8_1 = HEAPF32[$1_1 + 456 >> 2];
  $24_1 = HEAPF32[$1_1 + 388 >> 2];
  $1078($1_1 + 4 | 0, $20);
  HEAP32[$0 + 12 >> 2] = 0;
  $9_1 = HEAPF32[$20 >> 2];
  $10 = HEAPF32[$20 + 12 >> 2];
  $11 = HEAPF32[$20 + 8 >> 2];
  $4_1 = Math_fround(Math_fround($22_1 * $9_1) + Math_fround(Math_fround($23_1 * $10) - Math_fround($24_1 * $11)));
  $12_1 = HEAPF32[$20 + 4 >> 2];
  $17_1 = Math_fround(Math_fround(Math_fround($24_1 * $9_1) + Math_fround($23_1 * $12_1)) + Math_fround($22_1 * $11));
  $13_1 = Math_fround(Math_fround($23_1 * $11) + Math_fround(Math_fround($24_1 * $10) - Math_fround($22_1 * $12_1)));
  $18_1 = Math_fround(Math_fround($24_1 * $12_1) + Math_fround(Math_fround($22_1 * $10) - Math_fround($23_1 * $9_1)));
  $6_1 = Math_fround(Math_fround(Math_fround($11 * $4_1) + Math_fround(Math_fround($9_1 * $17_1) + Math_fround($10 * $13_1))) - Math_fround($12_1 * $18_1));
  $14 = Math_fround(Math_fround(Math_fround($12_1 * $13_1) + Math_fround(Math_fround($11 * $17_1) + Math_fround($10 * $18_1))) - Math_fround($9_1 * $4_1));
  $15_1 = Math_fround($14 * Math_fround(0.0));
  $16_1 = Math_fround($6_1 * Math_fround(0.0));
  $3_1 = $7_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $7_1) : Math_fround(0.0);
  $4_1 = Math_fround(Math_fround(Math_fround($9_1 * $18_1) + Math_fround(Math_fround($12_1 * $17_1) + Math_fround($10 * $4_1))) - Math_fround($11 * $13_1));
  $17_1 = Math_fround($15_1 + Math_fround($16_1 + Math_fround($3_1 * $4_1)));
  $8_1 = $8_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $8_1) : Math_fround(0.0);
  $13_1 = Math_fround($4_1 * Math_fround(0.0));
  $18_1 = Math_fround($15_1 + Math_fround(Math_fround($6_1 * $8_1) + $13_1));
  $7_1 = Math_fround(Math_fround(Math_fround($6_1 * $17_1) - Math_fround($4_1 * $18_1)) * $2_1);
  $29_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($16_1 - Math_fround($8_1 * $4_1)) + Math_fround(0.0)) + $17_1) * $2_1) + Math_fround(0.0));
  $5_1 = $5_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $5_1) : Math_fround(0.0);
  $25 = Math_fround(Math_fround($5_1 * $14) + Math_fround($16_1 + $13_1));
  $26_1 = Math_fround(Math_fround(Math_fround(Math_fround($13_1 + Math_fround(Math_fround(0.0) - Math_fround($3_1 * $14))) + $25) * $2_1) + Math_fround(0.0));
  $27_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15_1 + Math_fround(0.0)) - Math_fround($5_1 * $6_1)) + $18_1) * $2_1) + Math_fround(0.0));
  $21 = Math_fround($6_1 * Math_fround(-0.0));
  $15_1 = Math_fround($3_1 + Math_fround(Math_fround($21 + Math_fround(Math_fround($3_1 * Math_fround(0.0)) + $15_1)) * $2_1));
  $19_1 = Math_fround($14 * Math_fround(-0.0));
  $28_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $4_1) + Math_fround($19_1 + Math_fround(0.0))) - $17_1) * $2_1) + Math_fround(0.0));
  $30 = Math_fround(Math_fround($26_1 * $27_1) - Math_fround($15_1 * $28_1));
  $13_1 = Math_fround($8_1 + Math_fround(Math_fround($13_1 + Math_fround(Math_fround($8_1 * Math_fround(0.0)) + $19_1)) * $2_1));
  $19_1 = Math_fround($4_1 * Math_fround(-0.0));
  $5_1 = Math_fround($5_1 + Math_fround(Math_fround(Math_fround($5_1 * Math_fround(0.0)) + Math_fround($19_1 + $16_1)) * $2_1));
  $16_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($19_1 + Math_fround($3_1 * $6_1)) + Math_fround(0.0)) - $18_1) * $2_1) + Math_fround(0.0));
  $19_1 = Math_fround(Math_fround($15_1 * $5_1) - Math_fround($16_1 * $27_1));
  $21 = Math_fround(Math_fround(Math_fround(Math_fround($21 + Math_fround(Math_fround($8_1 * $14) + Math_fround(0.0))) - $25) * $2_1) + Math_fround(0.0));
  $31_1 = Math_fround(Math_fround($16_1 * $28_1) - Math_fround($5_1 * $26_1));
  $3_1 = Math_fround(Math_fround($29_1 * $30) + Math_fround(Math_fround($13_1 * $19_1) + Math_fround($21 * $31_1)));
  $8_1 = Math_fround(Math_abs($3_1)) > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_fround(1.0) / $3_1) : $3_1;
  $3_1 = Math_fround(Math_fround(Math_fround($4_1 * $25) - Math_fround($14 * $17_1)) * $2_1);
  $2_1 = Math_fround(Math_fround(Math_fround($14 * $18_1) - Math_fround($6_1 * $25)) * $2_1);
  $6_1 = Math_fround($6_1 - Math_fround(Math_fround(Math_fround($7_1 * $30) + Math_fround(Math_fround($3_1 * $19_1) + Math_fround($2_1 * $31_1))) * $8_1));
  $4_1 = Math_fround($4_1 - Math_fround(Math_fround(Math_fround($29_1 * Math_fround(Math_fround($27_1 * $3_1) - Math_fround($28_1 * $2_1))) + Math_fround(Math_fround($13_1 * Math_fround(Math_fround($5_1 * $2_1) - Math_fround($27_1 * $7_1))) + Math_fround($21 * Math_fround(Math_fround($28_1 * $7_1) - Math_fround($5_1 * $3_1))))) * $8_1));
  $2_1 = Math_fround($14 - Math_fround(Math_fround(Math_fround($29_1 * Math_fround(Math_fround($26_1 * $2_1) - Math_fround($15_1 * $3_1))) + Math_fround(Math_fround($13_1 * Math_fround(Math_fround($15_1 * $7_1) - Math_fround($16_1 * $2_1))) + Math_fround($21 * Math_fround(Math_fround($16_1 * $3_1) - Math_fround($26_1 * $7_1))))) * $8_1));
  $14 = Math_fround(Math_fround(Math_fround($11 * $6_1) + Math_fround($10 * $4_1)) - Math_fround($9_1 * $2_1));
  $7_1 = Math_fround(Math_fround(Math_fround($10 * $2_1) + Math_fround($9_1 * $4_1)) - Math_fround($12_1 * $6_1));
  $3_1 = Math_fround(Math_fround(Math_fround($6_1 * Math_fround(-$9_1)) - Math_fround($12_1 * $4_1)) - Math_fround($11 * $2_1));
  $2_1 = Math_fround(Math_fround(Math_fround($10 * $6_1) + Math_fround($12_1 * $2_1)) - Math_fround($11 * $4_1));
  HEAPF32[$0 + 8 >> 2] = Math_fround(Math_fround($9_1 * $14) + Math_fround(Math_fround(Math_fround($10 * $7_1) - Math_fround($11 * $3_1)) - Math_fround($12_1 * $2_1))) - $22_1;
  HEAPF32[$0 + 4 >> 2] = Math_fround(Math_fround($11 * $2_1) + Math_fround(Math_fround(Math_fround($10 * $14) - Math_fround($12_1 * $3_1)) - Math_fround($9_1 * $7_1))) - $23_1;
  HEAPF32[$0 >> 2] = Math_fround(Math_fround($12_1 * $7_1) + Math_fround(Math_fround(Math_fround($10 * $2_1) - Math_fround($9_1 * $3_1)) - Math_fround($11 * $14))) - $24_1;
  global$0 = $20 + 16 | 0;
 }
 
 function $808($0, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0);
  HEAP32[$0 + 12 >> 2] = 0;
  $3_1 = HEAPF32[$1_1 + 456 >> 2];
  $23_1 = $3_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3_1) : Math_fround(0.0);
  $12_1 = HEAPF32[$1_1 + 36 >> 2];
  $21 = Math_fround($23_1 * $12_1);
  $13_1 = HEAPF32[$1_1 + 4 >> 2];
  $3_1 = HEAPF32[$1_1 + 460 >> 2];
  $7_1 = $3_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3_1) : Math_fround(0.0);
  $17_1 = HEAPF32[$1_1 + 40 >> 2];
  $24_1 = Math_fround($7_1 * $17_1);
  $5_1 = HEAPF32[$1_1 + 8 >> 2];
  $3_1 = HEAPF32[$1_1 + 464 >> 2];
  $14 = $3_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3_1) : Math_fround(0.0);
  $8_1 = HEAPF32[$1_1 + 44 >> 2];
  $26_1 = Math_fround($14 * $8_1);
  $4_1 = HEAPF32[$1_1 + 12 >> 2];
  $6_1 = Math_fround(Math_fround(Math_fround($21 * $13_1) + Math_fround($24_1 * $5_1)) + Math_fround($26_1 * $4_1));
  $3_1 = HEAPF32[$1_1 + 388 >> 2];
  $9_1 = HEAPF32[$1_1 + 20 >> 2];
  $18_1 = Math_fround($23_1 * $9_1);
  $10 = HEAPF32[$1_1 + 24 >> 2];
  $22_1 = Math_fround($7_1 * $10);
  $11 = HEAPF32[$1_1 + 28 >> 2];
  $19_1 = Math_fround($14 * $11);
  $25 = Math_fround(Math_fround(Math_fround($18_1 * $13_1) + Math_fround($22_1 * $5_1)) + Math_fround($19_1 * $4_1));
  $27_1 = Math_fround($3_1 * $25);
  $15_1 = HEAPF32[$1_1 + 392 >> 2];
  $20 = Math_fround(Math_fround(Math_fround($18_1 * $9_1) + Math_fround($22_1 * $10)) + Math_fround($19_1 * $11));
  $16_1 = HEAPF32[$1_1 + 396 >> 2];
  $22_1 = Math_fround(Math_fround(Math_fround($18_1 * $12_1) + Math_fround($22_1 * $17_1)) + Math_fround($19_1 * $8_1));
  $29_1 = Math_fround($16_1 * $22_1);
  $18_1 = Math_fround(Math_fround($27_1 + Math_fround($15_1 * $20)) + $29_1);
  $28_1 = $27_1;
  $19_1 = Math_fround($23_1 * $13_1);
  $27_1 = Math_fround($7_1 * $5_1);
  $14 = Math_fround($14 * $4_1);
  $5_1 = Math_fround(Math_fround(Math_fround($19_1 * $13_1) + Math_fround($27_1 * $5_1)) + Math_fround($14 * $4_1));
  $23_1 = Math_fround($6_1 + Math_fround(Math_fround(Math_fround(Math_fround($6_1 * Math_fround(0.0)) + Math_fround($28_1 - Math_fround($15_1 * $5_1))) + $18_1) * $2_1));
  $7_1 = Math_fround(Math_fround(Math_fround($19_1 * $9_1) + Math_fround($27_1 * $10)) + Math_fround($14 * $11));
  $28_1 = Math_fround($3_1 * $6_1);
  $10 = Math_fround(Math_fround(Math_fround($21 * $9_1) + Math_fround($24_1 * $10)) + Math_fround($26_1 * $11));
  $9_1 = Math_fround($15_1 * $10);
  $4_1 = Math_fround(Math_fround(Math_fround($21 * $12_1) + Math_fround($24_1 * $17_1)) + Math_fround($26_1 * $8_1));
  $13_1 = Math_fround(Math_fround($28_1 + $9_1) + Math_fround($16_1 * $4_1));
  $9_1 = Math_fround($7_1 + Math_fround(Math_fround($13_1 + Math_fround($9_1 + Math_fround(Math_fround($7_1 * Math_fround(0.0)) - Math_fround($16_1 * $20)))) * $2_1));
  $26_1 = Math_fround($15_1 * $7_1);
  $8_1 = Math_fround(Math_fround(Math_fround($19_1 * $12_1) + Math_fround($27_1 * $17_1)) + Math_fround($14 * $8_1));
  $11 = Math_fround($16_1 * $8_1);
  $12_1 = Math_fround(Math_fround(Math_fround($3_1 * $5_1) + $26_1) + $11);
  $24_1 = Math_fround($2_1 * Math_fround(0.0));
  $17_1 = Math_fround(Math_fround($18_1 + Math_fround(Math_fround(Math_fround($16_1 * $12_1) - Math_fround($3_1 * $13_1)) * $2_1)) - Math_fround($24_1 + $18_1));
  $11 = Math_fround($22_1 + Math_fround(Math_fround($12_1 + Math_fround(Math_fround(Math_fround($22_1 * Math_fround(0.0)) + $11) - Math_fround($3_1 * $4_1))) * $2_1));
  $7_1 = Math_fround($20 + Math_fround(Math_fround(Math_fround(Math_fround($20 * Math_fround(0.0)) + Math_fround($16_1 * $7_1)) - Math_fround($3_1 * $10)) * $2_1));
  $21 = Math_fround($8_1 + Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $4_1) + Math_fround(Math_fround($8_1 * Math_fround(0.0)) - $29_1)) - $18_1) * $2_1));
  $19_1 = Math_fround(Math_fround($9_1 * $11) - Math_fround($7_1 * $21));
  $14 = Math_fround($5_1 + Math_fround(Math_fround(Math_fround($15_1 * $6_1) + Math_fround(Math_fround($5_1 * Math_fround(0.0)) - Math_fround($16_1 * $25))) * $2_1));
  $4_1 = Math_fround($4_1 + Math_fround(Math_fround(Math_fround($4_1 * Math_fround(0.0)) + Math_fround(Math_fround($3_1 * $22_1) - Math_fround($15_1 * $8_1))) * $2_1));
  $20 = Math_fround($10 + Math_fround(Math_fround(Math_fround(Math_fround($10 * Math_fround(0.0)) + Math_fround(Math_fround($3_1 * $20) - $26_1)) - $12_1) * $2_1));
  $10 = Math_fround(Math_fround($7_1 * $4_1) - Math_fround($20 * $11));
  $8_1 = Math_fround($25 + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($25 * Math_fround(0.0)) + Math_fround($16_1 * $5_1)) - $28_1) - $13_1) * $2_1));
  $25 = Math_fround(Math_fround($20 * $21) - Math_fround($9_1 * $4_1));
  $6_1 = Math_fround(Math_fround($23_1 * $19_1) + Math_fround(Math_fround($14 * $10) + Math_fround($8_1 * $25)));
  $5_1 = Math_fround(Math_abs($6_1)) > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_fround(1.0) / $6_1) : $6_1;
  $6_1 = Math_fround(Math_fround($12_1 + Math_fround(Math_fround(Math_fround($15_1 * $13_1) - Math_fround($16_1 * $18_1)) * $2_1)) - Math_fround($24_1 + $12_1));
  $2_1 = Math_fround(Math_fround($13_1 + Math_fround(Math_fround(Math_fround($3_1 * $18_1) - Math_fround($15_1 * $12_1)) * $2_1)) - Math_fround($24_1 + $13_1));
  HEAPF32[$0 + 8 >> 2] = Math_fround($16_1 - Math_fround(Math_fround(Math_fround($23_1 * Math_fround(Math_fround($9_1 * $17_1) - Math_fround($7_1 * $6_1))) + Math_fround(Math_fround($14 * Math_fround(Math_fround($7_1 * $2_1) - Math_fround($20 * $17_1))) + Math_fround($8_1 * Math_fround(Math_fround($20 * $6_1) - Math_fround($9_1 * $2_1))))) * $5_1)) - $16_1;
  HEAPF32[$0 + 4 >> 2] = Math_fround($15_1 - Math_fround(Math_fround(Math_fround($23_1 * Math_fround(Math_fround($11 * $6_1) - Math_fround($21 * $17_1))) + Math_fround(Math_fround($14 * Math_fround(Math_fround($4_1 * $17_1) - Math_fround($11 * $2_1))) + Math_fround($8_1 * Math_fround(Math_fround($21 * $2_1) - Math_fround($4_1 * $6_1))))) * $5_1)) - $15_1;
  HEAPF32[$0 >> 2] = Math_fround($3_1 - Math_fround(Math_fround(Math_fround($2_1 * $19_1) + Math_fround(Math_fround($6_1 * $10) + Math_fround($17_1 * $25))) * $5_1)) - $3_1;
 }
 
 function $809($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0 + 548 >> 2];
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < 1) {
     break label$2
    }
    $4_1 = HEAP32[$0 + 556 >> 2];
    $2_1 = $3_1;
    while (1) {
     if (($1_1 | 0) != HEAP32[$4_1 >> 2]) {
      $4_1 = $4_1 + 4 | 0;
      $2_1 = $2_1 + -1 | 0;
      if ($2_1) {
       continue
      }
      break label$2;
     }
     break;
    };
    if ($2_1) {
     break label$1
    }
   }
   label$5 : {
    if (HEAP32[$0 + 552 >> 2] != ($3_1 | 0)) {
     break label$5
    }
    $5_1 = $3_1 ? $3_1 << 1 : 1;
    if (($3_1 | 0) >= ($5_1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$5_1) {
      break label$6
     }
     $6_1 = $79($5_1 << 2);
     $3_1 = HEAP32[$0 + 548 >> 2];
    }
    if (($3_1 | 0) >= 1) {
     $4_1 = 0;
     $2_1 = $3_1;
     while (1) {
      HEAP32[$4_1 + $6_1 >> 2] = HEAP32[HEAP32[$0 + 556 >> 2] + $4_1 >> 2];
      $4_1 = $4_1 + 4 | 0;
      $2_1 = $2_1 + -1 | 0;
      if ($2_1) {
       continue
      }
      break;
     };
    }
    $2_1 = HEAP32[$0 + 556 >> 2];
    if ($2_1) {
     if (HEAPU8[$0 + 560 | 0]) {
      $80($2_1);
      $3_1 = HEAP32[$0 + 548 >> 2];
     }
     HEAP32[$0 + 556 >> 2] = 0;
    }
    HEAP32[$0 + 556 >> 2] = $6_1;
    HEAP32[$0 + 552 >> 2] = $5_1;
    HEAP8[$0 + 560 | 0] = 1;
   }
   HEAP32[HEAP32[$0 + 556 >> 2] + ($3_1 << 2) >> 2] = $1_1;
   HEAP32[$0 + 548 >> 2] = $3_1 + 1;
   $2_1 = HEAP32[$1_1 + 32 >> 2];
   $6_1 = HEAP32[$1_1 + 28 >> 2];
   label$12 : {
    if (($0 | 0) == ($6_1 | 0)) {
     $1_1 = HEAP32[$0 + 288 >> 2];
     if (($1_1 | 0) != HEAP32[$0 + 292 >> 2]) {
      break label$12
     }
     $5_1 = $1_1 ? $1_1 << 1 : 1;
     if (($1_1 | 0) >= ($5_1 | 0)) {
      break label$12
     }
     label$14 : {
      if (!$5_1) {
       $6_1 = 0;
       break label$14;
      }
      $6_1 = $79($5_1 << 2);
      $1_1 = HEAP32[$0 + 288 >> 2];
     }
     if (($1_1 | 0) >= 1) {
      $4_1 = 0;
      $3_1 = $1_1;
      while (1) {
       HEAP32[$4_1 + $6_1 >> 2] = HEAP32[HEAP32[$0 + 296 >> 2] + $4_1 >> 2];
       $4_1 = $4_1 + 4 | 0;
       $3_1 = $3_1 + -1 | 0;
       if ($3_1) {
        continue
       }
       break;
      };
     }
     $3_1 = HEAP32[$0 + 296 >> 2];
     if ($3_1) {
      if (HEAPU8[$0 + 300 | 0]) {
       $80($3_1);
       $1_1 = HEAP32[$0 + 288 >> 2];
      }
      HEAP32[$0 + 296 >> 2] = 0;
     }
     HEAP32[$0 + 296 >> 2] = $6_1;
     HEAP32[$0 + 292 >> 2] = $5_1;
     HEAP8[$0 + 300 | 0] = 1;
     break label$12;
    }
    $1_1 = HEAP32[$2_1 + 288 >> 2];
    label$20 : {
     if (($1_1 | 0) != HEAP32[$2_1 + 292 >> 2]) {
      break label$20
     }
     $5_1 = $1_1 ? $1_1 << 1 : 1;
     if (($1_1 | 0) >= ($5_1 | 0)) {
      break label$20
     }
     label$21 : {
      if (!$5_1) {
       $3_1 = 0;
       break label$21;
      }
      $3_1 = $79($5_1 << 2);
      $1_1 = HEAP32[$2_1 + 288 >> 2];
     }
     if (($1_1 | 0) >= 1) {
      $4_1 = 0;
      $0 = $1_1;
      while (1) {
       HEAP32[$3_1 + $4_1 >> 2] = HEAP32[HEAP32[$2_1 + 296 >> 2] + $4_1 >> 2];
       $4_1 = $4_1 + 4 | 0;
       $0 = $0 + -1 | 0;
       if ($0) {
        continue
       }
       break;
      };
     }
     $0 = HEAP32[$2_1 + 296 >> 2];
     if ($0) {
      if (HEAPU8[$2_1 + 300 | 0]) {
       $80($0);
       $1_1 = HEAP32[$2_1 + 288 >> 2];
      }
      HEAP32[$2_1 + 296 >> 2] = 0;
     }
     HEAP32[$2_1 + 296 >> 2] = $3_1;
     HEAP32[$2_1 + 292 >> 2] = $5_1;
     HEAP8[$2_1 + 300 | 0] = 1;
    }
    $0 = $2_1;
    $2_1 = $6_1;
   }
   HEAP32[$0 + 288 >> 2] = $1_1 + 1;
   HEAP32[$0 + 280 >> 2] = ($1_1 ^ -1) >>> 31;
   HEAP32[HEAP32[$0 + 296 >> 2] + ($1_1 << 2) >> 2] = $2_1;
  }
 }
 
 function $810($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[$0 + 548 >> 2];
  label$1 : {
   if (($5_1 | 0) < 1) {
    break label$1
   }
   $4_1 = HEAP32[$0 + 556 >> 2];
   $3_1 = $4_1;
   while (1) {
    if (($1_1 | 0) != HEAP32[$3_1 >> 2]) {
     $3_1 = $3_1 + 4 | 0;
     $2_1 = $2_1 + 1 | 0;
     if (($5_1 | 0) != ($2_1 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($2_1 | 0) >= ($5_1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   $3_1 = $4_1;
   label$4 : {
    while (1) {
     if (($1_1 | 0) != HEAP32[$3_1 >> 2]) {
      $3_1 = $3_1 + 4 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (($5_1 | 0) != ($2_1 | 0)) {
       continue
      }
      break label$4;
     }
     break;
    };
    if (($5_1 | 0) <= ($2_1 | 0)) {
     break label$4
    }
    $6_1 = $3_1;
    $2_1 = $4_1;
    $3_1 = $5_1 + -1 | 0;
    $4_1 = $3_1 << 2;
    HEAP32[$6_1 >> 2] = HEAP32[$2_1 + $4_1 >> 2];
    HEAP32[$0 + 548 >> 2] = $3_1;
    HEAP32[$4_1 + HEAP32[$0 + 556 >> 2] >> 2] = $1_1;
   }
   $5_1 = HEAP32[$1_1 + 32 >> 2];
   $4_1 = HEAP32[$1_1 + 28 >> 2];
   if (($0 | 0) == ($4_1 | 0)) {
    $1_1 = HEAP32[$0 + 288 >> 2];
    label$8 : {
     if (($1_1 | 0) < 1) {
      break label$8
     }
     $2_1 = 0;
     $4_1 = HEAP32[$0 + 296 >> 2];
     $3_1 = $4_1;
     while (1) {
      if (HEAP32[$3_1 >> 2] != ($5_1 | 0)) {
       $3_1 = $3_1 + 4 | 0;
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) != ($1_1 | 0)) {
        continue
       }
       break label$8;
      }
      break;
     };
     if (($1_1 | 0) <= ($2_1 | 0)) {
      break label$8
     }
     $2_1 = $4_1;
     $1_1 = $1_1 + -1 | 0;
     $4_1 = $1_1 << 2;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 + $4_1 >> 2];
     HEAP32[$0 + 288 >> 2] = $1_1;
     HEAP32[$4_1 + HEAP32[$0 + 296 >> 2] >> 2] = $5_1;
    }
    HEAP32[$0 + 280 >> 2] = ($1_1 | 0) > 0;
    return;
   }
   $1_1 = HEAP32[$5_1 + 288 >> 2];
   label$11 : {
    if (($1_1 | 0) < 1) {
     break label$11
    }
    $2_1 = 0;
    $0 = HEAP32[$5_1 + 296 >> 2];
    $3_1 = $0;
    while (1) {
     if (HEAP32[$3_1 >> 2] != ($4_1 | 0)) {
      $3_1 = $3_1 + 4 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 | 0)) {
       continue
      }
      break label$11;
     }
     break;
    };
    if (($1_1 | 0) <= ($2_1 | 0)) {
     break label$11
    }
    $2_1 = $0;
    $1_1 = $1_1 + -1 | 0;
    $0 = $1_1 << 2;
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 + $0 >> 2];
    HEAP32[$5_1 + 288 >> 2] = $1_1;
    HEAP32[$0 + HEAP32[$5_1 + 296 >> 2] >> 2] = $4_1;
   }
   HEAP32[$5_1 + 280 >> 2] = ($1_1 | 0) > 0;
  }
 }
 
 function $811($0) {
  $0 = $0 | 0;
  return 496;
 }
 
 function $812($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $311($0, $1_1, $2_1);
  HEAP32[$1_1 + 264 >> 2] = HEAP32[$0 + 324 >> 2];
  HEAP32[$1_1 + 268 >> 2] = HEAP32[$0 + 328 >> 2];
  HEAP32[$1_1 + 272 >> 2] = HEAP32[$0 + 332 >> 2];
  HEAP32[$1_1 + 276 >> 2] = HEAP32[$0 + 336 >> 2];
  HEAP32[$1_1 + 280 >> 2] = HEAP32[$0 + 340 >> 2];
  HEAP32[$1_1 + 284 >> 2] = HEAP32[$0 + 344 >> 2];
  HEAP32[$1_1 + 288 >> 2] = HEAP32[$0 + 348 >> 2];
  HEAP32[$1_1 + 292 >> 2] = HEAP32[$0 + 352 >> 2];
  HEAP32[$1_1 + 296 >> 2] = HEAP32[$0 + 356 >> 2];
  HEAP32[$1_1 + 300 >> 2] = HEAP32[$0 + 360 >> 2];
  HEAP32[$1_1 + 304 >> 2] = HEAP32[$0 + 364 >> 2];
  HEAP32[$1_1 + 308 >> 2] = HEAP32[$0 + 368 >> 2];
  HEAP32[$1_1 + 312 >> 2] = HEAP32[$0 + 372 >> 2];
  HEAP32[$1_1 + 316 >> 2] = HEAP32[$0 + 376 >> 2];
  HEAP32[$1_1 + 320 >> 2] = HEAP32[$0 + 380 >> 2];
  HEAP32[$1_1 + 324 >> 2] = HEAP32[$0 + 384 >> 2];
  HEAP32[$1_1 + 328 >> 2] = HEAP32[$0 + 388 >> 2];
  HEAP32[$1_1 + 332 >> 2] = HEAP32[$0 + 392 >> 2];
  HEAP32[$1_1 + 336 >> 2] = HEAP32[$0 + 396 >> 2];
  HEAP32[$1_1 + 340 >> 2] = HEAP32[$0 + 400 >> 2];
  HEAP32[$1_1 + 456 >> 2] = HEAP32[$0 + 404 >> 2];
  HEAP32[$1_1 + 344 >> 2] = HEAP32[$0 + 604 >> 2];
  HEAP32[$1_1 + 348 >> 2] = HEAP32[$0 + 608 >> 2];
  HEAP32[$1_1 + 352 >> 2] = HEAP32[$0 + 612 >> 2];
  HEAP32[$1_1 + 356 >> 2] = HEAP32[$0 + 616 >> 2];
  HEAP32[$1_1 + 360 >> 2] = HEAP32[$0 + 408 >> 2];
  HEAP32[$1_1 + 364 >> 2] = HEAP32[$0 + 412 >> 2];
  HEAP32[$1_1 + 368 >> 2] = HEAP32[$0 + 416 >> 2];
  HEAP32[$1_1 + 372 >> 2] = HEAP32[$0 + 420 >> 2];
  HEAP32[$1_1 + 376 >> 2] = HEAP32[$0 + 424 >> 2];
  HEAP32[$1_1 + 380 >> 2] = HEAP32[$0 + 428 >> 2];
  HEAP32[$1_1 + 384 >> 2] = HEAP32[$0 + 432 >> 2];
  HEAP32[$1_1 + 388 >> 2] = HEAP32[$0 + 436 >> 2];
  HEAP32[$1_1 + 392 >> 2] = HEAP32[$0 + 440 >> 2];
  HEAP32[$1_1 + 396 >> 2] = HEAP32[$0 + 444 >> 2];
  HEAP32[$1_1 + 400 >> 2] = HEAP32[$0 + 448 >> 2];
  HEAP32[$1_1 + 404 >> 2] = HEAP32[$0 + 452 >> 2];
  HEAP32[$1_1 + 408 >> 2] = HEAP32[$0 + 456 >> 2];
  HEAP32[$1_1 + 412 >> 2] = HEAP32[$0 + 460 >> 2];
  HEAP32[$1_1 + 416 >> 2] = HEAP32[$0 + 464 >> 2];
  HEAP32[$1_1 + 420 >> 2] = HEAP32[$0 + 468 >> 2];
  HEAP32[$1_1 + 424 >> 2] = HEAP32[$0 + 472 >> 2];
  HEAP32[$1_1 + 428 >> 2] = HEAP32[$0 + 476 >> 2];
  HEAP32[$1_1 + 432 >> 2] = HEAP32[$0 + 480 >> 2];
  HEAP32[$1_1 + 436 >> 2] = HEAP32[$0 + 484 >> 2];
  HEAP32[$1_1 + 440 >> 2] = HEAP32[$0 + 488 >> 2];
  HEAP32[$1_1 + 444 >> 2] = HEAP32[$0 + 492 >> 2];
  HEAP32[$1_1 + 448 >> 2] = HEAP32[$0 + 496 >> 2];
  HEAP32[$1_1 + 452 >> 2] = HEAP32[$0 + 500 >> 2];
  $2_1 = HEAP32[$0 + 508 >> 2];
  HEAP32[$1_1 + 460 >> 2] = HEAP32[$0 + 504 >> 2];
  HEAP32[$1_1 + 464 >> 2] = $2_1;
  $2_1 = HEAP32[$0 + 520 >> 2];
  HEAP32[$1_1 + 468 >> 2] = HEAP32[$0 + 516 >> 2];
  HEAP32[$1_1 + 472 >> 2] = $2_1;
  $2_1 = HEAP32[$0 + 528 >> 2];
  HEAP32[$1_1 + 476 >> 2] = HEAP32[$0 + 524 >> 2];
  HEAP32[$1_1 + 480 >> 2] = $2_1;
  $2_1 = HEAP32[$0 + 536 >> 2];
  HEAP32[$1_1 + 484 >> 2] = HEAP32[$0 + 532 >> 2];
  HEAP32[$1_1 + 488 >> 2] = $2_1;
  HEAP32[$1_1 + 492 >> 2] = HEAPU8[$0 + 512 | 0];
  return 18140;
 }
 
 function $813($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$2_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1497645650), wasm2js_i32$5 = $0), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function $814($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 18112;
  $1_1 = HEAP32[$0 + 556 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 560 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 556 >> 2] = 0;
  }
  HEAP32[$0 + 556 >> 2] = 0;
  HEAP32[$0 + 548 >> 2] = 0;
  HEAP32[$0 + 552 >> 2] = 0;
  HEAP8[$0 + 560 | 0] = 1;
  $306($0);
  return $0 | 0;
 }
 
 function $815($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 18112;
  $1_1 = HEAP32[$0 + 556 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 560 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 556 >> 2] = 0;
  }
  HEAP32[$0 + 556 >> 2] = 0;
  HEAP32[$0 + 548 >> 2] = 0;
  HEAP32[$0 + 552 >> 2] = 0;
  HEAP8[$0 + 560 | 0] = 1;
  $306($0);
  $80($0);
 }
 
 function $816($0) {
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 18196;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1_1 = $0 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1_1 = $0 + 28 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 80 | 0] = 1;
  $1_1 = $0 + 48 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP8[$0 + 100 | 0] = 1;
  $1_1 = $0 + 68 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP8[$0 + 120 | 0] = 1;
  $1_1 = $0 + 88 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP8[$0 + 140 | 0] = 1;
  $1_1 = $0 + 108 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  $1_1 = $0 + 128 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0 + 160 | 0] = 1;
  HEAP32[$0 + 156 >> 2] = 0;
  $1_1 = $0 + 148 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0 + 180 | 0] = 1;
  HEAP32[$0 + 176 >> 2] = 0;
  $1_1 = $0 + 168 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0 + 208 | 0] = 1;
  HEAP32[$0 + 232 >> 2] = 0;
  HEAP32[$0 + 204 >> 2] = 0;
  $1_1 = $0 + 196 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 224 >> 2] = 0;
  HEAP32[$0 + 212 >> 2] = 534;
  HEAP32[$0 + 216 >> 2] = 535;
  HEAP32[$0 + 220 >> 2] = 536;
 }
 
 function $817($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0);
  $6_1 = HEAPF32[$2_1 + 100 >> 2];
  $7_1 = HEAPF32[$2_1 + 16 >> 2];
  $8_1 = HEAPF32[$2_1 + 20 >> 2];
  $9_1 = HEAPF32[$2_1 + 24 >> 2];
  $4_1 = HEAPF32[$2_1 + 108 >> 2];
  $3_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 112 >> 2] - Math_fround($6_1 * HEAPF32[$2_1 + 116 >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$0 + 64 >> 2]) + Math_fround($8_1 * HEAPF32[$0 + 68 >> 2])) + Math_fround($9_1 * HEAPF32[$0 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2] * HEAPF32[$0 + 80 >> 2]) + Math_fround(HEAPF32[$2_1 + 4 >> 2] * HEAPF32[$0 + 84 >> 2])) + Math_fround(HEAPF32[$2_1 + 8 >> 2] * HEAPF32[$0 + 88 >> 2]))) * $4_1)) - Math_fround($4_1 * Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 48 >> 2] * HEAPF32[$1_1 + 64 >> 2]) + Math_fround(HEAPF32[$2_1 + 52 >> 2] * HEAPF32[$1_1 + 68 >> 2])) + Math_fround(HEAPF32[$2_1 + 56 >> 2] * HEAPF32[$1_1 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 32 >> 2] * HEAPF32[$1_1 + 80 >> 2]) + Math_fround(HEAPF32[$2_1 + 36 >> 2] * HEAPF32[$1_1 + 84 >> 2])) + Math_fround(HEAPF32[$2_1 + 40 >> 2] * HEAPF32[$1_1 + 88 >> 2])))));
  $4_1 = Math_fround($6_1 + $3_1);
  $5_1 = HEAPF32[$2_1 + 120 >> 2];
  label$1 : {
   if (!!($4_1 < $5_1)) {
    $3_1 = Math_fround($5_1 - $6_1);
    $4_1 = $5_1;
    break label$1;
   }
   $5_1 = HEAPF32[$2_1 + 124 >> 2];
   if (!($4_1 > $5_1)) {
    break label$1
   }
   $3_1 = Math_fround($5_1 - $6_1);
   $4_1 = $5_1;
  }
  HEAPF32[$2_1 + 100 >> 2] = $4_1;
  if (HEAP32[$0 + 240 >> 2]) {
   HEAPF32[$0 + 64 >> 2] = Math_fround(HEAPF32[$0 + 112 >> 2] * Math_fround($3_1 * Math_fround($7_1 * HEAPF32[$0 + 128 >> 2]))) + HEAPF32[$0 + 64 >> 2];
   HEAPF32[$0 + 68 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($8_1 * HEAPF32[$0 + 132 >> 2])) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$0 + 68 >> 2];
   HEAPF32[$0 + 72 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($9_1 * HEAPF32[$0 + 136 >> 2])) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$0 + 72 >> 2];
   $4_1 = HEAPF32[$2_1 + 72 >> 2];
   $5_1 = HEAPF32[$2_1 + 68 >> 2];
   HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround($3_1 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$2_1 + 64 >> 2]) + HEAPF32[$0 + 80 >> 2];
   $6_1 = HEAPF32[$0 + 104 >> 2];
   HEAPF32[$0 + 84 >> 2] = Math_fround($5_1 * Math_fround($3_1 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$0 + 84 >> 2];
   HEAPF32[$0 + 88 >> 2] = Math_fround($4_1 * Math_fround($3_1 * $6_1)) + HEAPF32[$0 + 88 >> 2];
  }
  if (HEAP32[$1_1 + 240 >> 2]) {
   $4_1 = HEAPF32[$2_1 + 56 >> 2];
   $5_1 = HEAPF32[$2_1 + 52 >> 2];
   HEAPF32[$1_1 + 64 >> 2] = Math_fround(HEAPF32[$1_1 + 112 >> 2] * Math_fround($3_1 * Math_fround(HEAPF32[$2_1 + 48 >> 2] * HEAPF32[$1_1 + 128 >> 2]))) + HEAPF32[$1_1 + 64 >> 2];
   HEAPF32[$1_1 + 68 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($5_1 * HEAPF32[$1_1 + 132 >> 2])) * HEAPF32[$1_1 + 116 >> 2]) + HEAPF32[$1_1 + 68 >> 2];
   HEAPF32[$1_1 + 72 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($4_1 * HEAPF32[$1_1 + 136 >> 2])) * HEAPF32[$1_1 + 120 >> 2]) + HEAPF32[$1_1 + 72 >> 2];
   $4_1 = HEAPF32[$2_1 + 88 >> 2];
   $5_1 = HEAPF32[$2_1 + 84 >> 2];
   HEAPF32[$1_1 + 80 >> 2] = Math_fround(Math_fround($3_1 * HEAPF32[$1_1 + 96 >> 2]) * HEAPF32[$2_1 + 80 >> 2]) + HEAPF32[$1_1 + 80 >> 2];
   $6_1 = HEAPF32[$1_1 + 104 >> 2];
   HEAPF32[$1_1 + 84 >> 2] = Math_fround($5_1 * Math_fround($3_1 * HEAPF32[$1_1 + 100 >> 2])) + HEAPF32[$1_1 + 84 >> 2];
   HEAPF32[$1_1 + 88 >> 2] = Math_fround($4_1 * Math_fround($3_1 * $6_1)) + HEAPF32[$1_1 + 88 >> 2];
  }
  return Math_fround($3_1);
 }
 
 function $818($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0;
  $3_1 = HEAPF32[$2_1 + 100 >> 2];
  $6_1 = HEAPF32[$2_1 + 16 >> 2];
  $7_1 = HEAPF32[$2_1 + 20 >> 2];
  $8_1 = HEAPF32[$2_1 + 24 >> 2];
  $4_1 = HEAPF32[$2_1 + 108 >> 2];
  $4_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 112 >> 2] - Math_fround($3_1 * HEAPF32[$2_1 + 116 >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$0 + 64 >> 2]) + Math_fround($7_1 * HEAPF32[$0 + 68 >> 2])) + Math_fround($8_1 * HEAPF32[$0 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2] * HEAPF32[$0 + 80 >> 2]) + Math_fround(HEAPF32[$2_1 + 4 >> 2] * HEAPF32[$0 + 84 >> 2])) + Math_fround(HEAPF32[$2_1 + 8 >> 2] * HEAPF32[$0 + 88 >> 2]))) * $4_1)) - Math_fround($4_1 * Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 48 >> 2] * HEAPF32[$1_1 + 64 >> 2]) + Math_fround(HEAPF32[$2_1 + 52 >> 2] * HEAPF32[$1_1 + 68 >> 2])) + Math_fround(HEAPF32[$2_1 + 56 >> 2] * HEAPF32[$1_1 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 32 >> 2] * HEAPF32[$1_1 + 80 >> 2]) + Math_fround(HEAPF32[$2_1 + 36 >> 2] * HEAPF32[$1_1 + 84 >> 2])) + Math_fround(HEAPF32[$2_1 + 40 >> 2] * HEAPF32[$1_1 + 88 >> 2])))));
  $9_1 = Math_fround($3_1 + $4_1);
  $5_1 = HEAPF32[$2_1 + 120 >> 2];
  $10 = $9_1 < $5_1;
  HEAPF32[$2_1 + 100 >> 2] = $10 ? $5_1 : $9_1;
  $3_1 = $10 ? Math_fround($5_1 - $3_1) : $4_1;
  if (HEAP32[$0 + 240 >> 2]) {
   HEAPF32[$0 + 64 >> 2] = Math_fround(HEAPF32[$0 + 112 >> 2] * Math_fround($3_1 * Math_fround($6_1 * HEAPF32[$0 + 128 >> 2]))) + HEAPF32[$0 + 64 >> 2];
   HEAPF32[$0 + 68 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($7_1 * HEAPF32[$0 + 132 >> 2])) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$0 + 68 >> 2];
   HEAPF32[$0 + 72 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($8_1 * HEAPF32[$0 + 136 >> 2])) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$0 + 72 >> 2];
   $4_1 = HEAPF32[$2_1 + 72 >> 2];
   $5_1 = HEAPF32[$2_1 + 68 >> 2];
   HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround($3_1 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$2_1 + 64 >> 2]) + HEAPF32[$0 + 80 >> 2];
   $6_1 = HEAPF32[$0 + 104 >> 2];
   HEAPF32[$0 + 84 >> 2] = Math_fround($5_1 * Math_fround($3_1 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$0 + 84 >> 2];
   HEAPF32[$0 + 88 >> 2] = Math_fround($4_1 * Math_fround($3_1 * $6_1)) + HEAPF32[$0 + 88 >> 2];
  }
  if (HEAP32[$1_1 + 240 >> 2]) {
   $4_1 = HEAPF32[$2_1 + 56 >> 2];
   $5_1 = HEAPF32[$2_1 + 52 >> 2];
   HEAPF32[$1_1 + 64 >> 2] = Math_fround(HEAPF32[$1_1 + 112 >> 2] * Math_fround($3_1 * Math_fround(HEAPF32[$2_1 + 48 >> 2] * HEAPF32[$1_1 + 128 >> 2]))) + HEAPF32[$1_1 + 64 >> 2];
   HEAPF32[$1_1 + 68 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($5_1 * HEAPF32[$1_1 + 132 >> 2])) * HEAPF32[$1_1 + 116 >> 2]) + HEAPF32[$1_1 + 68 >> 2];
   HEAPF32[$1_1 + 72 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($4_1 * HEAPF32[$1_1 + 136 >> 2])) * HEAPF32[$1_1 + 120 >> 2]) + HEAPF32[$1_1 + 72 >> 2];
   $4_1 = HEAPF32[$2_1 + 88 >> 2];
   $5_1 = HEAPF32[$2_1 + 84 >> 2];
   HEAPF32[$1_1 + 80 >> 2] = Math_fround(Math_fround($3_1 * HEAPF32[$1_1 + 96 >> 2]) * HEAPF32[$2_1 + 80 >> 2]) + HEAPF32[$1_1 + 80 >> 2];
   $6_1 = HEAPF32[$1_1 + 104 >> 2];
   HEAPF32[$1_1 + 84 >> 2] = Math_fround($5_1 * Math_fround($3_1 * HEAPF32[$1_1 + 100 >> 2])) + HEAPF32[$1_1 + 84 >> 2];
   HEAPF32[$1_1 + 88 >> 2] = Math_fround($4_1 * Math_fround($3_1 * $6_1)) + HEAPF32[$1_1 + 88 >> 2];
  }
  return Math_fround($3_1);
 }
 
 function $819($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0;
  $4_1 = HEAPF32[$2_1 + 128 >> 2];
  label$1 : {
   if ($4_1 == Math_fround(0.0)) {
    break label$1
   }
   HEAP32[6300] = HEAP32[6300] + 1;
   $3_1 = HEAPF32[$2_1 + 96 >> 2];
   $5_1 = Math_fround($4_1 - Math_fround($3_1 * HEAPF32[$2_1 + 116 >> 2]));
   $6_1 = HEAPF32[$2_1 + 16 >> 2];
   $7_1 = HEAPF32[$2_1 + 20 >> 2];
   $8_1 = HEAPF32[$2_1 + 24 >> 2];
   $4_1 = HEAPF32[$2_1 + 108 >> 2];
   $4_1 = Math_fround(Math_fround($5_1 - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$0 + 144 >> 2]) + Math_fround($7_1 * HEAPF32[$0 + 148 >> 2])) + Math_fround($8_1 * HEAPF32[$0 + 152 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2] * HEAPF32[$0 + 160 >> 2]) + Math_fround(HEAPF32[$2_1 + 4 >> 2] * HEAPF32[$0 + 164 >> 2])) + Math_fround(HEAPF32[$2_1 + 8 >> 2] * HEAPF32[$0 + 168 >> 2]))) * $4_1)) - Math_fround($4_1 * Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 48 >> 2] * HEAPF32[$1_1 + 144 >> 2]) + Math_fround(HEAPF32[$2_1 + 52 >> 2] * HEAPF32[$1_1 + 148 >> 2])) + Math_fround(HEAPF32[$2_1 + 56 >> 2] * HEAPF32[$1_1 + 152 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 32 >> 2] * HEAPF32[$1_1 + 160 >> 2]) + Math_fround(HEAPF32[$2_1 + 36 >> 2] * HEAPF32[$1_1 + 164 >> 2])) + Math_fround(HEAPF32[$2_1 + 40 >> 2] * HEAPF32[$1_1 + 168 >> 2])))));
   $9_1 = Math_fround($3_1 + $4_1);
   $5_1 = HEAPF32[$2_1 + 120 >> 2];
   $10 = $9_1 < $5_1;
   HEAPF32[$2_1 + 96 >> 2] = $10 ? $5_1 : $9_1;
   $3_1 = $10 ? Math_fround($5_1 - $3_1) : $4_1;
   if (HEAP32[$0 + 240 >> 2]) {
    HEAPF32[$0 + 144 >> 2] = Math_fround(HEAPF32[$0 + 112 >> 2] * Math_fround($3_1 * Math_fround($6_1 * HEAPF32[$0 + 128 >> 2]))) + HEAPF32[$0 + 144 >> 2];
    HEAPF32[$0 + 148 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($7_1 * HEAPF32[$0 + 132 >> 2])) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$0 + 148 >> 2];
    HEAPF32[$0 + 152 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($8_1 * HEAPF32[$0 + 136 >> 2])) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$0 + 152 >> 2];
    $4_1 = HEAPF32[$2_1 + 72 >> 2];
    $5_1 = HEAPF32[$2_1 + 68 >> 2];
    HEAPF32[$0 + 160 >> 2] = Math_fround(Math_fround($3_1 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$2_1 + 64 >> 2]) + HEAPF32[$0 + 160 >> 2];
    $6_1 = HEAPF32[$0 + 104 >> 2];
    HEAPF32[$0 + 164 >> 2] = Math_fround($5_1 * Math_fround($3_1 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$0 + 164 >> 2];
    HEAPF32[$0 + 168 >> 2] = Math_fround($4_1 * Math_fround($3_1 * $6_1)) + HEAPF32[$0 + 168 >> 2];
   }
   if (!HEAP32[$1_1 + 240 >> 2]) {
    break label$1
   }
   $4_1 = HEAPF32[$2_1 + 56 >> 2];
   $5_1 = HEAPF32[$2_1 + 52 >> 2];
   HEAPF32[$1_1 + 144 >> 2] = Math_fround(HEAPF32[$1_1 + 112 >> 2] * Math_fround($3_1 * Math_fround(HEAPF32[$2_1 + 48 >> 2] * HEAPF32[$1_1 + 128 >> 2]))) + HEAPF32[$1_1 + 144 >> 2];
   HEAPF32[$1_1 + 148 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($5_1 * HEAPF32[$1_1 + 132 >> 2])) * HEAPF32[$1_1 + 116 >> 2]) + HEAPF32[$1_1 + 148 >> 2];
   HEAPF32[$1_1 + 152 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($4_1 * HEAPF32[$1_1 + 136 >> 2])) * HEAPF32[$1_1 + 120 >> 2]) + HEAPF32[$1_1 + 152 >> 2];
   $4_1 = HEAPF32[$2_1 + 88 >> 2];
   $5_1 = HEAPF32[$2_1 + 84 >> 2];
   HEAPF32[$1_1 + 160 >> 2] = Math_fround(Math_fround($3_1 * HEAPF32[$1_1 + 96 >> 2]) * HEAPF32[$2_1 + 80 >> 2]) + HEAPF32[$1_1 + 160 >> 2];
   $6_1 = HEAPF32[$1_1 + 104 >> 2];
   HEAPF32[$1_1 + 164 >> 2] = Math_fround($5_1 * Math_fround($3_1 * HEAPF32[$1_1 + 100 >> 2])) + HEAPF32[$1_1 + 164 >> 2];
   HEAPF32[$1_1 + 168 >> 2] = Math_fround($4_1 * Math_fround($3_1 * $6_1)) + HEAPF32[$1_1 + 168 >> 2];
  }
  return Math_fround($3_1);
 }
 
 function $820($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 18196;
  $1_1 = HEAP32[$0 + 204 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 208 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 204 >> 2] = 0;
  }
  HEAP32[$0 + 204 >> 2] = 0;
  HEAP32[$0 + 196 >> 2] = 0;
  HEAP32[$0 + 200 >> 2] = 0;
  HEAP8[$0 + 208 | 0] = 1;
  $1_1 = HEAP32[$0 + 176 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 180 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 176 >> 2] = 0;
  }
  HEAP32[$0 + 176 >> 2] = 0;
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP32[$0 + 172 >> 2] = 0;
  HEAP8[$0 + 180 | 0] = 1;
  $1_1 = HEAP32[$0 + 156 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 160 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 156 >> 2] = 0;
  }
  HEAP32[$0 + 156 >> 2] = 0;
  HEAP32[$0 + 148 >> 2] = 0;
  HEAP32[$0 + 152 >> 2] = 0;
  HEAP8[$0 + 160 | 0] = 1;
  $1_1 = HEAP32[$0 + 136 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 140 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 136 >> 2] = 0;
  }
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP8[$0 + 140 | 0] = 1;
  $1_1 = HEAP32[$0 + 116 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 120 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 116 >> 2] = 0;
  }
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP32[$0 + 108 >> 2] = 0;
  HEAP32[$0 + 112 >> 2] = 0;
  HEAP8[$0 + 120 | 0] = 1;
  $1_1 = HEAP32[$0 + 96 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 100 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 96 >> 2] = 0;
  }
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP8[$0 + 100 | 0] = 1;
  $1_1 = HEAP32[$0 + 76 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 80 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 76 >> 2] = 0;
  }
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP8[$0 + 80 | 0] = 1;
  $1_1 = HEAP32[$0 + 56 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 60 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1_1 = HEAP32[$0 + 36 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 40 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1_1 = HEAP32[$0 + 16 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 20 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  return $0 | 0;
 }
 
 function $821($0) {
  $0 = $0 | 0;
  $80($820($0));
 }
 
 function $822($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0);
  $1_1 = $1_1 ? HEAP32[$1_1 + 252 >> 2] << 30 >> 31 & $1_1 : 0;
  HEAP32[$0 + 64 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 144 >> 2] = 0;
  HEAP32[$0 + 148 >> 2] = 0;
  $3_1 = $0 + 88 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0 + 80 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0 + 72 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0 + 152 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0 + 160 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0 + 168 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  label$3 : {
   if ($1_1) {
    $3_1 = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$0 + 4 >> 2] = $3_1;
    $3_1 = $1_1 + 12 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $0 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $4_1;
    $3_1 = $1_1 + 28 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $0 + 24 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $4_1;
    $3_1 = $1_1 + 20 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$0 + 16 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$0 + 20 >> 2] = $4_1;
    $3_1 = $1_1 + 44 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $0 + 40 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $4_1;
    $3_1 = $1_1 + 36 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$0 + 32 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$0 + 36 >> 2] = $4_1;
    $3_1 = $1_1 + 52 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$0 + 48 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$0 + 52 >> 2] = $4_1;
    $3_1 = $1_1 + 60 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $0 + 56 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $4_1;
    $7_1 = HEAPF32[$1_1 + 412 >> 2];
    $3_1 = $1_1 + 416 | 0;
    $8_1 = HEAPF32[$3_1 >> 2];
    $9_1 = HEAPF32[$1_1 + 408 >> 2];
    $6_1 = HEAPF32[$1_1 + 404 >> 2];
    HEAP32[$0 + 140 >> 2] = 0;
    HEAPF32[$0 + 136 >> 2] = $6_1 * $8_1;
    HEAPF32[$0 + 132 >> 2] = $6_1 * $7_1;
    HEAPF32[$0 + 128 >> 2] = $6_1 * $9_1;
    HEAP32[$0 + 240 >> 2] = $1_1;
    $4_1 = $1_1 + 612 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $10 = $0 + 104 | 0;
    HEAP32[$10 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$10 + 4 >> 2] = $5_1;
    $4_1 = HEAP32[$1_1 + 608 >> 2];
    HEAP32[$0 + 96 >> 2] = HEAP32[$1_1 + 604 >> 2];
    HEAP32[$0 + 100 >> 2] = $4_1;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $0 + 120 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $4_1;
    $3_1 = HEAP32[$1_1 + 412 >> 2];
    HEAP32[$0 + 112 >> 2] = HEAP32[$1_1 + 408 >> 2];
    HEAP32[$0 + 116 >> 2] = $3_1;
    $3_1 = $1_1 + 380 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $0 + 184 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $4_1;
    $3_1 = HEAP32[$1_1 + 376 >> 2];
    HEAP32[$0 + 176 >> 2] = HEAP32[$1_1 + 372 >> 2];
    HEAP32[$0 + 180 >> 2] = $3_1;
    $3_1 = HEAP32[$1_1 + 392 >> 2];
    HEAP32[$0 + 192 >> 2] = HEAP32[$1_1 + 388 >> 2];
    HEAP32[$0 + 196 >> 2] = $3_1;
    $3_1 = $1_1 + 396 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $0 + 200 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $4_1;
    $7_1 = HEAPF32[$1_1 + 476 >> 2];
    $8_1 = HEAPF32[$1_1 + 480 >> 2];
    $9_1 = HEAPF32[$1_1 + 472 >> 2];
    $6_1 = HEAPF32[$1_1 + 404 >> 2];
    HEAP32[$0 + 220 >> 2] = 0;
    HEAPF32[$0 + 216 >> 2] = Math_fround($6_1 * $8_1) * $2_1;
    HEAPF32[$0 + 212 >> 2] = Math_fround($6_1 * $7_1) * $2_1;
    HEAPF32[$0 + 208 >> 2] = Math_fround($6_1 * $9_1) * $2_1;
    $9_1 = HEAPF32[$1_1 + 340 >> 2];
    $11 = HEAPF32[$1_1 + 356 >> 2];
    $12_1 = HEAPF32[$1_1 + 328 >> 2];
    $13_1 = HEAPF32[$1_1 + 344 >> 2];
    $14 = HEAPF32[$1_1 + 360 >> 2];
    $15_1 = HEAPF32[$1_1 + 324 >> 2];
    $6_1 = HEAPF32[$1_1 + 488 >> 2];
    $7_1 = HEAPF32[$1_1 + 492 >> 2];
    $8_1 = HEAPF32[$1_1 + 496 >> 2];
    HEAPF32[$0 + 232 >> 2] = Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$1_1 + 332 >> 2]) + Math_fround($7_1 * HEAPF32[$1_1 + 348 >> 2])) + Math_fround($8_1 * HEAPF32[$1_1 + 364 >> 2])) * $2_1;
    HEAPF32[$0 + 228 >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $12_1) + Math_fround($7_1 * $13_1)) + Math_fround($8_1 * $14)) * $2_1;
    HEAPF32[$0 + 224 >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $6_1) + Math_fround($9_1 * $7_1)) + Math_fround($11 * $8_1)) * $2_1;
    break label$3;
   }
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 >> 2] = 1065353216;
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = 0;
   HEAP32[$0 + 240 >> 2] = 0;
   HEAP32[$0 + 128 >> 2] = 0;
   HEAP32[$0 + 132 >> 2] = 0;
   HEAP32[$0 + 112 >> 2] = 1065353216;
   HEAP32[$0 + 116 >> 2] = 1065353216;
   HEAP32[$0 + 96 >> 2] = 1065353216;
   HEAP32[$0 + 100 >> 2] = 1065353216;
   HEAP32[$0 + 176 >> 2] = 0;
   HEAP32[$0 + 180 >> 2] = 0;
   $1_1 = $0 + 12 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0 + 24 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 1065353216;
   $1_1 = $0 + 44 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$0 + 40 >> 2] = 1065353216;
   $1_1 = $0 + 52 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$0 + 60 >> 2] = 0;
   $1_1 = $0 + 136 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0 + 120 | 0;
   HEAP32[$1_1 >> 2] = 1065353216;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0 + 104 | 0;
   HEAP32[$1_1 >> 2] = 1065353216;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$0 + 232 >> 2] = 0;
   $1_1 = $0 + 224 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0 + 216 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0 + 208 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0 + 200 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0 + 192 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0 + 184 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
  }
  HEAP32[$0 + 236 >> 2] = 0;
 }
 
 function $823($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10, $11) {
  var $12_1 = 0, $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = 0, $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = 0, $39_1 = Math_fround(0), $40_1 = 0, $41_1 = Math_fround(0), $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0);
  HEAP32[$1_1 + 148 >> 2] = $4_1;
  HEAP32[$1_1 + 144 >> 2] = $3_1;
  HEAP32[$1_1 + 96 >> 2] = 0;
  HEAP32[$1_1 + 100 >> 2] = 0;
  $39_1 = HEAPF32[$5_1 + 84 >> 2];
  $38 = HEAP32[$5_1 + 84 >> 2];
  HEAP32[$1_1 + 104 >> 2] = $38;
  $35 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[($35 + Math_imul($4_1, 244) | 0) + 240 >> 2];
  $14 = HEAP32[(Math_imul($3_1, 244) + $35 | 0) + 240 >> 2];
  HEAP32[$1_1 + 132 >> 2] = 0;
  $12_1 = $1_1 + 16 | 0;
  label$1 : {
   if ($14) {
    $22_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $22_1;
    $22_1 = $2_1 + 8 | 0;
    $40_1 = HEAP32[$22_1 + 4 >> 2];
    $12_1 = $12_1 + 8 | 0;
    HEAP32[$12_1 >> 2] = HEAP32[$22_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $40_1;
    $17_1 = HEAPF32[$6_1 + 8 >> 2];
    $18_1 = HEAPF32[$6_1 >> 2];
    $19_1 = HEAPF32[$6_1 + 4 >> 2];
    HEAP32[$1_1 + 12 >> 2] = 0;
    $26_1 = HEAPF32[$1_1 + 20 >> 2];
    $23_1 = HEAPF32[$1_1 + 16 >> 2];
    $29_1 = Math_fround(Math_fround($18_1 * $26_1) - Math_fround($19_1 * $23_1));
    HEAPF32[$1_1 + 8 >> 2] = $29_1;
    $24_1 = HEAPF32[$1_1 + 24 >> 2];
    $18_1 = Math_fround(Math_fround($17_1 * $23_1) - Math_fround($18_1 * $24_1));
    HEAPF32[$1_1 + 4 >> 2] = $18_1;
    $17_1 = Math_fround(Math_fround($19_1 * $24_1) - Math_fround($17_1 * $26_1));
    HEAPF32[$1_1 >> 2] = $17_1;
    $19_1 = HEAPF32[$14 + 612 >> 2];
    $15_1 = HEAPF32[$14 + 364 >> 2];
    $16_1 = HEAPF32[$14 + 356 >> 2];
    $13_1 = HEAPF32[$14 + 360 >> 2];
    $30 = HEAPF32[$14 + 608 >> 2];
    $31_1 = HEAPF32[$14 + 348 >> 2];
    $32 = HEAPF32[$14 + 340 >> 2];
    $20 = HEAPF32[$14 + 344 >> 2];
    $27_1 = HEAPF32[$14 + 332 >> 2];
    $33_1 = HEAPF32[$14 + 328 >> 2];
    $25 = HEAPF32[$14 + 604 >> 2];
    $21 = HEAPF32[$14 + 324 >> 2];
    HEAP32[$1_1 + 76 >> 2] = 0;
    $27_1 = Math_fround($25 * Math_fround(Math_fround(Math_fround($17_1 * $21) + Math_fround($18_1 * $33_1)) + Math_fround($29_1 * $27_1)));
    HEAPF32[$1_1 + 64 >> 2] = $27_1;
    $33_1 = Math_fround($30 * Math_fround(Math_fround(Math_fround($17_1 * $32) + Math_fround($18_1 * $20)) + Math_fround($29_1 * $31_1)));
    HEAPF32[$1_1 + 68 >> 2] = $33_1;
    $25 = Math_fround($19_1 * Math_fround(Math_fround(Math_fround($17_1 * $16_1) + Math_fround($18_1 * $13_1)) + Math_fround($29_1 * $15_1)));
    HEAPF32[$1_1 + 72 >> 2] = $25;
    break label$1;
   }
   HEAP32[$1_1 + 64 >> 2] = 0;
   HEAP32[$1_1 + 68 >> 2] = 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $22_1 = $1_1 + 72 | 0;
   HEAP32[$22_1 >> 2] = 0;
   HEAP32[$22_1 + 4 >> 2] = 0;
   $22_1 = $1_1 + 8 | 0;
   HEAP32[$22_1 >> 2] = 0;
   HEAP32[$22_1 + 4 >> 2] = 0;
   HEAP32[$12_1 >> 2] = 0;
   HEAP32[$12_1 + 4 >> 2] = 0;
   $12_1 = $1_1 + 24 | 0;
   HEAP32[$12_1 >> 2] = 0;
   HEAP32[$12_1 + 4 >> 2] = 0;
  }
  label$3 : {
   if ($0) {
    $15_1 = HEAPF32[$2_1 >> 2];
    $16_1 = HEAPF32[$2_1 + 4 >> 2];
    $13_1 = HEAPF32[$2_1 + 8 >> 2];
    HEAP32[$1_1 + 60 >> 2] = 0;
    $30 = Math_fround(-$13_1);
    HEAPF32[$1_1 + 56 >> 2] = $30;
    $31_1 = Math_fround(-$16_1);
    HEAPF32[$1_1 + 52 >> 2] = $31_1;
    $32 = Math_fround(-$15_1);
    HEAPF32[$1_1 + 48 >> 2] = $32;
    $20 = HEAPF32[$7_1 + 8 >> 2];
    $28_1 = HEAPF32[$7_1 + 4 >> 2];
    $21 = HEAPF32[$7_1 >> 2];
    HEAP32[$1_1 + 44 >> 2] = 0;
    $19_1 = Math_fround(Math_fround($15_1 * $28_1) - Math_fround($16_1 * $21));
    HEAPF32[$1_1 + 40 >> 2] = $19_1;
    $15_1 = Math_fround(Math_fround($13_1 * $21) - Math_fround($15_1 * $20));
    HEAPF32[$1_1 + 36 >> 2] = $15_1;
    $16_1 = Math_fround(Math_fround($16_1 * $20) - Math_fround($13_1 * $28_1));
    HEAPF32[$1_1 + 32 >> 2] = $16_1;
    $28_1 = HEAPF32[$0 + 332 >> 2];
    $21 = HEAPF32[$0 + 328 >> 2];
    $20 = HEAPF32[$0 + 608 >> 2];
    $36_1 = HEAPF32[$0 + 348 >> 2];
    $34 = HEAPF32[$0 + 340 >> 2];
    $37_1 = HEAPF32[$0 + 344 >> 2];
    $13_1 = HEAPF32[$0 + 612 >> 2];
    $41_1 = HEAPF32[$0 + 364 >> 2];
    $42 = HEAPF32[$0 + 356 >> 2];
    $43_1 = HEAPF32[$0 + 360 >> 2];
    $44_1 = HEAPF32[$0 + 604 >> 2];
    $45_1 = HEAPF32[$0 + 324 >> 2];
    HEAP32[$1_1 + 92 >> 2] = 0;
    $13_1 = Math_fround($13_1 * Math_fround(Math_fround(Math_fround($16_1 * $42) + Math_fround($15_1 * $43_1)) + Math_fround($19_1 * $41_1)));
    HEAPF32[$1_1 + 88 >> 2] = $13_1;
    $20 = Math_fround($20 * Math_fround(Math_fround(Math_fround($16_1 * $34) + Math_fround($15_1 * $37_1)) + Math_fround($19_1 * $36_1)));
    HEAPF32[$1_1 + 84 >> 2] = $20;
    $28_1 = Math_fround($44_1 * Math_fround(Math_fround(Math_fround($16_1 * $45_1) + Math_fround($15_1 * $21)) + Math_fround($19_1 * $28_1)));
    HEAPF32[$1_1 + 80 >> 2] = $28_1;
    break label$3;
   }
   HEAP32[$1_1 + 80 >> 2] = 0;
   HEAP32[$1_1 + 84 >> 2] = 0;
   HEAP32[$1_1 + 32 >> 2] = 0;
   HEAP32[$1_1 + 36 >> 2] = 0;
   $12_1 = $1_1 + 88 | 0;
   HEAP32[$12_1 >> 2] = 0;
   HEAP32[$12_1 + 4 >> 2] = 0;
   $12_1 = $1_1 + 40 | 0;
   HEAP32[$12_1 >> 2] = 0;
   HEAP32[$12_1 + 4 >> 2] = 0;
   $12_1 = $1_1 + 48 | 0;
   HEAP32[$12_1 >> 2] = 0;
   HEAP32[$12_1 + 4 >> 2] = 0;
   $12_1 = $1_1 + 56 | 0;
   HEAP32[$12_1 >> 2] = 0;
   HEAP32[$12_1 + 4 >> 2] = 0;
   $19_1 = Math_fround(0.0);
   $15_1 = Math_fround(0.0);
   $16_1 = Math_fround(0.0);
   $30 = Math_fround(0.0);
   $31_1 = Math_fround(0.0);
   $32 = Math_fround(0.0);
   $13_1 = Math_fround(0.0);
   $20 = Math_fround(0.0);
  }
  $12_1 = $1_1;
  $36_1 = $8_1;
  if ($14) {
   $8_1 = HEAPF32[$6_1 + 8 >> 2];
   $21 = HEAPF32[$6_1 + 4 >> 2];
   $37_1 = Math_fround(Math_fround(Math_fround($33_1 * $8_1) - Math_fround($25 * $21)) * HEAPF32[$2_1 >> 2]);
   $34 = $25;
   $25 = HEAPF32[$6_1 >> 2];
   $8_1 = Math_fround(HEAPF32[$14 + 404 >> 2] + Math_fround(Math_fround($37_1 + Math_fround(Math_fround(Math_fround($34 * $25) - Math_fround($8_1 * $27_1)) * HEAPF32[$2_1 + 4 >> 2])) + Math_fround(Math_fround(Math_fround($21 * $27_1) - Math_fround($33_1 * $25)) * HEAPF32[$2_1 + 8 >> 2])));
  } else {
   $8_1 = Math_fround(0.0)
  }
  $25 = $8_1;
  if ($0) {
   $8_1 = HEAPF32[$7_1 + 4 >> 2];
   $27_1 = HEAPF32[$7_1 + 8 >> 2];
   $21 = Math_fround(Math_fround(Math_fround($13_1 * $8_1) - Math_fround($20 * $27_1)) * HEAPF32[$2_1 >> 2]);
   $34 = $13_1;
   $13_1 = HEAPF32[$7_1 >> 2];
   $8_1 = Math_fround(HEAPF32[$0 + 404 >> 2] + Math_fround(Math_fround($21 + Math_fround(Math_fround(Math_fround($28_1 * $27_1) - Math_fround($34 * $13_1)) * HEAPF32[$2_1 + 4 >> 2])) + Math_fround(Math_fround(Math_fround($20 * $13_1) - Math_fround($28_1 * $8_1)) * HEAPF32[$2_1 + 8 >> 2])));
  } else {
   $8_1 = Math_fround(0.0)
  }
  $8_1 = Math_fround($36_1 / Math_fround($25 + $8_1));
  HEAPF32[$12_1 + 108 >> 2] = $8_1;
  label$7 : {
   if (!$14) {
    $13_1 = Math_fround(0.0);
    $26_1 = Math_fround(Math_fround(Math_fround($23_1 * Math_fround(0.0)) + Math_fround($26_1 * Math_fround(0.0))) + Math_fround($24_1 * Math_fround(0.0)));
    $24_1 = Math_fround(0.0);
    $23_1 = Math_fround(0.0);
    break label$7;
   }
   $3_1 = Math_imul($3_1, 244) + $35 | 0;
   $26_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 + 176 >> 2] + HEAPF32[$3_1 + 208 >> 2]) * $23_1) + Math_fround(Math_fround(HEAPF32[$3_1 + 180 >> 2] + HEAPF32[$3_1 + 212 >> 2]) * $26_1)) + Math_fround(Math_fround(HEAPF32[$3_1 + 184 >> 2] + HEAPF32[$3_1 + 216 >> 2]) * $24_1));
   $13_1 = HEAPF32[$3_1 + 192 >> 2];
   $24_1 = HEAPF32[$3_1 + 200 >> 2];
   $23_1 = HEAPF32[$3_1 + 196 >> 2];
  }
  $26_1 = Math_fround($26_1 + Math_fround(Math_fround(Math_fround($13_1 * $17_1) + Math_fround($23_1 * $18_1)) + Math_fround($24_1 * $29_1)));
  label$9 : {
   if (!$0) {
    $18_1 = Math_fround(0.0);
    $17_1 = Math_fround(Math_fround(Math_fround($32 * Math_fround(0.0)) + Math_fround($31_1 * Math_fround(0.0))) + Math_fround($30 * Math_fround(0.0)));
    $23_1 = Math_fround(0.0);
    $24_1 = Math_fround(0.0);
    break label$9;
   }
   $0 = Math_imul($4_1, 244) + $35 | 0;
   $17_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 176 >> 2] + HEAPF32[$0 + 208 >> 2]) * $32) + Math_fround(Math_fround(HEAPF32[$0 + 180 >> 2] + HEAPF32[$0 + 212 >> 2]) * $31_1)) + Math_fround(Math_fround(HEAPF32[$0 + 184 >> 2] + HEAPF32[$0 + 216 >> 2]) * $30));
   $23_1 = HEAPF32[$0 + 192 >> 2];
   $18_1 = HEAPF32[$0 + 200 >> 2];
   $24_1 = HEAPF32[$0 + 196 >> 2];
  }
  $29_1 = HEAPU8[$5_1 + 120 | 0] & 16 ? Math_fround($8_1 * Math_fround(Math_fround(HEAPF32[$9_1 + 44 >> 2] * Math_fround(-Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$5_1 + 48 >> 2] - HEAPF32[$5_1 + 32 >> 2]) * HEAPF32[$2_1 >> 2]) + Math_fround(Math_fround(HEAPF32[$5_1 + 52 >> 2] - HEAPF32[$5_1 + 36 >> 2]) * HEAPF32[$2_1 + 4 >> 2])) + Math_fround(Math_fround(HEAPF32[$5_1 + 56 >> 2] - HEAPF32[$5_1 + 40 >> 2]) * HEAPF32[$2_1 + 8 >> 2])))) / HEAPF32[$9_1 + 12 >> 2])) : Math_fround(0.0);
  HEAP32[$1_1 + 128 >> 2] = 0;
  HEAP32[$1_1 + 124 >> 2] = $38;
  HEAPF32[$1_1 + 116 >> 2] = $11;
  HEAPF32[$1_1 + 112 >> 2] = Math_fround($8_1 * Math_fround($10 - Math_fround($26_1 + Math_fround($17_1 + Math_fround(Math_fround(Math_fround($23_1 * $16_1) + Math_fround($24_1 * $15_1)) + Math_fround($18_1 * $19_1)))))) + $29_1;
  HEAPF32[$1_1 + 120 >> 2] = -$39_1;
 }
 
 function $824($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10, $11) {
  var $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0;
  $13_1 = HEAP32[$0 + 68 >> 2];
  $12_1 = $13_1;
  label$1 : {
   if (($13_1 | 0) != HEAP32[$0 + 72 >> 2]) {
    break label$1
   }
   $12_1 = $13_1;
   $14 = $13_1 ? $13_1 << 1 : 1;
   if (($13_1 | 0) >= ($14 | 0)) {
    break label$1
   }
   if ($14) {
    $16_1 = $79(Math_imul($14, 152));
    $12_1 = HEAP32[$0 + 68 >> 2];
   } else {
    $12_1 = $13_1
   }
   $15_1 = $12_1;
   if (($15_1 | 0) >= 1) {
    $12_1 = 0;
    while (1) {
     $7($12_1 + $16_1 | 0, HEAP32[$0 + 76 >> 2] + $12_1 | 0, 152);
     $12_1 = $12_1 + 152 | 0;
     $15_1 = $15_1 + -1 | 0;
     if ($15_1) {
      continue
     }
     break;
    };
   }
   $12_1 = HEAP32[$0 + 76 >> 2];
   if ($12_1) {
    if (HEAPU8[$0 + 80 | 0]) {
     $80($12_1)
    }
    HEAP32[$0 + 76 >> 2] = 0;
   }
   HEAP32[$0 + 76 >> 2] = $16_1;
   HEAP32[$0 + 72 >> 2] = $14;
   HEAP8[$0 + 80 | 0] = 1;
   $12_1 = HEAP32[$0 + 68 >> 2];
  }
  HEAP32[$0 + 68 >> 2] = $12_1 + 1;
  $13_1 = HEAP32[$0 + 76 >> 2] + Math_imul($13_1, 152) | 0;
  HEAP32[$13_1 + 140 >> 2] = $4_1;
  $823($0, $13_1, $1_1, $2_1, $3_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10, $11);
 }
 
 function $825($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20 = 0, $21 = 0, $22_1 = 0, $23_1 = 0, $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0);
  HEAP32[$1_1 + 48 >> 2] = -2147483648;
  HEAP32[$1_1 + 52 >> 2] = -2147483648;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP32[$1_1 + 20 >> 2] = 0;
  $6_1 = $1_1 + 56 | 0;
  HEAP32[$6_1 >> 2] = -2147483648;
  HEAP32[$6_1 + 4 >> 2] = 0;
  $6_1 = $1_1 + 24 | 0;
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAPF32[$1_1 + 104 >> 2] = $5_1;
  HEAP32[$1_1 + 96 >> 2] = 0;
  HEAP32[$1_1 + 100 >> 2] = 0;
  $14 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[($14 + Math_imul($3_1, 244) | 0) + 240 >> 2];
  $6_1 = HEAP32[(Math_imul($4_1, 244) + $14 | 0) + 240 >> 2];
  HEAP32[$1_1 + 132 >> 2] = 0;
  HEAP32[$1_1 + 148 >> 2] = $4_1;
  HEAP32[$1_1 + 144 >> 2] = $3_1;
  $7_1 = HEAPF32[$2_1 >> 2];
  $16_1 = HEAPF32[$2_1 + 4 >> 2];
  $9_1 = HEAPF32[$2_1 + 8 >> 2];
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAPF32[$1_1 + 8 >> 2] = -$9_1;
  $8_1 = Math_fround(-$16_1);
  HEAPF32[$1_1 + 4 >> 2] = $8_1;
  $17_1 = Math_fround(-$7_1);
  HEAPF32[$1_1 >> 2] = $17_1;
  $19_1 = $1_1;
  if ($0) {
   $20 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 360 >> 2] * $8_1) - Math_fround($7_1 * HEAPF32[$0 + 356 >> 2])) - Math_fround($9_1 * HEAPF32[$0 + 364 >> 2])) * HEAPF32[$0 + 612 >> 2])), wasm2js_scratch_load_i32(0));
   $21 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 344 >> 2] * $8_1) - Math_fround($7_1 * HEAPF32[$0 + 340 >> 2])) - Math_fround($9_1 * HEAPF32[$0 + 348 >> 2])) * HEAPF32[$0 + 608 >> 2])), wasm2js_scratch_load_i32(0));
   $18_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 328 >> 2] * $8_1) - Math_fround($7_1 * HEAPF32[$0 + 324 >> 2])) - Math_fround($9_1 * HEAPF32[$0 + 332 >> 2])) * HEAPF32[$0 + 604 >> 2])), wasm2js_scratch_load_i32(0));
  } else {
   $18_1 = 0
  }
  HEAP32[$19_1 + 64 >> 2] = $18_1;
  HEAP32[$1_1 + 76 >> 2] = 0;
  HEAP32[$1_1 + 72 >> 2] = $20;
  HEAP32[$1_1 + 68 >> 2] = $21;
  $10 = HEAPF32[$2_1 >> 2];
  $11 = HEAPF32[$2_1 + 4 >> 2];
  $12_1 = HEAPF32[$2_1 + 8 >> 2];
  HEAP32[$1_1 + 44 >> 2] = HEAP32[$2_1 + 12 >> 2];
  HEAPF32[$1_1 + 40 >> 2] = $12_1;
  HEAPF32[$1_1 + 36 >> 2] = $11;
  HEAPF32[$1_1 + 32 >> 2] = $10;
  $2_1 = 0;
  if ($6_1) {
   $22_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround($10 * HEAPF32[$6_1 + 356 >> 2]) + Math_fround($11 * HEAPF32[$6_1 + 360 >> 2])) + Math_fround($12_1 * HEAPF32[$6_1 + 364 >> 2])) * HEAPF32[$6_1 + 612 >> 2])), wasm2js_scratch_load_i32(0));
   $23_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround($10 * HEAPF32[$6_1 + 324 >> 2]) + Math_fround($11 * HEAPF32[$6_1 + 328 >> 2])) + Math_fround($12_1 * HEAPF32[$6_1 + 332 >> 2])) * HEAPF32[$6_1 + 604 >> 2])), wasm2js_scratch_load_i32(0));
   $2_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround($10 * HEAPF32[$6_1 + 340 >> 2]) + Math_fround($11 * HEAPF32[$6_1 + 344 >> 2])) + Math_fround($12_1 * HEAPF32[$6_1 + 348 >> 2])) * HEAPF32[$6_1 + 608 >> 2])), wasm2js_scratch_load_i32(0));
  }
  HEAP32[$1_1 + 80 >> 2] = $23_1;
  HEAP32[$1_1 + 92 >> 2] = 0;
  HEAP32[$1_1 + 88 >> 2] = $22_1;
  HEAP32[$1_1 + 84 >> 2] = $2_1;
  if ($0) {
   $15_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 360 >> 2] * $8_1) - Math_fround($7_1 * HEAPF32[$0 + 356 >> 2])) - Math_fround($9_1 * HEAPF32[$0 + 364 >> 2]));
   $24_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 344 >> 2] * $8_1) - Math_fround($7_1 * HEAPF32[$0 + 340 >> 2])) - Math_fround($9_1 * HEAPF32[$0 + 348 >> 2]));
   $13_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 328 >> 2] * $8_1) - Math_fround($7_1 * HEAPF32[$0 + 324 >> 2])) - Math_fround($9_1 * HEAPF32[$0 + 332 >> 2]));
  }
  $2_1 = $1_1;
  $13_1 = Math_fround(Math_fround(Math_fround(Math_fround($24_1 * $8_1) - Math_fround($7_1 * $13_1)) - Math_fround($9_1 * $15_1)) + Math_fround(0.0));
  if ($6_1) {
   $25 = Math_fround(Math_fround(Math_fround($10 * HEAPF32[$6_1 + 356 >> 2]) + Math_fround($11 * HEAPF32[$6_1 + 360 >> 2])) + Math_fround($12_1 * HEAPF32[$6_1 + 364 >> 2]));
   $26_1 = Math_fround(Math_fround(Math_fround($10 * HEAPF32[$6_1 + 340 >> 2]) + Math_fround($11 * HEAPF32[$6_1 + 344 >> 2])) + Math_fround($12_1 * HEAPF32[$6_1 + 348 >> 2]));
   $7_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 + 324 >> 2] * $10) + Math_fround(HEAPF32[$6_1 + 328 >> 2] * $11)) + Math_fround(HEAPF32[$6_1 + 332 >> 2] * $12_1));
  } else {
   $7_1 = Math_fround(0.0)
  }
  $15_1 = Math_fround(Math_fround(1.0) / Math_fround($13_1 + Math_fround(Math_fround(Math_fround($7_1 * $10) + Math_fround($26_1 * $11)) + Math_fround($25 * $12_1))));
  HEAPF32[$2_1 + 108 >> 2] = $15_1;
  $7_1 = Math_fround(0.0);
  $8_1 = Math_fround(0.0);
  $13_1 = Math_fround(0.0);
  if ($0) {
   $0 = Math_imul($3_1, 244) + $14 | 0;
   $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 176 >> 2] + HEAPF32[$0 + 208 >> 2]) * Math_fround(0.0)) + Math_fround(Math_fround(HEAPF32[$0 + 180 >> 2] + HEAPF32[$0 + 212 >> 2]) * Math_fround(0.0))) + Math_fround(Math_fround(HEAPF32[$0 + 184 >> 2] + HEAPF32[$0 + 216 >> 2]) * Math_fround(0.0)));
   $13_1 = HEAPF32[$0 + 192 >> 2];
   $27_1 = HEAPF32[$0 + 196 >> 2];
   $8_1 = HEAPF32[$0 + 200 >> 2];
  }
  $9_1 = Math_fround($7_1 + Math_fround(Math_fround(Math_fround($13_1 * $17_1) - Math_fround($16_1 * $27_1)) - Math_fround($9_1 * $8_1)));
  label$6 : {
   if (!$6_1) {
    $7_1 = Math_fround(-0.0);
    $8_1 = Math_fround(0.0);
    $13_1 = Math_fround(0.0);
    break label$6;
   }
   $0 = Math_imul($4_1, 244) + $14 | 0;
   $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 176 >> 2] + HEAPF32[$0 + 208 >> 2]) * Math_fround(-0.0)) + Math_fround(Math_fround(HEAPF32[$0 + 180 >> 2] + HEAPF32[$0 + 212 >> 2]) * Math_fround(-0.0))) + Math_fround(Math_fround(HEAPF32[$0 + 184 >> 2] + HEAPF32[$0 + 216 >> 2]) * Math_fround(-0.0)));
   $28_1 = HEAPF32[$0 + 200 >> 2];
   $8_1 = HEAPF32[$0 + 196 >> 2];
   $13_1 = HEAPF32[$0 + 192 >> 2];
  }
  HEAPF32[$1_1 + 124 >> 2] = $5_1;
  HEAPF32[$1_1 + 116 >> 2] = 0;
  HEAPF32[$1_1 + 120 >> 2] = -$5_1;
  HEAPF32[$1_1 + 112 >> 2] = $15_1 * Math_fround(Math_fround(0.0) - Math_fround($9_1 + Math_fround($7_1 + Math_fround(Math_fround($12_1 * $28_1) + Math_fround(Math_fround($11 * $8_1) + Math_fround($10 * $13_1))))));
 }
 
 function $826($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0;
  $7_1 = HEAP32[$0 + 88 >> 2];
  $6_1 = $7_1;
  label$1 : {
   if (($7_1 | 0) != HEAP32[$0 + 92 >> 2]) {
    break label$1
   }
   $6_1 = $7_1;
   $8_1 = $7_1 ? $7_1 << 1 : 1;
   if (($7_1 | 0) >= ($8_1 | 0)) {
    break label$1
   }
   if ($8_1) {
    $10 = $79(Math_imul($8_1, 152));
    $6_1 = HEAP32[$0 + 88 >> 2];
   } else {
    $6_1 = $7_1
   }
   $9_1 = $6_1;
   if (($9_1 | 0) >= 1) {
    $6_1 = 0;
    while (1) {
     $7($6_1 + $10 | 0, HEAP32[$0 + 96 >> 2] + $6_1 | 0, 152);
     $6_1 = $6_1 + 152 | 0;
     $9_1 = $9_1 + -1 | 0;
     if ($9_1) {
      continue
     }
     break;
    };
   }
   $6_1 = HEAP32[$0 + 96 >> 2];
   if ($6_1) {
    if (HEAPU8[$0 + 100 | 0]) {
     $80($6_1)
    }
    HEAP32[$0 + 96 >> 2] = 0;
   }
   HEAP32[$0 + 96 >> 2] = $10;
   HEAP32[$0 + 92 >> 2] = $8_1;
   HEAP8[$0 + 100 | 0] = 1;
   $6_1 = HEAP32[$0 + 88 >> 2];
  }
  HEAP32[$0 + 88 >> 2] = $6_1 + 1;
  $7_1 = HEAP32[$0 + 96 >> 2] + Math_imul($7_1, 152) | 0;
  HEAP32[$7_1 + 140 >> 2] = $4_1;
  $825($0, $7_1, $1_1, $2_1, $3_1, $5_1);
 }
 
 function $827($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 256 | 0;
  global$0 = $4_1;
  $3_1 = HEAP32[$1_1 + 212 >> 2];
  label$1 : {
   if (($3_1 | 0) > -1) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[$1_1 + 252 >> 2];
    if (!($3_1 & 2)) {
     break label$2
    }
    $3_1 = $3_1 << 30 >> 31 & $1_1;
    if (HEAPU8[$3_1 + 204 | 0] & 2 ? 0 : HEAPF32[$3_1 + 404 >> 2] == Math_fround(0.0)) {
     break label$2
    }
    $3_1 = HEAP32[$0 + 8 >> 2];
    $17($4_1 + 8 | 0, 0, 244);
    $822($828($0 + 4 | 0, $4_1 + 8 | 0), $1_1, $2_1);
    HEAP32[$1_1 + 212 >> 2] = $3_1;
    break label$1;
   }
   $3_1 = HEAP32[$0 + 188 >> 2];
   if (($3_1 | 0) > -1) {
    break label$1
   }
   HEAP32[$0 + 188 >> 2] = HEAP32[$0 + 8 >> 2];
   $17($4_1 + 8 | 0, 0, 244);
   $1_1 = $828($0 + 4 | 0, $4_1 + 8 | 0);
   $3_1 = $1_1 + 88 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $1_1 + 80 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $1_1 + 72 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 64 >> 2] = 0;
   HEAP32[$1_1 + 68 >> 2] = 0;
   HEAP32[$1_1 + 144 >> 2] = 0;
   HEAP32[$1_1 + 148 >> 2] = 0;
   $3_1 = $1_1 + 152 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $1_1 + 160 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $1_1 + 168 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 8 >> 2] = 0;
   HEAP32[$1_1 >> 2] = 1065353216;
   $3_1 = $1_1 + 12 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $1_1 + 24 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 20 >> 2] = 1065353216;
   HEAP32[$1_1 + 32 >> 2] = 0;
   HEAP32[$1_1 + 36 >> 2] = 0;
   $3_1 = $1_1 + 44 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 40 >> 2] = 1065353216;
   $3_1 = $1_1 + 52 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 60 >> 2] = 0;
   $3_1 = $1_1 + 136 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 128 >> 2] = 0;
   HEAP32[$1_1 + 132 >> 2] = 0;
   $3_1 = $1_1 + 120 | 0;
   HEAP32[$3_1 >> 2] = 1065353216;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 112 >> 2] = 1065353216;
   HEAP32[$1_1 + 116 >> 2] = 1065353216;
   $3_1 = $1_1 + 104 | 0;
   HEAP32[$3_1 >> 2] = 1065353216;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 96 >> 2] = 1065353216;
   HEAP32[$1_1 + 100 >> 2] = 1065353216;
   $3_1 = $1_1 + 232 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $1_1 + 224 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $1_1 + 216 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $1_1 + 208 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $1_1 + 200 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $1_1 + 192 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   $3_1 = $1_1 + 184 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 176 >> 2] = 0;
   HEAP32[$1_1 + 180 >> 2] = 0;
   HEAP32[$1_1 + 240 >> 2] = 0;
   $3_1 = HEAP32[$0 + 188 >> 2];
  }
  global$0 = $4_1 + 256 | 0;
  return $3_1;
 }
 
 function $828($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0;
  $4_1 = HEAP32[$0 + 4 >> 2];
  $7_1 = $4_1;
  label$1 : {
   if (($4_1 | 0) != HEAP32[$0 + 8 >> 2]) {
    break label$1
   }
   $7_1 = $4_1;
   $11 = $4_1 ? $4_1 << 1 : 1;
   if (($4_1 | 0) >= ($11 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$11) {
     $7_1 = $4_1;
     break label$2;
    }
    $13_1 = $79(Math_imul($11, 244));
    $7_1 = HEAP32[$0 + 4 >> 2];
   }
   if (($7_1 | 0) >= 1) {
    $2_1 = 64;
    while (1) {
     $8_1 = HEAP32[$0 + 12 >> 2] + $2_1 | 0;
     $5_1 = $8_1 + -64 | 0;
     $10 = HEAP32[$5_1 + 4 >> 2];
     $6_1 = $2_1 + $13_1 | 0;
     $3_1 = $6_1 + -64 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $10;
     $5_1 = $5_1 + 8 | 0;
     $9_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $9_1;
     $3_1 = $8_1 + -48 | 0;
     $10 = $3_1 + 8 | 0;
     $12_1 = HEAP32[$10 + 4 >> 2];
     $5_1 = $6_1 + -48 | 0;
     $9_1 = $5_1 + 8 | 0;
     HEAP32[$9_1 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $12_1;
     $9_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $9_1;
     $3_1 = $8_1 + -32 | 0;
     $10 = $3_1 + 8 | 0;
     $12_1 = HEAP32[$10 + 4 >> 2];
     $5_1 = $6_1 + -32 | 0;
     $9_1 = $5_1 + 8 | 0;
     HEAP32[$9_1 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $12_1;
     $9_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $9_1;
     $5_1 = $8_1 + -16 | 0;
     $10 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $6_1 + -16 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $10;
     $5_1 = $5_1 + 8 | 0;
     $9_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $9_1;
     $7($6_1, $8_1, 180);
     $2_1 = $2_1 + 244 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue
     }
     break;
    };
   }
   $7_1 = HEAP32[$0 + 12 >> 2];
   if ($7_1) {
    if (HEAPU8[$0 + 16 | 0]) {
     $80($7_1)
    }
    HEAP32[$0 + 12 >> 2] = 0;
   }
   HEAP32[$0 + 12 >> 2] = $13_1;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = $11;
   $7_1 = HEAP32[$0 + 4 >> 2];
  }
  HEAP32[$0 + 4 >> 2] = $7_1 + 1;
  $6_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  $7_1 = Math_imul($4_1, 244);
  $4_1 = $7_1 + HEAP32[$0 + 12 >> 2] | 0;
  $2_1 = $4_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $8_1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  $6_1 = $1_1 + 24 | 0;
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  $2_1 = $4_1 + 24 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $8_1;
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$4_1 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$4_1 + 32 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$4_1 + 36 >> 2] = $2_1;
  $6_1 = $1_1 + 40 | 0;
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  $2_1 = $4_1 + 40 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $8_1;
  $2_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$4_1 + 48 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$4_1 + 52 >> 2] = $2_1;
  $6_1 = $1_1 + 56 | 0;
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  $2_1 = $4_1 + 56 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $8_1;
  $7($4_1 - -64 | 0, $1_1 - -64 | 0, 180);
  return $7_1 + HEAP32[$0 + 12 >> 2] | 0;
 }
 
 function $829($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  var $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32 = 0, $33_1 = 0, $34 = Math_fround(0);
  HEAP32[$6_1 >> 2] = HEAP32[$5_1 + 28 >> 2];
  $25 = HEAP32[$0 + 16 >> 2];
  $32 = $25 + Math_imul($3_1, 244) | 0;
  $0 = HEAP32[$32 + 240 >> 2];
  $33_1 = Math_imul($2_1, 244) + $25 | 0;
  $13_1 = HEAP32[$33_1 + 240 >> 2];
  $22_1 = HEAPF32[$5_1 + 12 >> 2];
  $30 = HEAPF32[$5_1 + 36 >> 2];
  $15_1 = HEAPF32[$5_1 + 40 >> 2];
  $17_1 = HEAP32[$4_1 + 120 >> 2];
  label$1 : {
   if ($17_1 & 6) {
    $15_1 = $17_1 & 2 ? HEAPF32[$4_1 + 144 >> 2] : $15_1;
    if (!($17_1 & 4)) {
     break label$1
    }
    $30 = HEAPF32[$4_1 + 148 >> 2];
    break label$1;
   }
   if (!($17_1 & 8)) {
    break label$1
   }
   $10 = Math_fround($22_1 * HEAPF32[$4_1 + 144 >> 2]);
   $9_1 = Math_fround(Math_max(Math_fround($10 + HEAPF32[$4_1 + 148 >> 2]), Math_fround(1.1920928955078125e-07)));
   $30 = Math_fround($10 / $9_1);
   $15_1 = Math_fround(Math_fround(1.0) / $9_1);
  }
  $9_1 = HEAPF32[$4_1 + 68 >> 2];
  $10 = HEAPF32[$7_1 >> 2];
  $12_1 = HEAPF32[$7_1 + 4 >> 2];
  $11 = HEAPF32[$4_1 + 64 >> 2];
  $18_1 = Math_fround(Math_fround($9_1 * $10) - Math_fround($12_1 * $11));
  $14 = HEAPF32[$7_1 + 8 >> 2];
  $19_1 = Math_fround($14 * $11);
  $11 = HEAPF32[$4_1 + 72 >> 2];
  $16_1 = Math_fround($19_1 - Math_fround($11 * $10));
  $20 = Math_fround(Math_fround($12_1 * $11) - Math_fround($14 * $9_1));
  $14 = Math_fround(0.0);
  $9_1 = Math_fround(0.0);
  $10 = Math_fround(0.0);
  if ($13_1) {
   $24_1 = Math_fround(Math_fround(Math_fround(Math_fround($20 * HEAPF32[$13_1 + 356 >> 2]) + Math_fround($16_1 * HEAPF32[$13_1 + 360 >> 2])) + Math_fround($18_1 * HEAPF32[$13_1 + 364 >> 2])) * HEAPF32[$13_1 + 612 >> 2]);
   $10 = Math_fround(Math_fround(Math_fround(Math_fround($20 * HEAPF32[$13_1 + 340 >> 2]) + Math_fround($16_1 * HEAPF32[$13_1 + 344 >> 2])) + Math_fround($18_1 * HEAPF32[$13_1 + 348 >> 2])) * HEAPF32[$13_1 + 608 >> 2]);
   $9_1 = Math_fround(Math_fround(Math_fround(Math_fround($20 * HEAPF32[$13_1 + 324 >> 2]) + Math_fround($16_1 * HEAPF32[$13_1 + 328 >> 2])) + Math_fround($18_1 * HEAPF32[$13_1 + 332 >> 2])) * HEAPF32[$13_1 + 604 >> 2]);
  }
  HEAPF32[$1_1 + 64 >> 2] = $9_1;
  HEAP32[$1_1 + 76 >> 2] = 0;
  HEAPF32[$1_1 + 72 >> 2] = $24_1;
  HEAPF32[$1_1 + 68 >> 2] = $10;
  $12_1 = HEAPF32[$4_1 + 68 >> 2];
  $11 = HEAPF32[$8_1 >> 2];
  $19_1 = HEAPF32[$8_1 + 4 >> 2];
  $21 = HEAPF32[$4_1 + 64 >> 2];
  $26_1 = Math_fround(Math_fround($12_1 * $11) - Math_fround($19_1 * $21));
  $27_1 = HEAPF32[$8_1 + 8 >> 2];
  $23_1 = Math_fround($27_1 * $21);
  $21 = HEAPF32[$4_1 + 72 >> 2];
  $28_1 = Math_fround($23_1 - Math_fround($21 * $11));
  $21 = Math_fround(Math_fround($19_1 * $21) - Math_fround($27_1 * $12_1));
  $12_1 = Math_fround(0.0);
  $11 = Math_fround(0.0);
  $27_1 = Math_fround(Math_fround(1.0) / $22_1);
  if ($0) {
   $14 = Math_fround(-$28_1);
   $11 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 360 >> 2] * $14) - Math_fround($21 * HEAPF32[$0 + 356 >> 2])) - Math_fround($26_1 * HEAPF32[$0 + 364 >> 2])) * HEAPF32[$0 + 612 >> 2]);
   $12_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 344 >> 2] * $14) - Math_fround($21 * HEAPF32[$0 + 340 >> 2])) - Math_fround($26_1 * HEAPF32[$0 + 348 >> 2])) * HEAPF32[$0 + 608 >> 2]);
   $14 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 328 >> 2] * $14) - Math_fround($21 * HEAPF32[$0 + 324 >> 2])) - Math_fround($26_1 * HEAPF32[$0 + 332 >> 2])) * HEAPF32[$0 + 604 >> 2]);
  }
  HEAPF32[$1_1 + 80 >> 2] = $14;
  HEAP32[$1_1 + 92 >> 2] = 0;
  HEAPF32[$1_1 + 88 >> 2] = $11;
  HEAPF32[$1_1 + 84 >> 2] = $12_1;
  $22_1 = Math_fround(0.0);
  $19_1 = Math_fround(0.0);
  if ($13_1) {
   $19_1 = HEAPF32[$7_1 + 8 >> 2];
   $29_1 = HEAPF32[$7_1 + 4 >> 2];
   $34 = Math_fround(Math_fround(Math_fround($10 * $19_1) - Math_fround($24_1 * $29_1)) * HEAPF32[$4_1 + 64 >> 2]);
   $23_1 = $24_1;
   $24_1 = HEAPF32[$7_1 >> 2];
   $19_1 = Math_fround(HEAPF32[$13_1 + 404 >> 2] + Math_fround(Math_fround($34 + Math_fround(Math_fround(Math_fround($23_1 * $24_1) - Math_fround($19_1 * $9_1)) * HEAPF32[$4_1 + 68 >> 2])) + Math_fround(Math_fround(Math_fround($29_1 * $9_1) - Math_fround($10 * $24_1)) * HEAPF32[$4_1 + 72 >> 2])));
  }
  $17_1 = $1_1;
  $29_1 = HEAPF32[$6_1 >> 2];
  $24_1 = Math_fround($27_1 * $15_1);
  $23_1 = $24_1;
  if ($0) {
   $9_1 = HEAPF32[$8_1 + 4 >> 2];
   $10 = HEAPF32[$8_1 + 8 >> 2];
   $22_1 = Math_fround(Math_fround(Math_fround($11 * $9_1) - Math_fround($12_1 * $10)) * HEAPF32[$4_1 + 64 >> 2]);
   $15_1 = Math_fround($14 * $10);
   $10 = HEAPF32[$8_1 >> 2];
   $22_1 = Math_fround(HEAPF32[$0 + 404 >> 2] + Math_fround(Math_fround($22_1 + Math_fround(Math_fround($15_1 - Math_fround($11 * $10)) * HEAPF32[$4_1 + 68 >> 2])) + Math_fround(Math_fround(Math_fround($12_1 * $10) - Math_fround($14 * $9_1)) * HEAPF32[$4_1 + 72 >> 2])));
  }
  HEAPF32[$17_1 + 108 >> 2] = $29_1 / Math_fround($23_1 + Math_fround($19_1 + $22_1));
  $6_1 = $1_1 + 16 | 0;
  label$7 : {
   if ($13_1) {
    $17_1 = $4_1 - -64 | 0;
    $31_1 = HEAP32[$17_1 + 4 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$17_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $31_1;
    $17_1 = $17_1 + 8 | 0;
    $31_1 = HEAP32[$17_1 + 4 >> 2];
    $6_1 = $6_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$17_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $31_1;
    HEAP32[$1_1 + 12 >> 2] = 0;
    HEAPF32[$1_1 + 8 >> 2] = $18_1;
    HEAPF32[$1_1 + 4 >> 2] = $16_1;
    HEAPF32[$1_1 >> 2] = $20;
    break label$7;
   }
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $17_1 = $1_1 + 24 | 0;
   HEAP32[$17_1 >> 2] = 0;
   HEAP32[$17_1 + 4 >> 2] = 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[$6_1 + 4 >> 2] = 0;
   $6_1 = $1_1 + 8 | 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[$6_1 + 4 >> 2] = 0;
  }
  label$9 : {
   if ($0) {
    $9_1 = HEAPF32[$4_1 + 64 >> 2];
    $10 = HEAPF32[$4_1 + 68 >> 2];
    $12_1 = HEAPF32[$4_1 + 72 >> 2];
    HEAP32[$1_1 + 60 >> 2] = 0;
    HEAP32[$1_1 + 44 >> 2] = 0;
    HEAPF32[$1_1 + 40 >> 2] = -$26_1;
    HEAPF32[$1_1 + 36 >> 2] = -$28_1;
    HEAPF32[$1_1 + 32 >> 2] = -$21;
    HEAPF32[$1_1 + 56 >> 2] = -$12_1;
    HEAPF32[$1_1 + 52 >> 2] = -$10;
    HEAPF32[$1_1 + 48 >> 2] = -$9_1;
    break label$9;
   }
   HEAP32[$1_1 + 32 >> 2] = 0;
   HEAP32[$1_1 + 36 >> 2] = 0;
   $6_1 = $1_1 + 56 | 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[$6_1 + 4 >> 2] = 0;
   $6_1 = $1_1 + 48 | 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[$6_1 + 4 >> 2] = 0;
   $6_1 = $1_1 + 40 | 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[$6_1 + 4 >> 2] = 0;
  }
  $22_1 = HEAPF32[$5_1 + 64 >> 2];
  $19_1 = HEAPF32[$4_1 + 80 >> 2];
  $14 = Math_fround(0.0);
  $9_1 = Math_fround(0.0);
  $10 = Math_fround(0.0);
  $12_1 = Math_fround(0.0);
  if ($13_1) {
   $9_1 = HEAPF32[$7_1 + 4 >> 2];
   $10 = HEAPF32[$13_1 + 388 >> 2];
   $11 = HEAPF32[$13_1 + 392 >> 2];
   $15_1 = HEAPF32[$7_1 >> 2];
   $12_1 = Math_fround(Math_fround(Math_fround($9_1 * $10) - Math_fround($11 * $15_1)) + HEAPF32[$13_1 + 380 >> 2]);
   $18_1 = HEAPF32[$13_1 + 396 >> 2];
   $23_1 = Math_fround($18_1 * $15_1);
   $15_1 = HEAPF32[$7_1 + 8 >> 2];
   $10 = Math_fround(HEAPF32[$13_1 + 376 >> 2] + Math_fround($23_1 - Math_fround($15_1 * $10)));
   $9_1 = Math_fround(Math_fround(Math_fround($11 * $15_1) - Math_fround($18_1 * $9_1)) + HEAPF32[$13_1 + 372 >> 2]);
  }
  $11 = Math_fround(0.0);
  $18_1 = Math_fround(0.0);
  if ($0) {
   $15_1 = HEAPF32[$8_1 + 4 >> 2];
   $11 = HEAPF32[$0 + 388 >> 2];
   $14 = HEAPF32[$0 + 392 >> 2];
   $16_1 = HEAPF32[$8_1 >> 2];
   $18_1 = Math_fround(Math_fround(Math_fround($15_1 * $11) - Math_fround($14 * $16_1)) + HEAPF32[$0 + 380 >> 2]);
   $20 = HEAPF32[$0 + 396 >> 2];
   $23_1 = Math_fround($20 * $16_1);
   $16_1 = HEAPF32[$8_1 + 8 >> 2];
   $11 = Math_fround(HEAPF32[$0 + 376 >> 2] + Math_fround($23_1 - Math_fround($16_1 * $11)));
   $14 = Math_fround(Math_fround(Math_fround($14 * $16_1) - Math_fround($20 * $15_1)) + HEAPF32[$0 + 372 >> 2]);
  }
  $6_1 = $32 + 240 | 0;
  $7_1 = $33_1 + 240 | 0;
  $15_1 = HEAPF32[$4_1 + 72 >> 2];
  $16_1 = HEAPF32[$4_1 + 64 >> 2];
  $20 = HEAPF32[$4_1 + 68 >> 2];
  HEAP32[$1_1 + 104 >> 2] = HEAP32[$4_1 + 84 >> 2];
  $9_1 = Math_fround(Math_fround(Math_fround($16_1 * Math_fround($9_1 - $14)) + Math_fround($20 * Math_fround($10 - $11))) + Math_fround($15_1 * Math_fround($12_1 - $18_1)));
  $15_1 = Math_fround(Math_abs($9_1)) < HEAPF32[$5_1 + 96 >> 2] ? Math_fround(0.0) : Math_fround(HEAPF32[$4_1 + 96 >> 2] * Math_fround(-$9_1));
  label$13 : {
   if (HEAPU8[$5_1 + 72 | 0] & 4) {
    $9_1 = Math_fround(HEAPF32[$4_1 + 124 >> 2] * HEAPF32[$5_1 + 68 >> 2]);
    HEAPF32[$1_1 + 100 >> 2] = $9_1;
    if (!(!$13_1 | !HEAP32[$7_1 >> 2])) {
     $10 = HEAPF32[$13_1 + 416 >> 2];
     $12_1 = HEAPF32[$1_1 + 24 >> 2];
     $11 = HEAPF32[$13_1 + 412 >> 2];
     $14 = HEAPF32[$1_1 + 20 >> 2];
     $4_1 = Math_imul($2_1, 244) + $25 | 0;
     HEAPF32[$4_1 + 64 >> 2] = Math_fround(HEAPF32[$4_1 + 112 >> 2] * Math_fround($9_1 * Math_fround(Math_fround(HEAPF32[$1_1 + 16 >> 2] * HEAPF32[$4_1 + 128 >> 2]) * HEAPF32[$13_1 + 408 >> 2]))) + HEAPF32[$4_1 + 64 >> 2];
     $8_1 = $4_1 + 68 | 0;
     HEAPF32[$8_1 >> 2] = Math_fround(Math_fround($9_1 * Math_fround($11 * Math_fround($14 * HEAPF32[$4_1 + 132 >> 2]))) * HEAPF32[$4_1 + 116 >> 2]) + HEAPF32[$8_1 >> 2];
     $8_1 = $4_1 + 72 | 0;
     HEAPF32[$8_1 >> 2] = Math_fround(Math_fround($9_1 * Math_fround($10 * Math_fround($12_1 * HEAPF32[$4_1 + 136 >> 2]))) * HEAPF32[$4_1 + 120 >> 2]) + HEAPF32[$8_1 >> 2];
     $10 = HEAPF32[$1_1 + 72 >> 2];
     $12_1 = HEAPF32[$1_1 + 68 >> 2];
     HEAPF32[$4_1 + 80 >> 2] = Math_fround(Math_fround($9_1 * HEAPF32[$4_1 + 96 >> 2]) * HEAPF32[$1_1 + 64 >> 2]) + HEAPF32[$4_1 + 80 >> 2];
     $11 = HEAPF32[$4_1 + 104 >> 2];
     $8_1 = $4_1 + 84 | 0;
     HEAPF32[$8_1 >> 2] = Math_fround($12_1 * Math_fround($9_1 * HEAPF32[$4_1 + 100 >> 2])) + HEAPF32[$8_1 >> 2];
     $4_1 = $4_1 + 88 | 0;
     HEAPF32[$4_1 >> 2] = Math_fround($10 * Math_fround($9_1 * $11)) + HEAPF32[$4_1 >> 2];
    }
    if (!$0 | !HEAP32[$6_1 >> 2]) {
     break label$13
    }
    $10 = HEAPF32[$0 + 416 >> 2];
    $12_1 = HEAPF32[$1_1 + 56 >> 2];
    $11 = HEAPF32[$0 + 412 >> 2];
    $14 = HEAPF32[$1_1 + 52 >> 2];
    $18_1 = HEAPF32[$1_1 + 88 >> 2];
    $16_1 = HEAPF32[$1_1 + 84 >> 2];
    $20 = HEAPF32[$1_1 + 80 >> 2];
    $4_1 = Math_imul($3_1, 244) + $25 | 0;
    $9_1 = Math_fround(-HEAPF32[$1_1 + 100 >> 2]);
    HEAPF32[$4_1 + 64 >> 2] = HEAPF32[$4_1 + 64 >> 2] - Math_fround(HEAPF32[$4_1 + 112 >> 2] * Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 128 >> 2] * HEAPF32[$1_1 + 48 >> 2]) * HEAPF32[$0 + 408 >> 2]) * $9_1));
    $0 = $4_1 + 68 | 0;
    HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] - Math_fround(Math_fround(Math_fround($11 * Math_fround($14 * HEAPF32[$4_1 + 132 >> 2])) * $9_1) * HEAPF32[$4_1 + 116 >> 2]);
    $0 = $4_1 + 72 | 0;
    HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] - Math_fround(Math_fround(Math_fround($10 * Math_fround($12_1 * HEAPF32[$4_1 + 136 >> 2])) * $9_1) * HEAPF32[$4_1 + 120 >> 2]);
    HEAPF32[$4_1 + 80 >> 2] = HEAPF32[$4_1 + 80 >> 2] - Math_fround($20 * Math_fround(HEAPF32[$4_1 + 96 >> 2] * $9_1));
    $10 = HEAPF32[$4_1 + 104 >> 2];
    $0 = $4_1 + 84 | 0;
    HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] - Math_fround($16_1 * Math_fround(HEAPF32[$4_1 + 100 >> 2] * $9_1));
    $0 = $4_1 + 88 | 0;
    HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] - Math_fround($18_1 * Math_fround($10 * $9_1));
    break label$13;
   }
   HEAP32[$1_1 + 100 >> 2] = 0;
  }
  $4_1 = $15_1 <= Math_fround(0.0);
  HEAP32[$1_1 + 96 >> 2] = 0;
  $10 = Math_fround(0.0);
  $12_1 = Math_fround(0.0);
  $11 = Math_fround(0.0);
  $18_1 = Math_fround(0.0);
  $16_1 = Math_fround(0.0);
  $20 = Math_fround(0.0);
  $26_1 = Math_fround(0.0);
  if (HEAP32[$7_1 >> 2]) {
   $0 = Math_imul($2_1, 244) + $25 | 0;
   $26_1 = HEAPF32[$0 + 224 >> 2];
   $18_1 = HEAPF32[$0 + 208 >> 2];
   $16_1 = HEAPF32[$0 + 232 >> 2];
   $20 = HEAPF32[$0 + 228 >> 2];
   $11 = HEAPF32[$0 + 212 >> 2];
   $12_1 = HEAPF32[$0 + 216 >> 2];
  }
  $14 = Math_fround($19_1 + $22_1);
  $28_1 = $4_1 ? Math_fround(0.0) : $15_1;
  $9_1 = Math_fround(0.0);
  $21 = Math_fround(0.0);
  $15_1 = Math_fround(0.0);
  $22_1 = Math_fround(0.0);
  $19_1 = Math_fround(0.0);
  if (HEAP32[$6_1 >> 2]) {
   $0 = Math_imul($3_1, 244) + $25 | 0;
   $19_1 = HEAPF32[$0 + 224 >> 2];
   $10 = HEAPF32[$0 + 208 >> 2];
   $15_1 = HEAPF32[$0 + 232 >> 2];
   $22_1 = HEAPF32[$0 + 228 >> 2];
   $21 = HEAPF32[$0 + 216 >> 2];
   $9_1 = HEAPF32[$0 + 212 >> 2];
  }
  $0 = Math_imul($2_1, 244) + $25 | 0;
  $23_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($18_1 + HEAPF32[$0 + 176 >> 2]) * HEAPF32[$1_1 + 16 >> 2]) + Math_fround(Math_fround($11 + HEAPF32[$0 + 180 >> 2]) * HEAPF32[$1_1 + 20 >> 2])) + Math_fround(Math_fround($12_1 + HEAPF32[$0 + 184 >> 2]) * HEAPF32[$1_1 + 24 >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround($26_1 + HEAPF32[$0 + 192 >> 2]) * HEAPF32[$1_1 >> 2]) + Math_fround(Math_fround($20 + HEAPF32[$0 + 196 >> 2]) * HEAPF32[$1_1 + 4 >> 2])) + Math_fround(Math_fround($16_1 + HEAPF32[$0 + 200 >> 2]) * HEAPF32[$1_1 + 8 >> 2])));
  $0 = Math_imul($3_1, 244) + $25 | 0;
  $9_1 = Math_fround($28_1 - Math_fround($23_1 + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($10 + HEAPF32[$0 + 176 >> 2]) * HEAPF32[$1_1 + 48 >> 2]) + Math_fround(Math_fround($9_1 + HEAPF32[$0 + 180 >> 2]) * HEAPF32[$1_1 + 52 >> 2])) + Math_fround(Math_fround($21 + HEAPF32[$0 + 184 >> 2]) * HEAPF32[$1_1 + 56 >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround($19_1 + HEAPF32[$0 + 192 >> 2]) * HEAPF32[$1_1 + 32 >> 2]) + Math_fround(Math_fround($22_1 + HEAPF32[$0 + 196 >> 2]) * HEAPF32[$1_1 + 36 >> 2])) + Math_fround(Math_fround($15_1 + HEAPF32[$0 + 200 >> 2]) * HEAPF32[$1_1 + 40 >> 2])))));
  $10 = Math_fround(0.0);
  label$18 : {
   if (!!($14 > Math_fround(0.0))) {
    $9_1 = Math_fround($9_1 - Math_fround($27_1 * $14));
    break label$18;
   }
   $10 = Math_fround($27_1 * Math_fround($30 * Math_fround(-$14)));
  }
  $12_1 = HEAPF32[$1_1 + 108 >> 2];
  $9_1 = Math_fround($9_1 * $12_1);
  $10 = Math_fround($10 * $12_1);
  if (!($14 > HEAPF32[$5_1 + 56 >> 2] ^ 1 ? !!HEAP32[$5_1 + 52 >> 2] : 0)) {
   $9_1 = Math_fround($10 + $9_1);
   $10 = Math_fround(0.0);
  }
  HEAPF32[$1_1 + 128 >> 2] = $10;
  HEAPF32[$1_1 + 112 >> 2] = $9_1;
  HEAP32[$1_1 + 120 >> 2] = 0;
  HEAP32[$1_1 + 124 >> 2] = 1343554297;
  HEAPF32[$1_1 + 116 >> 2] = $24_1 * $12_1;
 }
 
 function $830($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0, $20 = 0, $21 = Math_fround(0), $22_1 = Math_fround(0);
  $13_1 = HEAP32[$0 + 16 >> 2];
  $11 = HEAP32[($13_1 + Math_imul($3_1, 244) | 0) + 240 >> 2];
  $12_1 = HEAP32[(Math_imul($2_1, 244) + $13_1 | 0) + 240 >> 2];
  $14 = HEAP32[$0 + 76 >> 2];
  $17_1 = HEAP32[$1_1 + 140 >> 2];
  $19_1 = HEAP32[$5_1 + 72 >> 2];
  $20 = $19_1 & 4;
  label$1 : {
   if ($20) {
    $1_1 = Math_imul($17_1, 152) + $14 | 0;
    $6_1 = Math_fround(HEAPF32[$4_1 + 128 >> 2] * HEAPF32[$5_1 + 68 >> 2]);
    HEAPF32[$1_1 + 100 >> 2] = $6_1;
    if ($12_1) {
     $9_1 = HEAPF32[$12_1 + 416 >> 2];
     $10 = HEAPF32[$1_1 + 24 >> 2];
     $15_1 = HEAPF32[$12_1 + 412 >> 2];
     $16_1 = HEAPF32[$1_1 + 20 >> 2];
     $0 = Math_imul($2_1, 244) + $13_1 | 0;
     $7_1 = HEAPF32[$12_1 + 404 >> 2];
     HEAPF32[$0 + 64 >> 2] = Math_fround(Math_fround($6_1 * Math_fround(Math_fround($7_1 * HEAPF32[$1_1 + 16 >> 2]) * HEAPF32[$12_1 + 408 >> 2])) * HEAPF32[$0 + 112 >> 2]) + HEAPF32[$0 + 64 >> 2];
     $8_1 = $0 + 68 | 0;
     HEAPF32[$8_1 >> 2] = Math_fround(Math_fround($6_1 * Math_fround($15_1 * Math_fround($7_1 * $16_1))) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$8_1 >> 2];
     $8_1 = $0 + 72 | 0;
     HEAPF32[$8_1 >> 2] = Math_fround(Math_fround($6_1 * Math_fround($9_1 * Math_fround($7_1 * $10))) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$8_1 >> 2];
     $7_1 = HEAPF32[$1_1 + 72 >> 2];
     $9_1 = HEAPF32[$1_1 + 68 >> 2];
     HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround($6_1 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$1_1 + 64 >> 2]) + HEAPF32[$0 + 80 >> 2];
     $10 = HEAPF32[$0 + 104 >> 2];
     $8_1 = $0 + 84 | 0;
     HEAPF32[$8_1 >> 2] = Math_fround($9_1 * Math_fround($6_1 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$8_1 >> 2];
     $0 = $0 + 88 | 0;
     HEAPF32[$0 >> 2] = Math_fround($7_1 * Math_fround($6_1 * $10)) + HEAPF32[$0 >> 2];
    }
    if (!$11) {
     break label$1
    }
    $8_1 = Math_imul($17_1, 152) + $14 | 0;
    $9_1 = HEAPF32[$8_1 + 88 >> 2];
    $10 = HEAPF32[$8_1 + 84 >> 2];
    $15_1 = HEAPF32[$8_1 + 80 >> 2];
    $16_1 = HEAPF32[$11 + 416 >> 2];
    $18_1 = HEAPF32[$8_1 + 56 >> 2];
    $21 = HEAPF32[$11 + 412 >> 2];
    $22_1 = HEAPF32[$8_1 + 52 >> 2];
    $0 = Math_imul($3_1, 244) + $13_1 | 0;
    $7_1 = HEAPF32[$11 + 404 >> 2];
    $6_1 = HEAPF32[$1_1 + 100 >> 2];
    HEAPF32[$0 + 64 >> 2] = HEAPF32[$0 + 64 >> 2] + Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$8_1 + 48 >> 2]) * HEAPF32[$11 + 408 >> 2]) * $6_1) * HEAPF32[$0 + 112 >> 2]);
    $1_1 = $0 + 68 | 0;
    HEAPF32[$1_1 >> 2] = HEAPF32[$1_1 >> 2] + Math_fround(Math_fround($6_1 * Math_fround($21 * Math_fround($7_1 * $22_1))) * HEAPF32[$0 + 116 >> 2]);
    $1_1 = $0 + 72 | 0;
    HEAPF32[$1_1 >> 2] = HEAPF32[$1_1 >> 2] + Math_fround(Math_fround($6_1 * Math_fround($16_1 * Math_fround($7_1 * $18_1))) * HEAPF32[$0 + 120 >> 2]);
    HEAPF32[$0 + 80 >> 2] = HEAPF32[$0 + 80 >> 2] + Math_fround($15_1 * Math_fround($6_1 * HEAPF32[$0 + 96 >> 2]));
    $7_1 = HEAPF32[$0 + 104 >> 2];
    $1_1 = $0 + 84 | 0;
    HEAPF32[$1_1 >> 2] = HEAPF32[$1_1 >> 2] + Math_fround($10 * Math_fround($6_1 * HEAPF32[$0 + 100 >> 2]));
    $0 = $0 + 88 | 0;
    HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($9_1 * Math_fround($7_1 * $6_1));
    break label$1;
   }
   HEAP32[(Math_imul($17_1, 152) + $14 | 0) + 100 >> 2] = 0;
  }
  label$4 : {
   if (!($19_1 & 16)) {
    break label$4
   }
   $8_1 = $17_1 + 1 | 0;
   if ($20) {
    $1_1 = Math_imul($8_1, 152) + $14 | 0;
    $6_1 = Math_fround(HEAPF32[$4_1 + 132 >> 2] * HEAPF32[$5_1 + 68 >> 2]);
    HEAPF32[$1_1 + 100 >> 2] = $6_1;
    if ($12_1) {
     $9_1 = HEAPF32[$1_1 + 24 >> 2];
     $10 = HEAPF32[$1_1 + 20 >> 2];
     $0 = Math_imul($2_1, 244) + $13_1 | 0;
     $7_1 = HEAPF32[$12_1 + 404 >> 2];
     HEAPF32[$0 + 64 >> 2] = Math_fround(Math_fround($6_1 * Math_fround($7_1 * HEAPF32[$1_1 + 16 >> 2])) * HEAPF32[$0 + 112 >> 2]) + HEAPF32[$0 + 64 >> 2];
     $2_1 = $0 + 68 | 0;
     HEAPF32[$2_1 >> 2] = Math_fround(Math_fround($6_1 * Math_fround($7_1 * $10)) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$2_1 >> 2];
     $2_1 = $0 + 72 | 0;
     HEAPF32[$2_1 >> 2] = Math_fround(Math_fround($6_1 * Math_fround($7_1 * $9_1)) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$2_1 >> 2];
     $7_1 = HEAPF32[$1_1 + 72 >> 2];
     $9_1 = HEAPF32[$1_1 + 68 >> 2];
     HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround($6_1 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$1_1 + 64 >> 2]) + HEAPF32[$0 + 80 >> 2];
     $10 = HEAPF32[$0 + 104 >> 2];
     $2_1 = $0 + 84 | 0;
     HEAPF32[$2_1 >> 2] = Math_fround($9_1 * Math_fround($6_1 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$2_1 >> 2];
     $0 = $0 + 88 | 0;
     HEAPF32[$0 >> 2] = Math_fround($7_1 * Math_fround($6_1 * $10)) + HEAPF32[$0 >> 2];
    }
    if (!$11) {
     break label$4
    }
    $2_1 = Math_imul($8_1, 152) + $14 | 0;
    $9_1 = HEAPF32[$2_1 + 88 >> 2];
    $10 = HEAPF32[$2_1 + 84 >> 2];
    $15_1 = HEAPF32[$2_1 + 56 >> 2];
    $16_1 = HEAPF32[$2_1 + 52 >> 2];
    $18_1 = HEAPF32[$2_1 + 48 >> 2];
    $7_1 = HEAPF32[$11 + 404 >> 2];
    $0 = Math_imul($3_1, 244) + $13_1 | 0;
    $6_1 = HEAPF32[$1_1 + 100 >> 2];
    HEAPF32[$0 + 80 >> 2] = HEAPF32[$0 + 80 >> 2] + Math_fround(HEAPF32[$2_1 + 80 >> 2] * Math_fround(HEAPF32[$0 + 96 >> 2] * $6_1));
    HEAPF32[$0 + 64 >> 2] = HEAPF32[$0 + 64 >> 2] + Math_fround(Math_fround($6_1 * Math_fround($7_1 * $18_1)) * HEAPF32[$0 + 112 >> 2]);
    $1_1 = $0 + 68 | 0;
    HEAPF32[$1_1 >> 2] = HEAPF32[$1_1 >> 2] + Math_fround(Math_fround($6_1 * Math_fround($7_1 * $16_1)) * HEAPF32[$0 + 116 >> 2]);
    $1_1 = $0 + 72 | 0;
    HEAPF32[$1_1 >> 2] = HEAPF32[$1_1 >> 2] + Math_fround(Math_fround($6_1 * Math_fround($7_1 * $15_1)) * HEAPF32[$0 + 120 >> 2]);
    $7_1 = HEAPF32[$0 + 104 >> 2];
    $1_1 = $0 + 84 | 0;
    HEAPF32[$1_1 >> 2] = HEAPF32[$1_1 >> 2] + Math_fround($10 * Math_fround($6_1 * HEAPF32[$0 + 100 >> 2]));
    $0 = $0 + 88 | 0;
    HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($9_1 * Math_fround($7_1 * $6_1));
    return;
   }
   HEAP32[(Math_imul($8_1, 152) + $14 | 0) + 100 >> 2] = 0;
  }
 }
 
 function $831($0, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0, $20 = 0, $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = 0, $27_1 = 0, $28_1 = Math_fround(0), $29_1 = 0, $30 = 0, $31_1 = 0, $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = 0, $40_1 = 0, $41_1 = 0, $42 = 0, $43_1 = Math_fround(0), $44_1 = 0, $45_1 = 0, $46_1 = 0, $47 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = Math_fround(0);
  $12_1 = global$0 - 80 | 0;
  global$0 = $12_1;
  $8_1 = HEAP32[$1_1 + 776 >> 2];
  $9_1 = HEAP32[$1_1 + 772 >> 2];
  $29_1 = $827($0, $9_1, HEAPF32[$2_1 + 12 >> 2]);
  $30 = $827($0, $8_1, HEAPF32[$2_1 + 12 >> 2]);
  $20 = HEAP32[$0 + 16 >> 2];
  $14 = $20 + Math_imul($29_1, 244) | 0;
  $3_1 = HEAPF32[$14 + 128 >> 2];
  $11 = Math_fround($3_1 * $3_1);
  $3_1 = HEAPF32[$14 + 132 >> 2];
  $11 = Math_fround($11 + Math_fround($3_1 * $3_1));
  $3_1 = HEAPF32[$14 + 136 >> 2];
  label$1 : {
   if (!!(Math_fround($11 + Math_fround($3_1 * $3_1)) < Math_fround(1.4210854715202004e-14))) {
    $14 = $20 + Math_imul($30, 244) | 0;
    $3_1 = HEAPF32[$14 + 128 >> 2];
    $11 = Math_fround($3_1 * $3_1);
    $3_1 = HEAPF32[$14 + 132 >> 2];
    $11 = Math_fround($11 + Math_fround($3_1 * $3_1));
    $3_1 = HEAPF32[$14 + 136 >> 2];
    if (Math_fround($11 + Math_fround($3_1 * $3_1)) < Math_fround(1.4210854715202004e-14)) {
     break label$1
    }
   }
   $17_1 = HEAP32[$1_1 + 780 >> 2];
   if (($17_1 | 0) < 1) {
    break label$1
   }
   $14 = $20 + Math_imul($30, 244) | 0;
   $46_1 = $14 + 232 | 0;
   $47 = $14 + 200 | 0;
   $48_1 = $14 + 228 | 0;
   $49_1 = $14 + 196 | 0;
   $50_1 = $14 + 224 | 0;
   $51_1 = $14 + 192 | 0;
   $52_1 = $14 + 216 | 0;
   $53_1 = $14 + 184 | 0;
   $54_1 = $14 + 212 | 0;
   $55_1 = $14 + 180 | 0;
   $56_1 = $14 + 208 | 0;
   $57_1 = $14 + 176 | 0;
   $58_1 = $14 + 240 | 0;
   $14 = $20 + Math_imul($29_1, 244) | 0;
   $59_1 = $14 + 232 | 0;
   $60_1 = $14 + 200 | 0;
   $61_1 = $14 + 228 | 0;
   $62_1 = $14 + 196 | 0;
   $63_1 = $14 + 224 | 0;
   $64_1 = $14 + 192 | 0;
   $65_1 = $14 + 216 | 0;
   $66_1 = $14 + 184 | 0;
   $67_1 = $14 + 212 | 0;
   $68_1 = $14 + 180 | 0;
   $69_1 = $14 + 208 | 0;
   $70_1 = $14 + 176 | 0;
   $71_1 = $14 + 240 | 0;
   while (1) {
    $19_1 = Math_imul($44_1, 192) + $1_1 | 0;
    if (!!(HEAPF32[$19_1 + 84 >> 2] <= HEAPF32[$1_1 + 788 >> 2])) {
     $40_1 = $19_1 + 4 | 0;
     $14 = HEAP32[$0 + 28 >> 2];
     $17_1 = $14;
     label$5 : {
      if (($14 | 0) != HEAP32[$0 + 32 >> 2]) {
       break label$5
      }
      $17_1 = $14;
      $26_1 = $14 ? $14 << 1 : 1;
      if (($14 | 0) >= ($26_1 | 0)) {
       break label$5
      }
      label$6 : {
       if (!$26_1) {
        $27_1 = 0;
        $20 = $14;
        break label$6;
       }
       $27_1 = $79(Math_imul($26_1, 152));
       $20 = HEAP32[$0 + 28 >> 2];
      }
      if (($20 | 0) >= 1) {
       $17_1 = 0;
       while (1) {
        $7($17_1 + $27_1 | 0, HEAP32[$0 + 36 >> 2] + $17_1 | 0, 152);
        $17_1 = $17_1 + 152 | 0;
        $20 = $20 + -1 | 0;
        if ($20) {
         continue
        }
        break;
       };
      }
      $17_1 = HEAP32[$0 + 36 >> 2];
      if ($17_1) {
       if (HEAPU8[$0 + 40 | 0]) {
        $80($17_1)
       }
       HEAP32[$0 + 36 >> 2] = 0;
      }
      HEAP32[$0 + 36 >> 2] = $27_1;
      HEAP8[$0 + 40 | 0] = 1;
      HEAP32[$0 + 32 >> 2] = $26_1;
      $17_1 = HEAP32[$0 + 28 >> 2];
     }
     HEAP32[$0 + 28 >> 2] = $17_1 + 1;
     $42 = HEAP32[$0 + 36 >> 2] + Math_imul($14, 152) | 0;
     HEAP32[$42 + 132 >> 2] = $40_1;
     HEAP32[$42 + 148 >> 2] = $30;
     HEAP32[$42 + 144 >> 2] = $29_1;
     HEAP32[$12_1 + 76 >> 2] = 0;
     $3_1 = Math_fround(HEAPF32[$19_1 + 60 >> 2] - HEAPF32[$9_1 + 60 >> 2]);
     HEAPF32[$12_1 + 72 >> 2] = $3_1;
     $4_1 = Math_fround(HEAPF32[$19_1 + 56 >> 2] - HEAPF32[$9_1 + 56 >> 2]);
     HEAPF32[$12_1 + 68 >> 2] = $4_1;
     $5_1 = Math_fround(HEAPF32[$19_1 + 52 >> 2] - HEAPF32[$9_1 + 52 >> 2]);
     HEAPF32[$12_1 + 64 >> 2] = $5_1;
     $10 = HEAPF32[$19_1 + 36 >> 2];
     $7_1 = HEAPF32[$19_1 + 40 >> 2];
     $6_1 = HEAPF32[$19_1 + 44 >> 2];
     $13_1 = HEAPF32[$8_1 + 52 >> 2];
     $15_1 = HEAPF32[$8_1 + 56 >> 2];
     $11 = HEAPF32[$8_1 + 60 >> 2];
     HEAP32[$12_1 + 60 >> 2] = 0;
     $6_1 = Math_fround($6_1 - $11);
     HEAPF32[$12_1 + 56 >> 2] = $6_1;
     $7_1 = Math_fround($7_1 - $15_1);
     HEAPF32[$12_1 + 52 >> 2] = $7_1;
     $10 = Math_fround($10 - $13_1);
     HEAPF32[$12_1 + 48 >> 2] = $10;
     $11 = Math_fround(0.0);
     $18_1 = Math_fround(0.0);
     $21 = Math_fround(0.0);
     $16_1 = Math_fround(0.0);
     if (HEAP32[$71_1 >> 2]) {
      $13_1 = Math_fround(HEAPF32[$64_1 >> 2] + HEAPF32[$63_1 >> 2]);
      $15_1 = Math_fround(HEAPF32[$62_1 >> 2] + HEAPF32[$61_1 >> 2]);
      $16_1 = Math_fround(Math_fround(HEAPF32[$66_1 >> 2] + HEAPF32[$65_1 >> 2]) + Math_fround(Math_fround($4_1 * $13_1) - Math_fround($5_1 * $15_1)));
      $18_1 = $5_1;
      $5_1 = Math_fround(HEAPF32[$60_1 >> 2] + HEAPF32[$59_1 >> 2]);
      $21 = Math_fround(Math_fround(HEAPF32[$68_1 >> 2] + HEAPF32[$67_1 >> 2]) + Math_fround(Math_fround($18_1 * $5_1) - Math_fround($3_1 * $13_1)));
      $18_1 = Math_fround(Math_fround(HEAPF32[$70_1 >> 2] + HEAPF32[$69_1 >> 2]) + Math_fround(Math_fround($3_1 * $15_1) - Math_fround($4_1 * $5_1)));
     }
     $28_1 = Math_fround(0.0);
     $25 = Math_fround(0.0);
     if (HEAP32[$58_1 >> 2]) {
      $3_1 = Math_fround(HEAPF32[$51_1 >> 2] + HEAPF32[$50_1 >> 2]);
      $4_1 = Math_fround(HEAPF32[$49_1 >> 2] + HEAPF32[$48_1 >> 2]);
      $25 = Math_fround(Math_fround(HEAPF32[$53_1 >> 2] + HEAPF32[$52_1 >> 2]) + Math_fround(Math_fround($7_1 * $3_1) - Math_fround($10 * $4_1)));
      $5_1 = Math_fround(HEAPF32[$47 >> 2] + HEAPF32[$46_1 >> 2]);
      $28_1 = Math_fround(Math_fround(HEAPF32[$55_1 >> 2] + HEAPF32[$54_1 >> 2]) + Math_fround(Math_fround($10 * $5_1) - Math_fround($6_1 * $3_1)));
      $11 = Math_fround(Math_fround(HEAPF32[$57_1 >> 2] + HEAPF32[$56_1 >> 2]) + Math_fround(Math_fround($6_1 * $4_1) - Math_fround($7_1 * $5_1)));
     }
     $39_1 = $19_1 + 76 | 0;
     $24_1 = HEAPF32[$39_1 >> 2];
     $27_1 = $19_1 + 68 | 0;
     $43_1 = HEAPF32[$27_1 >> 2];
     $31_1 = $19_1 + 72 | 0;
     $72_1 = HEAPF32[$31_1 >> 2];
     $829($0, $42, $29_1, $30, $40_1, $2_1, $12_1 + 44 | 0, $12_1 - -64 | 0, $12_1 + 48 | 0);
     HEAP32[$42 + 140 >> 2] = HEAP32[$0 + 68 >> 2];
     $17_1 = $19_1 + 92 | 0;
     label$14 : {
      if (!(HEAPF32[$17_1 >> 2] > Math_fround(0.0))) {
       break label$14
      }
      $826($0, $27_1, $29_1, $30, $14, HEAPF32[$19_1 + 96 >> 2]);
      $5_1 = HEAPF32[$39_1 >> 2];
      label$15 : {
       if (!!(Math_fround(Math_abs($5_1)) > Math_fround(.7071067690849304))) {
        HEAP32[$12_1 + 24 >> 2] = 0;
        $3_1 = HEAPF32[$31_1 >> 2];
        $7_1 = Math_fround(Math_fround($5_1 * $5_1) + Math_fround($3_1 * $3_1));
        $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($7_1)));
        $3_1 = Math_fround($3_1 * $6_1);
        HEAPF32[$12_1 + 32 >> 2] = $3_1;
        $4_1 = Math_fround($6_1 * Math_fround(-$5_1));
        HEAPF32[$12_1 + 28 >> 2] = $4_1;
        $7_1 = Math_fround($7_1 * $6_1);
        HEAPF32[$12_1 + 8 >> 2] = $7_1;
        $5_1 = HEAPF32[$27_1 >> 2];
        $10 = Math_fround($3_1 * Math_fround(-$5_1));
        HEAPF32[$12_1 + 12 >> 2] = $10;
        $13_1 = Math_fround($5_1 * $4_1);
        $6_1 = Math_fround(0.0);
        break label$15;
       }
       HEAP32[$12_1 + 32 >> 2] = 0;
       $4_1 = HEAPF32[$27_1 >> 2];
       $6_1 = HEAPF32[$31_1 >> 2];
       $13_1 = Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1));
       $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($13_1)));
       $4_1 = Math_fround($4_1 * $3_1);
       HEAPF32[$12_1 + 28 >> 2] = $4_1;
       $6_1 = Math_fround($3_1 * Math_fround(-$6_1));
       HEAPF32[$12_1 + 24 >> 2] = $6_1;
       $10 = Math_fround($5_1 * $6_1);
       HEAPF32[$12_1 + 12 >> 2] = $10;
       $7_1 = Math_fround($4_1 * Math_fround(-$5_1));
       HEAPF32[$12_1 + 8 >> 2] = $7_1;
       $13_1 = Math_fround($13_1 * $3_1);
       $3_1 = Math_fround(0.0);
      }
      $15_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($4_1 * $4_1)) + Math_fround($3_1 * $3_1)))));
      $3_1 = Math_fround($3_1 * $15_1);
      HEAPF32[$12_1 + 32 >> 2] = $3_1;
      $5_1 = Math_fround($4_1 * $15_1);
      HEAPF32[$12_1 + 28 >> 2] = $5_1;
      $6_1 = Math_fround($6_1 * $15_1);
      HEAPF32[$12_1 + 24 >> 2] = $6_1;
      $4_1 = $13_1;
      $13_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($13_1 * $13_1) + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($10 * $10))))));
      $4_1 = Math_fround($4_1 * $13_1);
      HEAPF32[$12_1 + 16 >> 2] = $4_1;
      $10 = Math_fround($10 * $13_1);
      HEAPF32[$12_1 + 12 >> 2] = $10;
      $7_1 = Math_fround($7_1 * $13_1);
      HEAPF32[$12_1 + 8 >> 2] = $7_1;
      $20 = HEAP32[$9_1 + 180 >> 2] & 2;
      if ($20) {
       HEAP32[$12_1 + 36 >> 2] = 0;
       $32 = HEAPF32[$9_1 + 4 >> 2];
       $33_1 = HEAPF32[$9_1 + 20 >> 2];
       $34 = HEAPF32[$9_1 + 36 >> 2];
       $13_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $32) + Math_fround($5_1 * $33_1)) + Math_fround($3_1 * $34)) * HEAPF32[$9_1 + 164 >> 2]);
       $35 = HEAPF32[$9_1 + 8 >> 2];
       $36_1 = HEAPF32[$9_1 + 24 >> 2];
       $37_1 = HEAPF32[$9_1 + 40 >> 2];
       $15_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $35) + Math_fround($5_1 * $36_1)) + Math_fround($3_1 * $37_1)) * HEAPF32[$9_1 + 168 >> 2]);
       $38 = HEAPF32[$9_1 + 12 >> 2];
       $22_1 = $5_1;
       $5_1 = HEAPF32[$9_1 + 28 >> 2];
       $23_1 = $3_1;
       $3_1 = HEAPF32[$9_1 + 44 >> 2];
       $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $38) + Math_fround($22_1 * $5_1)) + Math_fround($23_1 * $3_1)) * HEAPF32[$9_1 + 172 >> 2]);
       $3_1 = Math_fround(Math_fround(Math_fround($34 * $13_1) + Math_fround($37_1 * $15_1)) + Math_fround($3_1 * $6_1));
       HEAPF32[$12_1 + 32 >> 2] = $3_1;
       $5_1 = Math_fround(Math_fround(Math_fround($33_1 * $13_1) + Math_fround($36_1 * $15_1)) + Math_fround($5_1 * $6_1));
       HEAPF32[$12_1 + 28 >> 2] = $5_1;
       $6_1 = Math_fround(Math_fround(Math_fround($32 * $13_1) + Math_fround($35 * $15_1)) + Math_fround($38 * $6_1));
       HEAPF32[$12_1 + 24 >> 2] = $6_1;
      }
      $26_1 = HEAP32[$8_1 + 180 >> 2] & 2;
      if ($26_1) {
       HEAP32[$12_1 + 36 >> 2] = 0;
       $32 = HEAPF32[$8_1 + 4 >> 2];
       $33_1 = HEAPF32[$8_1 + 20 >> 2];
       $34 = HEAPF32[$8_1 + 36 >> 2];
       $13_1 = Math_fround(Math_fround(Math_fround(Math_fround($32 * $6_1) + Math_fround($33_1 * $5_1)) + Math_fround($34 * $3_1)) * HEAPF32[$8_1 + 164 >> 2]);
       $35 = HEAPF32[$8_1 + 8 >> 2];
       $36_1 = HEAPF32[$8_1 + 24 >> 2];
       $37_1 = HEAPF32[$8_1 + 40 >> 2];
       $15_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $35) + Math_fround($5_1 * $36_1)) + Math_fround($3_1 * $37_1)) * HEAPF32[$8_1 + 168 >> 2]);
       $38 = HEAPF32[$8_1 + 12 >> 2];
       $22_1 = $5_1;
       $5_1 = HEAPF32[$8_1 + 28 >> 2];
       $23_1 = $3_1;
       $3_1 = HEAPF32[$8_1 + 44 >> 2];
       $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $38) + Math_fround($22_1 * $5_1)) + Math_fround($23_1 * $3_1)) * HEAPF32[$8_1 + 172 >> 2]);
       $3_1 = Math_fround(Math_fround(Math_fround($34 * $13_1) + Math_fround($37_1 * $15_1)) + Math_fround($3_1 * $6_1));
       HEAPF32[$12_1 + 32 >> 2] = $3_1;
       $5_1 = Math_fround(Math_fround(Math_fround($33_1 * $13_1) + Math_fround($36_1 * $15_1)) + Math_fround($5_1 * $6_1));
       HEAPF32[$12_1 + 28 >> 2] = $5_1;
       $6_1 = Math_fround(Math_fround(Math_fround($32 * $13_1) + Math_fround($35 * $15_1)) + Math_fround($38 * $6_1));
       HEAPF32[$12_1 + 24 >> 2] = $6_1;
      }
      if ($20) {
       HEAP32[$12_1 + 20 >> 2] = 0;
       $32 = HEAPF32[$9_1 + 4 >> 2];
       $33_1 = HEAPF32[$9_1 + 20 >> 2];
       $34 = HEAPF32[$9_1 + 36 >> 2];
       $13_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $32) + Math_fround($10 * $33_1)) + Math_fround($4_1 * $34)) * HEAPF32[$9_1 + 164 >> 2]);
       $35 = HEAPF32[$9_1 + 8 >> 2];
       $36_1 = HEAPF32[$9_1 + 24 >> 2];
       $37_1 = HEAPF32[$9_1 + 40 >> 2];
       $15_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $35) + Math_fround($10 * $36_1)) + Math_fround($4_1 * $37_1)) * HEAPF32[$9_1 + 168 >> 2]);
       $38 = HEAPF32[$9_1 + 12 >> 2];
       $22_1 = $10;
       $10 = HEAPF32[$9_1 + 28 >> 2];
       $23_1 = $4_1;
       $4_1 = HEAPF32[$9_1 + 44 >> 2];
       $7_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $38) + Math_fround($22_1 * $10)) + Math_fround($23_1 * $4_1)) * HEAPF32[$9_1 + 172 >> 2]);
       $4_1 = Math_fround(Math_fround(Math_fround($34 * $13_1) + Math_fround($37_1 * $15_1)) + Math_fround($4_1 * $7_1));
       HEAPF32[$12_1 + 16 >> 2] = $4_1;
       $10 = Math_fround(Math_fround(Math_fround($33_1 * $13_1) + Math_fround($36_1 * $15_1)) + Math_fround($10 * $7_1));
       HEAPF32[$12_1 + 12 >> 2] = $10;
       $7_1 = Math_fround(Math_fround(Math_fround($32 * $13_1) + Math_fround($35 * $15_1)) + Math_fround($38 * $7_1));
       HEAPF32[$12_1 + 8 >> 2] = $7_1;
      }
      if ($26_1) {
       HEAP32[$12_1 + 20 >> 2] = 0;
       $32 = HEAPF32[$8_1 + 4 >> 2];
       $33_1 = HEAPF32[$8_1 + 20 >> 2];
       $34 = HEAPF32[$8_1 + 36 >> 2];
       $13_1 = Math_fround(Math_fround(Math_fround(Math_fround($32 * $7_1) + Math_fround($33_1 * $10)) + Math_fround($34 * $4_1)) * HEAPF32[$8_1 + 164 >> 2]);
       $35 = HEAPF32[$8_1 + 8 >> 2];
       $36_1 = HEAPF32[$8_1 + 24 >> 2];
       $37_1 = HEAPF32[$8_1 + 40 >> 2];
       $15_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $35) + Math_fround($10 * $36_1)) + Math_fround($4_1 * $37_1)) * HEAPF32[$8_1 + 168 >> 2]);
       $38 = HEAPF32[$8_1 + 12 >> 2];
       $22_1 = $10;
       $10 = HEAPF32[$8_1 + 28 >> 2];
       $23_1 = $4_1;
       $4_1 = HEAPF32[$8_1 + 44 >> 2];
       $7_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $38) + Math_fround($22_1 * $10)) + Math_fround($23_1 * $4_1)) * HEAPF32[$8_1 + 172 >> 2]);
       $4_1 = Math_fround(Math_fround(Math_fround($34 * $13_1) + Math_fround($37_1 * $15_1)) + Math_fround($4_1 * $7_1));
       HEAPF32[$12_1 + 16 >> 2] = $4_1;
       $10 = Math_fround(Math_fround(Math_fround($33_1 * $13_1) + Math_fround($36_1 * $15_1)) + Math_fround($10 * $7_1));
       HEAPF32[$12_1 + 12 >> 2] = $10;
       $7_1 = Math_fround(Math_fround(Math_fround($32 * $13_1) + Math_fround($35 * $15_1)) + Math_fround($38 * $7_1));
       HEAPF32[$12_1 + 8 >> 2] = $7_1;
      }
      if (!!(+Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($5_1 * $5_1)) + Math_fround($3_1 * $3_1)))) > .001)) {
       $826($0, $12_1 + 24 | 0, $29_1, $30, $14, HEAPF32[$17_1 >> 2])
      }
      if (!(+Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($10 * $10)) + Math_fround($4_1 * $4_1)))) > .001)) {
       break label$14
      }
      $826($0, $12_1 + 8 | 0, $29_1, $30, $14, HEAPF32[$17_1 >> 2]);
     }
     label$22 : {
      if (!(HEAP8[$19_1 + 124 | 0] & 1 ? !!(HEAPU8[$2_1 + 72 | 0] & 32) : 0)) {
       $41_1 = $19_1 + 176 | 0;
       HEAP32[$41_1 >> 2] = 0;
       $7_1 = Math_fround($18_1 - $11);
       $5_1 = Math_fround($21 - $28_1);
       $4_1 = Math_fround($16_1 - $25);
       $3_1 = Math_fround(Math_fround(Math_fround($7_1 * $43_1) + Math_fround($5_1 * $72_1)) + Math_fround($4_1 * $24_1));
       $20 = $19_1 + 172 | 0;
       $11 = $4_1;
       $4_1 = HEAPF32[$39_1 >> 2];
       $6_1 = Math_fround($11 - Math_fround($3_1 * $4_1));
       HEAPF32[$20 >> 2] = $6_1;
       $26_1 = $19_1 + 168 | 0;
       $11 = $5_1;
       $5_1 = HEAPF32[$31_1 >> 2];
       $10 = Math_fround($11 - Math_fround($3_1 * $5_1));
       HEAPF32[$26_1 >> 2] = $10;
       $17_1 = $19_1 + 164 | 0;
       $11 = $7_1;
       $7_1 = HEAPF32[$27_1 >> 2];
       $3_1 = Math_fround($11 - Math_fround($3_1 * $7_1));
       HEAPF32[$17_1 >> 2] = $3_1;
       label$25 : {
        if (HEAPU8[$2_1 + 72 | 0] & 64) {
         break label$25
        }
        $13_1 = Math_fround(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($10 * $10)) + Math_fround($6_1 * $6_1));
        if (!($13_1 > Math_fround(1.1920928955078125e-07))) {
         break label$25
        }
        $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($13_1)));
        $5_1 = Math_fround($10 * $4_1);
        HEAPF32[$26_1 >> 2] = $5_1;
        $3_1 = Math_fround($3_1 * $4_1);
        HEAPF32[$17_1 >> 2] = $3_1;
        $4_1 = Math_fround($6_1 * $4_1);
        HEAPF32[$20 >> 2] = $4_1;
        if (HEAP8[$9_1 + 180 | 0] & 1) {
         $28_1 = HEAPF32[$9_1 + 172 >> 2];
         $6_1 = HEAPF32[$9_1 + 44 >> 2];
         $7_1 = HEAPF32[$9_1 + 12 >> 2];
         $10 = HEAPF32[$9_1 + 28 >> 2];
         $25 = HEAPF32[$9_1 + 164 >> 2];
         $13_1 = HEAPF32[$9_1 + 36 >> 2];
         $15_1 = HEAPF32[$9_1 + 4 >> 2];
         $11 = HEAPF32[$9_1 + 20 >> 2];
         $24_1 = HEAPF32[$9_1 + 168 >> 2];
         $18_1 = HEAPF32[$9_1 + 40 >> 2];
         $21 = HEAPF32[$9_1 + 8 >> 2];
         $16_1 = HEAPF32[$9_1 + 24 >> 2];
         HEAP32[$41_1 >> 2] = 0;
         $22_1 = $11;
         $11 = Math_fround($25 * Math_fround(Math_fround(Math_fround($3_1 * $15_1) + Math_fround($5_1 * $11)) + Math_fround($4_1 * $13_1)));
         $23_1 = $16_1;
         $16_1 = Math_fround($24_1 * Math_fround(Math_fround(Math_fround($3_1 * $21) + Math_fround($5_1 * $16_1)) + Math_fround($4_1 * $18_1)));
         $4_1 = Math_fround($28_1 * Math_fround(Math_fround(Math_fround($3_1 * $7_1) + Math_fround($5_1 * $10)) + Math_fround($4_1 * $6_1)));
         $5_1 = Math_fround(Math_fround(Math_fround($22_1 * $11) + Math_fround($23_1 * $16_1)) + Math_fround($10 * $4_1));
         HEAPF32[$26_1 >> 2] = $5_1;
         $3_1 = Math_fround(Math_fround(Math_fround($15_1 * $11) + Math_fround($21 * $16_1)) + Math_fround($7_1 * $4_1));
         HEAPF32[$17_1 >> 2] = $3_1;
         $4_1 = Math_fround(Math_fround(Math_fround($13_1 * $11) + Math_fround($18_1 * $16_1)) + Math_fround($6_1 * $4_1));
         HEAPF32[$20 >> 2] = $4_1;
        }
        if (HEAP8[$8_1 + 180 | 0] & 1) {
         $28_1 = HEAPF32[$8_1 + 172 >> 2];
         $6_1 = HEAPF32[$8_1 + 44 >> 2];
         $7_1 = HEAPF32[$8_1 + 12 >> 2];
         $10 = HEAPF32[$8_1 + 28 >> 2];
         $25 = HEAPF32[$8_1 + 164 >> 2];
         $13_1 = HEAPF32[$8_1 + 36 >> 2];
         $15_1 = HEAPF32[$8_1 + 4 >> 2];
         $11 = HEAPF32[$8_1 + 20 >> 2];
         $24_1 = HEAPF32[$8_1 + 168 >> 2];
         $18_1 = HEAPF32[$8_1 + 40 >> 2];
         $21 = HEAPF32[$8_1 + 8 >> 2];
         $16_1 = HEAPF32[$8_1 + 24 >> 2];
         HEAP32[$41_1 >> 2] = 0;
         $22_1 = $11;
         $11 = Math_fround($25 * Math_fround(Math_fround(Math_fround($15_1 * $3_1) + Math_fround($11 * $5_1)) + Math_fround($13_1 * $4_1)));
         $23_1 = $16_1;
         $16_1 = Math_fround($24_1 * Math_fround(Math_fround(Math_fround($3_1 * $21) + Math_fround($5_1 * $16_1)) + Math_fround($4_1 * $18_1)));
         $3_1 = Math_fround($28_1 * Math_fround(Math_fround(Math_fround($3_1 * $7_1) + Math_fround($5_1 * $10)) + Math_fround($4_1 * $6_1)));
         HEAPF32[$26_1 >> 2] = Math_fround(Math_fround($22_1 * $11) + Math_fround($23_1 * $16_1)) + Math_fround($10 * $3_1);
         HEAPF32[$17_1 >> 2] = Math_fround(Math_fround($15_1 * $11) + Math_fround($21 * $16_1)) + Math_fround($7_1 * $3_1);
         HEAPF32[$20 >> 2] = Math_fround(Math_fround($13_1 * $11) + Math_fround($18_1 * $16_1)) + Math_fround($6_1 * $3_1);
        }
        $28_1 = HEAPF32[$12_1 + 44 >> 2];
        $824($0, $17_1, $29_1, $30, $14, $40_1, $12_1 - -64 | 0, $12_1 + 48 | 0, $28_1, $2_1, Math_fround(0.0), Math_fround(0.0));
        if (!(HEAPU8[$2_1 + 72 | 0] & 16)) {
         break label$22
        }
        $41_1 = $19_1 + 192 | 0;
        HEAP32[$41_1 >> 2] = 0;
        $45_1 = $19_1 + 188 | 0;
        $4_1 = HEAPF32[$31_1 >> 2];
        $6_1 = HEAPF32[$17_1 >> 2];
        $5_1 = HEAPF32[$26_1 >> 2];
        $7_1 = HEAPF32[$27_1 >> 2];
        $3_1 = Math_fround(Math_fround($4_1 * $6_1) - Math_fround($5_1 * $7_1));
        $10 = HEAPF32[$39_1 >> 2];
        $13_1 = HEAPF32[$20 >> 2];
        $5_1 = Math_fround(Math_fround($5_1 * $10) - Math_fround($13_1 * $4_1));
        $4_1 = Math_fround(Math_fround($13_1 * $7_1) - Math_fround($10 * $6_1));
        $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($4_1 * $4_1)) + Math_fround($3_1 * $3_1)))));
        $3_1 = Math_fround($3_1 * $6_1);
        HEAPF32[$45_1 >> 2] = $3_1;
        $20 = $19_1 + 184 | 0;
        $4_1 = Math_fround($4_1 * $6_1);
        HEAPF32[$20 >> 2] = $4_1;
        $17_1 = $19_1 + 180 | 0;
        $5_1 = Math_fround($5_1 * $6_1);
        HEAPF32[$17_1 >> 2] = $5_1;
        if (HEAP8[$9_1 + 180 | 0] & 1) {
         $25 = HEAPF32[$9_1 + 172 >> 2];
         $6_1 = HEAPF32[$9_1 + 44 >> 2];
         $7_1 = HEAPF32[$9_1 + 12 >> 2];
         $10 = HEAPF32[$9_1 + 28 >> 2];
         $24_1 = HEAPF32[$9_1 + 164 >> 2];
         $13_1 = HEAPF32[$9_1 + 36 >> 2];
         $15_1 = HEAPF32[$9_1 + 4 >> 2];
         $11 = HEAPF32[$9_1 + 20 >> 2];
         $43_1 = HEAPF32[$9_1 + 168 >> 2];
         $18_1 = HEAPF32[$9_1 + 40 >> 2];
         $21 = HEAPF32[$9_1 + 8 >> 2];
         $16_1 = HEAPF32[$9_1 + 24 >> 2];
         HEAP32[$41_1 >> 2] = 0;
         $22_1 = $11;
         $11 = Math_fround($24_1 * Math_fround(Math_fround(Math_fround($5_1 * $15_1) + Math_fround($4_1 * $11)) + Math_fround($3_1 * $13_1)));
         $23_1 = $16_1;
         $16_1 = Math_fround($43_1 * Math_fround(Math_fround(Math_fround($5_1 * $21) + Math_fround($4_1 * $16_1)) + Math_fround($3_1 * $18_1)));
         $3_1 = Math_fround($25 * Math_fround(Math_fround(Math_fround($5_1 * $7_1) + Math_fround($4_1 * $10)) + Math_fround($3_1 * $6_1)));
         $4_1 = Math_fround(Math_fround(Math_fround($22_1 * $11) + Math_fround($23_1 * $16_1)) + Math_fround($10 * $3_1));
         HEAPF32[$20 >> 2] = $4_1;
         $5_1 = Math_fround(Math_fround(Math_fround($15_1 * $11) + Math_fround($21 * $16_1)) + Math_fround($7_1 * $3_1));
         HEAPF32[$17_1 >> 2] = $5_1;
         $3_1 = Math_fround(Math_fround(Math_fround($13_1 * $11) + Math_fround($18_1 * $16_1)) + Math_fround($6_1 * $3_1));
         HEAPF32[$45_1 >> 2] = $3_1;
        }
        if (HEAP8[$8_1 + 180 | 0] & 1) {
         $25 = HEAPF32[$8_1 + 172 >> 2];
         $6_1 = HEAPF32[$8_1 + 44 >> 2];
         $7_1 = HEAPF32[$8_1 + 12 >> 2];
         $10 = HEAPF32[$8_1 + 28 >> 2];
         $24_1 = HEAPF32[$8_1 + 164 >> 2];
         $13_1 = HEAPF32[$8_1 + 36 >> 2];
         $15_1 = HEAPF32[$8_1 + 4 >> 2];
         $11 = HEAPF32[$8_1 + 20 >> 2];
         $43_1 = HEAPF32[$8_1 + 168 >> 2];
         $18_1 = HEAPF32[$8_1 + 40 >> 2];
         $21 = HEAPF32[$8_1 + 8 >> 2];
         $16_1 = HEAPF32[$8_1 + 24 >> 2];
         HEAP32[$41_1 >> 2] = 0;
         $22_1 = $11;
         $11 = Math_fround($24_1 * Math_fround(Math_fround(Math_fround($15_1 * $5_1) + Math_fround($11 * $4_1)) + Math_fround($13_1 * $3_1)));
         $23_1 = $16_1;
         $16_1 = Math_fround($43_1 * Math_fround(Math_fround(Math_fround($5_1 * $21) + Math_fround($4_1 * $16_1)) + Math_fround($3_1 * $18_1)));
         $3_1 = Math_fround($25 * Math_fround(Math_fround(Math_fround($5_1 * $7_1) + Math_fround($4_1 * $10)) + Math_fround($3_1 * $6_1)));
         HEAPF32[$20 >> 2] = Math_fround(Math_fround($22_1 * $11) + Math_fround($23_1 * $16_1)) + Math_fround($10 * $3_1);
         HEAPF32[$17_1 >> 2] = Math_fround(Math_fround($15_1 * $11) + Math_fround($21 * $16_1)) + Math_fround($7_1 * $3_1);
         HEAPF32[$45_1 >> 2] = Math_fround(Math_fround($13_1 * $11) + Math_fround($18_1 * $16_1)) + Math_fround($6_1 * $3_1);
        }
        $824($0, $17_1, $29_1, $30, $14, $40_1, $12_1 - -64 | 0, $12_1 + 48 | 0, $28_1, $2_1, Math_fround(0.0), Math_fround(0.0));
        break label$22;
       }
       $27_1 = $19_1 + 180 | 0;
       label$30 : {
        if (!!(Math_fround(Math_abs($4_1)) > Math_fround(.7071067690849304))) {
         HEAP32[$17_1 >> 2] = 0;
         $10 = Math_fround(Math_fround($5_1 * $5_1) + Math_fround($4_1 * $4_1));
         $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($10)));
         $3_1 = Math_fround($6_1 * Math_fround(-$4_1));
         HEAPF32[$26_1 >> 2] = $3_1;
         $4_1 = Math_fround($5_1 * $6_1);
         HEAPF32[$20 >> 2] = $4_1;
         $6_1 = Math_fround($10 * $6_1);
         $10 = Math_fround($7_1 * $3_1);
         $7_1 = Math_fround($4_1 * Math_fround(-$7_1));
         $5_1 = Math_fround(0.0);
         break label$30;
        }
        HEAP32[$20 >> 2] = 0;
        $11 = $7_1;
        $7_1 = Math_fround(Math_fround($7_1 * $7_1) + Math_fround($5_1 * $5_1));
        $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($7_1)));
        $3_1 = Math_fround($11 * $6_1);
        HEAPF32[$26_1 >> 2] = $3_1;
        $5_1 = Math_fround($6_1 * Math_fround(-$5_1));
        HEAPF32[$17_1 >> 2] = $5_1;
        $10 = Math_fround($7_1 * $6_1);
        $7_1 = Math_fround($4_1 * $5_1);
        $6_1 = Math_fround($3_1 * Math_fround(-$4_1));
        $4_1 = Math_fround(0.0);
       }
       HEAPF32[$27_1 >> 2] = $6_1;
       $31_1 = $19_1 + 188 | 0;
       HEAPF32[$31_1 >> 2] = $10;
       $39_1 = $19_1 + 184 | 0;
       HEAPF32[$39_1 >> 2] = $7_1;
       if (HEAP8[$9_1 + 180 | 0] & 1) {
        $28_1 = HEAPF32[$9_1 + 172 >> 2];
        $6_1 = HEAPF32[$9_1 + 44 >> 2];
        $7_1 = HEAPF32[$9_1 + 12 >> 2];
        $10 = HEAPF32[$9_1 + 28 >> 2];
        $25 = HEAPF32[$9_1 + 164 >> 2];
        $13_1 = HEAPF32[$9_1 + 36 >> 2];
        $15_1 = HEAPF32[$9_1 + 4 >> 2];
        $11 = HEAPF32[$9_1 + 20 >> 2];
        $24_1 = HEAPF32[$9_1 + 168 >> 2];
        $18_1 = HEAPF32[$9_1 + 40 >> 2];
        $21 = HEAPF32[$9_1 + 8 >> 2];
        $16_1 = HEAPF32[$9_1 + 24 >> 2];
        HEAP32[$41_1 >> 2] = 0;
        $22_1 = $11;
        $11 = Math_fround($25 * Math_fround(Math_fround(Math_fround($15_1 * $5_1) + Math_fround($11 * $3_1)) + Math_fround($13_1 * $4_1)));
        $23_1 = $16_1;
        $16_1 = Math_fround($24_1 * Math_fround(Math_fround(Math_fround($5_1 * $21) + Math_fround($3_1 * $16_1)) + Math_fround($4_1 * $18_1)));
        $4_1 = Math_fround($28_1 * Math_fround(Math_fround(Math_fround($5_1 * $7_1) + Math_fround($3_1 * $10)) + Math_fround($4_1 * $6_1)));
        $3_1 = Math_fround(Math_fround(Math_fround($22_1 * $11) + Math_fround($23_1 * $16_1)) + Math_fround($10 * $4_1));
        HEAPF32[$26_1 >> 2] = $3_1;
        $5_1 = Math_fround(Math_fround(Math_fround($15_1 * $11) + Math_fround($21 * $16_1)) + Math_fround($7_1 * $4_1));
        HEAPF32[$17_1 >> 2] = $5_1;
        $4_1 = Math_fround(Math_fround(Math_fround($13_1 * $11) + Math_fround($18_1 * $16_1)) + Math_fround($6_1 * $4_1));
        HEAPF32[$20 >> 2] = $4_1;
       }
       if (HEAP8[$8_1 + 180 | 0] & 1) {
        $28_1 = HEAPF32[$8_1 + 172 >> 2];
        $6_1 = HEAPF32[$8_1 + 44 >> 2];
        $7_1 = HEAPF32[$8_1 + 12 >> 2];
        $10 = HEAPF32[$8_1 + 28 >> 2];
        $25 = HEAPF32[$8_1 + 164 >> 2];
        $13_1 = HEAPF32[$8_1 + 36 >> 2];
        $15_1 = HEAPF32[$8_1 + 4 >> 2];
        $11 = HEAPF32[$8_1 + 20 >> 2];
        $24_1 = HEAPF32[$8_1 + 168 >> 2];
        $18_1 = HEAPF32[$8_1 + 40 >> 2];
        $21 = HEAPF32[$8_1 + 8 >> 2];
        $16_1 = HEAPF32[$8_1 + 24 >> 2];
        HEAP32[$41_1 >> 2] = 0;
        $22_1 = $11;
        $11 = Math_fround($25 * Math_fround(Math_fround(Math_fround($15_1 * $5_1) + Math_fround($11 * $3_1)) + Math_fround($13_1 * $4_1)));
        $23_1 = $16_1;
        $16_1 = Math_fround($24_1 * Math_fround(Math_fround(Math_fround($5_1 * $21) + Math_fround($3_1 * $16_1)) + Math_fround($4_1 * $18_1)));
        $3_1 = Math_fround($28_1 * Math_fround(Math_fround(Math_fround($5_1 * $7_1) + Math_fround($3_1 * $10)) + Math_fround($4_1 * $6_1)));
        HEAPF32[$26_1 >> 2] = Math_fround(Math_fround($22_1 * $11) + Math_fround($23_1 * $16_1)) + Math_fround($10 * $3_1);
        HEAPF32[$17_1 >> 2] = Math_fround(Math_fround($15_1 * $11) + Math_fround($21 * $16_1)) + Math_fround($7_1 * $3_1);
        HEAPF32[$20 >> 2] = Math_fround(Math_fround($13_1 * $11) + Math_fround($18_1 * $16_1)) + Math_fround($6_1 * $3_1);
       }
       $28_1 = HEAPF32[$12_1 + 44 >> 2];
       $824($0, $17_1, $29_1, $30, $14, $40_1, $12_1 - -64 | 0, $12_1 + 48 | 0, $28_1, $2_1, Math_fround(0.0), Math_fround(0.0));
       $20 = HEAP32[$2_1 + 72 >> 2];
       if ($20 & 16) {
        if (HEAP8[$9_1 + 180 | 0] & 1) {
         $25 = HEAPF32[$9_1 + 172 >> 2];
         $3_1 = HEAPF32[$9_1 + 44 >> 2];
         $4_1 = HEAPF32[$9_1 + 12 >> 2];
         $5_1 = HEAPF32[$9_1 + 28 >> 2];
         $18_1 = HEAPF32[$9_1 + 164 >> 2];
         $6_1 = HEAPF32[$9_1 + 36 >> 2];
         $7_1 = HEAPF32[$9_1 + 4 >> 2];
         $10 = HEAPF32[$9_1 + 20 >> 2];
         $24_1 = HEAPF32[$9_1 + 168 >> 2];
         $13_1 = HEAPF32[$9_1 + 40 >> 2];
         $15_1 = HEAPF32[$9_1 + 8 >> 2];
         $11 = HEAPF32[$9_1 + 24 >> 2];
         HEAP32[$19_1 + 192 >> 2] = 0;
         $22_1 = $7_1;
         $16_1 = $18_1;
         $7_1 = HEAPF32[$27_1 >> 2];
         $18_1 = HEAPF32[$39_1 >> 2];
         $21 = HEAPF32[$31_1 >> 2];
         $16_1 = Math_fround($16_1 * Math_fround(Math_fround(Math_fround($22_1 * $7_1) + Math_fround($10 * $18_1)) + Math_fround($6_1 * $21)));
         $23_1 = $15_1;
         $15_1 = Math_fround($24_1 * Math_fround(Math_fround(Math_fround($7_1 * $15_1) + Math_fround($18_1 * $11)) + Math_fround($21 * $13_1)));
         $24_1 = $4_1;
         $4_1 = Math_fround($25 * Math_fround(Math_fround(Math_fround($7_1 * $4_1) + Math_fround($18_1 * $5_1)) + Math_fround($21 * $3_1)));
         HEAPF32[$27_1 >> 2] = Math_fround(Math_fround($22_1 * $16_1) + Math_fround($23_1 * $15_1)) + Math_fround($24_1 * $4_1);
         HEAPF32[$39_1 >> 2] = Math_fround(Math_fround($10 * $16_1) + Math_fround($11 * $15_1)) + Math_fround($5_1 * $4_1);
         HEAPF32[$31_1 >> 2] = Math_fround(Math_fround($6_1 * $16_1) + Math_fround($13_1 * $15_1)) + Math_fround($3_1 * $4_1);
        }
        if (HEAP8[$8_1 + 180 | 0] & 1) {
         $25 = HEAPF32[$8_1 + 172 >> 2];
         $3_1 = HEAPF32[$8_1 + 44 >> 2];
         $4_1 = HEAPF32[$8_1 + 12 >> 2];
         $5_1 = HEAPF32[$8_1 + 28 >> 2];
         $18_1 = HEAPF32[$8_1 + 164 >> 2];
         $6_1 = HEAPF32[$8_1 + 36 >> 2];
         $7_1 = HEAPF32[$8_1 + 4 >> 2];
         $10 = HEAPF32[$8_1 + 20 >> 2];
         $24_1 = HEAPF32[$8_1 + 168 >> 2];
         $13_1 = HEAPF32[$8_1 + 40 >> 2];
         $15_1 = HEAPF32[$8_1 + 8 >> 2];
         $11 = HEAPF32[$8_1 + 24 >> 2];
         HEAP32[$19_1 + 192 >> 2] = 0;
         $22_1 = $7_1;
         $16_1 = $18_1;
         $7_1 = HEAPF32[$27_1 >> 2];
         $18_1 = HEAPF32[$39_1 >> 2];
         $21 = HEAPF32[$31_1 >> 2];
         $16_1 = Math_fround($16_1 * Math_fround(Math_fround(Math_fround($22_1 * $7_1) + Math_fround($10 * $18_1)) + Math_fround($6_1 * $21)));
         $23_1 = $15_1;
         $15_1 = Math_fround($24_1 * Math_fround(Math_fround(Math_fround($7_1 * $15_1) + Math_fround($18_1 * $11)) + Math_fround($21 * $13_1)));
         $24_1 = $4_1;
         $4_1 = Math_fround($25 * Math_fround(Math_fround(Math_fround($7_1 * $4_1) + Math_fround($18_1 * $5_1)) + Math_fround($21 * $3_1)));
         HEAPF32[$27_1 >> 2] = Math_fround(Math_fround($22_1 * $16_1) + Math_fround($23_1 * $15_1)) + Math_fround($24_1 * $4_1);
         HEAPF32[$39_1 >> 2] = Math_fround(Math_fround($10 * $16_1) + Math_fround($11 * $15_1)) + Math_fround($5_1 * $4_1);
         HEAPF32[$31_1 >> 2] = Math_fround(Math_fround($6_1 * $16_1) + Math_fround($13_1 * $15_1)) + Math_fround($3_1 * $4_1);
        }
        $824($0, $27_1, $29_1, $30, $14, $40_1, $12_1 - -64 | 0, $12_1 + 48 | 0, $28_1, $2_1, Math_fround(0.0), Math_fround(0.0));
        $20 = HEAP32[$2_1 + 72 >> 2];
       }
       if (($20 & 80) != 80) {
        break label$22
       }
       $14 = $19_1 + 124 | 0;
       HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1;
       break label$22;
      }
      $3_1 = HEAPF32[$12_1 + 44 >> 2];
      $17_1 = $19_1 + 156 | 0;
      $824($0, $19_1 + 164 | 0, $29_1, $30, $14, $40_1, $12_1 - -64 | 0, $12_1 + 48 | 0, $3_1, $2_1, HEAPF32[$19_1 + 140 >> 2], HEAPF32[$17_1 >> 2]);
      if (!(HEAPU8[$2_1 + 72 | 0] & 16)) {
       break label$22
      }
      $824($0, $19_1 + 180 | 0, $29_1, $30, $14, $40_1, $12_1 - -64 | 0, $12_1 + 48 | 0, $3_1, $2_1, HEAPF32[$19_1 + 144 >> 2], HEAPF32[$17_1 >> 2]);
     }
     $830($0, $42, $29_1, $30, $40_1, $2_1);
     $17_1 = HEAP32[$1_1 + 780 >> 2];
    }
    $44_1 = $44_1 + 1 | 0;
    if (($44_1 | 0) < ($17_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $12_1 + 80 | 0;
 }
 
 function $832($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  if (($2_1 | 0) >= 1) {
   while (1) {
    $831($0, HEAP32[$1_1 >> 2], $3_1);
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   }
  }
 }
 
 function $833($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = 0, $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = 0, $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = 0, $39_1 = 0, $40_1 = Math_fround(0), $41_1 = 0, $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = Math_fround(0), $58_1 = Math_fround(0), $59_1 = Math_fround(0), $60_1 = Math_fround(0), $61_1 = Math_fround(0), $62_1 = Math_fround(0), $63_1 = Math_fround(0), $64_1 = Math_fround(0), $65_1 = Math_fround(0), $66_1 = Math_fround(0), $67_1 = Math_fround(0), $68_1 = Math_fround(0);
  $25 = global$0 - 256 | 0;
  global$0 = $25;
  HEAP32[$0 + 188 >> 2] = -1;
  $613($25 + 248 | 0, 18248);
  $8_1 = HEAP32[$7_1 + 72 >> 2];
  if (($8_1 | 0) != HEAP32[$0 + 224 >> 2]) {
   HEAP32[$0 + 224 >> 2] = $8_1;
   HEAP32[$0 + 220 >> 2] = 536;
   HEAP32[$0 + 216 >> 2] = 535;
   HEAP32[$0 + 212 >> 2] = 534;
  }
  HEAP32[$0 + 184 >> 2] = 0;
  if (($2_1 | 0) >= 1) {
   $8_1 = $1_1;
   $11 = $2_1;
   while (1) {
    HEAP32[HEAP32[$8_1 >> 2] + 212 >> 2] = -1;
    $8_1 = $8_1 + 4 | 0;
    $11 = $11 + -1 | 0;
    if ($11) {
     continue
    }
    break;
   };
  }
  $8_1 = HEAP32[$0 + 12 >> 2];
  if (($8_1 | 0) <= ($2_1 | 0)) {
   $8_1 = $2_1 + 1 | 0;
   $11 = 0;
   label$5 : {
    if (!$8_1) {
     break label$5
    }
    $11 = $79(Math_imul($8_1, 244));
   }
   $9_1 = HEAP32[$0 + 8 >> 2];
   if (($9_1 | 0) >= 1) {
    $10 = 64;
    while (1) {
     $14 = HEAP32[$0 + 16 >> 2] + $10 | 0;
     $16_1 = $14 + -64 | 0;
     $18_1 = HEAP32[$16_1 + 4 >> 2];
     $13_1 = $10 + $11 | 0;
     $15_1 = $13_1 + -64 | 0;
     $12_1 = $15_1;
     HEAP32[$12_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $18_1;
     $16_1 = $16_1 + 8 | 0;
     $12_1 = HEAP32[$16_1 + 4 >> 2];
     $15_1 = $15_1 + 8 | 0;
     HEAP32[$15_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$15_1 + 4 >> 2] = $12_1;
     $15_1 = $14 + -48 | 0;
     $18_1 = $15_1 + 8 | 0;
     $29_1 = HEAP32[$18_1 + 4 >> 2];
     $16_1 = $13_1 + -48 | 0;
     $12_1 = $16_1 + 8 | 0;
     HEAP32[$12_1 >> 2] = HEAP32[$18_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $29_1;
     $12_1 = HEAP32[$15_1 + 4 >> 2];
     HEAP32[$16_1 >> 2] = HEAP32[$15_1 >> 2];
     HEAP32[$16_1 + 4 >> 2] = $12_1;
     $15_1 = $14 + -32 | 0;
     $18_1 = $15_1 + 8 | 0;
     $29_1 = HEAP32[$18_1 + 4 >> 2];
     $16_1 = $13_1 + -32 | 0;
     $12_1 = $16_1 + 8 | 0;
     HEAP32[$12_1 >> 2] = HEAP32[$18_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $29_1;
     $12_1 = HEAP32[$15_1 + 4 >> 2];
     HEAP32[$16_1 >> 2] = HEAP32[$15_1 >> 2];
     HEAP32[$16_1 + 4 >> 2] = $12_1;
     $16_1 = $14 + -16 | 0;
     $18_1 = HEAP32[$16_1 + 4 >> 2];
     $15_1 = $13_1 + -16 | 0;
     $12_1 = $15_1;
     HEAP32[$12_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $18_1;
     $16_1 = $16_1 + 8 | 0;
     $12_1 = HEAP32[$16_1 + 4 >> 2];
     $15_1 = $15_1 + 8 | 0;
     HEAP32[$15_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$15_1 + 4 >> 2] = $12_1;
     $7($13_1, $14, 180);
     $10 = $10 + 244 | 0;
     $9_1 = $9_1 + -1 | 0;
     if ($9_1) {
      continue
     }
     break;
    };
   }
   $9_1 = HEAP32[$0 + 16 >> 2];
   if ($9_1) {
    if (HEAPU8[$0 + 20 | 0]) {
     $80($9_1)
    }
    HEAP32[$0 + 16 >> 2] = 0;
   }
   HEAP32[$0 + 16 >> 2] = $11;
   HEAP32[$0 + 12 >> 2] = $8_1;
   HEAP8[$0 + 20 | 0] = 1;
  }
  $13_1 = $17($25, 0, 244);
  $11 = HEAP32[$0 + 8 >> 2];
  if (($11 | 0) <= -1) {
   if (($8_1 | 0) <= -1) {
    $8_1 = HEAP32[$0 + 16 >> 2];
    if ($8_1) {
     if (HEAPU8[$0 + 20 | 0]) {
      $80($8_1)
     }
     HEAP32[$0 + 16 >> 2] = 0;
    }
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP8[$0 + 20 | 0] = 1;
   }
   $10 = Math_imul($11, 244);
   $15_1 = $13_1 - -64 | 0;
   $25 = $13_1 + 48 | 0;
   $16_1 = $13_1 + 32 | 0;
   $9_1 = $13_1 + 16 | 0;
   while (1) {
    $8_1 = HEAP32[$13_1 + 4 >> 2];
    $14 = HEAP32[$0 + 16 >> 2] + $10 | 0;
    HEAP32[$14 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$14 + 4 >> 2] = $8_1;
    $12_1 = $13_1 + 8 | 0;
    $18_1 = HEAP32[$12_1 + 4 >> 2];
    $8_1 = $14 + 8 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $18_1;
    $8_1 = $9_1;
    $18_1 = HEAP32[$8_1 + 4 >> 2];
    $12_1 = $14 + 16 | 0;
    HEAP32[$12_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $18_1;
    $8_1 = $8_1 + 8 | 0;
    $18_1 = HEAP32[$8_1 + 4 >> 2];
    $12_1 = $14 + 24 | 0;
    HEAP32[$12_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $18_1;
    $12_1 = HEAP32[$16_1 + 4 >> 2];
    $8_1 = $14 + 32 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$16_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $12_1;
    $12_1 = $16_1 + 8 | 0;
    $18_1 = HEAP32[$12_1 + 4 >> 2];
    $8_1 = $14 + 40 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $18_1;
    $12_1 = HEAP32[$25 + 4 >> 2];
    $8_1 = $14 + 48 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$25 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $12_1;
    $12_1 = $25 + 8 | 0;
    $18_1 = HEAP32[$12_1 + 4 >> 2];
    $8_1 = $14 + 56 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $18_1;
    $7($14 - -64 | 0, $15_1, 180);
    $10 = $10 + 244 | 0;
    $8_1 = $11 + 1 | 0;
    $14 = $8_1 >>> 0 >= $11 >>> 0;
    $11 = $8_1;
    if ($14) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 8 >> 2] = 0;
  if (($2_1 | 0) >= 1) {
   while (1) {
    $11 = $827($0, HEAP32[$1_1 >> 2], HEAPF32[$7_1 + 12 >> 2]);
    $8_1 = HEAP32[$1_1 >> 2];
    label$18 : {
     if (!$8_1 | !(HEAP32[$8_1 + 252 >> 2] & 2) | HEAPF32[$8_1 + 404 >> 2] == Math_fround(0.0)) {
      break label$18
     }
     $9_1 = HEAP32[$0 + 16 >> 2];
     $10 = HEAP32[$8_1 + 564 >> 2];
     if ($10 & 2) {
      $806($13_1, $8_1, HEAPF32[$7_1 + 84 >> 2]);
      $21 = HEAPF32[$8_1 + 364 >> 2];
      $22_1 = HEAPF32[$8_1 + 332 >> 2];
      $30 = HEAPF32[$8_1 + 348 >> 2];
      $27_1 = HEAPF32[$8_1 + 360 >> 2];
      $26_1 = HEAPF32[$8_1 + 328 >> 2];
      $28_1 = HEAPF32[$8_1 + 344 >> 2];
      $10 = $9_1 + Math_imul($11, 244) | 0;
      $17_1 = HEAPF32[$13_1 >> 2];
      $19_1 = HEAPF32[$13_1 + 4 >> 2];
      $23_1 = HEAPF32[$13_1 + 8 >> 2];
      $20 = HEAPF32[$7_1 + 12 >> 2];
      HEAPF32[$10 + 224 >> 2] = HEAPF32[$10 + 224 >> 2] - Math_fround(Math_fround(Math_fround(Math_fround($17_1 * HEAPF32[$8_1 + 324 >> 2]) + Math_fround($19_1 * HEAPF32[$8_1 + 340 >> 2])) + Math_fround($23_1 * HEAPF32[$8_1 + 356 >> 2])) * $20);
      $14 = $10 + 228 | 0;
      HEAPF32[$14 >> 2] = HEAPF32[$14 >> 2] - Math_fround($20 * Math_fround(Math_fround(Math_fround($17_1 * $26_1) + Math_fround($19_1 * $28_1)) + Math_fround($23_1 * $27_1)));
      $10 = $10 + 232 | 0;
      HEAPF32[$10 >> 2] = HEAPF32[$10 >> 2] - Math_fround($20 * Math_fround(Math_fround(Math_fround($17_1 * $22_1) + Math_fround($19_1 * $30)) + Math_fround($23_1 * $21)));
      $10 = HEAP32[$8_1 + 564 >> 2];
     }
     if ($10 & 4) {
      $808($13_1, $8_1, HEAPF32[$7_1 + 12 >> 2]);
      $17_1 = HEAPF32[$13_1 + 8 >> 2];
      $19_1 = HEAPF32[$13_1 + 4 >> 2];
      $10 = $9_1 + Math_imul($11, 244) | 0;
      HEAPF32[$10 + 224 >> 2] = HEAPF32[$13_1 >> 2] + HEAPF32[$10 + 224 >> 2];
      $14 = $10 + 228 | 0;
      HEAPF32[$14 >> 2] = $19_1 + HEAPF32[$14 >> 2];
      $10 = $10 + 232 | 0;
      HEAPF32[$10 >> 2] = $17_1 + HEAPF32[$10 >> 2];
      $10 = HEAP32[$8_1 + 564 >> 2];
     }
     if (!($10 & 8)) {
      break label$18
     }
     $807($13_1, $8_1, HEAPF32[$7_1 + 12 >> 2]);
     $17_1 = HEAPF32[$13_1 + 8 >> 2];
     $19_1 = HEAPF32[$13_1 + 4 >> 2];
     $8_1 = $9_1 + Math_imul($11, 244) | 0;
     HEAPF32[$8_1 + 224 >> 2] = HEAPF32[$13_1 >> 2] + HEAPF32[$8_1 + 224 >> 2];
     $11 = $8_1 + 228 | 0;
     HEAPF32[$11 >> 2] = $19_1 + HEAPF32[$11 >> 2];
     $8_1 = $8_1 + 232 | 0;
     HEAPF32[$8_1 >> 2] = $17_1 + HEAPF32[$8_1 >> 2];
    }
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   }
  }
  if (($6_1 | 0) >= 1) {
   $8_1 = $5_1;
   $11 = $6_1;
   while (1) {
    $1_1 = HEAP32[$8_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1);
    HEAP32[$1_1 + 36 >> 2] = 0;
    $8_1 = $8_1 + 4 | 0;
    $11 = $11 + -1 | 0;
    if ($11) {
     continue
    }
    break;
   };
  }
  $1_1 = HEAP32[$0 + 168 >> 2];
  if (!(($1_1 | 0) >= ($6_1 | 0) | HEAP32[$0 + 172 >> 2] >= ($6_1 | 0))) {
   label$24 : {
    if (!$6_1) {
     $11 = 0;
     break label$24;
    }
    $11 = $79($6_1 << 3);
    $1_1 = HEAP32[$0 + 168 >> 2];
   }
   if (($1_1 | 0) >= 1) {
    $8_1 = 0;
    while (1) {
     $9_1 = HEAP32[$0 + 176 >> 2] + $8_1 | 0;
     $10 = HEAP32[$9_1 + 4 >> 2];
     $2_1 = $8_1 + $11 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $10;
     $8_1 = $8_1 + 8 | 0;
     $1_1 = $1_1 + -1 | 0;
     if ($1_1) {
      continue
     }
     break;
    };
   }
   $1_1 = HEAP32[$0 + 176 >> 2];
   if ($1_1) {
    if (HEAPU8[$0 + 180 | 0]) {
     $80($1_1)
    }
    HEAP32[$0 + 176 >> 2] = 0;
   }
   HEAP32[$0 + 176 >> 2] = $11;
   HEAP32[$0 + 172 >> 2] = $6_1;
   HEAP8[$0 + 180 | 0] = 1;
  }
  HEAP32[$0 + 168 >> 2] = $6_1;
  label$30 : {
   if (($6_1 | 0) < 1) {
    $10 = 0;
    break label$30;
   }
   $2_1 = 0;
   $11 = $5_1;
   $9_1 = $6_1;
   $10 = 0;
   while (1) {
    $14 = HEAP32[$0 + 176 >> 2];
    $1_1 = HEAP32[$11 >> 2];
    $8_1 = HEAP32[$1_1 + 44 >> 2];
    if ($8_1) {
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     $1_1 = $8_1 + 56 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $8_1 + 48 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $8_1 + 40 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $8_1 + 32 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $8_1 + 24 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $8_1 + 16 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $8_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = HEAP32[$11 >> 2];
    }
    $8_1 = $2_1 + $14 | 0;
    $2_1 = $2_1 + 8 | 0;
    $11 = $11 + 4 | 0;
    label$34 : {
     if (HEAPU8[$1_1 + 20 | 0]) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, $8_1);
      $1_1 = HEAP32[$8_1 >> 2];
      break label$34;
     }
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     $1_1 = 0;
    }
    $10 = $1_1 + $10 | 0;
    $9_1 = $9_1 + -1 | 0;
    if ($9_1) {
     continue
    }
    break;
   };
  }
  $1_1 = HEAP32[$0 + 48 >> 2];
  if (!(($1_1 | 0) >= ($10 | 0) | HEAP32[$0 + 52 >> 2] >= ($10 | 0))) {
   label$37 : {
    if (!$10) {
     $11 = 0;
     break label$37;
    }
    $11 = $79(Math_imul($10, 152));
    $1_1 = HEAP32[$0 + 48 >> 2];
   }
   if (($1_1 | 0) >= 1) {
    $8_1 = 0;
    while (1) {
     $7($8_1 + $11 | 0, HEAP32[$0 + 56 >> 2] + $8_1 | 0, 152);
     $8_1 = $8_1 + 152 | 0;
     $1_1 = $1_1 + -1 | 0;
     if ($1_1) {
      continue
     }
     break;
    };
   }
   $1_1 = HEAP32[$0 + 56 >> 2];
   if ($1_1) {
    if (HEAPU8[$0 + 60 | 0]) {
     $80($1_1)
    }
    HEAP32[$0 + 56 >> 2] = 0;
   }
   HEAP32[$0 + 56 >> 2] = $11;
   HEAP32[$0 + 52 >> 2] = $10;
   HEAP8[$0 + 60 | 0] = 1;
  }
  HEAP32[$0 + 48 >> 2] = $10;
  if (($6_1 | 0) >= 1) {
   $8_1 = HEAP32[$0 + 176 >> 2];
   $25 = 0;
   $15_1 = 0;
   while (1) {
    $49_1 = $15_1;
    $41_1 = $25 << 3;
    $16_1 = $41_1 + $8_1 | 0;
    if (HEAP32[$16_1 >> 2]) {
     $12_1 = ($25 << 2) + $5_1 | 0;
     $14 = HEAP32[$12_1 >> 2];
     $11 = HEAP32[$14 + 32 >> 2];
     $18_1 = HEAP32[$0 + 56 >> 2];
     $9_1 = HEAP32[$14 + 28 >> 2];
     $10 = $827($0, $9_1, HEAPF32[$7_1 + 12 >> 2]);
     $29_1 = $827($0, $11, HEAPF32[$7_1 + 12 >> 2]);
     $38 = Math_imul($15_1, 152);
     $39_1 = HEAP32[$0 + 16 >> 2];
     $1_1 = HEAP32[$14 + 24 >> 2];
     $35 = ($1_1 | 0) > 0 ? $1_1 : HEAP32[$7_1 + 20 >> 2];
     if (($35 | 0) > HEAP32[$0 + 184 >> 2]) {
      HEAP32[$0 + 184 >> 2] = $35
     }
     $1_1 = $18_1 + $38 | 0;
     if (HEAP32[$16_1 >> 2] >= 1) {
      $2_1 = 0;
      $8_1 = $1_1;
      while (1) {
       $8_1 = $17($8_1, 0, 152);
       $15_1 = $8_1 + 120 | 0;
       HEAP32[$15_1 >> 2] = -8388609;
       HEAP32[$15_1 + 4 >> 2] = 2139095039;
       HEAP32[$8_1 + 148 >> 2] = $29_1;
       HEAP32[$8_1 + 144 >> 2] = $10;
       $15_1 = $8_1 + 96 | 0;
       HEAP32[$15_1 >> 2] = 0;
       HEAP32[$15_1 + 4 >> 2] = 0;
       HEAP32[$8_1 + 136 >> 2] = $35;
       $8_1 = $8_1 + 152 | 0;
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) < HEAP32[$16_1 >> 2]) {
        continue
       }
       break;
      };
     }
     $2_1 = $39_1 + Math_imul($10, 244) | 0;
     $8_1 = $2_1;
     HEAP32[$8_1 + 144 >> 2] = 0;
     HEAP32[$8_1 + 148 >> 2] = 0;
     $8_1 = $8_1 + 152 | 0;
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     $8_1 = $2_1 + 160 | 0;
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     $8_1 = $2_1 + 168 | 0;
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 64 >> 2] = 0;
     HEAP32[$2_1 + 68 >> 2] = 0;
     $8_1 = $2_1 + 88 | 0;
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     $8_1 = $2_1 + 80 | 0;
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     $8_1 = $2_1 + 72 | 0;
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     $10 = $39_1 + Math_imul($29_1, 244) | 0;
     $8_1 = $10;
     HEAP32[$8_1 + 144 >> 2] = 0;
     HEAP32[$8_1 + 148 >> 2] = 0;
     $8_1 = $8_1 + 152 | 0;
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     $8_1 = $10 + 160 | 0;
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     $8_1 = $10 + 168 | 0;
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     HEAP32[$10 + 64 >> 2] = 0;
     HEAP32[$10 + 68 >> 2] = 0;
     $8_1 = $10 + 72 | 0;
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     $8_1 = $10 + 80 | 0;
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     $8_1 = $10 + 88 | 0;
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     HEAP32[$1_1 + 116 >> 2] = HEAP32[$7_1 + 40 >> 2];
     HEAP32[$13_1 + 28 >> 2] = $1_1 + 112;
     HEAP32[$13_1 + 24 >> 2] = 38;
     HEAP32[$13_1 + 20 >> 2] = $1_1 + 32;
     HEAP32[$13_1 + 16 >> 2] = $1_1 + 48;
     HEAP32[$13_1 + 12 >> 2] = $1_1;
     HEAP32[$13_1 + 8 >> 2] = $1_1 + 16;
     HEAP32[$13_1 + 40 >> 2] = $1_1 + 124;
     HEAP32[$13_1 + 36 >> 2] = $1_1 + 120;
     HEAP32[$13_1 + 32 >> 2] = $1_1 + 116;
     HEAP32[$13_1 + 4 >> 2] = HEAP32[$7_1 + 32 >> 2];
     HEAP32[$13_1 + 48 >> 2] = HEAP32[$7_1 + 4 >> 2];
     HEAPF32[$13_1 >> 2] = Math_fround(1.0) / HEAPF32[$7_1 + 12 >> 2];
     HEAP32[$13_1 + 44 >> 2] = HEAP32[$7_1 + 20 >> 2];
     $1_1 = HEAP32[$12_1 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1, $13_1);
     if (HEAP32[$16_1 >> 2] >= 1) {
      $8_1 = ($18_1 + $38 | 0) + 132 | 0;
      $18_1 = $10 + 232 | 0;
      $29_1 = $10 + 228 | 0;
      $38 = $10 + 224 | 0;
      $39_1 = $10 + 216 | 0;
      $35 = $10 + 212 | 0;
      $15_1 = $10 + 208 | 0;
      $10 = $10 + 240 | 0;
      $50_1 = $2_1 + 232 | 0;
      $51_1 = $2_1 + 228 | 0;
      $52_1 = $2_1 + 224 | 0;
      $53_1 = $2_1 + 216 | 0;
      $54_1 = $2_1 + 212 | 0;
      $55_1 = $2_1 + 208 | 0;
      $56_1 = $2_1 + 240 | 0;
      $2_1 = 0;
      while (1) {
       $1_1 = $8_1 + -8 | 0;
       $17_1 = HEAPF32[HEAP32[$12_1 >> 2] + 16 >> 2];
       if (!!(HEAPF32[$1_1 >> 2] >= $17_1)) {
        HEAPF32[$1_1 >> 2] = $17_1
       }
       $1_1 = $8_1 + -12 | 0;
       $17_1 = Math_fround(-$17_1);
       if (!!(HEAPF32[$1_1 >> 2] <= $17_1)) {
        HEAPF32[$1_1 >> 2] = $17_1
       }
       HEAP32[$8_1 >> 2] = $14;
       $1_1 = HEAP32[$14 + 28 >> 2];
       $20 = HEAPF32[$1_1 + 328 >> 2];
       $21 = HEAPF32[$1_1 + 332 >> 2];
       $22_1 = HEAPF32[$1_1 + 608 >> 2];
       $30 = HEAPF32[$1_1 + 348 >> 2];
       $27_1 = HEAPF32[$1_1 + 340 >> 2];
       $26_1 = HEAPF32[$1_1 + 344 >> 2];
       $17_1 = HEAPF32[$1_1 + 612 >> 2];
       $23_1 = HEAPF32[$1_1 + 364 >> 2];
       $19_1 = HEAPF32[$1_1 + 356 >> 2];
       $28_1 = HEAPF32[$1_1 + 360 >> 2];
       $32 = HEAPF32[$1_1 + 604 >> 2];
       $24_1 = HEAPF32[$1_1 + 324 >> 2];
       HEAP32[$8_1 + -56 >> 2] = 0;
       $31_1 = $17_1;
       $17_1 = HEAPF32[$8_1 + -132 >> 2];
       $33_1 = Math_fround($19_1 * $17_1);
       $19_1 = HEAPF32[$8_1 + -128 >> 2];
       $34 = $23_1;
       $23_1 = HEAPF32[$8_1 + -124 >> 2];
       HEAPF32[$8_1 + -60 >> 2] = $31_1 * Math_fround(Math_fround($33_1 + Math_fround($28_1 * $19_1)) + Math_fround($34 * $23_1));
       HEAPF32[$8_1 + -64 >> 2] = $22_1 * Math_fround(Math_fround(Math_fround($17_1 * $27_1) + Math_fround($19_1 * $26_1)) + Math_fround($23_1 * $30));
       HEAPF32[$8_1 + -68 >> 2] = $32 * Math_fround(Math_fround(Math_fround($24_1 * $17_1) + Math_fround($20 * $19_1)) + Math_fround($21 * $23_1));
       $1_1 = HEAP32[$14 + 32 >> 2];
       $30 = HEAPF32[$1_1 + 328 >> 2];
       $27_1 = HEAPF32[$1_1 + 332 >> 2];
       $26_1 = HEAPF32[$1_1 + 608 >> 2];
       $28_1 = HEAPF32[$1_1 + 348 >> 2];
       $32 = HEAPF32[$1_1 + 340 >> 2];
       $24_1 = HEAPF32[$1_1 + 344 >> 2];
       $20 = HEAPF32[$1_1 + 612 >> 2];
       $22_1 = HEAPF32[$1_1 + 364 >> 2];
       $21 = HEAPF32[$1_1 + 356 >> 2];
       $36_1 = HEAPF32[$1_1 + 360 >> 2];
       $37_1 = HEAPF32[$1_1 + 604 >> 2];
       $33_1 = HEAPF32[$1_1 + 324 >> 2];
       HEAP32[$8_1 + -40 >> 2] = 0;
       $31_1 = $20;
       $20 = HEAPF32[$8_1 + -100 >> 2];
       $40_1 = Math_fround($21 * $20);
       $21 = HEAPF32[$8_1 + -96 >> 2];
       $34 = $22_1;
       $22_1 = HEAPF32[$8_1 + -92 >> 2];
       HEAPF32[$8_1 + -44 >> 2] = $31_1 * Math_fround(Math_fround($40_1 + Math_fround($36_1 * $21)) + Math_fround($34 * $22_1));
       HEAPF32[$8_1 + -48 >> 2] = $26_1 * Math_fround(Math_fround(Math_fround($20 * $32) + Math_fround($21 * $24_1)) + Math_fround($22_1 * $28_1));
       HEAPF32[$8_1 + -52 >> 2] = $37_1 * Math_fround(Math_fround(Math_fround($33_1 * $20) + Math_fround($30 * $21)) + Math_fround($27_1 * $22_1));
       $30 = Math_fround(0.0);
       $27_1 = HEAPF32[$8_1 + -116 >> 2];
       $26_1 = HEAPF32[$9_1 + 404 >> 2];
       $28_1 = HEAPF32[$8_1 + -112 >> 2];
       $32 = HEAPF32[$8_1 + -108 >> 2];
       $31_1 = Math_fround(Math_fround(Math_fround(Math_fround($27_1 * Math_fround($27_1 * $26_1)) + Math_fround($28_1 * Math_fround($26_1 * $28_1))) + Math_fround($32 * Math_fround($26_1 * $32))) + Math_fround(Math_fround(Math_fround($17_1 * Math_fround(Math_fround(Math_fround($17_1 * HEAPF32[$9_1 + 324 >> 2]) + Math_fround($19_1 * HEAPF32[$9_1 + 328 >> 2])) + Math_fround($23_1 * HEAPF32[$9_1 + 332 >> 2]))) + Math_fround($19_1 * Math_fround(Math_fround(Math_fround($17_1 * HEAPF32[$9_1 + 340 >> 2]) + Math_fround($19_1 * HEAPF32[$9_1 + 344 >> 2])) + Math_fround($23_1 * HEAPF32[$9_1 + 348 >> 2])))) + Math_fround($23_1 * Math_fround(Math_fround(Math_fround($17_1 * HEAPF32[$9_1 + 356 >> 2]) + Math_fround($19_1 * HEAPF32[$9_1 + 360 >> 2])) + Math_fround($23_1 * HEAPF32[$9_1 + 364 >> 2])))));
       $26_1 = HEAPF32[$8_1 + -84 >> 2];
       $24_1 = HEAPF32[$11 + 404 >> 2];
       $36_1 = HEAPF32[$8_1 + -80 >> 2];
       $37_1 = HEAPF32[$8_1 + -76 >> 2];
       $24_1 = Math_fround(Math_fround($31_1 + Math_fround(Math_fround(Math_fround($26_1 * Math_fround($26_1 * $24_1)) + Math_fround($36_1 * Math_fround($24_1 * $36_1))) + Math_fround($37_1 * Math_fround($24_1 * $37_1)))) + Math_fround(Math_fround(Math_fround($20 * Math_fround(Math_fround(Math_fround($20 * HEAPF32[$11 + 324 >> 2]) + Math_fround($21 * HEAPF32[$11 + 328 >> 2])) + Math_fround($22_1 * HEAPF32[$11 + 332 >> 2]))) + Math_fround($21 * Math_fround(Math_fround(Math_fround($20 * HEAPF32[$11 + 340 >> 2]) + Math_fround($21 * HEAPF32[$11 + 344 >> 2])) + Math_fround($22_1 * HEAPF32[$11 + 348 >> 2])))) + Math_fround($22_1 * Math_fround(Math_fround(Math_fround($20 * HEAPF32[$11 + 356 >> 2]) + Math_fround($21 * HEAPF32[$11 + 360 >> 2])) + Math_fround($22_1 * HEAPF32[$11 + 364 >> 2])))));
       $24_1 = Math_fround(Math_abs($24_1)) > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_fround(1.0) / $24_1) : Math_fround(0.0);
       HEAPF32[$8_1 + -24 >> 2] = $24_1;
       $33_1 = Math_fround(0.0);
       $31_1 = Math_fround(0.0);
       $34 = Math_fround(0.0);
       $40_1 = Math_fround(0.0);
       $42 = Math_fround(0.0);
       $43_1 = Math_fround(0.0);
       if (HEAP32[$56_1 >> 2]) {
        $43_1 = HEAPF32[$50_1 >> 2];
        $42 = HEAPF32[$51_1 >> 2];
        $40_1 = HEAPF32[$52_1 >> 2];
        $31_1 = HEAPF32[$54_1 >> 2];
        $34 = HEAPF32[$55_1 >> 2];
        $33_1 = HEAPF32[$53_1 >> 2];
       }
       $44_1 = Math_fround(0.0);
       $45_1 = Math_fround(0.0);
       $46_1 = Math_fround(0.0);
       $47 = Math_fround(0.0);
       $48_1 = Math_fround(0.0);
       if (HEAP32[$10 >> 2]) {
        $48_1 = HEAPF32[$18_1 >> 2];
        $47 = HEAPF32[$29_1 >> 2];
        $46_1 = HEAPF32[$38 >> 2];
        $44_1 = HEAPF32[$35 >> 2];
        $45_1 = HEAPF32[$15_1 >> 2];
        $30 = HEAPF32[$39_1 >> 2];
       }
       $57_1 = HEAPF32[$9_1 + 380 >> 2];
       $58_1 = HEAPF32[$9_1 + 372 >> 2];
       $59_1 = HEAPF32[$9_1 + 376 >> 2];
       $60_1 = HEAPF32[$9_1 + 396 >> 2];
       $61_1 = HEAPF32[$9_1 + 388 >> 2];
       $62_1 = HEAPF32[$9_1 + 392 >> 2];
       $63_1 = HEAPF32[$11 + 380 >> 2];
       $64_1 = HEAPF32[$11 + 372 >> 2];
       $65_1 = HEAPF32[$11 + 376 >> 2];
       $66_1 = HEAPF32[$11 + 396 >> 2];
       $67_1 = HEAPF32[$11 + 388 >> 2];
       $68_1 = HEAPF32[$11 + 392 >> 2];
       HEAP32[$8_1 + -32 >> 2] = 0;
       $1_1 = $8_1 + -20 | 0;
       HEAPF32[$1_1 >> 2] = Math_fround($24_1 * HEAPF32[$1_1 >> 2]) + Math_fround($24_1 * Math_fround(Math_fround(0.0) - Math_fround(HEAPF32[$13_1 + 48 >> 2] * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($27_1 * Math_fround($34 + $58_1)) + Math_fround($28_1 * Math_fround($31_1 + $59_1))) + Math_fround($32 * Math_fround($33_1 + $57_1))) + Math_fround(Math_fround(Math_fround($17_1 * Math_fround($40_1 + $61_1)) + Math_fround($19_1 * Math_fround($42 + $62_1))) + Math_fround($23_1 * Math_fround($43_1 + $60_1)))) + Math_fround(Math_fround(Math_fround(Math_fround($26_1 * Math_fround($45_1 + $64_1)) + Math_fround($36_1 * Math_fround($44_1 + $65_1))) + Math_fround($37_1 * Math_fround($30 + $63_1))) + Math_fround(Math_fround(Math_fround($20 * Math_fround($46_1 + $67_1)) + Math_fround($21 * Math_fround($47 + $68_1))) + Math_fround($22_1 * Math_fround($48_1 + $66_1))))))));
       $8_1 = $8_1 + 152 | 0;
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) < HEAP32[$16_1 >> 2]) {
        continue
       }
       break;
      };
     }
     $8_1 = HEAP32[$0 + 176 >> 2];
    }
    $15_1 = $49_1 + HEAP32[$8_1 + $41_1 >> 2] | 0;
    $25 = $25 + 1 | 0;
    if (($25 | 0) != ($6_1 | 0)) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $3_1, $4_1, $7_1);
  $5_1 = HEAP32[$0 + 68 >> 2];
  $4_1 = HEAP32[$0 + 28 >> 2];
  $9_1 = HEAP32[$0 + 128 >> 2];
  $6_1 = HEAP32[$0 + 48 >> 2];
  if (!(($9_1 | 0) >= ($6_1 | 0) | HEAP32[$0 + 132 >> 2] >= ($6_1 | 0))) {
   label$56 : {
    if (!$6_1) {
     $2_1 = 0;
     break label$56;
    }
    $2_1 = $79($6_1 << 2);
    $9_1 = HEAP32[$0 + 128 >> 2];
   }
   $3_1 = HEAP32[$0 + 136 >> 2];
   label$58 : {
    label$59 : {
     if (($9_1 | 0) >= 1) {
      $8_1 = $2_1;
      $1_1 = $3_1;
      while (1) {
       HEAP32[$8_1 >> 2] = HEAP32[$1_1 >> 2];
       $8_1 = $8_1 + 4 | 0;
       $1_1 = $1_1 + 4 | 0;
       $9_1 = $9_1 + -1 | 0;
       if ($9_1) {
        continue
       }
       break;
      };
      break label$59;
     }
     if (!$3_1) {
      break label$58
     }
    }
    if (HEAPU8[$0 + 140 | 0]) {
     $80($3_1)
    }
    HEAP32[$0 + 136 >> 2] = 0;
   }
   HEAP32[$0 + 136 >> 2] = $2_1;
   HEAP32[$0 + 132 >> 2] = $6_1;
   HEAP8[$0 + 140 | 0] = 1;
  }
  HEAP32[$0 + 128 >> 2] = $6_1;
  label$63 : {
   if (HEAPU8[$7_1 + 72 | 0] & 16) {
    $9_1 = HEAP32[$0 + 108 >> 2];
    $3_1 = $4_1 << 1;
    if (!(($9_1 | 0) >= ($3_1 | 0) | HEAP32[$0 + 112 >> 2] >= ($3_1 | 0))) {
     label$66 : {
      if (!$4_1) {
       $11 = 0;
       break label$66;
      }
      $11 = $79($4_1 << 3);
      $9_1 = HEAP32[$0 + 108 >> 2];
     }
     $2_1 = HEAP32[$0 + 116 >> 2];
     label$68 : {
      label$69 : {
       if (($9_1 | 0) >= 1) {
        $8_1 = $11;
        $1_1 = $2_1;
        while (1) {
         HEAP32[$8_1 >> 2] = HEAP32[$1_1 >> 2];
         $8_1 = $8_1 + 4 | 0;
         $1_1 = $1_1 + 4 | 0;
         $9_1 = $9_1 + -1 | 0;
         if ($9_1) {
          continue
         }
         break;
        };
        break label$69;
       }
       if (!$2_1) {
        break label$68
       }
      }
      if (HEAPU8[$0 + 120 | 0]) {
       $80($2_1)
      }
      HEAP32[$0 + 116 >> 2] = 0;
     }
     HEAP32[$0 + 116 >> 2] = $11;
     HEAP32[$0 + 112 >> 2] = $3_1;
     HEAP8[$0 + 120 | 0] = 1;
    }
    HEAP32[$0 + 108 >> 2] = $3_1;
    break label$63;
   }
   $9_1 = HEAP32[$0 + 108 >> 2];
   if (!(($9_1 | 0) >= ($4_1 | 0) | HEAP32[$0 + 112 >> 2] >= ($4_1 | 0))) {
    label$74 : {
     if (!$4_1) {
      $2_1 = 0;
      break label$74;
     }
     $2_1 = $79($4_1 << 2);
     $9_1 = HEAP32[$0 + 108 >> 2];
    }
    $3_1 = HEAP32[$0 + 116 >> 2];
    label$76 : {
     label$77 : {
      if (($9_1 | 0) >= 1) {
       $8_1 = $2_1;
       $1_1 = $3_1;
       while (1) {
        HEAP32[$8_1 >> 2] = HEAP32[$1_1 >> 2];
        $8_1 = $8_1 + 4 | 0;
        $1_1 = $1_1 + 4 | 0;
        $9_1 = $9_1 + -1 | 0;
        if ($9_1) {
         continue
        }
        break;
       };
       break label$77;
      }
      if (!$3_1) {
       break label$76
      }
     }
     if (HEAPU8[$0 + 120 | 0]) {
      $80($3_1)
     }
     HEAP32[$0 + 116 >> 2] = 0;
    }
    HEAP32[$0 + 116 >> 2] = $2_1;
    HEAP32[$0 + 112 >> 2] = $4_1;
    HEAP8[$0 + 120 | 0] = 1;
   }
   HEAP32[$0 + 108 >> 2] = $4_1;
  }
  $9_1 = HEAP32[$0 + 148 >> 2];
  if (!(($9_1 | 0) >= ($5_1 | 0) | HEAP32[$0 + 152 >> 2] >= ($5_1 | 0))) {
   label$82 : {
    if (!$5_1) {
     $2_1 = 0;
     break label$82;
    }
    $2_1 = $79($5_1 << 2);
    $9_1 = HEAP32[$0 + 148 >> 2];
   }
   $3_1 = HEAP32[$0 + 156 >> 2];
   label$84 : {
    label$85 : {
     if (($9_1 | 0) >= 1) {
      $8_1 = $2_1;
      $1_1 = $3_1;
      while (1) {
       HEAP32[$8_1 >> 2] = HEAP32[$1_1 >> 2];
       $8_1 = $8_1 + 4 | 0;
       $1_1 = $1_1 + 4 | 0;
       $9_1 = $9_1 + -1 | 0;
       if ($9_1) {
        continue
       }
       break;
      };
      break label$85;
     }
     if (!$3_1) {
      break label$84
     }
    }
    if (HEAPU8[$0 + 160 | 0]) {
     $80($3_1)
    }
    HEAP32[$0 + 156 >> 2] = 0;
   }
   HEAP32[$0 + 156 >> 2] = $2_1;
   HEAP32[$0 + 152 >> 2] = $5_1;
   HEAP8[$0 + 160 | 0] = 1;
  }
  HEAP32[$0 + 148 >> 2] = $5_1;
  if (($6_1 | 0) >= 1) {
   $8_1 = HEAP32[$0 + 136 >> 2];
   $1_1 = 0;
   while (1) {
    HEAP32[$8_1 >> 2] = $1_1;
    $8_1 = $8_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($6_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   };
  }
  if (($4_1 | 0) >= 1) {
   $8_1 = HEAP32[$0 + 116 >> 2];
   $1_1 = 0;
   while (1) {
    HEAP32[$8_1 >> 2] = $1_1;
    $8_1 = $8_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($4_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   };
  }
  if (($5_1 | 0) >= 1) {
   $8_1 = HEAP32[$0 + 156 >> 2];
   $1_1 = 0;
   while (1) {
    HEAP32[$8_1 >> 2] = $1_1;
    $8_1 = $8_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($5_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   };
  }
  $614();
  global$0 = $13_1 + 256 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function $834($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = 0;
  label$1 : {
   if (!(HEAP8[$8_1 + 72 | 0] & 1)) {
    break label$1
   }
   $17_1 = HEAP32[$0 + 68 >> 2];
   $15_1 = HEAP32[$0 + 28 >> 2];
   $16_1 = HEAP32[$0 + 48 >> 2];
   if (($16_1 | 0) >= 1) {
    $4_1 = Math_imul(HEAP32[$0 + 232 >> 2], 1664525) + 1013904223 | 0;
    label$3 : {
     if (($16_1 | 0) == 1) {
      break label$3
     }
     $10 = HEAP32[$0 + 136 >> 2];
     $2_1 = HEAP32[$10 + 4 >> 2];
     $4_1 = Math_imul($4_1, 1664525) + 1013904223 | 0;
     $3_1 = $4_1 ^ $4_1 >>> 16;
     $3_1 = $3_1 >>> 8 ^ $3_1;
     $3_1 = $3_1 >>> 4 ^ $3_1;
     $3_1 = $3_1 >>> 2 ^ $3_1;
     $3_1 = $10 + ((($3_1 >>> 1 ^ $3_1) & 1) << 2) | 0;
     HEAP32[$10 + 4 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$3_1 >> 2] = $2_1;
     if (($16_1 | 0) == 2) {
      break label$3
     }
     $2_1 = HEAP32[$10 + 8 >> 2];
     $4_1 = Math_imul($4_1, 1664525) + 1013904223 | 0;
     $3_1 = $4_1 ^ $4_1 >>> 16;
     $3_1 = $3_1 >>> 8 ^ $3_1;
     $3_1 = $3_1 >>> 4 ^ $3_1;
     $3_1 = $10 + ((($3_1 >>> 2 ^ $3_1) >>> 0) % 3 << 2) | 0;
     HEAP32[$10 + 8 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$3_1 >> 2] = $2_1;
     if (($16_1 | 0) == 3) {
      break label$3
     }
     $2_1 = HEAP32[$10 + 12 >> 2];
     $4_1 = Math_imul($4_1, 1664525) + 1013904223 | 0;
     $3_1 = $4_1 ^ $4_1 >>> 16;
     $3_1 = $3_1 >>> 8 ^ $3_1;
     $3_1 = $3_1 >>> 4 ^ $3_1;
     $3_1 = $10 + ((($3_1 >>> 2 ^ $3_1) & 3) << 2) | 0;
     HEAP32[$10 + 12 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$3_1 >> 2] = $2_1;
     if (($16_1 | 0) == 4) {
      break label$3
     }
     $9_1 = $10 + 16 | 0;
     $2_1 = 4;
     while (1) {
      $3_1 = $2_1;
      $2_1 = $3_1 + 1 | 0;
      $20 = HEAP32[$9_1 >> 2];
      $18_1 = $9_1;
      $19_1 = $10;
      $4_1 = Math_imul($4_1, 1664525) + 1013904223 | 0;
      $13_1 = $4_1;
      label$5 : {
       if ($3_1 >>> 0 > 65535) {
        break label$5
       }
       $5_1 = $4_1 >>> 16 ^ $4_1;
       $13_1 = $5_1;
       if ($3_1 >>> 0 > 255) {
        break label$5
       }
       $5_1 = $5_1 >>> 8 ^ $5_1;
       $13_1 = $5_1;
       if ($3_1 >>> 0 > 15) {
        break label$5
       }
       $13_1 = $5_1 >>> 4 ^ $5_1;
      }
      $3_1 = $19_1 + (($13_1 >>> 0) % ($2_1 >>> 0) << 2) | 0;
      HEAP32[$18_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$3_1 >> 2] = $20;
      $9_1 = $9_1 + 4 | 0;
      if (($2_1 | 0) != ($16_1 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 232 >> 2] = $4_1;
   }
   if (HEAP32[$8_1 + 20 >> 2] <= ($1_1 | 0)) {
    break label$1
   }
   if (($15_1 | 0) >= 1) {
    $4_1 = Math_imul(HEAP32[$0 + 232 >> 2], 1664525) + 1013904223 | 0;
    label$7 : {
     if (($15_1 | 0) == 1) {
      break label$7
     }
     $10 = HEAP32[$0 + 116 >> 2];
     $2_1 = HEAP32[$10 + 4 >> 2];
     $4_1 = Math_imul($4_1, 1664525) + 1013904223 | 0;
     $3_1 = $4_1 ^ $4_1 >>> 16;
     $3_1 = $3_1 >>> 8 ^ $3_1;
     $3_1 = $3_1 >>> 4 ^ $3_1;
     $3_1 = $3_1 >>> 2 ^ $3_1;
     $3_1 = $10 + ((($3_1 >>> 1 ^ $3_1) & 1) << 2) | 0;
     HEAP32[$10 + 4 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$3_1 >> 2] = $2_1;
     if (($15_1 | 0) == 2) {
      break label$7
     }
     $2_1 = HEAP32[$10 + 8 >> 2];
     $4_1 = Math_imul($4_1, 1664525) + 1013904223 | 0;
     $3_1 = $4_1 ^ $4_1 >>> 16;
     $3_1 = $3_1 >>> 8 ^ $3_1;
     $3_1 = $3_1 >>> 4 ^ $3_1;
     $3_1 = $10 + ((($3_1 >>> 2 ^ $3_1) >>> 0) % 3 << 2) | 0;
     HEAP32[$10 + 8 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$3_1 >> 2] = $2_1;
     if (($15_1 | 0) == 3) {
      break label$7
     }
     $2_1 = HEAP32[$10 + 12 >> 2];
     $4_1 = Math_imul($4_1, 1664525) + 1013904223 | 0;
     $3_1 = $4_1 ^ $4_1 >>> 16;
     $3_1 = $3_1 >>> 8 ^ $3_1;
     $3_1 = $3_1 >>> 4 ^ $3_1;
     $3_1 = $10 + ((($3_1 >>> 2 ^ $3_1) & 3) << 2) | 0;
     HEAP32[$10 + 12 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$3_1 >> 2] = $2_1;
     if (($15_1 | 0) == 4) {
      break label$7
     }
     $9_1 = $10 + 16 | 0;
     $2_1 = 4;
     while (1) {
      $3_1 = $2_1;
      $2_1 = $3_1 + 1 | 0;
      $16_1 = HEAP32[$9_1 >> 2];
      $18_1 = $9_1;
      $19_1 = $10;
      $4_1 = Math_imul($4_1, 1664525) + 1013904223 | 0;
      $13_1 = $4_1;
      label$9 : {
       if ($3_1 >>> 0 > 65535) {
        break label$9
       }
       $5_1 = $4_1 >>> 16 ^ $4_1;
       $13_1 = $5_1;
       if ($3_1 >>> 0 > 255) {
        break label$9
       }
       $5_1 = $5_1 >>> 8 ^ $5_1;
       $13_1 = $5_1;
       if ($3_1 >>> 0 > 15) {
        break label$9
       }
       $13_1 = $5_1 >>> 4 ^ $5_1;
      }
      $3_1 = $19_1 + (($13_1 >>> 0) % ($2_1 >>> 0) << 2) | 0;
      HEAP32[$18_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$3_1 >> 2] = $16_1;
      $9_1 = $9_1 + 4 | 0;
      if (($2_1 | 0) != ($15_1 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 232 >> 2] = $4_1;
   }
   if (($17_1 | 0) < 1) {
    break label$1
   }
   $4_1 = Math_imul(HEAP32[$0 + 232 >> 2], 1664525) + 1013904223 | 0;
   label$10 : {
    if (($17_1 | 0) == 1) {
     break label$10
    }
    $10 = HEAP32[$0 + 156 >> 2];
    $2_1 = HEAP32[$10 + 4 >> 2];
    $4_1 = Math_imul($4_1, 1664525) + 1013904223 | 0;
    $3_1 = $4_1 ^ $4_1 >>> 16;
    $3_1 = $3_1 >>> 8 ^ $3_1;
    $3_1 = $3_1 >>> 4 ^ $3_1;
    $3_1 = $3_1 >>> 2 ^ $3_1;
    $3_1 = $10 + ((($3_1 >>> 1 ^ $3_1) & 1) << 2) | 0;
    HEAP32[$10 + 4 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$3_1 >> 2] = $2_1;
    if (($17_1 | 0) == 2) {
     break label$10
    }
    $2_1 = HEAP32[$10 + 8 >> 2];
    $4_1 = Math_imul($4_1, 1664525) + 1013904223 | 0;
    $3_1 = $4_1 ^ $4_1 >>> 16;
    $3_1 = $3_1 >>> 8 ^ $3_1;
    $3_1 = $3_1 >>> 4 ^ $3_1;
    $3_1 = $10 + ((($3_1 >>> 2 ^ $3_1) >>> 0) % 3 << 2) | 0;
    HEAP32[$10 + 8 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$3_1 >> 2] = $2_1;
    if (($17_1 | 0) == 3) {
     break label$10
    }
    $2_1 = HEAP32[$10 + 12 >> 2];
    $4_1 = Math_imul($4_1, 1664525) + 1013904223 | 0;
    $3_1 = $4_1 ^ $4_1 >>> 16;
    $3_1 = $3_1 >>> 8 ^ $3_1;
    $3_1 = $3_1 >>> 4 ^ $3_1;
    $3_1 = $10 + ((($3_1 >>> 2 ^ $3_1) & 3) << 2) | 0;
    HEAP32[$10 + 12 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$3_1 >> 2] = $2_1;
    if (($17_1 | 0) == 4) {
     break label$10
    }
    $9_1 = $10 + 16 | 0;
    $2_1 = 4;
    while (1) {
     $3_1 = $2_1;
     $2_1 = $3_1 + 1 | 0;
     $15_1 = HEAP32[$9_1 >> 2];
     $18_1 = $9_1;
     $19_1 = $10;
     $4_1 = Math_imul($4_1, 1664525) + 1013904223 | 0;
     $13_1 = $4_1;
     label$12 : {
      if ($3_1 >>> 0 > 65535) {
       break label$12
      }
      $5_1 = $4_1 >>> 16 ^ $4_1;
      $13_1 = $5_1;
      if ($3_1 >>> 0 > 255) {
       break label$12
      }
      $5_1 = $5_1 >>> 8 ^ $5_1;
      $13_1 = $5_1;
      if ($3_1 >>> 0 > 15) {
       break label$12
      }
      $13_1 = $5_1 >>> 4 ^ $5_1;
     }
     $3_1 = $19_1 + (($13_1 >>> 0) % ($2_1 >>> 0) << 2) | 0;
     HEAP32[$18_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$3_1 >> 2] = $15_1;
     $9_1 = $9_1 + 4 | 0;
     if (($2_1 | 0) != ($17_1 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 + 232 >> 2] = $4_1;
  }
  $5_1 = HEAP32[$0 + 48 >> 2];
  if (($5_1 | 0) >= 1) {
   $4_1 = 0;
   $2_1 = 0;
   while (1) {
    $3_1 = HEAP32[$0 + 56 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 136 >> 2] + $4_1 >> 2], 152) | 0;
    if (HEAP32[$3_1 + 136 >> 2] > ($1_1 | 0)) {
     $12_1 = $11;
     $5_1 = HEAP32[$0 + 16 >> 2];
     $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($5_1 + Math_imul(HEAP32[$3_1 + 144 >> 2], 244) | 0, $5_1 + Math_imul(HEAP32[$3_1 + 148 >> 2], 244) | 0, $3_1));
     $11 = Math_fround($12_1 + Math_fround($11 * $11));
     $5_1 = HEAP32[$0 + 48 >> 2];
    }
    $4_1 = $4_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < ($5_1 | 0)) {
     continue
    }
    break;
   };
  }
  label$16 : {
   if (HEAP32[$8_1 + 20 >> 2] <= ($1_1 | 0)) {
    break label$16
   }
   if (($7_1 | 0) >= 1) {
    while (1) {
     $1_1 = HEAP32[$6_1 >> 2];
     if (HEAPU8[$1_1 + 20 | 0]) {
      $1_1 = $827($0, HEAP32[$1_1 + 28 >> 2], HEAPF32[$8_1 + 12 >> 2]);
      $2_1 = $827($0, HEAP32[HEAP32[$6_1 >> 2] + 32 >> 2], HEAPF32[$8_1 + 12 >> 2]);
      $3_1 = HEAP32[$6_1 >> 2];
      $4_1 = Math_imul($1_1, 244);
      $1_1 = HEAP32[$0 + 16 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 24 >> 2]]($3_1, $4_1 + $1_1 | 0, $1_1 + Math_imul($2_1, 244) | 0, HEAPF32[$8_1 + 12 >> 2]);
     }
     $6_1 = $6_1 + 4 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue
     }
     break;
    }
   }
   $4_1 = HEAP32[$0 + 28 >> 2];
   $1_1 = HEAP32[$8_1 + 72 >> 2];
   label$20 : {
    if (!($1_1 & 512)) {
     if (($4_1 | 0) >= 1) {
      $9_1 = 0;
      while (1) {
       $12_1 = $11;
       $2_1 = HEAP32[$0 + 16 >> 2];
       $1_1 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 116 >> 2] + $9_1 >> 2], 152) | 0;
       $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 216 >> 2]]($2_1 + Math_imul(HEAP32[$1_1 + 144 >> 2], 244) | 0, $2_1 + Math_imul(HEAP32[$1_1 + 148 >> 2], 244) | 0, $1_1));
       $11 = Math_fround($12_1 + Math_fround($11 * $11));
       $9_1 = $9_1 + 4 | 0;
       $4_1 = $4_1 + -1 | 0;
       if ($4_1) {
        continue
       }
       break;
      };
     }
     $6_1 = HEAP32[$0 + 68 >> 2];
     if (($6_1 | 0) < 1) {
      break label$20
     }
     $9_1 = 0;
     while (1) {
      $1_1 = HEAP32[$0 + 76 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 156 >> 2] + $9_1 >> 2], 152) | 0;
      $12_1 = HEAPF32[(HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$1_1 + 140 >> 2], 152) | 0) + 100 >> 2];
      if (!!($12_1 > Math_fround(0.0))) {
       $14 = HEAPF32[$1_1 + 104 >> 2];
       HEAPF32[$1_1 + 124 >> 2] = $12_1 * $14;
       HEAPF32[$1_1 + 120 >> 2] = $12_1 * Math_fround(-$14);
       $12_1 = $11;
       $2_1 = HEAP32[$0 + 16 >> 2];
       $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($2_1 + Math_imul(HEAP32[$1_1 + 144 >> 2], 244) | 0, $2_1 + Math_imul(HEAP32[$1_1 + 148 >> 2], 244) | 0, $1_1));
       $11 = Math_fround($12_1 + Math_fround($11 * $11));
      }
      $9_1 = $9_1 + 4 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue
      }
      break;
     };
     break label$20;
    }
    if (($4_1 | 0) < 1) {
     break label$20
    }
    $3_1 = ($1_1 & 16 ? 2 : 1) << 2;
    $2_1 = 0;
    $6_1 = 0;
    while (1) {
     $12_1 = $11;
     $5_1 = HEAP32[$0 + 16 >> 2];
     $1_1 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 116 >> 2] + $6_1 >> 2], 152) | 0;
     $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 216 >> 2]]($5_1 + Math_imul(HEAP32[$1_1 + 144 >> 2], 244) | 0, $5_1 + Math_imul(HEAP32[$1_1 + 148 >> 2], 244) | 0, $1_1));
     $11 = Math_fround($12_1 + Math_fround($11 * $11));
     $12_1 = HEAPF32[$1_1 + 100 >> 2];
     $5_1 = $12_1 > Math_fround(0.0) ^ 1;
     if (!$5_1) {
      $1_1 = HEAP32[$0 + 76 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 156 >> 2] + $2_1 >> 2], 152) | 0;
      $14 = HEAPF32[$1_1 + 104 >> 2];
      HEAPF32[$1_1 + 124 >> 2] = $12_1 * $14;
      HEAPF32[$1_1 + 120 >> 2] = $12_1 * Math_fround(-$14);
      $14 = $11;
      $7_1 = HEAP32[$0 + 16 >> 2];
      $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($7_1 + Math_imul(HEAP32[$1_1 + 144 >> 2], 244) | 0, $7_1 + Math_imul(HEAP32[$1_1 + 148 >> 2], 244) | 0, $1_1));
      $11 = Math_fround($14 + Math_fround($11 * $11));
     }
     if (!($5_1 | !(HEAPU8[$8_1 + 72 | 0] & 16))) {
      $1_1 = HEAP32[$0 + 76 >> 2] + Math_imul(HEAP32[(HEAP32[$0 + 156 >> 2] + $2_1 | 0) + 4 >> 2], 152) | 0;
      $14 = HEAPF32[$1_1 + 104 >> 2];
      HEAPF32[$1_1 + 124 >> 2] = $12_1 * $14;
      HEAPF32[$1_1 + 120 >> 2] = $12_1 * Math_fround(-$14);
      $12_1 = $11;
      $5_1 = HEAP32[$0 + 16 >> 2];
      $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($5_1 + Math_imul(HEAP32[$1_1 + 144 >> 2], 244) | 0, $5_1 + Math_imul(HEAP32[$1_1 + 148 >> 2], 244) | 0, $1_1));
      $11 = Math_fround($12_1 + Math_fround($11 * $11));
     }
     $2_1 = $2_1 + $3_1 | 0;
     $6_1 = $6_1 + 4 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue
     }
     break;
    };
   }
   $6_1 = HEAP32[$0 + 88 >> 2];
   if (($6_1 | 0) < 1) {
    break label$16
   }
   $9_1 = 0;
   while (1) {
    $1_1 = HEAP32[$0 + 96 >> 2] + $9_1 | 0;
    $12_1 = HEAPF32[(HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$1_1 + 140 >> 2], 152) | 0) + 100 >> 2];
    if (!!($12_1 > Math_fround(0.0))) {
     $14 = $12_1;
     $12_1 = HEAPF32[$1_1 + 104 >> 2];
     $14 = Math_fround($14 * $12_1);
     $12_1 = $14 > $12_1 ? $12_1 : $14;
     HEAPF32[$1_1 + 124 >> 2] = $12_1;
     HEAPF32[$1_1 + 120 >> 2] = -$12_1;
     $12_1 = $11;
     $2_1 = HEAP32[$0 + 16 >> 2];
     $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($2_1 + Math_imul(HEAP32[$1_1 + 144 >> 2], 244) | 0, $2_1 + Math_imul(HEAP32[$1_1 + 148 >> 2], 244) | 0, $1_1));
     $11 = Math_fround($12_1 + Math_fround($11 * $11));
    }
    $9_1 = $9_1 + 152 | 0;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue
    }
    break;
   };
  }
  return Math_fround($11);
 }
 
 function $835($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $9_1 = Math_fround(0), $10 = Math_fround(0);
  label$1 : {
   if (!HEAP32[$7_1 + 52 >> 2] | HEAP32[$7_1 + 20 >> 2] < 1) {
    break label$1
   }
   $1_1 = 0;
   while (1) {
    $9_1 = Math_fround(0.0);
    $3_1 = HEAP32[$0 + 28 >> 2];
    if (($3_1 | 0) >= 1) {
     $2_1 = 0;
     while (1) {
      $10 = $9_1;
      $5_1 = HEAP32[$0 + 16 >> 2];
      $4_1 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 116 >> 2] + $2_1 >> 2], 152) | 0;
      $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 220 >> 2]]($5_1 + Math_imul(HEAP32[$4_1 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$4_1 + 148 >> 2], 244) + $5_1 | 0, $4_1));
      $9_1 = Math_fround($10 + Math_fround($9_1 * $9_1));
      $2_1 = $2_1 + 4 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       continue
      }
      break;
     };
    }
    if ($9_1 <= HEAPF32[$7_1 + 92 >> 2]) {
     break label$1
    }
    $2_1 = HEAP32[$7_1 + 20 >> 2];
    if (($1_1 | 0) >= ($2_1 + -1 | 0)) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) < ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $836($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $9_1 = 0, $10 = 0, $11 = 0, $12_1 = Math_fround(0), $13_1 = 0;
  $11 = global$0 - 16 | 0;
  global$0 = $11;
  $613($11 + 8 | 0, 18277);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1);
  $9_1 = HEAP32[$0 + 184 >> 2];
  $10 = HEAP32[$7_1 + 20 >> 2];
  $10 = ($9_1 | 0) > ($10 | 0) ? $9_1 : $10;
  label$1 : {
   if (($10 | 0) < 1) {
    break label$1
   }
   $13_1 = $10 + -1 | 0;
   $9_1 = 0;
   while (1) {
    $12_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $9_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1));
    HEAPF32[$0 + 228 >> 2] = $12_1;
    if (($9_1 | 0) >= ($13_1 | 0) | $12_1 <= HEAPF32[$7_1 + 92 >> 2]) {
     break label$1
    }
    $9_1 = $9_1 + 1 | 0;
    if (($9_1 | 0) < ($10 | 0)) {
     continue
    }
    break;
   };
  }
  $614();
  global$0 = $11 + 16 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function $837($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = 0;
  $4_1 = HEAP32[$3_1 + 72 >> 2];
  label$1 : {
   if (!($4_1 & 4)) {
    break label$1
   }
   $6_1 = HEAP32[$0 + 28 >> 2];
   if (($6_1 | 0) < 1) {
    break label$1
   }
   $2_1 = HEAP32[$0 + 76 >> 2];
   $1_1 = HEAP32[$0 + 36 >> 2];
   if ($4_1 & 16) {
    $1_1 = $1_1 + 140 | 0;
    while (1) {
     $4_1 = HEAP32[$1_1 + -8 >> 2];
     HEAP32[$4_1 + 124 >> 2] = HEAP32[$1_1 + -40 >> 2];
     $5_1 = $2_1 + Math_imul(HEAP32[$1_1 >> 2], 152) | 0;
     HEAP32[$4_1 + 128 >> 2] = HEAP32[$5_1 + 100 >> 2];
     HEAP32[$4_1 + 132 >> 2] = HEAP32[$5_1 + 252 >> 2];
     $1_1 = $1_1 + 152 | 0;
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $1_1 = $1_1 + 140 | 0;
   while (1) {
    $4_1 = HEAP32[$1_1 + -8 >> 2];
    HEAP32[$4_1 + 124 >> 2] = HEAP32[$1_1 + -40 >> 2];
    HEAP32[$4_1 + 128 >> 2] = HEAP32[($2_1 + Math_imul(HEAP32[$1_1 >> 2], 152) | 0) + 100 >> 2];
    $1_1 = $1_1 + 152 | 0;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue
    }
    break;
   };
  }
  $4_1 = HEAP32[$0 + 48 >> 2];
  if (($4_1 | 0) >= 1) {
   $1_1 = HEAP32[$0 + 56 >> 2] + 100 | 0;
   while (1) {
    $6_1 = HEAP32[$1_1 + 32 >> 2];
    $2_1 = HEAP32[$6_1 + 44 >> 2];
    if ($2_1) {
     $5_1 = HEAP32[$6_1 + 28 >> 2];
     $10 = HEAPF32[$5_1 + 416 >> 2];
     $11 = HEAPF32[$1_1 + -76 >> 2];
     $12_1 = HEAPF32[$5_1 + 412 >> 2];
     $13_1 = HEAPF32[$1_1 + -80 >> 2];
     $7_1 = HEAPF32[$1_1 >> 2];
     $8_1 = Math_fround(Math_fround(1.0) / HEAPF32[$3_1 + 12 >> 2]);
     HEAPF32[$2_1 >> 2] = HEAPF32[$2_1 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + -84 >> 2] * $7_1) * HEAPF32[$5_1 + 408 >> 2]) * $8_1);
     HEAPF32[$2_1 + 4 >> 2] = Math_fround(Math_fround($12_1 * Math_fround($7_1 * $13_1)) * $8_1) + HEAPF32[$2_1 + 4 >> 2];
     HEAPF32[$2_1 + 8 >> 2] = Math_fround(Math_fround($10 * Math_fround($7_1 * $11)) * $8_1) + HEAPF32[$2_1 + 8 >> 2];
     $14 = HEAP32[$6_1 + 32 >> 2];
     $10 = HEAPF32[$14 + 416 >> 2];
     $11 = HEAPF32[$1_1 + -44 >> 2];
     $12_1 = HEAPF32[$14 + 412 >> 2];
     $13_1 = HEAPF32[$1_1 + -48 >> 2];
     $7_1 = HEAPF32[$1_1 >> 2];
     $8_1 = Math_fround(Math_fround(1.0) / HEAPF32[$3_1 + 12 >> 2]);
     HEAPF32[$2_1 + 32 >> 2] = HEAPF32[$2_1 + 32 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + -52 >> 2] * $7_1) * HEAPF32[$14 + 408 >> 2]) * $8_1);
     $9_1 = $2_1 + 36 | 0;
     HEAPF32[$9_1 >> 2] = Math_fround(Math_fround($12_1 * Math_fround($7_1 * $13_1)) * $8_1) + HEAPF32[$9_1 >> 2];
     $9_1 = $2_1 + 40 | 0;
     HEAPF32[$9_1 >> 2] = Math_fround(Math_fround($10 * Math_fround($7_1 * $11)) * $8_1) + HEAPF32[$9_1 >> 2];
     $10 = HEAPF32[$5_1 + 612 >> 2];
     $11 = HEAPF32[$1_1 + -92 >> 2];
     $12_1 = HEAPF32[$5_1 + 608 >> 2];
     $13_1 = HEAPF32[$1_1 + -96 >> 2];
     $7_1 = HEAPF32[$1_1 >> 2];
     $8_1 = Math_fround(Math_fround(1.0) / HEAPF32[$3_1 + 12 >> 2]);
     HEAPF32[$2_1 + 16 >> 2] = HEAPF32[$2_1 + 16 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + -100 >> 2] * HEAPF32[$5_1 + 604 >> 2]) * $7_1) * $8_1);
     $5_1 = $2_1 + 20 | 0;
     HEAPF32[$5_1 >> 2] = Math_fround(Math_fround($7_1 * Math_fround($13_1 * $12_1)) * $8_1) + HEAPF32[$5_1 >> 2];
     $5_1 = $2_1 + 24 | 0;
     HEAPF32[$5_1 >> 2] = Math_fround(Math_fround($7_1 * Math_fround($11 * $10)) * $8_1) + HEAPF32[$5_1 >> 2];
     $10 = HEAPF32[$14 + 612 >> 2];
     $11 = HEAPF32[$1_1 + -60 >> 2];
     $12_1 = HEAPF32[$14 + 608 >> 2];
     $13_1 = HEAPF32[$1_1 + -64 >> 2];
     $7_1 = HEAPF32[$1_1 >> 2];
     $8_1 = Math_fround(Math_fround(1.0) / HEAPF32[$3_1 + 12 >> 2]);
     HEAPF32[$2_1 + 48 >> 2] = HEAPF32[$2_1 + 48 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + -68 >> 2] * HEAPF32[$14 + 604 >> 2]) * $7_1) * $8_1);
     $5_1 = $2_1 + 52 | 0;
     HEAPF32[$5_1 >> 2] = Math_fround(Math_fround($7_1 * Math_fround($13_1 * $12_1)) * $8_1) + HEAPF32[$5_1 >> 2];
     $2_1 = $2_1 + 56 | 0;
     HEAPF32[$2_1 >> 2] = Math_fround(Math_fround($7_1 * Math_fround($11 * $10)) * $8_1) + HEAPF32[$2_1 >> 2];
    }
    $7_1 = HEAPF32[$1_1 >> 2];
    HEAPF32[$6_1 + 36 >> 2] = $7_1;
    if (!!(Math_fround(Math_abs($7_1)) >= HEAPF32[$6_1 + 16 >> 2])) {
     HEAP8[$6_1 + 20 | 0] = 0
    }
    $1_1 = $1_1 + 152 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  $4_1 = HEAP32[$0 + 8 >> 2];
  if (($4_1 | 0) >= 1) {
   $5_1 = HEAP32[$0 + 16 >> 2];
   $1_1 = 176;
   $14 = 0;
   while (1) {
    $2_1 = $1_1 + $5_1 | 0;
    $6_1 = HEAP32[$2_1 - -64 >> 2];
    if ($6_1) {
     label$12 : {
      if (HEAP32[$3_1 + 52 >> 2]) {
       $838($2_1 + -176 | 0, HEAPF32[$3_1 + 12 >> 2], HEAPF32[$3_1 + 60 >> 2]);
       $5_1 = HEAP32[$0 + 16 >> 2];
       $2_1 = $5_1 + $1_1 | 0;
       $10 = HEAPF32[$2_1 >> 2];
       $7_1 = HEAPF32[$2_1 + 8 >> 2];
       $8_1 = HEAPF32[$2_1 + 4 >> 2];
       $6_1 = HEAP32[$2_1 - -64 >> 2];
       break label$12;
      }
      $10 = Math_fround(HEAPF32[$2_1 + -112 >> 2] + HEAPF32[$2_1 >> 2]);
      HEAPF32[$2_1 >> 2] = $10;
      $4_1 = $2_1 + 4 | 0;
      $8_1 = Math_fround(HEAPF32[$2_1 + -108 >> 2] + HEAPF32[$4_1 >> 2]);
      HEAPF32[$4_1 >> 2] = $8_1;
      $4_1 = $2_1 + 8 | 0;
      $7_1 = Math_fround(HEAPF32[$2_1 + -104 >> 2] + HEAPF32[$4_1 >> 2]);
      HEAPF32[$4_1 >> 2] = $7_1;
      $4_1 = $2_1 + 16 | 0;
      HEAPF32[$4_1 >> 2] = HEAPF32[$2_1 + -96 >> 2] + HEAPF32[$4_1 >> 2];
      $4_1 = $2_1 + 20 | 0;
      HEAPF32[$4_1 >> 2] = HEAPF32[$2_1 + -92 >> 2] + HEAPF32[$4_1 >> 2];
      $4_1 = $2_1 + 24 | 0;
      HEAPF32[$4_1 >> 2] = HEAPF32[$2_1 + -88 >> 2] + HEAPF32[$4_1 >> 2];
     }
     $2_1 = $1_1 + $5_1 | 0;
     $11 = HEAPF32[$2_1 + 32 >> 2];
     $12_1 = HEAPF32[$2_1 + 36 >> 2];
     $13_1 = HEAPF32[$2_1 + 40 >> 2];
     HEAP32[$6_1 + 384 >> 2] = 0;
     HEAPF32[$6_1 + 380 >> 2] = $7_1 + $13_1;
     HEAPF32[$6_1 + 376 >> 2] = $8_1 + $12_1;
     HEAPF32[$6_1 + 372 >> 2] = $10 + $11;
     HEAP32[$6_1 + 304 >> 2] = HEAP32[$6_1 + 304 >> 2] + 1;
     $2_1 = HEAP32[$0 + 16 >> 2] + $1_1 | 0;
     $7_1 = HEAPF32[$2_1 + 16 >> 2];
     $8_1 = HEAPF32[$2_1 + 48 >> 2];
     $10 = HEAPF32[$2_1 + 20 >> 2];
     $11 = HEAPF32[$2_1 + 52 >> 2];
     $12_1 = HEAPF32[$2_1 + 24 >> 2];
     $13_1 = HEAPF32[$2_1 + 56 >> 2];
     $2_1 = HEAP32[$2_1 - -64 >> 2];
     HEAP32[$2_1 + 400 >> 2] = 0;
     HEAPF32[$2_1 + 396 >> 2] = $12_1 + $13_1;
     HEAPF32[$2_1 + 392 >> 2] = $10 + $11;
     HEAPF32[$2_1 + 388 >> 2] = $7_1 + $8_1;
     HEAP32[$2_1 + 304 >> 2] = HEAP32[$2_1 + 304 >> 2] + 1;
     if (HEAP32[$3_1 + 52 >> 2]) {
      $6_1 = HEAP32[$0 + 16 >> 2] + $1_1 | 0;
      $2_1 = HEAP32[$6_1 - -64 >> 2];
      HEAP32[$2_1 + 304 >> 2] = HEAP32[$2_1 + 304 >> 2] + 1;
      $4_1 = $6_1 + -176 | 0;
      $9_1 = $4_1 + 8 | 0;
      $15_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $2_1 + 12 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $15_1;
      $5_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$2_1 + 4 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$2_1 + 8 >> 2] = $5_1;
      $4_1 = $6_1 + -160 | 0;
      $9_1 = $4_1 + 8 | 0;
      $15_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $2_1 + 28 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $15_1;
      $9_1 = HEAP32[$4_1 + 4 >> 2];
      $5_1 = $2_1 + 20 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $9_1;
      $4_1 = $6_1 + -144 | 0;
      $9_1 = HEAP32[$4_1 + 4 >> 2];
      $5_1 = $2_1 + 36 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $9_1;
      $4_1 = $4_1 + 8 | 0;
      $9_1 = HEAP32[$4_1 + 4 >> 2];
      $5_1 = $2_1 + 44 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $9_1;
      $6_1 = $6_1 + -128 | 0;
      $5_1 = $6_1 + 8 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      $4_1 = $2_1 + 60 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $9_1;
      $4_1 = HEAP32[$6_1 + 4 >> 2];
      $2_1 = $2_1 + 52 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $4_1;
     }
     $5_1 = HEAP32[$0 + 16 >> 2];
     HEAP32[HEAP32[($5_1 + $1_1 | 0) - -64 >> 2] + 212 >> 2] = -1;
     $4_1 = HEAP32[$0 + 8 >> 2];
    }
    $1_1 = $1_1 + 244 | 0;
    $14 = $14 + 1 | 0;
    if (($14 | 0) < ($4_1 | 0)) {
     continue
    }
    break;
   };
  }
  if (!(HEAP32[$0 + 28 >> 2] > -1 | HEAP32[$0 + 32 >> 2] > -1)) {
   $1_1 = HEAP32[$0 + 36 >> 2];
   if ($1_1) {
    if (HEAPU8[$0 + 40 | 0]) {
     $80($1_1)
    }
    HEAP32[$0 + 36 >> 2] = 0;
   }
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = 0;
   HEAP8[$0 + 40 | 0] = 1;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  if (!(HEAP32[$0 + 48 >> 2] > -1 | HEAP32[$0 + 52 >> 2] > -1)) {
   $1_1 = HEAP32[$0 + 56 >> 2];
   if ($1_1) {
    if (HEAPU8[$0 + 60 | 0]) {
     $80($1_1)
    }
    HEAP32[$0 + 56 >> 2] = 0;
   }
   HEAP32[$0 + 52 >> 2] = 0;
   HEAP32[$0 + 56 >> 2] = 0;
   HEAP8[$0 + 60 | 0] = 1;
  }
  HEAP32[$0 + 48 >> 2] = 0;
  if (!(HEAP32[$0 + 68 >> 2] > -1 | HEAP32[$0 + 72 >> 2] > -1)) {
   $1_1 = HEAP32[$0 + 76 >> 2];
   if ($1_1) {
    if (HEAPU8[$0 + 80 | 0]) {
     $80($1_1)
    }
    HEAP32[$0 + 76 >> 2] = 0;
   }
   HEAP32[$0 + 72 >> 2] = 0;
   HEAP32[$0 + 76 >> 2] = 0;
   HEAP8[$0 + 80 | 0] = 1;
  }
  HEAP32[$0 + 68 >> 2] = 0;
  if (!(HEAP32[$0 + 88 >> 2] > -1 | HEAP32[$0 + 92 >> 2] > -1)) {
   $1_1 = HEAP32[$0 + 96 >> 2];
   if ($1_1) {
    if (HEAPU8[$0 + 100 | 0]) {
     $80($1_1)
    }
    HEAP32[$0 + 96 >> 2] = 0;
   }
   HEAP32[$0 + 92 >> 2] = 0;
   HEAP32[$0 + 96 >> 2] = 0;
   HEAP8[$0 + 100 | 0] = 1;
  }
  HEAP32[$0 + 88 >> 2] = 0;
  if (!(HEAP32[$0 + 8 >> 2] > -1 | HEAP32[$0 + 12 >> 2] > -1)) {
   $1_1 = HEAP32[$0 + 16 >> 2];
   if ($1_1) {
    if (HEAPU8[$0 + 20 | 0]) {
     $80($1_1)
    }
    HEAP32[$0 + 16 >> 2] = 0;
   }
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP8[$0 + 20 | 0] = 1;
  }
  HEAP32[$0 + 8 >> 2] = 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function $838($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!HEAP32[$0 + 240 >> 2]) {
    break label$1
   }
   HEAPF32[$0 + 176 >> 2] = HEAPF32[$0 + 64 >> 2] + HEAPF32[$0 + 176 >> 2];
   HEAPF32[$0 + 192 >> 2] = HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 192 >> 2];
   $3_1 = $0 + 180 | 0;
   HEAPF32[$3_1 >> 2] = HEAPF32[$0 + 68 >> 2] + HEAPF32[$3_1 >> 2];
   $3_1 = $0 + 184 | 0;
   HEAPF32[$3_1 >> 2] = HEAPF32[$0 + 72 >> 2] + HEAPF32[$3_1 >> 2];
   $3_1 = $0 + 196 | 0;
   HEAPF32[$3_1 >> 2] = HEAPF32[$0 + 84 >> 2] + HEAPF32[$3_1 >> 2];
   $3_1 = $0 + 200 | 0;
   HEAPF32[$3_1 >> 2] = HEAPF32[$0 + 88 >> 2] + HEAPF32[$3_1 >> 2];
   label$2 : {
    if (HEAPF32[$0 + 144 >> 2] != Math_fround(0.0) | HEAPF32[$0 + 148 >> 2] != Math_fround(0.0) | (HEAPF32[$0 + 152 >> 2] != Math_fround(0.0) | HEAPF32[$0 + 160 >> 2] != Math_fround(0.0))) {
     break label$2
    }
    if (HEAPF32[$0 + 164 >> 2] != Math_fround(0.0)) {
     break label$2
    }
    if (HEAPF32[$0 + 168 >> 2] == Math_fround(0.0)) {
     break label$1
    }
   }
   HEAP32[$4_1 + 12 >> 2] = 0;
   HEAPF32[$4_1 >> 2] = HEAPF32[$0 + 160 >> 2] * $2_1;
   HEAPF32[$4_1 + 8 >> 2] = HEAPF32[$0 + 168 >> 2] * $2_1;
   HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$0 + 164 >> 2] * $2_1;
   $798($0, $0 + 144 | 0, $4_1, $1_1, $4_1 + 16 | 0);
   $5_1 = $4_1 + 24 | 0;
   $6_1 = HEAP32[$5_1 + 4 >> 2];
   $3_1 = $0 + 8 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $3_1 = HEAP32[$4_1 + 20 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$4_1 + 16 >> 2];
   HEAP32[$0 + 4 >> 2] = $3_1;
   $3_1 = HEAP32[$4_1 + 36 >> 2];
   HEAP32[$0 + 16 >> 2] = HEAP32[$4_1 + 32 >> 2];
   HEAP32[$0 + 20 >> 2] = $3_1;
   $5_1 = $4_1 + 40 | 0;
   $6_1 = HEAP32[$5_1 + 4 >> 2];
   $3_1 = $0 + 24 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $3_1 = HEAP32[$4_1 + 52 >> 2];
   HEAP32[$0 + 32 >> 2] = HEAP32[$4_1 + 48 >> 2];
   HEAP32[$0 + 36 >> 2] = $3_1;
   $5_1 = $4_1 + 56 | 0;
   $6_1 = HEAP32[$5_1 + 4 >> 2];
   $3_1 = $0 + 40 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $3_1 = HEAP32[$4_1 + 68 >> 2];
   HEAP32[$0 + 48 >> 2] = HEAP32[$4_1 + 64 >> 2];
   HEAP32[$0 + 52 >> 2] = $3_1;
   $3_1 = $4_1 + 72 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $0 = $0 + 56 | 0;
   HEAP32[$0 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $5_1;
  }
  global$0 = $4_1 + 80 | 0;
 }
 
 function $839($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $9_1 = global$0 - 16 | 0;
  global$0 = $9_1;
  $613($9_1 + 8 | 0, 18311);
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1_1, $2_1, $7_1));
  $614();
  global$0 = $9_1 + 16 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function $840($0) {
  $0 = $0 | 0;
  HEAP32[$0 + 232 >> 2] = 0;
 }
 
 function $844($0, $1_1, $2_1, $3_1, $4_1) {
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = $2_1;
  HEAP32[$0 + 12 >> 2] = $1_1;
  HEAP32[$0 + 8 >> 2] = $4_1;
  HEAP32[$0 + 4 >> 2] = $3_1;
  HEAP32[$0 >> 2] = 18412;
  return $0;
 }
 
 function $845($0, $1_1, $2_1) {
  HEAP32[$0 + 20 >> 2] = $2_1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 18412;
  return $0;
 }
 
 function $846($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32 = 0, $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = 0, $38 = 0, $39_1 = 0, $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0);
  $5_1 = global$0 - 240 | 0;
  global$0 = $5_1;
  label$1 : {
   if (HEAP32[$0 + 16 >> 2]) {
    $552(HEAP32[$0 + 4 >> 2]);
    $4_1 = HEAP32[$0 + 12 >> 2];
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    $7_1 = HEAP32[$0 + 16 >> 2];
    $31_1 = HEAP32[$7_1 + 4 >> 2];
    $32 = $4_1;
    $20 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 48 >> 2]]($4_1));
    $4_1 = HEAP32[$0 + 16 >> 2];
    $0 = $561($5_1 + 160 | 0, $32, $7_1, $6_1, $31_1, $20, Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 48 >> 2]]($4_1)), HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
    $6_1 = $1_1 + 8 | 0;
    $7_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = $5_1 + 32 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    $6_1 = $1_1 + 24 | 0;
    $7_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = $5_1 + 48 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    $6_1 = $1_1 + 40 | 0;
    $7_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = $5_1 - -64 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    $6_1 = $1_1 + 56 | 0;
    $7_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = $5_1 + 80 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    $6_1 = $2_1 + 8 | 0;
    $7_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = $5_1 + 96 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    HEAP32[$5_1 + 152 >> 2] = 1566444395;
    $4_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$5_1 + 24 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$5_1 + 28 >> 2] = $4_1;
    $4_1 = HEAP32[$1_1 + 20 >> 2];
    HEAP32[$5_1 + 40 >> 2] = HEAP32[$1_1 + 16 >> 2];
    HEAP32[$5_1 + 44 >> 2] = $4_1;
    $4_1 = HEAP32[$1_1 + 36 >> 2];
    HEAP32[$5_1 + 56 >> 2] = HEAP32[$1_1 + 32 >> 2];
    HEAP32[$5_1 + 60 >> 2] = $4_1;
    $4_1 = HEAP32[$1_1 + 52 >> 2];
    HEAP32[$5_1 + 72 >> 2] = HEAP32[$1_1 + 48 >> 2];
    HEAP32[$5_1 + 76 >> 2] = $4_1;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$5_1 + 88 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$5_1 + 92 >> 2] = $1_1;
    $4_1 = $2_1 + 24 | 0;
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    $1_1 = $5_1 + 112 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $6_1;
    $4_1 = HEAP32[$2_1 + 20 >> 2];
    $1_1 = $5_1 + 104 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $4_1;
    $4_1 = $2_1 + 40 | 0;
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    $1_1 = $5_1 + 128 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $6_1;
    $4_1 = HEAP32[$2_1 + 36 >> 2];
    $1_1 = $5_1 + 120 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $4_1;
    $4_1 = $2_1 + 56 | 0;
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    $1_1 = $5_1 + 144 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $6_1;
    $4_1 = HEAP32[$2_1 + 52 >> 2];
    $1_1 = $5_1 + 136 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 48 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $4_1;
    $562($0, $5_1 + 24 | 0, $3_1, 0, 0);
    break label$1;
   }
   $6_1 = $2_1 + 52 | 0;
   $45_1 = HEAPF32[$6_1 >> 2];
   $7_1 = $2_1 + 56 | 0;
   $24_1 = HEAPF32[$7_1 >> 2];
   $25 = HEAPF32[$1_1 + 52 >> 2];
   $33_1 = HEAPF32[$1_1 + 56 >> 2];
   $15_1 = HEAPF32[$1_1 + 20 >> 2];
   $16_1 = HEAPF32[$1_1 + 36 >> 2];
   $31_1 = $2_1 + 20 | 0;
   $14 = HEAPF32[$31_1 >> 2];
   $37_1 = $2_1 + 36 | 0;
   $10 = HEAPF32[$37_1 >> 2];
   $38 = $2_1 + 24 | 0;
   $11 = HEAPF32[$38 >> 2];
   $9_1 = HEAPF32[$1_1 + 24 >> 2];
   $39_1 = $2_1 + 40 | 0;
   $8_1 = HEAPF32[$39_1 >> 2];
   $21 = HEAPF32[$1_1 + 40 >> 2];
   $34 = HEAPF32[$2_1 + 48 >> 2];
   $35 = HEAPF32[$1_1 + 48 >> 2];
   $4_1 = HEAP32[$0 + 12 >> 2];
   $22_1 = HEAPF32[$1_1 + 32 >> 2];
   $23_1 = HEAPF32[$1_1 >> 2];
   $26_1 = HEAPF32[$1_1 + 16 >> 2];
   $27_1 = HEAPF32[$1_1 + 4 >> 2];
   $13_1 = HEAPF32[$2_1 + 32 >> 2];
   $12_1 = HEAPF32[$2_1 + 16 >> 2];
   $17_1 = HEAPF32[$2_1 >> 2];
   $18_1 = HEAPF32[$2_1 + 4 >> 2];
   $0 = HEAP32[$0 + 20 >> 2];
   $19_1 = HEAPF32[$2_1 + 8 >> 2];
   $28_1 = HEAPF32[$1_1 + 8 >> 2];
   HEAP32[$5_1 + 172 >> 2] = 0;
   $40_1 = Math_fround(Math_fround(Math_fround($28_1 * $18_1) + Math_fround($9_1 * $14)) + Math_fround($21 * $10));
   $1_1 = $0 + 56 | 0;
   $29_1 = Math_fround(-HEAPF32[$1_1 >> 2]);
   $41_1 = Math_fround(Math_fround(Math_fround($28_1 * $17_1) + Math_fround($9_1 * $12_1)) + Math_fround($21 * $13_1));
   $30 = HEAPF32[$0 + 52 >> 2];
   $28_1 = Math_fround(Math_fround(Math_fround($28_1 * $19_1) + Math_fround($9_1 * $11)) + Math_fround($21 * $8_1));
   $32 = $0 + 60 | 0;
   $9_1 = HEAPF32[$32 >> 2];
   HEAPF32[$5_1 + 168 >> 2] = Math_fround(Math_fround($40_1 * $29_1) - Math_fround($41_1 * $30)) - Math_fround($28_1 * $9_1);
   $42 = Math_fround(Math_fround(Math_fround($27_1 * $18_1) + Math_fround($15_1 * $14)) + Math_fround($16_1 * $10));
   $43_1 = Math_fround(Math_fround(Math_fround($27_1 * $17_1) + Math_fround($15_1 * $12_1)) + Math_fround($16_1 * $13_1));
   $27_1 = Math_fround(Math_fround(Math_fround($27_1 * $19_1) + Math_fround($15_1 * $11)) + Math_fround($16_1 * $8_1));
   HEAPF32[$5_1 + 164 >> 2] = Math_fround(Math_fround($42 * $29_1) - Math_fround($30 * $43_1)) - Math_fround($9_1 * $27_1);
   $44_1 = Math_fround(Math_fround(Math_fround($23_1 * $18_1) + Math_fround($26_1 * $14)) + Math_fround($22_1 * $10));
   $20 = Math_fround($44_1 * $29_1);
   $29_1 = Math_fround(Math_fround(Math_fround($23_1 * $17_1) + Math_fround($26_1 * $12_1)) + Math_fround($22_1 * $13_1));
   $26_1 = Math_fround(Math_fround(Math_fround($23_1 * $19_1) + Math_fround($26_1 * $11)) + Math_fround($22_1 * $8_1));
   HEAPF32[$5_1 + 160 >> 2] = Math_fround($20 - Math_fround($30 * $29_1)) - Math_fround($9_1 * $26_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 64 >> 2]]($5_1 + 24 | 0, $4_1, $5_1 + 160 | 0);
   $15_1 = HEAPF32[$1_1 >> 2];
   $16_1 = HEAPF32[$32 >> 2];
   $30 = HEAPF32[$0 + 68 >> 2];
   $9_1 = HEAPF32[$0 + 52 >> 2];
   $21 = HEAPF32[$5_1 + 24 >> 2];
   $22_1 = HEAPF32[$5_1 + 28 >> 2];
   $23_1 = HEAPF32[$5_1 + 32 >> 2];
   HEAP32[$5_1 + 172 >> 2] = 0;
   $36_1 = Math_fround(Math_fround(Math_fround($35 * $17_1) + Math_fround($25 * $12_1)) + Math_fround($33_1 * $13_1));
   $20 = $12_1;
   $12_1 = Math_fround(-$45_1);
   $13_1 = Math_fround(Math_fround($36_1 + Math_fround(Math_fround(Math_fround($20 * $12_1) - Math_fround($17_1 * $34)) - Math_fround($13_1 * $24_1))) + Math_fround(Math_fround(Math_fround($29_1 * $21) + Math_fround($43_1 * $22_1)) + Math_fround($41_1 * $23_1)));
   $8_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($35 * $19_1) + Math_fround($25 * $11)) + Math_fround($33_1 * $8_1)) + Math_fround(Math_fround(Math_fround($11 * $12_1) - Math_fround($19_1 * $34)) - Math_fround($8_1 * $24_1))) + Math_fround(Math_fround(Math_fround($26_1 * $21) + Math_fround($27_1 * $22_1)) + Math_fround($28_1 * $23_1)));
   $11 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($35 * $18_1) + Math_fround($25 * $14)) + Math_fround($33_1 * $10)) + Math_fround(Math_fround(Math_fround($14 * $12_1) - Math_fround($18_1 * $34)) - Math_fround($10 * $24_1))) + Math_fround(Math_fround(Math_fround($44_1 * $21) + Math_fround($42 * $22_1)) + Math_fround($40_1 * $23_1)));
   $14 = Math_fround(Math_fround(Math_fround($16_1 * $8_1) + Math_fround(Math_fround($9_1 * $13_1) + Math_fround($15_1 * $11))) - $30);
   $10 = Math_fround($13_1 - Math_fround($9_1 * $14));
   $13_1 = HEAPF32[$2_1 + 32 >> 2];
   $11 = Math_fround($11 - Math_fround($15_1 * $14));
   $12_1 = HEAPF32[$37_1 >> 2];
   $8_1 = Math_fround($8_1 - Math_fround($16_1 * $14));
   $17_1 = HEAPF32[$39_1 >> 2];
   HEAPF32[$5_1 + 168 >> 2] = Math_fround(Math_fround(Math_fround($10 * $13_1) + Math_fround($11 * $12_1)) + Math_fround($8_1 * $17_1)) + HEAPF32[$7_1 >> 2];
   $18_1 = HEAPF32[$2_1 + 16 >> 2];
   $19_1 = HEAPF32[$31_1 >> 2];
   $24_1 = HEAPF32[$38 >> 2];
   HEAPF32[$5_1 + 164 >> 2] = Math_fround(Math_fround(Math_fround($10 * $18_1) + Math_fround($11 * $19_1)) + Math_fround($8_1 * $24_1)) + HEAPF32[$6_1 >> 2];
   $25 = HEAPF32[$2_1 + 8 >> 2];
   $36_1 = Math_fround($25 * $8_1);
   $8_1 = HEAPF32[$2_1 >> 2];
   $20 = Math_fround($8_1 * $10);
   $10 = HEAPF32[$2_1 + 4 >> 2];
   HEAPF32[$5_1 + 160 >> 2] = Math_fround($36_1 + Math_fround($20 + Math_fround($10 * $11))) + HEAPF32[$2_1 + 48 >> 2];
   HEAP32[$5_1 + 20 >> 2] = 0;
   HEAPF32[$5_1 + 16 >> 2] = Math_fround(Math_fround($9_1 * $13_1) + Math_fround($15_1 * $12_1)) + Math_fround($16_1 * $17_1);
   HEAPF32[$5_1 + 12 >> 2] = Math_fround(Math_fround($9_1 * $18_1) + Math_fround($15_1 * $19_1)) + Math_fround($16_1 * $24_1);
   HEAPF32[$5_1 + 8 >> 2] = Math_fround(Math_fround($8_1 * $9_1) + Math_fround($10 * $15_1)) + Math_fround($25 * $16_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $5_1 + 8 | 0, $5_1 + 160 | 0, $14);
  }
  global$0 = $5_1 + 240 | 0;
 }
 
 function $847($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = 0;
  $6_1 = global$0 - 304 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 300 >> 2] = 0;
  $12_1 = Math_fround(HEAPF32[$2_1 + 56 >> 2] - HEAPF32[$1_1 + 56 >> 2]);
  HEAPF32[$6_1 + 296 >> 2] = $12_1;
  $18_1 = Math_fround(HEAPF32[$2_1 + 52 >> 2] - HEAPF32[$1_1 + 52 >> 2]);
  HEAPF32[$6_1 + 292 >> 2] = $18_1;
  $19_1 = Math_fround(HEAPF32[$2_1 + 48 >> 2] - HEAPF32[$1_1 + 48 >> 2]);
  HEAPF32[$6_1 + 288 >> 2] = $19_1;
  $800($1_1, $2_1, $6_1 + 112 | 0, $6_1 + 48 | 0);
  HEAP32[$6_1 + 284 >> 2] = 0;
  $8_1 = HEAPF32[$6_1 + 48 >> 2];
  $7_1 = Math_fround($8_1 * HEAPF32[$6_1 + 120 >> 2]);
  HEAPF32[$6_1 + 280 >> 2] = $7_1;
  $9_1 = Math_fround($8_1 * HEAPF32[$6_1 + 116 >> 2]);
  HEAPF32[$6_1 + 276 >> 2] = $9_1;
  $10 = Math_fround($8_1 * HEAPF32[$6_1 + 112 >> 2]);
  HEAPF32[$6_1 + 272 >> 2] = $10;
  HEAP32[$6_1 + 268 >> 2] = 0;
  $20 = Math_fround(HEAPF32[$4_1 + 56 >> 2] - HEAPF32[$3_1 + 56 >> 2]);
  HEAPF32[$6_1 + 264 >> 2] = $20;
  $21 = Math_fround(HEAPF32[$4_1 + 52 >> 2] - HEAPF32[$3_1 + 52 >> 2]);
  HEAPF32[$6_1 + 260 >> 2] = $21;
  $22_1 = Math_fround(HEAPF32[$4_1 + 48 >> 2] - HEAPF32[$3_1 + 48 >> 2]);
  HEAPF32[$6_1 + 256 >> 2] = $22_1;
  $800($3_1, $4_1, $6_1 + 112 | 0, $6_1 + 48 | 0);
  HEAP32[$6_1 + 252 >> 2] = 0;
  $8_1 = HEAPF32[$6_1 + 48 >> 2];
  $11 = Math_fround($8_1 * HEAPF32[$6_1 + 120 >> 2]);
  HEAPF32[$6_1 + 248 >> 2] = $11;
  $13_1 = Math_fround($8_1 * HEAPF32[$6_1 + 116 >> 2]);
  HEAPF32[$6_1 + 244 >> 2] = $13_1;
  $8_1 = Math_fround($8_1 * HEAPF32[$6_1 + 112 >> 2]);
  HEAPF32[$6_1 + 240 >> 2] = $8_1;
  $2_1 = HEAP32[$0 + 12 >> 2];
  $24_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1));
  $2_1 = HEAP32[$0 + 16 >> 2];
  if ($2_1) {
   $25 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1));
   $12_1 = HEAPF32[$6_1 + 296 >> 2];
   $20 = HEAPF32[$6_1 + 264 >> 2];
   $18_1 = HEAPF32[$6_1 + 292 >> 2];
   $21 = HEAPF32[$6_1 + 260 >> 2];
   $19_1 = HEAPF32[$6_1 + 288 >> 2];
   $22_1 = HEAPF32[$6_1 + 256 >> 2];
   $11 = HEAPF32[$6_1 + 248 >> 2];
   $13_1 = HEAPF32[$6_1 + 244 >> 2];
   $8_1 = HEAPF32[$6_1 + 240 >> 2];
   $9_1 = HEAPF32[$6_1 + 276 >> 2];
   $10 = HEAPF32[$6_1 + 272 >> 2];
   $7_1 = HEAPF32[$6_1 + 280 >> 2];
  }
  $13_1 = Math_fround(Math_fround($24_1 * Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($9_1 * $9_1)) + Math_fround($7_1 * $7_1))))) + Math_fround($25 * Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($13_1 * $13_1)) + Math_fround($11 * $11))))));
  $9_1 = Math_fround($22_1 - $19_1);
  $10 = Math_fround($21 - $18_1);
  $11 = Math_fround($20 - $12_1);
  label$2 : {
   if (Math_fround($13_1 + Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($10 * $10)) + Math_fround($11 * $11))))) == Math_fround(0.0)) {
    break label$2
   }
   HEAP8[$6_1 + 216 | 0] = 0;
   HEAP32[$6_1 + 212 >> 2] = 1566444395;
   HEAP32[$6_1 + 176 >> 2] = 13380;
   $846($0, $1_1, $3_1, $6_1 + 176 | 0);
   $4_1 = $6_1 + 204 | 0;
   $14 = HEAP32[$4_1 + 4 >> 2];
   $2_1 = $6_1 + 232 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $14;
   $2_1 = HEAP32[$6_1 + 200 >> 2];
   HEAP32[$6_1 + 224 >> 2] = HEAP32[$6_1 + 196 >> 2];
   HEAP32[$6_1 + 228 >> 2] = $2_1;
   if (!HEAPU8[$6_1 + 216 | 0]) {
    break label$2
   }
   $2_1 = HEAP32[$6_1 + 180 >> 2];
   $4_1 = $6_1 + 184 | 0;
   $14 = HEAP32[$4_1 >> 2];
   $16_1 = $6_1 + 188 | 0;
   $17_1 = HEAP32[$16_1 >> 2];
   if (Math_fround($13_1 + Math_fround(Math_fround(Math_fround($9_1 * HEAPF32[$6_1 + 180 >> 2]) + Math_fround($10 * HEAPF32[$4_1 >> 2])) + Math_fround($11 * HEAPF32[$16_1 >> 2]))) <= Math_fround(1.1920928955078125e-07)) {
    break label$2
   }
   $15_1 = 1;
   label$3 : {
    $12_1 = Math_fround(HEAPF32[$6_1 + 212 >> 2] + HEAPF32[$5_1 + 172 >> 2]);
    label$4 : {
     if (!($12_1 > Math_fround(1.0000000474974513e-03))) {
      $7_1 = Math_fround(0.0);
      $9_1 = HEAPF32[$6_1 + 192 >> 2];
      break label$4;
     }
     $16_1 = $6_1 + 20 | 0;
     $26_1 = $6_1 + 160 | 0;
     $4_1 = 0;
     $8_1 = Math_fround(0.0);
     while (1) {
      $23_1 = HEAP32[$5_1 + 168 >> 2];
      if ($23_1) {
       HEAP32[$6_1 + 120 >> 2] = 1065353216;
       HEAP32[$6_1 + 124 >> 2] = 0;
       HEAP32[$6_1 + 112 >> 2] = 1065353216;
       HEAP32[$6_1 + 116 >> 2] = 1065353216;
       FUNCTION_TABLE[HEAP32[HEAP32[$23_1 >> 2] + 28 >> 2]]($23_1, $6_1 + 224 | 0, Math_fround(.20000000298023224), $6_1 + 112 | 0);
      }
      $7_1 = Math_fround($13_1 + Math_fround(Math_fround(Math_fround($9_1 * (wasm2js_scratch_store_i32(0, $2_1), wasm2js_scratch_load_f32())) + Math_fround($10 * (wasm2js_scratch_store_i32(0, $14), wasm2js_scratch_load_f32()))) + Math_fround($11 * (wasm2js_scratch_store_i32(0, $17_1), wasm2js_scratch_load_f32()))));
      if ($7_1 <= Math_fround(1.1920928955078125e-07)) {
       $15_1 = 0;
       break label$2;
      }
      $7_1 = Math_fround($8_1 + Math_fround($12_1 / $7_1));
      if ($7_1 <= $8_1) {
       $15_1 = 0;
       break label$2;
      }
      if ($7_1 < Math_fround(0.0)) {
       $15_1 = 0;
       break label$2;
      }
      if ($7_1 > Math_fround(1.0)) {
       $15_1 = 0;
       break label$2;
      }
      $798($1_1, $6_1 + 288 | 0, $6_1 + 272 | 0, $7_1, $6_1 + 112 | 0);
      $798($3_1, $6_1 + 256 | 0, $6_1 + 240 | 0, $7_1, $6_1 + 48 | 0);
      $2_1 = HEAP32[$5_1 + 168 >> 2];
      if ($2_1) {
       HEAP32[$6_1 + 8 >> 2] = 0;
       HEAP32[$6_1 + 12 >> 2] = 0;
       HEAP32[$6_1 >> 2] = 1065353216;
       HEAP32[$6_1 + 4 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $26_1, Math_fround(.20000000298023224), $6_1);
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] >> 2]]($5_1, $7_1);
      HEAP8[$6_1 + 40 | 0] = 0;
      HEAP32[$6_1 + 36 >> 2] = 1566444395;
      HEAP32[$6_1 >> 2] = 13380;
      $846($0, $6_1 + 112 | 0, $6_1 + 48 | 0, $6_1);
      if (!HEAPU8[$6_1 + 40 | 0]) {
       break label$3
      }
      $14 = $16_1 + 8 | 0;
      $17_1 = HEAP32[$14 + 4 >> 2];
      $2_1 = $6_1 + 232 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$14 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $17_1;
      $2_1 = HEAP32[$16_1 + 4 >> 2];
      HEAP32[$6_1 + 224 >> 2] = HEAP32[$16_1 >> 2];
      HEAP32[$6_1 + 228 >> 2] = $2_1;
      if ($4_1 >>> 0 > 63) {
       FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 8 >> 2]]($5_1, -2, $4_1 + 1 | 0);
       $15_1 = 0;
       break label$2;
      }
      $4_1 = $4_1 + 1 | 0;
      $2_1 = HEAP32[$6_1 + 4 >> 2];
      $14 = HEAP32[$6_1 + 8 >> 2];
      $17_1 = HEAP32[$6_1 + 12 >> 2];
      $8_1 = $7_1;
      $12_1 = Math_fround(HEAPF32[$6_1 + 36 >> 2] + HEAPF32[$5_1 + 172 >> 2]);
      if ($12_1 > Math_fround(1.0000000474974513e-03)) {
       continue
      }
      break;
     };
     $9_1 = HEAPF32[$6_1 + 16 >> 2];
    }
    HEAP32[$5_1 + 132 >> 2] = $2_1;
    HEAPF32[$5_1 + 164 >> 2] = $7_1;
    $0 = HEAP32[$6_1 + 228 >> 2];
    HEAP32[$5_1 + 148 >> 2] = HEAP32[$6_1 + 224 >> 2];
    HEAP32[$5_1 + 152 >> 2] = $0;
    HEAPF32[$5_1 + 144 >> 2] = $9_1;
    HEAP32[$5_1 + 140 >> 2] = $17_1;
    HEAP32[$5_1 + 136 >> 2] = $14;
    $1_1 = $6_1 + 232 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0 = $5_1 + 156 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0 + 4 >> 2] = $2_1;
    break label$2;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 8 >> 2]]($5_1, -1, $4_1);
   $15_1 = 0;
  }
  global$0 = $6_1 + 304 | 0;
  return $15_1 | 0;
 }
 
 function $849($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  HEAP32[$0 >> 2] = 18476;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 8 >> 2] = $4_1;
  $1_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = $0 + 12 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0 + 20 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 24 >> 2] = $1_1;
  $1_1 = $2_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = $0 + 28 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$0 + 40 >> 2] = 1065353216;
  HEAP32[$0 + 36 >> 2] = $3_1;
 }
 
 function $850($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $16_1 = HEAPF32[$1_1 + 24 >> 2];
  $24_1 = HEAPF32[$1_1 + 40 >> 2];
  $17_1 = HEAPF32[$1_1 + 36 >> 2];
  $8_1 = HEAPF32[$1_1 + 20 >> 2];
  $11 = HEAPF32[$1_1 + 8 >> 2];
  $18_1 = HEAPF32[$1_1 + 16 >> 2];
  $13_1 = HEAPF32[$1_1 + 4 >> 2];
  $19_1 = HEAPF32[$1_1 + 32 >> 2];
  $14 = HEAPF32[$1_1 >> 2];
  HEAP32[$7_1 + 28 >> 2] = 0;
  $5_1 = Math_fround($18_1 - $14);
  $9_1 = Math_fround($17_1 - $13_1);
  $6_1 = Math_fround($8_1 - $13_1);
  $12_1 = Math_fround($19_1 - $14);
  $4_1 = Math_fround(Math_fround($5_1 * $9_1) - Math_fround($6_1 * $12_1));
  HEAPF32[$7_1 + 24 >> 2] = $4_1;
  $10 = Math_fround($16_1 - $11);
  $22_1 = Math_fround($10 * $12_1);
  $12_1 = Math_fround($24_1 - $11);
  $5_1 = Math_fround($22_1 - Math_fround($5_1 * $12_1));
  HEAPF32[$7_1 + 20 >> 2] = $5_1;
  $9_1 = Math_fround(Math_fround($6_1 * $12_1) - Math_fround($10 * $9_1));
  HEAPF32[$7_1 + 16 >> 2] = $9_1;
  $15_1 = HEAPF32[$0 + 4 >> 2];
  $10 = HEAPF32[$0 + 8 >> 2];
  $20 = HEAPF32[$0 + 12 >> 2];
  $6_1 = Math_fround(Math_fround($11 * $4_1) + Math_fround(Math_fround($14 * $9_1) + Math_fround($13_1 * $5_1)));
  $12_1 = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $15_1) + Math_fround($5_1 * $10)) + Math_fround($4_1 * $20)) - $6_1);
  $23_1 = HEAPF32[$0 + 20 >> 2];
  $21 = HEAPF32[$0 + 24 >> 2];
  $25 = HEAPF32[$0 + 28 >> 2];
  $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $23_1) + Math_fround($5_1 * $21)) + Math_fround($4_1 * $25)) - $6_1);
  label$1 : {
   if (Math_fround($12_1 * $6_1) >= Math_fround(0.0)) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 36 >> 2];
   if ($1_1 & 1 ? !!($12_1 <= Math_fround(0.0)) : 0) {
    break label$1
   }
   $6_1 = Math_fround($12_1 / Math_fround($12_1 - $6_1));
   if (!($6_1 < HEAPF32[$0 + 40 >> 2])) {
    break label$1
   }
   $22_1 = $10;
   $10 = Math_fround(Math_fround(1.0) - $6_1);
   $21 = Math_fround(Math_fround($21 * $6_1) + Math_fround($22_1 * $10));
   $8_1 = Math_fround($8_1 - $21);
   $15_1 = Math_fround(Math_fround($23_1 * $6_1) + Math_fround($15_1 * $10));
   $14 = Math_fround($14 - $15_1);
   $13_1 = Math_fround($13_1 - $21);
   $18_1 = Math_fround($18_1 - $15_1);
   $10 = Math_fround(Math_fround($25 * $6_1) + Math_fround($20 * $10));
   $16_1 = Math_fround($16_1 - $10);
   $11 = Math_fround($11 - $10);
   $23_1 = Math_fround(Math_fround($4_1 * $4_1) + Math_fround(Math_fround($9_1 * $9_1) + Math_fround($5_1 * $5_1)));
   $20 = Math_fround($23_1 * Math_fround(-9.999999747378752e-05));
   if (!(Math_fround(Math_fround($4_1 * Math_fround(Math_fround($8_1 * $14) - Math_fround($13_1 * $18_1))) + Math_fround(Math_fround($9_1 * Math_fround(Math_fround($13_1 * $16_1) - Math_fround($11 * $8_1))) + Math_fround($5_1 * Math_fround(Math_fround($11 * $18_1) - Math_fround($16_1 * $14))))) >= $20)) {
    break label$1
   }
   $17_1 = Math_fround($17_1 - $21);
   $19_1 = Math_fround($19_1 - $15_1);
   $15_1 = Math_fround($4_1 * Math_fround(Math_fround($17_1 * $18_1) - Math_fround($8_1 * $19_1)));
   $22_1 = $8_1;
   $8_1 = Math_fround($24_1 - $10);
   if (Math_fround($15_1 + Math_fround(Math_fround($9_1 * Math_fround(Math_fround($22_1 * $8_1) - Math_fround($16_1 * $17_1))) + Math_fround($5_1 * Math_fround(Math_fround($16_1 * $19_1) - Math_fround($8_1 * $18_1))))) >= $20 ^ 1 | Math_fround(Math_fround($4_1 * Math_fround(Math_fround($13_1 * $19_1) - Math_fround($17_1 * $14))) + Math_fround(Math_fround($9_1 * Math_fround(Math_fround($17_1 * $11) - Math_fround($8_1 * $13_1))) + Math_fround($5_1 * Math_fround(Math_fround($8_1 * $14) - Math_fround($11 * $19_1))))) >= $20 ^ 1) {
    break label$1
   }
   $8_1 = $4_1;
   $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($23_1)));
   $11 = Math_fround($8_1 * $4_1);
   HEAPF32[$7_1 + 24 >> 2] = $11;
   $5_1 = Math_fround($5_1 * $4_1);
   HEAPF32[$7_1 + 20 >> 2] = $5_1;
   $4_1 = Math_fround($9_1 * $4_1);
   HEAPF32[$7_1 + 16 >> 2] = $4_1;
   if (!($1_1 & 2 | $12_1 <= Math_fround(0.0) ^ 1)) {
    HEAP32[$7_1 + 12 >> 2] = 0;
    HEAPF32[$7_1 + 8 >> 2] = -$11;
    HEAPF32[$7_1 + 4 >> 2] = -$5_1;
    HEAPF32[$7_1 >> 2] = -$4_1;
    (wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $7_1, $6_1, $2_1, $3_1))), HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
    break label$1;
   }
   (wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $7_1 + 16 | 0, $6_1, $2_1, $3_1))), HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
  }
  global$0 = $7_1 + 32 | 0;
 }
 
 function $851($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0;
  HEAP32[$0 + 4 >> 2] = $1_1;
  HEAP32[$0 >> 2] = 18500;
  $1_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$1_1 + 4 >> 2];
  $7_1 = $0 + 16 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $6_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 12 >> 2] = $1_1;
  $1_1 = $2_1 + 24 | 0;
  $6_1 = HEAP32[$1_1 + 4 >> 2];
  $7_1 = $0 + 32 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $6_1;
  $1_1 = HEAP32[$2_1 + 20 >> 2];
  $6_1 = $0 + 24 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $1_1;
  $1_1 = $2_1 + 40 | 0;
  $6_1 = HEAP32[$1_1 + 4 >> 2];
  $7_1 = $0 + 48 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $6_1;
  $1_1 = HEAP32[$2_1 + 36 >> 2];
  $6_1 = $0 + 40 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $1_1;
  $1_1 = $2_1 + 56 | 0;
  $6_1 = HEAP32[$1_1 + 4 >> 2];
  $7_1 = $0 - -64 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $6_1;
  $1_1 = HEAP32[$2_1 + 52 >> 2];
  $6_1 = $0 + 56 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $1_1;
  $1_1 = $3_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = $0 + 80 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0 + 72 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0 + 76 >> 2] = $1_1;
  $1_1 = $3_1 + 24 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = $0 + 96 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 20 >> 2];
  $2_1 = $0 + 88 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $3_1 + 40 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = $0 + 112 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 36 >> 2];
  $2_1 = $0 + 104 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $3_1 + 56 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = $0 + 128 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 52 >> 2];
  $2_1 = $0 + 120 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $4_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $0 + 144 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$0 + 136 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$0 + 140 >> 2] = $1_1;
  $1_1 = $4_1 + 24 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $0 + 160 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$4_1 + 20 >> 2];
  $2_1 = $0 + 152 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $4_1 + 40 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $0 + 176 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$4_1 + 36 >> 2];
  $2_1 = $0 + 168 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 32 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $4_1 + 56 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $0 + 192 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$4_1 + 52 >> 2];
  $2_1 = $0 + 184 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 48 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  HEAP32[$0 + 208 >> 2] = 0;
  HEAPF32[$0 + 204 >> 2] = $5_1;
  HEAP32[$0 + 200 >> 2] = 1065353216;
 }
 
 function $852($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14 = Math_fround(0);
  $4_1 = global$0 - 688 | 0;
  global$0 = $4_1;
  $13_1 = $179($4_1 + 576 | 0);
  $5_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $7_1 = $4_1 + 644 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $6_1;
  $5_1 = HEAP32[$1_1 + 20 >> 2];
  $6_1 = $4_1 + 652 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $5_1;
  $5_1 = $1_1 + 24 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $7_1 = $4_1 + 660 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $6_1;
  $5_1 = HEAP32[$1_1 + 36 >> 2];
  $6_1 = $4_1 + 668 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $5_1;
  $5_1 = $1_1 + 40 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $7_1 = $4_1 + 676 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $6_1;
  HEAP32[$4_1 + 580 >> 2] = 1;
  HEAP32[$4_1 + 576 >> 2] = 14368;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 + 636 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 640 >> 2] = $5_1;
  HEAP32[$4_1 + 624 >> 2] = HEAP32[$0 + 204 >> 2];
  HEAP8[$4_1 + 548 | 0] = 0;
  HEAP32[$4_1 + 524 >> 2] = 953267991;
  HEAP32[$4_1 + 208 >> 2] = 12816;
  $1_1 = $844($4_1 + 184 | 0, HEAP32[$0 + 4 >> 2], $4_1 + 576 | 0, $4_1 + 216 | 0, $4_1 + 208 | 0);
  HEAP32[$4_1 + 8 >> 2] = 14008;
  HEAP32[$4_1 + 172 >> 2] = 1065353216;
  HEAP32[$4_1 + 176 >> 2] = 0;
  HEAP32[$4_1 + 180 >> 2] = HEAP32[$0 + 208 >> 2];
  $5_1 = $1_1;
  $1_1 = $0 + 136 | 0;
  label$1 : {
   if (!$847($5_1, $0 + 8 | 0, $0 + 72 | 0, $1_1, $1_1, $4_1 + 8 | 0)) {
    break label$1
   }
   $9_1 = HEAPF32[$4_1 + 140 >> 2];
   $10 = HEAPF32[$4_1 + 144 >> 2];
   $8_1 = HEAPF32[$4_1 + 148 >> 2];
   $11 = Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($10 * $10)) + Math_fround($8_1 * $8_1));
   if (!($11 > Math_fround(9.999999747378752e-05))) {
    break label$1
   }
   $12_1 = HEAPF32[$4_1 + 172 >> 2];
   if (!($12_1 < HEAPF32[$0 + 200 >> 2])) {
    break label$1
   }
   $14 = $8_1;
   $8_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($11)));
   HEAPF32[$4_1 + 148 >> 2] = $14 * $8_1;
   HEAPF32[$4_1 + 144 >> 2] = $10 * $8_1;
   HEAPF32[$4_1 + 140 >> 2] = $9_1 * $8_1;
   Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $4_1 + 140 | 0, $4_1 + 156 | 0, $12_1, $2_1, $3_1));
  }
  $193($13_1);
  global$0 = $4_1 + 688 | 0;
 }
 
 function $855($0, $1_1, $2_1) {
  HEAP32[$0 >> 2] = 18608;
  HEAP8[$0 + 76 | 0] = 1;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = $2_1;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = $1_1;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 - -64 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 0;
  HEAP32[$0 + 56 >> 2] = 1025758986;
  HEAP8[$0 + 54 | 0] = 1;
  HEAP16[$0 + 52 >> 1] = 256;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $1_1 = $0 + 36 | 0;
  HEAP32[$1_1 >> 2] = 1;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $856($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  HEAP32[$0 >> 2] = 18608;
  $1_1 = HEAP32[$0 + 16 >> 2];
  $2_1 = HEAP32[$0 + 8 >> 2];
  if (($2_1 | 0) >= 1) {
   while (1) {
    $5_1 = HEAP32[$1_1 + $4_1 >> 2];
    $3_1 = HEAP32[$5_1 + 188 >> 2];
    if ($3_1) {
     $1_1 = HEAP32[$0 + 68 >> 2];
     $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 40 >> 2]]($1_1, $3_1, HEAP32[$0 + 24 >> 2]);
     $1_1 = HEAP32[$0 + 68 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $3_1, HEAP32[$0 + 24 >> 2]);
     HEAP32[$5_1 + 188 >> 2] = 0;
     $2_1 = HEAP32[$0 + 8 >> 2];
     $1_1 = HEAP32[$0 + 16 >> 2];
    }
    $4_1 = $4_1 + 4 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  if ($1_1) {
   if (HEAPU8[$0 + 20 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  return $0 | 0;
 }
 
 function $857($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  HEAP32[$0 >> 2] = 18608;
  $1_1 = HEAP32[$0 + 16 >> 2];
  $2_1 = HEAP32[$0 + 8 >> 2];
  if (($2_1 | 0) >= 1) {
   while (1) {
    $5_1 = HEAP32[$1_1 + $4_1 >> 2];
    $3_1 = HEAP32[$5_1 + 188 >> 2];
    if ($3_1) {
     $1_1 = HEAP32[$0 + 68 >> 2];
     $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 40 >> 2]]($1_1, $3_1, HEAP32[$0 + 24 >> 2]);
     $1_1 = HEAP32[$0 + 68 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $3_1, HEAP32[$0 + 24 >> 2]);
     HEAP32[$5_1 + 188 >> 2] = 0;
     $2_1 = HEAP32[$0 + 8 >> 2];
     $1_1 = HEAP32[$0 + 16 >> 2];
    }
    $4_1 = $4_1 + 4 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  if (!(!$1_1 | !HEAPU8[$0 + 20 | 0])) {
   $80($1_1)
  }
  $37($0);
 }
 
 function $858($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  $4_1 = HEAP32[$0 + 8 >> 2];
  HEAP32[$1_1 + 216 >> 2] = $4_1;
  label$1 : {
   if (HEAP32[$0 + 12 >> 2] != ($4_1 | 0)) {
    break label$1
   }
   $8_1 = $4_1 ? $4_1 << 1 : 1;
   if (($4_1 | 0) >= ($8_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$8_1) {
     break label$2
    }
    $9_1 = $79($8_1 << 2);
    $4_1 = HEAP32[$0 + 8 >> 2];
   }
   if (($4_1 | 0) >= 1) {
    $5_1 = $4_1;
    while (1) {
     HEAP32[$7_1 + $9_1 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] + $7_1 >> 2];
     $7_1 = $7_1 + 4 | 0;
     $5_1 = $5_1 + -1 | 0;
     if ($5_1) {
      continue
     }
     break;
    };
   }
   $5_1 = HEAP32[$0 + 16 >> 2];
   if ($5_1) {
    if (HEAPU8[$0 + 20 | 0]) {
     $80($5_1);
     $4_1 = HEAP32[$0 + 8 >> 2];
    }
    HEAP32[$0 + 16 >> 2] = 0;
   }
   HEAP32[$0 + 16 >> 2] = $9_1;
   HEAP32[$0 + 12 >> 2] = $8_1;
   HEAP8[$0 + 20 | 0] = 1;
  }
  HEAP32[$0 + 8 >> 2] = $4_1 + 1;
  HEAP32[HEAP32[$0 + 16 >> 2] + ($4_1 << 2) >> 2] = $1_1;
  $5_1 = $1_1 + 12 | 0;
  $7_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $6_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $5_1 = $1_1 + 28 | 0;
  $7_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $6_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $5_1 = $1_1 + 44 | 0;
  $7_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $6_1 + 72 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $5_1 = $1_1 + 60 | 0;
  $7_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $6_1 + 88 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$6_1 + 32 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$6_1 + 36 >> 2] = $4_1;
  $4_1 = $1_1 + 20 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$6_1 + 48 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 52 >> 2] = $5_1;
  $4_1 = $1_1 + 36 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$6_1 + 64 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 68 >> 2] = $5_1;
  $4_1 = $1_1 + 52 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$6_1 + 80 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 84 >> 2] = $5_1;
  $4_1 = HEAP32[$1_1 + 192 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $6_1 + 32 | 0, $6_1 + 16 | 0, $6_1);
  $4_1 = HEAP32[$0 + 68 >> 2];
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $6_1 + 16 | 0, $6_1, HEAP32[HEAP32[$1_1 + 192 >> 2] + 4 >> 2], $1_1, $2_1, $3_1, HEAP32[$0 + 24 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 188 >> 2] = wasm2js_i32$1;
  global$0 = $6_1 + 96 | 0;
 }
 
 function $859($0, $1_1) {
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $10 = HEAP32[$1_1 + 192 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 8 >> 2]]($10, $1_1 + 4 | 0, $2_1 + 48 | 0, $2_1 + 32 | 0);
  $3_1 = HEAPF32[5848];
  $5_1 = Math_fround(HEAPF32[$2_1 + 48 >> 2] - $3_1);
  HEAPF32[$2_1 + 48 >> 2] = $5_1;
  $6_1 = Math_fround(HEAPF32[$2_1 + 52 >> 2] - $3_1);
  HEAPF32[$2_1 + 52 >> 2] = $6_1;
  $7_1 = Math_fround(HEAPF32[$2_1 + 56 >> 2] - $3_1);
  HEAPF32[$2_1 + 56 >> 2] = $7_1;
  $4_1 = Math_fround($3_1 + HEAPF32[$2_1 + 32 >> 2]);
  HEAPF32[$2_1 + 32 >> 2] = $4_1;
  $8_1 = Math_fround($3_1 + HEAPF32[$2_1 + 36 >> 2]);
  HEAPF32[$2_1 + 36 >> 2] = $8_1;
  $9_1 = Math_fround($3_1 + HEAPF32[$2_1 + 40 >> 2]);
  HEAPF32[$2_1 + 40 >> 2] = $9_1;
  label$1 : {
   if (HEAPU8[$1_1 + 204 | 0] & 3 | (!HEAPU8[$0 + 44 | 0] | HEAP32[$1_1 + 252 >> 2] != 2)) {
    break label$1
   }
   $10 = HEAP32[$1_1 + 192 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 8 >> 2]]($10, $1_1 + 68 | 0, $2_1 + 16 | 0, $2_1);
   $6_1 = Math_fround(HEAPF32[$2_1 + 16 >> 2] - $3_1);
   HEAPF32[$2_1 + 16 >> 2] = $6_1;
   $7_1 = Math_fround(HEAPF32[$2_1 + 20 >> 2] - $3_1);
   HEAPF32[$2_1 + 20 >> 2] = $7_1;
   $4_1 = Math_fround(HEAPF32[$2_1 + 24 >> 2] - $3_1);
   HEAPF32[$2_1 + 24 >> 2] = $4_1;
   $8_1 = Math_fround($3_1 + HEAPF32[$2_1 >> 2]);
   HEAPF32[$2_1 >> 2] = $8_1;
   $9_1 = Math_fround($3_1 + HEAPF32[$2_1 + 4 >> 2]);
   HEAPF32[$2_1 + 4 >> 2] = $9_1;
   $3_1 = Math_fround($3_1 + HEAPF32[$2_1 + 8 >> 2]);
   HEAPF32[$2_1 + 8 >> 2] = $3_1;
   $5_1 = HEAPF32[$2_1 + 48 >> 2];
   if (!!($6_1 < $5_1)) {
    HEAPF32[$2_1 + 48 >> 2] = $6_1;
    $5_1 = $6_1;
   }
   $6_1 = HEAPF32[$2_1 + 52 >> 2];
   if (!!($7_1 < $6_1)) {
    HEAPF32[$2_1 + 52 >> 2] = $7_1;
    $6_1 = $7_1;
   }
   $7_1 = HEAPF32[$2_1 + 56 >> 2];
   if (!!($4_1 < $7_1)) {
    HEAPF32[$2_1 + 56 >> 2] = $4_1;
    $7_1 = $4_1;
   }
   $4_1 = HEAPF32[$2_1 + 28 >> 2];
   if (!!($4_1 < HEAPF32[$2_1 + 60 >> 2])) {
    HEAPF32[$2_1 + 60 >> 2] = $4_1
   }
   $4_1 = HEAPF32[$2_1 + 32 >> 2];
   if (!!($4_1 < $8_1)) {
    HEAPF32[$2_1 + 32 >> 2] = $8_1;
    $4_1 = $8_1;
   }
   $8_1 = HEAPF32[$2_1 + 36 >> 2];
   if (!!($8_1 < $9_1)) {
    HEAPF32[$2_1 + 36 >> 2] = $9_1;
    $8_1 = $9_1;
   }
   $9_1 = HEAPF32[$2_1 + 40 >> 2];
   if (!!($9_1 < $3_1)) {
    HEAPF32[$2_1 + 40 >> 2] = $3_1;
    $9_1 = $3_1;
   }
   $3_1 = HEAPF32[$2_1 + 12 >> 2];
   if (!(HEAPF32[$2_1 + 44 >> 2] < $3_1)) {
    break label$1
   }
   HEAPF32[$2_1 + 44 >> 2] = $3_1;
  }
  $10 = HEAP32[$0 + 68 >> 2];
  label$9 : {
   label$10 : {
    if (!(HEAP8[$1_1 + 204 | 0] & 1)) {
     $5_1 = Math_fround($4_1 - $5_1);
     $4_1 = Math_fround($5_1 * $5_1);
     $5_1 = Math_fround($8_1 - $6_1);
     $4_1 = Math_fround($4_1 + Math_fround($5_1 * $5_1));
     $5_1 = Math_fround($9_1 - $7_1);
     if (!(Math_fround($4_1 + Math_fround($5_1 * $5_1)) < Math_fround(999999995904.0))) {
      break label$10
     }
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 16 >> 2]]($10, HEAP32[$1_1 + 188 >> 2], $2_1 + 48 | 0, $2_1 + 32 | 0, HEAP32[$0 + 24 >> 2]);
    break label$9;
   }
   $308($1_1, 5);
   if (HEAPU8[25204]) {
    break label$9
   }
   $1_1 = HEAP32[$0 + 72 >> 2];
   if (!$1_1) {
    break label$9
   }
   HEAP8[25204] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 44 >> 2]]($1_1, 18660);
   $1_1 = HEAP32[$0 + 72 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 44 >> 2]]($1_1, 18709);
   $1_1 = HEAP32[$0 + 72 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 44 >> 2]]($1_1, 18777);
   $0 = HEAP32[$0 + 72 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, 18842);
  }
  global$0 = $2_1 - -64 | 0;
 }
 
 function $860($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $613($1_1 + 8 | 0, 18851);
  $2_1 = HEAP32[$0 + 8 >> 2];
  if (($2_1 | 0) >= 1) {
   while (1) {
    $4_1 = HEAP32[HEAP32[$0 + 16 >> 2] + $3_1 >> 2];
    label$3 : {
     label$4 : {
      if (HEAPU8[$0 + 76 | 0]) {
       break label$4
      }
      $5_1 = HEAP32[$4_1 + 220 >> 2] + -2 | 0;
      if ($5_1 >>> 0 > 3) {
       break label$4
      }
      switch ($5_1 - 1 | 0) {
      case 0:
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     $859($0, $4_1);
     $2_1 = HEAP32[$0 + 8 >> 2];
    }
    $3_1 = $3_1 + 4 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  $614();
  global$0 = $1_1 + 16 | 0;
 }
 
 function $861($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $613($1_1 + 8 | 0, 18863);
  $2_1 = HEAP32[$0 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 32 >> 2]]($2_1, HEAP32[$0 + 24 >> 2]);
  $614();
  global$0 = $1_1 + 16 | 0;
 }
 
 function $862($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $613($1_1 + 8 | 0, 18889);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0);
  $2_1 = HEAP32[$0 + 24 >> 2];
  $613($1_1, 18923);
  if ($2_1) {
   $3_1 = HEAP32[$0 + 68 >> 2];
   ((((wasm2js_i32$1 = $2_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 36 >> 2]]($3_1) | 0), wasm2js_i32$3 = $0 + 28 | 0), wasm2js_i32$4 = HEAP32[$0 + 24 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 32 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0);
  }
  $614();
  $614();
  global$0 = $1_1 + 16 | 0;
 }
 
 function $863($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = HEAP32[$1_1 + 188 >> 2];
  if ($3_1) {
   $2_1 = HEAP32[$0 + 68 >> 2];
   $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 36 >> 2]]($2_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 40 >> 2]]($2_1, $3_1, HEAP32[$0 + 24 >> 2]);
   $2_1 = HEAP32[$0 + 68 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1, $3_1, HEAP32[$0 + 24 >> 2]);
   HEAP32[$1_1 + 188 >> 2] = 0;
  }
  $2_1 = HEAP32[$1_1 + 216 >> 2];
  $3_1 = HEAP32[$0 + 8 >> 2];
  label$2 : {
   if (!(($2_1 | 0) < 0 | ($2_1 | 0) >= ($3_1 | 0))) {
    $5_1 = $0 + 16 | 0;
    $4_1 = HEAP32[$5_1 >> 2];
    $7_1 = $2_1 << 2;
    $8_1 = $4_1 + $7_1 | 0;
    $9_1 = HEAP32[$8_1 >> 2];
    $6_1 = $4_1;
    $3_1 = $3_1 + -1 | 0;
    $4_1 = $3_1 << 2;
    HEAP32[$8_1 >> 2] = HEAP32[$6_1 + $4_1 >> 2];
    HEAP32[$0 + 8 >> 2] = $3_1;
    HEAP32[$4_1 + HEAP32[$5_1 >> 2] >> 2] = $9_1;
    if (($2_1 | 0) >= ($3_1 | 0)) {
     break label$2
    }
    HEAP32[HEAP32[HEAP32[$0 + 16 >> 2] + $7_1 >> 2] + 216 >> 2] = $2_1;
    break label$2;
   }
   if (($3_1 | 0) < 1) {
    break label$2
   }
   $4_1 = HEAP32[$0 + 16 >> 2];
   $2_1 = $4_1;
   while (1) {
    if (($1_1 | 0) != HEAP32[$2_1 >> 2]) {
     $2_1 = $2_1 + 4 | 0;
     $5_1 = $5_1 + 1 | 0;
     if (($3_1 | 0) != ($5_1 | 0)) {
      continue
     }
     break label$2;
    }
    break;
   };
   if (($3_1 | 0) <= ($5_1 | 0)) {
    break label$2
   }
   $6_1 = $2_1;
   $3_1 = $3_1 + -1 | 0;
   $2_1 = $3_1 << 2;
   HEAP32[$6_1 >> 2] = HEAP32[$2_1 + $4_1 >> 2];
   HEAP32[$0 + 8 >> 2] = $3_1;
   HEAP32[$2_1 + HEAP32[$0 + 16 >> 2] >> 2] = $1_1;
  }
  HEAP32[$1_1 + 216 >> 2] = -1;
 }
 
 function $864($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = 0, $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38 = Math_fround(0), $39_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4_1 = global$0 - 704 | 0;
  global$0 = $4_1;
  $145($4_1 + 624 | 0);
  $5_1 = $4_1 + 652 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $4_1 + 660 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $4_1 + 668 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 676 >> 2] = 0;
  HEAP32[$4_1 + 648 >> 2] = 1065353216;
  HEAP32[$4_1 + 640 >> 2] = 1065353216;
  HEAP32[$4_1 + 644 >> 2] = 1065353216;
  HEAP32[$4_1 + 628 >> 2] = 8;
  HEAP32[$4_1 + 624 >> 2] = 7868;
  $5_1 = HEAP32[$2_1 + 12 >> 2];
  label$1 : {
   $9_1 = HEAP32[$2_1 + 4 >> 2];
   $17_1 = HEAP32[$9_1 + 4 >> 2];
   if (($17_1 | 0) <= 19) {
    HEAP32[$4_1 + 616 >> 2] = 0;
    HEAP32[$4_1 + 620 >> 2] = 0;
    HEAP32[$4_1 + 448 >> 2] = 14008;
    HEAP32[$4_1 + 612 >> 2] = HEAP32[$3_1 + 4 >> 2];
    HEAP8[$4_1 + 420 | 0] = 0;
    HEAP32[$4_1 + 396 >> 2] = 953267991;
    $17_1 = $615($4_1 + 680 | 0, $4_1 + 624 | 0, $9_1, $4_1 + 88 | 0);
    $9_1 = (wasm2js_i32$0 = $579($4_1 + 72 | 0, $4_1 + 624 | 0, $9_1, $4_1 + 88 | 0), wasm2js_i32$1 = $17_1, wasm2js_i32$2 = HEAP32[$3_1 + 20 >> 2] & 8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    label$3 : {
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 8 >> 2]]($9_1, $0, $1_1, $5_1, $5_1, $4_1 + 448 | 0)) {
      break label$3
     }
     $6_1 = HEAPF32[$4_1 + 580 >> 2];
     $8_1 = HEAPF32[$4_1 + 584 >> 2];
     $7_1 = HEAPF32[$4_1 + 588 >> 2];
     $10 = Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($8_1 * $8_1)) + Math_fround($7_1 * $7_1));
     if (!($10 > Math_fround(9.999999747378752e-05))) {
      break label$3
     }
     $12_1 = HEAPF32[$4_1 + 612 >> 2];
     if (!($12_1 < HEAPF32[$3_1 + 4 >> 2])) {
      break label$3
     }
     $20 = $7_1;
     $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($10)));
     HEAPF32[$4_1 + 588 >> 2] = $20 * $7_1;
     HEAPF32[$4_1 + 584 >> 2] = $8_1 * $7_1;
     HEAPF32[$4_1 + 580 >> 2] = $6_1 * $7_1;
     $0 = $4_1 + 580 | 0;
     $1_1 = $0 + 8 | 0;
     $5_1 = HEAP32[$1_1 + 4 >> 2];
     $9_1 = $4_1 + 56 | 0;
     HEAP32[$9_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $5_1;
     HEAPF32[$4_1 + 64 >> 2] = $12_1;
     $1_1 = HEAP32[$0 + 4 >> 2];
     HEAP32[$4_1 + 48 >> 2] = HEAP32[$0 >> 2];
     HEAP32[$4_1 + 52 >> 2] = $1_1;
     HEAP32[$4_1 + 44 >> 2] = 0;
     HEAP32[$4_1 + 40 >> 2] = HEAP32[$2_1 + 8 >> 2];
     Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $4_1 + 40 | 0, 1));
    }
    break label$1;
   }
   if ($17_1 + -21 >>> 0 <= 8) {
    $12_1 = HEAPF32[$5_1 + 20 >> 2];
    $15_1 = HEAPF32[$5_1 + 36 >> 2];
    $13_1 = HEAPF32[$5_1 + 24 >> 2];
    $8_1 = HEAPF32[$5_1 + 52 >> 2];
    $17_1 = $5_1 + 56 | 0;
    $10 = HEAPF32[$17_1 >> 2];
    $14 = HEAPF32[$5_1 + 40 >> 2];
    $16_1 = HEAPF32[$5_1 + 32 >> 2];
    $18_1 = HEAPF32[$5_1 + 16 >> 2];
    $19_1 = HEAPF32[$5_1 >> 2];
    $21 = HEAPF32[$5_1 + 4 >> 2];
    $6_1 = HEAPF32[$5_1 + 48 >> 2];
    $7_1 = HEAPF32[$5_1 + 8 >> 2];
    HEAP32[$4_1 + 460 >> 2] = 0;
    $22_1 = Math_fround(-$8_1);
    $24_1 = Math_fround($13_1 * $22_1);
    $25 = Math_fround($14 * $10);
    $26_1 = Math_fround(Math_fround($24_1 - Math_fround($7_1 * $6_1)) - $25);
    $8_1 = HEAPF32[$0 + 48 >> 2];
    $23_1 = HEAPF32[$0 + 52 >> 2];
    $29_1 = Math_fround($13_1 * $23_1);
    $27_1 = HEAPF32[$0 + 56 >> 2];
    $30 = Math_fround($14 * $27_1);
    HEAPF32[$4_1 + 456 >> 2] = $26_1 + Math_fround(Math_fround(Math_fround($7_1 * $8_1) + $29_1) + $30);
    $31_1 = Math_fround($12_1 * $22_1);
    $33_1 = Math_fround($15_1 * $10);
    $28_1 = Math_fround(Math_fround($31_1 - Math_fround($21 * $6_1)) - $33_1);
    $34 = Math_fround($12_1 * $23_1);
    $36_1 = Math_fround($15_1 * $27_1);
    HEAPF32[$4_1 + 452 >> 2] = $28_1 + Math_fround(Math_fround(Math_fround($21 * $8_1) + $34) + $36_1);
    $37_1 = Math_fround(Math_fround(Math_fround($18_1 * $22_1) - Math_fround($19_1 * $6_1)) - Math_fround($16_1 * $10));
    HEAPF32[$4_1 + 448 >> 2] = $37_1 + Math_fround(Math_fround(Math_fround($19_1 * $8_1) + Math_fround($18_1 * $23_1)) + Math_fround($16_1 * $27_1));
    HEAP32[$4_1 + 52 >> 2] = 0;
    $39_1 = $26_1;
    $35 = $7_1;
    $7_1 = HEAPF32[$1_1 + 48 >> 2];
    $20 = $13_1;
    $13_1 = HEAPF32[$1_1 + 52 >> 2];
    $26_1 = Math_fround($20 * $13_1);
    $20 = $14;
    $14 = HEAPF32[$1_1 + 56 >> 2];
    $38 = Math_fround($20 * $14);
    HEAPF32[$4_1 + 48 >> 2] = $39_1 + Math_fround(Math_fround(Math_fround($35 * $7_1) + $26_1) + $38);
    $20 = $28_1;
    $35 = Math_fround($21 * $7_1);
    $21 = Math_fround($12_1 * $13_1);
    $28_1 = Math_fround($15_1 * $14);
    HEAPF32[$4_1 + 44 >> 2] = $20 + Math_fround(Math_fround($35 + $21) + $28_1);
    HEAPF32[$4_1 + 40 >> 2] = $37_1 + Math_fround(Math_fround(Math_fround($19_1 * $7_1) + Math_fround($18_1 * $13_1)) + Math_fround($16_1 * $14));
    $0 = $5_1 + 32 | 0;
    $1_1 = $5_1 + 16 | 0;
    if (HEAP32[$9_1 + 4 >> 2] == 21) {
     $2_1 = HEAP32[$2_1 + 8 >> 2];
     $849($4_1 + 88 | 0, $4_1 + 448 | 0, $4_1 + 40 | 0, HEAP32[$3_1 + 20 >> 2]);
     HEAP32[$4_1 + 140 >> 2] = $9_1;
     HEAP32[$4_1 + 136 >> 2] = $2_1;
     HEAP32[$4_1 + 132 >> 2] = $3_1;
     HEAP32[$4_1 + 88 >> 2] = 19020;
     $2_1 = $5_1 + 8 | 0;
     $11 = HEAP32[$2_1 + 4 >> 2];
     $32 = $4_1 + 152 | 0;
     HEAP32[$32 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$32 + 4 >> 2] = $11;
     $2_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$4_1 + 144 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$4_1 + 148 >> 2] = $2_1;
     $2_1 = $1_1 + 8 | 0;
     $11 = HEAP32[$2_1 + 4 >> 2];
     $32 = $4_1 + 168 | 0;
     HEAP32[$32 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$32 + 4 >> 2] = $11;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $11 = $4_1 + 160 | 0;
     HEAP32[$11 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$11 + 4 >> 2] = $2_1;
     $1_1 = $0 + 8 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $11 = $4_1 + 184 | 0;
     HEAP32[$11 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$11 + 4 >> 2] = $2_1;
     $1_1 = HEAP32[$0 + 4 >> 2];
     $2_1 = $4_1 + 176 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $1_1;
     $0 = HEAP32[$17_1 + 4 >> 2];
     $1_1 = $4_1 + 200 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$17_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $0;
     $0 = HEAP32[$5_1 + 52 >> 2];
     $1_1 = $4_1 + 192 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $0;
     HEAP32[$4_1 + 128 >> 2] = HEAP32[$3_1 + 4 >> 2];
     $375($9_1, $4_1 + 88 | 0, $4_1 + 448 | 0, $4_1 + 40 | 0);
     break label$1;
    }
    $12_1 = HEAPF32[$5_1 + 32 >> 2];
    $15_1 = HEAPF32[$5_1 + 16 >> 2];
    $16_1 = HEAPF32[$5_1 >> 2];
    $18_1 = HEAPF32[$5_1 + 4 >> 2];
    $19_1 = HEAPF32[$5_1 + 8 >> 2];
    HEAP32[$4_1 + 692 >> 2] = 0;
    $24_1 = Math_fround(Math_fround($24_1 - Math_fround($19_1 * $6_1)) - $25);
    HEAPF32[$4_1 + 688 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $19_1) + $29_1) + $30) + $24_1;
    $25 = Math_fround(Math_fround($31_1 - Math_fround($18_1 * $6_1)) - $33_1);
    HEAPF32[$4_1 + 684 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $18_1) + $34) + $36_1) + $25;
    $6_1 = Math_fround(Math_fround(Math_fround($15_1 * $22_1) - Math_fround($16_1 * $6_1)) - Math_fround($12_1 * $10));
    HEAPF32[$4_1 + 680 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $16_1) + Math_fround($23_1 * $15_1)) + Math_fround($27_1 * $12_1)) + $6_1;
    HEAP32[$4_1 + 84 >> 2] = 0;
    HEAPF32[$4_1 + 80 >> 2] = Math_fround(Math_fround(Math_fround($7_1 * $19_1) + $26_1) + $38) + $24_1;
    HEAPF32[$4_1 + 76 >> 2] = Math_fround(Math_fround(Math_fround($7_1 * $18_1) + $21) + $28_1) + $25;
    HEAPF32[$4_1 + 72 >> 2] = Math_fround(Math_fround(Math_fround($7_1 * $16_1) + Math_fround($13_1 * $15_1)) + Math_fround($14 * $12_1)) + $6_1;
    $2_1 = HEAP32[$2_1 + 8 >> 2];
    $849($4_1 + 88 | 0, $4_1 + 680 | 0, $4_1 + 72 | 0, HEAP32[$3_1 + 20 >> 2]);
    HEAP32[$4_1 + 140 >> 2] = $9_1;
    HEAP32[$4_1 + 136 >> 2] = $2_1;
    HEAP32[$4_1 + 132 >> 2] = $3_1;
    HEAP32[$4_1 + 88 >> 2] = 19204;
    $2_1 = HEAP32[$5_1 + 12 >> 2];
    $11 = $4_1 + 152 | 0;
    HEAP32[$11 >> 2] = HEAP32[$5_1 + 8 >> 2];
    HEAP32[$11 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$4_1 + 144 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$4_1 + 148 >> 2] = $2_1;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $11 = $4_1 + 160 | 0;
    HEAP32[$11 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$11 + 4 >> 2] = $2_1;
    $1_1 = $1_1 + 8 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $11 = $4_1 + 168 | 0;
    HEAP32[$11 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$11 + 4 >> 2] = $2_1;
    $1_1 = $0 + 8 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $11 = $4_1 + 184 | 0;
    HEAP32[$11 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$11 + 4 >> 2] = $2_1;
    $1_1 = HEAP32[$0 + 4 >> 2];
    $2_1 = $4_1 + 176 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $0 = HEAP32[$5_1 + 52 >> 2];
    $1_1 = $4_1 + 192 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $0;
    $0 = HEAP32[$17_1 + 4 >> 2];
    $1_1 = $4_1 + 200 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$17_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $0;
    HEAP32[$4_1 + 128 >> 2] = HEAP32[$3_1 + 4 >> 2];
    $0 = HEAP32[$4_1 + 692 >> 2];
    $1_1 = $4_1 + 32 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$4_1 + 688 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $0;
    $0 = HEAP32[$4_1 + 684 >> 2];
    HEAP32[$4_1 + 24 >> 2] = HEAP32[$4_1 + 680 >> 2];
    HEAP32[$4_1 + 28 >> 2] = $0;
    $6_1 = HEAPF32[$4_1 + 72 >> 2];
    if (!!($6_1 < HEAPF32[$4_1 + 24 >> 2])) {
     HEAPF32[$4_1 + 24 >> 2] = $6_1
    }
    $8_1 = HEAPF32[$4_1 + 76 >> 2];
    if (!!($8_1 < HEAPF32[$4_1 + 28 >> 2])) {
     HEAPF32[$4_1 + 28 >> 2] = $8_1
    }
    $7_1 = HEAPF32[$4_1 + 80 >> 2];
    if (!!($7_1 < HEAPF32[$4_1 + 32 >> 2])) {
     HEAPF32[$4_1 + 32 >> 2] = $7_1
    }
    $10 = HEAPF32[$4_1 + 84 >> 2];
    if (!!($10 < HEAPF32[$4_1 + 36 >> 2])) {
     HEAPF32[$4_1 + 36 >> 2] = $10
    }
    $0 = $4_1 + 688 | 0;
    $1_1 = HEAP32[$0 + 4 >> 2];
    $2_1 = $4_1 + 16 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $0 = HEAP32[$4_1 + 684 >> 2];
    HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 680 >> 2];
    HEAP32[$4_1 + 12 >> 2] = $0;
    if (!!(HEAPF32[$4_1 + 8 >> 2] < $6_1)) {
     HEAPF32[$4_1 + 8 >> 2] = $6_1
    }
    if (!!(HEAPF32[$4_1 + 12 >> 2] < $8_1)) {
     HEAPF32[$4_1 + 12 >> 2] = $8_1
    }
    if (!!(HEAPF32[$4_1 + 16 >> 2] < $7_1)) {
     HEAPF32[$4_1 + 16 >> 2] = $7_1
    }
    if (!!(HEAPF32[$4_1 + 20 >> 2] < $10)) {
     HEAPF32[$4_1 + 20 >> 2] = $10
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 64 >> 2]]($9_1, $4_1 + 88 | 0, $4_1 + 24 | 0, $4_1 + 8 | 0);
    break label$1;
   }
   if (($17_1 | 0) != 31) {
    break label$1
   }
   $17_1 = HEAP32[$9_1 + 68 >> 2];
   HEAP32[$4_1 + 64 >> 2] = $3_1;
   HEAP32[$4_1 + 60 >> 2] = $1_1;
   HEAP32[$4_1 + 56 >> 2] = $0;
   HEAP32[$4_1 + 52 >> 2] = $5_1;
   HEAP32[$4_1 + 48 >> 2] = $9_1;
   HEAP32[$4_1 + 40 >> 2] = 19392;
   HEAP32[$4_1 + 44 >> 2] = HEAP32[$2_1 + 8 >> 2];
   if ($17_1) {
    $10 = HEAPF32[$5_1 >> 2];
    $12_1 = HEAPF32[$5_1 + 4 >> 2];
    $6_1 = HEAPF32[$5_1 + 8 >> 2];
    HEAP32[$4_1 + 100 >> 2] = 0;
    $20 = $6_1;
    $15_1 = HEAPF32[$5_1 + 48 >> 2];
    $6_1 = Math_fround(HEAPF32[$0 + 48 >> 2] - $15_1);
    $13_1 = HEAPF32[$5_1 + 52 >> 2];
    $8_1 = Math_fround(HEAPF32[$0 + 52 >> 2] - $13_1);
    $14 = HEAPF32[$5_1 + 24 >> 2];
    $16_1 = HEAPF32[$5_1 + 56 >> 2];
    $7_1 = Math_fround(HEAPF32[$0 + 56 >> 2] - $16_1);
    $18_1 = HEAPF32[$5_1 + 40 >> 2];
    HEAPF32[$4_1 + 96 >> 2] = Math_fround(Math_fround($20 * $6_1) + Math_fround($8_1 * $14)) + Math_fround($7_1 * $18_1);
    $20 = Math_fround($6_1 * $12_1);
    $12_1 = HEAPF32[$5_1 + 20 >> 2];
    $19_1 = HEAPF32[$5_1 + 36 >> 2];
    HEAPF32[$4_1 + 92 >> 2] = Math_fround($20 + Math_fround($8_1 * $12_1)) + Math_fround($7_1 * $19_1);
    $6_1 = Math_fround($6_1 * $10);
    $10 = HEAPF32[$5_1 + 16 >> 2];
    $21 = HEAPF32[$5_1 + 32 >> 2];
    HEAPF32[$4_1 + 88 >> 2] = Math_fround($6_1 + Math_fround($8_1 * $10)) + Math_fround($7_1 * $21);
    $22_1 = HEAPF32[$5_1 >> 2];
    $23_1 = HEAPF32[$5_1 + 4 >> 2];
    $6_1 = HEAPF32[$5_1 + 8 >> 2];
    HEAP32[$4_1 + 460 >> 2] = 0;
    $20 = $6_1;
    $6_1 = Math_fround(HEAPF32[$1_1 + 48 >> 2] - $15_1);
    $8_1 = Math_fround(HEAPF32[$1_1 + 52 >> 2] - $13_1);
    $7_1 = Math_fround(HEAPF32[$1_1 + 56 >> 2] - $16_1);
    HEAPF32[$4_1 + 456 >> 2] = Math_fround(Math_fround($20 * $6_1) + Math_fround($14 * $8_1)) + Math_fround($18_1 * $7_1);
    HEAPF32[$4_1 + 452 >> 2] = Math_fround(Math_fround($6_1 * $23_1) + Math_fround($8_1 * $12_1)) + Math_fround($7_1 * $19_1);
    HEAPF32[$4_1 + 448 >> 2] = Math_fround(Math_fround($6_1 * $22_1) + Math_fround($8_1 * $10)) + Math_fround($7_1 * $21);
    $865(HEAP32[$17_1 >> 2], $4_1 + 88 | 0, $4_1 + 448 | 0, $4_1 + 40 | 0);
    break label$1;
   }
   $0 = HEAP32[$9_1 + 20 >> 2];
   if (($0 | 0) < 1) {
    break label$1
   }
   $1_1 = $0 + -1 | 0;
   $3_1 = 64;
   $2_1 = 0;
   while (1) {
    $0 = HEAP32[$9_1 + 28 >> 2] + $3_1 | 0;
    $9_1 = HEAP32[$0 >> 2];
    $33_1 = HEAPF32[$5_1 + 52 >> 2];
    $28_1 = HEAPF32[$5_1 + 56 >> 2];
    $18_1 = HEAPF32[$0 + -16 >> 2];
    $19_1 = HEAPF32[$0 + -12 >> 2];
    $21 = HEAPF32[$0 + -8 >> 2];
    $6_1 = HEAPF32[$5_1 + 20 >> 2];
    $8_1 = HEAPF32[$5_1 + 24 >> 2];
    $22_1 = HEAPF32[$0 + -64 >> 2];
    $23_1 = HEAPF32[$0 + -48 >> 2];
    $27_1 = HEAPF32[$0 + -32 >> 2];
    $24_1 = HEAPF32[$0 + -60 >> 2];
    $25 = HEAPF32[$0 + -44 >> 2];
    $26_1 = HEAPF32[$0 + -28 >> 2];
    $29_1 = HEAPF32[$0 + -56 >> 2];
    $7_1 = HEAPF32[$5_1 + 36 >> 2];
    $30 = HEAPF32[$0 + -40 >> 2];
    $10 = HEAPF32[$5_1 + 40 >> 2];
    $31_1 = HEAPF32[$0 + -24 >> 2];
    $34 = HEAPF32[$5_1 + 48 >> 2];
    $12_1 = HEAPF32[$5_1 + 8 >> 2];
    $15_1 = HEAPF32[$5_1 >> 2];
    $13_1 = HEAPF32[$5_1 + 4 >> 2];
    $14 = HEAPF32[$5_1 + 16 >> 2];
    $16_1 = HEAPF32[$5_1 + 32 >> 2];
    HEAP32[$4_1 + 148 >> 2] = 0;
    HEAP32[$4_1 + 132 >> 2] = 0;
    HEAP32[$4_1 + 116 >> 2] = 0;
    HEAP32[$4_1 + 100 >> 2] = 0;
    HEAPF32[$4_1 + 128 >> 2] = Math_fround(Math_fround($29_1 * $16_1) + Math_fround($30 * $7_1)) + Math_fround($31_1 * $10);
    HEAPF32[$4_1 + 124 >> 2] = Math_fround(Math_fround($24_1 * $16_1) + Math_fround($25 * $7_1)) + Math_fround($26_1 * $10);
    HEAPF32[$4_1 + 120 >> 2] = Math_fround(Math_fround($22_1 * $16_1) + Math_fround($23_1 * $7_1)) + Math_fround($27_1 * $10);
    HEAPF32[$4_1 + 112 >> 2] = Math_fround(Math_fround($29_1 * $14) + Math_fround($30 * $6_1)) + Math_fround($31_1 * $8_1);
    HEAPF32[$4_1 + 108 >> 2] = Math_fround(Math_fround($24_1 * $14) + Math_fround($25 * $6_1)) + Math_fround($26_1 * $8_1);
    HEAPF32[$4_1 + 104 >> 2] = Math_fround(Math_fround($22_1 * $14) + Math_fround($23_1 * $6_1)) + Math_fround($27_1 * $8_1);
    HEAPF32[$4_1 + 96 >> 2] = Math_fround(Math_fround($15_1 * $29_1) + Math_fround($13_1 * $30)) + Math_fround($12_1 * $31_1);
    HEAPF32[$4_1 + 92 >> 2] = Math_fround(Math_fround($15_1 * $24_1) + Math_fround($13_1 * $25)) + Math_fround($12_1 * $26_1);
    HEAPF32[$4_1 + 88 >> 2] = Math_fround(Math_fround($22_1 * $15_1) + Math_fround($23_1 * $13_1)) + Math_fround($27_1 * $12_1);
    HEAPF32[$4_1 + 144 >> 2] = $28_1 + Math_fround(Math_fround(Math_fround($16_1 * $18_1) + Math_fround($7_1 * $19_1)) + Math_fround($10 * $21));
    HEAPF32[$4_1 + 140 >> 2] = $33_1 + Math_fround(Math_fround(Math_fround($14 * $18_1) + Math_fround($6_1 * $19_1)) + Math_fround($8_1 * $21));
    HEAPF32[$4_1 + 136 >> 2] = $34 + Math_fround(Math_fround(Math_fround($15_1 * $18_1) + Math_fround($13_1 * $19_1)) + Math_fround($12_1 * $21));
    HEAP32[$4_1 + 700 >> 2] = $2_1;
    HEAP32[$4_1 + 696 >> 2] = -1;
    HEAP32[$4_1 + 688 >> 2] = HEAP32[$4_1 + 44 >> 2];
    HEAP32[$4_1 + 684 >> 2] = $9_1;
    HEAP32[$4_1 + 680 >> 2] = 0;
    HEAP32[$4_1 + 692 >> 2] = $4_1 + 88;
    HEAP32[$4_1 + 452 >> 2] = 1065353216;
    HEAP32[$4_1 + 464 >> 2] = -1;
    HEAP32[$4_1 + 468 >> 2] = 0;
    HEAP32[$4_1 + 456 >> 2] = 0;
    HEAP32[$4_1 + 460 >> 2] = 1;
    HEAP32[$4_1 + 476 >> 2] = $2_1;
    HEAP32[$4_1 + 448 >> 2] = 19568;
    $0 = HEAP32[$4_1 + 64 >> 2];
    HEAP32[$4_1 + 472 >> 2] = $0;
    HEAP32[$4_1 + 452 >> 2] = HEAP32[$0 + 4 >> 2];
    HEAP32[$4_1 + 468 >> 2] = HEAP32[$0 + 20 >> 2];
    $864(HEAP32[$4_1 + 56 >> 2], HEAP32[$4_1 + 60 >> 2], $4_1 + 680 | 0, $4_1 + 448 | 0);
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $2_1 = $2_1 + 1 | 0;
    $3_1 = $3_1 + 80 | 0;
    $5_1 = HEAP32[$4_1 + 52 >> 2];
    $9_1 = HEAP32[$4_1 + 48 >> 2];
    continue;
   };
  }
  global$0 = $4_1 + 704 | 0;
 }
 
 function $865($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20 = 0, $21 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24_1 = Math_fround(0), $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = 0, $31_1 = 0;
  $4_1 = global$0 - 544 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $5_1 = HEAPF32[$1_1 + 8 >> 2];
   $8_1 = HEAPF32[$2_1 + 8 >> 2];
   $10 = HEAPF32[$1_1 >> 2];
   $6_1 = HEAPF32[$2_1 >> 2];
   $11 = HEAPF32[$1_1 + 4 >> 2];
   $7_1 = HEAPF32[$2_1 + 4 >> 2];
   HEAP32[$4_1 + 32 >> 2] = $0;
   $6_1 = Math_fround($6_1 - $10);
   $7_1 = Math_fround($7_1 - $11);
   $5_1 = Math_fround($8_1 - $5_1);
   $8_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1)) + Math_fround($5_1 * $5_1)))));
   $17_1 = $5_1;
   $5_1 = Math_fround($5_1 * $8_1);
   $18_1 = $6_1;
   $6_1 = Math_fround($6_1 * $8_1);
   $21 = $7_1;
   $7_1 = Math_fround($7_1 * $8_1);
   $21 = Math_fround(Math_fround($17_1 * $5_1) + Math_fround(Math_fround($18_1 * $6_1) + Math_fround($21 * $7_1)));
   $5_1 = $5_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $5_1);
   $0 = $5_1 < Math_fround(0.0);
   $25 = ($0 << 4) + $4_1 | 8;
   $7_1 = $7_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $7_1);
   $2_1 = $7_1 < Math_fround(0.0);
   $26_1 = ($2_1 << 4) + $4_1 | 4;
   $27_1 = (($0 ^ 1) << 4) + $4_1 | 8;
   $28_1 = (($2_1 ^ 1) << 4) + $4_1 | 4;
   $6_1 = $6_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $6_1);
   $0 = $6_1 < Math_fround(0.0);
   $29_1 = ($0 << 4) + $4_1 | 0;
   $30 = (($0 ^ 1) << 4) + $4_1 | 0;
   $22_1 = $4_1 + 16 | 0;
   $16_1 = 126;
   $12_1 = 128;
   $15_1 = $4_1 + 32 | 0;
   $13_1 = 128;
   $20 = 1;
   while (1) {
    $0 = $20 + -1 | 0;
    $23_1 = $0 << 2;
    $14 = HEAP32[$23_1 + $15_1 >> 2];
    $2_1 = HEAP32[$14 + 20 >> 2];
    HEAP32[$22_1 >> 2] = HEAP32[$14 + 16 >> 2];
    HEAP32[$22_1 + 4 >> 2] = $2_1;
    $9_1 = $14 + 24 | 0;
    $31_1 = HEAP32[$9_1 + 4 >> 2];
    $2_1 = $22_1 + 8 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $31_1;
    $2_1 = HEAP32[$14 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $2_1;
    $2_1 = $14 + 8 | 0;
    $9_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$4_1 + 8 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 12 >> 2] = $9_1;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $8_1 = Math_fround($7_1 * Math_fround(HEAPF32[$26_1 >> 2] - $11));
            $17_1 = Math_fround($6_1 * Math_fround(HEAPF32[$30 >> 2] - $10));
            label$11 : {
             if ($8_1 > $17_1) {
              break label$11
             }
             $10 = Math_fround($6_1 * Math_fround(HEAPF32[$29_1 >> 2] - $10));
             $11 = Math_fround($7_1 * Math_fround(HEAPF32[$28_1 >> 2] - $11));
             if ($10 > $11) {
              break label$11
             }
             $24_1 = HEAPF32[$1_1 + 8 >> 2];
             $18_1 = Math_fround($5_1 * Math_fround(HEAPF32[$25 >> 2] - $24_1));
             $11 = $11 < $17_1 ? $11 : $17_1;
             if ($18_1 > $11) {
              break label$11
             }
             $10 = $8_1 > $10 ? $8_1 : $10;
             $8_1 = Math_fround($5_1 * Math_fround(HEAPF32[$27_1 >> 2] - $24_1));
             if ($10 > $8_1 | ($18_1 > $10 ? $18_1 : $10) < $21 ^ 1 | ($8_1 < $11 ? $8_1 : $11) > Math_fround(0.0) ^ 1) {
              break label$11
             }
             if (HEAP32[$14 + 40 >> 2]) {
              if (($0 | 0) <= ($16_1 | 0)) {
               $2_1 = $15_1;
               $9_1 = $13_1;
               break label$4;
              }
              $9_1 = $13_1 << 1;
              if (($13_1 | 0) >= ($9_1 | 0)) {
               $2_1 = $15_1;
               break label$5;
              }
              if (($12_1 | 0) >= ($9_1 | 0)) {
               $2_1 = $15_1;
               break label$6;
              }
              if (!$13_1) {
               $2_1 = 0;
               break label$10;
              }
              $2_1 = $79($13_1 << 3);
              if (($13_1 | 0) < 1) {
               break label$10
              }
              $0 = $2_1;
              $16_1 = $15_1;
              $12_1 = $13_1;
              while (1) {
               HEAP32[$0 >> 2] = HEAP32[$16_1 >> 2];
               $0 = $0 + 4 | 0;
               $16_1 = $16_1 + 4 | 0;
               $12_1 = $12_1 + -1 | 0;
               if ($12_1) {
                continue
               }
               break;
              };
              if (!$19_1) {
               break label$8
              }
              break label$9;
             }
             FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $14);
            }
            $2_1 = $15_1;
            $9_1 = $13_1;
            break label$3;
           }
           $0 = $19_1;
           $19_1 = 1;
           $12_1 = $19_1;
           if (!$0) {
            break label$7
           }
           $12_1 = $9_1;
           if (!$15_1) {
            break label$6
           }
          }
          $80($15_1);
         }
         $12_1 = 1;
        }
        $19_1 = $12_1;
        $12_1 = $9_1;
       }
       $0 = $13_1 << 2;
       $17($0 + $2_1 | 0, 0, $0);
      }
      $16_1 = $9_1 + -2 | 0;
     }
     HEAP32[$2_1 + $23_1 >> 2] = HEAP32[$14 + 36 >> 2];
     HEAP32[($20 << 2) + $2_1 >> 2] = HEAP32[$14 + 40 >> 2];
     $0 = $20 + 1 | 0;
    }
    if ($0) {
     $11 = HEAPF32[$1_1 + 4 >> 2];
     $10 = HEAPF32[$1_1 >> 2];
     $15_1 = $2_1;
     $13_1 = $9_1;
     $20 = $0;
     continue;
    }
    break;
   };
   if (!$19_1 | !$2_1) {
    break label$1
   }
   $80($2_1);
  }
  global$0 = $4_1 + 544 | 0;
 }
 
 function $866($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[$8_1 + 24 >> 2] = -1;
  HEAP32[$8_1 + 28 >> 2] = -1;
  HEAP32[$8_1 + 20 >> 2] = $5_1;
  HEAP32[$8_1 + 16 >> 2] = $3_1;
  HEAP32[$8_1 + 12 >> 2] = $4_1;
  HEAP32[$8_1 + 8 >> 2] = 0;
  $867($0, $1_1, $2_1, $8_1 + 8 | 0, $6_1, $7_1);
  global$0 = $8_1 + 32 | 0;
 }
 
 function $867($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = 0, $30 = Math_fround(0), $31_1 = Math_fround(0), $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = 0, $35 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = 0, $38 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47 = 0, $48_1 = 0, $49_1 = 0, $50_1 = Math_fround(0);
  $6_1 = global$0 - 688 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[$3_1 + 12 >> 2];
  $29_1 = HEAP32[$3_1 + 4 >> 2];
  $26_1 = HEAP32[$29_1 + 4 >> 2];
  label$1 : {
   if (($26_1 | 0) <= 19) {
    HEAPF32[$6_1 + 660 >> 2] = $5_1;
    HEAP32[$6_1 + 656 >> 2] = 0;
    HEAP32[$6_1 + 488 >> 2] = 14008;
    HEAP32[$6_1 + 652 >> 2] = HEAP32[$4_1 + 4 >> 2];
    HEAP8[$6_1 + 460 | 0] = 0;
    HEAP32[$6_1 + 436 >> 2] = 953267991;
    HEAP32[$6_1 + 64 >> 2] = 12816;
    $0 = $844($6_1 + 664 | 0, $0, $29_1, $6_1 + 128 | 0, $6_1 - -64 | 0);
    label$3 : {
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1_1, $2_1, $7_1, $7_1, $6_1 + 488 | 0)) {
      break label$3
     }
     $5_1 = HEAPF32[$6_1 + 620 >> 2];
     $8_1 = HEAPF32[$6_1 + 624 >> 2];
     $9_1 = HEAPF32[$6_1 + 628 >> 2];
     $10 = Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($8_1 * $8_1)) + Math_fround($9_1 * $9_1));
     if (!($10 > Math_fround(9.999999747378752e-05))) {
      break label$3
     }
     $11 = HEAPF32[$6_1 + 652 >> 2];
     if (!($11 < HEAPF32[$4_1 + 4 >> 2])) {
      break label$3
     }
     $12_1 = $9_1;
     $9_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($10)));
     HEAPF32[$6_1 + 628 >> 2] = $12_1 * $9_1;
     HEAPF32[$6_1 + 624 >> 2] = $8_1 * $9_1;
     HEAPF32[$6_1 + 620 >> 2] = $5_1 * $9_1;
     $0 = $6_1 + 644 | 0;
     $1_1 = HEAP32[$0 + 4 >> 2];
     $2_1 = $6_1 + 112 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $1_1;
     $0 = $6_1 + 620 | 0;
     $1_1 = $0 + 8 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $7_1 = $6_1 + 96 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $2_1;
     $1_1 = HEAP32[$6_1 + 640 >> 2];
     HEAP32[$6_1 + 104 >> 2] = HEAP32[$6_1 + 636 >> 2];
     HEAP32[$6_1 + 108 >> 2] = $1_1;
     HEAPF32[$6_1 + 120 >> 2] = $11;
     $1_1 = HEAP32[$0 + 4 >> 2];
     HEAP32[$6_1 + 88 >> 2] = HEAP32[$0 >> 2];
     HEAP32[$6_1 + 92 >> 2] = $1_1;
     HEAP32[$6_1 + 84 >> 2] = 0;
     HEAP32[$6_1 + 80 >> 2] = HEAP32[$3_1 + 8 >> 2];
     Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $6_1 + 80 | 0, 1));
    }
    break label$1;
   }
   $34 = $26_1 + -21 | 0;
   if ($34 >>> 0 <= 8) {
    label$5 : {
     if ($34 >>> 0 > 7) {
      break label$5
     }
     label$6 : {
      switch ($34 - 1 | 0) {
      default:
       $8_1 = HEAPF32[$7_1 + 20 >> 2];
       $9_1 = HEAPF32[$7_1 + 36 >> 2];
       $10 = HEAPF32[$7_1 + 24 >> 2];
       $19_1 = HEAPF32[$7_1 + 52 >> 2];
       $14 = HEAPF32[$7_1 + 56 >> 2];
       $11 = HEAPF32[$7_1 + 40 >> 2];
       $13_1 = HEAPF32[$7_1 + 32 >> 2];
       $17_1 = HEAPF32[$7_1 + 16 >> 2];
       $18_1 = HEAPF32[$7_1 >> 2];
       $16_1 = HEAPF32[$7_1 + 4 >> 2];
       $15_1 = HEAPF32[$7_1 + 48 >> 2];
       $12_1 = HEAPF32[$7_1 + 8 >> 2];
       HEAP32[$6_1 + 92 >> 2] = 0;
       $19_1 = Math_fround(-$19_1);
       $24_1 = Math_fround(Math_fround(Math_fround($10 * $19_1) - Math_fround($12_1 * $15_1)) - Math_fround($11 * $14));
       $20 = HEAPF32[$1_1 + 48 >> 2];
       $21 = HEAPF32[$1_1 + 52 >> 2];
       $22_1 = HEAPF32[$1_1 + 56 >> 2];
       HEAPF32[$6_1 + 88 >> 2] = $24_1 + Math_fround(Math_fround(Math_fround($12_1 * $20) + Math_fround($10 * $21)) + Math_fround($11 * $22_1));
       $23_1 = Math_fround(Math_fround(Math_fround($8_1 * $19_1) - Math_fround($16_1 * $15_1)) - Math_fround($9_1 * $14));
       HEAPF32[$6_1 + 84 >> 2] = $23_1 + Math_fround(Math_fround(Math_fround($16_1 * $20) + Math_fround($8_1 * $21)) + Math_fround($9_1 * $22_1));
       $27_1 = Math_fround(Math_fround(Math_fround($17_1 * $19_1) - Math_fround($18_1 * $15_1)) - Math_fround($13_1 * $14));
       HEAPF32[$6_1 + 80 >> 2] = $27_1 + Math_fround(Math_fround(Math_fround($18_1 * $20) + Math_fround($17_1 * $21)) + Math_fround($13_1 * $22_1));
       HEAP32[$6_1 + 676 >> 2] = 0;
       $14 = HEAPF32[$2_1 + 48 >> 2];
       $15_1 = HEAPF32[$2_1 + 52 >> 2];
       $19_1 = HEAPF32[$2_1 + 56 >> 2];
       HEAPF32[$6_1 + 672 >> 2] = $24_1 + Math_fround(Math_fround(Math_fround($12_1 * $14) + Math_fround($10 * $15_1)) + Math_fround($11 * $19_1));
       HEAPF32[$6_1 + 668 >> 2] = $23_1 + Math_fround(Math_fround(Math_fround($16_1 * $14) + Math_fround($8_1 * $15_1)) + Math_fround($9_1 * $19_1));
       HEAPF32[$6_1 + 664 >> 2] = $27_1 + Math_fround(Math_fround(Math_fround($18_1 * $14) + Math_fround($17_1 * $15_1)) + Math_fround($13_1 * $19_1));
       HEAP32[$6_1 + 516 >> 2] = 0;
       $14 = HEAPF32[$2_1 + 8 >> 2];
       $15_1 = HEAPF32[$2_1 + 24 >> 2];
       $19_1 = HEAPF32[$2_1 + 40 >> 2];
       HEAPF32[$6_1 + 528 >> 2] = Math_fround(Math_fround($12_1 * $14) + Math_fround($10 * $15_1)) + Math_fround($11 * $19_1);
       $20 = HEAPF32[$2_1 + 4 >> 2];
       $21 = HEAPF32[$2_1 + 20 >> 2];
       $22_1 = HEAPF32[$2_1 + 36 >> 2];
       HEAPF32[$6_1 + 524 >> 2] = Math_fround(Math_fround($12_1 * $20) + Math_fround($10 * $21)) + Math_fround($11 * $22_1);
       HEAPF32[$6_1 + 512 >> 2] = Math_fround(Math_fround($16_1 * $14) + Math_fround($8_1 * $15_1)) + Math_fround($9_1 * $19_1);
       HEAPF32[$6_1 + 508 >> 2] = Math_fround(Math_fround($16_1 * $20) + Math_fround($8_1 * $21)) + Math_fround($9_1 * $22_1);
       HEAP32[$6_1 + 500 >> 2] = 0;
       $27_1 = $12_1;
       $12_1 = HEAPF32[$2_1 >> 2];
       $25 = $10;
       $10 = HEAPF32[$2_1 + 16 >> 2];
       $28_1 = $11;
       $11 = HEAPF32[$2_1 + 32 >> 2];
       HEAPF32[$6_1 + 520 >> 2] = Math_fround(Math_fround($27_1 * $12_1) + Math_fround($25 * $10)) + Math_fround($28_1 * $11);
       HEAPF32[$6_1 + 504 >> 2] = Math_fround(Math_fround($16_1 * $12_1) + Math_fround($8_1 * $10)) + Math_fround($9_1 * $11);
       HEAPF32[$6_1 + 496 >> 2] = Math_fround(Math_fround($18_1 * $14) + Math_fround($17_1 * $15_1)) + Math_fround($13_1 * $19_1);
       HEAPF32[$6_1 + 492 >> 2] = Math_fround(Math_fround($18_1 * $20) + Math_fround($17_1 * $21)) + Math_fround($13_1 * $22_1);
       HEAPF32[$6_1 + 488 >> 2] = Math_fround(Math_fround($18_1 * $12_1) + Math_fround($17_1 * $10)) + Math_fround($13_1 * $11);
       HEAP32[$6_1 + 548 >> 2] = 0;
       $26_1 = $6_1 + 540 | 0;
       HEAP32[$26_1 >> 2] = 0;
       HEAP32[$26_1 + 4 >> 2] = 0;
       $26_1 = $6_1 + 532 | 0;
       HEAP32[$26_1 >> 2] = 0;
       HEAP32[$26_1 + 4 >> 2] = 0;
       $3_1 = HEAP32[$3_1 + 8 >> 2];
       $851($6_1 + 128 | 0, $0, $1_1, $2_1, $7_1, Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$29_1 >> 2] + 48 >> 2]]($29_1)));
       HEAP32[$6_1 + 348 >> 2] = $29_1;
       HEAP32[$6_1 + 344 >> 2] = $3_1;
       HEAP32[$6_1 + 128 >> 2] = 19740;
       HEAPF32[$6_1 + 336 >> 2] = $5_1;
       HEAP32[$6_1 + 340 >> 2] = $4_1;
       HEAP32[$6_1 + 328 >> 2] = HEAP32[$4_1 + 4 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $6_1 + 488 | 0, $6_1 - -64 | 0, $6_1 + 48 | 0);
       $376($29_1, $6_1 + 128 | 0, $6_1 + 80 | 0, $6_1 + 664 | 0, $6_1 - -64 | 0, $6_1 + 48 | 0);
       break label$1;
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
       break label$5;
      case 6:
       break label$6;
      };
     }
     HEAPF32[$6_1 + 300 >> 2] = $5_1;
     HEAP32[$6_1 + 296 >> 2] = 0;
     HEAP32[$6_1 + 128 >> 2] = 14008;
     HEAP32[$6_1 + 292 >> 2] = HEAP32[$4_1 + 4 >> 2];
     $0 = $845($6_1 + 80 | 0, $0, $29_1);
     label$8 : {
      if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1_1, $2_1, $7_1, $7_1, $6_1 + 128 | 0)) {
       break label$8
      }
      $5_1 = HEAPF32[$6_1 + 260 >> 2];
      $8_1 = HEAPF32[$6_1 + 264 >> 2];
      $9_1 = HEAPF32[$6_1 + 268 >> 2];
      $10 = Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($8_1 * $8_1)) + Math_fround($9_1 * $9_1));
      if (!($10 > Math_fround(9.999999747378752e-05))) {
       break label$8
      }
      $11 = HEAPF32[$6_1 + 292 >> 2];
      if (!($11 < HEAPF32[$4_1 + 4 >> 2])) {
       break label$8
      }
      $12_1 = $9_1;
      $9_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($10)));
      HEAPF32[$6_1 + 268 >> 2] = $12_1 * $9_1;
      HEAPF32[$6_1 + 264 >> 2] = $8_1 * $9_1;
      HEAPF32[$6_1 + 260 >> 2] = $5_1 * $9_1;
      $0 = $6_1 + 284 | 0;
      $1_1 = HEAP32[$0 + 4 >> 2];
      $2_1 = $6_1 + 520 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $1_1;
      $0 = $6_1 + 260 | 0;
      $1_1 = $0 + 8 | 0;
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      $7_1 = $6_1 + 504 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $2_1;
      $1_1 = HEAP32[$6_1 + 280 >> 2];
      HEAP32[$6_1 + 512 >> 2] = HEAP32[$6_1 + 276 >> 2];
      HEAP32[$6_1 + 516 >> 2] = $1_1;
      HEAPF32[$6_1 + 528 >> 2] = $11;
      $1_1 = HEAP32[$0 + 4 >> 2];
      HEAP32[$6_1 + 496 >> 2] = HEAP32[$0 >> 2];
      HEAP32[$6_1 + 500 >> 2] = $1_1;
      HEAP32[$6_1 + 492 >> 2] = 0;
      HEAP32[$6_1 + 488 >> 2] = HEAP32[$3_1 + 8 >> 2];
      Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $6_1 + 488 | 0, 1));
     }
     break label$1;
    }
    $19_1 = HEAPF32[$2_1 + 52 >> 2];
    $20 = HEAPF32[$2_1 + 56 >> 2];
    $50_1 = HEAPF32[$7_1 + 52 >> 2];
    $9_1 = HEAPF32[$7_1 + 56 >> 2];
    $21 = HEAPF32[$1_1 + 52 >> 2];
    $22_1 = HEAPF32[$1_1 + 56 >> 2];
    $11 = HEAPF32[$7_1 + 20 >> 2];
    $13_1 = HEAPF32[$7_1 + 36 >> 2];
    $16_1 = HEAPF32[$7_1 + 24 >> 2];
    $12_1 = HEAPF32[$7_1 + 40 >> 2];
    $24_1 = HEAPF32[$2_1 + 48 >> 2];
    $23_1 = HEAPF32[$7_1 + 48 >> 2];
    $27_1 = HEAPF32[$1_1 + 48 >> 2];
    $10 = HEAPF32[$7_1 + 32 >> 2];
    $17_1 = HEAPF32[$7_1 >> 2];
    $18_1 = HEAPF32[$7_1 + 16 >> 2];
    $14 = HEAPF32[$7_1 + 4 >> 2];
    $15_1 = HEAPF32[$7_1 + 8 >> 2];
    HEAP32[$6_1 + 516 >> 2] = 0;
    $8_1 = HEAPF32[$2_1 + 8 >> 2];
    $25 = HEAPF32[$2_1 + 24 >> 2];
    $28_1 = HEAPF32[$2_1 + 40 >> 2];
    HEAPF32[$6_1 + 528 >> 2] = Math_fround(Math_fround($15_1 * $8_1) + Math_fround($16_1 * $25)) + Math_fround($12_1 * $28_1);
    $31_1 = HEAPF32[$2_1 + 4 >> 2];
    $32 = HEAPF32[$2_1 + 20 >> 2];
    $33_1 = HEAPF32[$2_1 + 36 >> 2];
    HEAPF32[$6_1 + 524 >> 2] = Math_fround(Math_fround($15_1 * $31_1) + Math_fround($16_1 * $32)) + Math_fround($12_1 * $33_1);
    HEAPF32[$6_1 + 512 >> 2] = Math_fround(Math_fround($14 * $8_1) + Math_fround($11 * $25)) + Math_fround($13_1 * $28_1);
    HEAPF32[$6_1 + 508 >> 2] = Math_fround(Math_fround($14 * $31_1) + Math_fround($11 * $32)) + Math_fround($13_1 * $33_1);
    HEAP32[$6_1 + 500 >> 2] = 0;
    $30 = HEAPF32[$2_1 >> 2];
    $35 = HEAPF32[$2_1 + 16 >> 2];
    $36_1 = HEAPF32[$2_1 + 32 >> 2];
    HEAPF32[$6_1 + 520 >> 2] = Math_fround(Math_fround($15_1 * $30) + Math_fround($16_1 * $35)) + Math_fround($12_1 * $36_1);
    HEAPF32[$6_1 + 504 >> 2] = Math_fround(Math_fround($14 * $30) + Math_fround($11 * $35)) + Math_fround($13_1 * $36_1);
    HEAPF32[$6_1 + 496 >> 2] = Math_fround(Math_fround($17_1 * $8_1) + Math_fround($18_1 * $25)) + Math_fround($10 * $28_1);
    HEAPF32[$6_1 + 492 >> 2] = Math_fround(Math_fround($17_1 * $31_1) + Math_fround($18_1 * $32)) + Math_fround($10 * $33_1);
    HEAPF32[$6_1 + 488 >> 2] = Math_fround(Math_fround($17_1 * $30) + Math_fround($18_1 * $35)) + Math_fround($10 * $36_1);
    HEAP32[$6_1 + 548 >> 2] = 0;
    $26_1 = $6_1 + 540 | 0;
    HEAP32[$26_1 >> 2] = 0;
    HEAP32[$26_1 + 4 >> 2] = 0;
    $26_1 = $6_1 + 532 | 0;
    HEAP32[$26_1 >> 2] = 0;
    HEAP32[$26_1 + 4 >> 2] = 0;
    $3_1 = HEAP32[$3_1 + 8 >> 2];
    $851($6_1 + 128 | 0, $0, $1_1, $2_1, $7_1, Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$29_1 >> 2] + 48 >> 2]]($29_1)));
    HEAP32[$6_1 + 348 >> 2] = $29_1;
    HEAP32[$6_1 + 344 >> 2] = $3_1;
    HEAP32[$6_1 + 128 >> 2] = 19952;
    HEAPF32[$6_1 + 336 >> 2] = $5_1;
    HEAP32[$6_1 + 340 >> 2] = $4_1;
    HEAP32[$6_1 + 328 >> 2] = HEAP32[$4_1 + 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $6_1 + 488 | 0, $6_1 + 80 | 0, $6_1 + 664 | 0);
    HEAP32[$6_1 + 76 >> 2] = 0;
    $25 = Math_fround(-$50_1);
    $28_1 = Math_fround(Math_fround(Math_fround($16_1 * $25) - Math_fround($15_1 * $23_1)) - Math_fround($12_1 * $9_1));
    $5_1 = Math_fround($28_1 + Math_fround(Math_fround(Math_fround($15_1 * $27_1) + Math_fround($16_1 * $21)) + Math_fround($12_1 * $22_1)));
    HEAPF32[$6_1 + 72 >> 2] = $5_1;
    $31_1 = Math_fround(Math_fround(Math_fround($11 * $25) - Math_fround($14 * $23_1)) - Math_fround($13_1 * $9_1));
    $8_1 = Math_fround($31_1 + Math_fround(Math_fround(Math_fround($14 * $27_1) + Math_fround($11 * $21)) + Math_fround($13_1 * $22_1)));
    HEAPF32[$6_1 + 68 >> 2] = $8_1;
    $23_1 = Math_fround(Math_fround(Math_fround($18_1 * $25) - Math_fround($17_1 * $23_1)) - Math_fround($10 * $9_1));
    $9_1 = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($17_1 * $27_1) + Math_fround($18_1 * $21)) + Math_fround($10 * $22_1)));
    HEAPF32[$6_1 + 64 >> 2] = $9_1;
    $10 = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($17_1 * $24_1) + Math_fround($18_1 * $19_1)) + Math_fround($10 * $20)));
    $17_1 = $9_1;
    if (!!($10 < $9_1)) {
     HEAPF32[$6_1 + 64 >> 2] = $10;
     $17_1 = $10;
    }
    $18_1 = $8_1;
    $11 = Math_fround($31_1 + Math_fround(Math_fround(Math_fround($14 * $24_1) + Math_fround($11 * $19_1)) + Math_fround($13_1 * $20)));
    if (!!($11 < $8_1)) {
     HEAPF32[$6_1 + 68 >> 2] = $11;
     $18_1 = $11;
    }
    $13_1 = Math_fround($28_1 + Math_fround(Math_fround(Math_fround($15_1 * $24_1) + Math_fround($16_1 * $19_1)) + Math_fround($12_1 * $20)));
    $16_1 = $5_1;
    if (!!($13_1 < $16_1)) {
     HEAPF32[$6_1 + 72 >> 2] = $13_1;
     $16_1 = $13_1;
    }
    HEAP32[$6_1 + 60 >> 2] = 0;
    HEAPF32[$6_1 + 56 >> 2] = $5_1;
    HEAPF32[$6_1 + 52 >> 2] = $8_1;
    HEAPF32[$6_1 + 48 >> 2] = $9_1;
    if (!!($9_1 < $10)) {
     HEAPF32[$6_1 + 48 >> 2] = $10;
     $9_1 = $10;
    }
    if (!!($8_1 < $11)) {
     HEAPF32[$6_1 + 52 >> 2] = $11;
     $8_1 = $11;
    }
    if (!!($5_1 < $13_1)) {
     HEAPF32[$6_1 + 56 >> 2] = $13_1;
     $5_1 = $13_1;
    }
    HEAPF32[$6_1 + 64 >> 2] = HEAPF32[$6_1 + 80 >> 2] + $17_1;
    HEAPF32[$6_1 + 68 >> 2] = HEAPF32[$6_1 + 84 >> 2] + $18_1;
    HEAPF32[$6_1 + 72 >> 2] = HEAPF32[$6_1 + 88 >> 2] + $16_1;
    HEAPF32[$6_1 + 48 >> 2] = HEAPF32[$6_1 + 664 >> 2] + $9_1;
    HEAPF32[$6_1 + 52 >> 2] = HEAPF32[$6_1 + 668 >> 2] + $8_1;
    HEAPF32[$6_1 + 56 >> 2] = HEAPF32[$6_1 + 672 >> 2] + $5_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$29_1 >> 2] + 64 >> 2]]($29_1, $6_1 + 128 | 0, $6_1 - -64 | 0, $6_1 + 48 | 0);
    break label$1;
   }
   if (($26_1 | 0) != 31) {
    break label$1
   }
   $613($6_1 + 40 | 0, 18949);
   $26_1 = $7_1 + 52 | 0;
   $30 = HEAPF32[$26_1 >> 2];
   $34 = $7_1 + 56 | 0;
   $14 = HEAPF32[$34 >> 2];
   $15_1 = HEAPF32[$1_1 + 52 >> 2];
   $19_1 = HEAPF32[$1_1 + 56 >> 2];
   $37_1 = $7_1 + 20 | 0;
   $8_1 = HEAPF32[$37_1 >> 2];
   $38 = $7_1 + 36 | 0;
   $9_1 = HEAPF32[$38 >> 2];
   $20 = HEAPF32[$1_1 + 20 >> 2];
   $21 = HEAPF32[$1_1 + 36 >> 2];
   $22_1 = HEAPF32[$1_1 + 24 >> 2];
   $39_1 = $7_1 + 24 | 0;
   $10 = HEAPF32[$39_1 >> 2];
   $24_1 = HEAPF32[$1_1 + 40 >> 2];
   $40_1 = $7_1 + 40 | 0;
   $11 = HEAPF32[$40_1 >> 2];
   $13_1 = HEAPF32[$7_1 + 32 >> 2];
   $17_1 = HEAPF32[$7_1 >> 2];
   $18_1 = HEAPF32[$7_1 + 16 >> 2];
   $23_1 = HEAPF32[$1_1 + 32 >> 2];
   $27_1 = HEAPF32[$1_1 >> 2];
   $25 = HEAPF32[$1_1 + 16 >> 2];
   $28_1 = HEAPF32[$7_1 + 48 >> 2];
   $31_1 = HEAPF32[$1_1 + 48 >> 2];
   $16_1 = HEAPF32[$7_1 + 4 >> 2];
   $32 = HEAPF32[$1_1 + 4 >> 2];
   $33_1 = HEAPF32[$1_1 + 8 >> 2];
   $12_1 = HEAPF32[$7_1 + 8 >> 2];
   $41_1 = $6_1 + 188 | 0;
   HEAP32[$41_1 >> 2] = 0;
   $42 = $6_1 + 172 | 0;
   HEAP32[$42 >> 2] = 0;
   $43_1 = $6_1 + 156 | 0;
   HEAP32[$43_1 >> 2] = 0;
   $44_1 = $6_1 + 168 | 0;
   HEAPF32[$44_1 >> 2] = Math_fround(Math_fround($12_1 * $33_1) + Math_fround($10 * $22_1)) + Math_fround($11 * $24_1);
   $45_1 = $6_1 + 164 | 0;
   HEAPF32[$45_1 >> 2] = Math_fround(Math_fround($12_1 * $32) + Math_fround($10 * $20)) + Math_fround($11 * $21);
   $46_1 = $6_1 + 152 | 0;
   HEAPF32[$46_1 >> 2] = Math_fround(Math_fround($16_1 * $33_1) + Math_fround($8_1 * $22_1)) + Math_fround($9_1 * $24_1);
   $47 = $6_1 + 148 | 0;
   HEAPF32[$47 >> 2] = Math_fround(Math_fround($16_1 * $32) + Math_fround($8_1 * $20)) + Math_fround($9_1 * $21);
   $48_1 = $6_1 + 184 | 0;
   $30 = Math_fround(-$30);
   HEAPF32[$48_1 >> 2] = Math_fround(Math_fround(Math_fround($10 * $30) - Math_fround($12_1 * $28_1)) - Math_fround($11 * $14)) + Math_fround(Math_fround(Math_fround($12_1 * $31_1) + Math_fround($10 * $15_1)) + Math_fround($11 * $19_1));
   $49_1 = $6_1 + 180 | 0;
   HEAPF32[$49_1 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $30) - Math_fround($16_1 * $28_1)) - Math_fround($9_1 * $14)) + Math_fround(Math_fround(Math_fround($16_1 * $31_1) + Math_fround($8_1 * $15_1)) + Math_fround($9_1 * $19_1));
   HEAP32[$6_1 + 140 >> 2] = 0;
   HEAPF32[$6_1 + 160 >> 2] = Math_fround(Math_fround($12_1 * $27_1) + Math_fround($10 * $25)) + Math_fround($11 * $23_1);
   HEAPF32[$6_1 + 144 >> 2] = Math_fround(Math_fround($16_1 * $27_1) + Math_fround($8_1 * $25)) + Math_fround($9_1 * $23_1);
   HEAPF32[$6_1 + 136 >> 2] = Math_fround(Math_fround($17_1 * $33_1) + Math_fround($18_1 * $22_1)) + Math_fround($13_1 * $24_1);
   HEAPF32[$6_1 + 176 >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $30) - Math_fround($17_1 * $28_1)) - Math_fround($13_1 * $14)) + Math_fround(Math_fround(Math_fround($17_1 * $31_1) + Math_fround($18_1 * $15_1)) + Math_fround($13_1 * $19_1));
   HEAPF32[$6_1 + 132 >> 2] = Math_fround(Math_fround($17_1 * $32) + Math_fround($18_1 * $20)) + Math_fround($13_1 * $21);
   HEAPF32[$6_1 + 128 >> 2] = Math_fround(Math_fround($17_1 * $27_1) + Math_fround($18_1 * $25)) + Math_fround($13_1 * $23_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $6_1 + 128 | 0, $6_1 - -64 | 0, $6_1 + 48 | 0);
   $30 = HEAPF32[$26_1 >> 2];
   $14 = HEAPF32[$34 >> 2];
   $15_1 = HEAPF32[$2_1 + 52 >> 2];
   $19_1 = HEAPF32[$2_1 + 56 >> 2];
   $8_1 = HEAPF32[$37_1 >> 2];
   $9_1 = HEAPF32[$38 >> 2];
   $20 = HEAPF32[$2_1 + 20 >> 2];
   $21 = HEAPF32[$2_1 + 36 >> 2];
   $22_1 = HEAPF32[$2_1 + 24 >> 2];
   $10 = HEAPF32[$39_1 >> 2];
   $24_1 = HEAPF32[$2_1 + 40 >> 2];
   $11 = HEAPF32[$40_1 >> 2];
   $13_1 = HEAPF32[$7_1 + 32 >> 2];
   $17_1 = HEAPF32[$7_1 >> 2];
   $18_1 = HEAPF32[$7_1 + 16 >> 2];
   $23_1 = HEAPF32[$2_1 + 32 >> 2];
   $27_1 = HEAPF32[$2_1 >> 2];
   $25 = HEAPF32[$2_1 + 16 >> 2];
   $28_1 = HEAPF32[$7_1 + 48 >> 2];
   $31_1 = HEAPF32[$2_1 + 48 >> 2];
   $16_1 = HEAPF32[$7_1 + 4 >> 2];
   $32 = HEAPF32[$2_1 + 4 >> 2];
   $33_1 = HEAPF32[$2_1 + 8 >> 2];
   $12_1 = HEAPF32[$7_1 + 8 >> 2];
   HEAP32[$41_1 >> 2] = 0;
   HEAP32[$42 >> 2] = 0;
   HEAP32[$43_1 >> 2] = 0;
   HEAPF32[$44_1 >> 2] = Math_fround(Math_fround($12_1 * $33_1) + Math_fround($10 * $22_1)) + Math_fround($11 * $24_1);
   HEAPF32[$45_1 >> 2] = Math_fround(Math_fround($12_1 * $32) + Math_fround($10 * $20)) + Math_fround($11 * $21);
   HEAPF32[$46_1 >> 2] = Math_fround(Math_fround($16_1 * $33_1) + Math_fround($8_1 * $22_1)) + Math_fround($9_1 * $24_1);
   HEAPF32[$47 >> 2] = Math_fround(Math_fround($16_1 * $32) + Math_fround($8_1 * $20)) + Math_fround($9_1 * $21);
   $30 = Math_fround(-$30);
   HEAPF32[$48_1 >> 2] = Math_fround(Math_fround(Math_fround($10 * $30) - Math_fround($12_1 * $28_1)) - Math_fround($11 * $14)) + Math_fround(Math_fround(Math_fround($12_1 * $31_1) + Math_fround($10 * $15_1)) + Math_fround($11 * $19_1));
   HEAPF32[$49_1 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $30) - Math_fround($16_1 * $28_1)) - Math_fround($9_1 * $14)) + Math_fround(Math_fround(Math_fround($16_1 * $31_1) + Math_fround($8_1 * $15_1)) + Math_fround($9_1 * $19_1));
   HEAP32[$6_1 + 140 >> 2] = 0;
   HEAPF32[$6_1 + 160 >> 2] = Math_fround(Math_fround($12_1 * $27_1) + Math_fround($10 * $25)) + Math_fround($11 * $23_1);
   HEAPF32[$6_1 + 144 >> 2] = Math_fround(Math_fround($16_1 * $27_1) + Math_fround($8_1 * $25)) + Math_fround($9_1 * $23_1);
   HEAPF32[$6_1 + 136 >> 2] = Math_fround(Math_fround($17_1 * $33_1) + Math_fround($18_1 * $22_1)) + Math_fround($13_1 * $24_1);
   HEAPF32[$6_1 + 176 >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $30) - Math_fround($17_1 * $28_1)) - Math_fround($13_1 * $14)) + Math_fround(Math_fround(Math_fround($17_1 * $31_1) + Math_fround($18_1 * $15_1)) + Math_fround($13_1 * $19_1));
   HEAPF32[$6_1 + 132 >> 2] = Math_fround(Math_fround($17_1 * $32) + Math_fround($18_1 * $20)) + Math_fround($13_1 * $21);
   HEAPF32[$6_1 + 128 >> 2] = Math_fround(Math_fround($17_1 * $27_1) + Math_fround($18_1 * $25)) + Math_fround($13_1 * $23_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $6_1 + 128 | 0, $6_1 + 24 | 0, $6_1 + 8 | 0);
   $8_1 = HEAPF32[$6_1 + 24 >> 2];
   if (!!($8_1 < HEAPF32[$6_1 + 64 >> 2])) {
    HEAPF32[$6_1 + 64 >> 2] = $8_1
   }
   $8_1 = HEAPF32[$6_1 + 28 >> 2];
   if (!!($8_1 < HEAPF32[$6_1 + 68 >> 2])) {
    HEAPF32[$6_1 + 68 >> 2] = $8_1
   }
   $8_1 = HEAPF32[$6_1 + 32 >> 2];
   if (!!($8_1 < HEAPF32[$6_1 + 72 >> 2])) {
    HEAPF32[$6_1 + 72 >> 2] = $8_1
   }
   $8_1 = HEAPF32[$6_1 + 36 >> 2];
   if (!!($8_1 < HEAPF32[$6_1 + 76 >> 2])) {
    HEAPF32[$6_1 + 76 >> 2] = $8_1
   }
   $8_1 = HEAPF32[$6_1 + 8 >> 2];
   if (!!(HEAPF32[$6_1 + 48 >> 2] < $8_1)) {
    HEAPF32[$6_1 + 48 >> 2] = $8_1
   }
   $8_1 = HEAPF32[$6_1 + 12 >> 2];
   if (!!(HEAPF32[$6_1 + 52 >> 2] < $8_1)) {
    HEAPF32[$6_1 + 52 >> 2] = $8_1
   }
   $8_1 = HEAPF32[$6_1 + 16 >> 2];
   if (!!(HEAPF32[$6_1 + 56 >> 2] < $8_1)) {
    HEAPF32[$6_1 + 56 >> 2] = $8_1
   }
   $8_1 = HEAPF32[$6_1 + 20 >> 2];
   if (!!(HEAPF32[$6_1 + 60 >> 2] < $8_1)) {
    HEAPF32[$6_1 + 60 >> 2] = $8_1
   }
   HEAP32[$6_1 + 520 >> 2] = $4_1;
   HEAP32[$6_1 + 516 >> 2] = $7_1;
   HEAPF32[$6_1 + 508 >> 2] = $5_1;
   HEAP32[$6_1 + 504 >> 2] = $2_1;
   HEAP32[$6_1 + 500 >> 2] = $1_1;
   HEAP32[$6_1 + 496 >> 2] = $0;
   HEAP32[$6_1 + 492 >> 2] = $3_1;
   HEAP32[$6_1 + 488 >> 2] = 20168;
   HEAP32[$6_1 + 512 >> 2] = $29_1;
   $0 = HEAP32[$29_1 + 68 >> 2];
   label$23 : {
    if (!$0) {
     if (HEAP32[$29_1 + 20 >> 2] < 1) {
      break label$23
     }
     $3_1 = 64;
     $1_1 = 1;
     while (1) {
      $0 = HEAP32[$29_1 + 28 >> 2] + $3_1 | 0;
      $2_1 = HEAP32[$0 >> 2];
      $5_1 = HEAPF32[$0 + -16 >> 2];
      $8_1 = HEAPF32[$0 + -12 >> 2];
      $9_1 = HEAPF32[$0 + -8 >> 2];
      $10 = HEAPF32[$0 + -64 >> 2];
      $11 = HEAPF32[$0 + -48 >> 2];
      $13_1 = HEAPF32[$0 + -32 >> 2];
      $17_1 = HEAPF32[$0 + -60 >> 2];
      $18_1 = HEAPF32[$0 + -44 >> 2];
      $16_1 = HEAPF32[$0 + -28 >> 2];
      $12_1 = HEAPF32[$0 + -56 >> 2];
      $14 = HEAPF32[$0 + -40 >> 2];
      $15_1 = HEAPF32[$0 + -24 >> 2];
      HEAP32[$6_1 + 188 >> 2] = 0;
      HEAP32[$6_1 + 172 >> 2] = 0;
      HEAP32[$6_1 + 156 >> 2] = 0;
      HEAP32[$6_1 + 140 >> 2] = 0;
      $19_1 = HEAPF32[$7_1 + 32 >> 2];
      $20 = HEAPF32[$7_1 + 36 >> 2];
      $21 = HEAPF32[$7_1 + 40 >> 2];
      HEAPF32[$6_1 + 168 >> 2] = Math_fround(Math_fround($12_1 * $19_1) + Math_fround($14 * $20)) + Math_fround($15_1 * $21);
      HEAPF32[$6_1 + 164 >> 2] = Math_fround(Math_fround($17_1 * $19_1) + Math_fround($18_1 * $20)) + Math_fround($16_1 * $21);
      HEAPF32[$6_1 + 160 >> 2] = Math_fround(Math_fround($10 * $19_1) + Math_fround($11 * $20)) + Math_fround($13_1 * $21);
      $22_1 = HEAPF32[$7_1 + 16 >> 2];
      $24_1 = HEAPF32[$7_1 + 20 >> 2];
      $23_1 = HEAPF32[$7_1 + 24 >> 2];
      HEAPF32[$6_1 + 152 >> 2] = Math_fround(Math_fround($12_1 * $22_1) + Math_fround($14 * $24_1)) + Math_fround($15_1 * $23_1);
      HEAPF32[$6_1 + 148 >> 2] = Math_fround(Math_fround($17_1 * $22_1) + Math_fround($18_1 * $24_1)) + Math_fround($16_1 * $23_1);
      HEAPF32[$6_1 + 144 >> 2] = Math_fround(Math_fround($10 * $22_1) + Math_fround($11 * $24_1)) + Math_fround($13_1 * $23_1);
      $27_1 = $12_1;
      $12_1 = HEAPF32[$7_1 >> 2];
      $25 = $14;
      $14 = HEAPF32[$7_1 + 4 >> 2];
      $28_1 = $15_1;
      $15_1 = HEAPF32[$7_1 + 8 >> 2];
      HEAPF32[$6_1 + 136 >> 2] = Math_fround(Math_fround($27_1 * $12_1) + Math_fround($25 * $14)) + Math_fround($28_1 * $15_1);
      HEAPF32[$6_1 + 132 >> 2] = Math_fround(Math_fround($17_1 * $12_1) + Math_fround($18_1 * $14)) + Math_fround($16_1 * $15_1);
      HEAPF32[$6_1 + 128 >> 2] = Math_fround(Math_fround($10 * $12_1) + Math_fround($11 * $14)) + Math_fround($13_1 * $15_1);
      HEAPF32[$6_1 + 184 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * $19_1) + Math_fround($8_1 * $20)) + Math_fround($9_1 * $21)) + HEAPF32[$7_1 + 56 >> 2];
      HEAPF32[$6_1 + 180 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * $22_1) + Math_fround($8_1 * $24_1)) + Math_fround($9_1 * $23_1)) + HEAPF32[$7_1 + 52 >> 2];
      HEAPF32[$6_1 + 176 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * $12_1) + Math_fround($8_1 * $14)) + Math_fround($9_1 * $15_1)) + HEAPF32[$7_1 + 48 >> 2];
      HEAP32[$6_1 + 84 >> 2] = 1065353216;
      HEAP32[$6_1 + 88 >> 2] = 1;
      HEAP32[$6_1 + 92 >> 2] = -1;
      $0 = $1_1 + -1 | 0;
      HEAP32[$6_1 + 100 >> 2] = $0;
      $4_1 = HEAP32[$6_1 + 520 >> 2];
      HEAP32[$6_1 + 96 >> 2] = $4_1;
      HEAP32[$6_1 + 80 >> 2] = 20384;
      HEAP32[$6_1 + 84 >> 2] = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$6_1 + 684 >> 2] = $0;
      HEAP32[$6_1 + 680 >> 2] = -1;
      HEAP32[$6_1 + 668 >> 2] = $2_1;
      $0 = HEAP32[$6_1 + 492 >> 2];
      HEAP32[$6_1 + 664 >> 2] = $0;
      HEAP32[$6_1 + 672 >> 2] = HEAP32[$0 + 8 >> 2];
      HEAP32[$6_1 + 676 >> 2] = $6_1 + 128;
      $867(HEAP32[$6_1 + 496 >> 2], HEAP32[$6_1 + 500 >> 2], HEAP32[$6_1 + 504 >> 2], $6_1 + 664 | 0, $6_1 + 80 | 0, HEAPF32[$6_1 + 508 >> 2]);
      if (($1_1 | 0) >= HEAP32[$29_1 + 20 >> 2]) {
       break label$23
      }
      $3_1 = $3_1 + 80 | 0;
      $1_1 = $1_1 + 1 | 0;
      $7_1 = HEAP32[$6_1 + 516 >> 2];
      continue;
     };
    }
    $1_1 = $6_1 + 72 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $3_1 = $6_1 + 136 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $2_1;
    $1_1 = $6_1 + 56 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $3_1 = $6_1 + 152 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $2_1;
    $1_1 = HEAP32[$6_1 + 52 >> 2];
    HEAP32[$6_1 + 144 >> 2] = HEAP32[$6_1 + 48 >> 2];
    HEAP32[$6_1 + 148 >> 2] = $1_1;
    $1_1 = HEAP32[$6_1 + 68 >> 2];
    HEAP32[$6_1 + 128 >> 2] = HEAP32[$6_1 + 64 >> 2];
    HEAP32[$6_1 + 132 >> 2] = $1_1;
    $762($0, HEAP32[$0 >> 2], $6_1 + 128 | 0, $6_1 + 488 | 0);
   }
   $614();
  }
  global$0 = $6_1 + 688 | 0;
 }
 
 function $868($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0);
  $4_1 = global$0 - 256 | 0;
  global$0 = $4_1;
  $5_1 = $4_1 + 104 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $4_1 + 112 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $4_1 + 124 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 120 >> 2] = 1065353216;
  $5_1 = $4_1 + 132 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $4_1 + 140 | 0;
  HEAP32[$5_1 >> 2] = 1065353216;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $13_1 = $1_1 + 8 | 0;
  $5_1 = $13_1;
  $14 = HEAP32[$5_1 + 4 >> 2];
  $15_1 = $4_1 + 76 | 0;
  $6_1 = $15_1;
  $16_1 = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 >> 2] = $16_1;
  HEAP32[$6_1 + 4 >> 2] = $14;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $9_1 = $4_1 + 92 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $6_1;
  HEAP32[$4_1 + 32 >> 2] = 20644;
  HEAP32[$4_1 + 248 >> 2] = $3_1;
  HEAP32[$4_1 + 100 >> 2] = 1065353216;
  $17_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 68 >> 2] = $6_1;
  HEAP32[$4_1 + 72 >> 2] = $17_1;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 84 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 88 >> 2] = $3_1;
  HEAP32[$4_1 + 244 >> 2] = $0;
  $3_1 = $4_1 + 156 | 0;
  HEAP32[$3_1 >> 2] = $16_1;
  HEAP32[$3_1 + 4 >> 2] = $14;
  $3_1 = $4_1 + 148 | 0;
  HEAP32[$3_1 >> 2] = $6_1;
  HEAP32[$3_1 + 4 >> 2] = $17_1;
  $3_1 = $4_1 + 168 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $4_1 + 176 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $4_1 + 188 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 184 >> 2] = 1065353216;
  $3_1 = $4_1 + 196 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $4_1 + 204 | 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $6_1 = $4_1 + 212 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $3_1;
  $3_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = $4_1 + 220 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $3_1;
  HEAP32[$4_1 + 164 >> 2] = 1065353216;
  $10 = Math_fround(HEAPF32[$2_1 >> 2] - HEAPF32[$1_1 >> 2]);
  $8_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] - HEAPF32[$1_1 + 4 >> 2]);
  $7_1 = Math_fround(HEAPF32[$5_1 >> 2] - HEAPF32[$13_1 >> 2]);
  $11 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($8_1 * $8_1)) + Math_fround($7_1 * $7_1)))));
  $12_1 = Math_fround($7_1 * $11);
  $18_1 = $12_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $12_1);
  HEAPF32[$4_1 + 44 >> 2] = $18_1;
  $8_1 = Math_fround($8_1 * $11);
  $7_1 = $8_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $8_1);
  HEAPF32[$4_1 + 40 >> 2] = $7_1;
  HEAP32[$4_1 + 60 >> 2] = $18_1 < Math_fround(0.0);
  HEAP32[$4_1 + 56 >> 2] = $7_1 < Math_fround(0.0);
  $7_1 = Math_fround($10 * $11);
  HEAPF32[$4_1 + 64 >> 2] = Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[$4_1 + 84 >> 2] - HEAPF32[$4_1 + 68 >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[$4_1 + 88 >> 2] - HEAPF32[$4_1 + 72 >> 2]))) + Math_fround($12_1 * Math_fround(HEAPF32[$9_1 >> 2] - HEAPF32[$15_1 >> 2]));
  $7_1 = $7_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $7_1);
  HEAPF32[$4_1 + 36 >> 2] = $7_1;
  HEAP32[$4_1 + 52 >> 2] = $7_1 < Math_fround(0.0);
  $3_1 = HEAP32[$0 + 68 >> 2];
  $0 = $4_1 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$4_1 + 16 >> 2] = 0;
  HEAP32[$4_1 + 20 >> 2] = 0;
  $0 = $4_1 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 24 >> 2]]($3_1, $1_1, $2_1, $4_1 + 32 | 0, $4_1 + 16 | 0, $4_1);
  global$0 = $4_1 + 256 | 0;
 }
 
 function $869($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24_1 = 0, $25 = 0, $26_1 = Math_fround(0), $27_1 = 0;
  $6_1 = global$0 - 400 | 0;
  global$0 = $6_1;
  $613($6_1 + 392 | 0, 18969);
  $10 = $2_1 + 8 | 0;
  $9_1 = $10;
  $7_1 = HEAP32[$9_1 + 4 >> 2];
  $15_1 = $6_1 + 336 | 0;
  HEAP32[$15_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$15_1 + 4 >> 2] = $7_1;
  $15_1 = $2_1 + 24 | 0;
  $7_1 = $15_1;
  $11 = HEAP32[$7_1 + 4 >> 2];
  $9_1 = $6_1 + 352 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $11;
  $9_1 = $2_1 + 40 | 0;
  $12_1 = HEAP32[$9_1 + 4 >> 2];
  $7_1 = $6_1 + 368 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $12_1;
  $7_1 = $2_1 + 56 | 0;
  $22_1 = HEAP32[$7_1 + 4 >> 2];
  $11 = $6_1 + 384 | 0;
  HEAP32[$11 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$11 + 4 >> 2] = $22_1;
  $11 = $3_1 + 8 | 0;
  $20 = HEAP32[$11 + 4 >> 2];
  $12_1 = $6_1 + 272 | 0;
  HEAP32[$12_1 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$12_1 + 4 >> 2] = $20;
  $12_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$6_1 + 328 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 332 >> 2] = $12_1;
  $12_1 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$6_1 + 344 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$6_1 + 348 >> 2] = $12_1;
  $12_1 = HEAP32[$2_1 + 36 >> 2];
  HEAP32[$6_1 + 360 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$6_1 + 364 >> 2] = $12_1;
  $12_1 = HEAP32[$2_1 + 52 >> 2];
  HEAP32[$6_1 + 376 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$6_1 + 380 >> 2] = $12_1;
  $12_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$6_1 + 264 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 268 >> 2] = $12_1;
  $12_1 = $3_1 + 24 | 0;
  $8_1 = HEAP32[$12_1 + 4 >> 2];
  $22_1 = $6_1 + 288 | 0;
  HEAP32[$22_1 >> 2] = HEAP32[$12_1 >> 2];
  HEAP32[$22_1 + 4 >> 2] = $8_1;
  $22_1 = $3_1 + 40 | 0;
  $8_1 = $22_1;
  $24_1 = HEAP32[$8_1 + 4 >> 2];
  $20 = $6_1 + 304 | 0;
  HEAP32[$20 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$20 + 4 >> 2] = $24_1;
  $20 = $3_1 + 56 | 0;
  $25 = HEAP32[$20 + 4 >> 2];
  $8_1 = $6_1 + 320 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $25;
  $8_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$6_1 + 280 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$6_1 + 284 >> 2] = $8_1;
  $8_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$6_1 + 296 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$6_1 + 300 >> 2] = $8_1;
  $8_1 = HEAP32[$3_1 + 52 >> 2];
  HEAP32[$6_1 + 312 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$6_1 + 316 >> 2] = $8_1;
  $800($6_1 + 328 | 0, $6_1 + 264 | 0, $6_1, $6_1 + 248 | 0);
  HEAP32[$6_1 + 228 >> 2] = 0;
  $13_1 = HEAPF32[$6_1 + 248 >> 2];
  HEAPF32[$6_1 + 224 >> 2] = $13_1 * HEAPF32[$6_1 + 8 >> 2];
  HEAPF32[$6_1 + 220 >> 2] = $13_1 * HEAPF32[$6_1 + 4 >> 2];
  HEAPF32[$6_1 + 216 >> 2] = $13_1 * HEAPF32[$6_1 >> 2];
  $8_1 = $6_1 + 208 | 0;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 200 >> 2] = 0;
  HEAP32[$6_1 + 204 >> 2] = 0;
  $8_1 = $6_1 + 56 | 0;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  $8_1 = $6_1 + 48 | 0;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  $1078($6_1 + 328 | 0, $6_1 + 248 | 0);
  $8_1 = $6_1 + 44 | 0;
  HEAP32[$8_1 >> 2] = 0;
  $24_1 = $6_1 + 28 | 0;
  HEAP32[$24_1 >> 2] = 0;
  $13_1 = HEAPF32[$6_1 + 248 >> 2];
  $14 = HEAPF32[$6_1 + 252 >> 2];
  $16_1 = HEAPF32[$6_1 + 256 >> 2];
  $18_1 = HEAPF32[$6_1 + 260 >> 2];
  $17_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($14 * $14)) + Math_fround($16_1 * $16_1)) + Math_fround($18_1 * $18_1)));
  $23_1 = Math_fround($16_1 * $17_1);
  $19_1 = Math_fround($14 * $23_1);
  $21 = Math_fround($13_1 * $17_1);
  $26_1 = Math_fround($18_1 * $21);
  HEAPF32[$6_1 + 36 >> 2] = $19_1 + $26_1;
  $25 = $6_1 + 24 | 0;
  HEAPF32[$25 >> 2] = $19_1 - $26_1;
  $19_1 = Math_fround($13_1 * $21);
  $21 = $14;
  $14 = Math_fround($14 * $17_1);
  $17_1 = Math_fround($21 * $14);
  HEAPF32[$6_1 + 40 >> 2] = Math_fround(1.0) - Math_fround($19_1 + $17_1);
  $16_1 = Math_fround($16_1 * $23_1);
  HEAPF32[$6_1 + 20 >> 2] = Math_fround(1.0) - Math_fround($19_1 + $16_1);
  HEAP32[$6_1 + 12 >> 2] = 0;
  $19_1 = Math_fround($13_1 * $23_1);
  $21 = Math_fround($18_1 * $14);
  HEAPF32[$6_1 + 32 >> 2] = $19_1 - $21;
  $13_1 = Math_fround($13_1 * $14);
  $14 = Math_fround($18_1 * $23_1);
  HEAPF32[$6_1 + 16 >> 2] = $13_1 + $14;
  HEAPF32[$6_1 + 8 >> 2] = $19_1 + $21;
  HEAPF32[$6_1 + 4 >> 2] = $13_1 - $14;
  HEAPF32[$6_1 >> 2] = Math_fround(1.0) - Math_fround($17_1 + $16_1);
  $97($1_1, $6_1, $6_1 + 200 | 0, $6_1 + 216 | 0, $6_1 + 248 | 0, $6_1 + 232 | 0);
  $27_1 = HEAP32[$10 + 4 >> 2];
  HEAP32[$8_1 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $27_1;
  $8_1 = HEAP32[$2_1 + 20 >> 2];
  $10 = $6_1 + 52 | 0;
  HEAP32[$10 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$10 + 4 >> 2] = $8_1;
  $8_1 = HEAP32[$15_1 + 4 >> 2];
  $10 = $6_1 + 60 | 0;
  HEAP32[$10 >> 2] = HEAP32[$15_1 >> 2];
  HEAP32[$10 + 4 >> 2] = $8_1;
  $15_1 = HEAP32[$2_1 + 36 >> 2];
  $10 = $6_1 + 68 | 0;
  HEAP32[$10 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$10 + 4 >> 2] = $15_1;
  $15_1 = HEAP32[$9_1 + 4 >> 2];
  $10 = $6_1 + 76 | 0;
  HEAP32[$10 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$10 + 4 >> 2] = $15_1;
  $9_1 = HEAP32[$2_1 + 52 >> 2];
  $10 = $6_1 + 84 | 0;
  HEAP32[$10 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$10 + 4 >> 2] = $9_1;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $15_1 = $6_1 + 92 | 0;
  $9_1 = $15_1;
  HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $8_1;
  $7_1 = HEAP32[$11 + 4 >> 2];
  $9_1 = $6_1 + 108 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $7_1;
  HEAP32[$6_1 >> 2] = 20772;
  $9_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$6_1 + 36 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 40 >> 2] = $9_1;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$6_1 + 100 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 104 >> 2] = $2_1;
  $7_1 = HEAP32[$3_1 + 52 >> 2];
  $2_1 = $6_1 + 148 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $11 = HEAP32[$20 + 4 >> 2];
  $9_1 = $6_1 + 156 | 0;
  $7_1 = $9_1;
  HEAP32[$7_1 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $11;
  $11 = HEAP32[$12_1 + 4 >> 2];
  $7_1 = $6_1 + 124 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$12_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $11;
  $11 = HEAP32[$3_1 + 20 >> 2];
  $7_1 = $6_1 + 116 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $11;
  $11 = HEAP32[$22_1 + 4 >> 2];
  $7_1 = $6_1 + 140 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$22_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $11;
  $11 = HEAP32[$3_1 + 36 >> 2];
  $7_1 = $6_1 + 132 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $11;
  HEAP32[$6_1 + 184 >> 2] = $4_1;
  HEAPF32[$6_1 + 188 >> 2] = $5_1;
  HEAP32[$6_1 + 192 >> 2] = $1_1;
  $13_1 = HEAPF32[$6_1 + 88 >> 2];
  $14 = HEAPF32[$6_1 + 152 >> 2];
  $5_1 = HEAPF32[$10 >> 2];
  $18_1 = HEAPF32[$2_1 >> 2];
  $16_1 = HEAPF32[$15_1 >> 2];
  $17_1 = HEAPF32[$9_1 >> 2];
  HEAP32[$6_1 + 180 >> 2] = $0;
  $5_1 = Math_fround($18_1 - $5_1);
  $13_1 = Math_fround($14 - $13_1);
  $14 = Math_fround($17_1 - $16_1);
  $18_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($13_1 * $13_1)) + Math_fround($14 * $14)))));
  $16_1 = Math_fround($14 * $18_1);
  $23_1 = $16_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $16_1);
  HEAP32[$24_1 >> 2] = $23_1 < Math_fround(0.0);
  $17_1 = Math_fround($13_1 * $18_1);
  $19_1 = $17_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $17_1);
  HEAP32[$25 >> 2] = $19_1 < Math_fround(0.0);
  HEAPF32[$6_1 + 12 >> 2] = $23_1;
  HEAPF32[$6_1 + 8 >> 2] = $19_1;
  $21 = $5_1;
  $5_1 = Math_fround($5_1 * $18_1);
  HEAPF32[$6_1 + 32 >> 2] = Math_fround($14 * $16_1) + Math_fround(Math_fround($21 * $5_1) + Math_fround($13_1 * $17_1));
  $5_1 = $5_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $5_1);
  HEAPF32[$6_1 + 4 >> 2] = $5_1;
  HEAP32[$6_1 + 20 >> 2] = $5_1 < Math_fround(0.0);
  $0 = HEAP32[$0 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $6_1 + 376 | 0, $6_1 + 312 | 0, $6_1, $6_1 + 248 | 0, $6_1 + 232 | 0);
  $614();
  global$0 = $6_1 + 400 | 0;
 }
 
 function $871($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0, $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32 = 0, $33_1 = 0, $34 = 0, $35 = 0, $36_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
    break label$1
   }
   $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 56 >> 2]]($5_1) & 32768)) {
    break label$1
   }
   $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $1_1, Math_fround(.10000000149011612));
  }
  label$2 : {
   label$3 : {
    $5_1 = HEAP32[$2_1 + 4 >> 2];
    if ($5_1 >>> 0 > 31) {
     break label$3
    }
    label$4 : {
     switch ($5_1 - 1 | 0) {
     case 30:
      $5_1 = HEAP32[$2_1 + 20 >> 2];
      if (($5_1 | 0) < 1) {
       break label$2
      }
      $6_1 = $5_1 + 1 | 0;
      $7_1 = Math_imul($5_1, 80) + -80 | 0;
      while (1) {
       $5_1 = HEAP32[$2_1 + 28 >> 2] + $7_1 | 0;
       $13_1 = HEAP32[$5_1 - -64 >> 2];
       $8_1 = HEAPF32[$5_1 + 56 >> 2];
       $9_1 = HEAPF32[$5_1 + 48 >> 2];
       $10 = HEAPF32[$5_1 + 52 >> 2];
       $12_1 = HEAPF32[$5_1 + 32 >> 2];
       $16_1 = HEAPF32[$5_1 >> 2];
       $17_1 = HEAPF32[$5_1 + 16 >> 2];
       $18_1 = HEAPF32[$5_1 + 36 >> 2];
       $20 = HEAPF32[$5_1 + 4 >> 2];
       $22_1 = HEAPF32[$5_1 + 20 >> 2];
       $11 = HEAPF32[$5_1 + 40 >> 2];
       $14 = HEAPF32[$5_1 + 8 >> 2];
       $15_1 = HEAPF32[$5_1 + 24 >> 2];
       HEAP32[$4_1 + 60 >> 2] = 0;
       HEAP32[$4_1 + 44 >> 2] = 0;
       HEAP32[$4_1 + 28 >> 2] = 0;
       HEAP32[$4_1 + 12 >> 2] = 0;
       $23_1 = HEAPF32[$1_1 + 32 >> 2];
       $19_1 = HEAPF32[$1_1 + 36 >> 2];
       $21 = HEAPF32[$1_1 + 40 >> 2];
       HEAPF32[$4_1 + 40 >> 2] = Math_fround(Math_fround($14 * $23_1) + Math_fround($15_1 * $19_1)) + Math_fround($11 * $21);
       HEAPF32[$4_1 + 36 >> 2] = Math_fround(Math_fround($20 * $23_1) + Math_fround($22_1 * $19_1)) + Math_fround($18_1 * $21);
       HEAPF32[$4_1 + 32 >> 2] = Math_fround(Math_fround($16_1 * $23_1) + Math_fround($17_1 * $19_1)) + Math_fround($12_1 * $21);
       $24_1 = HEAPF32[$1_1 + 16 >> 2];
       $25 = HEAPF32[$1_1 + 20 >> 2];
       $26_1 = HEAPF32[$1_1 + 24 >> 2];
       HEAPF32[$4_1 + 24 >> 2] = Math_fround(Math_fround($14 * $24_1) + Math_fround($15_1 * $25)) + Math_fround($11 * $26_1);
       HEAPF32[$4_1 + 20 >> 2] = Math_fround(Math_fround($20 * $24_1) + Math_fround($22_1 * $25)) + Math_fround($18_1 * $26_1);
       HEAPF32[$4_1 + 16 >> 2] = Math_fround(Math_fround($16_1 * $24_1) + Math_fround($17_1 * $25)) + Math_fround($12_1 * $26_1);
       $28_1 = $14;
       $14 = HEAPF32[$1_1 >> 2];
       $29_1 = $15_1;
       $15_1 = HEAPF32[$1_1 + 4 >> 2];
       $30 = $11;
       $11 = HEAPF32[$1_1 + 8 >> 2];
       HEAPF32[$4_1 + 8 >> 2] = Math_fround(Math_fround($28_1 * $14) + Math_fround($29_1 * $15_1)) + Math_fround($30 * $11);
       HEAPF32[$4_1 + 4 >> 2] = Math_fround(Math_fround($20 * $14) + Math_fround($22_1 * $15_1)) + Math_fround($18_1 * $11);
       HEAPF32[$4_1 >> 2] = Math_fround(Math_fround($16_1 * $14) + Math_fround($17_1 * $15_1)) + Math_fround($12_1 * $11);
       HEAPF32[$4_1 + 56 >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $23_1) + Math_fround($10 * $19_1)) + Math_fround($8_1 * $21)) + HEAPF32[$1_1 + 56 >> 2];
       HEAPF32[$4_1 + 52 >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $24_1) + Math_fround($10 * $25)) + Math_fround($8_1 * $26_1)) + HEAPF32[$1_1 + 52 >> 2];
       HEAPF32[$4_1 + 48 >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $14) + Math_fround($10 * $15_1)) + Math_fround($8_1 * $11)) + HEAPF32[$1_1 + 48 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $4_1, $13_1, $3_1);
       $7_1 = $7_1 + -80 | 0;
       $6_1 = $6_1 + -1 | 0;
       if (($6_1 | 0) > 1) {
        continue
       }
       break;
      };
      break label$2;
     default:
      $5_1 = $2_1 + 40 | 0;
      $7_1 = HEAP32[$5_1 + 4 >> 2];
      $6_1 = $4_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $7_1;
      $5_1 = HEAP32[$2_1 + 36 >> 2];
      HEAP32[$4_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $5_1;
      $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1));
      $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1));
      $10 = Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1)) + HEAPF32[$6_1 >> 2]);
      HEAPF32[$6_1 >> 2] = $10;
      $8_1 = Math_fround($8_1 + HEAPF32[$4_1 >> 2]);
      HEAPF32[$4_1 >> 2] = $8_1;
      $9_1 = Math_fround($9_1 + HEAPF32[$4_1 + 4 >> 2]);
      HEAPF32[$4_1 + 4 >> 2] = $9_1;
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      HEAP32[$4_1 + 140 >> 2] = 0;
      HEAPF32[$4_1 + 136 >> 2] = -$10;
      HEAPF32[$4_1 + 132 >> 2] = -$9_1;
      HEAPF32[$4_1 + 128 >> 2] = -$8_1;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $4_1 + 128 | 0, $4_1, $1_1, $3_1);
      break label$2;
     case 7:
      $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1));
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $8_1, $1_1, $3_1);
      break label$2;
     case 8:
      $5_1 = HEAP32[$2_1 + 96 >> 2];
      if (($5_1 | 0) < 1) {
       break label$2
      }
      $27_1 = $5_1 + 1 | 0;
      $6_1 = ($5_1 << 2) + -4 | 0;
      $7_1 = ($5_1 << 4) + -8 | 0;
      while (1) {
       $5_1 = HEAP32[$2_1 + 104 >> 2] + $7_1 | 0;
       $8_1 = HEAPF32[$5_1 >> 2];
       $9_1 = HEAPF32[$5_1 + -8 >> 2];
       $10 = HEAPF32[$5_1 + -4 >> 2];
       $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       $23_1 = HEAPF32[HEAP32[$2_1 + 124 >> 2] + $6_1 >> 2];
       HEAP32[$4_1 + 60 >> 2] = 0;
       HEAP32[$4_1 + 44 >> 2] = 0;
       HEAP32[$4_1 + 28 >> 2] = 0;
       HEAP32[$4_1 + 12 >> 2] = 0;
       $12_1 = HEAPF32[$1_1 + 40 >> 2];
       $16_1 = HEAPF32[$1_1 + 32 >> 2];
       $18_1 = Math_fround($16_1 * Math_fround(0.0));
       $17_1 = HEAPF32[$1_1 + 36 >> 2];
       $20 = Math_fround($17_1 * Math_fround(0.0));
       HEAPF32[$4_1 + 40 >> 2] = $12_1 + Math_fround($18_1 + $20);
       $11 = Math_fround($18_1 + $17_1);
       $18_1 = Math_fround($12_1 * Math_fround(0.0));
       HEAPF32[$4_1 + 36 >> 2] = $11 + $18_1;
       HEAPF32[$4_1 + 32 >> 2] = Math_fround($16_1 + $20) + $18_1;
       $18_1 = HEAPF32[$1_1 + 24 >> 2];
       $20 = HEAPF32[$1_1 + 16 >> 2];
       $11 = Math_fround($20 * Math_fround(0.0));
       $22_1 = HEAPF32[$1_1 + 20 >> 2];
       $14 = Math_fround($22_1 * Math_fround(0.0));
       HEAPF32[$4_1 + 24 >> 2] = $18_1 + Math_fround($11 + $14);
       $15_1 = Math_fround($11 + $22_1);
       $11 = Math_fround($18_1 * Math_fround(0.0));
       HEAPF32[$4_1 + 20 >> 2] = $15_1 + $11;
       HEAPF32[$4_1 + 16 >> 2] = Math_fround($20 + $14) + $11;
       $11 = HEAPF32[$1_1 + 8 >> 2];
       $14 = HEAPF32[$1_1 >> 2];
       $19_1 = Math_fround($14 * Math_fround(0.0));
       $15_1 = HEAPF32[$1_1 + 4 >> 2];
       $21 = Math_fround($15_1 * Math_fround(0.0));
       HEAPF32[$4_1 + 8 >> 2] = $11 + Math_fround($19_1 + $21);
       $28_1 = Math_fround($19_1 + $15_1);
       $19_1 = Math_fround($11 * Math_fround(0.0));
       HEAPF32[$4_1 + 4 >> 2] = $28_1 + $19_1;
       HEAPF32[$4_1 >> 2] = Math_fround($14 + $21) + $19_1;
       HEAPF32[$4_1 + 56 >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $16_1) + Math_fround($10 * $17_1)) + Math_fround($8_1 * $12_1)) + HEAPF32[$1_1 + 56 >> 2];
       HEAPF32[$4_1 + 52 >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $20) + Math_fround($10 * $22_1)) + Math_fround($8_1 * $18_1)) + HEAPF32[$1_1 + 52 >> 2];
       HEAPF32[$4_1 + 48 >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $14) + Math_fround($10 * $15_1)) + Math_fround($8_1 * $11)) + HEAPF32[$1_1 + 48 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 24 >> 2]]($5_1, $23_1, $4_1, $3_1);
       $6_1 = $6_1 + -4 | 0;
       $7_1 = $7_1 + -16 | 0;
       $27_1 = $27_1 + -1 | 0;
       if (($27_1 | 0) > 1) {
        continue
       }
       break;
      };
      break label$2;
     case 9:
      $6_1 = $2_1 + 32 | 0;
      $2_1 = HEAP32[$2_1 + 56 >> 2];
      $8_1 = HEAPF32[$6_1 + ($2_1 << 2) >> 2];
      $9_1 = HEAPF32[$6_1 + (($2_1 + 2 | 0) % 3 << 2) >> 2];
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $9_1, $8_1, $2_1, $1_1, $3_1);
      break label$2;
     case 10:
      $6_1 = HEAP32[$2_1 + 72 >> 2];
      $8_1 = HEAPF32[$2_1 + 60 >> 2];
      $9_1 = HEAPF32[$2_1 + 64 >> 2];
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 92 >> 2]]($0, $8_1, $9_1, $6_1, $1_1, $3_1);
      break label$2;
     case 12:
      $6_1 = HEAP32[$2_1 + 56 >> 2];
      $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 92 >> 2]]($2_1));
      $7_1 = $2_1 + 40 | 0;
      $13_1 = HEAP32[$7_1 + 4 >> 2];
      $5_1 = $4_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $13_1;
      $7_1 = HEAP32[$2_1 + 36 >> 2];
      HEAP32[$4_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $7_1;
      $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1));
      $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1));
      (wasm2js_i32$0 = $5_1, wasm2js_f32$0 = Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1)) + HEAPF32[$5_1 >> 2])), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
      HEAPF32[$4_1 >> 2] = $9_1 + HEAPF32[$4_1 >> 2];
      HEAPF32[$4_1 + 4 >> 2] = $10 + HEAPF32[$4_1 + 4 >> 2];
      $9_1 = HEAPF32[($6_1 << 2) + $4_1 >> 2];
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 88 >> 2]]($0, $8_1, $9_1, $6_1, $1_1, $3_1);
      break label$2;
     case 0:
     case 1:
     case 2:
     case 3:
     case 4:
     case 5:
     case 6:
     case 11:
     case 13:
     case 14:
     case 15:
     case 16:
     case 17:
     case 18:
     case 19:
     case 20:
     case 21:
     case 22:
     case 23:
     case 24:
     case 25:
     case 26:
     case 28:
     case 29:
      break label$3;
     case 27:
      break label$4;
     };
    }
    $8_1 = HEAPF32[$2_1 + 68 >> 2];
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0, $2_1 + 52 | 0, $8_1, $1_1, $3_1);
    break label$2;
   }
   label$14 : {
    if (($5_1 | 0) > 6) {
     break label$14
    }
    $13_1 = HEAP32[$2_1 + 56 >> 2];
    if ($13_1) {
     if (HEAP32[$13_1 + 28 >> 2] < 1) {
      break label$14
     }
     while (1) {
      $10 = Math_fround(0.0);
      label$17 : {
       $33_1 = Math_imul($32, 36);
       $6_1 = $33_1 + HEAP32[$13_1 + 36 >> 2] | 0;
       $31_1 = HEAP32[$6_1 + 4 >> 2];
       if (!$31_1) {
        $8_1 = Math_fround(0.0);
        $9_1 = Math_fround(0.0);
        break label$17;
       }
       $8_1 = Math_fround(0.0);
       $9_1 = Math_fround(0.0);
       if (($31_1 | 0) < 1) {
        break label$17
       }
       $7_1 = HEAP32[$6_1 + 12 >> 2];
       $6_1 = HEAP32[($7_1 + ($31_1 << 2) | 0) + -4 >> 2];
       $27_1 = 1;
       $34 = 0;
       while (1) {
        $5_1 = HEAP32[$7_1 + $34 >> 2];
        $35 = $5_1 << 4;
        $7_1 = $35 + HEAP32[$13_1 + 16 >> 2] | 0;
        $18_1 = HEAPF32[$7_1 >> 2];
        $20 = HEAPF32[$7_1 + 4 >> 2];
        $22_1 = HEAPF32[$7_1 + 8 >> 2];
        $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
        HEAP32[$4_1 + 12 >> 2] = 0;
        $36_1 = HEAP32[$13_1 + 16 >> 2];
        $6_1 = $36_1 + ($6_1 << 4) | 0;
        $12_1 = HEAPF32[$6_1 >> 2];
        $11 = HEAPF32[$1_1 + 32 >> 2];
        $16_1 = HEAPF32[$6_1 + 4 >> 2];
        $14 = HEAPF32[$1_1 + 36 >> 2];
        $17_1 = HEAPF32[$6_1 + 8 >> 2];
        $15_1 = HEAPF32[$1_1 + 40 >> 2];
        $23_1 = HEAPF32[$1_1 + 56 >> 2];
        HEAPF32[$4_1 + 8 >> 2] = Math_fround(Math_fround(Math_fround($12_1 * $11) + Math_fround($16_1 * $14)) + Math_fround($17_1 * $15_1)) + $23_1;
        $19_1 = HEAPF32[$1_1 + 16 >> 2];
        $21 = HEAPF32[$1_1 + 20 >> 2];
        $24_1 = HEAPF32[$1_1 + 24 >> 2];
        $25 = HEAPF32[$1_1 + 52 >> 2];
        HEAPF32[$4_1 + 4 >> 2] = Math_fround(Math_fround(Math_fround($12_1 * $19_1) + Math_fround($16_1 * $21)) + Math_fround($17_1 * $24_1)) + $25;
        $26_1 = HEAPF32[$1_1 >> 2];
        $28_1 = HEAPF32[$1_1 + 4 >> 2];
        $29_1 = HEAPF32[$1_1 + 8 >> 2];
        $30 = HEAPF32[$1_1 + 48 >> 2];
        HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(Math_fround($12_1 * $26_1) + Math_fround($16_1 * $28_1)) + Math_fround($17_1 * $29_1)) + $30;
        HEAP32[$4_1 + 140 >> 2] = 0;
        $6_1 = $35 + $36_1 | 0;
        $12_1 = HEAPF32[$6_1 >> 2];
        $16_1 = HEAPF32[$6_1 + 4 >> 2];
        $17_1 = HEAPF32[$6_1 + 8 >> 2];
        HEAPF32[$4_1 + 136 >> 2] = $23_1 + Math_fround(Math_fround(Math_fround($11 * $12_1) + Math_fround($14 * $16_1)) + Math_fround($15_1 * $17_1));
        HEAPF32[$4_1 + 132 >> 2] = $25 + Math_fround(Math_fround(Math_fround($19_1 * $12_1) + Math_fround($21 * $16_1)) + Math_fround($24_1 * $17_1));
        HEAPF32[$4_1 + 128 >> 2] = $30 + Math_fround(Math_fround(Math_fround($26_1 * $12_1) + Math_fround($28_1 * $16_1)) + Math_fround($29_1 * $17_1));
        FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 16 >> 2]]($7_1, $4_1, $4_1 + 128 | 0, $3_1);
        $9_1 = Math_fround($9_1 + $22_1);
        $8_1 = Math_fround($8_1 + $20);
        $10 = Math_fround($10 + $18_1);
        $6_1 = HEAP32[$13_1 + 36 >> 2] + $33_1 | 0;
        if (($27_1 | 0) >= HEAP32[$6_1 + 4 >> 2]) {
         break label$17
        }
        $34 = $34 + 4 | 0;
        $27_1 = $27_1 + 1 | 0;
        $7_1 = HEAP32[$6_1 + 12 >> 2];
        $6_1 = $5_1;
        continue;
       };
      }
      $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      if (FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 56 >> 2]]($6_1) & 16384) {
       HEAP32[$4_1 + 8 >> 2] = 0;
       HEAP32[$4_1 + 12 >> 2] = 0;
       HEAP32[$4_1 >> 2] = 1065353216;
       HEAP32[$4_1 + 4 >> 2] = 1065353216;
       $6_1 = HEAP32[$13_1 + 36 >> 2] + $33_1 | 0;
       $16_1 = HEAPF32[$6_1 + 28 >> 2];
       $17_1 = HEAPF32[$6_1 + 20 >> 2];
       $18_1 = HEAPF32[$6_1 + 24 >> 2];
       $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       HEAP32[$4_1 + 140 >> 2] = 0;
       $12_1 = Math_fround(Math_fround(1.0) / Math_fround($31_1 | 0));
       $10 = Math_fround($12_1 * $10);
       $20 = HEAPF32[$1_1 + 32 >> 2];
       $8_1 = Math_fround($12_1 * $8_1);
       $22_1 = HEAPF32[$1_1 + 36 >> 2];
       $9_1 = Math_fround($12_1 * $9_1);
       $12_1 = HEAPF32[$1_1 + 40 >> 2];
       $11 = HEAPF32[$1_1 + 56 >> 2];
       HEAPF32[$4_1 + 136 >> 2] = Math_fround(Math_fround(Math_fround($10 * $20) + Math_fround($8_1 * $22_1)) + Math_fround($9_1 * $12_1)) + $11;
       $14 = HEAPF32[$1_1 + 16 >> 2];
       $15_1 = HEAPF32[$1_1 + 20 >> 2];
       $23_1 = HEAPF32[$1_1 + 24 >> 2];
       $19_1 = HEAPF32[$1_1 + 52 >> 2];
       HEAPF32[$4_1 + 132 >> 2] = Math_fround(Math_fround(Math_fround($10 * $14) + Math_fround($8_1 * $15_1)) + Math_fround($9_1 * $23_1)) + $19_1;
       $21 = HEAPF32[$1_1 >> 2];
       $24_1 = HEAPF32[$1_1 + 4 >> 2];
       $25 = HEAPF32[$1_1 + 8 >> 2];
       $26_1 = HEAPF32[$1_1 + 48 >> 2];
       HEAPF32[$4_1 + 128 >> 2] = Math_fround(Math_fround(Math_fround($10 * $21) + Math_fround($8_1 * $24_1)) + Math_fround($9_1 * $25)) + $26_1;
       HEAP32[$4_1 + 124 >> 2] = 0;
       $10 = Math_fround($10 + $17_1);
       $8_1 = Math_fround($8_1 + $18_1);
       $9_1 = Math_fround($9_1 + $16_1);
       HEAPF32[$4_1 + 120 >> 2] = $11 + Math_fround(Math_fround(Math_fround($20 * $10) + Math_fround($22_1 * $8_1)) + Math_fround($12_1 * $9_1));
       HEAPF32[$4_1 + 116 >> 2] = $19_1 + Math_fround(Math_fround(Math_fround($10 * $14) + Math_fround($8_1 * $15_1)) + Math_fround($9_1 * $23_1));
       HEAPF32[$4_1 + 112 >> 2] = $26_1 + Math_fround(Math_fround(Math_fround($10 * $21) + Math_fround($8_1 * $24_1)) + Math_fround($9_1 * $25));
       FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 16 >> 2]]($6_1, $4_1 + 128 | 0, $4_1 + 112 | 0, $4_1);
      }
      $32 = $32 + 1 | 0;
      if (($32 | 0) < HEAP32[$13_1 + 28 >> 2]) {
       continue
      }
      break;
     };
     break label$14;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 100 >> 2]]($2_1) | 0) < 1) {
     break label$14
    }
    while (1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 104 >> 2]]($2_1, $6_1, $4_1, $4_1 + 128 | 0);
     HEAP32[$4_1 + 124 >> 2] = 0;
     $8_1 = HEAPF32[$4_1 >> 2];
     $12_1 = HEAPF32[$1_1 + 32 >> 2];
     $9_1 = HEAPF32[$4_1 + 4 >> 2];
     $16_1 = HEAPF32[$1_1 + 36 >> 2];
     $10 = HEAPF32[$4_1 + 8 >> 2];
     $17_1 = HEAPF32[$1_1 + 40 >> 2];
     $18_1 = HEAPF32[$1_1 + 56 >> 2];
     HEAPF32[$4_1 + 120 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $12_1) + Math_fround($9_1 * $16_1)) + Math_fround($10 * $17_1)) + $18_1;
     $20 = HEAPF32[$1_1 + 16 >> 2];
     $22_1 = HEAPF32[$1_1 + 20 >> 2];
     $11 = HEAPF32[$1_1 + 24 >> 2];
     $14 = HEAPF32[$1_1 + 52 >> 2];
     HEAPF32[$4_1 + 116 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $20) + Math_fround($9_1 * $22_1)) + Math_fround($10 * $11)) + $14;
     $15_1 = HEAPF32[$1_1 >> 2];
     $23_1 = HEAPF32[$1_1 + 4 >> 2];
     $19_1 = HEAPF32[$1_1 + 8 >> 2];
     $21 = HEAPF32[$1_1 + 48 >> 2];
     HEAPF32[$4_1 + 112 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $15_1) + Math_fround($9_1 * $23_1)) + Math_fround($10 * $19_1)) + $21;
     HEAP32[$4_1 + 108 >> 2] = 0;
     $8_1 = HEAPF32[$4_1 + 128 >> 2];
     $9_1 = HEAPF32[$4_1 + 132 >> 2];
     $10 = HEAPF32[$4_1 + 136 >> 2];
     HEAPF32[$4_1 + 104 >> 2] = $18_1 + Math_fround(Math_fround(Math_fround($12_1 * $8_1) + Math_fround($16_1 * $9_1)) + Math_fround($17_1 * $10));
     HEAPF32[$4_1 + 100 >> 2] = $14 + Math_fround(Math_fround(Math_fround($20 * $8_1) + Math_fround($22_1 * $9_1)) + Math_fround($11 * $10));
     HEAPF32[$4_1 + 96 >> 2] = $21 + Math_fround(Math_fround(Math_fround($15_1 * $8_1) + Math_fround($23_1 * $9_1)) + Math_fround($19_1 * $10));
     $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 16 >> 2]]($5_1, $4_1 + 112 | 0, $4_1 + 96 | 0, $3_1);
     $6_1 = $6_1 + 1 | 0;
     if (($6_1 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 100 >> 2]]($2_1) | 0)) {
      continue
     }
     break;
    };
   }
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   if ($6_1 + -21 >>> 0 <= 8) {
    HEAP32[$4_1 + 136 >> 2] = 1566444395;
    HEAP32[$4_1 + 140 >> 2] = 0;
    HEAP32[$4_1 + 128 >> 2] = 1566444395;
    HEAP32[$4_1 + 132 >> 2] = 1566444395;
    HEAP32[$4_1 + 120 >> 2] = -581039253;
    HEAP32[$4_1 + 124 >> 2] = 0;
    HEAP32[$4_1 + 112 >> 2] = -581039253;
    HEAP32[$4_1 + 116 >> 2] = -581039253;
    $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    $5_1 = $3_1 + 8 | 0;
    $7_1 = HEAP32[$5_1 + 4 >> 2];
    $13_1 = $4_1 + 20 | 0;
    HEAP32[$13_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $7_1;
    $5_1 = $1_1 + 8 | 0;
    $7_1 = HEAP32[$5_1 + 4 >> 2];
    $13_1 = $4_1 + 36 | 0;
    HEAP32[$13_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $7_1;
    $5_1 = HEAP32[$1_1 + 20 >> 2];
    $7_1 = $4_1 + 44 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $5_1;
    $5_1 = $1_1 + 24 | 0;
    $7_1 = HEAP32[$5_1 + 4 >> 2];
    $13_1 = $4_1 + 52 | 0;
    HEAP32[$13_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $7_1;
    $5_1 = HEAP32[$1_1 + 36 >> 2];
    $7_1 = $4_1 + 60 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $5_1;
    $5_1 = $1_1 + 40 | 0;
    $7_1 = HEAP32[$5_1 + 4 >> 2];
    $13_1 = $4_1 + 68 | 0;
    HEAP32[$13_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $7_1;
    HEAP32[$4_1 + 8 >> 2] = $6_1;
    HEAP32[$4_1 + 4 >> 2] = 20852;
    HEAP32[$4_1 >> 2] = 20828;
    $6_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$4_1 + 12 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$4_1 + 16 >> 2] = $6_1;
    $6_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$4_1 + 28 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$4_1 + 32 >> 2] = $6_1;
    $6_1 = $1_1 + 56 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $7_1 = $4_1 + 84 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $5_1;
    $6_1 = HEAP32[$1_1 + 52 >> 2];
    $5_1 = $4_1 + 76 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $6_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 64 >> 2]]($2_1, $4_1, $4_1 + 112 | 0, $4_1 + 128 | 0);
    $6_1 = HEAP32[$2_1 + 4 >> 2];
   }
   if (($6_1 | 0) != 3) {
    break label$2
   }
   HEAP32[$4_1 + 136 >> 2] = 1566444395;
   HEAP32[$4_1 + 140 >> 2] = 0;
   HEAP32[$4_1 + 128 >> 2] = 1566444395;
   HEAP32[$4_1 + 132 >> 2] = 1566444395;
   HEAP32[$4_1 + 120 >> 2] = -581039253;
   HEAP32[$4_1 + 124 >> 2] = 0;
   HEAP32[$4_1 + 112 >> 2] = -581039253;
   HEAP32[$4_1 + 116 >> 2] = -581039253;
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   $6_1 = $3_1 + 8 | 0;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   $7_1 = $4_1 + 20 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $5_1;
   $6_1 = $1_1 + 8 | 0;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   $7_1 = $4_1 + 36 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $5_1;
   $6_1 = HEAP32[$1_1 + 20 >> 2];
   $5_1 = $4_1 + 44 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $6_1;
   $6_1 = $1_1 + 24 | 0;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   $7_1 = $4_1 + 52 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $5_1;
   $6_1 = HEAP32[$1_1 + 36 >> 2];
   $5_1 = $4_1 + 60 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $6_1;
   $6_1 = $1_1 + 40 | 0;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   $7_1 = $4_1 + 68 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $5_1;
   HEAP32[$4_1 + 8 >> 2] = $0;
   HEAP32[$4_1 + 4 >> 2] = 20852;
   HEAP32[$4_1 >> 2] = 20828;
   $0 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$4_1 + 12 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$4_1 + 16 >> 2] = $0;
   $0 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$4_1 + 28 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 + 32 >> 2] = $0;
   $0 = $1_1 + 56 | 0;
   $3_1 = HEAP32[$0 + 4 >> 2];
   $6_1 = $4_1 + 84 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $3_1;
   $0 = HEAP32[$1_1 + 52 >> 2];
   $3_1 = $4_1 + 76 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $0;
   $0 = HEAP32[$2_1 + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $4_1 | 4, $4_1 + 112 | 0, $4_1 + 128 | 0);
  }
  global$0 = $4_1 + 144 | 0;
 }
 
 function $873($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0;
  $1_1 = global$0 - 192 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
    break label$1
   }
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 100 >> 2]]($3_1);
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($1_1 + 80 | 0, $3_1);
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   label$2 : {
    if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 56 >> 2]]($3_1) & 8)) {
     break label$2
    }
    $3_1 = HEAP32[$0 + 24 >> 2];
    if (!$3_1) {
     break label$2
    }
    $9_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 36 >> 2]]($3_1) | 0;
    if (($9_1 | 0) < 1) {
     break label$2
    }
    $12_1 = $1_1 + 176 | 0;
    $3_1 = 0;
    while (1) {
     $6_1 = HEAP32[$0 + 24 >> 2];
     $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 40 >> 2]]($6_1, $3_1) | 0;
     $8_1 = HEAP32[$6_1 + 780 >> 2];
     if (($8_1 | 0) >= 1) {
      $6_1 = $6_1 + 160 | 0;
      while (1) {
       $10 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 40 >> 2]]($10, $6_1 + -124 | 0, $6_1 + -92 | 0, HEAPF32[$6_1 + -76 >> 2], HEAP32[$6_1 >> 2], $12_1);
       $6_1 = $6_1 + 192 | 0;
       $8_1 = $8_1 + -1 | 0;
       if ($8_1) {
        continue
       }
       break;
      };
     }
     $3_1 = $3_1 + 1 | 0;
     if (($9_1 | 0) != ($3_1 | 0)) {
      continue
     }
     break;
    };
   }
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 56 >> 2]]($3_1) & 3) | HEAP32[$0 + 8 >> 2] < 1) {
    break label$1
   }
   $8_1 = $1_1 + 160 | 0;
   $9_1 = $1_1 + 96 | 0;
   $12_1 = $1_1 + 112 | 0;
   $10 = $1_1 + 128 | 0;
   $13_1 = $1_1 + 144 | 0;
   $6_1 = 0;
   while (1) {
    $3_1 = HEAP32[HEAP32[$0 + 16 >> 2] + $6_1 >> 2];
    label$7 : {
     if (HEAPU8[$3_1 + 204 | 0] & 32) {
      break label$7
     }
     label$8 : {
      if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
       break label$8
      }
      $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 56 >> 2]]($2_1) & 1)) {
       break label$8
      }
      HEAP32[$1_1 + 72 >> 2] = 1053609165;
      HEAP32[$1_1 + 76 >> 2] = 0;
      HEAP32[$1_1 + 64 >> 2] = 1053609165;
      HEAP32[$1_1 + 68 >> 2] = 1053609165;
      $2_1 = HEAP32[$3_1 + 220 >> 2] + -1 | 0;
      label$9 : {
       if ($2_1 >>> 0 <= 4) {
        label$11 : {
         switch ($2_1 - 1 | 0) {
         default:
          $4_1 = $1_1 + 88 | 0;
          $7_1 = HEAP32[$4_1 + 4 >> 2];
          $2_1 = $1_1 + 72 | 0;
          HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
          HEAP32[$2_1 + 4 >> 2] = $7_1;
          $2_1 = HEAP32[$1_1 + 84 >> 2];
          HEAP32[$1_1 + 64 >> 2] = HEAP32[$1_1 + 80 >> 2];
          HEAP32[$1_1 + 68 >> 2] = $2_1;
          break label$9;
         case 0:
          $4_1 = $9_1 + 8 | 0;
          $7_1 = HEAP32[$4_1 + 4 >> 2];
          $2_1 = $1_1 + 72 | 0;
          HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
          HEAP32[$2_1 + 4 >> 2] = $7_1;
          $2_1 = HEAP32[$9_1 + 4 >> 2];
          HEAP32[$1_1 + 64 >> 2] = HEAP32[$9_1 >> 2];
          HEAP32[$1_1 + 68 >> 2] = $2_1;
          break label$9;
         case 1:
          $4_1 = $12_1 + 8 | 0;
          $7_1 = HEAP32[$4_1 + 4 >> 2];
          $2_1 = $1_1 + 72 | 0;
          HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
          HEAP32[$2_1 + 4 >> 2] = $7_1;
          $2_1 = HEAP32[$12_1 + 4 >> 2];
          HEAP32[$1_1 + 64 >> 2] = HEAP32[$12_1 >> 2];
          HEAP32[$1_1 + 68 >> 2] = $2_1;
          break label$9;
         case 2:
          $4_1 = $10 + 8 | 0;
          $7_1 = HEAP32[$4_1 + 4 >> 2];
          $2_1 = $1_1 + 72 | 0;
          HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
          HEAP32[$2_1 + 4 >> 2] = $7_1;
          $2_1 = HEAP32[$10 + 4 >> 2];
          HEAP32[$1_1 + 64 >> 2] = HEAP32[$10 >> 2];
          HEAP32[$1_1 + 68 >> 2] = $2_1;
          break label$9;
         case 3:
          break label$11;
         };
        }
        $4_1 = $13_1 + 8 | 0;
        $7_1 = HEAP32[$4_1 + 4 >> 2];
        $2_1 = $1_1 + 72 | 0;
        HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
        HEAP32[$2_1 + 4 >> 2] = $7_1;
        $2_1 = HEAP32[$13_1 + 4 >> 2];
        HEAP32[$1_1 + 64 >> 2] = HEAP32[$13_1 >> 2];
        HEAP32[$1_1 + 68 >> 2] = $2_1;
        break label$9;
       }
       HEAP32[$1_1 + 72 >> 2] = 1050253722;
       HEAP32[$1_1 + 76 >> 2] = 0;
       HEAP32[$1_1 + 64 >> 2] = 1050253722;
       HEAP32[$1_1 + 68 >> 2] = 1050253722;
      }
      if (HEAP8[$3_1 + 205 | 0] & 1) {
       $4_1 = $3_1 + 316 | 0;
       $7_1 = HEAP32[$4_1 + 4 >> 2];
       $2_1 = $1_1 + 72 | 0;
       HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$2_1 + 4 >> 2] = $7_1;
       $2_1 = HEAP32[$3_1 + 312 >> 2];
       HEAP32[$1_1 + 64 >> 2] = HEAP32[$3_1 + 308 >> 2];
       HEAP32[$1_1 + 68 >> 2] = $2_1;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $3_1 + 4 | 0, HEAP32[$3_1 + 192 >> 2], $1_1 - -64 | 0);
     }
     $2_1 = HEAP32[$0 + 72 >> 2];
     if (!$2_1) {
      break label$7
     }
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 56 >> 2]]($2_1) & 2)) {
      break label$7
     }
     $4_1 = $8_1 + 8 | 0;
     $7_1 = HEAP32[$4_1 + 4 >> 2];
     $2_1 = $1_1 + 40 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $7_1;
     $2_1 = HEAP32[$8_1 + 4 >> 2];
     HEAP32[$1_1 + 32 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$1_1 + 36 >> 2] = $2_1;
     $2_1 = HEAP32[$3_1 + 192 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $3_1 + 4 | 0, $1_1 - -64 | 0, $1_1 + 48 | 0);
     $5_1 = HEAPF32[5848];
     HEAPF32[$1_1 + 64 >> 2] = HEAPF32[$1_1 + 64 >> 2] - $5_1;
     HEAPF32[$1_1 + 68 >> 2] = HEAPF32[$1_1 + 68 >> 2] - $5_1;
     HEAPF32[$1_1 + 72 >> 2] = HEAPF32[$1_1 + 72 >> 2] - $5_1;
     HEAPF32[$1_1 + 48 >> 2] = $5_1 + HEAPF32[$1_1 + 48 >> 2];
     HEAPF32[$1_1 + 52 >> 2] = $5_1 + HEAPF32[$1_1 + 52 >> 2];
     HEAPF32[$1_1 + 56 >> 2] = $5_1 + HEAPF32[$1_1 + 56 >> 2];
     label$17 : {
      if (HEAPU8[$3_1 + 204 | 0] & 3 | (!HEAPU8[$0 + 44 | 0] | HEAP32[$3_1 + 252 >> 2] != 2)) {
       break label$17
      }
      $2_1 = HEAP32[$3_1 + 192 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $3_1 + 68 | 0, $1_1 + 16 | 0, $1_1);
      $11 = Math_fround(HEAPF32[$1_1 + 16 >> 2] - $5_1);
      HEAPF32[$1_1 + 16 >> 2] = $11;
      $14 = Math_fround(HEAPF32[$1_1 + 20 >> 2] - $5_1);
      HEAPF32[$1_1 + 20 >> 2] = $14;
      $15_1 = Math_fround(HEAPF32[$1_1 + 24 >> 2] - $5_1);
      HEAPF32[$1_1 + 24 >> 2] = $15_1;
      $16_1 = Math_fround($5_1 + HEAPF32[$1_1 >> 2]);
      HEAPF32[$1_1 >> 2] = $16_1;
      $17_1 = Math_fround($5_1 + HEAPF32[$1_1 + 4 >> 2]);
      HEAPF32[$1_1 + 4 >> 2] = $17_1;
      $5_1 = Math_fround($5_1 + HEAPF32[$1_1 + 8 >> 2]);
      HEAPF32[$1_1 + 8 >> 2] = $5_1;
      if (!!($11 < HEAPF32[$1_1 + 64 >> 2])) {
       HEAPF32[$1_1 + 64 >> 2] = $11
      }
      if (!!($14 < HEAPF32[$1_1 + 68 >> 2])) {
       HEAPF32[$1_1 + 68 >> 2] = $14
      }
      if (!!($15_1 < HEAPF32[$1_1 + 72 >> 2])) {
       HEAPF32[$1_1 + 72 >> 2] = $15_1
      }
      $11 = HEAPF32[$1_1 + 28 >> 2];
      if (!!($11 < HEAPF32[$1_1 + 76 >> 2])) {
       HEAPF32[$1_1 + 76 >> 2] = $11
      }
      if (!!(HEAPF32[$1_1 + 48 >> 2] < $16_1)) {
       HEAPF32[$1_1 + 48 >> 2] = $16_1
      }
      if (!!(HEAPF32[$1_1 + 52 >> 2] < $17_1)) {
       HEAPF32[$1_1 + 52 >> 2] = $17_1
      }
      if (!!(HEAPF32[$1_1 + 56 >> 2] < $5_1)) {
       HEAPF32[$1_1 + 56 >> 2] = $5_1
      }
      $5_1 = HEAPF32[$1_1 + 12 >> 2];
      if (!(HEAPF32[$1_1 + 60 >> 2] < $5_1)) {
       break label$17
      }
      HEAPF32[$1_1 + 60 >> 2] = $5_1;
     }
     $3_1 = HEAP32[$0 + 72 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 60 >> 2]]($3_1, $1_1 - -64 | 0, $1_1 + 48 | 0, $1_1 + 32 | 0);
    }
    $6_1 = $6_1 + 4 | 0;
    $18_1 = $18_1 + 1 | 0;
    if (($18_1 | 0) < HEAP32[$0 + 8 >> 2]) {
     continue
    }
    break;
   };
  }
  global$0 = $1_1 + 192 | 0;
 }
 
 function $874($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  HEAP8[$2_1 + 52 | 0] = 1;
  HEAP32[$2_1 + 48 >> 2] = 0;
  HEAP8[$2_1 + 72 | 0] = 1;
  $3_1 = $2_1 + 40 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 68 >> 2] = 0;
  HEAP8[$2_1 + 92 | 0] = 1;
  $3_1 = $2_1 + 60 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 88 >> 2] = 0;
  $3_1 = $2_1 + 80 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 28 >> 2] = 0;
  HEAP8[$2_1 + 32 | 0] = 1;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 24 >> 2] = 0;
  $3_1 = HEAP32[$0 + 8 >> 2];
  label$1 : {
   if (($3_1 | 0) < 1) {
    break label$1
   }
   while (1) {
    $6_1 = HEAP32[HEAP32[HEAP32[$0 + 16 >> 2] + ($8_1 << 2) >> 2] + 192 >> 2];
    HEAP32[$2_1 + 12 >> 2] = $6_1;
    $5_1 = $6_1 + ($6_1 << 15 ^ -1) | 0;
    $5_1 = Math_imul($5_1 >>> 10 ^ $5_1, 9);
    $5_1 = $5_1 >>> 6 ^ $5_1;
    $5_1 = ($5_1 << 11 ^ -1) + $5_1 | 0;
    $7_1 = $7_1 + -1 & ($5_1 >>> 16 ^ $5_1);
    label$3 : {
     label$4 : {
      if ($7_1 >>> 0 >= $4_1 >>> 0) {
       break label$4
      }
      $4_1 = HEAP32[HEAP32[$2_1 + 28 >> 2] + ($7_1 << 2) >> 2];
      if (($4_1 | 0) == -1) {
       break label$4
      }
      $7_1 = HEAP32[$2_1 + 48 >> 2];
      $5_1 = HEAP32[$2_1 + 88 >> 2];
      while (1) {
       if (HEAP32[$5_1 + ($4_1 << 3) >> 2] != ($6_1 | 0)) {
        $4_1 = HEAP32[$7_1 + ($4_1 << 2) >> 2];
        if (($4_1 | 0) != -1) {
         continue
        }
        break label$4;
       }
       break;
      };
      if (HEAP32[$2_1 + 68 >> 2]) {
       break label$3
      }
     }
     HEAP32[$2_1 >> 2] = $6_1;
     $875($2_1 + 16 | 0, $2_1, $2_1 + 12 | 0);
     $4_1 = HEAP32[$2_1 + 12 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 60 >> 2]]($4_1, $1_1);
     $3_1 = HEAP32[$0 + 8 >> 2];
    }
    $8_1 = $8_1 + 1 | 0;
    if (($8_1 | 0) < ($3_1 | 0)) {
     $4_1 = HEAP32[$2_1 + 20 >> 2];
     $7_1 = HEAP32[$2_1 + 64 >> 2];
     continue;
    }
    break;
   };
   if (($3_1 | 0) < 1) {
    break label$1
   }
   $4_1 = 0;
   $6_1 = 0;
   while (1) {
    $8_1 = HEAP32[HEAP32[$0 + 16 >> 2] + $4_1 >> 2];
    $7_1 = HEAP32[$8_1 + 252 >> 2];
    if (!(($7_1 | 0) != 1 ? ($7_1 | 0) != 64 : 0)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 24 >> 2]]($8_1, $1_1);
     $3_1 = HEAP32[$0 + 8 >> 2];
    }
    $4_1 = $4_1 + 4 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < ($3_1 | 0)) {
     continue
    }
    break;
   };
  }
  $0 = HEAP32[$2_1 + 88 >> 2];
  if ($0) {
   if (HEAPU8[$2_1 + 92 | 0]) {
    $80($0)
   }
   HEAP32[$2_1 + 88 >> 2] = 0;
  }
  HEAP32[$2_1 + 88 >> 2] = 0;
  HEAP8[$2_1 + 92 | 0] = 1;
  HEAP32[$2_1 + 80 >> 2] = 0;
  HEAP32[$2_1 + 84 >> 2] = 0;
  $0 = HEAP32[$2_1 + 68 >> 2];
  if ($0) {
   if (HEAPU8[$2_1 + 72 | 0]) {
    $80($0)
   }
   HEAP32[$2_1 + 68 >> 2] = 0;
  }
  HEAP32[$2_1 + 68 >> 2] = 0;
  HEAP8[$2_1 + 72 | 0] = 1;
  HEAP32[$2_1 + 60 >> 2] = 0;
  HEAP32[$2_1 + 64 >> 2] = 0;
  $0 = HEAP32[$2_1 + 48 >> 2];
  if ($0) {
   if (HEAPU8[$2_1 + 52 | 0]) {
    $80($0)
   }
   HEAP32[$2_1 + 48 >> 2] = 0;
  }
  HEAP32[$2_1 + 48 >> 2] = 0;
  HEAP8[$2_1 + 52 | 0] = 1;
  HEAP32[$2_1 + 40 >> 2] = 0;
  HEAP32[$2_1 + 44 >> 2] = 0;
  $0 = HEAP32[$2_1 + 28 >> 2];
  if ($0) {
   if (HEAPU8[$2_1 + 32 | 0]) {
    $80($0)
   }
   HEAP32[$2_1 + 28 >> 2] = 0;
  }
  global$0 = $2_1 + 96 | 0;
 }
 
 function $875($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0;
  label$1 : {
   $3_1 = HEAP32[$1_1 >> 2];
   $5_1 = ($3_1 << 15 ^ -1) + $3_1 | 0;
   $5_1 = Math_imul($5_1 >>> 10 ^ $5_1, 9);
   $5_1 = $5_1 >>> 6 ^ $5_1;
   $5_1 = ($5_1 << 11 ^ -1) + $5_1 | 0;
   $4_1 = $5_1 >>> 16 ^ $5_1;
   $5_1 = HEAP32[$0 + 48 >> 2];
   $9_1 = $4_1 & $5_1 + -1;
   label$2 : {
    if ($9_1 >>> 0 >= HEAPU32[$0 + 4 >> 2]) {
     break label$2
    }
    $6_1 = HEAP32[HEAP32[$0 + 12 >> 2] + ($9_1 << 2) >> 2];
    if (($6_1 | 0) == -1) {
     break label$2
    }
    $4_1 = HEAP32[$0 + 72 >> 2];
    while (1) {
     if (($3_1 | 0) == HEAP32[$4_1 + ($6_1 << 3) >> 2]) {
      break label$1
     }
     $6_1 = HEAP32[HEAP32[$0 + 32 >> 2] + ($6_1 << 2) >> 2];
     if (($6_1 | 0) != -1) {
      continue
     }
     break;
    };
   }
   $10 = HEAP32[$0 + 44 >> 2];
   $3_1 = $10;
   label$4 : {
    if (($3_1 | 0) != ($5_1 | 0)) {
     break label$4
    }
    $3_1 = $5_1;
    $7_1 = $3_1 ? $3_1 << 1 : 1;
    if (($3_1 | 0) >= ($7_1 | 0)) {
     break label$4
    }
    label$5 : {
     if (!$7_1) {
      $3_1 = $5_1;
      break label$5;
     }
     $8_1 = $79($7_1 << 2);
     $3_1 = HEAP32[$0 + 44 >> 2];
    }
    if (($3_1 | 0) >= 1) {
     $6_1 = 0;
     $4_1 = $3_1;
     while (1) {
      HEAP32[$6_1 + $8_1 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + $6_1 >> 2];
      $6_1 = $6_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break;
     };
    }
    $4_1 = HEAP32[$0 + 52 >> 2];
    if ($4_1) {
     if (HEAPU8[$0 + 56 | 0]) {
      $80($4_1);
      $3_1 = HEAP32[$0 + 44 >> 2];
     }
     HEAP32[$0 + 52 >> 2] = 0;
    }
    HEAP32[$0 + 52 >> 2] = $8_1;
    HEAP32[$0 + 48 >> 2] = $7_1;
    HEAP8[$0 + 56 | 0] = 1;
   }
   HEAP32[$0 + 44 >> 2] = $3_1 + 1;
   HEAP32[HEAP32[$0 + 52 >> 2] + ($3_1 << 2) >> 2] = HEAP32[$2_1 >> 2];
   $4_1 = HEAP32[$0 - -64 >> 2];
   label$11 : {
    if (($4_1 | 0) != HEAP32[$0 + 68 >> 2]) {
     break label$11
    }
    $2_1 = $4_1 ? $4_1 << 1 : 1;
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$11
    }
    label$12 : {
     if (!$2_1) {
      $8_1 = 0;
      break label$12;
     }
     $8_1 = $79($2_1 << 3);
     $4_1 = HEAP32[$0 + 64 >> 2];
    }
    if (($4_1 | 0) >= 1) {
     $6_1 = 0;
     while (1) {
      $7_1 = HEAP32[$0 + 72 >> 2] + $6_1 | 0;
      $11 = HEAP32[$7_1 + 4 >> 2];
      $3_1 = $6_1 + $8_1 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $11;
      $6_1 = $6_1 + 8 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break;
     };
    }
    $3_1 = HEAP32[$0 + 72 >> 2];
    if ($3_1) {
     if (HEAPU8[$0 + 76 | 0]) {
      $80($3_1)
     }
     HEAP32[$0 + 72 >> 2] = 0;
    }
    HEAP32[$0 + 72 >> 2] = $8_1;
    HEAP32[$0 + 68 >> 2] = $2_1;
    HEAP8[$0 + 76 | 0] = 1;
    $4_1 = HEAP32[$0 + 64 >> 2];
   }
   $3_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = HEAP32[$0 + 72 >> 2] + ($4_1 << 3) | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 64 >> 2] + 1;
   if (($5_1 | 0) < HEAP32[$0 + 48 >> 2]) {
    $876($0);
    $1_1 = HEAP32[$1_1 >> 2];
    $1_1 = ($1_1 << 15 ^ -1) + $1_1 | 0;
    $1_1 = Math_imul($1_1 >>> 10 ^ $1_1, 9);
    $1_1 = $1_1 >>> 6 ^ $1_1;
    $1_1 = ($1_1 << 11 ^ -1) + $1_1 | 0;
    $9_1 = HEAP32[$0 + 48 >> 2] + -1 & ($1_1 >>> 16 ^ $1_1);
   }
   $1_1 = HEAP32[$0 + 32 >> 2] + ($10 << 2) | 0;
   $0 = HEAP32[$0 + 12 >> 2] + ($9_1 << 2) | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = $10;
   return;
  }
  HEAP32[HEAP32[$0 + 52 >> 2] + ($6_1 << 2) >> 2] = HEAP32[$2_1 >> 2];
 }
 
 function $876($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = HEAP32[$0 + 4 >> 2];
  $4_1 = HEAP32[$0 + 48 >> 2];
  label$1 : {
   if (($7_1 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAP32[$0 + 8 >> 2] >= ($4_1 | 0)) {
     $1_1 = HEAP32[$0 + 12 >> 2];
     break label$2;
    }
    if ($4_1) {
     $1_1 = $79($4_1 << 2);
     $3_1 = HEAP32[$0 + 4 >> 2];
    } else {
     $3_1 = $7_1
    }
    $6_1 = HEAP32[$0 + 12 >> 2];
    label$6 : {
     label$7 : {
      if (($3_1 | 0) >= 1) {
       $5_1 = $1_1;
       $2_1 = $6_1;
       while (1) {
        HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
        $5_1 = $5_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $3_1 = $3_1 + -1 | 0;
        if ($3_1) {
         continue
        }
        break;
       };
       break label$7;
      }
      if ($6_1) {
       break label$7
      }
      break label$6;
     }
     if (HEAPU8[$0 + 16 | 0]) {
      $80($6_1)
     }
    }
    HEAP32[$0 + 12 >> 2] = $1_1;
    HEAP8[$0 + 16 | 0] = 1;
    HEAP32[$0 + 8 >> 2] = $4_1;
   }
   $2_1 = $7_1 << 2;
   $8_1 = $4_1 << 2;
   $17($2_1 + $1_1 | 0, 0, $8_1 - $2_1 | 0);
   HEAP32[$0 + 4 >> 2] = $4_1;
   $9_1 = HEAP32[$0 + 24 >> 2];
   if (($9_1 | 0) < ($4_1 | 0)) {
    label$12 : {
     if (HEAP32[$0 + 28 >> 2] >= ($4_1 | 0)) {
      $1_1 = HEAP32[$0 + 32 >> 2];
      break label$12;
     }
     label$14 : {
      if (!$4_1) {
       $1_1 = 0;
       $3_1 = $9_1;
       break label$14;
      }
      $1_1 = $79($8_1);
      $3_1 = HEAP32[$0 + 24 >> 2];
     }
     $6_1 = HEAP32[$0 + 32 >> 2];
     label$16 : {
      if (($3_1 | 0) >= 1) {
       $5_1 = $1_1;
       $2_1 = $6_1;
       while (1) {
        HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
        $5_1 = $5_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $3_1 = $3_1 + -1 | 0;
        if ($3_1) {
         continue
        }
        break;
       };
       break label$16;
      }
      if ($6_1) {
       break label$16
      }
      HEAP32[$0 + 32 >> 2] = $1_1;
      HEAP32[$0 + 28 >> 2] = $4_1;
      HEAP8[$0 + 36 | 0] = 1;
      break label$12;
     }
     if (HEAPU8[$0 + 36 | 0]) {
      $80($6_1)
     }
     HEAP32[$0 + 32 >> 2] = $1_1;
     HEAP8[$0 + 36 | 0] = 1;
     HEAP32[$0 + 28 >> 2] = $4_1;
    }
    $2_1 = $9_1 << 2;
    $17($2_1 + $1_1 | 0, 0, $8_1 - $2_1 | 0);
   }
   HEAP32[$0 + 24 >> 2] = $4_1;
   if (($4_1 | 0) >= 1) {
    $17(HEAP32[$0 + 12 >> 2], 255, $8_1);
    $17(HEAP32[$0 + 32 >> 2], 255, $8_1);
   }
   if (($7_1 | 0) < 1) {
    break label$1
   }
   $5_1 = HEAP32[$0 + 32 >> 2];
   $2_1 = HEAP32[$0 + 72 >> 2];
   $6_1 = HEAP32[$0 + 12 >> 2];
   $3_1 = 0;
   while (1) {
    $1_1 = HEAP32[$2_1 >> 2];
    $1_1 = ($1_1 << 15 ^ -1) + $1_1 | 0;
    $1_1 = Math_imul($1_1 >>> 10 ^ $1_1, 9);
    $1_1 = $1_1 >>> 6 ^ $1_1;
    $1_1 = ($1_1 << 11 ^ -1) + $1_1 | 0;
    $1_1 = $6_1 + ((HEAP32[$0 + 48 >> 2] + -1 & ($1_1 >>> 16 ^ $1_1)) << 2) | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$1_1 >> 2] = $3_1;
    $2_1 = $2_1 + 8 | 0;
    $5_1 = $5_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $877($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 32 >> 2]]($1_1);
  $874($0, $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1);
 }
 
 function $878($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 72 >> 2] = $1_1;
 }
 
 function $881($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0);
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 44 >> 2] = $4_1;
  HEAP32[$5_1 + 40 >> 2] = $3_1;
  $9_1 = HEAPF32[$0 - -64 >> 2];
  $10 = HEAPF32[$0 + 60 >> 2];
  $11 = HEAPF32[$0 + 80 >> 2];
  $12_1 = HEAPF32[$0 + 72 >> 2];
  $13_1 = HEAPF32[$0 + 76 >> 2];
  $14 = HEAPF32[$0 + 96 >> 2];
  $15_1 = HEAPF32[$0 + 88 >> 2];
  $16_1 = HEAPF32[$0 + 92 >> 2];
  $17_1 = HEAPF32[$0 + 56 >> 2];
  $6_1 = HEAPF32[$1_1 + 8 >> 2];
  $7_1 = HEAPF32[$1_1 >> 2];
  $8_1 = HEAPF32[$1_1 + 4 >> 2];
  HEAP32[$5_1 + 28 >> 2] = 0;
  HEAPF32[$5_1 + 24 >> 2] = Math_fround(Math_fround($7_1 * $15_1) + Math_fround($8_1 * $16_1)) + Math_fround($6_1 * $14);
  HEAPF32[$5_1 + 20 >> 2] = Math_fround(Math_fround($7_1 * $12_1) + Math_fround($8_1 * $13_1)) + Math_fround($6_1 * $11);
  HEAPF32[$5_1 + 16 >> 2] = Math_fround(Math_fround($17_1 * $7_1) + Math_fround($10 * $8_1)) + Math_fround($9_1 * $6_1);
  HEAPF32[$5_1 + 32 >> 2] = $2_1;
  HEAP32[$5_1 + 8 >> 2] = HEAP32[$0 + 48 >> 2];
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 40;
  $0 = HEAP32[$0 + 44 >> 2];
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $5_1 + 8 | 0, 1));
  global$0 = $5_1 + 48 | 0;
  return Math_fround($2_1);
 }
 
 function $885($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0);
  $2_1 = global$0 - 128 | 0;
  global$0 = $2_1;
  $12_1 = HEAP32[$1_1 + 36 >> 2];
  $1_1 = HEAP32[HEAP32[$0 + 8 >> 2] + 28 >> 2] + Math_imul($12_1, 80) | 0;
  $25 = HEAP32[$1_1 + 64 >> 2];
  $13_1 = HEAPF32[$1_1 + 32 >> 2];
  $14 = HEAPF32[$1_1 >> 2];
  $15_1 = HEAPF32[$1_1 + 16 >> 2];
  $16_1 = HEAPF32[$1_1 + 56 >> 2];
  $17_1 = HEAPF32[$1_1 + 52 >> 2];
  $18_1 = HEAPF32[$1_1 + 48 >> 2];
  $19_1 = HEAPF32[$1_1 + 36 >> 2];
  $20 = HEAPF32[$1_1 + 20 >> 2];
  $21 = HEAPF32[$1_1 + 4 >> 2];
  $22_1 = HEAPF32[$1_1 + 40 >> 2];
  $23_1 = HEAPF32[$1_1 + 24 >> 2];
  $24_1 = HEAPF32[$1_1 + 8 >> 2];
  $1_1 = HEAP32[$0 + 12 >> 2];
  $26_1 = HEAPF32[$1_1 + 52 >> 2];
  $27_1 = HEAPF32[$1_1 + 56 >> 2];
  $3_1 = HEAPF32[$1_1 + 24 >> 2];
  $4_1 = HEAPF32[$1_1 + 20 >> 2];
  $5_1 = HEAPF32[$1_1 + 40 >> 2];
  $6_1 = HEAPF32[$1_1 + 36 >> 2];
  $28_1 = HEAPF32[$1_1 + 48 >> 2];
  $7_1 = HEAPF32[$1_1 + 8 >> 2];
  $8_1 = HEAPF32[$1_1 >> 2];
  $9_1 = HEAPF32[$1_1 + 4 >> 2];
  $10 = HEAPF32[$1_1 + 16 >> 2];
  $11 = HEAPF32[$1_1 + 32 >> 2];
  HEAP32[$2_1 + 124 >> 2] = 0;
  HEAP32[$2_1 + 108 >> 2] = 0;
  HEAP32[$2_1 + 92 >> 2] = 0;
  HEAPF32[$2_1 + 104 >> 2] = Math_fround(Math_fround($24_1 * $11) + Math_fround($23_1 * $6_1)) + Math_fround($22_1 * $5_1);
  HEAPF32[$2_1 + 100 >> 2] = Math_fround(Math_fround($21 * $11) + Math_fround($20 * $6_1)) + Math_fround($19_1 * $5_1);
  HEAPF32[$2_1 + 88 >> 2] = Math_fround(Math_fround($24_1 * $10) + Math_fround($23_1 * $4_1)) + Math_fround($22_1 * $3_1);
  HEAPF32[$2_1 + 84 >> 2] = Math_fround(Math_fround($21 * $10) + Math_fround($20 * $4_1)) + Math_fround($19_1 * $3_1);
  HEAPF32[$2_1 + 120 >> 2] = $27_1 + Math_fround(Math_fround(Math_fround($11 * $18_1) + Math_fround($6_1 * $17_1)) + Math_fround($5_1 * $16_1));
  HEAPF32[$2_1 + 116 >> 2] = $26_1 + Math_fround(Math_fround(Math_fround($10 * $18_1) + Math_fround($4_1 * $17_1)) + Math_fround($3_1 * $16_1));
  HEAP32[$2_1 + 76 >> 2] = 0;
  HEAPF32[$2_1 + 72 >> 2] = Math_fround(Math_fround($8_1 * $24_1) + Math_fround($9_1 * $23_1)) + Math_fround($7_1 * $22_1);
  HEAPF32[$2_1 + 68 >> 2] = Math_fround(Math_fround($8_1 * $21) + Math_fround($9_1 * $20)) + Math_fround($7_1 * $19_1);
  HEAPF32[$2_1 + 64 >> 2] = Math_fround(Math_fround($14 * $8_1) + Math_fround($15_1 * $9_1)) + Math_fround($13_1 * $7_1);
  HEAPF32[$2_1 + 112 >> 2] = $28_1 + Math_fround(Math_fround(Math_fround($8_1 * $18_1) + Math_fround($9_1 * $17_1)) + Math_fround($7_1 * $16_1));
  HEAPF32[$2_1 + 96 >> 2] = Math_fround(Math_fround($14 * $11) + Math_fround($15_1 * $6_1)) + Math_fround($13_1 * $5_1);
  HEAPF32[$2_1 + 80 >> 2] = Math_fround(Math_fround($14 * $10) + Math_fround($15_1 * $4_1)) + Math_fround($13_1 * $3_1);
  HEAP32[$2_1 + 60 >> 2] = $12_1;
  HEAP32[$2_1 + 56 >> 2] = -1;
  HEAP32[$2_1 + 44 >> 2] = $25;
  HEAP32[$2_1 + 40 >> 2] = 0;
  HEAP32[$2_1 + 48 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$2_1 + 52 >> 2] = $2_1 - -64;
  HEAP32[$2_1 + 12 >> 2] = 1065353216;
  HEAP32[$2_1 + 24 >> 2] = -1;
  HEAP32[$2_1 + 28 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 1;
  HEAP32[$2_1 + 36 >> 2] = $12_1;
  HEAP32[$2_1 + 8 >> 2] = 19568;
  $1_1 = HEAP32[$0 + 24 >> 2];
  HEAP32[$2_1 + 32 >> 2] = $1_1;
  HEAP32[$2_1 + 12 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 28 >> 2] = HEAP32[$1_1 + 20 >> 2];
  $864(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], $2_1 + 40 | 0, $2_1 + 8 | 0);
  global$0 = $2_1 + 128 | 0;
 }
 
 function $887($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $0 = HEAP32[$0 + 24 >> 2];
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1_1) | 0;
 }
 
 function $888($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 8 >> 2] = -1;
  HEAP32[$3_1 + 12 >> 2] = HEAP32[$0 + 28 >> 2];
  if (!HEAP32[$1_1 + 4 >> 2]) {
   HEAP32[$1_1 + 4 >> 2] = $3_1 + 8
  }
  $4_1 = HEAP32[$0 + 24 >> 2];
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $1_1, $2_1));
  HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] + 4 >> 2];
  global$0 = $3_1 + 16 | 0;
  return Math_fround($5_1);
 }
 
 function $890($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = global$0 + -64 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 60 >> 2] = $5_1;
  HEAP32[$6_1 + 56 >> 2] = $4_1;
  $4_1 = HEAP32[$0 + 212 >> 2];
  if (!!(HEAPF32[$4_1 + 4 >> 2] >= $3_1)) {
   $7_1 = $2_1 + 8 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 40 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 8 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 24 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$6_1 + 32 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$6_1 + 36 >> 2] = $5_1;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 20 >> 2] = $2_1;
   HEAPF32[$6_1 + 48 >> 2] = $3_1;
   HEAP32[$6_1 + 8 >> 2] = HEAP32[$0 + 216 >> 2];
   HEAP32[$6_1 + 12 >> 2] = $6_1 + 56;
   $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $6_1 + 8 | 0, 1));
  }
  global$0 = $6_1 - -64 | 0;
  return Math_fround($3_1);
 }
 
 function $894($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0);
  $2_1 = global$0 - 112 | 0;
  global$0 = $2_1;
  $12_1 = HEAP32[$1_1 + 36 >> 2];
  $1_1 = HEAP32[HEAP32[$0 + 24 >> 2] + 28 >> 2] + Math_imul($12_1, 80) | 0;
  $22_1 = HEAP32[$1_1 + 64 >> 2];
  $13_1 = HEAPF32[$1_1 + 32 >> 2];
  $14 = HEAPF32[$1_1 >> 2];
  $15_1 = HEAPF32[$1_1 + 16 >> 2];
  $16_1 = HEAPF32[$1_1 + 56 >> 2];
  $17_1 = HEAPF32[$1_1 + 52 >> 2];
  $18_1 = HEAPF32[$1_1 + 48 >> 2];
  $19_1 = HEAPF32[$1_1 + 36 >> 2];
  $20 = HEAPF32[$1_1 + 20 >> 2];
  $21 = HEAPF32[$1_1 + 4 >> 2];
  $3_1 = HEAPF32[$1_1 + 40 >> 2];
  $4_1 = HEAPF32[$1_1 + 24 >> 2];
  $5_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAP32[$2_1 + 108 >> 2] = 0;
  HEAP32[$2_1 + 92 >> 2] = 0;
  HEAP32[$2_1 + 76 >> 2] = 0;
  $1_1 = HEAP32[$0 + 28 >> 2];
  $6_1 = HEAPF32[$1_1 + 32 >> 2];
  $7_1 = HEAPF32[$1_1 + 36 >> 2];
  $8_1 = HEAPF32[$1_1 + 40 >> 2];
  HEAPF32[$2_1 + 88 >> 2] = Math_fround(Math_fround($5_1 * $6_1) + Math_fround($4_1 * $7_1)) + Math_fround($3_1 * $8_1);
  HEAPF32[$2_1 + 84 >> 2] = Math_fround(Math_fround($21 * $6_1) + Math_fround($20 * $7_1)) + Math_fround($19_1 * $8_1);
  $9_1 = HEAPF32[$1_1 + 16 >> 2];
  $10 = HEAPF32[$1_1 + 20 >> 2];
  $11 = HEAPF32[$1_1 + 24 >> 2];
  HEAPF32[$2_1 + 72 >> 2] = Math_fround(Math_fround($5_1 * $9_1) + Math_fround($4_1 * $10)) + Math_fround($3_1 * $11);
  HEAPF32[$2_1 + 68 >> 2] = Math_fround(Math_fround($21 * $9_1) + Math_fround($20 * $10)) + Math_fround($19_1 * $11);
  HEAPF32[$2_1 + 104 >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $6_1) + Math_fround($17_1 * $7_1)) + Math_fround($16_1 * $8_1)) + HEAPF32[$1_1 + 56 >> 2];
  HEAPF32[$2_1 + 100 >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $9_1) + Math_fround($17_1 * $10)) + Math_fround($16_1 * $11)) + HEAPF32[$1_1 + 52 >> 2];
  HEAP32[$2_1 + 60 >> 2] = 0;
  $23_1 = $5_1;
  $5_1 = HEAPF32[$1_1 >> 2];
  $24_1 = $4_1;
  $4_1 = HEAPF32[$1_1 + 4 >> 2];
  $25 = $3_1;
  $3_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAPF32[$2_1 + 56 >> 2] = Math_fround(Math_fround($23_1 * $5_1) + Math_fround($24_1 * $4_1)) + Math_fround($25 * $3_1);
  HEAPF32[$2_1 + 52 >> 2] = Math_fround(Math_fround($21 * $5_1) + Math_fround($20 * $4_1)) + Math_fround($19_1 * $3_1);
  HEAPF32[$2_1 + 48 >> 2] = Math_fround(Math_fround($14 * $5_1) + Math_fround($15_1 * $4_1)) + Math_fround($13_1 * $3_1);
  HEAPF32[$2_1 + 96 >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $5_1) + Math_fround($17_1 * $4_1)) + Math_fround($16_1 * $3_1)) + HEAPF32[$1_1 + 48 >> 2];
  HEAPF32[$2_1 + 80 >> 2] = Math_fround(Math_fround($14 * $6_1) + Math_fround($15_1 * $7_1)) + Math_fround($13_1 * $8_1);
  HEAPF32[$2_1 + 64 >> 2] = Math_fround(Math_fround($14 * $9_1) + Math_fround($15_1 * $10)) + Math_fround($13_1 * $11);
  HEAP32[$2_1 + 28 >> 2] = 1065353216;
  HEAP32[$2_1 + 32 >> 2] = 1;
  HEAP32[$2_1 + 36 >> 2] = -1;
  HEAP32[$2_1 + 44 >> 2] = $12_1;
  HEAP32[$2_1 + 24 >> 2] = 20384;
  $1_1 = HEAP32[$0 + 32 >> 2];
  HEAP32[$2_1 + 40 >> 2] = $1_1;
  HEAP32[$2_1 + 28 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 20 >> 2] = $12_1;
  HEAP32[$2_1 + 16 >> 2] = -1;
  HEAP32[$2_1 + 4 >> 2] = $22_1;
  $1_1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$2_1 + 12 >> 2] = $2_1 + 48;
  $867(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $2_1 + 24 | 0, HEAPF32[$0 + 20 >> 2]);
  global$0 = $2_1 + 112 | 0;
 }
 
 function $896($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $0 = HEAP32[$0 + 16 >> 2];
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1_1) | 0;
 }
 
 function $897($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 8 >> 2] = -1;
  HEAP32[$3_1 + 12 >> 2] = HEAP32[$0 + 20 >> 2];
  if (!HEAP32[$1_1 + 4 >> 2]) {
   HEAP32[$1_1 + 4 >> 2] = $3_1 + 8
  }
  $4_1 = HEAP32[$0 + 16 >> 2];
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $1_1, $2_1));
  HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] + 4 >> 2];
  global$0 = $3_1 + 16 | 0;
  return Math_fround($5_1);
 }
 
 function $899($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0 + 216 >> 2];
  label$1 : {
   if (HEAPF32[$3_1 + 4 >> 2] == Math_fround(0.0)) {
    break label$1
   }
   $4_1 = 1;
   $1_1 = HEAP32[$1_1 >> 2];
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, HEAP32[$1_1 + 188 >> 2])) {
    break label$1
   }
   $3_1 = HEAP32[$0 + 216 >> 2];
   $5_1 = HEAP32[$1_1 + 192 >> 2];
   HEAP32[$2_1 + 24 >> 2] = -1;
   HEAP32[$2_1 + 28 >> 2] = -1;
   HEAP32[$2_1 + 20 >> 2] = $1_1 + 4;
   HEAP32[$2_1 + 16 >> 2] = $1_1;
   HEAP32[$2_1 + 12 >> 2] = $5_1;
   HEAP32[$2_1 + 8 >> 2] = 0;
   $864($0 + 68 | 0, $0 + 132 | 0, $2_1 + 8 | 0, $3_1);
  }
  global$0 = $2_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $901($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0 + 184 >> 2];
  label$1 : {
   if (HEAPF32[$3_1 + 4 >> 2] == Math_fround(0.0)) {
    break label$1
   }
   $4_1 = 1;
   $1_1 = HEAP32[$1_1 >> 2];
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, HEAP32[$1_1 + 188 >> 2])) {
    break label$1
   }
   $5_1 = HEAPF32[$0 + 188 >> 2];
   $3_1 = HEAP32[$0 + 184 >> 2];
   $6_1 = HEAP32[$0 + 192 >> 2];
   $7_1 = HEAP32[$1_1 + 192 >> 2];
   HEAP32[$2_1 + 24 >> 2] = -1;
   HEAP32[$2_1 + 28 >> 2] = -1;
   HEAP32[$2_1 + 20 >> 2] = $1_1 + 4;
   HEAP32[$2_1 + 16 >> 2] = $1_1;
   HEAP32[$2_1 + 12 >> 2] = $7_1;
   HEAP32[$2_1 + 8 >> 2] = 0;
   $867($6_1, $0 + 36 | 0, $0 + 100 | 0, $2_1 + 8 | 0, $3_1, $5_1);
  }
  global$0 = $2_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $903($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0);
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 92 >> 2] = 0;
  $4_1 = HEAPF32[$1_1 >> 2];
  $9_1 = HEAPF32[$0 + 60 >> 2];
  $6_1 = HEAPF32[$1_1 + 4 >> 2];
  $15_1 = HEAPF32[$0 - -64 >> 2];
  $7_1 = HEAPF32[$1_1 + 8 >> 2];
  $16_1 = HEAPF32[$0 + 68 >> 2];
  $17_1 = HEAPF32[$0 + 84 >> 2];
  $12_1 = Math_fround(Math_fround(Math_fround(Math_fround($4_1 * $9_1) + Math_fround($6_1 * $15_1)) + Math_fround($7_1 * $16_1)) + $17_1);
  HEAPF32[$2_1 + 88 >> 2] = $12_1;
  $8_1 = HEAPF32[$0 + 44 >> 2];
  $18_1 = HEAPF32[$0 + 48 >> 2];
  $19_1 = HEAPF32[$0 + 52 >> 2];
  $20 = HEAPF32[$0 + 80 >> 2];
  $5_1 = Math_fround(Math_fround(Math_fround(Math_fround($4_1 * $8_1) + Math_fround($6_1 * $18_1)) + Math_fround($7_1 * $19_1)) + $20);
  HEAPF32[$2_1 + 84 >> 2] = $5_1;
  $10 = $4_1;
  $4_1 = HEAPF32[$0 + 28 >> 2];
  $11 = $6_1;
  $6_1 = HEAPF32[$0 + 32 >> 2];
  $21 = $7_1;
  $7_1 = HEAPF32[$0 + 36 >> 2];
  $13_1 = HEAPF32[$0 + 76 >> 2];
  $24_1 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $4_1) + Math_fround($11 * $6_1)) + Math_fround($21 * $7_1)) + $13_1);
  HEAPF32[$2_1 + 80 >> 2] = $24_1;
  HEAP32[$2_1 + 76 >> 2] = 0;
  HEAP32[$2_1 + 60 >> 2] = 0;
  $14 = HEAPF32[$1_1 + 16 >> 2];
  $10 = HEAPF32[$1_1 + 20 >> 2];
  $11 = HEAPF32[$1_1 + 24 >> 2];
  $22_1 = Math_fround($13_1 + Math_fround(Math_fround(Math_fround($4_1 * $14) + Math_fround($6_1 * $10)) + Math_fround($7_1 * $11)));
  HEAPF32[$2_1 + 64 >> 2] = $22_1;
  $23_1 = Math_fround($20 + Math_fround(Math_fround(Math_fround($8_1 * $14) + Math_fround($18_1 * $10)) + Math_fround($19_1 * $11)));
  HEAPF32[$2_1 + 68 >> 2] = $23_1;
  $14 = Math_fround($17_1 + Math_fround(Math_fround(Math_fround($9_1 * $14) + Math_fround($15_1 * $10)) + Math_fround($16_1 * $11)));
  HEAPF32[$2_1 + 72 >> 2] = $14;
  $10 = $4_1;
  $4_1 = HEAPF32[$1_1 + 32 >> 2];
  $11 = $6_1;
  $6_1 = HEAPF32[$1_1 + 36 >> 2];
  $21 = $7_1;
  $7_1 = HEAPF32[$1_1 + 40 >> 2];
  $13_1 = Math_fround($13_1 + Math_fround(Math_fround(Math_fround($10 * $4_1) + Math_fround($11 * $6_1)) + Math_fround($21 * $7_1)));
  HEAPF32[$2_1 + 48 >> 2] = $13_1;
  $8_1 = Math_fround($20 + Math_fround(Math_fround(Math_fround($8_1 * $4_1) + Math_fround($18_1 * $6_1)) + Math_fround($19_1 * $7_1)));
  HEAPF32[$2_1 + 52 >> 2] = $8_1;
  $4_1 = Math_fround($17_1 + Math_fround(Math_fround(Math_fround($9_1 * $4_1) + Math_fround($15_1 * $6_1)) + Math_fround($16_1 * $7_1)));
  HEAPF32[$2_1 + 56 >> 2] = $4_1;
  HEAP32[$2_1 + 44 >> 2] = 0;
  $6_1 = Math_fround(Math_fround(Math_fround($12_1 + $14) + $4_1) * Math_fround(.3333333432674408));
  HEAPF32[$2_1 + 40 >> 2] = $6_1;
  $15_1 = Math_fround(Math_fround(Math_fround($5_1 + $23_1) + $8_1) * Math_fround(.3333333432674408));
  HEAPF32[$2_1 + 36 >> 2] = $15_1;
  $7_1 = Math_fround(Math_fround(Math_fround($24_1 + $22_1) + $13_1) * Math_fround(.3333333432674408));
  HEAPF32[$2_1 + 32 >> 2] = $7_1;
  $1_1 = HEAP32[$0 + 8 >> 2];
  if (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 56 >> 2]]($1_1) & 16384) {
   $9_1 = HEAPF32[$2_1 + 80 >> 2];
   HEAP32[$2_1 + 24 >> 2] = 0;
   HEAP32[$2_1 + 28 >> 2] = 0;
   HEAP32[$2_1 + 16 >> 2] = 1065353216;
   HEAP32[$2_1 + 20 >> 2] = 1065353216;
   $1_1 = HEAP32[$0 + 8 >> 2];
   HEAP32[$2_1 + 12 >> 2] = 0;
   $16_1 = Math_fround($22_1 - $9_1);
   $17_1 = Math_fround($8_1 - $5_1);
   $8_1 = Math_fround($23_1 - $5_1);
   $9_1 = Math_fround($13_1 - $9_1);
   $5_1 = Math_fround(Math_fround($16_1 * $17_1) - Math_fround($8_1 * $9_1));
   $10 = $5_1;
   $11 = Math_fround($5_1 * $5_1);
   $5_1 = Math_fround($4_1 - $12_1);
   $4_1 = Math_fround($14 - $12_1);
   $12_1 = Math_fround(Math_fround($8_1 * $5_1) - Math_fround($4_1 * $17_1));
   $5_1 = Math_fround(Math_fround($4_1 * $9_1) - Math_fround($16_1 * $5_1));
   $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($11 + Math_fround(Math_fround($12_1 * $12_1) + Math_fround($5_1 * $5_1))))));
   HEAPF32[$2_1 + 8 >> 2] = Math_fround($10 * $4_1) + $6_1;
   HEAPF32[$2_1 + 4 >> 2] = $15_1 + Math_fround($5_1 * $4_1);
   HEAPF32[$2_1 >> 2] = $7_1 + Math_fround($12_1 * $4_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, $2_1 + 32 | 0, $2_1, $2_1 + 16 | 0);
  }
  $3_1 = HEAP32[$0 + 8 >> 2];
  $1_1 = $0 + 12 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $2_1 + 80 | 0, $2_1 - -64 | 0, $1_1);
  $3_1 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $2_1 - -64 | 0, $2_1 + 48 | 0, $1_1);
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $2_1 + 48 | 0, $2_1 + 80 | 0, $1_1);
  global$0 = $2_1 + 96 | 0;
 }
 
 function $904($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1_1, $2_1, $3_1);
 }
 
 function $905($0) {
  $0 = $0 | 0;
  return $0 + -4 | 0;
 }
 
 function $906($0) {
  $0 = $0 | 0;
  $37($0 + -4 | 0);
 }
 
 function $907($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0 = $0 + -4 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1_1, $2_1, $3_1);
 }
 
 function $908($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 12 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 16 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 12 >> 2] = 0;
  }
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
 }
 
 function $910($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = HEAP32[$0 + 4 >> 2];
  if (($4_1 | 0) < ($1_1 | 0)) {
   if (HEAP32[$0 + 8 >> 2] < ($1_1 | 0)) {
    label$3 : {
     if (!$1_1) {
      $2_1 = $4_1;
      break label$3;
     }
     $5_1 = $79($1_1 << 3);
     $2_1 = HEAP32[$0 + 4 >> 2];
    }
    if (($2_1 | 0) >= 1) {
     while (1) {
      $6_1 = HEAP32[$0 + 12 >> 2] + $3_1 | 0;
      $8_1 = HEAP32[$6_1 + 4 >> 2];
      $7_1 = $3_1 + $5_1 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $8_1;
      $3_1 = $3_1 + 8 | 0;
      $2_1 = $2_1 + -1 | 0;
      if ($2_1) {
       continue
      }
      break;
     }
    }
    $2_1 = HEAP32[$0 + 12 >> 2];
    if ($2_1) {
     if (HEAPU8[$0 + 16 | 0]) {
      $80($2_1)
     }
     HEAP32[$0 + 12 >> 2] = 0;
    }
    HEAP32[$0 + 12 >> 2] = $5_1;
    HEAP8[$0 + 16 | 0] = 1;
    HEAP32[$0 + 8 >> 2] = $1_1;
   }
   $3_1 = $4_1 << 3;
   $2_1 = $1_1 - $4_1 | 0;
   while (1) {
    $4_1 = HEAP32[$0 + 12 >> 2] + $3_1 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    $3_1 = $3_1 + 8 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 4 >> 2] = $1_1;
  if (($1_1 | 0) >= 1) {
   $3_1 = HEAP32[$0 + 12 >> 2];
   $2_1 = 0;
   while (1) {
    HEAP32[$3_1 >> 2] = $2_1;
    HEAP32[$3_1 + 4 >> 2] = 1;
    $3_1 = $3_1 + 8 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $911($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $2_1 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   if (($2_1 | 0) <= 0) {
    break label$1
   }
   $5_1 = HEAP32[$0 + 12 >> 2];
   while (1) {
    $1_1 = $6_1;
    $7_1 = ($1_1 << 3) + $5_1 | 0;
    $3_1 = HEAP32[$7_1 >> 2];
    if (($1_1 | 0) != ($3_1 | 0)) {
     $8_1 = $7_1;
     while (1) {
      $1_1 = ($3_1 << 3) + $5_1 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$1_1 >> 2];
      $1_1 = HEAP32[$1_1 >> 2];
      $8_1 = ($1_1 << 3) + $5_1 | 0;
      $3_1 = HEAP32[$8_1 >> 2];
      if (($1_1 | 0) != ($3_1 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$7_1 >> 2] = $1_1;
    $6_1 = $6_1 + 1 | 0;
    if (($2_1 | 0) != ($6_1 | 0)) {
     continue
    }
    break;
   };
   if (($2_1 | 0) < 2) {
    break label$1
   }
   $912($0, $4_1 + 8 | 0, 0, $2_1 + -1 | 0);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $912($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0;
  while (1) {
   $11 = $2_1;
   $8_1 = HEAP32[$0 + 12 >> 2];
   $12_1 = HEAP32[$8_1 + (($2_1 + $3_1 | 0) / 2 << 3) >> 2];
   $6_1 = $2_1;
   $7_1 = $3_1;
   while (1) {
    $5_1 = (($6_1 << 3) + $8_1 | 0) + -8 | 0;
    while (1) {
     $6_1 = $6_1 + 1 | 0;
     $5_1 = $5_1 + 8 | 0;
     if (HEAP32[$5_1 >> 2] < ($12_1 | 0)) {
      continue
     }
     break;
    };
    $2_1 = $6_1 + -1 | 0;
    $4_1 = ($7_1 << 3) + 8 | 0;
    while (1) {
     $7_1 = $7_1 + -1 | 0;
     $9_1 = $4_1 + $8_1 | 0;
     $10 = $4_1 + -8 | 0;
     $4_1 = $10;
     if (HEAP32[$9_1 + -8 >> 2] > ($12_1 | 0)) {
      continue
     }
     break;
    };
    $4_1 = $7_1 + 1 | 0;
    if (($2_1 | 0) <= ($4_1 | 0)) {
     $13_1 = HEAP32[$5_1 >> 2];
     $9_1 = HEAP32[$5_1 + 4 >> 2];
     $4_1 = $8_1 + $10 | 0;
     $2_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $2_1;
     $2_1 = HEAP32[$0 + 12 >> 2] + $10 | 0;
     HEAP32[$2_1 >> 2] = $13_1;
     HEAP32[$2_1 + 4 >> 2] = $9_1;
     $4_1 = $7_1;
     $2_1 = $6_1;
    }
    if (($2_1 | 0) <= ($4_1 | 0)) {
     $8_1 = HEAP32[$0 + 12 >> 2];
     $6_1 = $2_1;
     $7_1 = $4_1;
     continue;
    }
    break;
   };
   if (($4_1 | 0) > ($11 | 0)) {
    $912($0, $1_1, $11, $4_1)
   }
   if (($2_1 | 0) < ($3_1 | 0)) {
    continue
   }
   break;
  };
 }
 
 function $913($0) {
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 20924;
  $1_1 = $0 + 4 | 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP8[$1_1 + 16 | 0] = 1;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  HEAP8[$0 + 60 | 0] = 1;
  $1_1 = $0 + 28 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 64 | 0] = 1;
  $0 = $0 + 48 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $914($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 20924;
  $1_1 = HEAP32[$0 + 56 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 60 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1_1 = HEAP32[$0 + 36 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 40 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $908($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $915($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 20924;
  $1_1 = HEAP32[$0 + 56 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 60 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1_1 = HEAP32[$0 + 36 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 40 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $908($0 + 4 | 0);
  $37($0);
 }
 
 function $916($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $1_1 = HEAP32[$1_1 + 68 >> 2];
  $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0;
  $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0;
  label$1 : {
   if (!$6_1) {
    break label$1
   }
   $8_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1) | 0;
   if (($6_1 | 0) < 1) {
    break label$1
   }
   while (1) {
    $1_1 = ($7_1 << 4) + $8_1 | 0;
    $2_1 = HEAP32[HEAP32[$1_1 >> 2] >> 2];
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     $1_1 = HEAP32[HEAP32[$1_1 + 4 >> 2] >> 2];
     if (!$1_1 | HEAP32[$2_1 + 204 >> 2] & 7 | HEAPU8[$1_1 + 204 | 0] & 7) {
      break label$3
     }
     $1_1 = HEAP32[$1_1 + 208 >> 2];
     $4_1 = HEAP32[$0 + 16 >> 2];
     $5_1 = HEAP32[$2_1 + 208 >> 2];
     $3_1 = $4_1 + ($5_1 << 3) | 0;
     $2_1 = HEAP32[$3_1 >> 2];
     if (($2_1 | 0) != ($5_1 | 0)) {
      while (1) {
       $2_1 = $4_1 + ($2_1 << 3) | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
       $5_1 = HEAP32[$2_1 >> 2];
       $3_1 = $4_1 + ($5_1 << 3) | 0;
       $2_1 = HEAP32[$3_1 >> 2];
       if (($2_1 | 0) != ($5_1 | 0)) {
        continue
       }
       break;
      }
     }
     $3_1 = $4_1 + ($1_1 << 3) | 0;
     $2_1 = HEAP32[$3_1 >> 2];
     if (($1_1 | 0) != ($2_1 | 0)) {
      while (1) {
       $1_1 = $4_1 + ($2_1 << 3) | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
       $1_1 = HEAP32[$1_1 >> 2];
       $3_1 = $4_1 + ($1_1 << 3) | 0;
       $2_1 = HEAP32[$3_1 >> 2];
       if (($1_1 | 0) != ($2_1 | 0)) {
        continue
       }
       break;
      }
     }
     if (($1_1 | 0) == ($5_1 | 0)) {
      break label$3
     }
     $2_1 = $4_1 + ($5_1 << 3) | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     $1_1 = $4_1 + ($1_1 << 3) | 0;
     HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2];
    }
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) != ($6_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $917($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[$1_1 + 8 >> 2];
  label$1 : {
   if (($5_1 | 0) < 1) {
    $2_1 = 0;
    break label$1;
   }
   $4_1 = HEAP32[$1_1 + 16 >> 2];
   $2_1 = 0;
   while (1) {
    $3_1 = HEAP32[$4_1 >> 2];
    if (!(HEAPU8[$3_1 + 204 | 0] & 3)) {
     HEAP32[$3_1 + 208 >> 2] = $2_1;
     $2_1 = $2_1 + 1 | 0;
    }
    HEAP32[$3_1 + 268 >> 2] = 1065353216;
    HEAP32[$3_1 + 212 >> 2] = -1;
    $4_1 = $4_1 + 4 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < ($5_1 | 0)) {
     continue
    }
    break;
   };
  }
  $910($0 + 4 | 0, $2_1);
  $916($0, $1_1);
 }
 
 function $918($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0;
  $7_1 = HEAP32[$1_1 + 8 >> 2];
  if (($7_1 | 0) >= 1) {
   $10 = HEAP32[$1_1 + 16 >> 2];
   while (1) {
    $2_1 = HEAP32[($3_1 << 2) + $10 >> 2];
    label$3 : {
     if (!(HEAPU8[$2_1 + 204 | 0] & 3)) {
      $1_1 = $8_1;
      $9_1 = $1_1 << 3;
      $4_1 = HEAP32[$0 + 16 >> 2];
      $5_1 = $9_1 + $4_1 | 0;
      $6_1 = HEAP32[$5_1 >> 2];
      if (($1_1 | 0) != ($6_1 | 0)) {
       while (1) {
        $1_1 = $4_1 + ($6_1 << 3) | 0;
        HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
        $1_1 = HEAP32[$1_1 >> 2];
        $5_1 = $4_1 + ($1_1 << 3) | 0;
        $6_1 = HEAP32[$5_1 >> 2];
        if (($1_1 | 0) != ($6_1 | 0)) {
         continue
        }
        break;
       }
      }
      HEAP32[$2_1 + 208 >> 2] = $1_1;
      HEAP32[$2_1 + 212 >> 2] = -1;
      HEAP32[($4_1 + $9_1 | 0) + 4 >> 2] = $3_1;
      $8_1 = $8_1 + 1 | 0;
      break label$3;
     }
     HEAP32[$2_1 + 208 >> 2] = -1;
     HEAP32[$2_1 + 212 >> 2] = -2;
    }
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) < ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $919($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  $613($12_1 + 8 | 0, 20940);
  $3_1 = HEAP32[$0 + 28 >> 2];
  if (($3_1 | 0) <= -1) {
   if (HEAP32[$0 + 32 >> 2] <= -1) {
    $4_1 = HEAP32[$0 + 36 >> 2];
    if ($4_1) {
     if (HEAPU8[$0 + 40 | 0]) {
      $80($4_1)
     }
     HEAP32[$0 + 36 >> 2] = 0;
    }
    HEAP32[$0 + 32 >> 2] = 0;
    HEAP32[$0 + 36 >> 2] = 0;
    HEAP8[$0 + 40 | 0] = 1;
   }
   $7_1 = $3_1 << 2;
   while (1) {
    HEAP32[HEAP32[$0 + 36 >> 2] + $7_1 >> 2] = 0;
    $7_1 = $7_1 + 4 | 0;
    $4_1 = $3_1 + 1 | 0;
    $5_1 = $4_1 >>> 0 >= $3_1 >>> 0;
    $3_1 = $4_1;
    if ($5_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 28 >> 2] = 0;
  $911($0 + 4 | 0);
  $13_1 = HEAP32[$0 + 8 >> 2];
  if (($13_1 | 0) >= 1) {
   $4_1 = 0;
   while (1) {
    $6_1 = HEAP32[$0 + 16 >> 2];
    $5_1 = $4_1;
    $14 = $4_1 << 3;
    $8_1 = $6_1 + $14 | 0;
    $3_1 = $8_1 + 8 | 0;
    $9_1 = HEAP32[$8_1 >> 2];
    while (1) {
     $7_1 = $4_1;
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) < ($13_1 | 0)) {
      $10 = HEAP32[$3_1 >> 2];
      $3_1 = $3_1 + 8 | 0;
      if (($9_1 | 0) == ($10 | 0)) {
       continue
      }
     }
     break;
    };
    label$10 : {
     $10 = ($5_1 | 0) > ($7_1 | 0);
     if ($10) {
      break label$10
     }
     $15_1 = $5_1 + -1 | 0;
     $3_1 = $8_1 + 4 | 0;
     $16_1 = HEAP32[$2_1 + 16 >> 2];
     $8_1 = 1;
     while (1) {
      $11 = HEAP32[(HEAP32[$3_1 >> 2] << 2) + $16_1 >> 2];
      if (HEAP32[$11 + 208 >> 2] == ($9_1 | 0)) {
       $11 = HEAP32[$11 + 220 >> 2];
       $8_1 = ($11 | 0) != 4 & (($11 | 0) != 1 & $8_1);
      }
      $3_1 = $3_1 + 8 | 0;
      $15_1 = $15_1 + 1 | 0;
      if (($15_1 | 0) < ($7_1 | 0)) {
       continue
      }
      break;
     };
     if (!($8_1 & 1)) {
      if ($10) {
       break label$10
      }
      $3_1 = $14 | 4;
      while (1) {
       $6_1 = HEAP32[HEAP32[$2_1 + 16 >> 2] + (HEAP32[$3_1 + $6_1 >> 2] << 2) >> 2];
       if (!(($9_1 | 0) != HEAP32[$6_1 + 208 >> 2] | HEAP32[$6_1 + 220 >> 2] != 2)) {
        $308($6_1, 3);
        HEAP32[$6_1 + 224 >> 2] = 0;
       }
       if (($5_1 | 0) >= ($7_1 | 0)) {
        break label$10
       }
       $3_1 = $3_1 + 8 | 0;
       $5_1 = $5_1 + 1 | 0;
       $6_1 = HEAP32[$0 + 16 >> 2];
       continue;
      };
     }
     if ($10) {
      break label$10
     }
     $3_1 = $14 | 4;
     while (1) {
      $6_1 = HEAP32[HEAP32[$2_1 + 16 >> 2] + (HEAP32[$3_1 + $6_1 >> 2] << 2) >> 2];
      if (HEAP32[$6_1 + 208 >> 2] == ($9_1 | 0)) {
       $308($6_1, 2)
      }
      if (($5_1 | 0) >= ($7_1 | 0)) {
       break label$10
      }
      $3_1 = $3_1 + 8 | 0;
      $5_1 = $5_1 + 1 | 0;
      $6_1 = HEAP32[$0 + 16 >> 2];
      continue;
     };
    }
    if (($4_1 | 0) < ($13_1 | 0)) {
     continue
    }
    break;
   };
  }
  $8_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0;
  if (($8_1 | 0) >= 1) {
   $7_1 = 0;
   while (1) {
    $9_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 40 >> 2]]($1_1, $7_1) | 0;
    $2_1 = HEAP32[$9_1 + 776 >> 2];
    $4_1 = HEAP32[$9_1 + 772 >> 2];
    label$20 : {
     label$21 : {
      label$22 : {
       if (!(!$4_1 | HEAP32[$4_1 + 220 >> 2] == 2)) {
        $5_1 = HEAP32[$4_1 + 204 >> 2];
        if ($5_1 & 2) {
         break label$22
        }
        break label$21;
       }
       if (!$2_1 | HEAP32[$2_1 + 220 >> 2] == 2) {
        break label$20
       }
       $5_1 = HEAP32[$4_1 + 204 >> 2];
       if (!($5_1 & 2) | HEAP32[$4_1 + 220 >> 2] == 2) {
        break label$21
       }
      }
      if ($5_1 & 4) {
       break label$21
      }
      $310($2_1, 0);
     }
     $3_1 = HEAP32[$2_1 + 204 >> 2];
     if (!(!($3_1 & 2) | $3_1 & 4 | HEAP32[$2_1 + 220 >> 2] == 2)) {
      $310($4_1, 0)
     }
     if (!HEAPU8[$0 + 64 | 0]) {
      break label$20
     }
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($1_1, $4_1, $2_1)) {
      break label$20
     }
     $2_1 = HEAP32[$0 + 28 >> 2];
     label$25 : {
      if (($2_1 | 0) != HEAP32[$0 + 32 >> 2]) {
       break label$25
      }
      $6_1 = $2_1 ? $2_1 << 1 : 1;
      if (($2_1 | 0) >= ($6_1 | 0)) {
       break label$25
      }
      label$26 : {
       if (!$6_1) {
        $5_1 = 0;
        break label$26;
       }
       $5_1 = $79($6_1 << 2);
       $2_1 = HEAP32[$0 + 28 >> 2];
      }
      if (($2_1 | 0) >= 1) {
       $3_1 = 0;
       $4_1 = $2_1;
       while (1) {
        HEAP32[$3_1 + $5_1 >> 2] = HEAP32[HEAP32[$0 + 36 >> 2] + $3_1 >> 2];
        $3_1 = $3_1 + 4 | 0;
        $4_1 = $4_1 + -1 | 0;
        if ($4_1) {
         continue
        }
        break;
       };
      }
      $4_1 = HEAP32[$0 + 36 >> 2];
      if ($4_1) {
       if (HEAPU8[$0 + 40 | 0]) {
        $80($4_1);
        $2_1 = HEAP32[$0 + 28 >> 2];
       }
       HEAP32[$0 + 36 >> 2] = 0;
      }
      HEAP32[$0 + 36 >> 2] = $5_1;
      HEAP8[$0 + 40 | 0] = 1;
      HEAP32[$0 + 32 >> 2] = $6_1;
     }
     HEAP32[$0 + 28 >> 2] = $2_1 + 1;
     HEAP32[HEAP32[$0 + 36 >> 2] + ($2_1 << 2) >> 2] = $9_1;
    }
    $7_1 = $7_1 + 1 | 0;
    if (($8_1 | 0) != ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
  $614();
  global$0 = $12_1 + 16 | 0;
 }
 
 function $920($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0;
  $11 = global$0 - 16 | 0;
  global$0 = $11;
  $919($0, $1_1, $2_1);
  $10 = HEAP32[$0 + 8 >> 2];
  $613($11 + 8 | 0, 20968);
  label$1 : {
   if (!HEAPU8[$0 + 64 | 0]) {
    $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 44 >> 2]]($1_1) | 0;
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, HEAP32[$2_1 + 16 >> 2], HEAP32[$2_1 + 8 >> 2], $4_1, $0, -1);
    break label$1;
   }
   $12_1 = HEAP32[$0 + 28 >> 2];
   if (($12_1 | 0) >= 2) {
    $921($0 + 24 | 0, $11, 0, $12_1 + -1 | 0)
   }
   if (($10 | 0) < 1) {
    break label$1
   }
   $15_1 = 1;
   while (1) {
    $1_1 = HEAP32[$0 + 16 >> 2];
    $13_1 = HEAP32[$1_1 + ($7_1 << 3) >> 2];
    $16_1 = 1;
    label$5 : {
     if (($7_1 | 0) >= ($10 | 0)) {
      break label$5
     }
     while (1) {
      $8_1 = HEAP32[HEAP32[$2_1 + 16 >> 2] + (HEAP32[(($7_1 << 3) + $1_1 | 0) + 4 >> 2] << 2) >> 2];
      $4_1 = HEAP32[$0 + 48 >> 2];
      label$7 : {
       if (($4_1 | 0) != HEAP32[$0 + 52 >> 2]) {
        break label$7
       }
       $9_1 = $4_1 ? $4_1 << 1 : 1;
       if (($4_1 | 0) >= ($9_1 | 0)) {
        break label$7
       }
       label$8 : {
        if (!$9_1) {
         $5_1 = 0;
         break label$8;
        }
        $5_1 = $79($9_1 << 2);
        $4_1 = HEAP32[$0 + 48 >> 2];
       }
       if (($4_1 | 0) >= 1) {
        $1_1 = 0;
        $6_1 = $4_1;
        while (1) {
         HEAP32[$1_1 + $5_1 >> 2] = HEAP32[HEAP32[$0 + 56 >> 2] + $1_1 >> 2];
         $1_1 = $1_1 + 4 | 0;
         $6_1 = $6_1 + -1 | 0;
         if ($6_1) {
          continue
         }
         break;
        };
       }
       $1_1 = HEAP32[$0 + 56 >> 2];
       if ($1_1) {
        if (HEAPU8[$0 + 60 | 0]) {
         $80($1_1);
         $4_1 = HEAP32[$0 + 48 >> 2];
        }
        HEAP32[$0 + 56 >> 2] = 0;
       }
       HEAP32[$0 + 56 >> 2] = $5_1;
       HEAP8[$0 + 60 | 0] = 1;
       HEAP32[$0 + 52 >> 2] = $9_1;
      }
      HEAP32[$0 + 48 >> 2] = $4_1 + 1;
      HEAP32[HEAP32[$0 + 56 >> 2] + ($4_1 << 2) >> 2] = $8_1;
      $1_1 = HEAP32[$8_1 + 220 >> 2];
      $16_1 = (($1_1 | 0) == 5 | ($1_1 | 0) == 2) & $16_1;
      $7_1 = $7_1 + 1 | 0;
      if (($10 | 0) == ($7_1 | 0)) {
       $7_1 = $10;
       break label$5;
      }
      $1_1 = HEAP32[$0 + 16 >> 2];
      if (HEAP32[$1_1 + ($7_1 << 3) >> 2] == ($13_1 | 0)) {
       continue
      }
      break;
     };
    }
    $8_1 = 0;
    $1_1 = 0;
    label$15 : {
     if (($14 | 0) >= ($12_1 | 0)) {
      break label$15
     }
     $9_1 = HEAP32[$0 + 36 >> 2];
     $5_1 = $14 << 2;
     $4_1 = $9_1 + $5_1 | 0;
     $1_1 = HEAP32[$4_1 >> 2];
     $6_1 = HEAP32[HEAP32[$1_1 + 772 >> 2] + 208 >> 2];
     if (($6_1 | 0) <= -1) {
      $6_1 = HEAP32[HEAP32[$1_1 + 776 >> 2] + 208 >> 2]
     }
     $1_1 = 0;
     if (($6_1 | 0) != ($13_1 | 0)) {
      break label$15
     }
     $1_1 = ($5_1 + $9_1 | 0) + 4 | 0;
     $5_1 = 1;
     while (1) {
      $8_1 = $5_1;
      $15_1 = $5_1 + $14 | 0;
      label$18 : {
       if (($15_1 | 0) >= ($12_1 | 0)) {
        break label$18
       }
       $5_1 = HEAP32[$1_1 >> 2];
       $6_1 = HEAP32[HEAP32[$5_1 + 772 >> 2] + 208 >> 2];
       if (($6_1 | 0) <= -1) {
        $6_1 = HEAP32[HEAP32[$5_1 + 776 >> 2] + 208 >> 2]
       }
       $1_1 = $1_1 + 4 | 0;
       $5_1 = $8_1 + 1 | 0;
       if (($6_1 | 0) == ($13_1 | 0)) {
        continue
       }
      }
      break;
     };
     $1_1 = $4_1;
    }
    if (!$16_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, HEAP32[$0 + 56 >> 2], HEAP32[$0 + 48 >> 2], $1_1, $8_1, $13_1)
    }
    $1_1 = HEAP32[$0 + 48 >> 2];
    if (($1_1 | 0) <= -1) {
     if (HEAP32[$0 + 52 >> 2] <= -1) {
      $4_1 = HEAP32[$0 + 56 >> 2];
      if ($4_1) {
       if (HEAPU8[$0 + 60 | 0]) {
        $80($4_1)
       }
       HEAP32[$0 + 56 >> 2] = 0;
      }
      HEAP8[$0 + 60 | 0] = 1;
      HEAP32[$0 + 52 >> 2] = 0;
      HEAP32[$0 + 56 >> 2] = 0;
     }
     $6_1 = $1_1 << 2;
     while (1) {
      HEAP32[HEAP32[$0 + 56 >> 2] + $6_1 >> 2] = 0;
      $6_1 = $6_1 + 4 | 0;
      $4_1 = $1_1 + 1 | 0;
      $5_1 = $4_1 >>> 0 >= $1_1 >>> 0;
      $1_1 = $4_1;
      if ($5_1) {
       continue
      }
      break;
     };
    }
    $14 = $8_1 ? $15_1 : $14;
    HEAP32[$0 + 48 >> 2] = 0;
    if (($7_1 | 0) < ($10 | 0)) {
     continue
    }
    break;
   };
  }
  $614();
  global$0 = $11 + 16 | 0;
 }
 
 function $921($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0;
  while (1) {
   $12_1 = $2_1;
   $5_1 = HEAP32[$0 + 12 >> 2];
   $11 = HEAP32[$5_1 + (($2_1 + $3_1 | 0) / 2 << 2) >> 2];
   $4_1 = $3_1;
   while (1) {
    $9_1 = HEAP32[HEAP32[$11 + 772 >> 2] + 208 >> 2];
    $7_1 = ($9_1 | 0) < 0;
    label$3 : {
     if (!$7_1) {
      $8_1 = $2_1 + -1 | 0;
      $6_1 = (($2_1 << 2) + $5_1 | 0) + -4 | 0;
      while (1) {
       $8_1 = $8_1 + 1 | 0;
       $6_1 = $6_1 + 4 | 0;
       $10 = HEAP32[$6_1 >> 2];
       $2_1 = HEAP32[HEAP32[$10 + 772 >> 2] + 208 >> 2];
       if (($2_1 | 0) <= -1) {
        $2_1 = HEAP32[HEAP32[$10 + 776 >> 2] + 208 >> 2]
       }
       if (($2_1 | 0) < ($9_1 | 0)) {
        continue
       }
       break;
      };
      break label$3;
     }
     $8_1 = $2_1 + -1 | 0;
     $6_1 = (($2_1 << 2) + $5_1 | 0) + -4 | 0;
     $10 = HEAP32[HEAP32[$11 + 776 >> 2] + 208 >> 2];
     while (1) {
      $8_1 = $8_1 + 1 | 0;
      $6_1 = $6_1 + 4 | 0;
      $13_1 = HEAP32[$6_1 >> 2];
      $2_1 = HEAP32[HEAP32[$13_1 + 772 >> 2] + 208 >> 2];
      if (($2_1 | 0) <= -1) {
       $2_1 = HEAP32[HEAP32[$13_1 + 776 >> 2] + 208 >> 2]
      }
      if (($2_1 | 0) < ($10 | 0)) {
       continue
      }
      break;
     };
    }
    label$9 : {
     if (!$7_1) {
      $2_1 = $4_1 + 1 | 0;
      $4_1 = ($4_1 << 2) + $5_1 | 0;
      while (1) {
       $7_1 = HEAP32[$4_1 >> 2];
       $5_1 = HEAP32[HEAP32[$7_1 + 772 >> 2] + 208 >> 2];
       if (($5_1 | 0) <= -1) {
        $5_1 = HEAP32[HEAP32[$7_1 + 776 >> 2] + 208 >> 2]
       }
       $4_1 = $4_1 + -4 | 0;
       $2_1 = $2_1 + -1 | 0;
       if (($9_1 | 0) < ($5_1 | 0)) {
        continue
       }
       break;
      };
      $4_1 = $4_1 + 4 | 0;
      break label$9;
     }
     $2_1 = $4_1 + 1 | 0;
     $4_1 = ($4_1 << 2) + $5_1 | 0;
     $9_1 = HEAP32[HEAP32[$11 + 776 >> 2] + 208 >> 2];
     while (1) {
      $7_1 = HEAP32[$4_1 >> 2];
      $5_1 = HEAP32[HEAP32[$7_1 + 772 >> 2] + 208 >> 2];
      if (($5_1 | 0) <= -1) {
       $5_1 = HEAP32[HEAP32[$7_1 + 776 >> 2] + 208 >> 2]
      }
      $4_1 = $4_1 + -4 | 0;
      $2_1 = $2_1 + -1 | 0;
      if (($9_1 | 0) < ($5_1 | 0)) {
       continue
      }
      break;
     };
     $4_1 = $4_1 + 4 | 0;
    }
    label$15 : {
     if (($8_1 | 0) > ($2_1 | 0)) {
      $4_1 = $2_1;
      $2_1 = $8_1;
      break label$15;
     }
     $5_1 = HEAP32[$6_1 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[HEAP32[$0 + 12 >> 2] + ($2_1 << 2) >> 2] = $5_1;
     $4_1 = $2_1 + -1 | 0;
     $2_1 = $8_1 + 1 | 0;
    }
    if (($2_1 | 0) <= ($4_1 | 0)) {
     $5_1 = HEAP32[$0 + 12 >> 2];
     continue;
    }
    break;
   };
   if (($4_1 | 0) > ($12_1 | 0)) {
    $921($0, $1_1, $12_1, $4_1)
   }
   if (($2_1 | 0) < ($3_1 | 0)) {
    continue
   }
   break;
  };
 }
 
 function $922($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
   $2_1 = $3_1 >>> 23 & 255;
   if (($2_1 | 0) != 255) {
    break label$1
   }
   $0 = Math_fround($0 * Math_fround(6.2831854820251465));
   return Math_fround($0 / $0);
  }
  $1_1 = $3_1 << 1;
  if ($1_1 >>> 0 > 2173837238) {
   label$4 : {
    if (!$2_1) {
     $2_1 = 0;
     $1_1 = $3_1 << 9;
     if (($1_1 | 0) >= 0) {
      while (1) {
       $2_1 = $2_1 + -1 | 0;
       $1_1 = $1_1 << 1;
       if (($1_1 | 0) > -1) {
        continue
       }
       break;
      }
     }
     $1_1 = $3_1 << 1 - $2_1;
     break label$4;
    }
    $1_1 = $3_1 & 8388607 | 8388608;
   }
   $4_1 = $1_1 - 13176795 | 0;
   $5_1 = ($4_1 | 0) > -1;
   if (($2_1 | 0) > 129) {
    while (1) {
     label$14 : {
      if (!$5_1) {
       break label$14
      }
      $1_1 = $4_1;
      if ($1_1) {
       break label$14
      }
      return Math_fround($0 * Math_fround(0.0));
     }
     $1_1 = $1_1 << 1;
     $4_1 = $1_1 - 13176795 | 0;
     $5_1 = ($4_1 | 0) > -1;
     $2_1 = $2_1 + -1 | 0;
     if (($2_1 | 0) > 129) {
      continue
     }
     break;
    }
   }
   label$15 : {
    if (!$5_1) {
     break label$15
    }
    $1_1 = $4_1;
    if ($1_1) {
     break label$15
    }
    return Math_fround($0 * Math_fround(0.0));
   }
   if ($1_1 >>> 0 <= 8388607) {
    while (1) {
     $2_1 = $2_1 + -1 | 0;
     $1_1 = $1_1 << 1;
     if ($1_1 >>> 0 < 8388608) {
      continue
     }
     break;
    }
   }
   return wasm2js_scratch_store_i32(0, $3_1 & -2147483648 | (($2_1 | 0) >= 1 ? $1_1 + -8388608 | $2_1 << 23 : $1_1 >>> 1 - $2_1)), wasm2js_scratch_load_f32();
  }
  return ($1_1 | 0) == -2121130058 ? Math_fround($0 * Math_fround(0.0)) : $0;
 }
 
 function $923($0, $1_1, $2_1) {
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 1028443341;
  HEAP32[$0 + 32 >> 2] = $2_1;
  HEAP32[$0 + 28 >> 2] = $1_1;
  HEAP32[$0 + 24 >> 2] = -1;
  HEAP16[$0 + 20 >> 1] = 1;
  HEAP32[$0 + 16 >> 2] = 2139095039;
  HEAP32[$0 + 8 >> 2] = -1;
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 >> 2] = 21028;
  HEAP32[$0 + 4 >> 2] = 12;
 }
 
 function $924($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0);
  $5_1 = Math_fround(1.0);
  label$1 : {
   if ($1_1 > $2_1) {
    break label$1
   }
   $5_1 = Math_fround(0.0);
   if ($1_1 == $2_1) {
    break label$1
   }
   $3_1 = Math_fround($3_1 / $4_1);
   if (!!($3_1 < Math_fround(0.0))) {
    if (!($0 >= $1_1 ^ 1 | Math_fround($1_1 - $3_1) > $0 ^ 1)) {
     return Math_fround(Math_fround($1_1 - $0) / $3_1)
    }
    return $0 < $1_1 ? Math_fround(0.0) : Math_fround(1.0);
   }
   if (!($3_1 > Math_fround(0.0))) {
    break label$1
   }
   if (!($0 <= $2_1 ^ 1 | Math_fround($2_1 - $3_1) < $0 ^ 1)) {
    return Math_fround(Math_fround($2_1 - $0) / $3_1)
   }
   $5_1 = $0 > $2_1 ? Math_fround(0.0) : Math_fround(1.0);
  }
  return $5_1;
 }
 
 function $925($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0 + 28 >> 2]) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0 + 32 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 40 >> 2]]($2_1, $0) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0;
  HEAP32[$1_1 + 8 >> 2] = $4_1;
  if ($4_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1, $3_1)
  }
  HEAP32[$1_1 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$1_1 + 24 >> 2] = HEAPU8[$0 + 21 | 0];
  HEAP32[$1_1 + 40 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$1_1 + 44 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1_1 + 48 >> 2] = HEAPU8[$0 + 20 | 0];
  $2_1 = HEAP32[$0 + 12 >> 2];
  $3_1 = HEAP32[$0 + 40 >> 2];
  HEAP32[$1_1 + 28 >> 2] = HEAP32[$0 + 36 >> 2];
  HEAP32[$1_1 + 32 >> 2] = $3_1;
  HEAP32[$1_1 + 20 >> 2] = $2_1;
  $3_1 = 0;
  HEAP32[$1_1 + 36 >> 2] = 0;
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$0 + 8 >> 2];
  $2_1 = HEAP32[$0 + 28 >> 2];
  $4_1 = HEAP32[$2_1 + 548 >> 2];
  if (($4_1 | 0) >= 1) {
   $2_1 = HEAP32[$2_1 + 556 >> 2];
   while (1) {
    if (($0 | 0) == HEAP32[$2_1 >> 2]) {
     HEAP32[$1_1 + 36 >> 2] = 1
    }
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) < ($4_1 | 0)) {
     continue
    }
    break;
   };
  }
  $2_1 = HEAP32[$0 + 32 >> 2];
  $4_1 = HEAP32[$2_1 + 548 >> 2];
  if (($4_1 | 0) >= 1) {
   $2_1 = HEAP32[$2_1 + 556 >> 2];
   $3_1 = 0;
   while (1) {
    if (($0 | 0) == HEAP32[$2_1 >> 2]) {
     HEAP32[$1_1 + 36 >> 2] = 1
    }
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) < ($4_1 | 0)) {
     continue
    }
    break;
   };
  }
  return 21072;
 }
 
 function $926($0) {
  var $1_1 = Math_fround(0);
  $1_1 = $922(Math_fround(HEAPF32[$0 >> 2] + HEAPF32[$0 + 4 >> 2]));
  if (!!($1_1 < Math_fround(-3.1415927410125732))) {
   return Math_fround($1_1 + Math_fround(6.2831854820251465))
  }
  return $1_1 > Math_fround(3.1415927410125732) ^ 1 ? $1_1 : Math_fround($1_1 + Math_fround(-6.2831854820251465));
 }
 
 function $927($0) {
  var $1_1 = Math_fround(0);
  $1_1 = $922(Math_fround(HEAPF32[$0 >> 2] - HEAPF32[$0 + 4 >> 2]));
  if (!!($1_1 < Math_fround(-3.1415927410125732))) {
   return Math_fround($1_1 + Math_fround(6.2831854820251465))
  }
  return $1_1 > Math_fround(3.1415927410125732) ^ 1 ? $1_1 : Math_fround($1_1 + Math_fround(-6.2831854820251465));
 }
 
 function $928($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 21028;
  return $0 | 0;
 }
 
 function $931($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = Math_fround($4_1);
 }
 
 function $934($0, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $5_1 = $494($2_1);
  $4_1 = HEAPF32[$1_1 + 444 >> 2];
  $2_1 = $493($2_1);
  label$1 : {
   if (!(Math_fround(Math_abs($5_1)) > Math_fround(1.1920928955078125e-07))) {
    $6_1 = Math_fround($2_1 * $2_1);
    $8_1 = Math_fround($5_1 * $5_1);
    break label$1;
   }
   $6_1 = Math_fround($2_1 * $2_1);
   $8_1 = Math_fround($5_1 * $5_1);
   $9_1 = Math_fround($6_1 / $8_1);
   $7_1 = HEAPF32[$1_1 + 448 >> 2];
   $4_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($9_1 + Math_fround(1.0)) / Math_fround(Math_fround(Math_fround(1.0) / Math_fround($7_1 * $7_1)) + Math_fround($9_1 / Math_fround($4_1 * $4_1))))));
  }
  HEAP32[$0 + 12 >> 2] = 0;
  $4_1 = Math_fround($4_1 * Math_fround(.5));
  $6_1 = Math_fround($493($4_1) / Math_fround(Math_sqrt(Math_fround($6_1 + Math_fround($8_1 + Math_fround(0.0))))));
  $8_1 = Math_fround($6_1 * Math_fround(0.0));
  $4_1 = $494($4_1);
  $7_1 = Math_fround($4_1 * Math_fround(0.0));
  $2_1 = Math_fround($6_1 * Math_fround(-$2_1));
  $10 = Math_fround($8_1 * Math_fround(0.0));
  $9_1 = Math_fround(Math_fround($7_1 + Math_fround($2_1 * $3_1)) - $10);
  $5_1 = Math_fround($5_1 * $6_1);
  $7_1 = Math_fround(Math_fround($7_1 + $10) - Math_fround($5_1 * $3_1));
  $10 = Math_fround($5_1 * Math_fround(0.0));
  $11 = Math_fround($2_1 * Math_fround(0.0));
  $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * Math_fround(-0.0)) * $3_1) - $10) - $11);
  $3_1 = Math_fround(Math_fround(Math_fround($4_1 * $3_1) + $10) - $11);
  HEAPF32[$0 + 8 >> 2] = Math_fround($8_1 * $9_1) + Math_fround(Math_fround(Math_fround($4_1 * $7_1) - Math_fround($2_1 * $6_1)) - Math_fround($5_1 * $3_1));
  HEAPF32[$0 + 4 >> 2] = Math_fround($2_1 * $3_1) + Math_fround(Math_fround(Math_fround($4_1 * $9_1) - Math_fround($5_1 * $6_1)) - Math_fround($8_1 * $7_1));
  HEAPF32[$0 >> 2] = Math_fround($5_1 * $7_1) + Math_fround(Math_fround(Math_fround($4_1 * $3_1) - Math_fround($8_1 * $6_1)) - Math_fround($2_1 * $9_1));
 }
 
 function $935($0) {
  var $1_1 = 0.0, $2_1 = 0, $3_1 = Math_fround(0), $4_1 = 0;
  label$1 : {
   label$2 : {
    $4_1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
    $2_1 = $4_1 & 2147483647;
    if ($2_1 >>> 0 >= 1065353216) {
     if (($2_1 | 0) != 1065353216) {
      break label$2
     }
     return Math_fround(+$0 * 1.5707963267948966 + 7.52316384526264e-37);
    }
    if ($2_1 >>> 0 <= 1056964607) {
     if ($2_1 + -8388608 >>> 0 < 956301312) {
      break label$1
     }
     $3_1 = Math_fround($0 * $0);
     return Math_fround(Math_fround(Math_fround(Math_fround($3_1 * Math_fround(Math_fround($3_1 * Math_fround(Math_fround($3_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($3_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0))) * $0) + $0);
    }
    $0 = Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_abs($0))) * Math_fround(.5));
    $1_1 = Math_sqrt(+$0);
    $1_1 = $1_1 + $1_1 * +Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($0 * Math_fround(-.7066296339035034)) + Math_fround(1.0)));
    $0 = Math_fround(1.5707963267948966 - ($1_1 + $1_1));
    return ($4_1 | 0) < 0 ? Math_fround(-$0) : $0;
   }
   $0 = Math_fround(Math_fround(0.0) / Math_fround($0 - $0));
  }
  return $0;
 }
 
 function $936($0, $1_1) {
  return HEAPF32[(($1_1 << 2) + $0 | 0) + 1192 >> 2];
 }
 
 function $937($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $855($0, $1_1, $2_1);
  $2_1 = $0 + 100 | 0;
  HEAP32[$2_1 >> 2] = 1050253722;
  HEAP32[$2_1 + 4 >> 2] = 1015580809;
  HEAP32[$0 + 92 >> 2] = 1058642330;
  HEAP32[$0 + 96 >> 2] = 1065353216;
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  $2_1 = $0 + 132 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1045220557;
  $2_1 = $0 + 124 | 0;
  HEAP32[$2_1 >> 2] = 1045220557;
  HEAP32[$2_1 + 4 >> 2] = 1045220557;
  $2_1 = $0 + 108 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 10;
  $2_1 = $0 + 184 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1045220557;
  $2_1 = $0 + 176 | 0;
  HEAP32[$2_1 >> 2] = 1120403456;
  HEAP32[$2_1 + 4 >> 2] = 1900671690;
  HEAP32[$0 + 172 >> 2] = 128;
  $2_1 = $0 + 164 | 0;
  HEAP32[$2_1 >> 2] = 260;
  HEAP32[$2_1 + 4 >> 2] = 2;
  $2_1 = $0 + 156 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1062836634;
  $2_1 = $0 + 148 | 0;
  HEAP32[$2_1 >> 2] = -1121724662;
  HEAP32[$2_1 + 4 >> 2] = 1036831949;
  $2_1 = $0 + 140 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1;
  $2_1 = $0 + 116 | 0;
  HEAP32[$2_1 >> 2] = 1101004800;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  HEAP32[$0 >> 2] = 21176;
  HEAP8[$0 + 208 | 0] = 1;
  HEAP32[$0 + 204 >> 2] = 0;
  HEAP8[$0 + 240 | 0] = 1;
  HEAP32[$0 + 216 >> 2] = $3_1;
  HEAP32[$0 + 212 >> 2] = 0;
  $2_1 = $0 + 196 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0 + 236 >> 2] = 0;
  $2_1 = $0 + 228 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP8[$0 + 260 | 0] = 1;
  HEAP16[$0 + 290 >> 1] = 0;
  HEAP32[$0 + 256 >> 2] = 0;
  $2_1 = $0 + 248 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0 + 264 >> 2] = 0;
  HEAP32[$0 + 268 >> 2] = -1054867456;
  $2_1 = $0 + 272 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0 + 280 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP8[$0 + 308 | 0] = 1;
  HEAP32[$0 + 312 >> 2] = 0;
  HEAP32[$0 + 304 >> 2] = 0;
  $2_1 = $0 + 296 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP8[$0 + 336 | 0] = 1;
  HEAP8[$0 + 316 | 0] = 1;
  $2_1 = $0 + 324 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP32[$0 + 340 >> 2] = 0;
  $4_1 = $0;
  if ($3_1) {
   $2_1 = 0
  } else {
   $2_1 = $79(236);
   $816($2_1);
   HEAP32[$0 + 216 >> 2] = $2_1;
   $2_1 = 1;
  }
  HEAP8[$4_1 + 289 | 0] = $2_1;
  $2_1 = $79(68);
  $913($2_1);
  HEAP8[$0 + 288 | 0] = 1;
  HEAP32[$0 + 220 >> 2] = $2_1;
  $2_1 = $79(88);
  HEAP32[$2_1 + 72 >> 2] = 0;
  HEAP32[$2_1 + 76 >> 2] = 0;
  HEAP8[$2_1 + 44 | 0] = 1;
  HEAP32[$2_1 + 24 >> 2] = $1_1;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$2_1 >> 2] = 21784;
  HEAP32[$2_1 + 40 >> 2] = 0;
  HEAP8[$2_1 + 64 | 0] = 1;
  HEAP32[$2_1 + 32 >> 2] = 0;
  HEAP32[$2_1 + 36 >> 2] = 0;
  HEAP32[$2_1 + 60 >> 2] = 0;
  HEAP8[$2_1 + 84 | 0] = 1;
  HEAP32[$2_1 + 52 >> 2] = 0;
  HEAP32[$2_1 + 56 >> 2] = 0;
  HEAP32[$2_1 + 80 >> 2] = 0;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 + 216 >> 2];
  HEAP32[$0 + 212 >> 2] = $2_1;
 }
 
 function $938($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 21176;
  if (HEAPU8[$0 + 288 | 0]) {
   $1_1 = HEAP32[$0 + 220 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $80(HEAP32[$0 + 220 >> 2]);
  }
  $1_1 = HEAP32[$0 + 212 >> 2];
  if ($1_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $80(HEAP32[$0 + 212 >> 2]);
  }
  if (HEAPU8[$0 + 289 | 0]) {
   $1_1 = HEAP32[$0 + 216 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $80(HEAP32[$0 + 216 >> 2]);
  }
  $1_1 = HEAP32[$0 + 332 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 336 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 332 >> 2] = 0;
  }
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP32[$0 + 324 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP8[$0 + 336 | 0] = 1;
  $1_1 = HEAP32[$0 + 304 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 308 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 304 >> 2] = 0;
  }
  HEAP32[$0 + 304 >> 2] = 0;
  HEAP32[$0 + 296 >> 2] = 0;
  HEAP32[$0 + 300 >> 2] = 0;
  HEAP8[$0 + 308 | 0] = 1;
  $1_1 = HEAP32[$0 + 256 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 260 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 256 >> 2] = 0;
  }
  HEAP32[$0 + 256 >> 2] = 0;
  HEAP32[$0 + 248 >> 2] = 0;
  HEAP32[$0 + 252 >> 2] = 0;
  HEAP8[$0 + 260 | 0] = 1;
  $1_1 = HEAP32[$0 + 236 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 240 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 236 >> 2] = 0;
  }
  HEAP32[$0 + 236 >> 2] = 0;
  HEAP32[$0 + 228 >> 2] = 0;
  HEAP32[$0 + 232 >> 2] = 0;
  HEAP8[$0 + 240 | 0] = 1;
  $1_1 = HEAP32[$0 + 204 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 208 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 204 >> 2] = 0;
  }
  HEAP32[$0 + 204 >> 2] = 0;
  HEAP32[$0 + 196 >> 2] = 0;
  HEAP32[$0 + 200 >> 2] = 0;
  HEAP8[$0 + 208 | 0] = 1;
  $856($0);
  return $0 | 0;
 }
 
 function $939($0) {
  $0 = $0 | 0;
  $80($938($0));
 }
 
 function $940($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[$0 + 8 >> 2];
  if (($3_1 | 0) >= 1) {
   while (1) {
    $2_1 = HEAP32[HEAP32[$0 + 16 >> 2] + $4_1 >> 2];
    if (!(!$2_1 | !(HEAP32[$2_1 + 252 >> 2] & 2) | (!(HEAPU8[$2_1 + 204 | 0] & 2) | HEAP32[$2_1 + 220 >> 2] == 2))) {
     $799($2_1, $1_1);
     $3_1 = HEAP32[$0 + 8 >> 2];
    }
    $4_1 = $4_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < ($3_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $941($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $613($2_1 + 8 | 0, 21364);
  $873($0);
  label$1 : {
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
    break label$1
   }
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 56 >> 2]]($1_1) & 6144)) {
    break label$1
   }
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0) | 0;
   if (($1_1 | 0) < 1) {
    break label$1
   }
   $1_1 = $1_1 + 1 | 0;
   while (1) {
    ((wasm2js_i32$1 = $0, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $1_1 + -2 | 0) | 0), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 172 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    $1_1 = $1_1 + -1 | 0;
    if (($1_1 | 0) > 1) {
     continue
    }
    break;
   };
  }
  label$3 : {
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
    break label$3
   }
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 56 >> 2]]($1_1) & 16387)) {
    break label$3
   }
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
    break label$3
   }
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 56 >> 2]]($1_1) | HEAP32[$0 + 296 >> 2] < 1) {
    break label$3
   }
   $1_1 = 0;
   while (1) {
    $3_1 = HEAP32[HEAP32[$0 + 304 >> 2] + $1_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, HEAP32[$0 + 72 >> 2]);
    $1_1 = $1_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < HEAP32[$0 + 296 >> 2]) {
     continue
    }
    break;
   };
  }
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0);
  }
  $614();
  global$0 = $2_1 + 16 | 0;
 }
 
 function $942($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  if (HEAP32[$0 + 248 >> 2] >= 1) {
   while (1) {
    $2_1 = HEAP32[HEAP32[$0 + 256 >> 2] + $3_1 >> 2];
    $1_1 = $2_1;
    HEAP32[$1_1 + 472 >> 2] = 0;
    HEAP32[$1_1 + 476 >> 2] = 0;
    $1_1 = $1_1 + 496 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $2_1 + 488 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $2_1 = $2_1 + 480 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $3_1 = $3_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < HEAP32[$0 + 248 >> 2]) {
     continue
    }
    break;
   }
  }
 }
 
 function $943($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = HEAP32[$0 + 248 >> 2];
  if (($1_1 | 0) >= 1) {
   while (1) {
    label$3 : {
     label$4 : {
      $3_1 = HEAP32[HEAP32[$0 + 256 >> 2] + $2_1 >> 2];
      $4_1 = HEAP32[$3_1 + 220 >> 2] + -2 | 0;
      if ($4_1 >>> 0 > 3) {
       break label$4
      }
      switch ($4_1 - 1 | 0) {
      case 0:
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     $803($3_1);
     $1_1 = HEAP32[$0 + 248 >> 2];
    }
    $2_1 = $2_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $944($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = global$0 + -64 | 0;
  global$0 = $5_1;
  label$1 : {
   if (HEAPU8[$0 + 290 | 0]) {
    $3_1 = HEAP32[$0 + 8 >> 2];
    if (($3_1 | 0) < 1) {
     break label$1
    }
    while (1) {
     $1_1 = HEAP32[HEAP32[$0 + 16 >> 2] + $7_1 >> 2];
     if (!(!$1_1 | !(HEAP32[$1_1 + 252 >> 2] & 2) | (!HEAP32[$1_1 + 540 >> 2] | HEAPU8[$1_1 + 204 | 0] & 3))) {
      $3_1 = $1_1 + 68 | 0;
      $6_1 = $1_1 + 132 | 0;
      $8_1 = $1_1 + 148 | 0;
      label$5 : {
       label$6 : {
        if (!HEAPU8[$0 + 316 | 0]) {
         break label$6
        }
        $2_1 = HEAPF32[$0 + 284 >> 2];
        if ($2_1 == Math_fround(0.0)) {
         break label$6
        }
        $2_1 = Math_fround(HEAPF32[$0 + 280 >> 2] - $2_1);
        break label$5;
       }
       $2_1 = Math_fround(HEAPF32[$0 + 280 >> 2] * HEAPF32[$1_1 + 268 >> 2]);
      }
      $798($3_1, $6_1, $8_1, $2_1, $5_1);
      $1_1 = HEAP32[$1_1 + 540 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $5_1);
      $3_1 = HEAP32[$0 + 8 >> 2];
     }
     $7_1 = $7_1 + 4 | 0;
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) < ($3_1 | 0)) {
      continue
     }
     break;
    };
    break label$1;
   }
   $4_1 = HEAP32[$0 + 248 >> 2];
   if (($4_1 | 0) < 1) {
    break label$1
   }
   while (1) {
    label$8 : {
     label$9 : {
      $1_1 = HEAP32[HEAP32[$0 + 256 >> 2] + $3_1 >> 2];
      $6_1 = HEAP32[$1_1 + 220 >> 2] + -2 | 0;
      if ($6_1 >>> 0 > 3) {
       break label$9
      }
      switch ($6_1 - 1 | 0) {
      case 0:
      case 1:
       break label$9;
      default:
       break label$8;
      };
     }
     if (!HEAP32[$1_1 + 540 >> 2] | HEAPU8[$1_1 + 204 | 0] & 3) {
      break label$8
     }
     $4_1 = $1_1 + 68 | 0;
     $6_1 = $1_1 + 132 | 0;
     $8_1 = $1_1 + 148 | 0;
     label$10 : {
      label$11 : {
       if (!HEAPU8[$0 + 316 | 0]) {
        break label$11
       }
       $2_1 = HEAPF32[$0 + 284 >> 2];
       if ($2_1 == Math_fround(0.0)) {
        break label$11
       }
       $2_1 = Math_fround(HEAPF32[$0 + 280 >> 2] - $2_1);
       break label$10;
      }
      $2_1 = Math_fround(HEAPF32[$0 + 280 >> 2] * HEAPF32[$1_1 + 268 >> 2]);
     }
     $798($4_1, $6_1, $8_1, $2_1, $5_1);
     $1_1 = HEAP32[$1_1 + 540 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $5_1);
     $4_1 = HEAP32[$0 + 248 >> 2];
    }
    $3_1 = $3_1 + 4 | 0;
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) < ($4_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $5_1 - -64 | 0;
 }
 
 function $945($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($2_1) {
    HEAPF32[$0 + 284 >> 2] = $3_1;
    $1_1 = Math_fround(HEAPF32[$0 + 280 >> 2] + $1_1);
    HEAPF32[$0 + 280 >> 2] = $1_1;
    if (!($1_1 >= $3_1)) {
     break label$1
    }
    $4_1 = $0;
    $6_1 = $1_1;
    $1_1 = Math_fround($1_1 / $3_1);
    label$3 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $5_1 = ~~$1_1;
      break label$3;
     }
     $5_1 = -2147483648;
    }
    HEAPF32[$4_1 + 280 >> 2] = $6_1 - Math_fround(Math_fround($5_1 | 0) * $3_1);
    break label$1;
   }
   HEAP32[$0 + 284 >> 2] = 0;
   HEAPF32[$0 + 280 >> 2] = HEAPU8[$0 + 316 | 0] ? Math_fround(0.0) : $1_1;
   $3_1 = $1_1;
   $5_1 = Math_fround(Math_abs($1_1)) < Math_fround(1.1920928955078125e-07) ^ 1;
   $2_1 = $5_1;
  }
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
   $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   (wasm2js_i32$0 = 25192, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 56 >> 2]]($4_1) >>> 4 & 1), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  }
  label$6 : {
   if ($5_1) {
    $4_1 = ($5_1 | 0) > ($2_1 | 0) ? $2_1 : $5_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 168 >> 2]]($0, Math_fround($3_1 * Math_fround($4_1 | 0)));
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 176 >> 2]]($0);
    if (($4_1 | 0) < 1) {
     break label$6
    }
    $2_1 = 0;
    while (1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 160 >> 2]]($0, $3_1);
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0);
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) < ($4_1 | 0)) {
      continue
     }
     break;
    };
    break label$6;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 120 >> 2]]($0);
  return $5_1 | 0;
 }
 
 function $946($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $613($3_1, 21379);
  $2_1 = HEAP32[$0 + 84 >> 2];
  if ($2_1) {
   FUNCTION_TABLE[$2_1]($0, $1_1)
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 140 >> 2]]($0, $1_1);
  $2_1 = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAPF32[$0 + 28 >> 2] = $1_1;
  (wasm2js_i32$0 = $0 + 48 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 164 >> 2]]($0, $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 148 >> 2]]($0);
  HEAPF32[$0 + 104 >> 2] = $1_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 152 >> 2]]($0, $0 + 92 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 144 >> 2]]($0, $1_1);
  $613($3_1 + 8 | 0, 21408);
  if (HEAP32[$0 + 296 >> 2] >= 1) {
   while (1) {
    $4_1 = HEAP32[HEAP32[$0 + 304 >> 2] + $2_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $0, $1_1);
    $2_1 = $2_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < HEAP32[$0 + 296 >> 2]) {
     continue
    }
    break;
   }
  }
  $614();
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 156 >> 2]]($0, $1_1);
  $2_1 = HEAP32[$0 + 80 >> 2];
  if ($2_1) {
   FUNCTION_TABLE[$2_1]($0, $1_1)
  }
  $614();
  global$0 = $3_1 + 16 | 0;
 }
 
 function $947($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 264 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 268 >> 2] = $2_1;
  $3_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 272 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = HEAP32[$0 + 248 >> 2];
  if (($3_1 | 0) >= 1) {
   $2_1 = 0;
   $4_1 = 0;
   while (1) {
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[HEAP32[$0 + 256 >> 2] + $2_1 >> 2];
      $6_1 = HEAP32[$5_1 + 220 >> 2] + -2 | 0;
      if ($6_1 >>> 0 > 3) {
       break label$4
      }
      switch ($6_1 - 1 | 0) {
      case 0:
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     if (HEAP8[$5_1 + 564 | 0] & 1) {
      break label$3
     }
     $801($5_1, $1_1);
     $3_1 = HEAP32[$0 + 248 >> 2];
    }
    $2_1 = $2_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < ($3_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $948($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 268 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 + 264 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
  $1_1 = $1_1 + 272 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $949($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $858($0, $1_1, $2_1, $3_1);
 }
 
 function $950($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  if (!(!$1_1 | !(HEAP32[$1_1 + 252 >> 2] & 2))) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 92 >> 2]]($0, $1_1);
   return;
  }
  $863($0, $1_1);
 }
 
 function $951($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0 + 248 >> 2];
  label$1 : {
   if (($2_1 | 0) < 1) {
    break label$1
   }
   $5_1 = HEAP32[$0 + 256 >> 2];
   $3_1 = $5_1;
   while (1) {
    if (($1_1 | 0) != HEAP32[$3_1 >> 2]) {
     $3_1 = $3_1 + 4 | 0;
     $4_1 = $4_1 + 1 | 0;
     if (($2_1 | 0) != ($4_1 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($2_1 | 0) <= ($4_1 | 0)) {
    break label$1
   }
   $4_1 = $3_1;
   $3_1 = $2_1 + -1 | 0;
   $2_1 = $3_1 << 2;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 + $5_1 >> 2];
   HEAP32[$0 + 248 >> 2] = $3_1;
   HEAP32[$2_1 + HEAP32[$0 + 256 >> 2] >> 2] = $1_1;
  }
  $863($0, $1_1);
 }
 
 function $952($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  if (!(HEAPU8[$1_1 + 204 | 0] & 3 | HEAP8[$1_1 + 564 | 0] & 1)) {
   $801($1_1, $0 + 264 | 0)
  }
  if (HEAP32[$1_1 + 192 >> 2]) {
   label$3 : {
    if (!(HEAP8[$1_1 + 204 | 0] & 1)) {
     $2_1 = HEAP32[$0 + 248 >> 2];
     label$5 : {
      if (($2_1 | 0) != HEAP32[$0 + 252 >> 2]) {
       break label$5
      }
      $4_1 = $2_1 ? $2_1 << 1 : 1;
      if (($2_1 | 0) >= ($4_1 | 0)) {
       break label$5
      }
      label$6 : {
       if (!$4_1) {
        break label$6
       }
       $6_1 = $79($4_1 << 2);
       $2_1 = HEAP32[$0 + 248 >> 2];
      }
      if (($2_1 | 0) >= 1) {
       $3_1 = $2_1;
       while (1) {
        HEAP32[$5_1 + $6_1 >> 2] = HEAP32[HEAP32[$0 + 256 >> 2] + $5_1 >> 2];
        $5_1 = $5_1 + 4 | 0;
        $3_1 = $3_1 + -1 | 0;
        if ($3_1) {
         continue
        }
        break;
       };
      }
      $3_1 = HEAP32[$0 + 256 >> 2];
      if ($3_1) {
       if (HEAPU8[$0 + 260 | 0]) {
        $80($3_1);
        $2_1 = HEAP32[$0 + 248 >> 2];
       }
       HEAP32[$0 + 256 >> 2] = 0;
      }
      HEAP32[$0 + 256 >> 2] = $6_1;
      HEAP32[$0 + 252 >> 2] = $4_1;
      HEAP8[$0 + 260 | 0] = 1;
     }
     HEAP32[$0 + 248 >> 2] = $2_1 + 1;
     HEAP32[HEAP32[$0 + 256 >> 2] + ($2_1 << 2) >> 2] = $1_1;
     break label$3;
    }
    $308($1_1, 2);
   }
   $2_1 = $1_1;
   $1_1 = HEAP32[$1_1 + 204 >> 2] & 3;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $2_1, $1_1 ? 2 : 1, $1_1 ? -3 : -1);
  }
 }
 
 function $953($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  if (!(HEAPU8[$1_1 + 204 | 0] & 3 | HEAP8[$1_1 + 564 | 0] & 1)) {
   $801($1_1, $0 + 264 | 0)
  }
  if (HEAP32[$1_1 + 192 >> 2]) {
   label$3 : {
    if (!(HEAP8[$1_1 + 204 | 0] & 1)) {
     $4_1 = HEAP32[$0 + 248 >> 2];
     label$5 : {
      if (($4_1 | 0) != HEAP32[$0 + 252 >> 2]) {
       break label$5
      }
      $6_1 = $4_1 ? $4_1 << 1 : 1;
      if (($4_1 | 0) >= ($6_1 | 0)) {
       break label$5
      }
      label$6 : {
       if (!$6_1) {
        break label$6
       }
       $8_1 = $79($6_1 << 2);
       $4_1 = HEAP32[$0 + 248 >> 2];
      }
      if (($4_1 | 0) >= 1) {
       $5_1 = $4_1;
       while (1) {
        HEAP32[$7_1 + $8_1 >> 2] = HEAP32[HEAP32[$0 + 256 >> 2] + $7_1 >> 2];
        $7_1 = $7_1 + 4 | 0;
        $5_1 = $5_1 + -1 | 0;
        if ($5_1) {
         continue
        }
        break;
       };
      }
      $5_1 = HEAP32[$0 + 256 >> 2];
      if ($5_1) {
       if (HEAPU8[$0 + 260 | 0]) {
        $80($5_1);
        $4_1 = HEAP32[$0 + 248 >> 2];
       }
       HEAP32[$0 + 256 >> 2] = 0;
      }
      HEAP32[$0 + 256 >> 2] = $8_1;
      HEAP32[$0 + 252 >> 2] = $6_1;
      HEAP8[$0 + 260 | 0] = 1;
     }
     HEAP32[$0 + 248 >> 2] = $4_1 + 1;
     HEAP32[HEAP32[$0 + 256 >> 2] + ($4_1 << 2) >> 2] = $1_1;
     break label$3;
    }
    $308($1_1, 2);
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1_1, $2_1, $3_1);
  }
 }
 
 function $954($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $613($6_1 + 8 | 0, 21422);
  if (HEAP32[$0 + 248 >> 2] >= 1) {
   while (1) {
    $2_1 = HEAP32[HEAP32[$0 + 256 >> 2] + $7_1 >> 2];
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     $4_1 = HEAP32[$2_1 + 220 >> 2];
     $8_1 = $4_1 + -2 | 0;
     label$4 : {
      if (!($8_1 - 1 | 0 ? $8_1 >>> 0 <= 2 : 0)) {
       label$7 : {
        $3_1 = HEAPF32[$2_1 + 372 >> 2];
        $5_1 = Math_fround($3_1 * $3_1);
        $3_1 = HEAPF32[$2_1 + 376 >> 2];
        $5_1 = Math_fround($5_1 + Math_fround($3_1 * $3_1));
        $3_1 = HEAPF32[$2_1 + 380 >> 2];
        $5_1 = Math_fround($5_1 + Math_fround($3_1 * $3_1));
        $3_1 = HEAPF32[$2_1 + 532 >> 2];
        if (!($5_1 < Math_fround($3_1 * $3_1))) {
         break label$7
        }
        $3_1 = HEAPF32[$2_1 + 388 >> 2];
        $5_1 = Math_fround($3_1 * $3_1);
        $3_1 = HEAPF32[$2_1 + 392 >> 2];
        $5_1 = Math_fround($5_1 + Math_fround($3_1 * $3_1));
        $3_1 = HEAPF32[$2_1 + 396 >> 2];
        $5_1 = Math_fround($5_1 + Math_fround($3_1 * $3_1));
        $3_1 = HEAPF32[$2_1 + 536 >> 2];
        if (!($5_1 < Math_fround($3_1 * $3_1))) {
         break label$7
        }
        HEAPF32[$2_1 + 224 >> 2] = HEAPF32[$2_1 + 224 >> 2] + $1_1;
        break label$4;
       }
       HEAP32[$2_1 + 224 >> 2] = 0;
       $308($2_1, 0);
       $4_1 = HEAP32[$2_1 + 220 >> 2];
      }
      if (($4_1 | 0) == 4) {
       break label$3
      }
     }
     label$8 : {
      if (HEAPU8[25192]) {
       break label$8
      }
      $3_1 = HEAPF32[5854];
      if ($3_1 == Math_fround(0.0) | (HEAPF32[$2_1 + 224 >> 2] > $3_1 ^ 1 ? ($4_1 & -2) != 2 : 0)) {
       break label$8
      }
      if (HEAPU8[$2_1 + 204 | 0] & 3) {
       $308($2_1, 2);
       break label$3;
      }
      if (($4_1 | 0) == 1) {
       $308($2_1, 3);
       $4_1 = HEAP32[$2_1 + 220 >> 2];
      }
      if (($4_1 | 0) != 2) {
       break label$3
      }
      HEAP32[$2_1 + 388 >> 2] = 0;
      HEAP32[$2_1 + 392 >> 2] = 0;
      HEAP32[$2_1 + 372 >> 2] = 0;
      HEAP32[$2_1 + 376 >> 2] = 0;
      $4_1 = $2_1 + 396 | 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$4_1 + 4 >> 2] = 0;
      $4_1 = $2_1 + 380 | 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$4_1 + 4 >> 2] = 0;
      HEAP32[$2_1 + 304 >> 2] = HEAP32[$2_1 + 304 >> 2] + 2;
      break label$3;
     }
     $308($2_1, 1);
    }
    $7_1 = $7_1 + 4 | 0;
    $9_1 = $9_1 + 1 | 0;
    if (($9_1 | 0) < HEAP32[$0 + 248 >> 2]) {
     continue
    }
    break;
   }
  }
  $614();
  global$0 = $6_1 + 16 | 0;
 }
 
 function $955($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = HEAP32[$0 + 228 >> 2];
  label$1 : {
   if (($3_1 | 0) != HEAP32[$0 + 232 >> 2]) {
    break label$1
   }
   $5_1 = $3_1 ? $3_1 << 1 : 1;
   if (($3_1 | 0) >= ($5_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$5_1) {
     break label$2
    }
    $7_1 = $79($5_1 << 2);
    $3_1 = HEAP32[$0 + 228 >> 2];
   }
   if (($3_1 | 0) >= 1) {
    $4_1 = $3_1;
    while (1) {
     HEAP32[$6_1 + $7_1 >> 2] = HEAP32[HEAP32[$0 + 236 >> 2] + $6_1 >> 2];
     $6_1 = $6_1 + 4 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue
     }
     break;
    };
   }
   $4_1 = HEAP32[$0 + 236 >> 2];
   if ($4_1) {
    if (HEAPU8[$0 + 240 | 0]) {
     $80($4_1);
     $3_1 = HEAP32[$0 + 228 >> 2];
    }
    HEAP32[$0 + 236 >> 2] = 0;
   }
   HEAP32[$0 + 236 >> 2] = $7_1;
   HEAP32[$0 + 232 >> 2] = $5_1;
   HEAP8[$0 + 240 | 0] = 1;
  }
  HEAP32[$0 + 228 >> 2] = $3_1 + 1;
  HEAP32[HEAP32[$0 + 236 >> 2] + ($3_1 << 2) >> 2] = $1_1;
  if ($2_1) {
   $809(HEAP32[$1_1 + 28 >> 2], $1_1);
   $809(HEAP32[$1_1 + 32 >> 2], $1_1);
  }
 }
 
 function $956($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0 + 228 >> 2];
  label$1 : {
   if (($2_1 | 0) < 1) {
    break label$1
   }
   $5_1 = HEAP32[$0 + 236 >> 2];
   $3_1 = $5_1;
   while (1) {
    if (($1_1 | 0) != HEAP32[$3_1 >> 2]) {
     $3_1 = $3_1 + 4 | 0;
     $4_1 = $4_1 + 1 | 0;
     if (($2_1 | 0) != ($4_1 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($2_1 | 0) <= ($4_1 | 0)) {
    break label$1
   }
   $4_1 = $3_1;
   $3_1 = $2_1 + -1 | 0;
   $2_1 = $3_1 << 2;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 + $5_1 >> 2];
   HEAP32[$0 + 228 >> 2] = $3_1;
   HEAP32[$2_1 + HEAP32[$0 + 236 >> 2] >> 2] = $1_1;
  }
  $810(HEAP32[$1_1 + 28 >> 2], $1_1);
  $810(HEAP32[$1_1 + 32 >> 2], $1_1);
 }
 
 function $957($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$0 + 296 >> 2];
  label$1 : {
   if (($2_1 | 0) != HEAP32[$0 + 300 >> 2]) {
    break label$1
   }
   $4_1 = $2_1 ? $2_1 << 1 : 1;
   if (($2_1 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    $6_1 = $79($4_1 << 2);
    $2_1 = HEAP32[$0 + 296 >> 2];
   }
   if (($2_1 | 0) >= 1) {
    $3_1 = $2_1;
    while (1) {
     HEAP32[$5_1 + $6_1 >> 2] = HEAP32[HEAP32[$0 + 304 >> 2] + $5_1 >> 2];
     $5_1 = $5_1 + 4 | 0;
     $3_1 = $3_1 + -1 | 0;
     if ($3_1) {
      continue
     }
     break;
    };
   }
   $3_1 = HEAP32[$0 + 304 >> 2];
   if ($3_1) {
    if (HEAPU8[$0 + 308 | 0]) {
     $80($3_1);
     $2_1 = HEAP32[$0 + 296 >> 2];
    }
    HEAP32[$0 + 304 >> 2] = 0;
   }
   HEAP32[$0 + 304 >> 2] = $6_1;
   HEAP32[$0 + 300 >> 2] = $4_1;
   HEAP8[$0 + 308 | 0] = 1;
  }
  HEAP32[$0 + 296 >> 2] = $2_1 + 1;
  HEAP32[HEAP32[$0 + 304 >> 2] + ($2_1 << 2) >> 2] = $1_1;
 }
 
 function $958($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0 + 296 >> 2];
  label$1 : {
   if (($2_1 | 0) < 1) {
    break label$1
   }
   $5_1 = HEAP32[$0 + 304 >> 2];
   $3_1 = $5_1;
   while (1) {
    if (($1_1 | 0) != HEAP32[$3_1 >> 2]) {
     $3_1 = $3_1 + 4 | 0;
     $4_1 = $4_1 + 1 | 0;
     if (($2_1 | 0) != ($4_1 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($2_1 | 0) <= ($4_1 | 0)) {
    break label$1
   }
   $4_1 = $3_1;
   $3_1 = $2_1 + -1 | 0;
   $2_1 = $3_1 << 2;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 + $5_1 >> 2];
   HEAP32[$0 + 296 >> 2] = $3_1;
   HEAP32[$2_1 + HEAP32[$0 + 304 >> 2] >> 2] = $1_1;
  }
 }
 
 function $959($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, $1_1);
 }
 
 function $960($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $1_1);
 }
 
 function $963($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $613($6_1 + 8 | 0, 21444);
  $4_1 = HEAP32[$0 + 196 >> 2];
  $5_1 = HEAP32[$0 + 228 >> 2];
  if (($4_1 | 0) < ($5_1 | 0)) {
   if (HEAP32[$0 + 200 >> 2] < ($5_1 | 0)) {
    label$3 : {
     if (!$5_1) {
      $2_1 = $4_1;
      break label$3;
     }
     $7_1 = $79($5_1 << 2);
     $2_1 = HEAP32[$0 + 196 >> 2];
    }
    if (($2_1 | 0) >= 1) {
     while (1) {
      HEAP32[$3_1 + $7_1 >> 2] = HEAP32[HEAP32[$0 + 204 >> 2] + $3_1 >> 2];
      $3_1 = $3_1 + 4 | 0;
      $2_1 = $2_1 + -1 | 0;
      if ($2_1) {
       continue
      }
      break;
     }
    }
    $2_1 = HEAP32[$0 + 204 >> 2];
    if ($2_1) {
     if (HEAPU8[$0 + 208 | 0]) {
      $80($2_1)
     }
     HEAP32[$0 + 204 >> 2] = 0;
    }
    HEAP32[$0 + 204 >> 2] = $7_1;
    HEAP32[$0 + 200 >> 2] = $5_1;
    HEAP8[$0 + 208 | 0] = 1;
   }
   $3_1 = $4_1 << 2;
   $2_1 = $5_1 - $4_1 | 0;
   while (1) {
    HEAP32[HEAP32[$0 + 204 >> 2] + $3_1 >> 2] = 0;
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 196 >> 2] = $5_1;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0) | 0) >= 1) {
   $3_1 = 0;
   $2_1 = 0;
   while (1) {
    HEAP32[HEAP32[$0 + 204 >> 2] + $3_1 >> 2] = HEAP32[HEAP32[$0 + 236 >> 2] + $3_1 >> 2];
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0) | 0)) {
     continue
    }
    break;
   };
  }
  $2_1 = HEAP32[$0 + 196 >> 2];
  if (($2_1 | 0) >= 2) {
   $964($0 + 192 | 0, $6_1, 0, $2_1 + -1 | 0)
  }
  $3_1 = 0;
  label$13 : {
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0)) {
    break label$13
   }
   $3_1 = HEAP32[$0 + 204 >> 2];
  }
  $965(HEAP32[$0 + 212 >> 2], $1_1, $3_1, HEAP32[$0 + 196 >> 2], FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0);
  $2_1 = HEAP32[$0 + 216 >> 2];
  $4_1 = HEAP32[$0 + 24 >> 2];
  (((wasm2js_i32$1 = $2_1, wasm2js_i32$2 = HEAP32[$0 + 8 >> 2]), wasm2js_i32$3 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 36 >> 2]]($4_1) | 0), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
  $920(HEAP32[$0 + 220 >> 2], HEAP32[$0 + 24 >> 2], $0, HEAP32[$0 + 212 >> 2]);
  $966(HEAP32[$0 + 212 >> 2]);
  $2_1 = HEAP32[$0 + 216 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1, HEAP32[$0 + 72 >> 2]);
  $614();
  global$0 = $6_1 + 16 | 0;
 }
 
 function $964($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0;
  while (1) {
   $12_1 = $2_1;
   $5_1 = HEAP32[$0 + 12 >> 2];
   $11 = HEAP32[$5_1 + (($2_1 + $3_1 | 0) / 2 << 2) >> 2];
   $4_1 = $3_1;
   while (1) {
    $9_1 = HEAP32[HEAP32[$11 + 28 >> 2] + 208 >> 2];
    $7_1 = ($9_1 | 0) < 0;
    label$3 : {
     if (!$7_1) {
      $8_1 = $2_1 + -1 | 0;
      $6_1 = (($2_1 << 2) + $5_1 | 0) + -4 | 0;
      while (1) {
       $8_1 = $8_1 + 1 | 0;
       $6_1 = $6_1 + 4 | 0;
       $10 = HEAP32[$6_1 >> 2];
       $2_1 = HEAP32[HEAP32[$10 + 28 >> 2] + 208 >> 2];
       if (($2_1 | 0) <= -1) {
        $2_1 = HEAP32[HEAP32[$10 + 32 >> 2] + 208 >> 2]
       }
       if (($2_1 | 0) < ($9_1 | 0)) {
        continue
       }
       break;
      };
      break label$3;
     }
     $8_1 = $2_1 + -1 | 0;
     $6_1 = (($2_1 << 2) + $5_1 | 0) + -4 | 0;
     $10 = HEAP32[HEAP32[$11 + 32 >> 2] + 208 >> 2];
     while (1) {
      $8_1 = $8_1 + 1 | 0;
      $6_1 = $6_1 + 4 | 0;
      $13_1 = HEAP32[$6_1 >> 2];
      $2_1 = HEAP32[HEAP32[$13_1 + 28 >> 2] + 208 >> 2];
      if (($2_1 | 0) <= -1) {
       $2_1 = HEAP32[HEAP32[$13_1 + 32 >> 2] + 208 >> 2]
      }
      if (($2_1 | 0) < ($10 | 0)) {
       continue
      }
      break;
     };
    }
    label$9 : {
     if (!$7_1) {
      $2_1 = $4_1 + 1 | 0;
      $4_1 = ($4_1 << 2) + $5_1 | 0;
      while (1) {
       $7_1 = HEAP32[$4_1 >> 2];
       $5_1 = HEAP32[HEAP32[$7_1 + 28 >> 2] + 208 >> 2];
       if (($5_1 | 0) <= -1) {
        $5_1 = HEAP32[HEAP32[$7_1 + 32 >> 2] + 208 >> 2]
       }
       $4_1 = $4_1 + -4 | 0;
       $2_1 = $2_1 + -1 | 0;
       if (($9_1 | 0) < ($5_1 | 0)) {
        continue
       }
       break;
      };
      $4_1 = $4_1 + 4 | 0;
      break label$9;
     }
     $2_1 = $4_1 + 1 | 0;
     $4_1 = ($4_1 << 2) + $5_1 | 0;
     $9_1 = HEAP32[HEAP32[$11 + 32 >> 2] + 208 >> 2];
     while (1) {
      $7_1 = HEAP32[$4_1 >> 2];
      $5_1 = HEAP32[HEAP32[$7_1 + 28 >> 2] + 208 >> 2];
      if (($5_1 | 0) <= -1) {
       $5_1 = HEAP32[HEAP32[$7_1 + 32 >> 2] + 208 >> 2]
      }
      $4_1 = $4_1 + -4 | 0;
      $2_1 = $2_1 + -1 | 0;
      if (($9_1 | 0) < ($5_1 | 0)) {
       continue
      }
      break;
     };
     $4_1 = $4_1 + 4 | 0;
    }
    label$15 : {
     if (($8_1 | 0) > ($2_1 | 0)) {
      $4_1 = $2_1;
      $2_1 = $8_1;
      break label$15;
     }
     $5_1 = HEAP32[$6_1 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[HEAP32[$0 + 12 >> 2] + ($2_1 << 2) >> 2] = $5_1;
     $4_1 = $2_1 + -1 | 0;
     $2_1 = $8_1 + 1 | 0;
    }
    if (($2_1 | 0) <= ($4_1 | 0)) {
     $5_1 = HEAP32[$0 + 12 >> 2];
     continue;
    }
    break;
   };
   if (($4_1 | 0) > ($12_1 | 0)) {
    $964($0, $1_1, $12_1, $4_1)
   }
   if (($2_1 | 0) < ($3_1 | 0)) {
    continue
   }
   break;
  };
 }
 
 function $965($0, $1_1, $2_1, $3_1, $4_1) {
  HEAP32[$0 + 20 >> 2] = $4_1;
  HEAP32[$0 + 16 >> 2] = $3_1;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$0 + 32 >> 2];
  if (($1_1 | 0) <= -1) {
   if (HEAP32[$0 + 36 >> 2] <= -1) {
    $2_1 = HEAP32[$0 + 40 >> 2];
    if ($2_1) {
     if (HEAPU8[$0 + 44 | 0]) {
      $80($2_1)
     }
     HEAP32[$0 + 40 >> 2] = 0;
    }
    HEAP32[$0 + 36 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = 0;
    HEAP8[$0 + 44 | 0] = 1;
   }
   $2_1 = $1_1 << 2;
   while (1) {
    HEAP32[HEAP32[$0 + 40 >> 2] + $2_1 >> 2] = 0;
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $1_1 + 1 | 0;
    $4_1 = $3_1 >>> 0 >= $1_1 >>> 0;
    $1_1 = $3_1;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 32 >> 2] = 0;
  $1_1 = HEAP32[$0 + 52 >> 2];
  if (($1_1 | 0) <= -1) {
   if (HEAP32[$0 + 56 >> 2] <= -1) {
    $2_1 = HEAP32[$0 + 60 >> 2];
    if ($2_1) {
     if (HEAPU8[$0 - -64 | 0]) {
      $80($2_1)
     }
     HEAP32[$0 + 60 >> 2] = 0;
    }
    HEAP32[$0 + 56 >> 2] = 0;
    HEAP32[$0 + 60 >> 2] = 0;
    HEAP8[$0 - -64 | 0] = 1;
   }
   $2_1 = $1_1 << 2;
   while (1) {
    HEAP32[HEAP32[$0 + 60 >> 2] + $2_1 >> 2] = 0;
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $1_1 + 1 | 0;
    $4_1 = $3_1 >>> 0 >= $1_1 >>> 0;
    $1_1 = $3_1;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 52 >> 2] = 0;
  $1_1 = HEAP32[$0 + 72 >> 2];
  if (($1_1 | 0) <= -1) {
   if (HEAP32[$0 + 76 >> 2] <= -1) {
    $2_1 = HEAP32[$0 + 80 >> 2];
    if ($2_1) {
     if (HEAPU8[$0 + 84 | 0]) {
      $80($2_1)
     }
     HEAP32[$0 + 80 >> 2] = 0;
    }
    HEAP32[$0 + 76 >> 2] = 0;
    HEAP32[$0 + 80 >> 2] = 0;
    HEAP8[$0 + 84 | 0] = 1;
   }
   $2_1 = $1_1 << 2;
   while (1) {
    HEAP32[HEAP32[$0 + 80 >> 2] + $2_1 >> 2] = 0;
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $1_1 + 1 | 0;
    $4_1 = $3_1 >>> 0 >= $1_1 >>> 0;
    $1_1 = $3_1;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 72 >> 2] = 0;
 }
 
 function $966($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $2_1 = HEAP32[$0 + 8 >> 2];
  $6_1 = $2_1;
  $4_1 = HEAP32[$0 + 32 >> 2];
  if ($4_1) {
   $3_1 = HEAP32[$0 + 40 >> 2]
  }
  $7_1 = $3_1;
  $3_1 = HEAP32[$0 + 52 >> 2];
  if ($3_1) {
   $1_1 = HEAP32[$0 + 60 >> 2]
  }
  $8_1 = $1_1;
  $1_1 = HEAP32[$0 + 72 >> 2];
  $5_1 = 0;
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   $5_1 = HEAP32[$0 + 80 >> 2];
  }
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($6_1, $7_1, $4_1, $8_1, $3_1, $5_1, $1_1, HEAP32[$0 + 4 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]));
  $1_1 = HEAP32[$0 + 32 >> 2];
  if (($1_1 | 0) <= -1) {
   if (HEAP32[$0 + 36 >> 2] <= -1) {
    $2_1 = HEAP32[$0 + 40 >> 2];
    if ($2_1) {
     if (HEAPU8[$0 + 44 | 0]) {
      $80($2_1)
     }
     HEAP32[$0 + 40 >> 2] = 0;
    }
    HEAP32[$0 + 36 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = 0;
    HEAP8[$0 + 44 | 0] = 1;
   }
   $3_1 = $1_1 << 2;
   while (1) {
    HEAP32[HEAP32[$0 + 40 >> 2] + $3_1 >> 2] = 0;
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $1_1 + 1 | 0;
    $4_1 = $2_1 >>> 0 >= $1_1 >>> 0;
    $1_1 = $2_1;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 32 >> 2] = 0;
  $1_1 = HEAP32[$0 + 52 >> 2];
  if (($1_1 | 0) <= -1) {
   if (HEAP32[$0 + 56 >> 2] <= -1) {
    $2_1 = HEAP32[$0 + 60 >> 2];
    if ($2_1) {
     if (HEAPU8[$0 - -64 | 0]) {
      $80($2_1)
     }
     HEAP32[$0 + 60 >> 2] = 0;
    }
    HEAP32[$0 + 56 >> 2] = 0;
    HEAP32[$0 + 60 >> 2] = 0;
    HEAP8[$0 - -64 | 0] = 1;
   }
   $3_1 = $1_1 << 2;
   while (1) {
    HEAP32[HEAP32[$0 + 60 >> 2] + $3_1 >> 2] = 0;
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $1_1 + 1 | 0;
    $4_1 = $2_1 >>> 0 >= $1_1 >>> 0;
    $1_1 = $2_1;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 52 >> 2] = 0;
  $1_1 = HEAP32[$0 + 72 >> 2];
  if (($1_1 | 0) <= -1) {
   if (HEAP32[$0 + 76 >> 2] <= -1) {
    $2_1 = HEAP32[$0 + 80 >> 2];
    if ($2_1) {
     if (HEAPU8[$0 + 84 | 0]) {
      $80($2_1)
     }
     HEAP32[$0 + 80 >> 2] = 0;
    }
    HEAP32[$0 + 76 >> 2] = 0;
    HEAP32[$0 + 80 >> 2] = 0;
    HEAP8[$0 + 84 | 0] = 1;
   }
   $3_1 = $1_1 << 2;
   while (1) {
    HEAP32[HEAP32[$0 + 80 >> 2] + $3_1 >> 2] = 0;
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $1_1 + 1 | 0;
    $4_1 = $2_1 >>> 0 >= $1_1 >>> 0;
    $1_1 = $2_1;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 72 >> 2] = 0;
 }
 
 function $967($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $613($8_1 + 8 | 0, 21461);
  $1_1 = HEAP32[$0 + 220 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $0, HEAP32[$0 + 24 >> 2]);
  $7_1 = HEAP32[$0 + 324 >> 2];
  if (($7_1 | 0) >= 1) {
   $9_1 = HEAP32[$0 + 332 >> 2];
   while (1) {
    $1_1 = HEAP32[$9_1 + ($6_1 << 2) >> 2];
    $2_1 = HEAP32[$1_1 + 772 >> 2];
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     $1_1 = HEAP32[$1_1 + 776 >> 2];
     if (!$1_1 | HEAP32[$2_1 + 204 >> 2] & 3 | HEAPU8[$1_1 + 204 | 0] & 3) {
      break label$3
     }
     $1_1 = HEAP32[$1_1 + 208 >> 2];
     $3_1 = HEAP32[HEAP32[$0 + 220 >> 2] + 16 >> 2];
     $4_1 = HEAP32[$2_1 + 208 >> 2];
     $5_1 = $3_1 + ($4_1 << 3) | 0;
     $2_1 = HEAP32[$5_1 >> 2];
     if (($2_1 | 0) != ($4_1 | 0)) {
      while (1) {
       $2_1 = $3_1 + ($2_1 << 3) | 0;
       HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
       $4_1 = HEAP32[$2_1 >> 2];
       $5_1 = $3_1 + ($4_1 << 3) | 0;
       $2_1 = HEAP32[$5_1 >> 2];
       if (($2_1 | 0) != ($4_1 | 0)) {
        continue
       }
       break;
      }
     }
     $5_1 = $3_1 + ($1_1 << 3) | 0;
     $2_1 = HEAP32[$5_1 >> 2];
     if (($1_1 | 0) != ($2_1 | 0)) {
      while (1) {
       $1_1 = $3_1 + ($2_1 << 3) | 0;
       HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
       $1_1 = HEAP32[$1_1 >> 2];
       $5_1 = $3_1 + ($1_1 << 3) | 0;
       $2_1 = HEAP32[$5_1 >> 2];
       if (($1_1 | 0) != ($2_1 | 0)) {
        continue
       }
       break;
      }
     }
     if (($1_1 | 0) == ($4_1 | 0)) {
      break label$3
     }
     $2_1 = $3_1 + ($4_1 << 3) | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     $1_1 = $3_1 + ($1_1 << 3) | 0;
     HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2];
    }
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
  $7_1 = HEAP32[$0 + 228 >> 2];
  if (($7_1 | 0) >= 1) {
   $9_1 = HEAP32[$0 + 236 >> 2];
   $5_1 = 0;
   while (1) {
    $1_1 = HEAP32[$9_1 + ($5_1 << 2) >> 2];
    label$10 : {
     if (!HEAPU8[$1_1 + 20 | 0]) {
      break label$10
     }
     $2_1 = HEAP32[$1_1 + 28 >> 2];
     if (HEAPU8[$2_1 + 204 | 0] & 3) {
      break label$10
     }
     $1_1 = HEAP32[$1_1 + 32 >> 2];
     if (HEAPU8[$1_1 + 204 | 0] & 3) {
      break label$10
     }
     $1_1 = HEAP32[$1_1 + 208 >> 2];
     $3_1 = HEAP32[HEAP32[$0 + 220 >> 2] + 16 >> 2];
     $4_1 = HEAP32[$2_1 + 208 >> 2];
     $2_1 = $3_1 + ($4_1 << 3) | 0;
     $6_1 = HEAP32[$2_1 >> 2];
     if (($6_1 | 0) != ($4_1 | 0)) {
      while (1) {
       $4_1 = $2_1;
       $2_1 = $3_1 + ($6_1 << 3) | 0;
       HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
       $4_1 = HEAP32[$2_1 >> 2];
       $2_1 = $3_1 + ($4_1 << 3) | 0;
       $6_1 = HEAP32[$2_1 >> 2];
       if (($6_1 | 0) != ($4_1 | 0)) {
        continue
       }
       break;
      }
     }
     $2_1 = $3_1 + ($1_1 << 3) | 0;
     $6_1 = HEAP32[$2_1 >> 2];
     if (($6_1 | 0) != ($1_1 | 0)) {
      while (1) {
       $1_1 = $3_1 + ($6_1 << 3) | 0;
       HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
       $1_1 = HEAP32[$1_1 >> 2];
       $2_1 = $3_1 + ($1_1 << 3) | 0;
       $6_1 = HEAP32[$2_1 >> 2];
       if (($6_1 | 0) != ($1_1 | 0)) {
        continue
       }
       break;
      }
     }
     if (($1_1 | 0) == ($4_1 | 0)) {
      break label$10
     }
     $2_1 = $3_1 + ($4_1 << 3) | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     $1_1 = $3_1 + ($1_1 << 3) | 0;
     HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2];
    }
    $5_1 = $5_1 + 1 | 0;
    if (($7_1 | 0) != ($5_1 | 0)) {
     continue
    }
    break;
   };
  }
  $1_1 = HEAP32[$0 + 220 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $0);
  $614();
  global$0 = $8_1 + 16 | 0;
 }
 
 function $968($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10 = 0, $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = 0, $21 = 0, $22_1 = 0, $23_1 = Math_fround(0), $24_1 = 0, $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32 = 0, $33_1 = 0, $34 = 0, $35 = 0, $36_1 = 0, $37_1 = 0, $38 = 0, $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42 = Math_fround(0), $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47 = 0, $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0);
  $5_1 = global$0 - 496 | 0;
  global$0 = $5_1;
  if (($2_1 | 0) >= 1) {
   $17_1 = $5_1 + 124 | 0;
   $43_1 = $5_1 + 92 | 0;
   $31_1 = $5_1 + 72 | 0;
   $44_1 = $5_1 + 368 | 0;
   $32 = $5_1 + 248 | 0;
   $19_1 = $5_1 + 232 | 0;
   $33_1 = $5_1 + 464 | 0;
   $20 = $5_1 + 216 | 0;
   $45_1 = $5_1 + 448 | 0;
   $24_1 = $5_1 + 292 | 0;
   $34 = $5_1 + 352 | 0;
   $35 = $5_1 + 336 | 0;
   $21 = $5_1 + 480 | 0;
   while (1) {
    $7_1 = HEAP32[($36_1 << 2) + $1_1 >> 2];
    HEAP32[$7_1 + 268 >> 2] = 1065353216;
    label$3 : {
     label$4 : {
      $4_1 = HEAP32[$7_1 + 220 >> 2] + -2 | 0;
      if ($4_1 >>> 0 > 3) {
       break label$4
      }
      switch ($4_1 - 1 | 0) {
      case 0:
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     if (HEAPU8[$7_1 + 204 | 0] & 3) {
      break label$3
     }
     $797($7_1, $3_1, $5_1 + 432 | 0);
     if (!HEAPU8[$0 + 44 | 0]) {
      break label$3
     }
     $9_1 = HEAPF32[$7_1 + 276 >> 2];
     $9_1 = Math_fround($9_1 * $9_1);
     if ($9_1 == Math_fround(0.0)) {
      break label$3
     }
     $13_1 = $9_1;
     $18_1 = $7_1 + 52 | 0;
     $9_1 = Math_fround(HEAPF32[$5_1 + 480 >> 2] - HEAPF32[$18_1 >> 2]);
     $12_1 = Math_fround($9_1 * $9_1);
     $9_1 = Math_fround(HEAPF32[$5_1 + 484 >> 2] - HEAPF32[$7_1 + 56 >> 2]);
     $12_1 = Math_fround($12_1 + Math_fround($9_1 * $9_1));
     $9_1 = Math_fround(HEAPF32[$5_1 + 488 >> 2] - HEAPF32[$7_1 + 60 >> 2]);
     if (!($13_1 < Math_fround($12_1 + Math_fround($9_1 * $9_1)))) {
      break label$3
     }
     $613($5_1 + 424 | 0, 21488);
     if (HEAP32[HEAP32[$7_1 + 192 >> 2] + 4 >> 2] <= 19) {
      HEAP32[6302] = HEAP32[6302] + 1;
      $4_1 = HEAP32[$0 + 68 >> 2];
      $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 36 >> 2]]($4_1) | 0;
      $6_1 = HEAP32[$18_1 + 4 >> 2];
      HEAP32[$35 >> 2] = HEAP32[$18_1 >> 2];
      HEAP32[$35 + 4 >> 2] = $6_1;
      $37_1 = $18_1 + 8 | 0;
      $6_1 = $37_1;
      $8_1 = HEAP32[$6_1 + 4 >> 2];
      $11 = $35 + 8 | 0;
      HEAP32[$11 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$11 + 4 >> 2] = $8_1;
      $6_1 = HEAP32[$21 + 4 >> 2];
      HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
      HEAP32[$34 + 4 >> 2] = $6_1;
      $6_1 = $21 + 8 | 0;
      $11 = HEAP32[$6_1 + 4 >> 2];
      $10 = $34 + 8 | 0;
      HEAP32[$10 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$10 + 4 >> 2] = $11;
      HEAP32[$5_1 + 332 >> 2] = -1;
      HEAP32[$5_1 + 324 >> 2] = 1065353216;
      HEAP32[$5_1 + 328 >> 2] = 1;
      HEAP32[$5_1 + 320 >> 2] = 21900;
      HEAP32[$5_1 + 400 >> 2] = 0;
      HEAP32[$5_1 + 408 >> 2] = 0;
      HEAP32[$5_1 + 416 >> 2] = HEAP32[$0 + 24 >> 2];
      HEAP32[$5_1 + 412 >> 2] = $4_1;
      HEAP32[$5_1 + 404 >> 2] = $7_1;
      $4_1 = HEAP32[$7_1 + 272 >> 2];
      $145($5_1 + 264 | 0);
      HEAP32[$24_1 >> 2] = 0;
      HEAP32[$24_1 + 4 >> 2] = 0;
      $8_1 = $24_1 + 8 | 0;
      HEAP32[$8_1 >> 2] = 0;
      HEAP32[$8_1 + 4 >> 2] = 0;
      HEAP32[$24_1 + 16 >> 2] = 0;
      HEAP32[$5_1 + 288 >> 2] = 1065353216;
      HEAP32[$5_1 + 280 >> 2] = 1065353216;
      HEAP32[$5_1 + 284 >> 2] = 1065353216;
      HEAP32[$5_1 + 268 >> 2] = 8;
      HEAP32[$5_1 + 264 >> 2] = 7868;
      HEAP32[$5_1 + 316 >> 2] = 0;
      HEAP32[$5_1 + 312 >> 2] = $4_1;
      HEAP32[$5_1 + 296 >> 2] = $4_1;
      HEAP32[$5_1 + 408 >> 2] = HEAP32[$0 + 56 >> 2];
      $4_1 = HEAP32[$7_1 + 188 >> 2];
      $8_1 = HEAP32[$4_1 + 8 >> 2];
      HEAP32[$5_1 + 328 >> 2] = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$5_1 + 332 >> 2] = $8_1;
      $4_1 = $5_1 + 440 | 0;
      $11 = HEAP32[$4_1 + 4 >> 2];
      $8_1 = $5_1 + 208 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $11;
      $4_1 = HEAP32[$21 + 4 >> 2];
      HEAP32[$32 >> 2] = HEAP32[$21 >> 2];
      HEAP32[$32 + 4 >> 2] = $4_1;
      $4_1 = $33_1 + 8 | 0;
      $10 = HEAP32[$4_1 + 4 >> 2];
      $11 = $19_1 + 8 | 0;
      HEAP32[$11 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$11 + 4 >> 2] = $10;
      $4_1 = HEAP32[$33_1 + 4 >> 2];
      HEAP32[$19_1 >> 2] = HEAP32[$33_1 >> 2];
      HEAP32[$19_1 + 4 >> 2] = $4_1;
      $4_1 = $45_1;
      $10 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$20 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$20 + 4 >> 2] = $10;
      $4_1 = $4_1 + 8 | 0;
      $14 = HEAP32[$4_1 + 4 >> 2];
      $10 = $20 + 8 | 0;
      HEAP32[$10 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$10 + 4 >> 2] = $14;
      $4_1 = HEAP32[$6_1 + 4 >> 2];
      $14 = $32 + 8 | 0;
      HEAP32[$14 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$14 + 4 >> 2] = $4_1;
      $4_1 = HEAP32[$5_1 + 436 >> 2];
      HEAP32[$5_1 + 200 >> 2] = HEAP32[$5_1 + 432 >> 2];
      HEAP32[$5_1 + 204 >> 2] = $4_1;
      $4_1 = $7_1 + 4 | 0;
      $6_1 = $4_1 + 8 | 0;
      $14 = HEAP32[$6_1 >> 2];
      $6_1 = HEAP32[$6_1 + 4 >> 2];
      $46_1 = HEAP32[$4_1 >> 2];
      $47 = HEAP32[$4_1 + 4 >> 2];
      $22_1 = $7_1 + 20 | 0;
      $38 = HEAP32[$22_1 + 4 >> 2];
      HEAP32[$20 >> 2] = HEAP32[$22_1 >> 2];
      HEAP32[$20 + 4 >> 2] = $38;
      $22_1 = $7_1 + 28 | 0;
      $38 = HEAP32[$22_1 + 4 >> 2];
      HEAP32[$10 >> 2] = HEAP32[$22_1 >> 2];
      HEAP32[$10 + 4 >> 2] = $38;
      HEAP32[$8_1 >> 2] = $14;
      HEAP32[$8_1 + 4 >> 2] = $6_1;
      HEAP32[$5_1 + 200 >> 2] = $46_1;
      HEAP32[$5_1 + 204 >> 2] = $47;
      $6_1 = $7_1 + 36 | 0;
      $8_1 = HEAP32[$6_1 + 4 >> 2];
      HEAP32[$19_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$19_1 + 4 >> 2] = $8_1;
      $6_1 = $7_1 + 44 | 0;
      $8_1 = HEAP32[$6_1 + 4 >> 2];
      HEAP32[$11 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$11 + 4 >> 2] = $8_1;
      $869($0, $5_1 + 264 | 0, $4_1, $5_1 + 200 | 0, $5_1 + 320 | 0, Math_fround(0.0));
      $9_1 = HEAPF32[$5_1 + 324 >> 2];
      if (!!($9_1 < Math_fround(1.0))) {
       $23_1 = HEAPF32[$7_1 + 60 >> 2];
       $15_1 = HEAPF32[$7_1 + 56 >> 2];
       $16_1 = HEAPF32[$7_1 + 52 >> 2];
       $13_1 = HEAPF32[$5_1 + 376 >> 2];
       $25 = HEAPF32[$5_1 + 488 >> 2];
       $26_1 = HEAPF32[$5_1 + 372 >> 2];
       $27_1 = HEAPF32[$5_1 + 484 >> 2];
       $28_1 = HEAPF32[$5_1 + 368 >> 2];
       $29_1 = HEAPF32[$5_1 + 480 >> 2];
       $4_1 = HEAP32[$0 + 24 >> 2];
       $11 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $7_1, HEAP32[$5_1 + 400 >> 2]) | 0;
       $30 = Math_fround($9_1 * Math_fround($27_1 - $15_1));
       $15_1 = Math_fround($9_1 * Math_fround($29_1 - $16_1));
       $12_1 = $13_1;
       $13_1 = Math_fround($9_1 * Math_fround($25 - $23_1));
       $16_1 = Math_fround(Math_fround(Math_fround($30 * Math_fround(-$26_1)) - Math_fround($28_1 * $15_1)) - Math_fround($12_1 * $13_1));
       $4_1 = HEAP32[$0 + 324 >> 2];
       label$7 : {
        if (($4_1 | 0) != HEAP32[$0 + 328 >> 2]) {
         break label$7
        }
        $10 = $4_1 ? $4_1 << 1 : 1;
        if (($4_1 | 0) >= ($10 | 0)) {
         break label$7
        }
        label$8 : {
         if (!$10) {
          $14 = 0;
          break label$8;
         }
         $14 = $79($10 << 2);
         $4_1 = HEAP32[$0 + 324 >> 2];
        }
        if (($4_1 | 0) >= 1) {
         $8_1 = 0;
         $6_1 = $4_1;
         while (1) {
          HEAP32[$8_1 + $14 >> 2] = HEAP32[HEAP32[$0 + 332 >> 2] + $8_1 >> 2];
          $8_1 = $8_1 + 4 | 0;
          $6_1 = $6_1 + -1 | 0;
          if ($6_1) {
           continue
          }
          break;
         };
        }
        $6_1 = HEAP32[$0 + 332 >> 2];
        if ($6_1) {
         if (HEAPU8[$0 + 336 | 0]) {
          $80($6_1);
          $4_1 = HEAP32[$0 + 324 >> 2];
         }
         HEAP32[$0 + 332 >> 2] = 0;
        }
        HEAP32[$0 + 332 >> 2] = $14;
        HEAP8[$0 + 336 | 0] = 1;
        HEAP32[$0 + 328 >> 2] = $10;
       }
       HEAP32[HEAP32[$0 + 332 >> 2] + ($4_1 << 2) >> 2] = $11;
       HEAP32[$0 + 324 >> 2] = $4_1 + 1;
       $4_1 = HEAP32[$5_1 + 400 >> 2];
       $25 = HEAPF32[$4_1 + 20 >> 2];
       $26_1 = HEAPF32[$4_1 + 36 >> 2];
       $27_1 = HEAPF32[$4_1 + 40 >> 2];
       $28_1 = HEAPF32[$4_1 + 8 >> 2];
       $29_1 = HEAPF32[$4_1 + 24 >> 2];
       $9_1 = HEAPF32[$4_1 + 60 >> 2];
       $48_1 = HEAPF32[$4_1 + 56 >> 2];
       $23_1 = HEAPF32[$4_1 + 52 >> 2];
       $40_1 = HEAPF32[$4_1 + 44 >> 2];
       $41_1 = HEAPF32[$4_1 + 12 >> 2];
       $12_1 = HEAPF32[$4_1 + 28 >> 2];
       $42 = HEAPF32[$4_1 + 4 >> 2];
       $39_1 = HEAPF32[$7_1 + 60 >> 2];
       $49_1 = HEAPF32[$7_1 + 52 >> 2];
       $50_1 = HEAPF32[$7_1 + 56 >> 2];
       $4_1 = $5_1 + 16 | 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$4_1 + 4 >> 2] = 0;
       $4_1 = $43_1;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$4_1 + 4 >> 2] = 0;
       $4_1 = $4_1 + 8 | 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$4_1 + 4 >> 2] = 0;
       HEAP32[$17_1 >> 2] = 0;
       HEAP32[$17_1 + 4 >> 2] = 0;
       $4_1 = $17_1 + 8 | 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$4_1 + 4 >> 2] = 0;
       $4_1 = $17_1 + 16 | 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$4_1 + 4 >> 2] = 0;
       $4_1 = $17_1 + 24 | 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$4_1 + 4 >> 2] = 0;
       $4_1 = $17_1 + 32 | 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$4_1 + 4 >> 2] = 0;
       HEAP32[$17_1 + 40 >> 2] = 0;
       $4_1 = $44_1;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$31_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$31_1 + 4 >> 2] = $6_1;
       $4_1 = $4_1 + 8 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $8_1 = $31_1 + 8 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       HEAP32[$5_1 + 8 >> 2] = 0;
       HEAP32[$5_1 + 12 >> 2] = 0;
       HEAP32[$5_1 + 36 >> 2] = 0;
       HEAPF32[$5_1 + 88 >> 2] = $16_1;
       $15_1 = Math_fround($15_1 + $49_1);
       $16_1 = Math_fround($30 + $50_1);
       $13_1 = Math_fround($13_1 + $39_1);
       $39_1 = Math_fround(Math_fround(Math_fround($41_1 * $15_1) + Math_fround($12_1 * $16_1)) + Math_fround($40_1 * $13_1));
       $30 = $12_1;
       $12_1 = Math_fround(-$48_1);
       HEAPF32[$5_1 + 32 >> 2] = $39_1 + Math_fround(Math_fround(Math_fround($30 * $12_1) - Math_fround($41_1 * $23_1)) - Math_fround($40_1 * $9_1));
       HEAPF32[$5_1 + 28 >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $28_1) + Math_fround($16_1 * $29_1)) + Math_fround($13_1 * $27_1)) + Math_fround(Math_fround(Math_fround($29_1 * $12_1) - Math_fround($28_1 * $23_1)) - Math_fround($27_1 * $9_1));
       HEAPF32[$5_1 + 24 >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $42) + Math_fround($16_1 * $25)) + Math_fround($13_1 * $26_1)) + Math_fround(Math_fround(Math_fround($25 * $12_1) - Math_fround($42 * $23_1)) - Math_fround($26_1 * $9_1));
       $4_1 = $11 + Math_imul($218($11, $5_1 + 8 | 0), 192) | 0;
       HEAP32[$4_1 + 100 >> 2] = 0;
       HEAPF32[$4_1 + 88 >> 2] = Math_min(Math_fround(Math_max(Math_fround(HEAPF32[$7_1 + 228 >> 2] * HEAPF32[HEAP32[$5_1 + 400 >> 2] + 228 >> 2]), Math_fround(-10.0))), Math_fround(10.0));
       $6_1 = HEAP32[$18_1 + 4 >> 2];
       $7_1 = $4_1 + 52 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$18_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$37_1 + 4 >> 2];
       $7_1 = $4_1 + 60 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$37_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $6_1;
       HEAP32[$4_1 + 48 >> 2] = 0;
       HEAPF32[$4_1 + 44 >> 2] = $13_1;
       HEAPF32[$4_1 + 40 >> 2] = $16_1;
       HEAPF32[$4_1 + 36 >> 2] = $15_1;
      }
     }
     $614();
    }
    $36_1 = $36_1 + 1 | 0;
    if (($36_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $5_1 + 496 | 0;
 }
 
 function $969($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $613($3_1, 21552);
  $613($3_1 + 8 | 0, 21515);
  $2_1 = HEAP32[$0 + 332 >> 2];
  if (HEAP32[$0 + 324 >> 2] >= 1) {
   while (1) {
    $4_1 = HEAP32[$0 + 24 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, HEAP32[$2_1 + $5_1 >> 2]);
    $5_1 = $5_1 + 4 | 0;
    $2_1 = HEAP32[$0 + 332 >> 2];
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < HEAP32[$0 + 324 >> 2]) {
     continue
    }
    break;
   }
  }
  if ($2_1) {
   if (HEAPU8[$0 + 336 | 0]) {
    $80($2_1)
   }
   HEAP32[$0 + 332 >> 2] = 0;
  }
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP32[$0 + 324 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP8[$0 + 336 | 0] = 1;
  $614();
  $2_1 = HEAP32[$0 + 248 >> 2];
  if (($2_1 | 0) >= 1) {
   $968($0, HEAP32[$0 + 256 >> 2], $2_1, $1_1)
  }
  $614();
  global$0 = $3_1 + 16 | 0;
 }
 
 function $970($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = 0, $21 = 0, $22_1 = 0, $23_1 = Math_fround(0), $24_1 = 0, $25 = 0, $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0;
  $4_1 = global$0 - 304 | 0;
  global$0 = $4_1;
  if (($2_1 | 0) >= 1) {
   $19_1 = $4_1 + 56 | 0;
   $13_1 = $4_1 + 40 | 0;
   $20 = $4_1 + 272 | 0;
   $14 = $4_1 + 24 | 0;
   $25 = $4_1 + 256 | 0;
   $17_1 = $4_1 + 100 | 0;
   $21 = $4_1 + 160 | 0;
   $22_1 = $4_1 + 144 | 0;
   $15_1 = $4_1 + 288 | 0;
   while (1) {
    $6_1 = HEAP32[$1_1 >> 2];
    HEAP32[$6_1 + 268 >> 2] = 1065353216;
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[$6_1 + 220 >> 2] + -2 | 0;
      if ($5_1 >>> 0 > 3) {
       break label$4
      }
      switch ($5_1 - 1 | 0) {
      case 0:
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     if (HEAPU8[$6_1 + 204 | 0] & 3) {
      break label$3
     }
     $797($6_1, $3_1, $4_1 + 240 | 0);
     label$5 : {
      if (!HEAPU8[$0 + 44 | 0]) {
       break label$5
      }
      $8_1 = HEAPF32[$6_1 + 276 >> 2];
      $8_1 = Math_fround($8_1 * $8_1);
      if ($8_1 == Math_fround(0.0)) {
       break label$5
      }
      $26_1 = $8_1;
      $5_1 = $6_1 + 52 | 0;
      $8_1 = Math_fround(HEAPF32[$4_1 + 288 >> 2] - HEAPF32[$5_1 >> 2]);
      $23_1 = Math_fround($8_1 * $8_1);
      $8_1 = Math_fround(HEAPF32[$4_1 + 292 >> 2] - HEAPF32[$6_1 + 56 >> 2]);
      $23_1 = Math_fround($23_1 + Math_fround($8_1 * $8_1));
      $8_1 = Math_fround(HEAPF32[$4_1 + 296 >> 2] - HEAPF32[$6_1 + 60 >> 2]);
      if (!($26_1 < Math_fround($23_1 + Math_fround($8_1 * $8_1)))) {
       break label$5
      }
      $613($4_1 + 232 | 0, 21577);
      label$6 : {
       if (HEAP32[HEAP32[$6_1 + 192 >> 2] + 4 >> 2] <= 19) {
        $18_1 = 0;
        HEAP32[6302] = HEAP32[6302] + 1;
        $7_1 = HEAP32[$0 + 68 >> 2];
        $9_1 = FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 36 >> 2]]($7_1) | 0;
        $7_1 = HEAP32[$5_1 + 4 >> 2];
        HEAP32[$22_1 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$22_1 + 4 >> 2] = $7_1;
        $5_1 = $5_1 + 8 | 0;
        $7_1 = HEAP32[$5_1 + 4 >> 2];
        $10 = $22_1 + 8 | 0;
        HEAP32[$10 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$10 + 4 >> 2] = $7_1;
        $5_1 = HEAP32[$15_1 + 4 >> 2];
        HEAP32[$21 >> 2] = HEAP32[$15_1 >> 2];
        HEAP32[$21 + 4 >> 2] = $5_1;
        $7_1 = $15_1 + 8 | 0;
        $5_1 = $7_1;
        $10 = HEAP32[$5_1 + 4 >> 2];
        $11 = $21 + 8 | 0;
        HEAP32[$11 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$11 + 4 >> 2] = $10;
        HEAP32[$4_1 + 140 >> 2] = -1;
        HEAP32[$4_1 + 132 >> 2] = 1065353216;
        HEAP32[$4_1 + 136 >> 2] = 1;
        HEAP32[$4_1 + 128 >> 2] = 21900;
        HEAP32[$4_1 + 208 >> 2] = 0;
        HEAP32[$4_1 + 216 >> 2] = 0;
        HEAP32[$4_1 + 224 >> 2] = HEAP32[$0 + 24 >> 2];
        HEAP32[$4_1 + 220 >> 2] = $9_1;
        HEAP32[$4_1 + 212 >> 2] = $6_1;
        $5_1 = HEAP32[$6_1 + 272 >> 2];
        $145($4_1 + 72 | 0);
        HEAP32[$17_1 >> 2] = 0;
        HEAP32[$17_1 + 4 >> 2] = 0;
        $9_1 = $17_1 + 8 | 0;
        HEAP32[$9_1 >> 2] = 0;
        HEAP32[$9_1 + 4 >> 2] = 0;
        HEAP32[$17_1 + 16 >> 2] = 0;
        HEAP32[$4_1 + 96 >> 2] = 1065353216;
        HEAP32[$4_1 + 88 >> 2] = 1065353216;
        HEAP32[$4_1 + 92 >> 2] = 1065353216;
        HEAP32[$4_1 + 76 >> 2] = 8;
        HEAP32[$4_1 + 72 >> 2] = 7868;
        HEAP32[$4_1 + 124 >> 2] = 0;
        HEAP32[$4_1 + 120 >> 2] = $5_1;
        HEAP32[$4_1 + 104 >> 2] = $5_1;
        HEAP32[$4_1 + 216 >> 2] = HEAP32[$0 + 56 >> 2];
        $5_1 = HEAP32[$6_1 + 188 >> 2];
        $9_1 = HEAP32[$5_1 + 8 >> 2];
        HEAP32[$4_1 + 136 >> 2] = HEAP32[$5_1 + 4 >> 2];
        HEAP32[$4_1 + 140 >> 2] = $9_1;
        $5_1 = $4_1 + 248 | 0;
        $10 = HEAP32[$5_1 + 4 >> 2];
        $9_1 = $4_1 + 16 | 0;
        HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$9_1 + 4 >> 2] = $10;
        $5_1 = HEAP32[$15_1 + 4 >> 2];
        HEAP32[$19_1 >> 2] = HEAP32[$15_1 >> 2];
        HEAP32[$19_1 + 4 >> 2] = $5_1;
        $5_1 = $20 + 8 | 0;
        $11 = HEAP32[$5_1 + 4 >> 2];
        $10 = $13_1 + 8 | 0;
        HEAP32[$10 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$10 + 4 >> 2] = $11;
        $5_1 = HEAP32[$20 + 4 >> 2];
        HEAP32[$13_1 >> 2] = HEAP32[$20 >> 2];
        HEAP32[$13_1 + 4 >> 2] = $5_1;
        $5_1 = $25;
        $11 = HEAP32[$5_1 + 4 >> 2];
        HEAP32[$14 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$14 + 4 >> 2] = $11;
        $5_1 = $5_1 + 8 | 0;
        $12_1 = HEAP32[$5_1 + 4 >> 2];
        $11 = $14 + 8 | 0;
        HEAP32[$11 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$11 + 4 >> 2] = $12_1;
        $5_1 = HEAP32[$7_1 + 4 >> 2];
        $12_1 = $19_1 + 8 | 0;
        HEAP32[$12_1 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$12_1 + 4 >> 2] = $5_1;
        $5_1 = HEAP32[$4_1 + 244 >> 2];
        HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 240 >> 2];
        HEAP32[$4_1 + 12 >> 2] = $5_1;
        $5_1 = $6_1 + 4 | 0;
        $7_1 = $5_1 + 8 | 0;
        $12_1 = HEAP32[$7_1 >> 2];
        $7_1 = HEAP32[$7_1 + 4 >> 2];
        $27_1 = HEAP32[$5_1 >> 2];
        $28_1 = HEAP32[$5_1 + 4 >> 2];
        $16_1 = $6_1 + 20 | 0;
        $24_1 = HEAP32[$16_1 + 4 >> 2];
        HEAP32[$14 >> 2] = HEAP32[$16_1 >> 2];
        HEAP32[$14 + 4 >> 2] = $24_1;
        $16_1 = $6_1 + 28 | 0;
        $24_1 = HEAP32[$16_1 + 4 >> 2];
        HEAP32[$11 >> 2] = HEAP32[$16_1 >> 2];
        HEAP32[$11 + 4 >> 2] = $24_1;
        HEAP32[$9_1 >> 2] = $12_1;
        HEAP32[$9_1 + 4 >> 2] = $7_1;
        HEAP32[$4_1 + 8 >> 2] = $27_1;
        HEAP32[$4_1 + 12 >> 2] = $28_1;
        $7_1 = $6_1 + 36 | 0;
        $9_1 = HEAP32[$7_1 + 4 >> 2];
        HEAP32[$13_1 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$13_1 + 4 >> 2] = $9_1;
        $7_1 = $6_1 + 44 | 0;
        $9_1 = HEAP32[$7_1 + 4 >> 2];
        HEAP32[$10 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$10 + 4 >> 2] = $9_1;
        $869($0, $4_1 + 72 | 0, $5_1, $4_1 + 8 | 0, $4_1 + 128 | 0, Math_fround(0.0));
        $8_1 = HEAPF32[$4_1 + 132 >> 2];
        if (!!($8_1 < Math_fround(1.0))) {
         HEAPF32[$6_1 + 268 >> 2] = $8_1;
         $797($6_1, Math_fround($8_1 * $3_1), $4_1 + 240 | 0);
         HEAP32[$6_1 + 268 >> 2] = 0;
         $804($6_1, $4_1 + 240 | 0);
         $18_1 = 4;
        }
        if ($18_1) {
         break label$6
        }
       }
       $18_1 = 0;
      }
      $614();
      if ($18_1) {
       break label$3
      }
     }
     $804($6_1, $4_1 + 240 | 0);
    }
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  global$0 = $4_1 + 304 | 0;
 }
 
 function $971($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0);
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $613($2_1 + 72 | 0, 21597);
  $3_1 = HEAP32[$0 + 248 >> 2];
  if (($3_1 | 0) >= 1) {
   $970($0, HEAP32[$0 + 256 >> 2], $3_1, $1_1)
  }
  if (HEAPU8[$0 + 291 | 0]) {
   $613($2_1 - -64 | 0, 21617);
   if (HEAP32[$0 + 324 >> 2] >= 1) {
    while (1) {
     $7_1 = HEAP32[HEAP32[$0 + 332 >> 2] + ($11 << 2) >> 2];
     label$5 : {
      if (HEAP32[$7_1 + 780 >> 2] < 1) {
       break label$5
      }
      $3_1 = HEAP32[$7_1 + 776 >> 2];
      $4_1 = HEAP32[$3_1 + 252 >> 2] << 30 >> 31 & $3_1;
      $3_1 = HEAP32[$7_1 + 772 >> 2];
      $5_1 = HEAP32[$3_1 + 252 >> 2] << 30 >> 31 & $3_1;
      if ($5_1) {
       $3_1 = $7_1 + 128 | 0;
       $8_1 = 0;
       while (1) {
        $1_1 = $221($5_1, $4_1);
        label$8 : {
         if (!($1_1 > Math_fround(0.0))) {
          break label$8
         }
         $6_1 = HEAPF32[$3_1 >> 2];
         if ($6_1 == Math_fround(0.0)) {
          break label$8
         }
         $12_1 = HEAPF32[$3_1 + -60 >> 2];
         $9_1 = HEAPF32[$3_1 + -56 >> 2];
         $10 = HEAPF32[$3_1 + -52 >> 2];
         HEAP32[$2_1 + 60 >> 2] = 0;
         HEAPF32[$2_1 + 56 >> 2] = $1_1 * Math_fround($6_1 * Math_fround(-$10));
         HEAPF32[$2_1 + 52 >> 2] = $1_1 * Math_fround($6_1 * Math_fround(-$9_1));
         HEAPF32[$2_1 + 48 >> 2] = $1_1 * Math_fround($6_1 * Math_fround(-$12_1));
         HEAP32[$2_1 + 44 >> 2] = 0;
         HEAPF32[$2_1 + 40 >> 2] = HEAPF32[$3_1 + -68 >> 2] - HEAPF32[$5_1 + 60 >> 2];
         HEAPF32[$2_1 + 36 >> 2] = HEAPF32[$3_1 + -72 >> 2] - HEAPF32[$5_1 + 56 >> 2];
         HEAPF32[$2_1 + 32 >> 2] = HEAPF32[$3_1 + -76 >> 2] - HEAPF32[$5_1 + 52 >> 2];
         HEAP32[$2_1 + 28 >> 2] = 0;
         HEAPF32[$2_1 + 24 >> 2] = HEAPF32[$3_1 + -84 >> 2] - HEAPF32[$4_1 + 60 >> 2];
         HEAPF32[$2_1 + 20 >> 2] = HEAPF32[$3_1 + -88 >> 2] - HEAPF32[$4_1 + 56 >> 2];
         HEAPF32[$2_1 + 16 >> 2] = HEAPF32[$3_1 + -92 >> 2] - HEAPF32[$4_1 + 52 >> 2];
         $1213($5_1, $2_1 + 48 | 0, $2_1 + 32 | 0);
         HEAP32[$2_1 + 12 >> 2] = 0;
         HEAPF32[$2_1 + 8 >> 2] = -HEAPF32[$2_1 + 56 >> 2];
         HEAPF32[$2_1 + 4 >> 2] = -HEAPF32[$2_1 + 52 >> 2];
         HEAPF32[$2_1 >> 2] = -HEAPF32[$2_1 + 48 >> 2];
         $1213($4_1, $2_1, $2_1 + 16 | 0);
        }
        $3_1 = $3_1 + 192 | 0;
        $8_1 = $8_1 + 1 | 0;
        if (($8_1 | 0) < HEAP32[$7_1 + 780 >> 2]) {
         continue
        }
        break;
       };
       break label$5;
      }
      $3_1 = $7_1 + 68 | 0;
      $8_1 = 0;
      while (1) {
       $1_1 = $221($5_1, $4_1);
       label$10 : {
        if (!($1_1 > Math_fround(0.0))) {
         break label$10
        }
        $6_1 = HEAPF32[$3_1 + 60 >> 2];
        if ($6_1 == Math_fround(0.0)) {
         break label$10
        }
        $12_1 = HEAPF32[$3_1 + 8 >> 2];
        $9_1 = HEAPF32[$3_1 + 4 >> 2];
        $10 = HEAPF32[$3_1 >> 2];
        HEAP32[$2_1 + 60 >> 2] = 0;
        $10 = Math_fround($1_1 * Math_fround($6_1 * Math_fround(-$10)));
        HEAPF32[$2_1 + 48 >> 2] = $10;
        $9_1 = Math_fround($1_1 * Math_fround($6_1 * Math_fround(-$9_1)));
        HEAPF32[$2_1 + 52 >> 2] = $9_1;
        $1_1 = Math_fround($1_1 * Math_fround($6_1 * Math_fround(-$12_1)));
        HEAPF32[$2_1 + 56 >> 2] = $1_1;
        HEAP32[$2_1 + 44 >> 2] = 0;
        HEAPF32[$2_1 + 40 >> 2] = HEAPF32[$3_1 + -8 >> 2] - HEAPF32[$5_1 + 60 >> 2];
        HEAPF32[$2_1 + 36 >> 2] = HEAPF32[$3_1 + -12 >> 2] - HEAPF32[$5_1 + 56 >> 2];
        HEAPF32[$2_1 + 32 >> 2] = HEAPF32[$3_1 + -16 >> 2] - HEAPF32[$5_1 + 52 >> 2];
        HEAP32[$2_1 + 28 >> 2] = 0;
        HEAPF32[$2_1 + 24 >> 2] = HEAPF32[$3_1 + -24 >> 2] - HEAPF32[$4_1 + 60 >> 2];
        HEAPF32[$2_1 + 20 >> 2] = HEAPF32[$3_1 + -28 >> 2] - HEAPF32[$4_1 + 56 >> 2];
        HEAPF32[$2_1 + 16 >> 2] = HEAPF32[$3_1 + -32 >> 2] - HEAPF32[$4_1 + 52 >> 2];
        HEAP32[$2_1 + 12 >> 2] = 0;
        HEAPF32[$2_1 + 8 >> 2] = -$1_1;
        HEAPF32[$2_1 + 4 >> 2] = -$9_1;
        HEAPF32[$2_1 >> 2] = -$10;
        $1213($4_1, $2_1, $2_1 + 16 | 0);
       }
       $3_1 = $3_1 + 192 | 0;
       $8_1 = $8_1 + 1 | 0;
       if (($8_1 | 0) < HEAP32[$7_1 + 780 >> 2]) {
        continue
       }
       break;
      };
     }
     $11 = $11 + 1 | 0;
     if (($11 | 0) < HEAP32[$0 + 324 >> 2]) {
      continue
     }
     break;
    }
   }
   $614();
  }
  $614();
  global$0 = $2_1 + 80 | 0;
 }
 
 function $972($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $613($3_1 + 8 | 0, 21655);
  $4_1 = HEAP32[$0 + 248 >> 2];
  if (($4_1 | 0) >= 1) {
   while (1) {
    $2_1 = HEAP32[HEAP32[$0 + 256 >> 2] + $5_1 >> 2];
    if (!(HEAPU8[$2_1 + 204 | 0] & 3)) {
     $802($2_1, $1_1);
     $797($2_1, $1_1, $2_1 + 68 | 0);
     $4_1 = HEAP32[$0 + 248 >> 2];
    }
    $5_1 = $5_1 + 4 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < ($4_1 | 0)) {
     continue
    }
    break;
   }
  }
  $614();
  global$0 = $3_1 + 16 | 0;
 }
 
 function $973($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = 0, $30 = Math_fround(0), $31_1 = 0, $32 = Math_fround(0), $33_1 = Math_fround(0), $34 = Math_fround(0), $35 = 0, $36_1 = 0, $37_1 = 0, $38 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = 0, $42 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = 0, $45_1 = Math_fround(0);
  $2_1 = global$0 - 176 | 0;
  global$0 = $2_1;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 56 >> 2]]($3_1) | 0;
  $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 56 >> 2]]($5_1) | 0;
  $26_1 = HEAPF32[$1_1 + 40 >> 2];
  label$1 : {
   if ($26_1 <= Math_fround(0.0)) {
    break label$1
   }
   $6_1 = HEAP32[$1_1 + 4 >> 2] + -3 | 0;
   if ($6_1 >>> 0 > 9) {
    break label$1
   }
   $4_1 = $3_1 & 2048;
   $11 = $5_1 & 4096;
   label$2 : {
    switch ($6_1 - 1 | 0) {
    default:
     $5_1 = $2_1 + 172 | 0;
     HEAP32[$5_1 >> 2] = 0;
     $6_1 = $2_1 + 164 | 0;
     $3_1 = $6_1;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = $2_1 + 156 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = $2_1 + 124 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = $2_1 + 136 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 132 >> 2] = 1065353216;
     HEAP32[$2_1 + 152 >> 2] = 1065353216;
     HEAP32[$2_1 + 116 >> 2] = 0;
     HEAP32[$2_1 + 120 >> 2] = 0;
     HEAP32[$2_1 + 144 >> 2] = 0;
     HEAP32[$2_1 + 148 >> 2] = 0;
     HEAP32[$2_1 + 112 >> 2] = 1065353216;
     $3_1 = HEAP32[$1_1 + 28 >> 2];
     $12_1 = HEAPF32[$3_1 + 52 >> 2];
     $15_1 = HEAPF32[$3_1 + 8 >> 2];
     $16_1 = HEAPF32[$3_1 + 12 >> 2];
     $14 = HEAPF32[$3_1 + 56 >> 2];
     $17_1 = HEAPF32[$3_1 + 28 >> 2];
     $18_1 = HEAPF32[$3_1 + 20 >> 2];
     $20 = HEAPF32[$3_1 + 24 >> 2];
     $8_1 = HEAPF32[$3_1 + 60 >> 2];
     $10 = HEAPF32[$3_1 + 44 >> 2];
     $9_1 = HEAPF32[$3_1 + 36 >> 2];
     $21 = HEAPF32[$3_1 + 40 >> 2];
     $22_1 = HEAPF32[$3_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = 0;
     $25 = $2_1 + 168 | 0;
     $19_1 = $8_1;
     $8_1 = HEAPF32[$1_1 + 300 >> 2];
     $23_1 = Math_fround($9_1 * $8_1);
     $9_1 = HEAPF32[$1_1 + 304 >> 2];
     $24_1 = $10;
     $10 = HEAPF32[$1_1 + 308 >> 2];
     HEAPF32[$25 >> 2] = $19_1 + Math_fround(Math_fround($23_1 + Math_fround($21 * $9_1)) + Math_fround($24_1 * $10));
     HEAPF32[$6_1 >> 2] = $14 + Math_fround(Math_fround(Math_fround($8_1 * $18_1) + Math_fround($9_1 * $20)) + Math_fround($10 * $17_1));
     HEAPF32[$2_1 + 160 >> 2] = $12_1 + Math_fround(Math_fround(Math_fround($8_1 * $22_1) + Math_fround($9_1 * $15_1)) + Math_fround($10 * $16_1));
     $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 112 | 0, $26_1);
     $3_1 = HEAP32[$1_1 + 32 >> 2];
     $12_1 = HEAPF32[$3_1 + 52 >> 2];
     $15_1 = HEAPF32[$3_1 + 8 >> 2];
     $16_1 = HEAPF32[$3_1 + 12 >> 2];
     $14 = HEAPF32[$3_1 + 56 >> 2];
     $17_1 = HEAPF32[$3_1 + 28 >> 2];
     $18_1 = HEAPF32[$3_1 + 20 >> 2];
     $20 = HEAPF32[$3_1 + 24 >> 2];
     $8_1 = HEAPF32[$3_1 + 60 >> 2];
     $10 = HEAPF32[$3_1 + 44 >> 2];
     $9_1 = HEAPF32[$3_1 + 36 >> 2];
     $21 = HEAPF32[$3_1 + 40 >> 2];
     $22_1 = HEAPF32[$3_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = 0;
     $19_1 = $8_1;
     $8_1 = HEAPF32[$1_1 + 316 >> 2];
     $23_1 = Math_fround($9_1 * $8_1);
     $9_1 = HEAPF32[$1_1 + 320 >> 2];
     $24_1 = $10;
     $10 = HEAPF32[$1_1 + 324 >> 2];
     HEAPF32[$25 >> 2] = $19_1 + Math_fround(Math_fround($23_1 + Math_fround($21 * $9_1)) + Math_fround($24_1 * $10));
     HEAPF32[$6_1 >> 2] = $14 + Math_fround(Math_fround(Math_fround($8_1 * $18_1) + Math_fround($9_1 * $20)) + Math_fround($10 * $17_1));
     HEAPF32[$2_1 + 160 >> 2] = $12_1 + Math_fround(Math_fround(Math_fround($8_1 * $22_1) + Math_fround($9_1 * $15_1)) + Math_fround($10 * $16_1));
     if (!$4_1) {
      break label$1
     }
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, $2_1 + 112 | 0, $26_1);
     break label$1;
    case 0:
     $3_1 = HEAP32[$1_1 + 28 >> 2];
     $38 = HEAPF32[$3_1 + 52 >> 2];
     $8_1 = HEAPF32[$3_1 + 8 >> 2];
     $9_1 = HEAPF32[$3_1 + 12 >> 2];
     $20 = HEAPF32[$1_1 + 584 >> 2];
     $21 = HEAPF32[$1_1 + 552 >> 2];
     $22_1 = HEAPF32[$1_1 + 568 >> 2];
     $39_1 = HEAPF32[$3_1 + 56 >> 2];
     $40_1 = HEAPF32[$3_1 + 60 >> 2];
     $30 = HEAPF32[$1_1 + 608 >> 2];
     $24_1 = HEAPF32[$1_1 + 600 >> 2];
     $32 = HEAPF32[$1_1 + 604 >> 2];
     $10 = HEAPF32[$3_1 + 28 >> 2];
     $12_1 = HEAPF32[$3_1 + 20 >> 2];
     $15_1 = HEAPF32[$3_1 + 24 >> 2];
     $33_1 = HEAPF32[$1_1 + 588 >> 2];
     $19_1 = HEAPF32[$1_1 + 556 >> 2];
     $23_1 = HEAPF32[$1_1 + 572 >> 2];
     $27_1 = HEAPF32[$1_1 + 592 >> 2];
     $16_1 = HEAPF32[$3_1 + 44 >> 2];
     $34 = HEAPF32[$1_1 + 560 >> 2];
     $14 = HEAPF32[$3_1 + 36 >> 2];
     $28_1 = HEAPF32[$1_1 + 576 >> 2];
     $17_1 = HEAPF32[$3_1 + 40 >> 2];
     $18_1 = HEAPF32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 172 >> 2] = 0;
     HEAP32[$2_1 + 156 >> 2] = 0;
     HEAP32[$2_1 + 140 >> 2] = 0;
     HEAPF32[$2_1 + 152 >> 2] = Math_fround(Math_fround($34 * $14) + Math_fround($28_1 * $17_1)) + Math_fround($27_1 * $16_1);
     HEAPF32[$2_1 + 148 >> 2] = Math_fround(Math_fround($19_1 * $14) + Math_fround($23_1 * $17_1)) + Math_fround($33_1 * $16_1);
     HEAPF32[$2_1 + 136 >> 2] = Math_fround(Math_fround($34 * $12_1) + Math_fround($28_1 * $15_1)) + Math_fround($27_1 * $10);
     HEAPF32[$2_1 + 132 >> 2] = Math_fround(Math_fround($19_1 * $12_1) + Math_fround($23_1 * $15_1)) + Math_fround($33_1 * $10);
     HEAPF32[$2_1 + 168 >> 2] = $40_1 + Math_fround(Math_fround(Math_fround($14 * $24_1) + Math_fround($17_1 * $32)) + Math_fround($16_1 * $30));
     HEAPF32[$2_1 + 164 >> 2] = $39_1 + Math_fround(Math_fround(Math_fround($12_1 * $24_1) + Math_fround($15_1 * $32)) + Math_fround($10 * $30));
     HEAP32[$2_1 + 124 >> 2] = 0;
     HEAPF32[$2_1 + 144 >> 2] = Math_fround(Math_fround($21 * $14) + Math_fround($22_1 * $17_1)) + Math_fround($20 * $16_1);
     HEAPF32[$2_1 + 128 >> 2] = Math_fround(Math_fround($21 * $12_1) + Math_fround($22_1 * $15_1)) + Math_fround($20 * $10);
     HEAPF32[$2_1 + 120 >> 2] = Math_fround(Math_fround($18_1 * $34) + Math_fround($8_1 * $28_1)) + Math_fround($9_1 * $27_1);
     HEAPF32[$2_1 + 116 >> 2] = Math_fround(Math_fround($18_1 * $19_1) + Math_fround($8_1 * $23_1)) + Math_fround($9_1 * $33_1);
     HEAPF32[$2_1 + 112 >> 2] = Math_fround(Math_fround($21 * $18_1) + Math_fround($22_1 * $8_1)) + Math_fround($20 * $9_1);
     HEAPF32[$2_1 + 160 >> 2] = $38 + Math_fround(Math_fround(Math_fround($18_1 * $24_1) + Math_fround($8_1 * $32)) + Math_fround($9_1 * $30));
     label$8 : {
      if ($4_1) {
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 112 | 0, $26_1);
       $3_1 = HEAP32[$1_1 + 32 >> 2];
       $38 = HEAPF32[$3_1 + 52 >> 2];
       $8_1 = HEAPF32[$3_1 + 8 >> 2];
       $9_1 = HEAPF32[$3_1 + 12 >> 2];
       $39_1 = HEAPF32[$3_1 + 56 >> 2];
       $40_1 = HEAPF32[$3_1 + 60 >> 2];
       $20 = HEAPF32[$1_1 + 672 >> 2];
       $21 = HEAPF32[$1_1 + 664 >> 2];
       $22_1 = HEAPF32[$1_1 + 668 >> 2];
       $10 = HEAPF32[$3_1 + 28 >> 2];
       $12_1 = HEAPF32[$3_1 + 20 >> 2];
       $15_1 = HEAPF32[$3_1 + 24 >> 2];
       $30 = HEAPF32[$1_1 + 648 >> 2];
       $24_1 = HEAPF32[$1_1 + 616 >> 2];
       $32 = HEAPF32[$1_1 + 632 >> 2];
       $33_1 = HEAPF32[$1_1 + 652 >> 2];
       $19_1 = HEAPF32[$1_1 + 620 >> 2];
       $23_1 = HEAPF32[$1_1 + 636 >> 2];
       $27_1 = HEAPF32[$1_1 + 656 >> 2];
       $16_1 = HEAPF32[$3_1 + 44 >> 2];
       $34 = HEAPF32[$1_1 + 624 >> 2];
       $14 = HEAPF32[$3_1 + 36 >> 2];
       $28_1 = HEAPF32[$1_1 + 640 >> 2];
       $17_1 = HEAPF32[$3_1 + 40 >> 2];
       $18_1 = HEAPF32[$3_1 + 4 >> 2];
       HEAP32[$2_1 + 172 >> 2] = 0;
       HEAP32[$2_1 + 156 >> 2] = 0;
       HEAP32[$2_1 + 140 >> 2] = 0;
       HEAPF32[$2_1 + 152 >> 2] = Math_fround(Math_fround($34 * $14) + Math_fround($28_1 * $17_1)) + Math_fround($27_1 * $16_1);
       HEAPF32[$2_1 + 148 >> 2] = Math_fround(Math_fround($19_1 * $14) + Math_fround($23_1 * $17_1)) + Math_fround($33_1 * $16_1);
       HEAPF32[$2_1 + 144 >> 2] = Math_fround(Math_fround($24_1 * $14) + Math_fround($32 * $17_1)) + Math_fround($30 * $16_1);
       HEAPF32[$2_1 + 136 >> 2] = Math_fround(Math_fround($34 * $12_1) + Math_fround($28_1 * $15_1)) + Math_fround($27_1 * $10);
       HEAPF32[$2_1 + 132 >> 2] = Math_fround(Math_fround($19_1 * $12_1) + Math_fround($23_1 * $15_1)) + Math_fround($33_1 * $10);
       HEAPF32[$2_1 + 168 >> 2] = $40_1 + Math_fround(Math_fround(Math_fround($14 * $21) + Math_fround($17_1 * $22_1)) + Math_fround($16_1 * $20));
       HEAPF32[$2_1 + 164 >> 2] = $39_1 + Math_fround(Math_fround(Math_fround($12_1 * $21) + Math_fround($15_1 * $22_1)) + Math_fround($10 * $20));
       HEAPF32[$2_1 + 160 >> 2] = $38 + Math_fround(Math_fround(Math_fround($18_1 * $21) + Math_fround($8_1 * $22_1)) + Math_fround($9_1 * $20));
       HEAP32[$2_1 + 124 >> 2] = 0;
       HEAPF32[$2_1 + 128 >> 2] = Math_fround(Math_fround($24_1 * $12_1) + Math_fround($32 * $15_1)) + Math_fround($30 * $10);
       HEAPF32[$2_1 + 120 >> 2] = Math_fround(Math_fround($18_1 * $34) + Math_fround($8_1 * $28_1)) + Math_fround($9_1 * $27_1);
       HEAPF32[$2_1 + 116 >> 2] = Math_fround(Math_fround($18_1 * $19_1) + Math_fround($8_1 * $23_1)) + Math_fround($9_1 * $33_1);
       HEAPF32[$2_1 + 112 >> 2] = Math_fround(Math_fround($24_1 * $18_1) + Math_fround($32 * $8_1)) + Math_fround($30 * $9_1);
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 112 | 0, $26_1);
       break label$8;
      }
      $3_1 = HEAP32[$1_1 + 32 >> 2];
      $38 = HEAPF32[$3_1 + 52 >> 2];
      $39_1 = HEAPF32[$3_1 + 56 >> 2];
      $40_1 = HEAPF32[$3_1 + 60 >> 2];
      $20 = HEAPF32[$1_1 + 672 >> 2];
      $21 = HEAPF32[$1_1 + 664 >> 2];
      $22_1 = HEAPF32[$1_1 + 668 >> 2];
      $8_1 = HEAPF32[$3_1 + 8 >> 2];
      $9_1 = HEAPF32[$3_1 + 12 >> 2];
      $10 = HEAPF32[$3_1 + 28 >> 2];
      $12_1 = HEAPF32[$3_1 + 20 >> 2];
      $15_1 = HEAPF32[$3_1 + 24 >> 2];
      $30 = HEAPF32[$1_1 + 648 >> 2];
      $24_1 = HEAPF32[$1_1 + 616 >> 2];
      $32 = HEAPF32[$1_1 + 632 >> 2];
      $33_1 = HEAPF32[$1_1 + 652 >> 2];
      $19_1 = HEAPF32[$1_1 + 620 >> 2];
      $23_1 = HEAPF32[$1_1 + 636 >> 2];
      $27_1 = HEAPF32[$1_1 + 656 >> 2];
      $16_1 = HEAPF32[$3_1 + 44 >> 2];
      $34 = HEAPF32[$1_1 + 624 >> 2];
      $14 = HEAPF32[$3_1 + 36 >> 2];
      $28_1 = HEAPF32[$1_1 + 640 >> 2];
      $17_1 = HEAPF32[$3_1 + 40 >> 2];
      $18_1 = HEAPF32[$3_1 + 4 >> 2];
      HEAP32[$2_1 + 172 >> 2] = 0;
      HEAP32[$2_1 + 156 >> 2] = 0;
      HEAP32[$2_1 + 140 >> 2] = 0;
      HEAP32[$2_1 + 124 >> 2] = 0;
      HEAPF32[$2_1 + 152 >> 2] = Math_fround(Math_fround($34 * $14) + Math_fround($28_1 * $17_1)) + Math_fround($27_1 * $16_1);
      HEAPF32[$2_1 + 148 >> 2] = Math_fround(Math_fround($19_1 * $14) + Math_fround($23_1 * $17_1)) + Math_fround($33_1 * $16_1);
      HEAPF32[$2_1 + 144 >> 2] = Math_fround(Math_fround($24_1 * $14) + Math_fround($32 * $17_1)) + Math_fround($30 * $16_1);
      HEAPF32[$2_1 + 136 >> 2] = Math_fround(Math_fround($34 * $12_1) + Math_fround($28_1 * $15_1)) + Math_fround($27_1 * $10);
      HEAPF32[$2_1 + 132 >> 2] = Math_fround(Math_fround($19_1 * $12_1) + Math_fround($23_1 * $15_1)) + Math_fround($33_1 * $10);
      HEAPF32[$2_1 + 128 >> 2] = Math_fround(Math_fround($24_1 * $12_1) + Math_fround($32 * $15_1)) + Math_fround($30 * $10);
      HEAPF32[$2_1 + 120 >> 2] = Math_fround(Math_fround($18_1 * $34) + Math_fround($8_1 * $28_1)) + Math_fround($9_1 * $27_1);
      HEAPF32[$2_1 + 116 >> 2] = Math_fround(Math_fround($18_1 * $19_1) + Math_fround($8_1 * $23_1)) + Math_fround($9_1 * $33_1);
      HEAPF32[$2_1 + 112 >> 2] = Math_fround(Math_fround($24_1 * $18_1) + Math_fround($32 * $8_1)) + Math_fround($30 * $9_1);
      HEAPF32[$2_1 + 168 >> 2] = $40_1 + Math_fround(Math_fround(Math_fround($14 * $21) + Math_fround($17_1 * $22_1)) + Math_fround($16_1 * $20));
      HEAPF32[$2_1 + 164 >> 2] = $39_1 + Math_fround(Math_fround(Math_fround($12_1 * $21) + Math_fround($15_1 * $22_1)) + Math_fround($10 * $20));
      HEAPF32[$2_1 + 160 >> 2] = $38 + Math_fround(Math_fround(Math_fround($18_1 * $21) + Math_fround($8_1 * $22_1)) + Math_fround($9_1 * $20));
     }
     $3_1 = $1_1 + 688 | 0;
     $8_1 = $927($3_1);
     $9_1 = $926($3_1);
     if (!$11 | $8_1 == $9_1) {
      break label$1
     }
     $10 = HEAPF32[$1_1 + 692 >> 2];
     HEAP32[$2_1 + 96 >> 2] = HEAP32[$2_1 + 120 >> 2];
     HEAP32[$2_1 + 100 >> 2] = HEAP32[$2_1 + 136 >> 2];
     HEAP32[$2_1 + 108 >> 2] = 0;
     HEAP32[$2_1 + 104 >> 2] = HEAP32[$2_1 + 152 >> 2];
     HEAP32[$2_1 + 80 >> 2] = HEAP32[$2_1 + 112 >> 2];
     HEAP32[$2_1 + 84 >> 2] = HEAP32[$2_1 + 128 >> 2];
     HEAP32[$2_1 + 92 >> 2] = 0;
     HEAP32[$2_1 + 88 >> 2] = HEAP32[$2_1 + 144 >> 2];
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $1_1 = $2_1 + 72 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 64 >> 2] = 0;
     HEAP32[$2_1 + 68 >> 2] = 0;
     $1_1 = $10 > Math_fround(0.0);
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $2_1 + 160 | 0, $2_1 + 96 | 0, $2_1 + 80 | 0, $26_1, $26_1, $1_1 ? $8_1 : Math_fround(0.0), $1_1 ? $9_1 : Math_fround(6.2831854820251465), $2_1 - -64 | 0, $1_1, Math_fround(10.0));
     break label$1;
    case 1:
     $3_1 = HEAP32[$1_1 + 28 >> 2];
     $38 = HEAPF32[$3_1 + 52 >> 2];
     $8_1 = HEAPF32[$3_1 + 8 >> 2];
     $9_1 = HEAPF32[$3_1 + 12 >> 2];
     $20 = HEAPF32[$1_1 + 332 >> 2];
     $21 = HEAPF32[$1_1 + 300 >> 2];
     $22_1 = HEAPF32[$1_1 + 316 >> 2];
     $39_1 = HEAPF32[$3_1 + 56 >> 2];
     $40_1 = HEAPF32[$3_1 + 60 >> 2];
     $30 = HEAPF32[$1_1 + 356 >> 2];
     $24_1 = HEAPF32[$1_1 + 348 >> 2];
     $32 = HEAPF32[$1_1 + 352 >> 2];
     $10 = HEAPF32[$3_1 + 28 >> 2];
     $12_1 = HEAPF32[$3_1 + 20 >> 2];
     $15_1 = HEAPF32[$3_1 + 24 >> 2];
     $33_1 = HEAPF32[$1_1 + 336 >> 2];
     $19_1 = HEAPF32[$1_1 + 304 >> 2];
     $23_1 = HEAPF32[$1_1 + 320 >> 2];
     $27_1 = HEAPF32[$1_1 + 340 >> 2];
     $16_1 = HEAPF32[$3_1 + 44 >> 2];
     $34 = HEAPF32[$1_1 + 308 >> 2];
     $14 = HEAPF32[$3_1 + 36 >> 2];
     $28_1 = HEAPF32[$1_1 + 324 >> 2];
     $17_1 = HEAPF32[$3_1 + 40 >> 2];
     $18_1 = HEAPF32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 172 >> 2] = 0;
     HEAP32[$2_1 + 156 >> 2] = 0;
     HEAP32[$2_1 + 140 >> 2] = 0;
     HEAPF32[$2_1 + 152 >> 2] = Math_fround(Math_fround($34 * $14) + Math_fround($28_1 * $17_1)) + Math_fround($27_1 * $16_1);
     HEAPF32[$2_1 + 148 >> 2] = Math_fround(Math_fround($19_1 * $14) + Math_fround($23_1 * $17_1)) + Math_fround($33_1 * $16_1);
     HEAPF32[$2_1 + 136 >> 2] = Math_fround(Math_fround($34 * $12_1) + Math_fround($28_1 * $15_1)) + Math_fround($27_1 * $10);
     HEAPF32[$2_1 + 132 >> 2] = Math_fround(Math_fround($19_1 * $12_1) + Math_fround($23_1 * $15_1)) + Math_fround($33_1 * $10);
     HEAPF32[$2_1 + 168 >> 2] = $40_1 + Math_fround(Math_fround(Math_fround($14 * $24_1) + Math_fround($17_1 * $32)) + Math_fround($16_1 * $30));
     HEAPF32[$2_1 + 164 >> 2] = $39_1 + Math_fround(Math_fround(Math_fround($12_1 * $24_1) + Math_fround($15_1 * $32)) + Math_fround($10 * $30));
     HEAP32[$2_1 + 124 >> 2] = 0;
     HEAPF32[$2_1 + 144 >> 2] = Math_fround(Math_fround($21 * $14) + Math_fround($22_1 * $17_1)) + Math_fround($20 * $16_1);
     HEAPF32[$2_1 + 128 >> 2] = Math_fround(Math_fround($21 * $12_1) + Math_fround($22_1 * $15_1)) + Math_fround($20 * $10);
     HEAPF32[$2_1 + 120 >> 2] = Math_fround(Math_fround($18_1 * $34) + Math_fround($8_1 * $28_1)) + Math_fround($9_1 * $27_1);
     HEAPF32[$2_1 + 116 >> 2] = Math_fround(Math_fround($18_1 * $19_1) + Math_fround($8_1 * $23_1)) + Math_fround($9_1 * $33_1);
     HEAPF32[$2_1 + 112 >> 2] = Math_fround(Math_fround($21 * $18_1) + Math_fround($22_1 * $8_1)) + Math_fround($20 * $9_1);
     HEAPF32[$2_1 + 160 >> 2] = $38 + Math_fround(Math_fround(Math_fround($18_1 * $24_1) + Math_fround($8_1 * $32)) + Math_fround($9_1 * $30));
     label$10 : {
      if ($4_1) {
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 112 | 0, $26_1);
       $3_1 = HEAP32[$1_1 + 32 >> 2];
       $38 = HEAPF32[$3_1 + 52 >> 2];
       $8_1 = HEAPF32[$3_1 + 8 >> 2];
       $9_1 = HEAPF32[$3_1 + 12 >> 2];
       $39_1 = HEAPF32[$3_1 + 56 >> 2];
       $40_1 = HEAPF32[$3_1 + 60 >> 2];
       $20 = HEAPF32[$1_1 + 420 >> 2];
       $21 = HEAPF32[$1_1 + 412 >> 2];
       $22_1 = HEAPF32[$1_1 + 416 >> 2];
       $10 = HEAPF32[$3_1 + 28 >> 2];
       $12_1 = HEAPF32[$3_1 + 20 >> 2];
       $15_1 = HEAPF32[$3_1 + 24 >> 2];
       $30 = HEAPF32[$1_1 + 396 >> 2];
       $24_1 = HEAPF32[$1_1 + 364 >> 2];
       $32 = HEAPF32[$1_1 + 380 >> 2];
       $33_1 = HEAPF32[$1_1 + 400 >> 2];
       $19_1 = HEAPF32[$1_1 + 368 >> 2];
       $23_1 = HEAPF32[$1_1 + 384 >> 2];
       $27_1 = HEAPF32[$1_1 + 404 >> 2];
       $16_1 = HEAPF32[$3_1 + 44 >> 2];
       $34 = HEAPF32[$1_1 + 372 >> 2];
       $14 = HEAPF32[$3_1 + 36 >> 2];
       $28_1 = HEAPF32[$1_1 + 388 >> 2];
       $17_1 = HEAPF32[$3_1 + 40 >> 2];
       $18_1 = HEAPF32[$3_1 + 4 >> 2];
       HEAP32[$2_1 + 172 >> 2] = 0;
       HEAP32[$2_1 + 156 >> 2] = 0;
       HEAP32[$2_1 + 140 >> 2] = 0;
       HEAPF32[$2_1 + 152 >> 2] = Math_fround(Math_fround($34 * $14) + Math_fround($28_1 * $17_1)) + Math_fround($27_1 * $16_1);
       HEAPF32[$2_1 + 148 >> 2] = Math_fround(Math_fround($19_1 * $14) + Math_fround($23_1 * $17_1)) + Math_fround($33_1 * $16_1);
       HEAPF32[$2_1 + 144 >> 2] = Math_fround(Math_fround($24_1 * $14) + Math_fround($32 * $17_1)) + Math_fround($30 * $16_1);
       HEAPF32[$2_1 + 136 >> 2] = Math_fround(Math_fround($34 * $12_1) + Math_fround($28_1 * $15_1)) + Math_fround($27_1 * $10);
       HEAPF32[$2_1 + 132 >> 2] = Math_fround(Math_fround($19_1 * $12_1) + Math_fround($23_1 * $15_1)) + Math_fround($33_1 * $10);
       HEAPF32[$2_1 + 168 >> 2] = $40_1 + Math_fround(Math_fround(Math_fround($14 * $21) + Math_fround($17_1 * $22_1)) + Math_fround($16_1 * $20));
       HEAPF32[$2_1 + 164 >> 2] = $39_1 + Math_fround(Math_fround(Math_fround($12_1 * $21) + Math_fround($15_1 * $22_1)) + Math_fround($10 * $20));
       HEAPF32[$2_1 + 160 >> 2] = $38 + Math_fround(Math_fround(Math_fround($18_1 * $21) + Math_fround($8_1 * $22_1)) + Math_fround($9_1 * $20));
       HEAP32[$2_1 + 124 >> 2] = 0;
       HEAPF32[$2_1 + 128 >> 2] = Math_fround(Math_fround($24_1 * $12_1) + Math_fround($32 * $15_1)) + Math_fround($30 * $10);
       HEAPF32[$2_1 + 120 >> 2] = Math_fround(Math_fround($18_1 * $34) + Math_fround($8_1 * $28_1)) + Math_fround($9_1 * $27_1);
       HEAPF32[$2_1 + 116 >> 2] = Math_fround(Math_fround($18_1 * $19_1) + Math_fround($8_1 * $23_1)) + Math_fround($9_1 * $33_1);
       HEAPF32[$2_1 + 112 >> 2] = Math_fround(Math_fround($24_1 * $18_1) + Math_fround($32 * $8_1)) + Math_fround($30 * $9_1);
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 112 | 0, $26_1);
       break label$10;
      }
      $3_1 = HEAP32[$1_1 + 32 >> 2];
      $38 = HEAPF32[$3_1 + 52 >> 2];
      $39_1 = HEAPF32[$3_1 + 56 >> 2];
      $40_1 = HEAPF32[$3_1 + 60 >> 2];
      $20 = HEAPF32[$1_1 + 420 >> 2];
      $21 = HEAPF32[$1_1 + 412 >> 2];
      $22_1 = HEAPF32[$1_1 + 416 >> 2];
      $8_1 = HEAPF32[$3_1 + 8 >> 2];
      $9_1 = HEAPF32[$3_1 + 12 >> 2];
      $10 = HEAPF32[$3_1 + 28 >> 2];
      $12_1 = HEAPF32[$3_1 + 20 >> 2];
      $15_1 = HEAPF32[$3_1 + 24 >> 2];
      $30 = HEAPF32[$1_1 + 396 >> 2];
      $24_1 = HEAPF32[$1_1 + 364 >> 2];
      $32 = HEAPF32[$1_1 + 380 >> 2];
      $33_1 = HEAPF32[$1_1 + 400 >> 2];
      $19_1 = HEAPF32[$1_1 + 368 >> 2];
      $23_1 = HEAPF32[$1_1 + 384 >> 2];
      $27_1 = HEAPF32[$1_1 + 404 >> 2];
      $16_1 = HEAPF32[$3_1 + 44 >> 2];
      $34 = HEAPF32[$1_1 + 372 >> 2];
      $14 = HEAPF32[$3_1 + 36 >> 2];
      $28_1 = HEAPF32[$1_1 + 388 >> 2];
      $17_1 = HEAPF32[$3_1 + 40 >> 2];
      $18_1 = HEAPF32[$3_1 + 4 >> 2];
      HEAP32[$2_1 + 172 >> 2] = 0;
      HEAP32[$2_1 + 156 >> 2] = 0;
      HEAP32[$2_1 + 140 >> 2] = 0;
      HEAP32[$2_1 + 124 >> 2] = 0;
      HEAPF32[$2_1 + 152 >> 2] = Math_fround(Math_fround($34 * $14) + Math_fround($28_1 * $17_1)) + Math_fround($27_1 * $16_1);
      HEAPF32[$2_1 + 148 >> 2] = Math_fround(Math_fround($19_1 * $14) + Math_fround($23_1 * $17_1)) + Math_fround($33_1 * $16_1);
      HEAPF32[$2_1 + 144 >> 2] = Math_fround(Math_fround($24_1 * $14) + Math_fround($32 * $17_1)) + Math_fround($30 * $16_1);
      HEAPF32[$2_1 + 136 >> 2] = Math_fround(Math_fround($34 * $12_1) + Math_fround($28_1 * $15_1)) + Math_fround($27_1 * $10);
      HEAPF32[$2_1 + 132 >> 2] = Math_fround(Math_fround($19_1 * $12_1) + Math_fround($23_1 * $15_1)) + Math_fround($33_1 * $10);
      HEAPF32[$2_1 + 128 >> 2] = Math_fround(Math_fround($24_1 * $12_1) + Math_fround($32 * $15_1)) + Math_fround($30 * $10);
      HEAPF32[$2_1 + 120 >> 2] = Math_fround(Math_fround($18_1 * $34) + Math_fround($8_1 * $28_1)) + Math_fround($9_1 * $27_1);
      HEAPF32[$2_1 + 116 >> 2] = Math_fround(Math_fround($18_1 * $19_1) + Math_fround($8_1 * $23_1)) + Math_fround($9_1 * $33_1);
      HEAPF32[$2_1 + 112 >> 2] = Math_fround(Math_fround($24_1 * $18_1) + Math_fround($32 * $8_1)) + Math_fround($30 * $9_1);
      HEAPF32[$2_1 + 168 >> 2] = $40_1 + Math_fround(Math_fround(Math_fround($14 * $21) + Math_fround($17_1 * $22_1)) + Math_fround($16_1 * $20));
      HEAPF32[$2_1 + 164 >> 2] = $39_1 + Math_fround(Math_fround(Math_fround($12_1 * $21) + Math_fround($15_1 * $22_1)) + Math_fround($10 * $20));
      HEAPF32[$2_1 + 160 >> 2] = $38 + Math_fround(Math_fround(Math_fround($18_1 * $21) + Math_fround($8_1 * $22_1)) + Math_fround($9_1 * $20));
     }
     if (!$11) {
      break label$1
     }
     $934($2_1 + 96 | 0, $1_1, Math_fround(6.0868353843688965), $26_1);
     HEAP32[$2_1 + 108 >> 2] = 0;
     $8_1 = HEAPF32[$2_1 + 96 >> 2];
     $9_1 = HEAPF32[$2_1 + 100 >> 2];
     $10 = HEAPF32[$2_1 + 104 >> 2];
     HEAPF32[$2_1 + 104 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$2_1 + 144 >> 2]) + Math_fround($9_1 * HEAPF32[$2_1 + 148 >> 2])) + Math_fround($10 * HEAPF32[$2_1 + 152 >> 2])) + HEAPF32[$2_1 + 168 >> 2];
     HEAPF32[$2_1 + 100 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$2_1 + 128 >> 2]) + Math_fround($9_1 * HEAPF32[$2_1 + 132 >> 2])) + Math_fround($10 * HEAPF32[$2_1 + 136 >> 2])) + HEAPF32[$2_1 + 164 >> 2];
     HEAPF32[$2_1 + 96 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$2_1 + 112 >> 2]) + Math_fround($9_1 * HEAPF32[$2_1 + 116 >> 2])) + Math_fround($10 * HEAPF32[$2_1 + 120 >> 2])) + HEAPF32[$2_1 + 160 >> 2];
     $5_1 = $2_1 + 160 | 0;
     $6_1 = $2_1 + 72 | 0;
     $3_1 = 0;
     while (1) {
      $934($2_1 + 80 | 0, $1_1, Math_fround(Math_fround(Math_fround($3_1 | 0) * Math_fround(6.283185005187988)) * Math_fround(.03125)), $26_1);
      HEAP32[$2_1 + 92 >> 2] = 0;
      $8_1 = HEAPF32[$2_1 + 80 >> 2];
      $9_1 = HEAPF32[$2_1 + 84 >> 2];
      $10 = HEAPF32[$2_1 + 88 >> 2];
      HEAPF32[$2_1 + 88 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$2_1 + 144 >> 2]) + Math_fround($9_1 * HEAPF32[$2_1 + 148 >> 2])) + Math_fround($10 * HEAPF32[$2_1 + 152 >> 2])) + HEAPF32[$2_1 + 168 >> 2];
      HEAPF32[$2_1 + 84 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$2_1 + 128 >> 2]) + Math_fround($9_1 * HEAPF32[$2_1 + 132 >> 2])) + Math_fround($10 * HEAPF32[$2_1 + 136 >> 2])) + HEAPF32[$2_1 + 164 >> 2];
      HEAPF32[$2_1 + 80 >> 2] = Math_fround(Math_fround(Math_fround($8_1 * HEAPF32[$2_1 + 112 >> 2]) + Math_fround($9_1 * HEAPF32[$2_1 + 116 >> 2])) + Math_fround($10 * HEAPF32[$2_1 + 120 >> 2])) + HEAPF32[$2_1 + 160 >> 2];
      $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      HEAP32[$6_1 >> 2] = 0;
      HEAP32[$6_1 + 4 >> 2] = 0;
      HEAP32[$2_1 + 64 >> 2] = 0;
      HEAP32[$2_1 + 68 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $2_1 + 96 | 0, $2_1 + 80 | 0, $2_1 - -64 | 0);
      if (!($3_1 & 3)) {
       $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       HEAP32[$6_1 >> 2] = 0;
       HEAP32[$6_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 64 >> 2] = 0;
       HEAP32[$2_1 + 68 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $5_1, $2_1 + 80 | 0, $2_1 - -64 | 0);
      }
      $25 = $2_1 + 88 | 0;
      $35 = HEAP32[$25 + 4 >> 2];
      $4_1 = $2_1 + 104 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$25 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $35;
      $4_1 = HEAP32[$2_1 + 84 >> 2];
      HEAP32[$2_1 + 96 >> 2] = HEAP32[$2_1 + 80 >> 2];
      HEAP32[$2_1 + 100 >> 2] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != 32) {
       continue
      }
      break;
     };
     $21 = HEAPF32[$1_1 + 512 >> 2];
     $22_1 = HEAPF32[$1_1 + 452 >> 2];
     $3_1 = HEAP32[$1_1 + 32 >> 2];
     label$14 : {
      if (HEAPF32[$3_1 + 404 >> 2] > Math_fround(0.0)) {
       $8_1 = HEAPF32[$3_1 + 36 >> 2];
       $14 = HEAPF32[$1_1 + 412 >> 2];
       $9_1 = HEAPF32[$3_1 + 40 >> 2];
       $17_1 = HEAPF32[$1_1 + 416 >> 2];
       $30 = Math_fround(Math_fround($8_1 * $14) + Math_fround($9_1 * $17_1));
       $10 = HEAPF32[$3_1 + 20 >> 2];
       $12_1 = HEAPF32[$3_1 + 24 >> 2];
       $15_1 = HEAPF32[$3_1 + 28 >> 2];
       $24_1 = HEAPF32[$1_1 + 420 >> 2];
       $32 = Math_fround(Math_fround(Math_fround($10 * $14) + Math_fround($12_1 * $17_1)) + Math_fround($15_1 * $24_1));
       $16_1 = HEAPF32[$3_1 + 4 >> 2];
       $19_1 = Math_fround($16_1 * $14);
       $14 = HEAPF32[$3_1 + 8 >> 2];
       $19_1 = Math_fround($19_1 + Math_fround($14 * $17_1));
       $17_1 = HEAPF32[$3_1 + 12 >> 2];
       $33_1 = Math_fround($19_1 + Math_fround($17_1 * $24_1));
       $19_1 = HEAPF32[$1_1 + 372 >> 2];
       $23_1 = HEAPF32[$1_1 + 388 >> 2];
       $27_1 = HEAPF32[$1_1 + 404 >> 2];
       $18_1 = HEAPF32[$3_1 + 44 >> 2];
       $34 = Math_fround(Math_fround(Math_fround($19_1 * $8_1) + Math_fround($23_1 * $9_1)) + Math_fround($27_1 * $18_1));
       $28_1 = HEAPF32[$1_1 + 368 >> 2];
       $38 = HEAPF32[$1_1 + 384 >> 2];
       $39_1 = HEAPF32[$1_1 + 400 >> 2];
       $20 = Math_fround(Math_fround(Math_fround($28_1 * $8_1) + Math_fround($38 * $9_1)) + Math_fround($39_1 * $18_1));
       $40_1 = HEAPF32[$1_1 + 364 >> 2];
       $42 = HEAPF32[$1_1 + 380 >> 2];
       $43_1 = HEAPF32[$1_1 + 396 >> 2];
       $8_1 = Math_fround(Math_fround(Math_fround($40_1 * $8_1) + Math_fround($42 * $9_1)) + Math_fround($43_1 * $18_1));
       $45_1 = Math_fround(Math_fround(Math_fround($19_1 * $10) + Math_fround($23_1 * $12_1)) + Math_fround($27_1 * $15_1));
       $9_1 = Math_fround(Math_fround(Math_fround($28_1 * $10) + Math_fround($38 * $12_1)) + Math_fround($39_1 * $15_1));
       $10 = Math_fround(Math_fround(Math_fround($40_1 * $10) + Math_fround($42 * $12_1)) + Math_fround($43_1 * $15_1));
       $19_1 = Math_fround(Math_fround(Math_fround($16_1 * $19_1) + Math_fround($14 * $23_1)) + Math_fround($17_1 * $27_1));
       $12_1 = Math_fround(Math_fround(Math_fround($16_1 * $28_1) + Math_fround($14 * $38)) + Math_fround($17_1 * $39_1));
       $15_1 = Math_fround(Math_fround(Math_fround($40_1 * $16_1) + Math_fround($42 * $14)) + Math_fround($43_1 * $17_1));
       $16_1 = Math_fround($18_1 * $24_1);
       break label$14;
      }
      $3_1 = HEAP32[$1_1 + 28 >> 2];
      $8_1 = HEAPF32[$3_1 + 36 >> 2];
      $14 = HEAPF32[$1_1 + 348 >> 2];
      $9_1 = HEAPF32[$3_1 + 40 >> 2];
      $17_1 = HEAPF32[$1_1 + 352 >> 2];
      $30 = Math_fround(Math_fround($8_1 * $14) + Math_fround($9_1 * $17_1));
      $10 = HEAPF32[$3_1 + 20 >> 2];
      $12_1 = HEAPF32[$3_1 + 24 >> 2];
      $15_1 = HEAPF32[$3_1 + 28 >> 2];
      $24_1 = HEAPF32[$1_1 + 356 >> 2];
      $32 = Math_fround(Math_fround(Math_fround($10 * $14) + Math_fround($12_1 * $17_1)) + Math_fround($15_1 * $24_1));
      $16_1 = HEAPF32[$3_1 + 4 >> 2];
      $19_1 = Math_fround($16_1 * $14);
      $14 = HEAPF32[$3_1 + 8 >> 2];
      $19_1 = Math_fround($19_1 + Math_fround($14 * $17_1));
      $17_1 = HEAPF32[$3_1 + 12 >> 2];
      $33_1 = Math_fround($19_1 + Math_fround($17_1 * $24_1));
      $19_1 = HEAPF32[$1_1 + 308 >> 2];
      $23_1 = HEAPF32[$1_1 + 324 >> 2];
      $27_1 = HEAPF32[$1_1 + 340 >> 2];
      $18_1 = HEAPF32[$3_1 + 44 >> 2];
      $34 = Math_fround(Math_fround(Math_fround($19_1 * $8_1) + Math_fround($23_1 * $9_1)) + Math_fround($27_1 * $18_1));
      $28_1 = HEAPF32[$1_1 + 304 >> 2];
      $38 = HEAPF32[$1_1 + 320 >> 2];
      $39_1 = HEAPF32[$1_1 + 336 >> 2];
      $20 = Math_fround(Math_fround(Math_fround($28_1 * $8_1) + Math_fround($38 * $9_1)) + Math_fround($39_1 * $18_1));
      $40_1 = HEAPF32[$1_1 + 300 >> 2];
      $42 = HEAPF32[$1_1 + 316 >> 2];
      $43_1 = HEAPF32[$1_1 + 332 >> 2];
      $8_1 = Math_fround(Math_fround(Math_fround($40_1 * $8_1) + Math_fround($42 * $9_1)) + Math_fround($43_1 * $18_1));
      $45_1 = Math_fround(Math_fround(Math_fround($19_1 * $10) + Math_fround($23_1 * $12_1)) + Math_fround($27_1 * $15_1));
      $9_1 = Math_fround(Math_fround(Math_fround($28_1 * $10) + Math_fround($38 * $12_1)) + Math_fround($39_1 * $15_1));
      $10 = Math_fround(Math_fround(Math_fround($40_1 * $10) + Math_fround($42 * $12_1)) + Math_fround($43_1 * $15_1));
      $19_1 = Math_fround(Math_fround(Math_fround($16_1 * $19_1) + Math_fround($14 * $23_1)) + Math_fround($17_1 * $27_1));
      $12_1 = Math_fround(Math_fround(Math_fround($16_1 * $28_1) + Math_fround($14 * $38)) + Math_fround($17_1 * $39_1));
      $15_1 = Math_fround(Math_fround(Math_fround($40_1 * $16_1) + Math_fround($42 * $14)) + Math_fround($43_1 * $17_1));
      $16_1 = Math_fround($18_1 * $24_1);
     }
     HEAP32[$2_1 + 156 >> 2] = 0;
     HEAPF32[$2_1 + 152 >> 2] = $34;
     HEAPF32[$2_1 + 148 >> 2] = $20;
     HEAPF32[$2_1 + 144 >> 2] = $8_1;
     HEAP32[$2_1 + 140 >> 2] = 0;
     HEAPF32[$2_1 + 136 >> 2] = $45_1;
     HEAPF32[$2_1 + 132 >> 2] = $9_1;
     HEAPF32[$2_1 + 128 >> 2] = $10;
     HEAP32[$2_1 + 124 >> 2] = 0;
     HEAPF32[$2_1 + 120 >> 2] = $19_1;
     HEAPF32[$2_1 + 116 >> 2] = $12_1;
     HEAPF32[$2_1 + 112 >> 2] = $15_1;
     $14 = HEAPF32[$3_1 + 52 >> 2];
     $17_1 = HEAPF32[$3_1 + 56 >> 2];
     $18_1 = HEAPF32[$3_1 + 60 >> 2];
     HEAP32[$2_1 + 172 >> 2] = 0;
     HEAPF32[$2_1 + 168 >> 2] = $18_1 + Math_fround($30 + $16_1);
     HEAPF32[$2_1 + 164 >> 2] = $32 + $17_1;
     HEAPF32[$2_1 + 160 >> 2] = $14 + $33_1;
     $3_1 = $5_1 + 8 | 0;
     $6_1 = HEAP32[$3_1 + 4 >> 2];
     $1_1 = $2_1 + 88 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $6_1;
     $1_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$2_1 + 80 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$2_1 + 84 >> 2] = $1_1;
     HEAP32[$2_1 + 76 >> 2] = 0;
     HEAPF32[$2_1 + 72 >> 2] = $8_1;
     HEAPF32[$2_1 + 68 >> 2] = $10;
     HEAPF32[$2_1 + 64 >> 2] = $15_1;
     HEAP32[$2_1 + 60 >> 2] = 0;
     HEAPF32[$2_1 + 56 >> 2] = $20;
     HEAPF32[$2_1 + 52 >> 2] = $9_1;
     HEAPF32[$2_1 + 48 >> 2] = $12_1;
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $1_1 = $2_1 + 40 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 32 >> 2] = 0;
     HEAP32[$2_1 + 36 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $2_1 + 80 | 0, $2_1 - -64 | 0, $2_1 + 48 | 0, $26_1, $26_1, Math_fround(Math_fround(-$21) - $22_1), Math_fround($22_1 - $21), $2_1 + 32 | 0, 1, Math_fround(10.0));
     break label$1;
    case 2:
    case 5:
     $5_1 = $1_1 + 1072 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $7_1 = $2_1 + 120 | 0;
     $3_1 = $7_1;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $5_1 = $1_1 + 1088 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $2_1 + 136 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $5_1 = $1_1 + 1104 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $2_1 + 152 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $5_1 = $1_1 + 1120 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $2_1 + 168 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $25 = $1_1 + 1064 | 0;
     $3_1 = $25;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 112 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 116 >> 2] = $5_1;
     $35 = $1_1 + 1080 | 0;
     $3_1 = $35;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 128 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 132 >> 2] = $5_1;
     $36_1 = $1_1 + 1096 | 0;
     $3_1 = $36_1;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 144 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 148 >> 2] = $5_1;
     $37_1 = $1_1 + 1112 | 0;
     $3_1 = $37_1;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $5_1;
     $3_1 = $2_1 + 160 | 0;
     $5_1 = $2_1 + 144 | 0;
     $6_1 = $2_1 + 128 | 0;
     label$16 : {
      if ($4_1) {
       $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 64 >> 2]]($4_1, $2_1 + 112 | 0, $26_1);
       $13_1 = $1_1 + 1184 | 0;
       $31_1 = HEAP32[$13_1 + 4 >> 2];
       $4_1 = $3_1 + 8 | 0;
       HEAP32[$4_1 >> 2] = HEAP32[$13_1 >> 2];
       HEAP32[$4_1 + 4 >> 2] = $31_1;
       $4_1 = $1_1 + 1176 | 0;
       $13_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $13_1;
       $4_1 = $1_1 + 1144 | 0;
       $13_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$6_1 + 4 >> 2] = $13_1;
       $13_1 = $1_1 + 1152 | 0;
       $31_1 = HEAP32[$13_1 + 4 >> 2];
       $4_1 = $6_1 + 8 | 0;
       HEAP32[$4_1 >> 2] = HEAP32[$13_1 >> 2];
       HEAP32[$4_1 + 4 >> 2] = $31_1;
       $4_1 = $1_1 + 1160 | 0;
       $13_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$5_1 + 4 >> 2] = $13_1;
       $13_1 = $1_1 + 1168 | 0;
       $31_1 = HEAP32[$13_1 + 4 >> 2];
       $4_1 = $5_1 + 8 | 0;
       HEAP32[$4_1 >> 2] = HEAP32[$13_1 >> 2];
       HEAP32[$4_1 + 4 >> 2] = $31_1;
       $4_1 = $1_1 + 1136 | 0;
       $13_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $13_1;
       $4_1 = $1_1 + 1128 | 0;
       $7_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$2_1 + 112 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$2_1 + 116 >> 2] = $7_1;
       $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 64 >> 2]]($4_1, $2_1 + 112 | 0, $26_1);
       break label$16;
      }
      $4_1 = $1_1 + 1136 | 0;
      $13_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $13_1;
      $4_1 = $1_1 + 1144 | 0;
      $7_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $7_1;
      $7_1 = $1_1 + 1152 | 0;
      $13_1 = HEAP32[$7_1 + 4 >> 2];
      $4_1 = $6_1 + 8 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $13_1;
      $4_1 = $1_1 + 1160 | 0;
      $7_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $7_1;
      $7_1 = $1_1 + 1168 | 0;
      $13_1 = HEAP32[$7_1 + 4 >> 2];
      $4_1 = $5_1 + 8 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $13_1;
      $4_1 = $1_1 + 1176 | 0;
      $7_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $7_1;
      $7_1 = $1_1 + 1184 | 0;
      $13_1 = HEAP32[$7_1 + 4 >> 2];
      $4_1 = $3_1 + 8 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $13_1;
      $4_1 = $1_1 + 1128 | 0;
      $7_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$2_1 + 112 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$2_1 + 116 >> 2] = $7_1;
     }
     if (!$11) {
      break label$1
     }
     $4_1 = HEAP32[$35 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$35 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $4_1;
     $4_1 = HEAP32[$36_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$36_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $4_1;
     $4_1 = HEAP32[$37_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$37_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $7_1 = $25 + 8 | 0;
     $13_1 = HEAP32[$7_1 + 4 >> 2];
     $11 = $2_1 + 120 | 0;
     $4_1 = $11;
     $29_1 = HEAP32[$7_1 >> 2];
     HEAP32[$4_1 >> 2] = $29_1;
     HEAP32[$4_1 + 4 >> 2] = $13_1;
     $13_1 = $35 + 8 | 0;
     $31_1 = HEAP32[$13_1 + 4 >> 2];
     $7_1 = $6_1 + 8 | 0;
     $4_1 = $7_1;
     HEAP32[$4_1 >> 2] = HEAP32[$13_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $31_1;
     $31_1 = $36_1 + 8 | 0;
     $41_1 = HEAP32[$31_1 + 4 >> 2];
     $13_1 = $5_1 + 8 | 0;
     $4_1 = $13_1;
     HEAP32[$4_1 >> 2] = HEAP32[$31_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $41_1;
     $41_1 = $37_1 + 8 | 0;
     $44_1 = HEAP32[$41_1 + 4 >> 2];
     $31_1 = $3_1 + 8 | 0;
     $4_1 = $31_1;
     HEAP32[$4_1 >> 2] = HEAP32[$41_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $44_1;
     $4_1 = HEAP32[$25 + 4 >> 2];
     HEAP32[$2_1 + 112 >> 2] = HEAP32[$25 >> 2];
     HEAP32[$2_1 + 116 >> 2] = $4_1;
     HEAP32[$2_1 + 96 >> 2] = $29_1;
     HEAP32[$2_1 + 100 >> 2] = HEAP32[$2_1 + 136 >> 2];
     HEAP32[$2_1 + 108 >> 2] = 0;
     HEAP32[$2_1 + 104 >> 2] = HEAP32[$2_1 + 152 >> 2];
     HEAP32[$2_1 + 80 >> 2] = HEAP32[$2_1 + 112 >> 2];
     HEAP32[$2_1 + 84 >> 2] = HEAP32[$2_1 + 128 >> 2];
     HEAP32[$2_1 + 92 >> 2] = 0;
     HEAP32[$2_1 + 88 >> 2] = HEAP32[$2_1 + 144 >> 2];
     $8_1 = HEAPF32[$1_1 + 932 >> 2];
     $9_1 = HEAPF32[$1_1 + 936 >> 2];
     $10 = HEAPF32[$1_1 + 996 >> 2];
     $12_1 = HEAPF32[$1_1 + 1e3 >> 2];
     $29_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $4_1 = $2_1 + 72 | 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$4_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 64 >> 2] = 0;
     HEAP32[$2_1 + 68 >> 2] = 0;
     $4_1 = $1_1 + 1176 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$29_1 >> 2] + 72 >> 2]]($29_1, $4_1, $2_1 + 96 | 0, $2_1 + 80 | 0, Math_fround($26_1 * Math_fround(.8999999761581421)), $8_1, $9_1, $10, $12_1, $2_1 - -64 | 0, Math_fround(10.0), 1);
     HEAP32[$2_1 + 92 >> 2] = 0;
     HEAP32[$2_1 + 88 >> 2] = HEAP32[$2_1 + 148 >> 2];
     HEAP32[$2_1 + 84 >> 2] = HEAP32[$2_1 + 132 >> 2];
     HEAP32[$2_1 + 80 >> 2] = HEAP32[$2_1 + 116 >> 2];
     $10 = $936($1_1, 1);
     $12_1 = $936($1_1, 2);
     $29_1 = $1_1 + 1136 | 0;
     $41_1 = HEAP32[$29_1 + 4 >> 2];
     HEAP32[$11 >> 2] = HEAP32[$29_1 >> 2];
     HEAP32[$11 + 4 >> 2] = $41_1;
     $11 = $1_1 + 1144 | 0;
     $29_1 = HEAP32[$11 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $29_1;
     $11 = $1_1 + 1152 | 0;
     $29_1 = HEAP32[$11 + 4 >> 2];
     HEAP32[$7_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $29_1;
     $11 = $1_1 + 1160 | 0;
     $7_1 = HEAP32[$11 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $7_1;
     $11 = $1_1 + 1168 | 0;
     $7_1 = HEAP32[$11 + 4 >> 2];
     HEAP32[$13_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$13_1 + 4 >> 2] = $7_1;
     $11 = $1_1 + 1128 | 0;
     $7_1 = HEAP32[$11 + 4 >> 2];
     HEAP32[$2_1 + 112 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$2_1 + 116 >> 2] = $7_1;
     $8_1 = $493($12_1);
     $9_1 = HEAPF32[$2_1 + 80 >> 2];
     $12_1 = $494($12_1);
     $15_1 = HEAPF32[$2_1 + 84 >> 2];
     HEAPF32[$2_1 + 68 >> 2] = Math_fround($12_1 * $15_1) - Math_fround($8_1 * $9_1);
     $16_1 = $493($10);
     $10 = $494($10);
     $14 = HEAPF32[$2_1 + 88 >> 2];
     HEAPF32[$2_1 + 72 >> 2] = Math_fround(Math_fround($9_1 * Math_fround($12_1 * $16_1)) + Math_fround($15_1 * Math_fround($16_1 * $8_1))) + Math_fround($10 * $14);
     HEAPF32[$2_1 + 64 >> 2] = Math_fround(Math_fround($9_1 * Math_fround($10 * $12_1)) + Math_fround($15_1 * Math_fround($10 * $8_1))) - Math_fround($16_1 * $14);
     $11 = $1_1 + 1184 | 0;
     $7_1 = HEAP32[$11 + 4 >> 2];
     HEAP32[$31_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$31_1 + 4 >> 2] = $7_1;
     $11 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $11;
     HEAP32[$2_1 + 60 >> 2] = 0;
     HEAPF32[$2_1 + 56 >> 2] = -HEAPF32[$2_1 + 144 >> 2];
     HEAPF32[$2_1 + 52 >> 2] = -HEAPF32[$2_1 + 128 >> 2];
     HEAPF32[$2_1 + 48 >> 2] = -HEAPF32[$2_1 + 112 >> 2];
     $8_1 = HEAPF32[$1_1 + 868 >> 2];
     $9_1 = HEAPF32[$1_1 + 872 >> 2];
     label$18 : {
      if (!!($8_1 > $9_1)) {
       $11 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       $7_1 = $2_1 + 40 | 0;
       HEAP32[$7_1 >> 2] = 0;
       HEAP32[$7_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 32 >> 2] = 0;
       HEAP32[$2_1 + 36 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 68 >> 2]]($11, $4_1, $2_1 + 48 | 0, $2_1 - -64 | 0, $26_1, $26_1, Math_fround(-3.1415927410125732), Math_fround(3.1415927410125732), $2_1 + 32 | 0, 0, Math_fround(10.0));
       break label$18;
      }
      if (!($8_1 < $9_1)) {
       break label$18
      }
      $11 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      $7_1 = $2_1 + 40 | 0;
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 0;
      HEAP32[$2_1 + 32 >> 2] = 0;
      HEAP32[$2_1 + 36 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 68 >> 2]]($11, $4_1, $2_1 + 48 | 0, $2_1 - -64 | 0, $26_1, $26_1, $8_1, $9_1, $2_1 + 32 | 0, 1, Math_fround(10.0));
     }
     $4_1 = HEAP32[$35 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$35 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $4_1;
     $4_1 = HEAP32[$36_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$36_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $4_1;
     $4_1 = HEAP32[$37_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$37_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $11 = $25 + 8 | 0;
     $7_1 = HEAP32[$11 + 4 >> 2];
     $4_1 = $2_1 + 120 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $7_1;
     $4_1 = $35 + 8 | 0;
     $35 = HEAP32[$4_1 + 4 >> 2];
     $6_1 = $6_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $35;
     $6_1 = $36_1 + 8 | 0;
     $4_1 = HEAP32[$6_1 + 4 >> 2];
     $5_1 = $5_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $4_1;
     $5_1 = $37_1 + 8 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = HEAP32[$25 + 4 >> 2];
     HEAP32[$2_1 + 112 >> 2] = HEAP32[$25 >> 2];
     HEAP32[$2_1 + 116 >> 2] = $3_1;
     $5_1 = $1_1 + 688 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $2_1 + 40 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = $1_1 + 680 | 0;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 36 >> 2] = $5_1;
     $5_1 = $1_1 + 704 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $2_1 + 24 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $1_1 = $1_1 + 696 | 0;
     $3_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$2_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$2_1 + 20 >> 2] = $3_1;
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $1_1 = $2_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $2_1 + 32 | 0, $2_1 + 16 | 0, $2_1 + 112 | 0, $2_1);
     break label$1;
    case 8:
     $5_1 = $1_1 + 1244 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $7_1 = $2_1 + 120 | 0;
     $3_1 = $7_1;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $5_1 = $1_1 + 1260 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $2_1 + 136 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $5_1 = $1_1 + 1276 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $2_1 + 152 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $5_1 = $1_1 + 1292 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $2_1 + 168 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $25 = $1_1 + 1236 | 0;
     $3_1 = $25;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 112 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 116 >> 2] = $5_1;
     $35 = $1_1 + 1252 | 0;
     $3_1 = $35;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 128 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 132 >> 2] = $5_1;
     $36_1 = $1_1 + 1268 | 0;
     $3_1 = $36_1;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 144 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 148 >> 2] = $5_1;
     $37_1 = $1_1 + 1284 | 0;
     $3_1 = $37_1;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $5_1;
     $3_1 = $2_1 + 160 | 0;
     $5_1 = $2_1 + 144 | 0;
     $6_1 = $2_1 + 128 | 0;
     label$20 : {
      if ($4_1) {
       $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 64 >> 2]]($4_1, $2_1 + 112 | 0, $26_1);
       $13_1 = $1_1 + 1356 | 0;
       $31_1 = HEAP32[$13_1 + 4 >> 2];
       $4_1 = $3_1 + 8 | 0;
       HEAP32[$4_1 >> 2] = HEAP32[$13_1 >> 2];
       HEAP32[$4_1 + 4 >> 2] = $31_1;
       $4_1 = $1_1 + 1348 | 0;
       $13_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $13_1;
       $4_1 = $1_1 + 1316 | 0;
       $13_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$6_1 + 4 >> 2] = $13_1;
       $13_1 = $1_1 + 1324 | 0;
       $31_1 = HEAP32[$13_1 + 4 >> 2];
       $4_1 = $6_1 + 8 | 0;
       HEAP32[$4_1 >> 2] = HEAP32[$13_1 >> 2];
       HEAP32[$4_1 + 4 >> 2] = $31_1;
       $4_1 = $1_1 + 1332 | 0;
       $13_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$5_1 + 4 >> 2] = $13_1;
       $13_1 = $1_1 + 1340 | 0;
       $31_1 = HEAP32[$13_1 + 4 >> 2];
       $4_1 = $5_1 + 8 | 0;
       HEAP32[$4_1 >> 2] = HEAP32[$13_1 >> 2];
       HEAP32[$4_1 + 4 >> 2] = $31_1;
       $4_1 = $1_1 + 1308 | 0;
       $13_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $13_1;
       $4_1 = $1_1 + 1300 | 0;
       $7_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$2_1 + 112 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$2_1 + 116 >> 2] = $7_1;
       $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 64 >> 2]]($4_1, $2_1 + 112 | 0, $26_1);
       break label$20;
      }
      $4_1 = $1_1 + 1308 | 0;
      $13_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $13_1;
      $4_1 = $1_1 + 1316 | 0;
      $7_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $7_1;
      $7_1 = $1_1 + 1324 | 0;
      $13_1 = HEAP32[$7_1 + 4 >> 2];
      $4_1 = $6_1 + 8 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $13_1;
      $4_1 = $1_1 + 1332 | 0;
      $7_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $7_1;
      $7_1 = $1_1 + 1340 | 0;
      $13_1 = HEAP32[$7_1 + 4 >> 2];
      $4_1 = $5_1 + 8 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $13_1;
      $4_1 = $1_1 + 1348 | 0;
      $7_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $7_1;
      $7_1 = $1_1 + 1356 | 0;
      $13_1 = HEAP32[$7_1 + 4 >> 2];
      $4_1 = $3_1 + 8 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $13_1;
      $4_1 = $1_1 + 1300 | 0;
      $7_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$2_1 + 112 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$2_1 + 116 >> 2] = $7_1;
     }
     if (!$11) {
      break label$1
     }
     $4_1 = HEAP32[$35 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$35 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $4_1;
     $4_1 = HEAP32[$36_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$36_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $4_1;
     $4_1 = HEAP32[$37_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$37_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $7_1 = $25 + 8 | 0;
     $13_1 = HEAP32[$7_1 + 4 >> 2];
     $11 = $2_1 + 120 | 0;
     $4_1 = $11;
     $29_1 = HEAP32[$7_1 >> 2];
     HEAP32[$4_1 >> 2] = $29_1;
     HEAP32[$4_1 + 4 >> 2] = $13_1;
     $13_1 = $35 + 8 | 0;
     $31_1 = HEAP32[$13_1 + 4 >> 2];
     $7_1 = $6_1 + 8 | 0;
     $4_1 = $7_1;
     HEAP32[$4_1 >> 2] = HEAP32[$13_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $31_1;
     $31_1 = $36_1 + 8 | 0;
     $41_1 = HEAP32[$31_1 + 4 >> 2];
     $13_1 = $5_1 + 8 | 0;
     $4_1 = $13_1;
     HEAP32[$4_1 >> 2] = HEAP32[$31_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $41_1;
     $41_1 = $37_1 + 8 | 0;
     $44_1 = HEAP32[$41_1 + 4 >> 2];
     $31_1 = $3_1 + 8 | 0;
     $4_1 = $31_1;
     HEAP32[$4_1 >> 2] = HEAP32[$41_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $44_1;
     $4_1 = HEAP32[$25 + 4 >> 2];
     HEAP32[$2_1 + 112 >> 2] = HEAP32[$25 >> 2];
     HEAP32[$2_1 + 116 >> 2] = $4_1;
     HEAP32[$2_1 + 96 >> 2] = $29_1;
     HEAP32[$2_1 + 100 >> 2] = HEAP32[$2_1 + 136 >> 2];
     HEAP32[$2_1 + 108 >> 2] = 0;
     HEAP32[$2_1 + 104 >> 2] = HEAP32[$2_1 + 152 >> 2];
     HEAP32[$2_1 + 80 >> 2] = HEAP32[$2_1 + 112 >> 2];
     HEAP32[$2_1 + 84 >> 2] = HEAP32[$2_1 + 128 >> 2];
     HEAP32[$2_1 + 92 >> 2] = 0;
     HEAP32[$2_1 + 88 >> 2] = HEAP32[$2_1 + 144 >> 2];
     $8_1 = HEAPF32[$1_1 + 1060 >> 2];
     $9_1 = HEAPF32[$1_1 + 1144 >> 2];
     $10 = HEAPF32[$1_1 + 1148 >> 2];
     $12_1 = HEAPF32[$1_1 + 1056 >> 2];
     $29_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $4_1 = $2_1 + 72 | 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$4_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 64 >> 2] = 0;
     HEAP32[$2_1 + 68 >> 2] = 0;
     $4_1 = $1_1 + 1348 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$29_1 >> 2] + 72 >> 2]]($29_1, $4_1, $2_1 + 96 | 0, $2_1 + 80 | 0, Math_fround($26_1 * Math_fround(.8999999761581421)), $12_1, $8_1, $9_1, $10, $2_1 - -64 | 0, Math_fround(10.0), 1);
     HEAP32[$2_1 + 92 >> 2] = 0;
     $29_1 = $2_1 + 148 | 0;
     $12_1 = HEAPF32[$29_1 >> 2];
     HEAP32[$2_1 + 88 >> 2] = HEAP32[$29_1 >> 2];
     $29_1 = $2_1 + 132 | 0;
     $8_1 = HEAPF32[$29_1 >> 2];
     HEAP32[$2_1 + 84 >> 2] = HEAP32[$29_1 >> 2];
     $9_1 = HEAPF32[$2_1 + 116 >> 2];
     HEAP32[$2_1 + 80 >> 2] = HEAP32[$2_1 + 116 >> 2];
     $15_1 = HEAPF32[$1_1 + 1368 >> 2];
     $16_1 = HEAPF32[$1_1 + 1372 >> 2];
     $29_1 = $1_1 + 1308 | 0;
     $41_1 = HEAP32[$29_1 + 4 >> 2];
     HEAP32[$11 >> 2] = HEAP32[$29_1 >> 2];
     HEAP32[$11 + 4 >> 2] = $41_1;
     $11 = $1_1 + 1316 | 0;
     $29_1 = HEAP32[$11 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $29_1;
     $11 = $1_1 + 1324 | 0;
     $29_1 = HEAP32[$11 + 4 >> 2];
     HEAP32[$7_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $29_1;
     $11 = $1_1 + 1332 | 0;
     $7_1 = HEAP32[$11 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $7_1;
     $11 = $1_1 + 1340 | 0;
     $7_1 = HEAP32[$11 + 4 >> 2];
     HEAP32[$13_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$13_1 + 4 >> 2] = $7_1;
     $11 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $11;
     $11 = $1_1 + 1356 | 0;
     $7_1 = HEAP32[$11 + 4 >> 2];
     HEAP32[$31_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$31_1 + 4 >> 2] = $7_1;
     $11 = $1_1 + 1300 | 0;
     $7_1 = HEAP32[$11 + 4 >> 2];
     HEAP32[$2_1 + 112 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$2_1 + 116 >> 2] = $7_1;
     $10 = $493($16_1);
     $16_1 = $494($16_1);
     HEAPF32[$2_1 + 68 >> 2] = Math_fround($16_1 * $8_1) - Math_fround($10 * $9_1);
     $14 = $493($15_1);
     $15_1 = $494($15_1);
     HEAPF32[$2_1 + 72 >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $14) * $9_1) + Math_fround(Math_fround($14 * $10) * $8_1)) + Math_fround($15_1 * $12_1);
     HEAPF32[$2_1 + 64 >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $16_1) * $9_1) + Math_fround(Math_fround($15_1 * $10) * $8_1)) - Math_fround($14 * $12_1);
     HEAP32[$2_1 + 60 >> 2] = 0;
     HEAPF32[$2_1 + 56 >> 2] = -HEAPF32[$2_1 + 144 >> 2];
     HEAPF32[$2_1 + 52 >> 2] = -HEAPF32[$2_1 + 128 >> 2];
     HEAPF32[$2_1 + 48 >> 2] = -HEAPF32[$2_1 + 112 >> 2];
     $8_1 = HEAPF32[$1_1 + 968 >> 2];
     $9_1 = HEAPF32[$1_1 + 972 >> 2];
     label$22 : {
      if (!!($8_1 > $9_1)) {
       $11 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       $7_1 = $2_1 + 40 | 0;
       HEAP32[$7_1 >> 2] = 0;
       HEAP32[$7_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 32 >> 2] = 0;
       HEAP32[$2_1 + 36 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 68 >> 2]]($11, $4_1, $2_1 + 48 | 0, $2_1 - -64 | 0, $26_1, $26_1, Math_fround(-3.1415927410125732), Math_fround(3.1415927410125732), $2_1 + 32 | 0, 0, Math_fround(10.0));
       break label$22;
      }
      if (!($8_1 < $9_1)) {
       break label$22
      }
      $11 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      $7_1 = $2_1 + 40 | 0;
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 0;
      HEAP32[$2_1 + 32 >> 2] = 0;
      HEAP32[$2_1 + 36 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 68 >> 2]]($11, $4_1, $2_1 + 48 | 0, $2_1 - -64 | 0, $26_1, $26_1, $8_1, $9_1, $2_1 + 32 | 0, 1, Math_fround(10.0));
     }
     $4_1 = HEAP32[$35 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$35 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $4_1;
     $4_1 = HEAP32[$36_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$36_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $4_1;
     $4_1 = HEAP32[$37_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$37_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $11 = $25 + 8 | 0;
     $7_1 = HEAP32[$11 + 4 >> 2];
     $4_1 = $2_1 + 120 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $7_1;
     $4_1 = $35 + 8 | 0;
     $35 = HEAP32[$4_1 + 4 >> 2];
     $6_1 = $6_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $35;
     $6_1 = $36_1 + 8 | 0;
     $4_1 = HEAP32[$6_1 + 4 >> 2];
     $5_1 = $5_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $4_1;
     $5_1 = $37_1 + 8 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = HEAP32[$25 + 4 >> 2];
     HEAP32[$2_1 + 112 >> 2] = HEAP32[$25 >> 2];
     HEAP32[$2_1 + 116 >> 2] = $3_1;
     $5_1 = $1_1 + 688 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $2_1 + 40 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = $1_1 + 680 | 0;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 36 >> 2] = $5_1;
     $5_1 = $1_1 + 704 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $2_1 + 24 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $1_1 = $1_1 + 696 | 0;
     $3_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$2_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$2_1 + 20 >> 2] = $3_1;
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $1_1 = $2_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $2_1 + 32 | 0, $2_1 + 16 | 0, $2_1 + 112 | 0, $2_1);
     break label$1;
    case 4:
    case 6:
    case 7:
     break label$1;
    case 3:
     break label$2;
    };
   }
   $5_1 = $1_1 + 832 | 0;
   $6_1 = HEAP32[$5_1 + 4 >> 2];
   $25 = $2_1 + 120 | 0;
   $3_1 = $25;
   HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $5_1 = $1_1 + 848 | 0;
   $6_1 = HEAP32[$5_1 + 4 >> 2];
   $3_1 = $2_1 + 136 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $5_1 = $1_1 + 864 | 0;
   $6_1 = HEAP32[$5_1 + 4 >> 2];
   $3_1 = $2_1 + 152 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $5_1 = $1_1 + 880 | 0;
   $6_1 = HEAP32[$5_1 + 4 >> 2];
   $3_1 = $2_1 + 168 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $35 = $1_1 + 824 | 0;
   $3_1 = $35;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 112 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 116 >> 2] = $5_1;
   $3_1 = $1_1 + 840 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 128 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 132 >> 2] = $5_1;
   $3_1 = $1_1 + 856 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 144 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 148 >> 2] = $5_1;
   $3_1 = $1_1 + 872 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 160 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 164 >> 2] = $5_1;
   $3_1 = $2_1 + 160 | 0;
   $5_1 = $2_1 + 144 | 0;
   $6_1 = $2_1 + 128 | 0;
   label$24 : {
    if ($4_1) {
     $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 64 >> 2]]($4_1, $2_1 + 112 | 0, $26_1);
     $36_1 = $1_1 + 944 | 0;
     $37_1 = HEAP32[$36_1 + 4 >> 2];
     $4_1 = $3_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$36_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $37_1;
     $4_1 = $1_1 + 936 | 0;
     $36_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $36_1;
     $3_1 = $1_1 + 904 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $4_1;
     $3_1 = $6_1 + 8 | 0;
     $6_1 = $1_1 + 912 | 0;
     $4_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $3_1 = $1_1 + 920 | 0;
     $6_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $6_1;
     $3_1 = $5_1 + 8 | 0;
     $5_1 = $1_1 + 928 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = $1_1 + 896 | 0;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$25 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$25 + 4 >> 2] = $5_1;
     $3_1 = $1_1 + 888 | 0;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 112 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 116 >> 2] = $5_1;
     $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 112 | 0, $26_1);
     break label$24;
    }
    $4_1 = $1_1 + 896 | 0;
    $36_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$25 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$25 + 4 >> 2] = $36_1;
    $4_1 = $1_1 + 904 | 0;
    $25 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $25;
    $4_1 = $1_1 + 912 | 0;
    $25 = HEAP32[$4_1 + 4 >> 2];
    $6_1 = $6_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $25;
    $6_1 = $1_1 + 920 | 0;
    $4_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $4_1;
    $6_1 = $1_1 + 928 | 0;
    $4_1 = HEAP32[$6_1 + 4 >> 2];
    $5_1 = $5_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $4_1;
    $5_1 = $1_1 + 936 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $5_1 = $1_1 + 944 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $3_1 = $3_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $3_1 = $1_1 + 888 | 0;
    $5_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$2_1 + 112 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 116 >> 2] = $5_1;
   }
   if (!$11) {
    break label$1
   }
   $5_1 = HEAPU8[$1_1 + 180 | 0];
   $3_1 = $5_1 ? $35 : $1_1 + 888 | 0;
   $8_1 = HEAPF32[$3_1 + 48 >> 2];
   $17_1 = HEAPF32[$3_1 + 8 >> 2];
   $18_1 = HEAPF32[$3_1 + 4 >> 2];
   $6_1 = HEAP32[$3_1 + 4 >> 2];
   $9_1 = HEAPF32[$3_1 + 52 >> 2];
   $20 = HEAPF32[$3_1 + 24 >> 2];
   $10 = HEAPF32[$3_1 + 16 >> 2];
   $4_1 = HEAP32[$3_1 + 16 >> 2];
   $21 = HEAPF32[$3_1 + 20 >> 2];
   $25 = HEAP32[$3_1 + 20 >> 2];
   $12_1 = HEAPF32[$3_1 + 56 >> 2];
   $14 = HEAPF32[$3_1 + 40 >> 2];
   $15_1 = HEAPF32[$3_1 + 32 >> 2];
   $35 = HEAP32[$3_1 + 32 >> 2];
   $22_1 = HEAPF32[$3_1 + 36 >> 2];
   $36_1 = HEAP32[$3_1 + 36 >> 2];
   $3_1 = ($5_1 ? 824 : 888) + $1_1 | 0;
   $16_1 = HEAPF32[$3_1 >> 2];
   $5_1 = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 108 >> 2] = 0;
   $30 = Math_fround($14 * Math_fround(0.0));
   $22_1 = Math_fround($22_1 * Math_fround(0.0));
   $14 = HEAPF32[$1_1 + 184 >> 2];
   HEAPF32[$2_1 + 104 >> 2] = $12_1 + Math_fround($30 + Math_fround($22_1 + Math_fround($14 * $15_1)));
   $20 = Math_fround($20 * Math_fround(0.0));
   $21 = Math_fround($21 * Math_fround(0.0));
   HEAPF32[$2_1 + 100 >> 2] = $9_1 + Math_fround($20 + Math_fround($21 + Math_fround($14 * $10)));
   $17_1 = Math_fround($17_1 * Math_fround(0.0));
   $18_1 = Math_fround($18_1 * Math_fround(0.0));
   HEAPF32[$2_1 + 96 >> 2] = $8_1 + Math_fround($17_1 + Math_fround($18_1 + Math_fround($14 * $16_1)));
   HEAP32[$2_1 + 92 >> 2] = 0;
   $19_1 = $12_1;
   $12_1 = HEAPF32[$1_1 + 188 >> 2];
   HEAPF32[$2_1 + 88 >> 2] = $19_1 + Math_fround($30 + Math_fround($22_1 + Math_fround($12_1 * $15_1)));
   HEAPF32[$2_1 + 84 >> 2] = $9_1 + Math_fround($20 + Math_fround($21 + Math_fround($12_1 * $10)));
   HEAPF32[$2_1 + 80 >> 2] = $8_1 + Math_fround($17_1 + Math_fround($18_1 + Math_fround($12_1 * $16_1)));
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   $37_1 = $2_1 + 72 | 0;
   HEAP32[$37_1 >> 2] = 0;
   HEAP32[$37_1 + 4 >> 2] = 0;
   HEAP32[$2_1 + 64 >> 2] = 0;
   HEAP32[$2_1 + 68 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $2_1 + 96 | 0, $2_1 + 80 | 0, $2_1 - -64 | 0);
   HEAP32[$2_1 + 76 >> 2] = 0;
   HEAP32[$2_1 + 72 >> 2] = $35;
   HEAP32[$2_1 + 68 >> 2] = $4_1;
   HEAP32[$2_1 + 64 >> 2] = $5_1;
   HEAP32[$2_1 + 60 >> 2] = 0;
   HEAP32[$2_1 + 56 >> 2] = $36_1;
   HEAP32[$2_1 + 52 >> 2] = $25;
   HEAP32[$2_1 + 48 >> 2] = $6_1;
   $8_1 = HEAPF32[$1_1 + 196 >> 2];
   $9_1 = HEAPF32[$1_1 + 192 >> 2];
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   $3_1 = $2_1 + 40 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$2_1 + 32 >> 2] = 0;
   HEAP32[$2_1 + 36 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $1_1 + 936 | 0, $2_1 - -64 | 0, $2_1 + 48 | 0, $26_1, $26_1, $9_1, $8_1, $2_1 + 32 | 0, 1, Math_fround(10.0));
  }
  global$0 = $2_1 + 176 | 0;
 }
 
 function $974($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  if (HEAPU8[$0 + 289 | 0]) {
   $80(HEAP32[$0 + 216 >> 2])
  }
  HEAP32[$0 + 216 >> 2] = $1_1;
  HEAP8[$0 + 289 | 0] = 0;
  HEAP32[HEAP32[$0 + 212 >> 2] + 8 >> 2] = $1_1;
 }
 
 function $975($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 216 >> 2];
 }
 
 function $976($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 228 >> 2];
 }
 
 function $977($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[HEAP32[$0 + 236 >> 2] + ($1_1 << 2) >> 2];
 }
 
 function $979($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $3_1 = HEAP32[$0 + 8 >> 2];
  if (($3_1 | 0) >= 1) {
   while (1) {
    $2_1 = HEAP32[HEAP32[$0 + 16 >> 2] + $4_1 >> 2];
    if (HEAPU8[$2_1 + 252 | 0] & 2) {
     $3_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
     (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $3_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, HEAP32[$3_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1497645650), wasm2js_i32$5 = $2_1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
     $3_1 = HEAP32[$0 + 8 >> 2];
    }
    $4_1 = $4_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < ($3_1 | 0)) {
     continue
    }
    break;
   }
  }
  if (HEAP32[$0 + 228 >> 2] >= 1) {
   $4_1 = 0;
   $5_1 = 0;
   while (1) {
    $2_1 = HEAP32[HEAP32[$0 + 236 >> 2] + $4_1 >> 2];
    $3_1 = ((((wasm2js_i32$5 = $1_1, wasm2js_i32$4 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 36 >> 2]]($2_1) | 0), wasm2js_i32$1 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$5 | 0, wasm2js_i32$4 | 0, wasm2js_i32$1 | 0) | 0);
    (((((wasm2js_i32$1 = $1_1, wasm2js_i32$4 = $3_1), wasm2js_i32$5 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 40 >> 2]]($2_1, HEAP32[$3_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$2 = 1397641027), wasm2js_i32$3 = $2_1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
    $4_1 = $4_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < HEAP32[$0 + 228 >> 2]) {
     continue
    }
    break;
   };
  }
 }
 
 function $980($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 32 >> 2]]($1_1);
  $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, 104, 1) | 0;
  $2_1 = $17(HEAP32[$5_1 + 8 >> 2], 0, 104);
  HEAP32[$2_1 + 88 >> 2] = HEAP32[$0 + 264 >> 2];
  HEAP32[$2_1 + 92 >> 2] = HEAP32[$0 + 268 >> 2];
  HEAP32[$2_1 + 96 >> 2] = HEAP32[$0 + 272 >> 2];
  HEAP32[$2_1 + 100 >> 2] = HEAP32[$0 + 276 >> 2];
  $3_1 = $0 + 124 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 28 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 32 >> 2] = $4_1;
  $3_1 = $0 + 104 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 12 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 16 >> 2] = $4_1;
  $3_1 = $0 + 116 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 20 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 24 >> 2] = $4_1;
  $3_1 = $0 + 96 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $4_1;
  HEAP32[$2_1 >> 2] = HEAP32[$0 + 92 >> 2];
  HEAP32[$2_1 + 36 >> 2] = HEAP32[$0 + 132 >> 2];
  HEAP32[$2_1 + 40 >> 2] = HEAP32[$0 + 148 >> 2];
  HEAP32[$2_1 + 44 >> 2] = HEAP32[$0 + 152 >> 2];
  HEAP32[$2_1 + 48 >> 2] = HEAP32[$0 + 156 >> 2];
  HEAP32[$2_1 + 52 >> 2] = HEAP32[$0 + 160 >> 2];
  HEAP32[$2_1 + 56 >> 2] = HEAP32[$0 + 176 >> 2];
  HEAP32[$2_1 + 60 >> 2] = HEAP32[$0 + 180 >> 2];
  HEAP32[$2_1 + 64 >> 2] = HEAP32[$0 + 112 >> 2];
  HEAP32[$2_1 + 68 >> 2] = HEAP32[$0 + 164 >> 2];
  HEAP32[$2_1 + 72 >> 2] = HEAP32[$0 + 168 >> 2];
  HEAP32[$2_1 + 76 >> 2] = HEAP32[$0 + 172 >> 2];
  $3_1 = HEAP32[$0 + 144 >> 2];
  HEAP32[$2_1 + 84 >> 2] = 0;
  HEAP32[$2_1 + 80 >> 2] = $3_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1, $5_1, 21681, 1145853764, $2_1);
  $874($0, $1_1);
  $979($0, $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1);
 }
 
 function $983($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $613($2_1 + 8 | 0, 21408);
  if (HEAP32[$0 + 296 >> 2] >= 1) {
   while (1) {
    $4_1 = HEAP32[HEAP32[$0 + 304 >> 2] + $3_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $0, $1_1);
    $3_1 = $3_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < HEAP32[$0 + 296 >> 2]) {
     continue
    }
    break;
   }
  }
  $614();
  global$0 = $2_1 + 16 | 0;
 }
 
 function $984($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 21784;
  $1_1 = HEAP32[$0 + 80 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 84 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 80 >> 2] = 0;
  }
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP8[$0 + 84 | 0] = 1;
  $1_1 = HEAP32[$0 + 60 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 - -64 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 60 >> 2] = 0;
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $1_1 = HEAP32[$0 + 40 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 44 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 40 >> 2] = 0;
  }
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  return $0 | 0;
 }
 
 function $985($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 21784;
  $1_1 = HEAP32[$0 + 80 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 84 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 80 >> 2] = 0;
  }
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP8[$0 + 84 | 0] = 1;
  $1_1 = HEAP32[$0 + 60 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 - -64 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 60 >> 2] = 0;
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $1_1 = HEAP32[$0 + 40 >> 2];
  if (!(!$1_1 | !HEAPU8[$0 + 44 | 0])) {
   $80($1_1)
  }
  $37($0);
 }
 
 function $986($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0;
  label$1 : {
   label$2 : {
    if (($5_1 | 0) >= 0) {
     $9_1 = HEAP32[$0 + 16 >> 2];
     label$4 : {
      if (($9_1 | 0) >= 1) {
       $11 = HEAP32[$0 + 12 >> 2];
       while (1) {
        $8_1 = HEAP32[$11 >> 2];
        $6_1 = HEAP32[HEAP32[$8_1 + 28 >> 2] + 208 >> 2];
        if (($6_1 | 0) <= -1) {
         $6_1 = HEAP32[HEAP32[$8_1 + 32 >> 2] + 208 >> 2]
        }
        if (($6_1 | 0) == ($5_1 | 0)) {
         break label$4
        }
        $11 = $11 + 4 | 0;
        $7_1 = $7_1 + 1 | 0;
        if (($7_1 | 0) < ($9_1 | 0)) {
         continue
        }
        break;
       };
      }
      $11 = 0;
     }
     if (($7_1 | 0) < ($9_1 | 0)) {
      $8_1 = $9_1 - $7_1 | 0;
      $6_1 = HEAP32[$0 + 12 >> 2] + ($7_1 << 2) | 0;
      while (1) {
       $9_1 = HEAP32[$6_1 >> 2];
       $7_1 = HEAP32[HEAP32[$9_1 + 28 >> 2] + 208 >> 2];
       if (($7_1 | 0) <= -1) {
        $7_1 = HEAP32[HEAP32[$9_1 + 32 >> 2] + 208 >> 2]
       }
       $6_1 = $6_1 + 4 | 0;
       $12_1 = (($5_1 | 0) == ($7_1 | 0)) + $12_1 | 0;
       $8_1 = $8_1 + -1 | 0;
       if ($8_1) {
        continue
       }
       break;
      };
     }
     $5_1 = HEAP32[$0 + 4 >> 2];
     if (HEAP32[$5_1 + 80 >> 2] < 2) {
      break label$1
     }
     if (($2_1 | 0) < 1) {
      break label$2
     }
     $6_1 = HEAP32[$0 + 36 >> 2];
     $7_1 = HEAP32[$0 + 32 >> 2];
     while (1) {
      $13_1 = ($10 << 2) + $1_1 | 0;
      label$12 : {
       if (($6_1 | 0) != ($7_1 | 0)) {
        $5_1 = $7_1;
        break label$12;
       }
       $9_1 = $6_1 ? $6_1 << 1 : 1;
       if (($6_1 | 0) >= ($9_1 | 0)) {
        $5_1 = $6_1;
        break label$12;
       }
       label$15 : {
        if (!$9_1) {
         $8_1 = 0;
         $5_1 = $6_1;
         break label$15;
        }
        $8_1 = $79($9_1 << 2);
        $5_1 = HEAP32[$0 + 32 >> 2];
       }
       if (($5_1 | 0) >= 1) {
        $6_1 = 0;
        $7_1 = $5_1;
        while (1) {
         HEAP32[$6_1 + $8_1 >> 2] = HEAP32[HEAP32[$0 + 40 >> 2] + $6_1 >> 2];
         $6_1 = $6_1 + 4 | 0;
         $7_1 = $7_1 + -1 | 0;
         if ($7_1) {
          continue
         }
         break;
        };
       }
       $6_1 = HEAP32[$0 + 40 >> 2];
       if ($6_1) {
        if (HEAPU8[$0 + 44 | 0]) {
         $80($6_1);
         $5_1 = HEAP32[$0 + 32 >> 2];
        }
        HEAP32[$0 + 40 >> 2] = 0;
       }
       HEAP32[$0 + 40 >> 2] = $8_1;
       HEAP8[$0 + 44 | 0] = 1;
       HEAP32[$0 + 36 >> 2] = $9_1;
       $6_1 = $9_1;
      }
      $7_1 = $5_1 + 1 | 0;
      HEAP32[$0 + 32 >> 2] = $7_1;
      HEAP32[HEAP32[$0 + 40 >> 2] + ($5_1 << 2) >> 2] = HEAP32[$13_1 >> 2];
      $10 = $10 + 1 | 0;
      if (($10 | 0) != ($2_1 | 0)) {
       continue
      }
      break;
     };
     break label$2;
    }
    $5_1 = HEAP32[$0 + 8 >> 2];
    Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2]]($5_1, $1_1, $2_1, $3_1, $4_1, HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]));
    return;
   }
   if (($4_1 | 0) >= 1) {
    $6_1 = HEAP32[$0 + 56 >> 2];
    $7_1 = HEAP32[$0 + 52 >> 2];
    $10 = 0;
    while (1) {
     $2_1 = ($10 << 2) + $3_1 | 0;
     label$23 : {
      if (($6_1 | 0) != ($7_1 | 0)) {
       $5_1 = $7_1;
       break label$23;
      }
      $1_1 = $6_1 ? $6_1 << 1 : 1;
      if (($6_1 | 0) >= ($1_1 | 0)) {
       $5_1 = $6_1;
       break label$23;
      }
      label$26 : {
       if (!$1_1) {
        $8_1 = 0;
        $5_1 = $6_1;
        break label$26;
       }
       $8_1 = $79($1_1 << 2);
       $5_1 = HEAP32[$0 + 52 >> 2];
      }
      if (($5_1 | 0) >= 1) {
       $6_1 = 0;
       $7_1 = $5_1;
       while (1) {
        HEAP32[$6_1 + $8_1 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + $6_1 >> 2];
        $6_1 = $6_1 + 4 | 0;
        $7_1 = $7_1 + -1 | 0;
        if ($7_1) {
         continue
        }
        break;
       };
      }
      $6_1 = HEAP32[$0 + 60 >> 2];
      if ($6_1) {
       if (HEAPU8[$0 + 64 | 0]) {
        $80($6_1);
        $5_1 = HEAP32[$0 + 52 >> 2];
       }
       HEAP32[$0 + 60 >> 2] = 0;
      }
      HEAP32[$0 + 60 >> 2] = $8_1;
      HEAP8[$0 + 64 | 0] = 1;
      HEAP32[$0 + 56 >> 2] = $1_1;
      $6_1 = $1_1;
     }
     $7_1 = $5_1 + 1 | 0;
     HEAP32[$0 + 52 >> 2] = $7_1;
     HEAP32[HEAP32[$0 + 60 >> 2] + ($5_1 << 2) >> 2] = HEAP32[$2_1 >> 2];
     $10 = $10 + 1 | 0;
     if (($10 | 0) != ($4_1 | 0)) {
      continue
     }
     break;
    };
   }
   label$32 : {
    if (!$12_1) {
     $7_1 = HEAP32[$0 + 72 >> 2];
     break label$32;
    }
    $6_1 = HEAP32[$0 + 76 >> 2];
    $7_1 = HEAP32[$0 + 72 >> 2];
    $10 = 0;
    while (1) {
     $2_1 = ($10 << 2) + $11 | 0;
     label$35 : {
      if (($6_1 | 0) != ($7_1 | 0)) {
       $5_1 = $7_1;
       break label$35;
      }
      $1_1 = $6_1 ? $6_1 << 1 : 1;
      if (($6_1 | 0) >= ($1_1 | 0)) {
       $5_1 = $6_1;
       break label$35;
      }
      label$38 : {
       if (!$1_1) {
        $8_1 = 0;
        $5_1 = $6_1;
        break label$38;
       }
       $8_1 = $79($1_1 << 2);
       $5_1 = HEAP32[$0 + 72 >> 2];
      }
      if (($5_1 | 0) >= 1) {
       $6_1 = 0;
       $7_1 = $5_1;
       while (1) {
        HEAP32[$6_1 + $8_1 >> 2] = HEAP32[HEAP32[$0 + 80 >> 2] + $6_1 >> 2];
        $6_1 = $6_1 + 4 | 0;
        $7_1 = $7_1 + -1 | 0;
        if ($7_1) {
         continue
        }
        break;
       };
      }
      $3_1 = HEAP32[$0 + 80 >> 2];
      if ($3_1) {
       if (HEAPU8[$0 + 84 | 0]) {
        $80($3_1);
        $5_1 = HEAP32[$0 + 72 >> 2];
       }
       HEAP32[$0 + 80 >> 2] = 0;
      }
      HEAP32[$0 + 80 >> 2] = $8_1;
      HEAP8[$0 + 84 | 0] = 1;
      HEAP32[$0 + 76 >> 2] = $1_1;
      $6_1 = $1_1;
     }
     $7_1 = $5_1 + 1 | 0;
     HEAP32[$0 + 72 >> 2] = $7_1;
     HEAP32[HEAP32[$0 + 80 >> 2] + ($5_1 << 2) >> 2] = HEAP32[$2_1 >> 2];
     $10 = $10 + 1 | 0;
     if (($12_1 | 0) != ($10 | 0)) {
      continue
     }
     break;
    };
   }
   if ((HEAP32[$0 + 52 >> 2] + $7_1 | 0) > HEAP32[HEAP32[$0 + 4 >> 2] + 80 >> 2]) {
    $966($0)
   }
   return;
  }
  $6_1 = HEAP32[$0 + 8 >> 2];
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 12 >> 2]]($6_1, $1_1, $2_1, $3_1, $4_1, $11, $12_1, $5_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]));
 }
 
 function $988($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = HEAP32[$0 + 84 >> 2];
  if (!(!(HEAP32[$1_1 + 8 >> 2] & HEAP32[$0 + 8 >> 2]) | (!(HEAP32[$0 + 12 >> 2] & HEAP32[$1_1 + 4 >> 2]) | ($2_1 | 0) == ($3_1 | 0)))) {
   $0 = HEAP32[$0 + 96 >> 2];
   $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $3_1, $2_1) | 0;
  }
  return $4_1 | 0;
 }
 
 function $989($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0);
  $4_1 = Math_fround(1.0);
  $3_1 = HEAP32[$1_1 >> 2];
  if (!(($3_1 | 0) == HEAP32[$0 + 84 >> 2] | HEAPU8[$3_1 + 204 | 0] & 4 | Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 32 >> 2] - HEAPF32[$0 + 16 >> 2]) * HEAPF32[$1_1 + 8 >> 2]) + Math_fround(Math_fround(HEAPF32[$0 + 36 >> 2] - HEAPF32[$0 + 20 >> 2]) * HEAPF32[$1_1 + 12 >> 2])) + Math_fround(Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 24 >> 2]) * HEAPF32[$1_1 + 16 >> 2])) >= Math_fround(-HEAPF32[$0 + 88 >> 2]))) {
   HEAP32[$0 + 80 >> 2] = $3_1;
   HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 40 >> 2];
   label$2 : {
    if ($2_1) {
     $2_1 = $1_1 + 8 | 0;
     $3_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$0 + 48 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$0 + 52 >> 2] = $3_1;
     $2_1 = $2_1 + 8 | 0;
     $7_1 = HEAP32[$2_1 + 4 >> 2];
     $3_1 = $0 + 56 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $7_1;
     break label$2;
    }
    $8_1 = HEAPF32[$3_1 + 12 >> 2];
    $9_1 = HEAPF32[$3_1 + 8 >> 2];
    $10 = HEAPF32[$3_1 + 28 >> 2];
    $11 = HEAPF32[$3_1 + 20 >> 2];
    $12_1 = HEAPF32[$3_1 + 24 >> 2];
    $13_1 = HEAPF32[$3_1 + 44 >> 2];
    $14 = HEAPF32[$3_1 + 36 >> 2];
    $15_1 = HEAPF32[$3_1 + 40 >> 2];
    $16_1 = HEAPF32[$3_1 + 4 >> 2];
    $4_1 = HEAPF32[$1_1 + 16 >> 2];
    $5_1 = HEAPF32[$1_1 + 8 >> 2];
    $6_1 = HEAPF32[$1_1 + 12 >> 2];
    HEAP32[$0 + 60 >> 2] = 0;
    HEAPF32[$0 + 56 >> 2] = Math_fround(Math_fround($5_1 * $14) + Math_fround($6_1 * $15_1)) + Math_fround($4_1 * $13_1);
    HEAPF32[$0 + 52 >> 2] = Math_fround(Math_fround($5_1 * $11) + Math_fround($6_1 * $12_1)) + Math_fround($4_1 * $10);
    HEAPF32[$0 + 48 >> 2] = Math_fround(Math_fround($16_1 * $5_1) + Math_fround($9_1 * $6_1)) + Math_fround($8_1 * $4_1);
   }
   $2_1 = HEAP32[$1_1 + 28 >> 2];
   HEAP32[$0 + 64 >> 2] = HEAP32[$1_1 + 24 >> 2];
   HEAP32[$0 + 68 >> 2] = $2_1;
   $2_1 = $1_1 + 32 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   $0 = $0 + 72 | 0;
   HEAP32[$0 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $3_1;
   $4_1 = HEAPF32[$1_1 + 40 >> 2];
  }
  return Math_fround($4_1);
 }
 
 function $990($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 21976;
  $1_1 = HEAP32[$0 + 336 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 340 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 336 >> 2] = 0;
  }
  HEAP32[$0 + 336 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP8[$0 + 340 | 0] = 1;
  $306($0);
  return $0 | 0;
 }
 
 function $991($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 21976;
  $1_1 = HEAP32[$0 + 336 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 340 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 336 >> 2] = 0;
  }
  HEAP32[$0 + 336 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP8[$0 + 340 | 0] = 1;
  $306($0);
  $80($0);
 }
 
 function $992($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[$1_1 >> 2];
  $2_1 = HEAP32[$0 + 328 >> 2];
  label$1 : {
   label$2 : {
    if (($2_1 | 0) < 1) {
     break label$2
    }
    $1_1 = HEAP32[$0 + 336 >> 2];
    $3_1 = $2_1;
    while (1) {
     if (($5_1 | 0) != HEAP32[$1_1 >> 2]) {
      $1_1 = $1_1 + 4 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       continue
      }
      break label$2;
     }
     break;
    };
    if ($3_1) {
     break label$1
    }
   }
   label$5 : {
    if (HEAP32[$0 + 332 >> 2] != ($2_1 | 0)) {
     break label$5
    }
    $4_1 = $2_1 ? $2_1 << 1 : 1;
    if (($2_1 | 0) >= ($4_1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$4_1) {
      break label$6
     }
     $6_1 = $79($4_1 << 2);
     $2_1 = HEAP32[$0 + 328 >> 2];
    }
    if (($2_1 | 0) >= 1) {
     $1_1 = 0;
     $3_1 = $2_1;
     while (1) {
      HEAP32[$1_1 + $6_1 >> 2] = HEAP32[HEAP32[$0 + 336 >> 2] + $1_1 >> 2];
      $1_1 = $1_1 + 4 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       continue
      }
      break;
     };
    }
    $1_1 = HEAP32[$0 + 336 >> 2];
    if ($1_1) {
     if (HEAPU8[$0 + 340 | 0]) {
      $80($1_1);
      $2_1 = HEAP32[$0 + 328 >> 2];
     }
     HEAP32[$0 + 336 >> 2] = 0;
    }
    HEAP32[$0 + 336 >> 2] = $6_1;
    HEAP32[$0 + 332 >> 2] = $4_1;
    HEAP8[$0 + 340 | 0] = 1;
   }
   HEAP32[$0 + 328 >> 2] = $2_1 + 1;
   HEAP32[HEAP32[$0 + 336 >> 2] + ($2_1 << 2) >> 2] = $5_1;
  }
 }
 
 function $993($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0 + 328 >> 2];
  label$1 : {
   if (($2_1 | 0) < 1) {
    break label$1
   }
   $5_1 = HEAP32[$1_1 >> 2];
   $3_1 = 0;
   $4_1 = HEAP32[$0 + 336 >> 2];
   $1_1 = $4_1;
   while (1) {
    if (($5_1 | 0) != HEAP32[$1_1 >> 2]) {
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != ($2_1 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($3_1 | 0) >= ($2_1 | 0)) {
    break label$1
   }
   $3_1 = $0;
   $0 = $2_1 + -1 | 0;
   HEAP32[$3_1 + 328 >> 2] = $0;
   HEAP32[$1_1 >> 2] = HEAP32[($0 << 2) + $4_1 >> 2];
  }
 }
 
 function $994($0) {
  var $1_1 = 0;
  $305($0);
  HEAP32[$0 + 336 >> 2] = 0;
  HEAP8[$0 + 340 | 0] = 1;
  $1_1 = $0 + 328 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 252 >> 2] = 4;
  HEAP32[$0 >> 2] = 22020;
  $1_1 = $79(72);
  $732($1_1);
  HEAP32[$0 + 344 >> 2] = $1_1;
 }
 
 function $995($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 22020;
  $1_1 = HEAP32[$0 + 344 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 344 >> 2]);
  HEAP32[$0 >> 2] = 21976;
  $1_1 = HEAP32[$0 + 336 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 340 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 336 >> 2] = 0;
  }
  HEAP32[$0 + 336 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP8[$0 + 340 | 0] = 1;
  $306($0);
  return $0 | 0;
 }
 
 function $996($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 22020;
  $1_1 = HEAP32[$0 + 344 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $80(HEAP32[$0 + 344 >> 2]);
  HEAP32[$0 >> 2] = 21976;
  $1_1 = HEAP32[$0 + 336 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 340 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 336 >> 2] = 0;
  }
  HEAP32[$0 + 336 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP8[$0 + 340 | 0] = 1;
  $306($0);
  $80($0);
 }
 
 function $997($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $2_1 = $2_1 ? $2_1 : HEAP32[$0 + 188 >> 2];
  $7_1 = HEAP32[$1_1 >> 2];
  $3_1 = HEAP32[$0 + 328 >> 2];
  label$2 : {
   label$3 : {
    if (($3_1 | 0) < 1) {
     break label$3
    }
    $5_1 = HEAP32[$0 + 336 >> 2];
    $4_1 = $3_1;
    while (1) {
     if (($7_1 | 0) != HEAP32[$5_1 >> 2]) {
      $5_1 = $5_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break label$3;
     }
     break;
    };
    if ($4_1) {
     break label$2
    }
   }
   label$6 : {
    if (HEAP32[$0 + 332 >> 2] != ($3_1 | 0)) {
     break label$6
    }
    $6_1 = $3_1 ? $3_1 << 1 : 1;
    if (($3_1 | 0) >= ($6_1 | 0)) {
     break label$6
    }
    label$7 : {
     if (!$6_1) {
      break label$7
     }
     $8_1 = $79($6_1 << 2);
     $3_1 = HEAP32[$0 + 328 >> 2];
    }
    if (($3_1 | 0) >= 1) {
     $5_1 = 0;
     $4_1 = $3_1;
     while (1) {
      HEAP32[$5_1 + $8_1 >> 2] = HEAP32[HEAP32[$0 + 336 >> 2] + $5_1 >> 2];
      $5_1 = $5_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue
      }
      break;
     };
    }
    $4_1 = HEAP32[$0 + 336 >> 2];
    if ($4_1) {
     if (HEAPU8[$0 + 340 | 0]) {
      $80($4_1);
      $3_1 = HEAP32[$0 + 328 >> 2];
     }
     HEAP32[$0 + 336 >> 2] = 0;
    }
    HEAP32[$0 + 336 >> 2] = $8_1;
    HEAP32[$0 + 332 >> 2] = $6_1;
    HEAP8[$0 + 340 | 0] = 1;
   }
   HEAP32[HEAP32[$0 + 336 >> 2] + ($3_1 << 2) >> 2] = $7_1;
   HEAP32[$0 + 328 >> 2] = $3_1 + 1;
   $0 = HEAP32[$0 + 344 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $2_1, $1_1) | 0;
  }
 }
 
 function $998($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $8_1 = HEAP32[$1_1 >> 2];
  $3_1 = $3_1 ? $3_1 : HEAP32[$0 + 188 >> 2];
  $6_1 = HEAP32[$0 + 328 >> 2];
  label$2 : {
   if (($6_1 | 0) < 1) {
    break label$2
   }
   $7_1 = HEAP32[$0 + 336 >> 2];
   $4_1 = $7_1;
   while (1) {
    if (($8_1 | 0) != HEAP32[$4_1 >> 2]) {
     $4_1 = $4_1 + 4 | 0;
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) != ($6_1 | 0)) {
      continue
     }
     break label$2;
    }
    break;
   };
   if (($5_1 | 0) >= ($6_1 | 0)) {
    break label$2
   }
   $5_1 = $4_1;
   $4_1 = $6_1 + -1 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[($4_1 << 2) + $7_1 >> 2];
   HEAP32[$0 + 328 >> 2] = $4_1;
   $0 = HEAP32[$0 + 344 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $3_1, $1_1, $2_1) | 0;
  }
 }
 
 function $999($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20 = Math_fround(0);
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  $9_1 = $2_1 + 8 | 0;
  $8_1 = HEAP32[$9_1 + 4 >> 2];
  $7_1 = $6_1 + 216 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $9_1 = $2_1 + 24 | 0;
  $8_1 = HEAP32[$9_1 + 4 >> 2];
  $7_1 = $6_1 + 232 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $9_1 = $2_1 + 40 | 0;
  $8_1 = HEAP32[$9_1 + 4 >> 2];
  $7_1 = $6_1 + 248 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $8_1 = $2_1 + 56 | 0;
  $10 = HEAP32[$8_1 + 4 >> 2];
  $9_1 = $6_1 + 264 | 0;
  $7_1 = $9_1;
  HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $10;
  $8_1 = $3_1 + 8 | 0;
  $10 = HEAP32[$8_1 + 4 >> 2];
  $7_1 = $6_1 + 152 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $10;
  $7_1 = $2_1;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  HEAP32[$6_1 + 208 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$6_1 + 212 >> 2] = $8_1;
  $8_1 = HEAP32[$7_1 + 20 >> 2];
  HEAP32[$6_1 + 224 >> 2] = HEAP32[$7_1 + 16 >> 2];
  HEAP32[$6_1 + 228 >> 2] = $8_1;
  $8_1 = HEAP32[$7_1 + 36 >> 2];
  HEAP32[$6_1 + 240 >> 2] = HEAP32[$7_1 + 32 >> 2];
  HEAP32[$6_1 + 244 >> 2] = $8_1;
  $8_1 = HEAP32[$7_1 + 52 >> 2];
  HEAP32[$6_1 + 256 >> 2] = HEAP32[$7_1 + 48 >> 2];
  HEAP32[$6_1 + 260 >> 2] = $8_1;
  $7_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$6_1 + 144 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 148 >> 2] = $7_1;
  $8_1 = $3_1 + 24 | 0;
  $10 = HEAP32[$8_1 + 4 >> 2];
  $7_1 = $6_1 + 168 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $10;
  $8_1 = $3_1 + 40 | 0;
  $10 = HEAP32[$8_1 + 4 >> 2];
  $7_1 = $6_1 + 184 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $10;
  $10 = $3_1 + 56 | 0;
  $18_1 = HEAP32[$10 + 4 >> 2];
  $7_1 = $6_1 + 200 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $18_1;
  $8_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$6_1 + 160 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$6_1 + 164 >> 2] = $8_1;
  $8_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$6_1 + 176 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$6_1 + 180 >> 2] = $8_1;
  $8_1 = HEAP32[$3_1 + 52 >> 2];
  HEAP32[$6_1 + 192 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$6_1 + 196 >> 2] = $8_1;
  HEAP32[$6_1 + 108 >> 2] = 0;
  HEAPF32[$6_1 + 104 >> 2] = HEAPF32[$7_1 >> 2] - HEAPF32[$9_1 >> 2];
  HEAPF32[$6_1 + 100 >> 2] = HEAPF32[$6_1 + 196 >> 2] - HEAPF32[$6_1 + 260 >> 2];
  HEAPF32[$6_1 + 96 >> 2] = HEAPF32[$6_1 + 192 >> 2] - HEAPF32[$6_1 + 256 >> 2];
  $800($6_1 + 208 | 0, $6_1 + 144 | 0, $6_1 + 16 | 0, $6_1 + 128 | 0);
  HEAP32[$6_1 + 92 >> 2] = 0;
  $11 = HEAPF32[$6_1 + 128 >> 2];
  HEAPF32[$6_1 + 88 >> 2] = $11 * HEAPF32[$6_1 + 24 >> 2];
  HEAPF32[$6_1 + 84 >> 2] = $11 * HEAPF32[$6_1 + 20 >> 2];
  HEAPF32[$6_1 + 80 >> 2] = $11 * HEAPF32[$6_1 + 16 >> 2];
  $7_1 = $6_1 + 72 | 0;
  HEAP32[$7_1 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  $7_1 = $6_1 - -64 | 0;
  HEAP32[$7_1 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  $1078($6_1 + 208 | 0, $6_1 + 128 | 0);
  HEAP32[$6_1 + 60 >> 2] = 0;
  HEAP32[$6_1 + 44 >> 2] = 0;
  $11 = HEAPF32[$6_1 + 128 >> 2];
  $12_1 = HEAPF32[$6_1 + 132 >> 2];
  $14 = HEAPF32[$6_1 + 136 >> 2];
  $17_1 = HEAPF32[$6_1 + 140 >> 2];
  $16_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($11 * $11) + Math_fround($12_1 * $12_1)) + Math_fround($14 * $14)) + Math_fround($17_1 * $17_1)));
  $19_1 = Math_fround($14 * $16_1);
  $13_1 = Math_fround($12_1 * $19_1);
  $15_1 = Math_fround($11 * $16_1);
  $20 = Math_fround($17_1 * $15_1);
  HEAPF32[$6_1 + 52 >> 2] = $13_1 + $20;
  HEAPF32[$6_1 + 40 >> 2] = $13_1 - $20;
  $13_1 = Math_fround($11 * $15_1);
  $15_1 = $12_1;
  $12_1 = Math_fround($12_1 * $16_1);
  $16_1 = Math_fround($15_1 * $12_1);
  HEAPF32[$6_1 + 56 >> 2] = Math_fround(1.0) - Math_fround($13_1 + $16_1);
  $14 = Math_fround($14 * $19_1);
  HEAPF32[$6_1 + 36 >> 2] = Math_fround(1.0) - Math_fround($13_1 + $14);
  HEAP32[$6_1 + 28 >> 2] = 0;
  $13_1 = Math_fround($11 * $19_1);
  $15_1 = Math_fround($17_1 * $12_1);
  HEAPF32[$6_1 + 48 >> 2] = $13_1 - $15_1;
  $11 = Math_fround($11 * $12_1);
  $12_1 = Math_fround($17_1 * $19_1);
  HEAPF32[$6_1 + 32 >> 2] = $11 + $12_1;
  HEAPF32[$6_1 + 24 >> 2] = $13_1 + $15_1;
  HEAPF32[$6_1 + 20 >> 2] = $11 - $12_1;
  HEAPF32[$6_1 + 16 >> 2] = Math_fround(1.0) - Math_fround($16_1 + $14);
  $97($1_1, $6_1 + 16 | 0, $6_1 + 96 | 0, $6_1 + 80 | 0, $6_1 + 128 | 0, $6_1 + 112 | 0);
  if (HEAP32[$0 + 328 >> 2] >= 1) {
   $9_1 = $3_1 + 48 | 0;
   $8_1 = $2_1 + 48 | 0;
   $3_1 = 0;
   $7_1 = 0;
   while (1) {
    $2_1 = HEAP32[HEAP32[$0 + 336 >> 2] + $3_1 >> 2];
    label$3 : {
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, HEAP32[$2_1 + 188 >> 2])) {
      break label$3
     }
     $10 = HEAP32[$2_1 + 192 >> 2];
     $18_1 = $2_1 + 4 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 8 >> 2]]($10, $18_1, $6_1 + 16 | 0, $6_1 + 96 | 0);
     HEAP32[$6_1 + 28 >> 2] = 0;
     HEAP32[$6_1 + 108 >> 2] = 0;
     HEAPF32[$6_1 + 24 >> 2] = HEAPF32[$6_1 + 24 >> 2] + HEAPF32[$6_1 + 136 >> 2];
     HEAPF32[$6_1 + 20 >> 2] = HEAPF32[$6_1 + 20 >> 2] + HEAPF32[$6_1 + 132 >> 2];
     HEAPF32[$6_1 + 16 >> 2] = HEAPF32[$6_1 + 16 >> 2] + HEAPF32[$6_1 + 128 >> 2];
     HEAPF32[$6_1 + 96 >> 2] = HEAPF32[$6_1 + 96 >> 2] + HEAPF32[$6_1 + 112 >> 2];
     HEAPF32[$6_1 + 100 >> 2] = HEAPF32[$6_1 + 100 >> 2] + HEAPF32[$6_1 + 116 >> 2];
     HEAPF32[$6_1 + 104 >> 2] = HEAPF32[$6_1 + 104 >> 2] + HEAPF32[$6_1 + 120 >> 2];
     HEAP32[$6_1 + 12 >> 2] = 1065353216;
     if (!$1000($8_1, $9_1, $6_1 + 16 | 0, $6_1 + 96 | 0, $6_1 + 12 | 0, $6_1 + 80 | 0)) {
      break label$3
     }
     $866($1_1, $6_1 + 208 | 0, $6_1 + 144 | 0, $2_1, HEAP32[$2_1 + 192 >> 2], $18_1, $4_1, $5_1);
    }
    $3_1 = $3_1 + 4 | 0;
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) < HEAP32[$0 + 328 >> 2]) {
     continue
    }
    break;
   };
  }
  global$0 = $6_1 + 272 | 0;
 }
 
 function $1000($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20 = 0, $21 = 0, $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0;
  $7_1 = global$0 - 16 | 0;
  $9_1 = HEAPF32[$3_1 >> 2];
  $6_1 = HEAPF32[$2_1 >> 2];
  $11 = Math_fround(Math_fround($9_1 + $6_1) * Math_fround(.5));
  $8_1 = Math_fround(HEAPF32[$1_1 >> 2] - $11);
  $9_1 = Math_fround($9_1 - $6_1);
  $16_1 = Math_fround($9_1 * Math_fround(.5));
  $20 = $8_1 > $16_1;
  $9_1 = Math_fround($9_1 * Math_fround(-.5));
  $19_1 = $8_1 < $9_1;
  $6_1 = HEAPF32[$3_1 + 4 >> 2];
  $10 = HEAPF32[$2_1 + 4 >> 2];
  $12_1 = Math_fround(Math_fround($6_1 + $10) * Math_fround(.5));
  $13_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] - $12_1);
  $6_1 = Math_fround($6_1 - $10);
  $15_1 = Math_fround($6_1 * Math_fround(-.5));
  $21 = $13_1 < $15_1;
  $17_1 = Math_fround($6_1 * Math_fround(.5));
  $22_1 = $13_1 > $17_1;
  $6_1 = HEAPF32[$3_1 + 8 >> 2];
  $10 = HEAPF32[$2_1 + 8 >> 2];
  $23_1 = Math_fround(Math_fround($6_1 + $10) * Math_fround(.5));
  $14 = Math_fround(HEAPF32[$1_1 + 8 >> 2] - $23_1);
  $6_1 = Math_fround($6_1 - $10);
  $24_1 = Math_fround($6_1 * Math_fround(-.5));
  $1_1 = $14 < $24_1;
  $18_1 = Math_fround($6_1 * Math_fround(.5));
  $2_1 = $19_1 | $20 << 3 | $21 << 1 | $22_1 << 4 | $1_1 << 2 | ($14 > $18_1) << 5;
  $11 = Math_fround(HEAPF32[$0 >> 2] - $11);
  $3_1 = $11 > $16_1;
  $25 = $11 < $9_1;
  $10 = Math_fround(HEAPF32[$0 + 4 >> 2] - $12_1);
  $26_1 = $10 < $15_1;
  $27_1 = $10 > $17_1;
  $12_1 = Math_fround(HEAPF32[$0 + 8 >> 2] - $23_1);
  $0 = $12_1 < $24_1;
  $28_1 = $3_1 << 3 | $25 | $26_1 << 1 | $27_1 << 4 | $0 << 2 | ($12_1 > $18_1) << 5;
  if (!($2_1 & $28_1)) {
   $9_1 = HEAPF32[$4_1 >> 2];
   $29_1 = $7_1 + 8 | 0;
   HEAP32[$29_1 >> 2] = 0;
   HEAP32[$29_1 + 4 >> 2] = 0;
   HEAP32[$7_1 >> 2] = 0;
   HEAP32[$7_1 + 4 >> 2] = 0;
   $15_1 = Math_fround($8_1 - $11);
   label$2 : {
    if (!!$25) {
     $8_1 = Math_fround(Math_fround(Math_fround(-$11) - $16_1) / $15_1);
     if (!($8_1 >= Math_fround(0.0))) {
      $8_1 = Math_fround(0.0);
      break label$2;
     }
     HEAP32[$7_1 + 12 >> 2] = 0;
     HEAP32[$7_1 + 4 >> 2] = 0;
     HEAP32[$7_1 + 8 >> 2] = 0;
     HEAP32[$7_1 >> 2] = 1065353216;
     break label$2;
    }
    $8_1 = Math_fround(0.0);
    if (!$19_1) {
     break label$2
    }
    $6_1 = Math_fround(Math_fround(Math_fround(-$11) - $16_1) / $15_1);
    if (!($6_1 < $9_1)) {
     break label$2
    }
    $9_1 = $6_1;
   }
   $13_1 = Math_fround($13_1 - $10);
   label$5 : {
    label$6 : {
     if ($26_1) {
      $6_1 = Math_fround(Math_fround(Math_fround(-$10) - $17_1) / $13_1);
      if (!($8_1 <= $6_1)) {
       break label$6
      }
      $19_1 = $7_1 + 8 | 0;
      HEAP32[$19_1 >> 2] = 0;
      HEAP32[$19_1 + 4 >> 2] = 0;
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 1065353216;
      break label$5;
     }
     if (!$21) {
      break label$6
     }
     $6_1 = Math_fround(Math_fround(Math_fround(-$10) - $17_1) / $13_1);
     if (!($6_1 < $9_1)) {
      break label$6
     }
     $9_1 = $6_1;
    }
    $6_1 = $8_1;
   }
   $14 = Math_fround($14 - $12_1);
   label$8 : {
    label$9 : {
     if (!!$0) {
      $8_1 = Math_fround(Math_fround(Math_fround(-$12_1) - $18_1) / $14);
      if (!($6_1 <= $8_1)) {
       break label$9
      }
      $0 = $7_1 + 8 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAP32[$0 >> 2] = 1065353216;
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 0;
      break label$8;
     }
     if (!$1_1) {
      break label$9
     }
     $8_1 = Math_fround(Math_fround(Math_fround(-$12_1) - $18_1) / $14);
     if (!($8_1 < $9_1)) {
      break label$9
     }
     $9_1 = $8_1;
    }
    $8_1 = $6_1;
   }
   label$11 : {
    label$12 : {
     if (!!$3_1) {
      $6_1 = Math_fround(Math_fround($16_1 - $11) / $15_1);
      if (!($8_1 <= $6_1)) {
       break label$12
      }
      HEAP32[$7_1 + 12 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 0;
      HEAP32[$7_1 + 8 >> 2] = 0;
      HEAP32[$7_1 >> 2] = -1082130432;
      break label$11;
     }
     if (!$20) {
      break label$12
     }
     $6_1 = Math_fround(Math_fround($16_1 - $11) / $15_1);
     if (!($6_1 < $9_1)) {
      break label$12
     }
     $9_1 = $6_1;
    }
    $6_1 = $8_1;
   }
   label$14 : {
    label$15 : {
     if (!!$27_1) {
      $8_1 = Math_fround(Math_fround($17_1 - $10) / $13_1);
      if (!($6_1 <= $8_1)) {
       break label$15
      }
      $0 = $7_1 + 8 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = -1082130432;
      break label$14;
     }
     if (!$22_1) {
      break label$15
     }
     $8_1 = Math_fround(Math_fround($17_1 - $10) / $13_1);
     if (!($8_1 < $9_1)) {
      break label$15
     }
     $9_1 = $8_1;
    }
    $8_1 = $6_1;
   }
   label$17 : {
    label$18 : {
     if ($28_1 & 32) {
      $6_1 = Math_fround(Math_fround($18_1 - $12_1) / $14);
      if (!($8_1 <= $6_1)) {
       break label$18
      }
      $0 = $7_1 + 8 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAP32[$0 >> 2] = -1082130432;
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 0;
      break label$17;
     }
     if (!($2_1 & 32)) {
      break label$18
     }
     $6_1 = Math_fround(Math_fround($18_1 - $12_1) / $14);
     if (!($6_1 < $9_1)) {
      break label$18
     }
     $9_1 = $6_1;
    }
    $6_1 = $8_1;
   }
   if (!!($6_1 <= $9_1)) {
    HEAPF32[$4_1 >> 2] = $6_1;
    $0 = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $0;
    $1_1 = $7_1 + 8 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0 = $5_1 + 8 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0 + 4 >> 2] = $2_1;
    return 1;
   }
  }
  return 0;
 }
 
 function $1001($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0);
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$0 >> 2] = 22132;
  HEAP32[$0 + 272 >> 2] = 0;
  HEAP32[$0 + 276 >> 2] = 0;
  HEAP32[$0 + 256 >> 2] = 0;
  HEAP32[$0 + 260 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 64 >> 2] = 1017370378;
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP32[$0 + 104 >> 2] = 0;
  HEAP16[$0 + 250 >> 1] = 257;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 252 >> 2] = 0;
  HEAP8[$0 + 216 | 0] = 1;
  HEAP32[$0 + 212 >> 2] = 0;
  $1_1 = $0 + 204 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 280 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 264 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 76 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 108 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 1105933107;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP16[$0 + 248 >> 1] = 0;
  HEAP32[$0 + 28 >> 2] = 1113325568;
  HEAP32[$0 + 32 >> 2] = 1092616192;
  HEAP32[$0 + 36 >> 2] = 1092616192;
  HEAP32[$0 + 148 >> 2] = 0;
  HEAP8[$0 + 289 | 0] = 0;
  HEAP8[$0 + 290 | 0] = 0;
  HEAP32[$0 + 16 >> 2] = 1045220557;
  HEAP32[$0 + 240 >> 2] = 0;
  HEAP32[$0 + 244 >> 2] = 0;
  HEAP8[$0 + 288 | 0] = 1;
  $7_1 = HEAPF32[$4_1 >> 2];
  $8_1 = HEAPF32[$4_1 + 4 >> 2];
  $5_1 = HEAPF32[$4_1 + 8 >> 2];
  $9_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8_1 * $8_1)) + Math_fround($5_1 * $5_1));
  label$1 : {
   if (!!($9_1 > Math_fround(0.0))) {
    $10 = $5_1;
    $5_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($9_1)));
    $9_1 = Math_fround(Math_fround($10 * $5_1) * Math_fround(-29.399999618530273));
    $7_1 = Math_fround(Math_fround($7_1 * $5_1) * Math_fround(-29.399999618530273));
    $8_1 = Math_fround(Math_fround($8_1 * $5_1) * Math_fround(-29.399999618530273));
    $5_1 = Math_fround(Math_fround($9_1 * $9_1) + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8_1 * $8_1)));
    if (!!($5_1 > Math_fround(0.0))) {
     HEAP32[$6_1 + 12 >> 2] = 0;
     HEAPF32[$6_1 + 8 >> 2] = -$9_1;
     HEAPF32[$6_1 + 4 >> 2] = -$8_1;
     HEAPF32[$6_1 >> 2] = -$7_1;
     $1002($0, $6_1);
    }
    HEAPF32[$0 + 52 >> 2] = Math_sqrt($5_1);
    break label$1;
   }
   $1002($0, $4_1);
  }
  HEAP32[$0 + 44 >> 2] = 1061752795;
  HEAP32[$0 + 48 >> 2] = 1060439283;
  HEAPF32[$0 + 60 >> 2] = $3_1;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $1002($0, $1_1) {
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20 = 0, $21 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0;
  $16_1 = global$0 - 80 | 0;
  global$0 = $16_1;
  $2_1 = $0 + 256 | 0;
  $3_1 = HEAPF32[$1_1 + 12 >> 2];
  $11 = HEAPF32[$0 + 264 >> 2];
  $7_1 = HEAPF32[$1_1 + 8 >> 2];
  label$1 : {
   if (!(HEAPF32[$0 + 268 >> 2] != $3_1 | $11 != $7_1 | HEAPF32[$0 + 260 >> 2] != HEAPF32[$1_1 + 4 >> 2])) {
    if (HEAPF32[$2_1 >> 2] == HEAPF32[$1_1 >> 2]) {
     break label$1
    }
   }
   $8_1 = HEAPF32[$0 + 260 >> 2];
   $14 = HEAPF32[$0 + 256 >> 2];
   $4_1 = HEAPF32[$1_1 >> 2];
   $5_1 = HEAPF32[$1_1 + 4 >> 2];
   $6_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($7_1 * $7_1));
   label$3 : {
    if (!!($6_1 > Math_fround(0.0))) {
     HEAPF32[$0 + 268 >> 2] = $3_1;
     $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($6_1)));
     $9_1 = Math_fround($7_1 * $3_1);
     HEAPF32[$0 + 264 >> 2] = $9_1;
     $7_1 = Math_fround($5_1 * $3_1);
     HEAPF32[$0 + 260 >> 2] = $7_1;
     $10 = Math_fround($4_1 * $3_1);
     HEAPF32[$0 + 256 >> 2] = $10;
     break label$3;
    }
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $1_1 = $2_1 + 8 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $7_1 = Math_fround(0.0);
   }
   $2_1 = HEAP32[$0 + 8 >> 2];
   if (!$2_1) {
    break label$1
   }
   $17_1 = Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($7_1 * $7_1)) + Math_fround($9_1 * $9_1));
   label$5 : {
    if ($17_1 == Math_fround(0.0)) {
     break label$5
    }
    $21 = Math_fround(Math_fround(Math_fround($14 * $14) + Math_fround($8_1 * $8_1)) + Math_fround($11 * $11));
    if ($21 == Math_fround(0.0)) {
     break label$5
    }
    $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($17_1)));
    $6_1 = Math_fround($9_1 * $3_1);
    HEAPF32[$0 + 264 >> 2] = $6_1;
    $4_1 = Math_fround($7_1 * $3_1);
    HEAPF32[$0 + 260 >> 2] = $4_1;
    $5_1 = Math_fround($10 * $3_1);
    HEAPF32[$0 + 256 >> 2] = $5_1;
    $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($21)));
    $11 = Math_fround($11 * $3_1);
    $7_1 = Math_fround($8_1 * $3_1);
    $9_1 = Math_fround($14 * $3_1);
    $3_1 = Math_fround(Math_fround($11 * $6_1) + Math_fround(Math_fround($7_1 * $4_1) + Math_fround($9_1 * $5_1)));
    if (!!($3_1 < Math_fround(-.9999998807907104))) {
     if (!!(Math_fround(Math_abs($6_1)) > Math_fround(.7071067690849304))) {
      $8_1 = $4_1;
      $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)))));
      $3_1 = Math_fround($8_1 * $4_1);
      $5_1 = Math_fround($4_1 * Math_fround(-$6_1));
      $4_1 = Math_fround(0.0);
      $6_1 = Math_fround(0.0);
      break label$5;
     }
     $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)))));
     $5_1 = Math_fround($5_1 * $3_1);
     $4_1 = Math_fround($3_1 * Math_fround(-$4_1));
     $3_1 = Math_fround(0.0);
     $6_1 = Math_fround(0.0);
     break label$5;
    }
    $3_1 = Math_fround($3_1 + Math_fround(1.0));
    $8_1 = Math_fround(Math_sqrt(Math_fround($3_1 + $3_1)));
    $10 = Math_fround(Math_fround(1.0) / $8_1);
    $3_1 = Math_fround(Math_fround(Math_fround($7_1 * $5_1) - Math_fround($9_1 * $4_1)) * $10);
    $5_1 = Math_fround(Math_fround(Math_fround($9_1 * $6_1) - Math_fround($11 * $5_1)) * $10);
    $4_1 = Math_fround(Math_fround(Math_fround($11 * $4_1) - Math_fround($7_1 * $6_1)) * $10);
    $6_1 = Math_fround($8_1 * Math_fround(.5));
   }
   $12_1 = $2_1 + 12 | 0;
   $15_1 = HEAP32[$12_1 + 4 >> 2];
   $13_1 = $16_1 + 24 | 0;
   $1_1 = $13_1;
   HEAP32[$1_1 >> 2] = HEAP32[$12_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $15_1;
   $1_1 = $2_1 + 20 | 0;
   $18_1 = HEAP32[$1_1 >> 2];
   $23_1 = HEAP32[$1_1 + 4 >> 2];
   $1_1 = $2_1 + 36 | 0;
   $24_1 = HEAP32[$1_1 >> 2];
   $25 = HEAP32[$1_1 + 4 >> 2];
   $1_1 = $2_1 + 28 | 0;
   $19_1 = HEAP32[$1_1 >> 2];
   $1_1 = HEAP32[$1_1 + 4 >> 2];
   $12_1 = $2_1 + 44 | 0;
   $15_1 = HEAP32[$12_1 >> 2];
   $26_1 = HEAP32[$12_1 + 4 >> 2];
   $27_1 = HEAP32[$2_1 + 4 >> 2];
   $28_1 = HEAP32[$2_1 + 8 >> 2];
   $22_1 = $2_1 + 60 | 0;
   $29_1 = HEAP32[$22_1 + 4 >> 2];
   $20 = $16_1 + 72 | 0;
   $12_1 = $20;
   HEAP32[$12_1 >> 2] = HEAP32[$22_1 >> 2];
   HEAP32[$12_1 + 4 >> 2] = $29_1;
   $12_1 = $16_1 + 56 | 0;
   HEAP32[$12_1 >> 2] = $15_1;
   HEAP32[$12_1 + 4 >> 2] = $26_1;
   $15_1 = $16_1 + 40 | 0;
   HEAP32[$15_1 >> 2] = $19_1;
   HEAP32[$15_1 + 4 >> 2] = $1_1;
   HEAP32[$16_1 + 16 >> 2] = $27_1;
   HEAP32[$16_1 + 20 >> 2] = $28_1;
   $2_1 = $2_1 + 52 | 0;
   $19_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $16_1;
   HEAP32[$1_1 + 64 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 68 >> 2] = $19_1;
   HEAP32[$1_1 + 48 >> 2] = $24_1;
   HEAP32[$1_1 + 52 >> 2] = $25;
   HEAP32[$1_1 + 32 >> 2] = $18_1;
   HEAP32[$1_1 + 36 >> 2] = $23_1;
   $1078($1_1 + 16 | 0, $1_1);
   $9_1 = HEAPF32[$1_1 >> 2];
   $10 = HEAPF32[$1_1 + 12 >> 2];
   $8_1 = HEAPF32[$1_1 + 8 >> 2];
   $14 = HEAPF32[$1_1 + 4 >> 2];
   $11 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $9_1) - Math_fround($4_1 * $10)) - Math_fround($5_1 * $8_1)) + Math_fround($3_1 * $14));
   $7_1 = Math_fround(Math_fround($3_1 * $8_1) + Math_fround(Math_fround(Math_fround($4_1 * $9_1) + Math_fround($6_1 * $10)) + Math_fround($5_1 * $14)));
   $17_1 = Math_fround(Math_fround($5_1 * $9_1) + Math_fround(Math_fround(Math_fround($6_1 * $8_1) - Math_fround($3_1 * $10)) - Math_fround($4_1 * $14)));
   $3_1 = Math_fround(Math_fround($4_1 * $8_1) + Math_fround(Math_fround(Math_fround($6_1 * $14) - Math_fround($5_1 * $10)) - Math_fround($3_1 * $9_1)));
   $4_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround($7_1 * $7_1) + Math_fround(Math_fround($17_1 * $17_1) + Math_fround(Math_fround($11 * $11) + Math_fround($3_1 * $3_1)))));
   $5_1 = Math_fround($17_1 * $4_1);
   $9_1 = Math_fround($11 * $5_1);
   $6_1 = Math_fround($3_1 * $4_1);
   $10 = Math_fround($7_1 * $6_1);
   HEAPF32[$13_1 >> 2] = $9_1 + $10;
   HEAP32[$1_1 + 60 >> 2] = 0;
   HEAP32[$1_1 + 44 >> 2] = 0;
   $8_1 = Math_fround($3_1 * $5_1);
   $4_1 = Math_fround($11 * $4_1);
   $14 = Math_fround($7_1 * $4_1);
   HEAPF32[$1_1 + 52 >> 2] = $8_1 + $14;
   HEAPF32[$15_1 >> 2] = $8_1 - $14;
   $4_1 = Math_fround($11 * $4_1);
   $3_1 = Math_fround($3_1 * $6_1);
   HEAPF32[$12_1 >> 2] = Math_fround(1.0) - Math_fround($4_1 + $3_1);
   $8_1 = $4_1;
   $4_1 = Math_fround($17_1 * $5_1);
   HEAPF32[$1_1 + 36 >> 2] = Math_fround(1.0) - Math_fround($8_1 + $4_1);
   HEAP32[$1_1 + 28 >> 2] = 0;
   HEAPF32[$1_1 + 48 >> 2] = $9_1 - $10;
   $6_1 = Math_fround($11 * $6_1);
   $5_1 = Math_fround($7_1 * $5_1);
   HEAPF32[$1_1 + 32 >> 2] = $6_1 + $5_1;
   HEAPF32[$1_1 + 20 >> 2] = $6_1 - $5_1;
   $18_1 = HEAP32[$13_1 + 4 >> 2];
   $0 = HEAP32[$0 + 8 >> 2];
   $2_1 = $0 + 12 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$13_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $18_1;
   HEAPF32[$1_1 + 16 >> 2] = Math_fround(1.0) - Math_fround($3_1 + $4_1);
   $2_1 = HEAP32[$1_1 + 20 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$0 + 8 >> 2] = $2_1;
   $13_1 = HEAP32[$1_1 + 36 >> 2];
   $2_1 = $0 + 20 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $13_1;
   $13_1 = HEAP32[$15_1 + 4 >> 2];
   $2_1 = $0 + 28 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$15_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $13_1;
   HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
   $13_1 = HEAP32[$1_1 + 52 >> 2];
   $2_1 = $0 + 36 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $13_1;
   $13_1 = HEAP32[$12_1 + 4 >> 2];
   $2_1 = $0 + 44 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$12_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $13_1;
   $13_1 = HEAP32[$20 + 4 >> 2];
   $2_1 = $0 + 60 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$20 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $13_1;
   $2_1 = HEAP32[$1_1 + 68 >> 2];
   $0 = $0 + 52 | 0;
   HEAP32[$0 >> 2] = HEAP32[$1_1 + 64 >> 2];
   HEAP32[$0 + 4 >> 2] = $2_1;
  }
  global$0 = $16_1 + 80 | 0;
 }
 
 function $1003($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = HEAPF32[$1_1 >> 2];
    $5_1 = HEAPF32[$1_1 + 4 >> 2];
    $2_1 = HEAPF32[$1_1 + 8 >> 2];
    $6_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($2_1 * $2_1));
    if (!($6_1 > Math_fround(0.0))) {
     break label$2
    }
    $7_1 = HEAPF32[$0 + 52 >> 2];
    if (!($7_1 > Math_fround(0.0))) {
     break label$2
    }
    $8_1 = $2_1;
    $2_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($6_1)));
    $6_1 = Math_fround(-$7_1);
    $7_1 = Math_fround(Math_fround($8_1 * $2_1) * $6_1);
    $4_1 = Math_fround(Math_fround($4_1 * $2_1) * $6_1);
    $5_1 = Math_fround(Math_fround($5_1 * $2_1) * $6_1);
    $2_1 = Math_fround(Math_fround($7_1 * $7_1) + Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)));
    if (!!($2_1 > Math_fround(0.0))) {
     HEAP32[$3_1 + 12 >> 2] = 0;
     HEAPF32[$3_1 + 8 >> 2] = -$7_1;
     HEAPF32[$3_1 + 4 >> 2] = -$5_1;
     HEAPF32[$3_1 >> 2] = -$4_1;
     $1002($0, $3_1);
    }
    HEAPF32[$0 + 52 >> 2] = Math_sqrt($2_1);
    break label$1;
   }
   $1002($0, $1_1);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1006($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 22132;
  $1_1 = HEAP32[$0 + 212 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 216 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 212 >> 2] = 0;
  }
  HEAP32[$0 + 212 >> 2] = 0;
  HEAP32[$0 + 204 >> 2] = 0;
  HEAP32[$0 + 208 >> 2] = 0;
  HEAP8[$0 + 216 | 0] = 1;
  return $0 | 0;
 }
 
 function $1007($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 22132;
  $1_1 = HEAP32[$0 + 212 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 216 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 212 >> 2] = 0;
  }
  HEAP32[$0 + 212 >> 2] = 0;
  HEAP32[$0 + 204 >> 2] = 0;
  HEAP32[$0 + 208 >> 2] = 0;
  HEAP8[$0 + 216 | 0] = 1;
  $80($0);
 }
 
 function $1008($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  $2_1 = HEAP32[$0 + 12 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, HEAP32[$0 + 8 >> 2] + 4 | 0, $4_1 + 80 | 0, $4_1 - -64 | 0);
  $2_1 = HEAP32[$1_1 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, HEAP32[HEAP32[$0 + 8 >> 2] + 188 >> 2], $4_1 + 80 | 0, $4_1 - -64 | 0, HEAP32[$1_1 + 24 >> 2]);
  $2_1 = HEAP32[$1_1 + 24 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 32 >> 2]]($2_1, HEAP32[HEAP32[$0 + 8 >> 2] + 344 >> 2], $1_1 + 28 | 0, $2_1);
  $1_1 = HEAP32[$0 + 8 >> 2];
  $2_1 = $1_1 + 52 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0 + 132 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 136 >> 2] = $3_1;
  $3_1 = $1_1 + 60 | 0;
  $6_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 140 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $6_1;
  $6_1 = $0 + 132 | 0;
  $1_1 = HEAP32[$1_1 + 344 >> 2];
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0) < 1) {
    break label$1
   }
   $11 = $0 + 200 | 0;
   while (1) {
    $1_1 = HEAP32[$0 + 204 >> 2];
    if (($1_1 | 0) <= -1) {
     if (HEAP32[$0 + 208 >> 2] <= -1) {
      $2_1 = HEAP32[$0 + 212 >> 2];
      if ($2_1) {
       if (HEAPU8[$0 + 216 | 0]) {
        $80($2_1)
       }
       HEAP32[$0 + 212 >> 2] = 0;
      }
      HEAP8[$0 + 216 | 0] = 1;
      HEAP32[$0 + 208 >> 2] = 0;
      HEAP32[$0 + 212 >> 2] = 0;
     }
     $3_1 = $1_1 << 2;
     while (1) {
      HEAP32[HEAP32[$0 + 212 >> 2] + $3_1 >> 2] = 0;
      $3_1 = $3_1 + 4 | 0;
      $2_1 = $1_1 + 1 | 0;
      $7_1 = $2_1 >>> 0 >= $1_1 >>> 0;
      $1_1 = $2_1;
      if ($7_1) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 204 >> 2] = 0;
    $1_1 = HEAP32[HEAP32[$0 + 8 >> 2] + 344 >> 2];
    $2_1 = HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($1_1) | 0) + 12 >> 2] + ($9_1 << 4) | 0;
    $1_1 = HEAP32[HEAP32[$2_1 + 4 >> 2] >> 2];
    $3_1 = HEAP32[HEAP32[$2_1 >> 2] >> 2];
    label$9 : {
     if ((HEAPU8[$3_1 + 204 | 0] & 4 ? $3_1 : 0) | (HEAPU8[$1_1 + 204 | 0] & 4 ? $1_1 : 0)) {
      break label$9
     }
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $3_1, $1_1)) {
      break label$9
     }
     $1_1 = HEAP32[$2_1 + 8 >> 2];
     if ($1_1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, $11)
     }
     $7_1 = HEAP32[$0 + 204 >> 2];
     if (($7_1 | 0) < 1) {
      break label$9
     }
     $10 = HEAP32[$0 + 8 >> 2];
     $5_1 = HEAP32[$0 + 212 >> 2];
     $2_1 = 0;
     while (1) {
      $1_1 = HEAP32[$5_1 + ($2_1 << 2) >> 2];
      $8_1 = HEAP32[$1_1 + 780 >> 2];
      if (($8_1 | 0) >= 1) {
       $13_1 = ($10 | 0) == HEAP32[$1_1 + 772 >> 2] ? Math_fround(-1.0) : Math_fround(1.0);
       $1_1 = $1_1 + 84 | 0;
       $15_1 = Math_fround(-HEAPF32[$0 + 16 >> 2]);
       $3_1 = 0;
       while (1) {
        $12_1 = HEAPF32[$1_1 >> 2];
        if (!!($12_1 < $15_1)) {
         $16_1 = HEAPF32[$1_1 + -8 >> 2];
         $17_1 = HEAPF32[$1_1 + -12 >> 2];
         HEAPF32[$0 + 132 >> 2] = Math_fround(Math_fround($12_1 * Math_fround($13_1 * HEAPF32[$1_1 + -16 >> 2])) * Math_fround(.20000000298023224)) + HEAPF32[$0 + 132 >> 2];
         HEAPF32[$0 + 136 >> 2] = Math_fround(Math_fround($12_1 * Math_fround($13_1 * $17_1)) * Math_fround(.20000000298023224)) + HEAPF32[$0 + 136 >> 2];
         HEAPF32[$0 + 140 >> 2] = Math_fround(Math_fround($12_1 * Math_fround($13_1 * $16_1)) * Math_fround(.20000000298023224)) + HEAPF32[$0 + 140 >> 2];
         $18_1 = 1;
        }
        $1_1 = $1_1 + 192 | 0;
        $3_1 = $3_1 + 1 | 0;
        if (($3_1 | 0) < ($8_1 | 0)) {
         continue
        }
        break;
       };
      }
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) < ($7_1 | 0)) {
       continue
      }
      break;
     };
    }
    $9_1 = $9_1 + 1 | 0;
    $1_1 = HEAP32[HEAP32[$0 + 8 >> 2] + 344 >> 2];
    if (($9_1 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0)) {
     continue
    }
    break;
   };
  }
  $3_1 = $6_1 + 8 | 0;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $4_1 + 56 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $9_1;
  $0 = HEAP32[$0 + 8 >> 2];
  $3_1 = $0 + 12 | 0;
  $7_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $4_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $11 = $0 + 28 | 0;
  $10 = $11;
  $5_1 = HEAP32[$10 + 4 >> 2];
  $9_1 = $4_1 + 24 | 0;
  $7_1 = $9_1;
  HEAP32[$7_1 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $5_1;
  $10 = $0 + 44 | 0;
  $8_1 = $10;
  $14 = HEAP32[$8_1 + 4 >> 2];
  $7_1 = $4_1 + 40 | 0;
  $5_1 = $7_1;
  HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $14;
  $5_1 = HEAP32[$6_1 + 4 >> 2];
  $6_1 = HEAP32[$6_1 >> 2];
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
  HEAP32[$4_1 + 48 >> 2] = $6_1;
  HEAP32[$4_1 + 52 >> 2] = $5_1;
  $6_1 = HEAP32[$0 + 8 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $6_1 = $0 + 20 | 0;
  $5_1 = $6_1;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$4_1 + 16 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $8_1;
  $5_1 = $0 + 36 | 0;
  $14 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$4_1 + 32 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 36 >> 2] = $14;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$0 + 8 >> 2] = $8_1;
  $8_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $8_1;
  $2_1 = HEAP32[$9_1 + 4 >> 2];
  HEAP32[$11 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$11 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[$4_1 + 20 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 + 16 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[$7_1 + 4 >> 2];
  HEAP32[$10 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$10 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[$4_1 + 36 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 + 32 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $0 + 60 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $1_1 = HEAP32[$4_1 + 52 >> 2];
  $0 = $0 + 52 | 0;
  HEAP32[$0 >> 2] = HEAP32[$4_1 + 48 >> 2];
  HEAP32[$0 + 4 >> 2] = $1_1;
  global$0 = $4_1 + 96 | 0;
  return $18_1;
 }
 
 function $1009($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = Math_fround(0), $21 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = 0;
  $2_1 = global$0 - 240 | 0;
  global$0 = $2_1;
  $16_1 = HEAPF32[$0 + 20 >> 2] < Math_fround(0.0) ^ 1 ? $16_1 : HEAPF32[$0 + 60 >> 2];
  $17_1 = $2_1 + 200 | 0;
  $4_1 = $17_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $21 = $2_1 + 196 | 0;
  HEAP32[$21 >> 2] = 1065353216;
  $19_1 = $2_1 + 216 | 0;
  $4_1 = $19_1;
  HEAP32[$4_1 >> 2] = 1065353216;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $7_1 = $2_1 + 136 | 0;
  $4_1 = $7_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $12_1 = $2_1 + 132 | 0;
  HEAP32[$12_1 >> 2] = 1065353216;
  $18_1 = $2_1 + 152 | 0;
  $4_1 = $18_1;
  HEAP32[$4_1 >> 2] = 1065353216;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $0 + 140 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $2_1 + 232 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  HEAP32[$2_1 + 180 >> 2] = 0;
  HEAP32[$2_1 + 184 >> 2] = 0;
  HEAP32[$2_1 + 176 >> 2] = 1065353216;
  HEAP32[$2_1 + 188 >> 2] = 0;
  HEAP32[$2_1 + 192 >> 2] = 0;
  HEAP32[$2_1 + 208 >> 2] = 0;
  HEAP32[$2_1 + 212 >> 2] = 0;
  HEAP32[$2_1 + 116 >> 2] = 0;
  HEAP32[$2_1 + 120 >> 2] = 0;
  HEAP32[$2_1 + 112 >> 2] = 1065353216;
  HEAP32[$2_1 + 124 >> 2] = 0;
  HEAP32[$2_1 + 128 >> 2] = 0;
  HEAP32[$2_1 + 144 >> 2] = 0;
  HEAP32[$2_1 + 148 >> 2] = 0;
  $3_1 = HEAP32[$0 + 136 >> 2];
  HEAP32[$2_1 + 224 >> 2] = HEAP32[$0 + 132 >> 2];
  HEAP32[$2_1 + 228 >> 2] = $3_1;
  $23_1 = HEAPF32[$0 + 256 >> 2];
  $6_1 = HEAPF32[$0 + 24 >> 2];
  $6_1 = $6_1 > Math_fround(0.0) ? $6_1 : Math_fround(0.0);
  HEAPF32[$0 + 152 >> 2] = Math_fround(Math_fround($16_1 * $23_1) + HEAPF32[$0 + 132 >> 2]) + Math_fround(HEAPF32[$0 + 272 >> 2] * $6_1);
  $24_1 = HEAPF32[$0 + 260 >> 2];
  HEAPF32[$0 + 156 >> 2] = Math_fround(Math_fround($16_1 * $24_1) + HEAPF32[$0 + 136 >> 2]) + Math_fround($6_1 * HEAPF32[$0 + 276 >> 2]);
  HEAP32[$0 + 164 >> 2] = 0;
  $3_1 = $0 + 160 | 0;
  $25 = HEAPF32[$0 + 264 >> 2];
  HEAPF32[$3_1 >> 2] = Math_fround(Math_fround($16_1 * $25) + HEAPF32[$4_1 >> 2]) + Math_fround($6_1 * HEAPF32[$0 + 280 >> 2]);
  $9_1 = HEAP32[$0 + 156 >> 2];
  $26_1 = HEAP32[$0 + 152 >> 2];
  HEAP32[$0 + 132 >> 2] = $26_1;
  HEAP32[$0 + 136 >> 2] = $9_1;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 >> 2] = $3_1;
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $4_1 = $2_1 + 168 | 0;
  HEAP32[$4_1 >> 2] = $3_1;
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  HEAP32[$2_1 + 160 >> 2] = $26_1;
  HEAP32[$2_1 + 164 >> 2] = $9_1;
  $10 = HEAPF32[$0 + 180 >> 2];
  $13_1 = HEAPF32[$0 + 176 >> 2];
  $8_1 = HEAPF32[$0 + 172 >> 2];
  $6_1 = HEAPF32[$0 + 168 >> 2];
  HEAP32[$2_1 + 220 >> 2] = 0;
  HEAP32[$2_1 + 204 >> 2] = 0;
  $15_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($8_1 * $8_1)) + Math_fround($13_1 * $13_1)) + Math_fround($10 * $10)));
  $20 = Math_fround($13_1 * $15_1);
  $11 = Math_fround($8_1 * $20);
  $14 = Math_fround($6_1 * $15_1);
  $22_1 = Math_fround($10 * $14);
  HEAPF32[$2_1 + 212 >> 2] = $11 + $22_1;
  HEAPF32[$17_1 >> 2] = $11 - $22_1;
  $11 = Math_fround($6_1 * $14);
  $14 = $8_1;
  $8_1 = Math_fround($8_1 * $15_1);
  $15_1 = Math_fround($14 * $8_1);
  HEAPF32[$19_1 >> 2] = Math_fround(1.0) - Math_fround($11 + $15_1);
  $13_1 = Math_fround($13_1 * $20);
  HEAPF32[$21 >> 2] = Math_fround(1.0) - Math_fround($11 + $13_1);
  HEAP32[$2_1 + 188 >> 2] = 0;
  $11 = Math_fround($6_1 * $20);
  $14 = Math_fround($10 * $8_1);
  HEAPF32[$2_1 + 208 >> 2] = $11 - $14;
  $6_1 = Math_fround($6_1 * $8_1);
  $10 = Math_fround($10 * $20);
  HEAPF32[$2_1 + 192 >> 2] = $6_1 + $10;
  HEAPF32[$2_1 + 184 >> 2] = $11 + $14;
  HEAPF32[$2_1 + 180 >> 2] = $6_1 - $10;
  HEAPF32[$2_1 + 176 >> 2] = Math_fround(1.0) - Math_fround($15_1 + $13_1);
  $10 = HEAPF32[$0 + 196 >> 2];
  $13_1 = HEAPF32[$0 + 192 >> 2];
  $8_1 = HEAPF32[$0 + 188 >> 2];
  $6_1 = HEAPF32[$0 + 184 >> 2];
  HEAP32[$2_1 + 156 >> 2] = 0;
  HEAP32[$2_1 + 140 >> 2] = 0;
  $15_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($8_1 * $8_1)) + Math_fround($13_1 * $13_1)) + Math_fround($10 * $10)));
  $20 = Math_fround($13_1 * $15_1);
  $11 = Math_fround($8_1 * $20);
  $14 = Math_fround($6_1 * $15_1);
  $22_1 = Math_fround($10 * $14);
  HEAPF32[$2_1 + 148 >> 2] = $11 + $22_1;
  HEAPF32[$7_1 >> 2] = $11 - $22_1;
  $11 = Math_fround($6_1 * $14);
  $14 = $8_1;
  $8_1 = Math_fround($8_1 * $15_1);
  $15_1 = Math_fround($14 * $8_1);
  HEAPF32[$18_1 >> 2] = Math_fround(1.0) - Math_fround($11 + $15_1);
  $13_1 = Math_fround($13_1 * $20);
  HEAPF32[$12_1 >> 2] = Math_fround(1.0) - Math_fround($11 + $13_1);
  HEAP32[$2_1 + 124 >> 2] = 0;
  $11 = Math_fround($6_1 * $20);
  $14 = Math_fround($10 * $8_1);
  HEAPF32[$2_1 + 144 >> 2] = $11 - $14;
  $6_1 = Math_fround($6_1 * $8_1);
  $10 = Math_fround($10 * $20);
  HEAPF32[$2_1 + 128 >> 2] = $6_1 + $10;
  HEAPF32[$2_1 + 120 >> 2] = $11 + $14;
  HEAPF32[$2_1 + 116 >> 2] = $6_1 - $10;
  HEAPF32[$2_1 + 112 >> 2] = Math_fround(1.0) - Math_fround($15_1 + $13_1);
  $4_1 = $2_1 + 24 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $2_1 + 32 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $2_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 100 >> 2] = 0;
  HEAPF32[$2_1 + 96 >> 2] = -$25;
  HEAPF32[$2_1 + 92 >> 2] = -$24_1;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAPF32[$2_1 + 88 >> 2] = -$23_1;
  HEAP32[$2_1 + 80 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  HEAP32[$2_1 >> 2] = 22336;
  $4_1 = HEAP32[$0 + 8 >> 2];
  HEAP32[$2_1 + 84 >> 2] = $4_1;
  HEAP32[$2_1 + 104 >> 2] = HEAP32[$0 + 48 >> 2];
  $3_1 = HEAP32[$4_1 + 188 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 12 >> 2] = HEAP32[$3_1 + 8 >> 2];
  label$2 : {
   if (HEAPU8[$0 + 250 | 0]) {
    $999($4_1, HEAP32[$0 + 12 >> 2], $2_1 + 176 | 0, $2_1 + 112 | 0, $2_1, HEAPF32[$1_1 + 56 >> 2]);
    break label$2;
   }
   $869($1_1, HEAP32[$0 + 12 >> 2], $2_1 + 176 | 0, $2_1 + 112 | 0, $2_1, HEAPF32[$1_1 + 56 >> 2]);
  }
  $9_1 = $0 + 152 | 0;
  $4_1 = $0 + 132 | 0;
  label$4 : {
   label$5 : {
    label$6 : {
     label$7 : {
      if (!(HEAPF32[$2_1 + 4 >> 2] < Math_fround(1.0))) {
       break label$7
      }
      $3_1 = HEAP32[$0 + 8 >> 2];
      if (HEAPU8[$3_1 + 204 | 0] & 4) {
       break label$7
      }
      if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $3_1, HEAP32[$2_1 + 80 >> 2])) {
       break label$7
      }
      label$8 : {
       if (!(Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 48 >> 2] * HEAPF32[$0 + 256 >> 2]) + Math_fround(HEAPF32[$2_1 + 52 >> 2] * HEAPF32[$0 + 260 >> 2])) + Math_fround(HEAPF32[$2_1 + 56 >> 2] * HEAPF32[$0 + 264 >> 2])) > Math_fround(0.0))) {
        break label$8
       }
       $8_1 = $16_1;
       $16_1 = HEAPF32[$2_1 + 4 >> 2];
       HEAPF32[$0 + 148 >> 2] = $8_1 * $16_1;
       if (HEAPU8[$0 + 288 | 0]) {
        $6_1 = Math_fround(Math_fround(1.0) - $16_1);
        HEAPF32[$0 + 132 >> 2] = Math_fround($6_1 * HEAPF32[$0 + 132 >> 2]) + Math_fround($16_1 * HEAPF32[$0 + 152 >> 2]);
        HEAPF32[$0 + 136 >> 2] = Math_fround($6_1 * HEAPF32[$0 + 136 >> 2]) + Math_fround($16_1 * HEAPF32[$0 + 156 >> 2]);
        HEAPF32[$0 + 140 >> 2] = Math_fround($6_1 * HEAPF32[$0 + 140 >> 2]) + Math_fround($16_1 * HEAPF32[$0 + 160 >> 2]);
        break label$8;
       }
       $3_1 = HEAP32[$9_1 + 4 >> 2];
       HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$4_1 + 4 >> 2] = $3_1;
       $5_1 = $9_1 + 8 | 0;
       $17_1 = HEAP32[$5_1 + 4 >> 2];
       $3_1 = $4_1 + 8 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $17_1;
      }
      $21 = $4_1 + 8 | 0;
      $19_1 = $21;
      $7_1 = HEAP32[$19_1 + 4 >> 2];
      $5_1 = HEAP32[$0 + 8 >> 2];
      $17_1 = $5_1 + 60 | 0;
      $3_1 = $17_1;
      HEAP32[$3_1 >> 2] = HEAP32[$19_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $7_1;
      $7_1 = HEAP32[$4_1 + 4 >> 2];
      $19_1 = $5_1 + 52 | 0;
      $3_1 = $19_1;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $7_1;
      $3_1 = HEAP32[$0 + 8 >> 2];
      HEAP32[$3_1 + 304 >> 2] = HEAP32[$3_1 + 304 >> 2] + 1;
      $12_1 = $5_1 + 12 | 0;
      $18_1 = HEAP32[$12_1 + 4 >> 2];
      $7_1 = $3_1 + 12 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$12_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $18_1;
      $7_1 = HEAP32[$5_1 + 8 >> 2];
      HEAP32[$3_1 + 4 >> 2] = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$3_1 + 8 >> 2] = $7_1;
      $12_1 = $5_1 + 28 | 0;
      $18_1 = HEAP32[$12_1 + 4 >> 2];
      $7_1 = $3_1 + 28 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$12_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $18_1;
      $12_1 = $5_1 + 20 | 0;
      $18_1 = HEAP32[$12_1 + 4 >> 2];
      $7_1 = $3_1 + 20 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$12_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $18_1;
      $12_1 = $5_1 + 44 | 0;
      $18_1 = HEAP32[$12_1 + 4 >> 2];
      $7_1 = $3_1 + 44 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$12_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $18_1;
      $5_1 = $5_1 + 36 | 0;
      $12_1 = HEAP32[$5_1 + 4 >> 2];
      $7_1 = $3_1 + 36 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $12_1;
      $7_1 = HEAP32[$19_1 + 4 >> 2];
      $5_1 = $3_1 + 52 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$19_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $7_1;
      $5_1 = HEAP32[$17_1 + 4 >> 2];
      $3_1 = $3_1 + 60 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$17_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $5_1;
      HEAP8[$0 + 220 | 0] = 0;
      if (!$1008($0, $1_1)) {
       break label$5
      }
      HEAP8[$0 + 220 | 0] = 1;
      if ($1008($0, $1_1)) {
       break label$6
      }
      break label$5;
     }
     HEAPF32[$0 + 148 >> 2] = $16_1;
     $0 = HEAP32[$9_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $0;
     $0 = $4_1 + 8 | 0;
     $1_1 = $9_1 + 8 | 0;
     $4_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0 + 4 >> 2] = $4_1;
     break label$4;
    }
    HEAP8[$0 + 220 | 0] = 1;
    if (!$1008($0, $1_1)) {
     break label$5
    }
    HEAP8[$0 + 220 | 0] = 1;
    if (!$1008($0, $1_1)) {
     break label$5
    }
    HEAP8[$0 + 220 | 0] = 1;
    if (!$1008($0, $1_1)) {
     break label$5
    }
    HEAP8[$0 + 220 | 0] = 1;
   }
   $3_1 = HEAP32[$0 + 8 >> 2];
   $1_1 = $3_1 + 52 | 0;
   $5_1 = $1_1;
   $17_1 = HEAP32[$5_1 + 4 >> 2];
   HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $17_1;
   $3_1 = $3_1 + 60 | 0;
   $17_1 = HEAP32[$3_1 + 4 >> 2];
   $9_1 = $9_1 + 8 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $17_1;
   $9_1 = HEAP32[$1_1 >> 2];
   $1_1 = HEAP32[$1_1 + 4 >> 2];
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$21 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$21 + 4 >> 2] = $5_1;
   HEAP32[$4_1 >> 2] = $9_1;
   HEAP32[$4_1 + 4 >> 2] = $1_1;
   if (!(HEAPF32[$0 + 24 >> 2] > Math_fround(0.0))) {
    break label$4
   }
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 148 >> 2] = HEAP32[$0 + 60 >> 2];
  }
  global$0 = $2_1 + 240 | 0;
 }
 
 function $1010($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $0 = HEAP32[$2_1 + 188 >> 2];
  $1_1 = HEAP32[$1_1 + 188 >> 2];
  if (!(HEAP32[$0 + 8 >> 2] & HEAP32[$1_1 + 4 >> 2])) {
   return 0
  }
  return (HEAP32[$1_1 + 8 >> 2] & HEAP32[$0 + 4 >> 2]) != 0 | 0;
 }
 
 function $1011($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0);
  $2_1 = Math_fround(HEAPF32[$0 + 152 >> 2] - HEAPF32[$0 + 132 >> 2]);
  $4_1 = Math_fround(HEAPF32[$0 + 156 >> 2] - HEAPF32[$0 + 136 >> 2]);
  $3_1 = Math_fround(HEAPF32[$0 + 160 >> 2] - HEAPF32[$0 + 140 >> 2]);
  $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($2_1 * $2_1) + Math_fround($4_1 * $4_1)) + Math_fround($3_1 * $3_1))));
  if (!!($8_1 > Math_fround(1.1920928955078125e-07))) {
   $10 = HEAPF32[$1_1 + 8 >> 2];
   $6_1 = HEAPF32[$1_1 >> 2];
   $11 = HEAPF32[$1_1 + 4 >> 2];
   $1_1 = $0 + 132 | 0;
   $12_1 = HEAP32[$1_1 + 4 >> 2];
   $7_1 = $0 + 152 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $12_1;
   $1_1 = $1_1 + 8 | 0;
   $12_1 = HEAP32[$1_1 + 4 >> 2];
   $7_1 = $7_1 + 8 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $12_1;
   $5_1 = $2_1;
   $2_1 = Math_fround(Math_fround(1.0) / $8_1);
   $5_1 = Math_fround($5_1 * $2_1);
   $9_1 = $5_1;
   $13_1 = Math_fround($5_1 * $6_1);
   $5_1 = Math_fround($4_1 * $2_1);
   $3_1 = Math_fround($3_1 * $2_1);
   $2_1 = Math_fround(Math_fround($13_1 + Math_fround($5_1 * $11)) + Math_fround($3_1 * $10));
   $2_1 = Math_fround($2_1 + $2_1);
   $4_1 = Math_fround($9_1 - Math_fround($6_1 * $2_1));
   $9_1 = $4_1;
   $3_1 = Math_fround($3_1 - Math_fround($10 * $2_1));
   $2_1 = Math_fround($5_1 - Math_fround($11 * $2_1));
   $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($3_1 * $3_1) + Math_fround(Math_fround($4_1 * $4_1) + Math_fround($2_1 * $2_1))))));
   $5_1 = Math_fround($9_1 * $4_1);
   $9_1 = $6_1;
   $3_1 = Math_fround($3_1 * $4_1);
   $2_1 = Math_fround($2_1 * $4_1);
   $6_1 = Math_fround(Math_fround($10 * $3_1) + Math_fround(Math_fround($6_1 * $5_1) + Math_fround($11 * $2_1)));
   HEAPF32[$0 + 152 >> 2] = Math_fround($8_1 * Math_fround($5_1 - Math_fround($9_1 * $6_1))) + HEAPF32[$0 + 152 >> 2];
   HEAPF32[$0 + 156 >> 2] = Math_fround($8_1 * Math_fround($2_1 - Math_fround($11 * $6_1))) + HEAPF32[$0 + 156 >> 2];
   HEAPF32[$0 + 160 >> 2] = Math_fround($8_1 * Math_fround($3_1 - Math_fround($10 * $6_1))) + HEAPF32[$0 + 160 >> 2];
  }
 }
 
 function $1012($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24_1 = Math_fround(0), $25 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0);
  $3_1 = global$0 - 240 | 0;
  global$0 = $3_1;
  $13_1 = $3_1 + 188 | 0;
  HEAP32[$13_1 >> 2] = 0;
  HEAP32[$13_1 + 4 >> 2] = 0;
  $13_1 = $3_1 + 200 | 0;
  HEAP32[$13_1 >> 2] = 0;
  HEAP32[$13_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 196 >> 2] = 1065353216;
  HEAP32[$3_1 + 216 >> 2] = 1065353216;
  $5_1 = HEAPF32[$2_1 >> 2];
  $6_1 = HEAPF32[$2_1 + 4 >> 2];
  $7_1 = HEAPF32[$2_1 + 8 >> 2];
  HEAP32[$0 + 164 >> 2] = 0;
  HEAPF32[$0 + 160 >> 2] = $7_1 + HEAPF32[$0 + 140 >> 2];
  HEAPF32[$0 + 156 >> 2] = $6_1 + HEAPF32[$0 + 136 >> 2];
  HEAPF32[$0 + 152 >> 2] = $5_1 + HEAPF32[$0 + 132 >> 2];
  HEAP32[$3_1 + 180 >> 2] = 0;
  HEAP32[$3_1 + 184 >> 2] = 0;
  HEAP32[$3_1 + 176 >> 2] = 1065353216;
  HEAP32[$3_1 + 208 >> 2] = 0;
  HEAP32[$3_1 + 212 >> 2] = 0;
  HEAP32[$3_1 + 236 >> 2] = 0;
  $2_1 = $3_1 + 228 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $3_1 + 220 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 112 >> 2] = 1065353216;
  $2_1 = $3_1 + 124 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 116 >> 2] = 0;
  HEAP32[$3_1 + 120 >> 2] = 0;
  HEAP32[$3_1 + 132 >> 2] = 1065353216;
  $2_1 = $3_1 + 136 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 144 >> 2] = 0;
  HEAP32[$3_1 + 148 >> 2] = 0;
  HEAP32[$3_1 + 152 >> 2] = 1065353216;
  HEAP32[$3_1 + 172 >> 2] = 0;
  $2_1 = $3_1 + 164 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $3_1 + 156 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $16_1 = $0 + 152 | 0;
  $17_1 = $0 + 132 | 0;
  $25 = $3_1 + 48 | 0;
  $18_1 = $3_1 + 16 | 0;
  $22_1 = $3_1 + 160 | 0;
  $23_1 = $3_1 + 224 | 0;
  $2_1 = -11;
  $24_1 = Math_fround(1.0);
  while (1) {
   $13_1 = $2_1 + 1 | 0;
   label$1 : {
    if ($13_1 >>> 0 < $2_1 >>> 0) {
     break label$1
    }
    $2_1 = HEAP32[$17_1 + 4 >> 2];
    HEAP32[$23_1 >> 2] = HEAP32[$17_1 >> 2];
    HEAP32[$23_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$16_1 + 4 >> 2];
    HEAP32[$22_1 >> 2] = HEAP32[$16_1 >> 2];
    HEAP32[$22_1 + 4 >> 2] = $2_1;
    $2_1 = $17_1 + 8 | 0;
    $4_1 = $2_1;
    $19_1 = HEAP32[$4_1 + 4 >> 2];
    $14 = $23_1 + 8 | 0;
    HEAP32[$14 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$14 + 4 >> 2] = $19_1;
    $14 = $16_1 + 8 | 0;
    $19_1 = HEAP32[$14 + 4 >> 2];
    $4_1 = $22_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $19_1;
    $26_1 = HEAPF32[$0 + 132 >> 2];
    $27_1 = HEAPF32[$0 + 152 >> 2];
    $28_1 = HEAPF32[$0 + 136 >> 2];
    $29_1 = HEAPF32[$0 + 156 >> 2];
    $30 = HEAPF32[$0 + 140 >> 2];
    $31_1 = HEAPF32[$0 + 160 >> 2];
    $6_1 = HEAPF32[$0 + 180 >> 2];
    $8_1 = HEAPF32[$0 + 176 >> 2];
    $5_1 = HEAPF32[$0 + 168 >> 2];
    $7_1 = HEAPF32[$0 + 172 >> 2];
    HEAP32[$3_1 + 220 >> 2] = 0;
    HEAP32[$3_1 + 204 >> 2] = 0;
    HEAP32[$3_1 + 188 >> 2] = 0;
    HEAP32[$3_1 + 156 >> 2] = 0;
    HEAP32[$3_1 + 140 >> 2] = 0;
    HEAP32[$3_1 + 124 >> 2] = 0;
    $10 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($7_1 * $7_1)) + Math_fround($8_1 * $8_1)) + Math_fround($6_1 * $6_1)));
    $9_1 = Math_fround($8_1 * $10);
    $11 = Math_fround($7_1 * $9_1);
    $15_1 = Math_fround($5_1 * $10);
    $12_1 = Math_fround($6_1 * $15_1);
    HEAPF32[$3_1 + 212 >> 2] = $11 + $12_1;
    $20 = Math_fround($5_1 * $9_1);
    $10 = Math_fround($7_1 * $10);
    $21 = Math_fround($6_1 * $10);
    HEAPF32[$3_1 + 208 >> 2] = $20 - $21;
    HEAPF32[$3_1 + 200 >> 2] = $11 - $12_1;
    $11 = Math_fround($5_1 * $10);
    $6_1 = Math_fround($6_1 * $9_1);
    HEAPF32[$3_1 + 192 >> 2] = $11 + $6_1;
    HEAPF32[$3_1 + 184 >> 2] = $20 + $21;
    HEAPF32[$3_1 + 180 >> 2] = $11 - $6_1;
    $5_1 = Math_fround($5_1 * $15_1);
    $6_1 = Math_fround($7_1 * $10);
    HEAPF32[$3_1 + 216 >> 2] = Math_fround(1.0) - Math_fround($5_1 + $6_1);
    $7_1 = $5_1;
    $5_1 = Math_fround($8_1 * $9_1);
    HEAPF32[$3_1 + 196 >> 2] = Math_fround(1.0) - Math_fround($7_1 + $5_1);
    HEAPF32[$3_1 + 176 >> 2] = Math_fround(1.0) - Math_fround($6_1 + $5_1);
    $5_1 = HEAPF32[$0 + 184 >> 2];
    $6_1 = HEAPF32[$0 + 188 >> 2];
    $8_1 = HEAPF32[$0 + 192 >> 2];
    $7_1 = HEAPF32[$0 + 196 >> 2];
    $9_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1)) + Math_fround($8_1 * $8_1)) + Math_fround($7_1 * $7_1)));
    $11 = Math_fround($6_1 * $9_1);
    $15_1 = Math_fround($5_1 * $11);
    $10 = Math_fround($8_1 * $9_1);
    $12_1 = Math_fround($7_1 * $10);
    HEAPF32[$3_1 + 116 >> 2] = $15_1 - $12_1;
    $20 = Math_fround($5_1 * $10);
    $21 = Math_fround($7_1 * $11);
    HEAPF32[$3_1 + 120 >> 2] = $20 + $21;
    HEAPF32[$3_1 + 128 >> 2] = $15_1 + $12_1;
    $15_1 = Math_fround($6_1 * $10);
    $12_1 = $7_1;
    $7_1 = Math_fround($5_1 * $9_1);
    $9_1 = Math_fround($12_1 * $7_1);
    HEAPF32[$3_1 + 136 >> 2] = $15_1 - $9_1;
    HEAPF32[$3_1 + 144 >> 2] = $20 - $21;
    HEAPF32[$3_1 + 148 >> 2] = $15_1 + $9_1;
    $6_1 = Math_fround($6_1 * $11);
    $8_1 = Math_fround($8_1 * $10);
    HEAPF32[$3_1 + 112 >> 2] = Math_fround(1.0) - Math_fround($6_1 + $8_1);
    $5_1 = Math_fround($5_1 * $7_1);
    HEAPF32[$3_1 + 132 >> 2] = Math_fround(1.0) - Math_fround($5_1 + $8_1);
    HEAPF32[$3_1 + 152 >> 2] = Math_fround(1.0) - Math_fround($5_1 + $6_1);
    $4_1 = $18_1 + 24 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    $4_1 = $18_1 + 16 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    $4_1 = $18_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    HEAP32[$18_1 >> 2] = 0;
    HEAP32[$18_1 + 4 >> 2] = 0;
    HEAP32[$3_1 + 100 >> 2] = 0;
    HEAP32[$3_1 + 104 >> 2] = 0;
    HEAPF32[$3_1 + 96 >> 2] = $30 - $31_1;
    HEAPF32[$3_1 + 92 >> 2] = $28_1 - $29_1;
    HEAPF32[$3_1 + 88 >> 2] = $26_1 - $27_1;
    HEAP32[$3_1 + 80 >> 2] = 0;
    HEAP32[$3_1 + 4 >> 2] = 1065353216;
    HEAP32[$3_1 >> 2] = 22336;
    $4_1 = HEAP32[$0 + 8 >> 2];
    HEAP32[$3_1 + 84 >> 2] = $4_1;
    $4_1 = HEAP32[$4_1 + 188 >> 2];
    $19_1 = HEAP32[$4_1 + 8 >> 2];
    HEAP32[$3_1 + 8 >> 2] = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$3_1 + 12 >> 2] = $19_1;
    $4_1 = HEAP32[$0 + 12 >> 2];
    $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 48 >> 2]]($4_1));
    $4_1 = HEAP32[$0 + 12 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 44 >> 2]]($4_1, Math_fround($5_1 + HEAPF32[$0 + 64 >> 2]));
    label$3 : {
     label$4 : {
      if (HEAPF32[$3_1 + 176 >> 2] != HEAPF32[$3_1 + 112 >> 2] | HEAPF32[$3_1 + 192 >> 2] != HEAPF32[$3_1 + 128 >> 2] | (HEAPF32[$3_1 + 208 >> 2] != HEAPF32[$3_1 + 144 >> 2] | HEAPF32[$3_1 + 180 >> 2] != HEAPF32[$3_1 + 116 >> 2])) {
       break label$4
      }
      if (HEAPF32[$3_1 + 196 >> 2] != HEAPF32[$3_1 + 132 >> 2] | HEAPF32[$3_1 + 212 >> 2] != HEAPF32[$3_1 + 148 >> 2] | (HEAPF32[$3_1 + 184 >> 2] != HEAPF32[$3_1 + 120 >> 2] | HEAPF32[$3_1 + 200 >> 2] != HEAPF32[$3_1 + 136 >> 2])) {
       break label$4
      }
      if (HEAPF32[$3_1 + 216 >> 2] != HEAPF32[$3_1 + 152 >> 2] | HEAPF32[$3_1 + 236 >> 2] != HEAPF32[$3_1 + 172 >> 2] | (HEAPF32[$3_1 + 232 >> 2] != HEAPF32[$3_1 + 168 >> 2] | HEAPF32[$3_1 + 228 >> 2] != HEAPF32[$3_1 + 164 >> 2])) {
       break label$4
      }
      if (HEAPF32[$3_1 + 224 >> 2] == HEAPF32[$3_1 + 160 >> 2]) {
       break label$3
      }
     }
     if (HEAPU8[$0 + 250 | 0]) {
      $999(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], $3_1 + 176 | 0, $3_1 + 112 | 0, $3_1, HEAPF32[$1_1 + 56 >> 2]);
      break label$3;
     }
     $869($1_1, HEAP32[$0 + 12 >> 2], $3_1 + 176 | 0, $3_1 + 112 | 0, $3_1, HEAPF32[$1_1 + 56 >> 2]);
    }
    $4_1 = HEAP32[$0 + 12 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 44 >> 2]]($4_1, $5_1);
    label$6 : {
     label$7 : {
      $5_1 = HEAPF32[$3_1 + 4 >> 2];
      if (!($5_1 < Math_fround(1.0))) {
       break label$7
      }
      $4_1 = HEAP32[$0 + 8 >> 2];
      if (HEAPU8[$4_1 + 204 | 0] & 4) {
       break label$7
      }
      if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $4_1, HEAP32[$3_1 + 80 >> 2])) {
       break label$7
      }
      $1011($0, $25);
      $6_1 = Math_fround(HEAPF32[$0 + 152 >> 2] - HEAPF32[$0 + 132 >> 2]);
      $7_1 = Math_fround(HEAPF32[$0 + 156 >> 2] - HEAPF32[$0 + 136 >> 2]);
      $8_1 = Math_fround(HEAPF32[$0 + 160 >> 2] - HEAPF32[$0 + 140 >> 2]);
      $9_1 = Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1)) + Math_fround($8_1 * $8_1));
      if (!($9_1 > Math_fround(1.1920928955078125e-07))) {
       break label$1
      }
      $12_1 = $6_1;
      $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($9_1)));
      if (!(Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $6_1) * HEAPF32[$0 + 84 >> 2]) + Math_fround(Math_fround($7_1 * $6_1) * HEAPF32[$0 + 88 >> 2])) + Math_fround(Math_fround($8_1 * $6_1) * HEAPF32[$0 + 92 >> 2])) <= Math_fround(0.0))) {
       break label$6
      }
      break label$1;
     }
     $4_1 = HEAP32[$16_1 + 4 >> 2];
     HEAP32[$17_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$17_1 + 4 >> 2] = $4_1;
     $4_1 = HEAP32[$14 + 4 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$14 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $4_1;
    }
    $2_1 = $13_1;
    $24_1 = Math_fround($24_1 - $5_1);
    if ($24_1 > Math_fround(.009999999776482582)) {
     continue
    }
   }
   break;
  };
  global$0 = $3_1 + 240 | 0;
 }
 
 function $1013($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10 = 0, $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20 = 0, $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = 0, $31_1 = 0;
  $3_1 = global$0 - 432 | 0;
  global$0 = $3_1;
  $8_1 = $0 + 160 | 0;
  $6_1 = HEAP32[$8_1 + 4 >> 2];
  $10 = $3_1 + 232 | 0;
  HEAP32[$10 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$10 + 4 >> 2] = $6_1;
  $10 = HEAP32[$0 + 156 >> 2];
  HEAP32[$3_1 + 224 >> 2] = HEAP32[$0 + 152 >> 2];
  HEAP32[$3_1 + 228 >> 2] = $10;
  $4_1 = HEAPF32[$0 + 20 >> 2];
  label$1 : {
   if ($4_1 > Math_fround(0.0)) {
    break label$1
   }
   $4_1 = Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(-$4_1) : Math_fround(0.0)) * $2_1);
   label$2 : {
    if (!($4_1 > Math_fround(0.0))) {
     break label$2
    }
    $7_1 = HEAPF32[$0 + 28 >> 2];
    if ($4_1 > $7_1 ^ 1 | (HEAPU8[$0 + 249 | 0] ? !HEAPU8[$0 + 248 | 0] : 0)) {
     break label$2
    }
    $4_1 = $7_1;
   }
   $10 = $0 + 152 | 0;
   $4_1 = Math_fround($4_1 + HEAPF32[$0 + 148 >> 2]);
   $21 = Math_fround(HEAPF32[$0 + 256 >> 2] * $4_1);
   HEAPF32[$0 + 152 >> 2] = HEAPF32[$0 + 152 >> 2] - $21;
   $8_1 = $0 + 156 | 0;
   $22_1 = Math_fround($4_1 * HEAPF32[$0 + 260 >> 2]);
   HEAPF32[$8_1 >> 2] = HEAPF32[$8_1 >> 2] - $22_1;
   $8_1 = $0 + 160 | 0;
   $15_1 = $8_1;
   $9_1 = HEAPF32[$8_1 >> 2];
   $8_1 = $0 + 264 | 0;
   $23_1 = Math_fround($4_1 * HEAPF32[$8_1 >> 2]);
   HEAPF32[$15_1 >> 2] = $9_1 - $23_1;
   $6_1 = $3_1 + 136 | 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[$6_1 + 4 >> 2] = 0;
   $6_1 = $3_1 + 144 | 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[$6_1 + 4 >> 2] = 0;
   $6_1 = $3_1 + 152 | 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[$6_1 + 4 >> 2] = 0;
   $5_1 = HEAP32[$8_1 + 4 >> 2];
   $6_1 = $3_1 + 208 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $5_1;
   HEAP32[$3_1 + 128 >> 2] = 0;
   HEAP32[$3_1 + 132 >> 2] = 0;
   $6_1 = HEAP32[$0 + 260 >> 2];
   HEAP32[$3_1 + 200 >> 2] = HEAP32[$0 + 256 >> 2];
   HEAP32[$3_1 + 204 >> 2] = $6_1;
   HEAP32[$3_1 + 192 >> 2] = 0;
   HEAP32[$3_1 + 116 >> 2] = 1065353216;
   HEAP32[$3_1 + 112 >> 2] = 22336;
   $5_1 = HEAP32[$0 + 8 >> 2];
   HEAP32[$3_1 + 196 >> 2] = $5_1;
   $19_1 = HEAP32[$0 + 48 >> 2];
   HEAP32[$3_1 + 216 >> 2] = $19_1;
   $6_1 = HEAP32[$5_1 + 188 >> 2];
   HEAP32[$3_1 + 120 >> 2] = HEAP32[$6_1 + 4 >> 2];
   HEAP32[$3_1 + 124 >> 2] = HEAP32[$6_1 + 8 >> 2];
   $11 = $3_1 + 24 | 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$11 + 4 >> 2] = 0;
   $11 = $3_1 + 32 | 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$11 + 4 >> 2] = 0;
   $11 = $3_1 + 40 | 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$11 + 4 >> 2] = 0;
   $24_1 = HEAP32[$8_1 + 4 >> 2];
   $11 = $3_1 + 96 | 0;
   HEAP32[$11 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$11 + 4 >> 2] = $24_1;
   HEAP32[$3_1 + 80 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 1065353216;
   HEAP32[$3_1 + 16 >> 2] = 0;
   HEAP32[$3_1 + 20 >> 2] = 0;
   HEAP32[$3_1 + 84 >> 2] = $5_1;
   $8_1 = HEAP32[$0 + 260 >> 2];
   HEAP32[$3_1 + 88 >> 2] = HEAP32[$0 + 256 >> 2];
   HEAP32[$3_1 + 92 >> 2] = $8_1;
   HEAP32[$3_1 >> 2] = 22336;
   HEAP32[$3_1 + 104 >> 2] = $19_1;
   $8_1 = HEAP32[$6_1 + 8 >> 2];
   HEAP32[$3_1 + 8 >> 2] = HEAP32[$6_1 + 4 >> 2];
   HEAP32[$3_1 + 12 >> 2] = $8_1;
   $8_1 = $0 + 132 | 0;
   $19_1 = $3_1 + 352 | 0;
   $11 = $3_1 + 416 | 0;
   $24_1 = $3_1 + 264 | 0;
   $26_1 = $3_1 + 240 | 4;
   $27_1 = $3_1 + 328 | 0;
   $25 = $3_1 + 284 | 0;
   $30 = $25 + 16 | 0;
   $6_1 = 0;
   while (1) {
    HEAP32[$27_1 >> 2] = 0;
    HEAP32[$27_1 + 4 >> 2] = 0;
    HEAP32[$26_1 >> 2] = 0;
    HEAP32[$26_1 + 4 >> 2] = 0;
    HEAP32[$24_1 >> 2] = 0;
    HEAP32[$24_1 + 4 >> 2] = 0;
    HEAP32[$25 >> 2] = 0;
    HEAP32[$25 + 4 >> 2] = 0;
    $5_1 = $27_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $26_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $24_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $25 + 8 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$30 >> 2] = 0;
    $5_1 = HEAP32[$8_1 + 4 >> 2];
    HEAP32[$11 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$11 + 4 >> 2] = $5_1;
    $20 = $8_1 + 8 | 0;
    $15_1 = HEAP32[$20 + 4 >> 2];
    $5_1 = $11 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $15_1;
    HEAP32[$3_1 + 324 >> 2] = 1065353216;
    HEAP32[$3_1 + 316 >> 2] = 0;
    HEAP32[$3_1 + 320 >> 2] = 0;
    HEAP32[$3_1 + 344 >> 2] = 1065353216;
    HEAP32[$3_1 + 348 >> 2] = 0;
    HEAP32[$3_1 + 240 >> 2] = 1065353216;
    HEAP32[$3_1 + 260 >> 2] = 1065353216;
    HEAP32[$3_1 + 280 >> 2] = 1065353216;
    $20 = $10 + 8 | 0;
    $15_1 = $20;
    $31_1 = HEAP32[$15_1 + 4 >> 2];
    $5_1 = $19_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$15_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $31_1;
    $5_1 = HEAP32[$10 + 4 >> 2];
    HEAP32[$19_1 >> 2] = HEAP32[$10 >> 2];
    HEAP32[$19_1 + 4 >> 2] = $5_1;
    HEAP32[$3_1 + 412 >> 2] = 0;
    HEAP32[$3_1 + 396 >> 2] = 0;
    HEAP32[$3_1 + 380 >> 2] = 0;
    $4_1 = HEAPF32[$0 + 168 >> 2];
    $7_1 = HEAPF32[$0 + 172 >> 2];
    $12_1 = HEAPF32[$0 + 176 >> 2];
    $9_1 = HEAPF32[$0 + 180 >> 2];
    $14 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($7_1 * $7_1)) + Math_fround($12_1 * $12_1)) + Math_fround($9_1 * $9_1)));
    $18_1 = Math_fround($7_1 * $14);
    $13_1 = Math_fround($4_1 * $18_1);
    $17_1 = Math_fround($12_1 * $14);
    $16_1 = Math_fround($9_1 * $17_1);
    HEAPF32[$3_1 + 372 >> 2] = $13_1 - $16_1;
    $28_1 = Math_fround($4_1 * $17_1);
    $29_1 = Math_fround($9_1 * $18_1);
    HEAPF32[$3_1 + 376 >> 2] = $28_1 + $29_1;
    HEAPF32[$3_1 + 384 >> 2] = $13_1 + $16_1;
    $13_1 = Math_fround($7_1 * $17_1);
    $16_1 = $9_1;
    $9_1 = Math_fround($4_1 * $14);
    $14 = Math_fround($16_1 * $9_1);
    HEAPF32[$3_1 + 392 >> 2] = $13_1 - $14;
    HEAPF32[$3_1 + 400 >> 2] = $28_1 - $29_1;
    HEAPF32[$3_1 + 404 >> 2] = $13_1 + $14;
    $7_1 = Math_fround($7_1 * $18_1);
    $12_1 = Math_fround($12_1 * $17_1);
    HEAPF32[$3_1 + 368 >> 2] = Math_fround(1.0) - Math_fround($7_1 + $12_1);
    $4_1 = Math_fround($4_1 * $9_1);
    HEAPF32[$3_1 + 388 >> 2] = Math_fround(1.0) - Math_fround($4_1 + $12_1);
    HEAPF32[$3_1 + 408 >> 2] = Math_fround(1.0) - Math_fround($4_1 + $7_1);
    HEAP32[$3_1 + 316 >> 2] = 0;
    HEAP32[$3_1 + 332 >> 2] = 0;
    HEAP32[$3_1 + 348 >> 2] = 0;
    $4_1 = HEAPF32[$0 + 184 >> 2];
    $7_1 = HEAPF32[$0 + 188 >> 2];
    $12_1 = HEAPF32[$0 + 192 >> 2];
    $9_1 = HEAPF32[$0 + 196 >> 2];
    $14 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($7_1 * $7_1)) + Math_fround($12_1 * $12_1)) + Math_fround($9_1 * $9_1)));
    $18_1 = Math_fround($7_1 * $14);
    $13_1 = Math_fround($4_1 * $18_1);
    $17_1 = Math_fround($12_1 * $14);
    $16_1 = Math_fround($9_1 * $17_1);
    HEAPF32[$3_1 + 320 >> 2] = $13_1 + $16_1;
    HEAPF32[$3_1 + 308 >> 2] = $13_1 - $16_1;
    $13_1 = Math_fround($4_1 * $17_1);
    $16_1 = Math_fround($9_1 * $18_1);
    HEAPF32[$3_1 + 336 >> 2] = $13_1 - $16_1;
    HEAPF32[$3_1 + 312 >> 2] = $13_1 + $16_1;
    $13_1 = Math_fround($7_1 * $17_1);
    $16_1 = $9_1;
    $9_1 = Math_fround($4_1 * $14);
    $14 = Math_fround($16_1 * $9_1);
    HEAPF32[$3_1 + 340 >> 2] = $13_1 + $14;
    HEAPF32[$3_1 + 328 >> 2] = $13_1 - $14;
    $7_1 = Math_fround($7_1 * $18_1);
    $12_1 = Math_fround($12_1 * $17_1);
    HEAPF32[$3_1 + 304 >> 2] = Math_fround(1.0) - Math_fround($7_1 + $12_1);
    $4_1 = Math_fround($4_1 * $9_1);
    HEAPF32[$3_1 + 344 >> 2] = Math_fround(1.0) - Math_fround($4_1 + $7_1);
    HEAPF32[$3_1 + 324 >> 2] = Math_fround(1.0) - Math_fround($4_1 + $12_1);
    $4_1 = HEAPF32[$0 + 152 >> 2];
    $7_1 = HEAPF32[$0 + 156 >> 2];
    $9_1 = HEAPF32[$0 + 160 >> 2];
    HEAP32[$3_1 + 300 >> 2] = 0;
    HEAPF32[$3_1 + 296 >> 2] = $9_1 - $23_1;
    HEAPF32[$3_1 + 292 >> 2] = $7_1 - $22_1;
    HEAPF32[$3_1 + 288 >> 2] = $4_1 - $21;
    label$5 : {
     if (HEAPU8[$0 + 250 | 0]) {
      $999(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], $3_1 + 368 | 0, $3_1 + 304 | 0, $3_1 + 112 | 0, HEAPF32[$1_1 + 56 >> 2]);
      if (HEAPF32[$3_1 + 116 >> 2] < Math_fround(1.0)) {
       break label$5
      }
      $5_1 = HEAP32[$0 + 8 >> 2];
      if (HEAPU8[$5_1 + 204 | 0] & 4) {
       break label$5
      }
      $999($5_1, HEAP32[$0 + 12 >> 2], $3_1 + 368 | 0, $3_1 + 240 | 0, $3_1, HEAPF32[$1_1 + 56 >> 2]);
      break label$5;
     }
     $869($1_1, HEAP32[$0 + 12 >> 2], $3_1 + 368 | 0, $3_1 + 304 | 0, $3_1 + 112 | 0, HEAPF32[$1_1 + 56 >> 2]);
     if (HEAPU8[HEAP32[$0 + 8 >> 2] + 204 | 0] & 4 | HEAPF32[$3_1 + 116 >> 2] < Math_fround(1.0)) {
      break label$5
     }
     $869($1_1, HEAP32[$0 + 12 >> 2], $3_1 + 368 | 0, $3_1 + 240 | 0, $3_1, HEAPF32[$1_1 + 56 >> 2]);
    }
    $4_1 = HEAPF32[$0 + 20 >> 2];
    $4_1 = $4_1 < Math_fround(0.0) ? Math_fround(-$4_1) : Math_fround(0.0);
    label$7 : {
     if (HEAPU8[$0 + 290 | 0]) {
      $5_1 = 0;
      if (HEAPF32[$3_1 + 4 >> 2] < Math_fround(1.0) ^ 1 ? !(HEAPF32[$3_1 + 116 >> 2] < Math_fround(1.0)) : 0) {
       break label$7
      }
      $15_1 = HEAP32[$0 + 8 >> 2];
      if (HEAPU8[$15_1 + 204 | 0] & 4) {
       break label$7
      }
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $15_1, HEAP32[$3_1 + 192 >> 2]) | 0;
      break label$7;
     }
     $5_1 = 0;
     if (!(HEAPF32[$3_1 + 4 >> 2] < Math_fround(1.0))) {
      break label$7
     }
     $15_1 = HEAP32[$0 + 8 >> 2];
     if (HEAPU8[$15_1 + 204 | 0] & 4) {
      break label$7
     }
     $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $15_1, HEAP32[$3_1 + 80 >> 2]) | 0;
    }
    $7_1 = Math_fround($4_1 * $2_1);
    $4_1 = Math_fround(0.0);
    label$11 : {
     label$12 : {
      $4_1 = HEAPF32[$0 + 20 >> 2] < Math_fround(0.0) ^ 1 ? $4_1 : HEAPF32[$0 + 60 >> 2];
      if (!(($7_1 > Math_fround(0.0) ^ -1 | $7_1 < $4_1 ^ -1 | $5_1 ^ -1 | $6_1) & 1)) {
       if (HEAPU8[$0 + 248 | 0] | !HEAPU8[$0 + 249 | 0]) {
        break label$12
       }
       $6_1 = 0;
      }
      $1_1 = HEAP32[$0 + 8 >> 2];
      label$14 : {
       if (!(HEAPU8[$1_1 + 204 | 0] & 4 | HEAPF32[$3_1 + 116 >> 2] < Math_fround(1.0) ^ 1)) {
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $1_1, HEAP32[$3_1 + 192 >> 2]) | $6_1) & 1) {
         break label$14
        }
        break label$11;
       }
       if (!$6_1) {
        break label$11
       }
      }
      $2_1 = HEAPF32[$0 + 136 >> 2];
      if (HEAPU8[$0 + 290 | 0]) {
       $4_1 = HEAPU8[$0 + 289 | 0] ? HEAPF32[$3_1 + 116 >> 2] : Math_fround(Math_fround($2_1 - HEAPF32[$3_1 + 180 >> 2]) * Math_fround(.5))
      } else {
       $4_1 = HEAPF32[$3_1 + 116 >> 2]
      }
      HEAP8[$0 + 289 | 0] = 0;
      HEAP8[$0 + 249 | 0] = 0;
      HEAP32[$0 + 20 >> 2] = 0;
      HEAP32[$0 + 24 >> 2] = 0;
      $7_1 = Math_fround(Math_fround(1.0) - $4_1);
      HEAPF32[$0 + 132 >> 2] = Math_fround($7_1 * HEAPF32[$0 + 132 >> 2]) + Math_fround($4_1 * HEAPF32[$0 + 152 >> 2]);
      HEAPF32[$0 + 136 >> 2] = Math_fround($2_1 * $7_1) + Math_fround($4_1 * HEAPF32[$0 + 156 >> 2]);
      $1_1 = $0 + 140 | 0;
      HEAPF32[$1_1 >> 2] = Math_fround($7_1 * HEAPF32[$1_1 >> 2]) + Math_fround($4_1 * HEAPF32[$0 + 160 >> 2]);
      break label$1;
     }
     $6_1 = HEAP32[$3_1 + 228 >> 2];
     HEAP32[$10 >> 2] = HEAP32[$3_1 + 224 >> 2];
     HEAP32[$10 + 4 >> 2] = $6_1;
     $6_1 = $3_1 + 232 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$20 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$20 + 4 >> 2] = $5_1;
     $4_1 = Math_fround($4_1 + HEAPF32[$0 + 148 >> 2]);
     $21 = Math_fround(HEAPF32[$0 + 256 >> 2] * $4_1);
     HEAPF32[$0 + 152 >> 2] = HEAPF32[$0 + 152 >> 2] - $21;
     $22_1 = Math_fround($4_1 * HEAPF32[$0 + 260 >> 2]);
     HEAPF32[$0 + 156 >> 2] = HEAPF32[$0 + 156 >> 2] - $22_1;
     $23_1 = Math_fround($4_1 * HEAPF32[$0 + 264 >> 2]);
     HEAPF32[$0 + 160 >> 2] = HEAPF32[$0 + 160 >> 2] - $23_1;
     $6_1 = 1;
     continue;
    }
    break;
   };
   HEAP8[$0 + 289 | 0] = 1;
   label$18 : {
    if (!HEAPU8[$0 + 290 | 0]) {
     break label$18
    }
    $4_1 = HEAPF32[$0 + 20 >> 2];
    $4_1 = Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(-$4_1) : Math_fround(0.0)) * $2_1);
    $2_1 = HEAPF32[$0 + 28 >> 2];
    if ($4_1 > $2_1 ^ 1 | (HEAPU8[$0 + 249 | 0] ? !HEAPU8[$0 + 248 | 0] : 0)) {
     break label$18
    }
    $2_1 = Math_fround($2_1 + HEAPF32[$0 + 148 >> 2]);
    HEAPF32[$0 + 160 >> 2] = Math_fround($23_1 + HEAPF32[$0 + 160 >> 2]) - Math_fround($2_1 * HEAPF32[$0 + 264 >> 2]);
    HEAPF32[$0 + 156 >> 2] = Math_fround($22_1 + HEAPF32[$0 + 156 >> 2]) - Math_fround($2_1 * HEAPF32[$0 + 260 >> 2]);
    HEAPF32[$0 + 152 >> 2] = Math_fround($21 + HEAPF32[$0 + 152 >> 2]) - Math_fround(HEAPF32[$0 + 256 >> 2] * $2_1);
   }
   $0 = HEAP32[$10 + 4 >> 2];
   HEAP32[$8_1 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $0;
   $1_1 = $10 + 8 | 0;
   $10 = HEAP32[$1_1 + 4 >> 2];
   $0 = $8_1 + 8 | 0;
   HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $10;
  }
  global$0 = $3_1 + 432 | 0;
 }
 
 function $1014($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0;
  HEAP8[$0 + 251 | 0] = 1;
  $6_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 68 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 72 >> 2] = $6_1;
  $1_1 = $1_1 + 8 | 0;
  $7_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = $0 + 76 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $7_1;
  $2_1 = HEAPF32[$0 + 68 >> 2];
  $3_1 = HEAPF32[$0 + 72 >> 2];
  $4_1 = HEAPF32[$6_1 >> 2];
  $5_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($2_1 * $2_1) + Math_fround($3_1 * $3_1)) + Math_fround($4_1 * $4_1))));
  label$1 : {
   if (!($5_1 > Math_fround(1.1920928955078125e-07))) {
    $2_1 = Math_fround(0.0);
    $3_1 = Math_fround(0.0);
    $4_1 = Math_fround(0.0);
    $1_1 = 0;
    break label$1;
   }
   $5_1 = Math_fround(Math_fround(1.0) / $5_1);
   $4_1 = Math_fround($4_1 * $5_1);
   $3_1 = Math_fround($3_1 * $5_1);
   $2_1 = Math_fround($2_1 * $5_1);
   $1_1 = HEAP32[$0 + 80 >> 2];
  }
  HEAPF32[$0 + 84 >> 2] = $2_1;
  HEAP32[$0 + 96 >> 2] = $1_1;
  HEAPF32[$0 + 92 >> 2] = $4_1;
  HEAPF32[$0 + 88 >> 2] = $3_1;
 }
 
 function $1015($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0;
  HEAP8[$0 + 251 | 0] = 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 68 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 72 >> 2] = $3_1;
  $1_1 = $1_1 + 8 | 0;
  $9_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $0 + 76 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $9_1;
  $5_1 = HEAPF32[$0 + 68 >> 2];
  $6_1 = HEAPF32[$0 + 72 >> 2];
  $7_1 = HEAPF32[$3_1 >> 2];
  $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1))));
  if (!!($8_1 > Math_fround(1.1920928955078125e-07))) {
   $4_1 = Math_fround(Math_fround(1.0) / $8_1);
   $10 = Math_fround($7_1 * $4_1);
   $11 = Math_fround($6_1 * $4_1);
   $4_1 = Math_fround($5_1 * $4_1);
   $12_1 = HEAP32[$0 + 80 >> 2];
  }
  HEAPF32[$0 + 84 >> 2] = $4_1;
  HEAP32[$0 + 96 >> 2] = $12_1;
  HEAPF32[$0 + 92 >> 2] = $10;
  HEAPF32[$0 + 88 >> 2] = $11;
  HEAPF32[$0 + 252 >> 2] = HEAPF32[$0 + 252 >> 2] + $2_1;
 }
 
 function $1016($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 100 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 104 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 108 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $1017($0) {
  $0 = $0 | 0;
  return $0 + 100 | 0;
 }
 
 function $1018($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0);
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 68 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 72 >> 2] = $2_1;
  $10 = $1_1 + 8 | 0;
  $14 = HEAP32[$10 + 4 >> 2];
  $2_1 = $0 + 76 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $14;
  $3_1 = HEAPF32[$0 + 68 >> 2];
  $6_1 = HEAPF32[$0 + 72 >> 2];
  $7_1 = HEAPF32[$2_1 >> 2];
  $11 = Math_fround(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1));
  label$1 : {
   if (!!($11 > Math_fround(0.0))) {
    $8_1 = HEAPF32[$1_1 >> 2];
    $4_1 = HEAPF32[$1_1 + 4 >> 2];
    $9_1 = HEAPF32[$1_1 + 8 >> 2];
    $5_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($4_1 * $4_1)) + Math_fround($9_1 * $9_1)))));
    $12_1 = HEAPF32[$0 + 264 >> 2];
    $15_1 = Math_fround($12_1 * Math_fround($9_1 * $5_1));
    $9_1 = HEAPF32[$0 + 256 >> 2];
    $13_1 = HEAPF32[$0 + 260 >> 2];
    $5_1 = Math_fround($15_1 + Math_fround(Math_fround($9_1 * Math_fround($8_1 * $5_1)) + Math_fround($13_1 * Math_fround($4_1 * $5_1))));
    if ($5_1 == Math_fround(0.0)) {
     break label$1
    }
    $4_1 = $7_1;
    $7_1 = Math_fround(Math_fround(Math_sqrt($11)) * $493(Math_fround(Math_fround(1.5707963705062866) - $791(Math_fround(Math_min(Math_fround(Math_max($5_1, Math_fround(-1.0))), Math_fround(1.0)))))));
    $8_1 = Math_fround($12_1 * $7_1);
    HEAPF32[$0 + 76 >> 2] = $4_1 - $8_1;
    $4_1 = $6_1;
    $6_1 = Math_fround($13_1 * $7_1);
    HEAPF32[$0 + 72 >> 2] = $4_1 - $6_1;
    $4_1 = $3_1;
    $3_1 = Math_fround($9_1 * $7_1);
    HEAPF32[$0 + 68 >> 2] = $4_1 - $3_1;
    $3_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($8_1 * $8_1) + Math_fround(Math_fround($3_1 * $3_1) + Math_fround($6_1 * $6_1)))));
    HEAPF32[$0 + 20 >> 2] = $5_1 < Math_fround(0.0) ? Math_fround(-$3_1) : $3_1;
    if (!($5_1 > Math_fround(0.0))) {
     break label$1
    }
    HEAP8[$0 + 249 | 0] = 1;
    $1_1 = HEAP32[$0 + 8 >> 2];
    $2_1 = $1_1 + 52 | 0;
    $10 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$0 + 116 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$0 + 120 >> 2] = $10;
    $1_1 = $1_1 + 60 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0 = $0 + 124 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0 + 4 >> 2] = $2_1;
    return;
   }
   HEAP32[$0 + 20 >> 2] = 0;
  }
 }
 
 function $1019($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0);
  HEAP32[$0 + 12 >> 2] = 0;
  $2_1 = HEAPF32[$1_1 + 20 >> 2];
  HEAPF32[$0 >> 2] = Math_fround(HEAPF32[$1_1 + 256 >> 2] * $2_1) + HEAPF32[$1_1 + 68 >> 2];
  HEAPF32[$0 + 8 >> 2] = Math_fround($2_1 * HEAPF32[$1_1 + 264 >> 2]) + HEAPF32[$1_1 + 76 >> 2];
  HEAPF32[$0 + 4 >> 2] = Math_fround($2_1 * HEAPF32[$1_1 + 260 >> 2]) + HEAPF32[$1_1 + 72 >> 2];
 }
 
 function $1020($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  $2_1 = $0 + 76 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0 + 252 >> 2] = 0;
  HEAP16[$0 + 248 >> 1] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  $0 = HEAP32[HEAP32[$0 + 8 >> 2] + 344 >> 2];
  if (HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) + 4 >> 2] >= 1) {
   while (1) {
    ((((wasm2js_i32$1 = $0, wasm2js_i32$2 = HEAP32[HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) + 12 >> 2] >> 2]), wasm2js_i32$3 = HEAP32[HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) + 12 >> 2] + 4 >> 2]), wasm2js_i32$4 = HEAP32[$1_1 + 24 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 12 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0) | 0;
    if (HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) + 4 >> 2] > 0) {
     continue
    }
    break;
   }
  }
 }
 
 function $1021($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$3_1 >> 2];
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $5_1 = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = HEAP32[$0 + 8 >> 2];
  $2_1 = $0 + 44 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0 + 36 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 1065353216;
  $2_1 = $0 + 28 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0 + 16 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1065353216;
  $2_1 = $0 + 8 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0 + 60 | 0;
  HEAP32[$2_1 >> 2] = $4_1;
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $3_1 = $0 + 52 | 0;
  HEAP32[$3_1 >> 2] = $5_1;
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 }
 
 function $1022($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $4_1 = HEAP32[$0 + 8 >> 2];
  $2_1 = $4_1 + 52 | 0;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0 + 132 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 136 >> 2] = $5_1;
  $3_1 = $4_1 + 60 | 0;
  $6_1 = HEAP32[$3_1 + 4 >> 2];
  $5_1 = $0 + 140 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $6_1;
  $5_1 = HEAP32[$2_1 >> 2];
  $2_1 = HEAP32[$2_1 + 4 >> 2];
  $6_1 = HEAP32[$3_1 + 4 >> 2];
  $7_1 = $0 + 160 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $6_1;
  HEAP32[$0 + 152 >> 2] = $5_1;
  HEAP32[$0 + 156 >> 2] = $2_1;
  $1078($4_1 + 4 | 0, $1_1);
  $3_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $0 + 176 | 0;
  $2_1 = $4_1;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 168 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 172 >> 2] = $2_1;
  $3_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $0 + 192 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $4_1 = HEAP32[$0 + 172 >> 2];
  HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 168 >> 2];
  HEAP32[$0 + 188 >> 2] = $4_1;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1023($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  $7_1 = HEAPF32[$0 + 100 >> 2];
  $9_1 = HEAPF32[$0 + 104 >> 2];
  $12_1 = HEAPF32[$0 + 108 >> 2];
  $10 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($9_1 * $9_1)) + Math_fround($12_1 * $12_1));
  if (!!($10 > Math_fround(0.0))) {
   $10 = $790(Math_fround(Math_fround(1.0) - HEAPF32[$0 + 244 >> 2]), $2_1);
   $12_1 = Math_fround($12_1 * $10);
   HEAPF32[$0 + 108 >> 2] = $12_1;
   $9_1 = Math_fround($9_1 * $10);
   HEAPF32[$0 + 104 >> 2] = $9_1;
   $7_1 = Math_fround($7_1 * $10);
   HEAPF32[$0 + 100 >> 2] = $7_1;
   $10 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($9_1 * $9_1)) + Math_fround($12_1 * $12_1));
  }
  if (!!($10 > Math_fround(0.0))) {
   $3_1 = HEAP32[$0 + 8 >> 2];
   $5_1 = $3_1 + 12 | 0;
   $8_1 = HEAP32[$5_1 >> 2];
   $15_1 = HEAP32[$5_1 + 4 >> 2];
   $11 = HEAP32[$3_1 + 4 >> 2];
   $16_1 = HEAP32[$3_1 + 8 >> 2];
   $21 = $3_1 + 28 | 0;
   $23_1 = HEAP32[$21 + 4 >> 2];
   $5_1 = $6_1 + 40 | 0;
   $4_1 = $5_1;
   HEAP32[$4_1 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $23_1;
   $4_1 = $6_1 + 24 | 0;
   HEAP32[$4_1 >> 2] = $8_1;
   HEAP32[$4_1 + 4 >> 2] = $15_1;
   $8_1 = $3_1 + 36 | 0;
   $21 = HEAP32[$8_1 >> 2];
   $23_1 = HEAP32[$8_1 + 4 >> 2];
   $8_1 = $3_1 + 20 | 0;
   $25 = HEAP32[$8_1 >> 2];
   $26_1 = HEAP32[$8_1 + 4 >> 2];
   $8_1 = $3_1 + 44 | 0;
   $27_1 = HEAP32[$8_1 >> 2];
   $28_1 = HEAP32[$8_1 + 4 >> 2];
   $24_1 = $3_1 + 60 | 0;
   $29_1 = HEAP32[$24_1 + 4 >> 2];
   $15_1 = $6_1 + 72 | 0;
   $8_1 = $15_1;
   HEAP32[$8_1 >> 2] = HEAP32[$24_1 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $29_1;
   $8_1 = $6_1 + 56 | 0;
   HEAP32[$8_1 >> 2] = $27_1;
   HEAP32[$8_1 + 4 >> 2] = $28_1;
   HEAP32[$6_1 + 16 >> 2] = $11;
   HEAP32[$6_1 + 20 >> 2] = $16_1;
   HEAP32[$6_1 + 32 >> 2] = $25;
   HEAP32[$6_1 + 36 >> 2] = $26_1;
   $3_1 = $3_1 + 52 | 0;
   $11 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$6_1 + 64 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$6_1 + 68 >> 2] = $11;
   HEAP32[$6_1 + 48 >> 2] = $21;
   HEAP32[$6_1 + 52 >> 2] = $23_1;
   $14 = Math_fround(Math_sqrt($10));
   $17_1 = Math_fround(Math_fround($14 * $2_1) * Math_fround(.5));
   $18_1 = $493($17_1);
   $1078($6_1 + 16 | 0, $6_1);
   $10 = HEAPF32[$6_1 + 12 >> 2];
   $19_1 = HEAPF32[$6_1 >> 2];
   $17_1 = $494($17_1);
   $13_1 = $7_1;
   $7_1 = Math_fround(Math_fround(1.0) / $14);
   $14 = Math_fround($13_1 * $7_1);
   $13_1 = Math_fround($12_1 * $7_1);
   $7_1 = Math_fround($9_1 * $7_1);
   $9_1 = Math_fround($18_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($13_1 * $13_1) + Math_fround(Math_fround($14 * $14) + Math_fround($7_1 * $7_1))))));
   $12_1 = Math_fround($14 * $9_1);
   $14 = Math_fround($7_1 * $9_1);
   $18_1 = HEAPF32[$6_1 + 8 >> 2];
   $13_1 = Math_fround($13_1 * $9_1);
   $20 = HEAPF32[$6_1 + 4 >> 2];
   $7_1 = Math_fround(Math_fround(Math_fround(Math_fround($19_1 * $17_1) + Math_fround($10 * $12_1)) + Math_fround($14 * $18_1)) - Math_fround($13_1 * $20));
   $9_1 = Math_fround(Math_fround(Math_fround(Math_fround($17_1 * $10) - Math_fround($12_1 * $19_1)) - Math_fround($14 * $20)) - Math_fround($13_1 * $18_1));
   $22_1 = Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $10) + Math_fround($17_1 * $18_1)) + Math_fround($12_1 * $20)) - Math_fround($14 * $19_1));
   $12_1 = Math_fround(Math_fround(Math_fround($13_1 * $19_1) + Math_fround(Math_fround($14 * $10) + Math_fround($17_1 * $20))) - Math_fround($12_1 * $18_1));
   $10 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround($9_1 * $9_1) + Math_fround(Math_fround($22_1 * $22_1) + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($12_1 * $12_1)))));
   $19_1 = Math_fround($22_1 * $10);
   $14 = Math_fround($7_1 * $19_1);
   $17_1 = Math_fround($12_1 * $10);
   $18_1 = Math_fround($9_1 * $17_1);
   HEAPF32[$4_1 >> 2] = $14 + $18_1;
   HEAP32[$6_1 + 60 >> 2] = 0;
   HEAP32[$6_1 + 44 >> 2] = 0;
   $13_1 = Math_fround($12_1 * $19_1);
   $10 = Math_fround($7_1 * $10);
   $20 = Math_fround($9_1 * $10);
   HEAPF32[$6_1 + 52 >> 2] = $13_1 + $20;
   HEAPF32[$5_1 >> 2] = $13_1 - $20;
   $10 = Math_fround($7_1 * $10);
   $12_1 = Math_fround($12_1 * $17_1);
   HEAPF32[$8_1 >> 2] = Math_fround(1.0) - Math_fround($10 + $12_1);
   $13_1 = $10;
   $10 = Math_fround($22_1 * $19_1);
   HEAPF32[$6_1 + 36 >> 2] = Math_fround(1.0) - Math_fround($13_1 + $10);
   HEAP32[$6_1 + 28 >> 2] = 0;
   HEAPF32[$6_1 + 48 >> 2] = $14 - $18_1;
   $7_1 = Math_fround($7_1 * $17_1);
   $9_1 = Math_fround($9_1 * $19_1);
   HEAPF32[$6_1 + 32 >> 2] = $7_1 + $9_1;
   HEAPF32[$6_1 + 20 >> 2] = $7_1 - $9_1;
   $16_1 = HEAP32[$4_1 + 4 >> 2];
   $3_1 = HEAP32[$0 + 8 >> 2];
   $11 = $3_1 + 12 | 0;
   HEAP32[$11 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$11 + 4 >> 2] = $16_1;
   HEAPF32[$6_1 + 16 >> 2] = Math_fround(1.0) - Math_fround($12_1 + $10);
   $4_1 = HEAP32[$6_1 + 20 >> 2];
   HEAP32[$3_1 + 4 >> 2] = HEAP32[$6_1 + 16 >> 2];
   HEAP32[$3_1 + 8 >> 2] = $4_1;
   $11 = HEAP32[$6_1 + 36 >> 2];
   $4_1 = $3_1 + 20 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 + 32 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $11;
   $11 = HEAP32[$5_1 + 4 >> 2];
   $4_1 = $3_1 + 28 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $11;
   HEAP32[$3_1 + 304 >> 2] = HEAP32[$3_1 + 304 >> 2] + 1;
   $4_1 = HEAP32[$6_1 + 52 >> 2];
   $5_1 = $3_1 + 36 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 + 48 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $4_1;
   $4_1 = HEAP32[$8_1 + 4 >> 2];
   $5_1 = $3_1 + 44 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $4_1;
   $4_1 = HEAP32[$15_1 + 4 >> 2];
   $5_1 = $3_1 + 60 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$15_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $4_1;
   $5_1 = HEAP32[$6_1 + 68 >> 2];
   $3_1 = $3_1 + 52 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$6_1 + 64 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $5_1;
   $3_1 = HEAP32[$0 + 8 >> 2];
   $5_1 = $3_1 + 52 | 0;
   $4_1 = $5_1;
   $8_1 = HEAP32[$4_1 + 4 >> 2];
   HEAP32[$0 + 132 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0 + 136 >> 2] = $8_1;
   $4_1 = $3_1 + 60 | 0;
   $11 = HEAP32[$4_1 + 4 >> 2];
   $8_1 = $0 + 140 | 0;
   HEAP32[$8_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $11;
   $8_1 = HEAP32[$5_1 >> 2];
   $5_1 = HEAP32[$5_1 + 4 >> 2];
   $11 = HEAP32[$4_1 + 4 >> 2];
   $15_1 = $0 + 160 | 0;
   HEAP32[$15_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$15_1 + 4 >> 2] = $11;
   HEAP32[$0 + 152 >> 2] = $8_1;
   HEAP32[$0 + 156 >> 2] = $5_1;
   $1078($3_1 + 4 | 0, $6_1);
   $4_1 = $6_1 + 8 | 0;
   $8_1 = HEAP32[$4_1 + 4 >> 2];
   $3_1 = $0 + 176 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $8_1;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   HEAP32[$0 + 168 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$0 + 172 >> 2] = $5_1;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $5_1 = $0 + 192 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $4_1;
   $3_1 = HEAP32[$0 + 172 >> 2];
   HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 168 >> 2];
   HEAP32[$0 + 188 >> 2] = $3_1;
  }
  label$3 : {
   if (HEAPF32[$0 + 252 >> 2] <= Math_fround(0.0) ? !HEAPU8[$0 + 251 | 0] : 0) {
    break label$3
   }
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0) | 0), HEAP8[wasm2js_i32$0 + 248 | 0] = wasm2js_i32$1;
   $9_1 = HEAPF32[$0 + 72 >> 2];
   $12_1 = HEAPF32[$0 + 68 >> 2];
   $10 = HEAPF32[$0 + 76 >> 2];
   $7_1 = $790(Math_fround(Math_fround(1.0) - HEAPF32[$0 + 240 >> 2]), $2_1);
   if (!!(Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($9_1 * $9_1)) + Math_fround($10 * $10)) > Math_fround(0.0))) {
    HEAPF32[$0 + 76 >> 2] = $10 * $7_1;
    HEAPF32[$0 + 72 >> 2] = $9_1 * $7_1;
    HEAPF32[$0 + 68 >> 2] = $12_1 * $7_1;
   }
   $7_1 = Math_fround(Math_fround(HEAPF32[$0 + 20 >> 2] * $7_1) - Math_fround(HEAPF32[$0 + 52 >> 2] * $2_1));
   HEAPF32[$0 + 20 >> 2] = $7_1;
   label$6 : {
    if (!($7_1 > Math_fround(0.0))) {
     break label$6
    }
    $9_1 = HEAPF32[$0 + 32 >> 2];
    if (!($7_1 > $9_1)) {
     break label$6
    }
    HEAPF32[$0 + 20 >> 2] = $9_1;
    $7_1 = $9_1;
   }
   label$7 : {
    if (!($7_1 < Math_fround(0.0))) {
     break label$7
    }
    $9_1 = Math_fround(Math_abs(HEAPF32[$0 + 28 >> 2]));
    if (!(Math_fround(Math_abs($7_1)) > $9_1)) {
     break label$7
    }
    $7_1 = Math_fround(-$9_1);
    HEAPF32[$0 + 20 >> 2] = $7_1;
   }
   HEAPF32[$0 + 24 >> 2] = $7_1 * $2_1;
   $3_1 = HEAP32[$0 + 8 >> 2];
   $4_1 = $3_1 + 12 | 0;
   $8_1 = HEAP32[$4_1 + 4 >> 2];
   $5_1 = $6_1 + 24 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $4_1 = $3_1 + 28 | 0;
   $8_1 = HEAP32[$4_1 + 4 >> 2];
   $5_1 = $6_1 + 40 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $4_1 = $3_1 + 44 | 0;
   $8_1 = HEAP32[$4_1 + 4 >> 2];
   $5_1 = $6_1 + 56 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $4_1 = $3_1 + 60 | 0;
   $8_1 = HEAP32[$4_1 + 4 >> 2];
   $5_1 = $6_1 + 72 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $5_1 = HEAP32[$3_1 + 8 >> 2];
   HEAP32[$6_1 + 16 >> 2] = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$6_1 + 20 >> 2] = $5_1;
   $5_1 = $3_1 + 20 | 0;
   $4_1 = HEAP32[$5_1 + 4 >> 2];
   HEAP32[$6_1 + 32 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$6_1 + 36 >> 2] = $4_1;
   $5_1 = $3_1 + 36 | 0;
   $4_1 = HEAP32[$5_1 + 4 >> 2];
   HEAP32[$6_1 + 48 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$6_1 + 52 >> 2] = $4_1;
   $3_1 = $3_1 + 52 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$6_1 + 64 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$6_1 + 68 >> 2] = $5_1;
   $1009($0, $1_1);
   $8_1 = $6_1 - -64 | 0;
   $5_1 = $6_1 + 48 | 0;
   $3_1 = $6_1 + 32 | 0;
   label$8 : {
    if (HEAPU8[$0 + 251 | 0]) {
     $1012($0, $1_1, $0 + 68 | 0);
     break label$8;
    }
    $7_1 = HEAPF32[$0 + 252 >> 2];
    HEAPF32[$0 + 252 >> 2] = $7_1 - $2_1;
    HEAP32[$6_1 + 12 >> 2] = 0;
    $7_1 = $7_1 > $2_1 ? $2_1 : $7_1;
    HEAPF32[$6_1 + 8 >> 2] = $7_1 * HEAPF32[$0 + 76 >> 2];
    HEAPF32[$6_1 + 4 >> 2] = $7_1 * HEAPF32[$0 + 72 >> 2];
    HEAPF32[$6_1 >> 2] = $7_1 * HEAPF32[$0 + 68 >> 2];
    $1012($0, $1_1, $6_1);
   }
   $1013($0, $1_1, $2_1);
   $11 = $0 + 140 | 0;
   $16_1 = HEAP32[$11 + 4 >> 2];
   $15_1 = $8_1 + 8 | 0;
   $4_1 = $15_1;
   HEAP32[$4_1 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $16_1;
   $4_1 = HEAP32[$0 + 136 >> 2];
   HEAP32[$8_1 >> 2] = HEAP32[$0 + 132 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $4_1;
   $16_1 = HEAP32[$6_1 + 20 >> 2];
   $4_1 = HEAP32[$0 + 8 >> 2];
   HEAP32[$4_1 + 4 >> 2] = HEAP32[$6_1 + 16 >> 2];
   HEAP32[$4_1 + 8 >> 2] = $16_1;
   $16_1 = HEAP32[$3_1 + 4 >> 2];
   $11 = $4_1 + 20 | 0;
   HEAP32[$11 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$11 + 4 >> 2] = $16_1;
   $3_1 = $3_1 + 8 | 0;
   $16_1 = HEAP32[$3_1 + 4 >> 2];
   $11 = $4_1 + 28 | 0;
   HEAP32[$11 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$11 + 4 >> 2] = $16_1;
   $3_1 = $5_1;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $11 = $4_1 + 36 | 0;
   HEAP32[$11 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$11 + 4 >> 2] = $5_1;
   $3_1 = $3_1 + 8 | 0;
   $11 = HEAP32[$3_1 + 4 >> 2];
   $5_1 = $4_1 + 44 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $11;
   $5_1 = $6_1 + 24 | 0;
   $11 = HEAP32[$5_1 + 4 >> 2];
   $3_1 = $4_1 + 12 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $11;
   HEAP32[$4_1 + 304 >> 2] = HEAP32[$4_1 + 304 >> 2] + 1;
   $5_1 = HEAP32[$8_1 + 4 >> 2];
   $3_1 = $4_1 + 52 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $5_1;
   $5_1 = HEAP32[$15_1 + 4 >> 2];
   $3_1 = $4_1 + 60 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$15_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $5_1;
   HEAP8[$0 + 220 | 0] = 0;
   if (!$1008($0, $1_1)) {
    break label$3
   }
   HEAP8[$0 + 220 | 0] = 1;
   if (!$1008($0, $1_1)) {
    break label$3
   }
   HEAP8[$0 + 220 | 0] = 1;
   if (!$1008($0, $1_1)) {
    break label$3
   }
   HEAP8[$0 + 220 | 0] = 1;
   if (!$1008($0, $1_1)) {
    break label$3
   }
   HEAP8[$0 + 220 | 0] = 1;
   if (!$1008($0, $1_1)) {
    break label$3
   }
   HEAP8[$0 + 220 | 0] = 1;
  }
  global$0 = $6_1 + 80 | 0;
 }
 
 function $1026($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0) | 0;
 }
 
 function $1027($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0;
  $6_1 = $0;
  $2_1 = HEAPF32[$1_1 >> 2];
  $3_1 = Math_fround($2_1 * $2_1);
  $2_1 = HEAPF32[$1_1 + 4 >> 2];
  $3_1 = Math_fround($3_1 + Math_fround($2_1 * $2_1));
  $2_1 = HEAPF32[$1_1 + 8 >> 2];
  $2_1 = Math_fround($3_1 + Math_fround($2_1 * $2_1));
  $3_1 = HEAPF32[$0 + 36 >> 2];
  label$1 : {
   if ($2_1 == Math_fround(0.0)) {
    break label$1
   }
   $3_1 = Math_fround(Math_sqrt($2_1));
  }
  $2_1 = $3_1;
  HEAPF32[$6_1 + 20 >> 2] = $2_1;
  HEAPF32[$0 + 32 >> 2] = $2_1;
  HEAP8[$0 + 249 | 0] = 1;
  $6_1 = $0 + 284 | 0;
  $2_1 = HEAPF32[$1_1 >> 2];
  $4_1 = HEAPF32[$1_1 + 4 >> 2];
  $5_1 = HEAPF32[$1_1 + 8 >> 2];
  $3_1 = Math_fround(Math_fround(Math_fround($2_1 * $2_1) + Math_fround($4_1 * $4_1)) + Math_fround($5_1 * $5_1));
  label$3 : {
   if ($3_1 == Math_fround(0.0)) {
    $5_1 = HEAPF32[$0 + 264 >> 2];
    $4_1 = HEAPF32[$0 + 260 >> 2];
    $2_1 = HEAPF32[$0 + 256 >> 2];
    $1_1 = $0 + 268 | 0;
    break label$3;
   }
   $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($3_1)));
   $5_1 = Math_fround($5_1 * $3_1);
   $4_1 = Math_fround($4_1 * $3_1);
   $2_1 = Math_fround($2_1 * $3_1);
   $1_1 = $1_1 + 12 | 0;
  }
  HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAPF32[$0 + 280 >> 2] = $5_1;
  HEAPF32[$0 + 276 >> 2] = $4_1;
  HEAPF32[$0 + 272 >> 2] = $2_1;
  $1_1 = HEAP32[$0 + 8 >> 2];
  $7_1 = $1_1 + 52 | 0;
  $6_1 = HEAP32[$7_1 + 4 >> 2];
  HEAP32[$0 + 116 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0 + 120 >> 2] = $6_1;
  $1_1 = $1_1 + 60 | 0;
  $7_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 124 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $7_1;
 }
 
 function $1028($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $7_1 = $0;
  $2_1 = HEAPF32[$1_1 >> 2];
  $5_1 = HEAPF32[$1_1 + 4 >> 2];
  $6_1 = HEAPF32[$1_1 + 8 >> 2];
  $4_1 = Math_fround(Math_fround(Math_fround($2_1 * $2_1) + Math_fround($5_1 * $5_1)) + Math_fround($6_1 * $6_1));
  if (!!($4_1 > Math_fround(0.0))) {
   HEAP32[$3_1 + 12 >> 2] = 0;
   HEAPF32[$3_1 + 8 >> 2] = -$6_1;
   HEAPF32[$3_1 + 4 >> 2] = -$5_1;
   HEAPF32[$3_1 >> 2] = -$2_1;
   $1002($0, $3_1);
   $2_1 = HEAPF32[$1_1 >> 2];
   $4_1 = Math_fround($2_1 * $2_1);
   $2_1 = HEAPF32[$1_1 + 4 >> 2];
   $4_1 = Math_fround($4_1 + Math_fround($2_1 * $2_1));
   $2_1 = HEAPF32[$1_1 + 8 >> 2];
   $4_1 = Math_fround($4_1 + Math_fround($2_1 * $2_1));
  }
  HEAPF32[$7_1 + 52 >> 2] = Math_sqrt($4_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1029($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  return (Math_fround(Math_abs(HEAPF32[$0 + 20 >> 2])) < Math_fround(1.1920928955078125e-07) ^ 1 ? $1_1 : Math_fround(Math_abs(HEAPF32[$0 + 24 >> 2])) < Math_fround(1.1920928955078125e-07)) | 0;
 }
 
 function $1031($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0 + 288 | 0] = $1_1;
 }
 
 function $1032($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1_1, $2_1);
 }
 
 function $1034($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0);
  $5_1 = Math_fround(1.0);
  $3_1 = HEAP32[$1_1 >> 2];
  label$1 : {
   if (($3_1 | 0) == HEAP32[$0 + 84 >> 2] | HEAPU8[$3_1 + 204 | 0] & 4) {
    break label$1
   }
   label$2 : {
    if ($2_1) {
     $6_1 = HEAPF32[$1_1 + 16 >> 2];
     $7_1 = HEAPF32[$1_1 + 12 >> 2];
     $4_1 = HEAPF32[$1_1 + 8 >> 2];
     break label$2;
    }
    $4_1 = HEAPF32[$1_1 + 8 >> 2];
    $8_1 = HEAPF32[$1_1 + 12 >> 2];
    $9_1 = HEAPF32[$1_1 + 16 >> 2];
    $6_1 = Math_fround(Math_fround(Math_fround($4_1 * HEAPF32[$3_1 + 36 >> 2]) + Math_fround($8_1 * HEAPF32[$3_1 + 40 >> 2])) + Math_fround($9_1 * HEAPF32[$3_1 + 44 >> 2]));
    $7_1 = Math_fround(Math_fround(Math_fround($4_1 * HEAPF32[$3_1 + 20 >> 2]) + Math_fround($8_1 * HEAPF32[$3_1 + 24 >> 2])) + Math_fround($9_1 * HEAPF32[$3_1 + 28 >> 2]));
    $4_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 + 4 >> 2] * $4_1) + Math_fround(HEAPF32[$3_1 + 8 >> 2] * $8_1)) + Math_fround(HEAPF32[$3_1 + 12 >> 2] * $9_1));
   }
   if (Math_fround(Math_fround(Math_fround($4_1 * HEAPF32[$0 + 88 >> 2]) + Math_fround($7_1 * HEAPF32[$0 + 92 >> 2])) + Math_fround($6_1 * HEAPF32[$0 + 96 >> 2])) < HEAPF32[$0 + 104 >> 2]) {
    break label$1
   }
   HEAP32[$0 + 80 >> 2] = $3_1;
   HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 40 >> 2];
   label$4 : {
    if ($2_1) {
     $2_1 = HEAP32[$1_1 + 12 >> 2];
     HEAP32[$0 + 48 >> 2] = HEAP32[$1_1 + 8 >> 2];
     HEAP32[$0 + 52 >> 2] = $2_1;
     $3_1 = $1_1 + 16 | 0;
     $10 = HEAP32[$3_1 + 4 >> 2];
     $2_1 = $0 + 56 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $10;
     break label$4;
    }
    $4_1 = HEAPF32[$3_1 + 8 >> 2];
    $8_1 = HEAPF32[$3_1 + 12 >> 2];
    $9_1 = HEAPF32[$3_1 + 20 >> 2];
    $11 = HEAPF32[$3_1 + 24 >> 2];
    $12_1 = HEAPF32[$3_1 + 28 >> 2];
    $13_1 = HEAPF32[$3_1 + 36 >> 2];
    $14 = HEAPF32[$3_1 + 40 >> 2];
    $5_1 = HEAPF32[$1_1 + 12 >> 2];
    $15_1 = HEAPF32[$3_1 + 44 >> 2];
    $6_1 = HEAPF32[$1_1 + 16 >> 2];
    $16_1 = HEAPF32[$3_1 + 4 >> 2];
    $7_1 = HEAPF32[$1_1 + 8 >> 2];
    HEAP32[$0 + 60 >> 2] = 0;
    HEAPF32[$0 + 56 >> 2] = Math_fround(Math_fround($7_1 * $13_1) + Math_fround($5_1 * $14)) + Math_fround($6_1 * $15_1);
    HEAPF32[$0 + 52 >> 2] = Math_fround(Math_fround($7_1 * $9_1) + Math_fround($5_1 * $11)) + Math_fround($6_1 * $12_1);
    HEAPF32[$0 + 48 >> 2] = Math_fround(Math_fround($16_1 * $7_1) + Math_fround($4_1 * $5_1)) + Math_fround($8_1 * $6_1);
   }
   $2_1 = HEAP32[$1_1 + 28 >> 2];
   HEAP32[$0 + 64 >> 2] = HEAP32[$1_1 + 24 >> 2];
   HEAP32[$0 + 68 >> 2] = $2_1;
   $2_1 = $1_1 + 32 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   $0 = $0 + 72 | 0;
   HEAP32[$0 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $3_1;
   $5_1 = HEAPF32[$1_1 + 40 >> 2];
  }
  return Math_fround($5_1);
 }
 
 function $1035($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $923($0, $1_1, $2_1);
  HEAP32[$0 >> 2] = 22420;
  $1_1 = $3_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = $0 + 56 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0 + 48 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0 + 52 >> 2] = $1_1;
  $1_1 = $3_1 + 24 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = $0 + 72 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 20 >> 2];
  $2_1 = $0 - -64 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $3_1 + 40 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = $0 + 88 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 36 >> 2];
  $2_1 = $0 + 80 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $3_1 + 56 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = $0 + 104 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 52 >> 2];
  $2_1 = $0 + 96 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $4_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $0 + 120 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$0 + 112 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$0 + 116 >> 2] = $1_1;
  $1_1 = HEAP32[$4_1 + 20 >> 2];
  $2_1 = $0 + 128 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $4_1 + 24 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $0 + 136 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$4_1 + 36 >> 2];
  $2_1 = $0 + 144 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 32 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $4_1 + 40 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $0 + 152 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$4_1 + 52 >> 2];
  $2_1 = $0 + 160 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 48 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $4_1 + 56 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $0 + 168 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  HEAP32[$0 + 680 >> 2] = 0;
  HEAP32[$0 + 684 >> 2] = 0;
  $1_1 = $0 + 688 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 696 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 704 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 712 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 720 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 736 >> 2] = 1045220557;
  $1_1 = $0 + 728 | 0;
  HEAP32[$1_1 >> 2] = 1045220557;
  HEAP32[$1_1 + 4 >> 2] = 1045220557;
  HEAP32[$0 + 756 >> 2] = 0;
  $1_1 = $0 + 748 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 740 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 768 >> 2] = 1063675494;
  $1_1 = $0 + 760 | 0;
  HEAP32[$1_1 >> 2] = 1063675494;
  HEAP32[$1_1 + 4 >> 2] = 1063675494;
  HEAP32[$0 + 812 >> 2] = 0;
  $1_1 = $0 + 804 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 828 >> 2] = 0;
  $1_1 = $0 + 820 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0 + 838 | 0] = 0;
  $1_1 = $0 + 836 | 0;
  HEAP8[$1_1 | 0] = 0;
  HEAP8[$1_1 + 1 | 0] = 0;
  HEAP32[$0 + 848 >> 2] = 0;
  $1_1 = $0 + 840 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0 + 858 | 0] = 0;
  $1_1 = $0 + 856 | 0;
  HEAP8[$1_1 | 0] = 0;
  HEAP8[$1_1 + 1 | 0] = 0;
  HEAP32[$0 + 868 >> 2] = 0;
  $1_1 = $0 + 860 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 884 >> 2] = 0;
  $1_1 = $0 + 876 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 900 >> 2] = 0;
  $1_1 = $0 + 892 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 793 | 0;
  HEAP8[$1_1 | 0] = 0;
  HEAP8[$1_1 + 1 | 0] = 0;
  HEAP8[$1_1 + 2 | 0] = 0;
  HEAP8[$1_1 + 3 | 0] = 0;
  HEAP8[$1_1 + 4 | 0] = 0;
  HEAP8[$1_1 + 5 | 0] = 0;
  HEAP8[$1_1 + 6 | 0] = 0;
  HEAP8[$1_1 + 7 | 0] = 0;
  $1_1 = $0 + 788 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 780 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 772 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 964 >> 2] = 0;
  $1_1 = $0 + 956 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 948 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 940 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 932 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 924 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 916 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 908 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0 + 1032 | 0] = 0;
  HEAP32[$0 + 1028 >> 2] = 0;
  HEAP8[$0 + 1024 | 0] = 0;
  HEAP32[$0 + 1020 >> 2] = 0;
  HEAP8[$0 + 1016 | 0] = 0;
  HEAP32[$0 + 1012 >> 2] = 0;
  HEAP8[$0 + 1008 | 0] = 0;
  $1_1 = $0 + 1e3 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1036831949;
  HEAP8[$0 + 996 | 0] = 0;
  HEAP32[$0 + 992 >> 2] = 0;
  $1_1 = $0 + 984 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1063675494;
  $1_1 = $0 + 976 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1045220557;
  HEAP32[$0 + 968 >> 2] = 1065353216;
  HEAP32[$0 + 972 >> 2] = -1082130432;
  HEAP32[$0 + 1052 >> 2] = 0;
  $1_1 = $0 + 1044 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 1036 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0 + 1120 | 0] = 0;
  HEAP32[$0 + 1116 >> 2] = 0;
  HEAP8[$0 + 1112 | 0] = 0;
  HEAP32[$0 + 1108 >> 2] = 0;
  HEAP8[$0 + 1104 | 0] = 0;
  HEAP32[$0 + 1100 >> 2] = 0;
  HEAP8[$0 + 1096 | 0] = 0;
  $1_1 = $0 + 1088 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1036831949;
  HEAP8[$0 + 1084 | 0] = 0;
  HEAP32[$0 + 1080 >> 2] = 0;
  $1_1 = $0 + 1072 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1063675494;
  $1_1 = $0 + 1064 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1045220557;
  $1_1 = $0 + 1056 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = -1082130432;
  HEAP32[$0 + 1140 >> 2] = 0;
  $1_1 = $0 + 1132 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 1124 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0 + 1208 | 0] = 0;
  HEAP32[$0 + 1204 >> 2] = 0;
  HEAP8[$0 + 1200 | 0] = 0;
  HEAP32[$0 + 1196 >> 2] = 0;
  HEAP8[$0 + 1192 | 0] = 0;
  HEAP32[$0 + 1188 >> 2] = 0;
  HEAP8[$0 + 1184 | 0] = 0;
  $1_1 = $0 + 1176 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1036831949;
  HEAP8[$0 + 1172 | 0] = 0;
  HEAP32[$0 + 1168 >> 2] = 0;
  $1_1 = $0 + 1160 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1063675494;
  $1_1 = $0 + 1152 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1045220557;
  $1_1 = $0 + 1144 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = -1082130432;
  HEAP32[$0 + 1228 >> 2] = 0;
  $1_1 = $0 + 1220 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 1212 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 1456 >> 2] = 0;
  HEAP32[$0 + 1232 >> 2] = 0;
  $1036($0, HEAP32[$0 + 28 >> 2] + 4 | 0, HEAP32[$0 + 32 >> 2] + 4 | 0);
 }
 
 function $1036($0, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0);
  $25 = HEAPF32[$1_1 + 52 >> 2];
  $26_1 = HEAPF32[$1_1 + 56 >> 2];
  $12_1 = HEAPF32[$0 + 96 >> 2];
  $13_1 = HEAPF32[$0 + 100 >> 2];
  $14 = HEAPF32[$0 + 104 >> 2];
  $3_1 = HEAPF32[$1_1 + 20 >> 2];
  $4_1 = HEAPF32[$1_1 + 24 >> 2];
  $15_1 = HEAPF32[$0 - -64 >> 2];
  $16_1 = HEAPF32[$0 + 80 >> 2];
  $17_1 = HEAPF32[$0 + 52 >> 2];
  $18_1 = HEAPF32[$0 + 68 >> 2];
  $19_1 = HEAPF32[$0 + 84 >> 2];
  $20 = HEAPF32[$0 + 56 >> 2];
  $5_1 = HEAPF32[$1_1 + 36 >> 2];
  $21 = HEAPF32[$0 + 72 >> 2];
  $6_1 = HEAPF32[$1_1 + 40 >> 2];
  $22_1 = HEAPF32[$0 + 88 >> 2];
  $24_1 = HEAPF32[$1_1 + 48 >> 2];
  $7_1 = HEAPF32[$1_1 + 8 >> 2];
  $8_1 = HEAPF32[$1_1 >> 2];
  $9_1 = HEAPF32[$1_1 + 4 >> 2];
  $10 = HEAPF32[$1_1 + 16 >> 2];
  $23_1 = HEAPF32[$0 + 48 >> 2];
  $11 = HEAPF32[$1_1 + 32 >> 2];
  HEAP32[$0 + 1296 >> 2] = 0;
  HEAP32[$0 + 1280 >> 2] = 0;
  HEAP32[$0 + 1264 >> 2] = 0;
  HEAP32[$0 + 1248 >> 2] = 0;
  HEAPF32[$0 + 1276 >> 2] = Math_fround(Math_fround($20 * $11) + Math_fround($21 * $5_1)) + Math_fround($22_1 * $6_1);
  HEAPF32[$0 + 1272 >> 2] = Math_fround(Math_fround($17_1 * $11) + Math_fround($18_1 * $5_1)) + Math_fround($19_1 * $6_1);
  HEAPF32[$0 + 1268 >> 2] = Math_fround(Math_fround($23_1 * $11) + Math_fround($15_1 * $5_1)) + Math_fround($16_1 * $6_1);
  HEAPF32[$0 + 1260 >> 2] = Math_fround(Math_fround($20 * $10) + Math_fround($21 * $3_1)) + Math_fround($22_1 * $4_1);
  HEAPF32[$0 + 1256 >> 2] = Math_fround(Math_fround($17_1 * $10) + Math_fround($18_1 * $3_1)) + Math_fround($19_1 * $4_1);
  HEAPF32[$0 + 1252 >> 2] = Math_fround(Math_fround($23_1 * $10) + Math_fround($15_1 * $3_1)) + Math_fround($16_1 * $4_1);
  HEAPF32[$0 + 1244 >> 2] = Math_fround(Math_fround($8_1 * $20) + Math_fround($9_1 * $21)) + Math_fround($7_1 * $22_1);
  HEAPF32[$0 + 1240 >> 2] = Math_fround(Math_fround($8_1 * $17_1) + Math_fround($9_1 * $18_1)) + Math_fround($7_1 * $19_1);
  HEAPF32[$0 + 1236 >> 2] = Math_fround(Math_fround($23_1 * $8_1) + Math_fround($15_1 * $9_1)) + Math_fround($16_1 * $7_1);
  HEAPF32[$0 + 1292 >> 2] = $26_1 + Math_fround(Math_fround(Math_fround($11 * $12_1) + Math_fround($5_1 * $13_1)) + Math_fround($6_1 * $14));
  HEAPF32[$0 + 1288 >> 2] = $25 + Math_fround(Math_fround(Math_fround($10 * $12_1) + Math_fround($3_1 * $13_1)) + Math_fround($4_1 * $14));
  HEAPF32[$0 + 1284 >> 2] = $24_1 + Math_fround(Math_fround(Math_fround($8_1 * $12_1) + Math_fround($9_1 * $13_1)) + Math_fround($7_1 * $14));
  $25 = HEAPF32[$2_1 + 52 >> 2];
  $26_1 = HEAPF32[$2_1 + 56 >> 2];
  $12_1 = HEAPF32[$0 + 160 >> 2];
  $13_1 = HEAPF32[$0 + 164 >> 2];
  $14 = HEAPF32[$0 + 168 >> 2];
  $3_1 = HEAPF32[$2_1 + 20 >> 2];
  $4_1 = HEAPF32[$2_1 + 24 >> 2];
  $15_1 = HEAPF32[$0 + 128 >> 2];
  $16_1 = HEAPF32[$0 + 144 >> 2];
  $17_1 = HEAPF32[$0 + 116 >> 2];
  $18_1 = HEAPF32[$0 + 132 >> 2];
  $19_1 = HEAPF32[$0 + 148 >> 2];
  $20 = HEAPF32[$0 + 120 >> 2];
  $21 = HEAPF32[$0 + 136 >> 2];
  $5_1 = HEAPF32[$2_1 + 36 >> 2];
  $22_1 = HEAPF32[$0 + 152 >> 2];
  $6_1 = HEAPF32[$2_1 + 40 >> 2];
  $24_1 = HEAPF32[$2_1 + 48 >> 2];
  $7_1 = HEAPF32[$2_1 + 8 >> 2];
  $8_1 = HEAPF32[$2_1 >> 2];
  $9_1 = HEAPF32[$2_1 + 4 >> 2];
  $10 = HEAPF32[$2_1 + 16 >> 2];
  $23_1 = HEAPF32[$0 + 112 >> 2];
  $11 = HEAPF32[$2_1 + 32 >> 2];
  HEAP32[$0 + 1360 >> 2] = 0;
  HEAP32[$0 + 1344 >> 2] = 0;
  HEAP32[$0 + 1328 >> 2] = 0;
  HEAP32[$0 + 1312 >> 2] = 0;
  HEAPF32[$0 + 1340 >> 2] = Math_fround(Math_fround($20 * $11) + Math_fround($21 * $5_1)) + Math_fround($22_1 * $6_1);
  HEAPF32[$0 + 1336 >> 2] = Math_fround(Math_fround($17_1 * $11) + Math_fround($18_1 * $5_1)) + Math_fround($19_1 * $6_1);
  HEAPF32[$0 + 1332 >> 2] = Math_fround(Math_fround($23_1 * $11) + Math_fround($15_1 * $5_1)) + Math_fround($16_1 * $6_1);
  HEAPF32[$0 + 1324 >> 2] = Math_fround(Math_fround($20 * $10) + Math_fround($21 * $3_1)) + Math_fround($22_1 * $4_1);
  HEAPF32[$0 + 1320 >> 2] = Math_fround(Math_fround($17_1 * $10) + Math_fround($18_1 * $3_1)) + Math_fround($19_1 * $4_1);
  HEAPF32[$0 + 1316 >> 2] = Math_fround(Math_fround($23_1 * $10) + Math_fround($15_1 * $3_1)) + Math_fround($16_1 * $4_1);
  HEAPF32[$0 + 1308 >> 2] = Math_fround(Math_fround($8_1 * $20) + Math_fround($9_1 * $21)) + Math_fround($7_1 * $22_1);
  HEAPF32[$0 + 1304 >> 2] = Math_fround(Math_fround($8_1 * $17_1) + Math_fround($9_1 * $18_1)) + Math_fround($7_1 * $19_1);
  HEAPF32[$0 + 1300 >> 2] = Math_fround(Math_fround($23_1 * $8_1) + Math_fround($15_1 * $9_1)) + Math_fround($16_1 * $7_1);
  HEAPF32[$0 + 1356 >> 2] = $26_1 + Math_fround(Math_fround(Math_fround($11 * $12_1) + Math_fround($5_1 * $13_1)) + Math_fround($6_1 * $14));
  HEAPF32[$0 + 1352 >> 2] = $25 + Math_fround(Math_fround(Math_fround($10 * $12_1) + Math_fround($3_1 * $13_1)) + Math_fround($4_1 * $14));
  HEAPF32[$0 + 1348 >> 2] = $24_1 + Math_fround(Math_fround(Math_fround($8_1 * $12_1) + Math_fround($9_1 * $13_1)) + Math_fround($7_1 * $14));
  $1044($0);
  $1043($0);
  $4_1 = HEAPF32[HEAP32[$0 + 28 >> 2] + 404 >> 2];
  $3_1 = HEAPF32[HEAP32[$0 + 32 >> 2] + 404 >> 2];
  HEAP8[$0 + 1452 | 0] = $4_1 < Math_fround(1.1920928955078125e-07) | $3_1 < Math_fround(1.1920928955078125e-07);
  $24_1 = $3_1;
  $3_1 = Math_fround($4_1 + $3_1);
  $3_1 = $3_1 > Math_fround(0.0) ? Math_fround($24_1 / $3_1) : Math_fround(.5);
  HEAPF32[$0 + 1444 >> 2] = $3_1;
  HEAPF32[$0 + 1448 >> 2] = Math_fround(1.0) - $3_1;
 }
 
 function $1037($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $2_1 = HEAPF32[$0 + 32 >> 2];
  label$1 : {
   if (!!($2_1 < Math_fround(1.0))) {
    if (!!($2_1 > Math_fround(-1.0))) {
     (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(Math_fround(-HEAPF32[$0 + 36 >> 2]), HEAPF32[$0 + 40 >> 2])), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $935(Math_fround(Math_min(Math_fround(Math_max(HEAPF32[$0 + 32 >> 2], Math_fround(-1.0))), Math_fround(1.0))))), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
     (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(Math_fround(-HEAPF32[$0 + 16 >> 2]), HEAPF32[$0 >> 2])), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
     return;
    }
    $2_1 = HEAPF32[$0 + 20 >> 2];
    $3_1 = HEAPF32[$0 + 4 >> 2];
    HEAP32[$1_1 + 4 >> 2] = -1077342245;
    (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = Math_fround(-$686($3_1, $2_1))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    break label$1;
   }
   $2_1 = HEAPF32[$0 + 20 >> 2];
   $3_1 = HEAPF32[$0 + 4 >> 2];
   HEAP32[$1_1 + 4 >> 2] = 1070141403;
   (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686($3_1, $2_1)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  }
  HEAPF32[$1_1 + 8 >> 2] = 0;
 }
 
 function $1038($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $2_1 = HEAPF32[$0 + 16 >> 2];
  if (!!($2_1 < Math_fround(1.0))) {
   if (!!($2_1 > Math_fround(-1.0))) {
    (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(HEAPF32[$0 + 24 >> 2], HEAPF32[$0 + 20 >> 2])), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(HEAPF32[$0 + 32 >> 2], HEAPF32[$0 >> 2])), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
    (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $935(Math_fround(Math_min(Math_fround(Math_max(Math_fround(-HEAPF32[$0 + 16 >> 2]), Math_fround(-1.0))), Math_fround(1.0))))), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
    return;
   }
   $2_1 = HEAPF32[$0 + 40 >> 2];
   $3_1 = HEAPF32[$0 + 8 >> 2];
   HEAP32[$1_1 + 4 >> 2] = 0;
   (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = Math_fround(-$686(Math_fround(-$3_1), $2_1))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
   HEAPF32[$1_1 + 8 >> 2] = 1.5707963705062866;
   return;
  }
  $2_1 = HEAPF32[$0 + 40 >> 2];
  $3_1 = HEAPF32[$0 + 8 >> 2];
  HEAP32[$1_1 + 4 >> 2] = 0;
  (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(Math_fround(-$3_1), $2_1)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  HEAPF32[$1_1 + 8 >> 2] = -1.5707963705062866;
 }
 
 function $1039($0, $1_1) {
  var $2_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $2_1 = HEAPF32[$0 + 36 >> 2];
  label$1 : {
   if (!!($2_1 < Math_fround(1.0))) {
    if (!!($2_1 > Math_fround(-1.0))) {
     (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $935(Math_fround(Math_min(Math_fround(Math_max(Math_fround(-$2_1), Math_fround(-1.0))), Math_fround(1.0))))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(HEAPF32[$0 + 32 >> 2], HEAPF32[$0 + 40 >> 2])), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
     (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(HEAPF32[$0 + 4 >> 2], HEAPF32[$0 + 20 >> 2])), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
     return;
    }
    HEAP32[$1_1 >> 2] = 1070141403;
    (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = Math_fround(-$686(Math_fround(-HEAPF32[$0 + 16 >> 2]), HEAPF32[$0 >> 2]))), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
    break label$1;
   }
   HEAP32[$1_1 >> 2] = -1077342245;
   (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(Math_fround(-HEAPF32[$0 + 16 >> 2]), HEAPF32[$0 >> 2])), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
  }
  HEAPF32[$1_1 + 8 >> 2] = 0;
 }
 
 function $1040($0, $1_1) {
  var $2_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $2_1 = HEAPF32[$0 + 4 >> 2];
  if (!!($2_1 < Math_fround(1.0))) {
   if (!!($2_1 > Math_fround(-1.0))) {
    (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(Math_fround(-HEAPF32[$0 + 36 >> 2]), HEAPF32[$0 + 20 >> 2])), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(Math_fround(-HEAPF32[$0 + 8 >> 2]), HEAPF32[$0 >> 2])), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
    (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $935(Math_fround(Math_min(Math_fround(Math_max(HEAPF32[$0 + 4 >> 2], Math_fround(-1.0))), Math_fround(1.0))))), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
    return;
   }
   HEAP32[$1_1 >> 2] = 0;
   (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = Math_fround(-$686(HEAPF32[$0 + 24 >> 2], HEAPF32[$0 + 40 >> 2]))), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
   HEAPF32[$1_1 + 8 >> 2] = -1.5707963705062866;
   return;
  }
  HEAP32[$1_1 >> 2] = 0;
  (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(HEAPF32[$0 + 24 >> 2], HEAPF32[$0 + 40 >> 2])), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
  HEAPF32[$1_1 + 8 >> 2] = 1.5707963705062866;
 }
 
 function $1041($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $3_1 = $1_1;
  $2_1 = HEAPF32[$0 + 24 >> 2];
  label$1 : {
   if (!!($2_1 < Math_fround(1.0))) {
    if (!!($2_1 > Math_fround(-1.0))) {
     (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $935(Math_fround(Math_min(Math_fround(Math_max($2_1, Math_fround(-1.0))), Math_fround(1.0))))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(Math_fround(-HEAPF32[$0 + 8 >> 2]), HEAPF32[$0 + 40 >> 2])), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
     (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(Math_fround(-HEAPF32[$0 + 16 >> 2]), HEAPF32[$0 + 20 >> 2])), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
     return;
    }
    HEAP32[$1_1 >> 2] = -1077342245;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $2_1 = Math_fround(-$686(HEAPF32[$0 + 32 >> 2], HEAPF32[$0 >> 2]));
    break label$1;
   }
   HEAP32[$1_1 >> 2] = 1070141403;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $2_1 = $686(HEAPF32[$0 + 32 >> 2], HEAPF32[$0 >> 2]);
  }
  HEAPF32[$3_1 + 8 >> 2] = $2_1;
 }
 
 function $1042($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $3_1 = $1_1;
  $2_1 = HEAPF32[$0 + 8 >> 2];
  label$1 : {
   if (!!($2_1 < Math_fround(1.0))) {
    if (!!($2_1 > Math_fround(-1.0))) {
     (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(HEAPF32[$0 + 24 >> 2], HEAPF32[$0 + 40 >> 2])), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $935(Math_fround(Math_min(Math_fround(Math_max(Math_fround(-HEAPF32[$0 + 8 >> 2]), Math_fround(-1.0))), Math_fround(1.0))))), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
     (wasm2js_i32$0 = $1_1, wasm2js_f32$0 = $686(HEAPF32[$0 + 4 >> 2], HEAPF32[$0 >> 2])), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
     return;
    }
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 1070141403;
    $2_1 = Math_fround(-$686(HEAPF32[$0 + 16 >> 2], HEAPF32[$0 + 32 >> 2]));
    break label$1;
   }
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = -1077342245;
   $2_1 = $686(Math_fround(-HEAPF32[$0 + 16 >> 2]), Math_fround(-HEAPF32[$0 + 32 >> 2]));
  }
  HEAPF32[$3_1 + 8 >> 2] = $2_1;
 }
 
 function $1043($0) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0;
  $12_1 = global$0 - 48 | 0;
  global$0 = $12_1;
  $11 = HEAPF32[$0 + 1332 >> 2];
  $16_1 = HEAPF32[$0 + 1316 >> 2];
  $17_1 = HEAPF32[$0 + 1336 >> 2];
  $18_1 = HEAPF32[$0 + 1304 >> 2];
  $19_1 = HEAPF32[$0 + 1320 >> 2];
  $20 = HEAPF32[$0 + 1340 >> 2];
  $21 = HEAPF32[$0 + 1308 >> 2];
  $22_1 = HEAPF32[$0 + 1324 >> 2];
  $7_1 = HEAPF32[$0 + 1244 >> 2];
  $8_1 = HEAPF32[$0 + 1256 >> 2];
  $6_1 = HEAPF32[$0 + 1272 >> 2];
  $4_1 = HEAPF32[$0 + 1240 >> 2];
  $3_1 = HEAPF32[$0 + 1268 >> 2];
  $9_1 = HEAPF32[$0 + 1260 >> 2];
  $5_1 = HEAPF32[$0 + 1252 >> 2];
  $10 = HEAPF32[$0 + 1276 >> 2];
  $23_1 = HEAPF32[$0 + 1300 >> 2];
  $1_1 = HEAPF32[$0 + 1236 >> 2];
  HEAP32[$12_1 + 44 >> 2] = 0;
  HEAP32[$12_1 + 28 >> 2] = 0;
  $26_1 = Math_fround(Math_fround($8_1 * $10) - Math_fround($9_1 * $6_1));
  $13_1 = Math_fround(Math_fround($9_1 * $3_1) - Math_fround($10 * $5_1));
  $14 = Math_fround(Math_fround($6_1 * $5_1) - Math_fround($8_1 * $3_1));
  $2_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround($1_1 * $26_1) + Math_fround($4_1 * $13_1)) + Math_fround($14 * $7_1)));
  $14 = Math_fround($14 * $2_1);
  $24_1 = Math_fround(Math_fround(Math_fround($3_1 * $4_1) - Math_fround($6_1 * $1_1)) * $2_1);
  $25 = Math_fround(Math_fround(Math_fround($8_1 * $1_1) - Math_fround($5_1 * $4_1)) * $2_1);
  HEAPF32[$12_1 + 40 >> 2] = Math_fround(Math_fround($21 * $14) + Math_fround($22_1 * $24_1)) + Math_fround($20 * $25);
  HEAPF32[$12_1 + 36 >> 2] = Math_fround(Math_fround($18_1 * $14) + Math_fround($24_1 * $19_1)) + Math_fround($25 * $17_1);
  $13_1 = Math_fround($13_1 * $2_1);
  $3_1 = Math_fround(Math_fround(Math_fround($10 * $1_1) - Math_fround($3_1 * $7_1)) * $2_1);
  $1_1 = Math_fround(Math_fround(Math_fround($5_1 * $7_1) - Math_fround($9_1 * $1_1)) * $2_1);
  HEAPF32[$12_1 + 24 >> 2] = Math_fround(Math_fround($21 * $13_1) + Math_fround($22_1 * $3_1)) + Math_fround($20 * $1_1);
  HEAPF32[$12_1 + 20 >> 2] = Math_fround(Math_fround($18_1 * $13_1) + Math_fround($3_1 * $19_1)) + Math_fround($1_1 * $17_1);
  HEAP32[$12_1 + 12 >> 2] = 0;
  HEAPF32[$12_1 + 32 >> 2] = Math_fround($11 * $25) + Math_fround(Math_fround($23_1 * $14) + Math_fround($16_1 * $24_1));
  HEAPF32[$12_1 + 16 >> 2] = Math_fround($11 * $1_1) + Math_fround(Math_fround($23_1 * $13_1) + Math_fround($16_1 * $3_1));
  $1_1 = Math_fround($26_1 * $2_1);
  $6_1 = Math_fround(Math_fround(Math_fround($6_1 * $7_1) - Math_fround($10 * $4_1)) * $2_1);
  $2_1 = Math_fround(Math_fround(Math_fround($9_1 * $4_1) - Math_fround($8_1 * $7_1)) * $2_1);
  HEAPF32[$12_1 + 8 >> 2] = Math_fround(Math_fround($21 * $1_1) + Math_fround($22_1 * $6_1)) + Math_fround($20 * $2_1);
  HEAPF32[$12_1 + 4 >> 2] = Math_fround(Math_fround($1_1 * $18_1) + Math_fround($6_1 * $19_1)) + Math_fround($2_1 * $17_1);
  HEAPF32[$12_1 >> 2] = Math_fround($11 * $2_1) + Math_fround(Math_fround($23_1 * $1_1) + Math_fround($16_1 * $6_1));
  $27_1 = $0;
  label$9 : {
   label$10 : {
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         label$16 : {
          $15_1 = HEAP32[$0 + 1232 >> 2];
          if ($15_1 >>> 0 <= 5) {
           label$2 : {
            label$3 : {
             switch ($15_1 - 1 | 0) {
             default:
              $1037($12_1, $0 + 1364 | 0);
              break label$2;
             case 0:
              $1038($12_1, $0 + 1364 | 0);
              break label$2;
             case 1:
              $1039($12_1, $0 + 1364 | 0);
              break label$2;
             case 2:
              $1040($12_1, $0 + 1364 | 0);
              break label$2;
             case 3:
              $1041($12_1, $0 + 1364 | 0);
              break label$2;
             case 4:
              break label$3;
             };
            }
            $1042($12_1, $0 + 1364 | 0);
           }
           $15_1 = HEAP32[$0 + 1232 >> 2];
          }
          if ($15_1 >>> 0 <= 5) {
           switch ($15_1 - 1 | 0) {
           case 4:
            break label$11;
           case 3:
            break label$12;
           case 2:
            break label$13;
           case 1:
            break label$14;
           case 0:
            break label$15;
           default:
            break label$16;
           }
          }
          $7_1 = HEAPF32[$0 + 1420 >> 2];
          $4_1 = HEAPF32[$0 + 1416 >> 2];
          $1_1 = HEAPF32[$0 + 1412 >> 2];
          $8_1 = HEAPF32[$0 + 1404 >> 2];
          $6_1 = HEAPF32[$0 + 1400 >> 2];
          $3_1 = HEAPF32[$0 + 1396 >> 2];
          $9_1 = HEAPF32[$0 + 1388 >> 2];
          $5_1 = HEAPF32[$0 + 1384 >> 2];
          $2_1 = HEAPF32[$0 + 1380 >> 2];
          break label$9;
         }
         HEAP32[$0 + 1408 >> 2] = 0;
         HEAP32[$0 + 1424 >> 2] = 0;
         HEAP32[$0 + 1392 >> 2] = 0;
         $2_1 = HEAPF32[$0 + 1316 >> 2];
         $5_1 = HEAPF32[$0 + 1244 >> 2];
         $4_1 = HEAPF32[$0 + 1300 >> 2];
         $10 = HEAPF32[$0 + 1260 >> 2];
         $8_1 = Math_fround(Math_fround($2_1 * $5_1) - Math_fround($4_1 * $10));
         HEAPF32[$0 + 1404 >> 2] = $8_1;
         $11 = HEAPF32[$0 + 1276 >> 2];
         $1_1 = HEAPF32[$0 + 1332 >> 2];
         $6_1 = Math_fround(Math_fround($4_1 * $11) - Math_fround($5_1 * $1_1));
         HEAPF32[$0 + 1400 >> 2] = $6_1;
         $3_1 = Math_fround(Math_fround($1_1 * $10) - Math_fround($2_1 * $11));
         HEAPF32[$0 + 1396 >> 2] = $3_1;
         $7_1 = Math_fround(Math_fround($4_1 * $6_1) - Math_fround($2_1 * $3_1));
         HEAPF32[$0 + 1420 >> 2] = $7_1;
         $4_1 = Math_fround(Math_fround($1_1 * $3_1) - Math_fround($4_1 * $8_1));
         HEAPF32[$0 + 1416 >> 2] = $4_1;
         $1_1 = Math_fround(Math_fround($2_1 * $8_1) - Math_fround($1_1 * $6_1));
         HEAPF32[$0 + 1412 >> 2] = $1_1;
         $9_1 = Math_fround(Math_fround($10 * $3_1) - Math_fround($5_1 * $6_1));
         HEAPF32[$0 + 1388 >> 2] = $9_1;
         $5_1 = Math_fround(Math_fround($5_1 * $8_1) - Math_fround($11 * $3_1));
         HEAPF32[$0 + 1384 >> 2] = $5_1;
         $2_1 = Math_fround(Math_fround($11 * $6_1) - Math_fround($10 * $8_1));
         break label$10;
        }
        HEAP32[$0 + 1424 >> 2] = 0;
        HEAP32[$0 + 1408 >> 2] = 0;
        HEAP32[$0 + 1392 >> 2] = 0;
        $2_1 = HEAPF32[$0 + 1300 >> 2];
        $10 = HEAPF32[$0 + 1256 >> 2];
        $3_1 = HEAPF32[$0 + 1316 >> 2];
        $5_1 = HEAPF32[$0 + 1240 >> 2];
        $7_1 = Math_fround(Math_fround($2_1 * $10) - Math_fround($3_1 * $5_1));
        HEAPF32[$0 + 1420 >> 2] = $7_1;
        $9_1 = HEAPF32[$0 + 1332 >> 2];
        $11 = HEAPF32[$0 + 1272 >> 2];
        $4_1 = Math_fround(Math_fround($5_1 * $9_1) - Math_fround($2_1 * $11));
        HEAPF32[$0 + 1416 >> 2] = $4_1;
        $1_1 = Math_fround(Math_fround($3_1 * $11) - Math_fround($9_1 * $10));
        HEAPF32[$0 + 1412 >> 2] = $1_1;
        $8_1 = Math_fround(Math_fround($3_1 * $1_1) - Math_fround($2_1 * $4_1));
        HEAPF32[$0 + 1404 >> 2] = $8_1;
        $6_1 = Math_fround(Math_fround($2_1 * $7_1) - Math_fround($9_1 * $1_1));
        HEAPF32[$0 + 1400 >> 2] = $6_1;
        $3_1 = Math_fround(Math_fround($9_1 * $4_1) - Math_fround($3_1 * $7_1));
        HEAPF32[$0 + 1396 >> 2] = $3_1;
        $9_1 = Math_fround(Math_fround($5_1 * $4_1) - Math_fround($10 * $1_1));
        HEAPF32[$0 + 1388 >> 2] = $9_1;
        $5_1 = Math_fround(Math_fround($11 * $1_1) - Math_fround($5_1 * $7_1));
        HEAPF32[$0 + 1384 >> 2] = $5_1;
        $2_1 = Math_fround(Math_fround($10 * $7_1) - Math_fround($11 * $4_1));
        break label$10;
       }
       HEAP32[$0 + 1424 >> 2] = 0;
       HEAP32[$0 + 1408 >> 2] = 0;
       HEAP32[$0 + 1392 >> 2] = 0;
       $4_1 = HEAPF32[$0 + 1304 >> 2];
       $3_1 = HEAPF32[$0 + 1260 >> 2];
       $1_1 = HEAPF32[$0 + 1320 >> 2];
       $6_1 = HEAPF32[$0 + 1244 >> 2];
       $9_1 = Math_fround(Math_fround($4_1 * $3_1) - Math_fround($1_1 * $6_1));
       HEAPF32[$0 + 1388 >> 2] = $9_1;
       $8_1 = HEAPF32[$0 + 1336 >> 2];
       $10 = HEAPF32[$0 + 1276 >> 2];
       $5_1 = Math_fround(Math_fround($6_1 * $8_1) - Math_fround($4_1 * $10));
       HEAPF32[$0 + 1384 >> 2] = $5_1;
       $2_1 = Math_fround(Math_fround($1_1 * $10) - Math_fround($8_1 * $3_1));
       HEAPF32[$0 + 1380 >> 2] = $2_1;
       $7_1 = Math_fround(Math_fround($1_1 * $2_1) - Math_fround($4_1 * $5_1));
       HEAPF32[$0 + 1420 >> 2] = $7_1;
       $4_1 = Math_fround(Math_fround($4_1 * $9_1) - Math_fround($8_1 * $2_1));
       HEAPF32[$0 + 1416 >> 2] = $4_1;
       $1_1 = Math_fround(Math_fround($8_1 * $5_1) - Math_fround($1_1 * $9_1));
       HEAPF32[$0 + 1412 >> 2] = $1_1;
       $8_1 = Math_fround(Math_fround($6_1 * $5_1) - Math_fround($3_1 * $2_1));
       HEAPF32[$0 + 1404 >> 2] = $8_1;
       $6_1 = Math_fround(Math_fround($10 * $2_1) - Math_fround($6_1 * $9_1));
       HEAPF32[$0 + 1400 >> 2] = $6_1;
       $3_1 = Math_fround(Math_fround($3_1 * $9_1) - Math_fround($10 * $5_1));
       HEAPF32[$0 + 1396 >> 2] = $3_1;
       break label$9;
      }
      HEAP32[$0 + 1424 >> 2] = 0;
      HEAP32[$0 + 1408 >> 2] = 0;
      HEAP32[$0 + 1392 >> 2] = 0;
      $2_1 = HEAPF32[$0 + 1236 >> 2];
      $10 = HEAPF32[$0 + 1320 >> 2];
      $3_1 = HEAPF32[$0 + 1252 >> 2];
      $5_1 = HEAPF32[$0 + 1304 >> 2];
      $7_1 = Math_fround(Math_fround($2_1 * $10) - Math_fround($3_1 * $5_1));
      HEAPF32[$0 + 1420 >> 2] = $7_1;
      $9_1 = HEAPF32[$0 + 1268 >> 2];
      $11 = HEAPF32[$0 + 1336 >> 2];
      $4_1 = Math_fround(Math_fround($5_1 * $9_1) - Math_fround($2_1 * $11));
      HEAPF32[$0 + 1416 >> 2] = $4_1;
      $1_1 = Math_fround(Math_fround($3_1 * $11) - Math_fround($9_1 * $10));
      HEAPF32[$0 + 1412 >> 2] = $1_1;
      $8_1 = Math_fround(Math_fround($3_1 * $1_1) - Math_fround($2_1 * $4_1));
      HEAPF32[$0 + 1404 >> 2] = $8_1;
      $6_1 = Math_fround(Math_fround($2_1 * $7_1) - Math_fround($9_1 * $1_1));
      HEAPF32[$0 + 1400 >> 2] = $6_1;
      $3_1 = Math_fround(Math_fround($9_1 * $4_1) - Math_fround($3_1 * $7_1));
      HEAPF32[$0 + 1396 >> 2] = $3_1;
      $9_1 = Math_fround(Math_fround($5_1 * $4_1) - Math_fround($10 * $1_1));
      HEAPF32[$0 + 1388 >> 2] = $9_1;
      $5_1 = Math_fround(Math_fround($11 * $1_1) - Math_fround($5_1 * $7_1));
      HEAPF32[$0 + 1384 >> 2] = $5_1;
      $2_1 = Math_fround(Math_fround($10 * $7_1) - Math_fround($11 * $4_1));
      break label$10;
     }
     HEAP32[$0 + 1424 >> 2] = 0;
     HEAP32[$0 + 1408 >> 2] = 0;
     HEAP32[$0 + 1392 >> 2] = 0;
     $4_1 = HEAPF32[$0 + 1240 >> 2];
     $3_1 = HEAPF32[$0 + 1324 >> 2];
     $1_1 = HEAPF32[$0 + 1256 >> 2];
     $6_1 = HEAPF32[$0 + 1308 >> 2];
     $9_1 = Math_fround(Math_fround($4_1 * $3_1) - Math_fround($1_1 * $6_1));
     HEAPF32[$0 + 1388 >> 2] = $9_1;
     $8_1 = HEAPF32[$0 + 1272 >> 2];
     $10 = HEAPF32[$0 + 1340 >> 2];
     $5_1 = Math_fround(Math_fround($6_1 * $8_1) - Math_fround($4_1 * $10));
     HEAPF32[$0 + 1384 >> 2] = $5_1;
     $2_1 = Math_fround(Math_fround($1_1 * $10) - Math_fround($8_1 * $3_1));
     HEAPF32[$0 + 1380 >> 2] = $2_1;
     $7_1 = Math_fround(Math_fround($1_1 * $2_1) - Math_fround($4_1 * $5_1));
     HEAPF32[$0 + 1420 >> 2] = $7_1;
     $4_1 = Math_fround(Math_fround($4_1 * $9_1) - Math_fround($8_1 * $2_1));
     HEAPF32[$0 + 1416 >> 2] = $4_1;
     $1_1 = Math_fround(Math_fround($8_1 * $5_1) - Math_fround($1_1 * $9_1));
     HEAPF32[$0 + 1412 >> 2] = $1_1;
     $8_1 = Math_fround(Math_fround($6_1 * $5_1) - Math_fround($3_1 * $2_1));
     HEAPF32[$0 + 1404 >> 2] = $8_1;
     $6_1 = Math_fround(Math_fround($10 * $2_1) - Math_fround($6_1 * $9_1));
     HEAPF32[$0 + 1400 >> 2] = $6_1;
     $3_1 = Math_fround(Math_fround($3_1 * $9_1) - Math_fround($10 * $5_1));
     HEAPF32[$0 + 1396 >> 2] = $3_1;
     break label$9;
    }
    HEAP32[$0 + 1408 >> 2] = 0;
    HEAP32[$0 + 1424 >> 2] = 0;
    HEAP32[$0 + 1392 >> 2] = 0;
    $2_1 = HEAPF32[$0 + 1252 >> 2];
    $5_1 = HEAPF32[$0 + 1308 >> 2];
    $4_1 = HEAPF32[$0 + 1236 >> 2];
    $10 = HEAPF32[$0 + 1324 >> 2];
    $8_1 = Math_fround(Math_fround($2_1 * $5_1) - Math_fround($4_1 * $10));
    HEAPF32[$0 + 1404 >> 2] = $8_1;
    $11 = HEAPF32[$0 + 1340 >> 2];
    $1_1 = HEAPF32[$0 + 1268 >> 2];
    $6_1 = Math_fround(Math_fround($4_1 * $11) - Math_fround($5_1 * $1_1));
    HEAPF32[$0 + 1400 >> 2] = $6_1;
    $3_1 = Math_fround(Math_fround($1_1 * $10) - Math_fround($2_1 * $11));
    HEAPF32[$0 + 1396 >> 2] = $3_1;
    $7_1 = Math_fround(Math_fround($4_1 * $6_1) - Math_fround($2_1 * $3_1));
    HEAPF32[$0 + 1420 >> 2] = $7_1;
    $4_1 = Math_fround(Math_fround($1_1 * $3_1) - Math_fround($4_1 * $8_1));
    HEAPF32[$0 + 1416 >> 2] = $4_1;
    $1_1 = Math_fround(Math_fround($2_1 * $8_1) - Math_fround($1_1 * $6_1));
    HEAPF32[$0 + 1412 >> 2] = $1_1;
    $9_1 = Math_fround(Math_fround($10 * $3_1) - Math_fround($5_1 * $6_1));
    HEAPF32[$0 + 1388 >> 2] = $9_1;
    $5_1 = Math_fround(Math_fround($5_1 * $8_1) - Math_fround($11 * $3_1));
    HEAPF32[$0 + 1384 >> 2] = $5_1;
    $2_1 = Math_fround(Math_fround($11 * $6_1) - Math_fround($10 * $8_1));
   }
   HEAPF32[$27_1 + 1380 >> 2] = $2_1;
  }
  $10 = $7_1;
  $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($4_1 * $4_1)) + Math_fround($7_1 * $7_1)))));
  HEAPF32[$0 + 1420 >> 2] = $10 * $7_1;
  HEAPF32[$0 + 1416 >> 2] = $4_1 * $7_1;
  HEAPF32[$0 + 1412 >> 2] = $1_1 * $7_1;
  $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($6_1 * $6_1)) + Math_fround($8_1 * $8_1)))));
  HEAPF32[$0 + 1404 >> 2] = $8_1 * $7_1;
  HEAPF32[$0 + 1400 >> 2] = $6_1 * $7_1;
  HEAPF32[$0 + 1396 >> 2] = $3_1 * $7_1;
  $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($2_1 * $2_1) + Math_fround($5_1 * $5_1)) + Math_fround($9_1 * $9_1)))));
  HEAPF32[$0 + 1388 >> 2] = $9_1 * $7_1;
  HEAPF32[$0 + 1384 >> 2] = $5_1 * $7_1;
  HEAPF32[$0 + 1380 >> 2] = $2_1 * $7_1;
  global$0 = $12_1 + 48 | 0;
 }
 
 function $1044($0) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0);
  HEAP32[$0 + 1440 >> 2] = 0;
  $7_1 = HEAPF32[$0 + 1256 >> 2];
  $8_1 = HEAPF32[$0 + 1276 >> 2];
  $9_1 = HEAPF32[$0 + 1260 >> 2];
  $10 = HEAPF32[$0 + 1272 >> 2];
  $17_1 = Math_fround(Math_fround($7_1 * $8_1) - Math_fround($9_1 * $10));
  $2_1 = HEAPF32[$0 + 1236 >> 2];
  $3_1 = HEAPF32[$0 + 1240 >> 2];
  $11 = HEAPF32[$0 + 1268 >> 2];
  $12_1 = HEAPF32[$0 + 1252 >> 2];
  $18_1 = Math_fround(Math_fround($9_1 * $11) - Math_fround($8_1 * $12_1));
  $6_1 = Math_fround(Math_fround($10 * $12_1) - Math_fround($7_1 * $11));
  $4_1 = HEAPF32[$0 + 1244 >> 2];
  $1_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround($17_1 * $2_1) + Math_fround($3_1 * $18_1)) + Math_fround($6_1 * $4_1)));
  $14 = Math_fround(HEAPF32[$0 + 1356 >> 2] - HEAPF32[$0 + 1292 >> 2]);
  $15_1 = Math_fround(HEAPF32[$0 + 1348 >> 2] - HEAPF32[$0 + 1284 >> 2]);
  $16_1 = Math_fround(HEAPF32[$0 + 1352 >> 2] - HEAPF32[$0 + 1288 >> 2]);
  $6_1 = Math_fround(Math_fround($14 * Math_fround(Math_fround(Math_fround($7_1 * $2_1) - Math_fround($12_1 * $3_1)) * $1_1)) + Math_fround(Math_fround($15_1 * Math_fround($6_1 * $1_1)) + Math_fround($16_1 * Math_fround(Math_fround(Math_fround($11 * $3_1) - Math_fround($10 * $2_1)) * $1_1))));
  HEAPF32[$0 + 1436 >> 2] = $6_1;
  $2_1 = Math_fround(Math_fround($14 * Math_fround(Math_fround(Math_fround($12_1 * $4_1) - Math_fround($9_1 * $2_1)) * $1_1)) + Math_fround(Math_fround($15_1 * Math_fround($18_1 * $1_1)) + Math_fround($16_1 * Math_fround(Math_fround(Math_fround($8_1 * $2_1) - Math_fround($11 * $4_1)) * $1_1))));
  HEAPF32[$0 + 1432 >> 2] = $2_1;
  $1_1 = Math_fround(Math_fround($14 * Math_fround(Math_fround(Math_fround($9_1 * $3_1) - Math_fround($7_1 * $4_1)) * $1_1)) + Math_fround(Math_fround($15_1 * Math_fround($17_1 * $1_1)) + Math_fround($16_1 * Math_fround(Math_fround(Math_fround($10 * $4_1) - Math_fround($8_1 * $3_1)) * $1_1))));
  HEAPF32[$0 + 1428 >> 2] = $1_1;
  HEAPF32[$0 + 940 >> 2] = $1_1;
  $3_1 = HEAPF32[$0 + 680 >> 2];
  $4_1 = HEAPF32[$0 + 696 >> 2];
  label$1 : {
   if (!!($3_1 > $4_1)) {
    HEAP32[$0 + 908 >> 2] = 0;
    break label$1;
   }
   HEAPF32[$0 + 908 >> 2] = $1_1 - $3_1;
   $5_1 = 3;
   if ($3_1 == $4_1) {
    break label$1
   }
   HEAPF32[$0 + 924 >> 2] = $1_1 - $4_1;
   $5_1 = 4;
  }
  HEAPF32[$0 + 944 >> 2] = $2_1;
  HEAP32[$0 + 956 >> 2] = $5_1;
  $1_1 = HEAPF32[$0 + 684 >> 2];
  $3_1 = HEAPF32[$0 + 700 >> 2];
  label$3 : {
   if (!($1_1 > $3_1)) {
    HEAPF32[$0 + 912 >> 2] = $2_1 - $1_1;
    $5_1 = 3;
    if ($1_1 == $3_1) {
     break label$3
    }
    HEAPF32[$0 + 928 >> 2] = $2_1 - $3_1;
    $5_1 = 4;
    break label$3;
   }
   HEAP32[$0 + 912 >> 2] = 0;
   $5_1 = 0;
  }
  HEAPF32[$0 + 948 >> 2] = $6_1;
  HEAP32[$0 + 960 >> 2] = $5_1;
  $5_1 = $0 + 964 | 0;
  $1_1 = HEAPF32[$0 + 688 >> 2];
  $2_1 = HEAPF32[$0 + 704 >> 2];
  label$5 : {
   if (!($1_1 > $2_1)) {
    HEAPF32[$0 + 916 >> 2] = $6_1 - $1_1;
    $13_1 = 3;
    if ($1_1 == $2_1) {
     break label$5
    }
    HEAPF32[$0 + 932 >> 2] = $6_1 - $2_1;
    $13_1 = 4;
    break label$5;
   }
   HEAP32[$0 + 916 >> 2] = 0;
   $13_1 = 0;
  }
  HEAP32[$5_1 >> 2] = $13_1;
 }
 
 function $1045($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0);
  $3_1 = HEAPF32[(($1_1 << 2) + $0 | 0) + 1364 >> 2];
  $6_1 = Math_imul($1_1, 88) + $0 | 0;
  $4_1 = HEAPF32[$6_1 + 968 >> 2];
  $5_1 = HEAPF32[$6_1 + 972 >> 2];
  label$1 : {
   if ($4_1 >= $5_1) {
    break label$1
   }
   if (!!($3_1 < $4_1)) {
    $2_1 = $922(Math_fround($4_1 - $3_1));
    label$3 : {
     if (!!($2_1 < Math_fround(-3.1415927410125732))) {
      $2_1 = Math_fround($2_1 + Math_fround(6.2831854820251465));
      break label$3;
     }
     if (!($2_1 > Math_fround(3.1415927410125732))) {
      break label$3
     }
     $2_1 = Math_fround($2_1 + Math_fround(-6.2831854820251465));
    }
    $7_1 = Math_fround(Math_abs($2_1));
    $2_1 = $922(Math_fround($5_1 - $3_1));
    label$5 : {
     if (!!($2_1 < Math_fround(-3.1415927410125732))) {
      $2_1 = Math_fround($2_1 + Math_fround(6.2831854820251465));
      break label$5;
     }
     if (!($2_1 > Math_fround(3.1415927410125732))) {
      break label$5
     }
     $2_1 = Math_fround($2_1 + Math_fround(-6.2831854820251465));
    }
    $3_1 = $7_1 < Math_fround(Math_abs($2_1)) ? $3_1 : Math_fround($3_1 + Math_fround(6.2831854820251465));
    break label$1;
   }
   if (!($3_1 > $5_1)) {
    break label$1
   }
   $2_1 = $922(Math_fround($3_1 - $5_1));
   label$7 : {
    if (!!($2_1 < Math_fround(-3.1415927410125732))) {
     $2_1 = Math_fround($2_1 + Math_fround(6.2831854820251465));
     break label$7;
    }
    if (!($2_1 > Math_fround(3.1415927410125732))) {
     break label$7
    }
    $2_1 = Math_fround($2_1 + Math_fround(-6.2831854820251465));
   }
   $7_1 = Math_fround(Math_abs($2_1));
   $2_1 = $922(Math_fround($3_1 - $4_1));
   label$9 : {
    if (!!($2_1 < Math_fround(-3.1415927410125732))) {
     $2_1 = Math_fround($2_1 + Math_fround(6.2831854820251465));
     break label$9;
    }
    if (!($2_1 > Math_fround(3.1415927410125732))) {
     break label$9
    }
    $2_1 = Math_fround($2_1 + Math_fround(-6.2831854820251465));
   }
   $3_1 = Math_fround(Math_abs($2_1)) < $7_1 ? Math_fround($3_1 + Math_fround(-6.2831854820251465)) : $3_1;
  }
  HEAPF32[$6_1 + 1048 >> 2] = $3_1;
  if (!!($4_1 > $5_1)) {
   $0 = Math_imul($1_1, 88) + $0 | 0;
   HEAP32[$0 + 1040 >> 2] = 0;
   HEAP32[$0 + 1052 >> 2] = 0;
   return;
  }
  $0 = Math_imul($1_1, 88) + $0 | 0;
  HEAPF32[$0 + 1040 >> 2] = $3_1 - $4_1;
  if ($4_1 == $5_1) {
   HEAP32[$0 + 1052 >> 2] = 3;
   return;
  }
  HEAP32[$0 + 1052 >> 2] = 4;
  HEAPF32[$0 + 1044 >> 2] = $3_1 - $5_1;
 }
 
 function $1046($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1036($0, HEAP32[$0 + 28 >> 2] + 4 | 0, HEAP32[$0 + 32 >> 2] + 4 | 0);
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[$0 + 956 >> 2];
     if ($2_1 >>> 0 > 4) {
      break label$3
     }
     $3_1 = 2;
     switch ($2_1 - 1 | 0) {
     case 3:
      break label$2;
     case 0:
     case 1:
     case 2:
      break label$3;
     default:
      break label$1;
     };
    }
    $3_1 = 1;
   }
   HEAP32[$1_1 >> 2] = $3_1;
   $2_1 = $3_1;
  }
  if (HEAPU8[$0 + 792 | 0]) {
   $2_1 = $2_1 + 1 | 0;
   HEAP32[$1_1 >> 2] = $2_1;
  }
  if (HEAPU8[$0 + 798 | 0]) {
   $2_1 = $2_1 + 1 | 0;
   HEAP32[$1_1 >> 2] = $2_1;
  }
  $4_1 = $1_1;
  label$6 : {
   label$7 : {
    label$8 : {
     $3_1 = HEAP32[$0 + 960 >> 2];
     if ($3_1 >>> 0 > 4) {
      break label$8
     }
     label$9 : {
      switch ($3_1 - 1 | 0) {
      case 0:
      case 1:
      case 2:
       break label$8;
      case 3:
       break label$9;
      default:
       break label$6;
      };
     }
     $2_1 = $2_1 + 2 | 0;
     break label$7;
    }
    $2_1 = $2_1 + 1 | 0;
   }
   HEAP32[$4_1 >> 2] = $2_1;
  }
  if (HEAPU8[$0 + 793 | 0]) {
   $2_1 = $2_1 + 1 | 0;
   HEAP32[$1_1 >> 2] = $2_1;
  }
  if (HEAPU8[$0 + 799 | 0]) {
   $2_1 = $2_1 + 1 | 0;
   HEAP32[$1_1 >> 2] = $2_1;
  }
  $4_1 = $1_1;
  label$12 : {
   label$13 : {
    label$14 : {
     $3_1 = HEAP32[$0 + 964 >> 2];
     if ($3_1 >>> 0 > 4) {
      break label$14
     }
     label$15 : {
      switch ($3_1 - 1 | 0) {
      case 0:
      case 1:
      case 2:
       break label$14;
      case 3:
       break label$15;
      default:
       break label$12;
      };
     }
     $2_1 = $2_1 + 2 | 0;
     break label$13;
    }
    $2_1 = $2_1 + 1 | 0;
   }
   HEAP32[$4_1 >> 2] = $2_1;
  }
  if (HEAPU8[$0 + 794 | 0]) {
   $2_1 = $2_1 + 1 | 0;
   HEAP32[$1_1 >> 2] = $2_1;
  }
  if (HEAPU8[$0 + 800 | 0]) {
   HEAP32[$1_1 >> 2] = $2_1 + 1
  }
  $1045($0, 0);
  label$18 : {
   label$19 : {
    label$20 : {
     $3_1 = HEAP32[$0 + 1052 >> 2];
     if ($3_1 >>> 0 > 4) {
      break label$20
     }
     $2_1 = 2;
     switch ($3_1 - 1 | 0) {
     case 3:
      break label$19;
     case 0:
     case 1:
     case 2:
      break label$20;
     default:
      break label$18;
     };
    }
    $2_1 = 1;
   }
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + $2_1;
  }
  if (HEAPU8[$0 + 996 | 0]) {
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1
  }
  if (HEAPU8[$0 + 1016 | 0]) {
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1
  }
  $1045($0, 1);
  label$23 : {
   label$24 : {
    label$25 : {
     $3_1 = HEAP32[$0 + 1140 >> 2];
     if ($3_1 >>> 0 > 4) {
      break label$25
     }
     $2_1 = 2;
     switch ($3_1 - 1 | 0) {
     case 3:
      break label$24;
     case 0:
     case 1:
     case 2:
      break label$25;
     default:
      break label$23;
     };
    }
    $2_1 = 1;
   }
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + $2_1;
  }
  if (HEAPU8[$0 + 1084 | 0]) {
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1
  }
  if (HEAPU8[$0 + 1104 | 0]) {
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1
  }
  $2_1 = 2;
  $1045($0, 2);
  label$28 : {
   label$29 : {
    label$30 : {
     $3_1 = HEAP32[$0 + 1228 >> 2];
     if ($3_1 >>> 0 > 4) {
      break label$30
     }
     switch ($3_1 - 1 | 0) {
     case 3:
      break label$29;
     case 0:
     case 1:
     case 2:
      break label$30;
     default:
      break label$28;
     };
    }
    $2_1 = 1;
   }
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + $2_1;
  }
  if (HEAPU8[$0 + 1172 | 0]) {
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1
  }
  if (HEAPU8[$0 + 1192 | 0]) {
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1
  }
 }
 
 function $1047($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = $0;
  $3_1 = $1_1;
  $1_1 = HEAP32[$0 + 28 >> 2];
  $4_1 = $1_1 + 4 | 0;
  $0 = HEAP32[$0 + 32 >> 2];
  $5_1 = $0 + 4 | 0;
  $6_1 = $1_1 + 372 | 0;
  $7_1 = $0 + 372 | 0;
  $1_1 = $1_1 + 388 | 0;
  $0 = $0 + 388 | 0;
  $1049($2_1, $3_1, $1048($2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $1_1, $0), $4_1, $5_1, $6_1, $7_1, $1_1, $0);
 }
 
 function $1048($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15_1 = 0;
  $10 = global$0 - 32 | 0;
  global$0 = $10;
  HEAP32[$10 + 24 >> 2] = HEAP32[5618];
  $8_1 = HEAP32[5617];
  HEAP32[$10 + 16 >> 2] = HEAP32[5616];
  HEAP32[$10 + 20 >> 2] = $8_1;
  $8_1 = HEAP32[$0 + 1232 >> 2];
  label$1 : {
   if ($8_1 >>> 0 > 5) {
    $8_1 = 1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     label$5 : {
      switch ($8_1 - 1 | 0) {
      default:
       HEAP32[$10 + 16 >> 2] = 0;
       $11 = 2;
       $9_1 = 0;
       break label$4;
      case 0:
       HEAP32[$10 + 16 >> 2] = 0;
       $11 = 1;
       $8_1 = 2;
       break label$3;
      case 1:
       $9_1 = 1;
       HEAP32[$10 + 16 >> 2] = 1;
       $11 = 2;
       $8_1 = 0;
       break label$3;
      case 2:
       $9_1 = 1;
       HEAP32[$10 + 16 >> 2] = 1;
       $8_1 = 2;
       break label$3;
      case 3:
       $9_1 = 2;
       HEAP32[$10 + 16 >> 2] = 2;
       $11 = 1;
       $8_1 = 0;
       break label$3;
      case 4:
       break label$5;
      };
     }
     HEAP32[$10 + 16 >> 2] = 2;
     $9_1 = 2;
    }
    $8_1 = 1;
   }
   HEAP32[$10 + 24 >> 2] = $11;
   HEAP32[$10 + 20 >> 2] = $8_1;
  }
  $11 = Math_imul($9_1, 88) + $0 | 0;
  if (!(HEAPU8[(Math_imul($9_1, 88) + $0 | 0) + 1016 | 0] ? 0 : !(HEAP32[$11 + 1052 >> 2] | HEAPU8[$11 + 996 | 0]))) {
   $8_1 = ($9_1 << 4) + $0 | 0;
   $12_1 = $8_1 + 1388 | 0;
   $13_1 = HEAP32[$12_1 + 4 >> 2];
   $14 = $10 + 8 | 0;
   HEAP32[$14 >> 2] = HEAP32[$12_1 >> 2];
   HEAP32[$14 + 4 >> 2] = $13_1;
   $8_1 = $8_1 + 1380 | 0;
   $12_1 = HEAP32[$8_1 + 4 >> 2];
   HEAP32[$10 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$10 + 4 >> 2] = $12_1;
   $8_1 = HEAP32[$0 + 1456 >> 2] >> ($9_1 << 2) + 12;
   if (!($8_1 & 1)) {
    HEAP32[(Math_imul($9_1, 88) + $0 | 0) + 984 >> 2] = HEAP32[HEAP32[$1_1 + 32 >> 2] >> 2]
   }
   if (!($8_1 & 2)) {
    HEAP32[(Math_imul($9_1, 88) + $0 | 0) + 980 >> 2] = HEAP32[$1_1 + 4 >> 2]
   }
   if (!($8_1 & 4)) {
    HEAP32[(Math_imul($9_1, 88) + $0 | 0) + 992 >> 2] = HEAP32[HEAP32[$1_1 + 32 >> 2] >> 2]
   }
   if (!($8_1 & 8)) {
    HEAP32[(Math_imul($9_1, 88) + $0 | 0) + 988 >> 2] = HEAP32[$1_1 + 4 >> 2]
   }
   $12_1 = $1050($0, $11 + 968 | 0, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $1_1, 0, $10, 1, 0);
   $8_1 = HEAP32[$10 + 20 >> 2];
  }
  $11 = Math_imul($8_1, 88) + $0 | 0;
  if (!(HEAPU8[(Math_imul($8_1, 88) + $0 | 0) + 1016 | 0] ? 0 : !(HEAP32[$11 + 1052 >> 2] | HEAPU8[$11 + 996 | 0]))) {
   $9_1 = ($8_1 << 4) + $0 | 0;
   $13_1 = $9_1 + 1388 | 0;
   $14 = HEAP32[$13_1 + 4 >> 2];
   $15_1 = $10 + 8 | 0;
   HEAP32[$15_1 >> 2] = HEAP32[$13_1 >> 2];
   HEAP32[$15_1 + 4 >> 2] = $14;
   $9_1 = $9_1 + 1380 | 0;
   $13_1 = HEAP32[$9_1 + 4 >> 2];
   HEAP32[$10 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$10 + 4 >> 2] = $13_1;
   $9_1 = HEAP32[$0 + 1456 >> 2] >> ($8_1 << 2) + 12;
   if (!($9_1 & 1)) {
    HEAP32[(Math_imul($8_1, 88) + $0 | 0) + 984 >> 2] = HEAP32[HEAP32[$1_1 + 32 >> 2] >> 2]
   }
   if (!($9_1 & 2)) {
    HEAP32[(Math_imul($8_1, 88) + $0 | 0) + 980 >> 2] = HEAP32[$1_1 + 4 >> 2]
   }
   if (!($9_1 & 4)) {
    HEAP32[(Math_imul($8_1, 88) + $0 | 0) + 992 >> 2] = HEAP32[HEAP32[$1_1 + 32 >> 2] >> 2]
   }
   if (!($9_1 & 8)) {
    HEAP32[(Math_imul($8_1, 88) + $0 | 0) + 988 >> 2] = HEAP32[$1_1 + 4 >> 2]
   }
   $12_1 = $1050($0, $11 + 968 | 0, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $1_1, $12_1, $10, 1, 0) + $12_1 | 0;
  }
  $8_1 = HEAP32[$10 + 24 >> 2];
  $11 = Math_imul($8_1, 88) + $0 | 0;
  if (!(HEAPU8[(Math_imul($8_1, 88) + $0 | 0) + 1016 | 0] ? 0 : !(HEAP32[$11 + 1052 >> 2] | HEAPU8[$11 + 996 | 0]))) {
   $9_1 = ($8_1 << 4) + $0 | 0;
   $13_1 = $9_1 + 1388 | 0;
   $14 = HEAP32[$13_1 + 4 >> 2];
   $15_1 = $10 + 8 | 0;
   HEAP32[$15_1 >> 2] = HEAP32[$13_1 >> 2];
   HEAP32[$15_1 + 4 >> 2] = $14;
   $9_1 = $9_1 + 1380 | 0;
   $13_1 = HEAP32[$9_1 + 4 >> 2];
   HEAP32[$10 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$10 + 4 >> 2] = $13_1;
   $9_1 = HEAP32[$0 + 1456 >> 2] >> ($8_1 << 2) + 12;
   if (!($9_1 & 1)) {
    HEAP32[(Math_imul($8_1, 88) + $0 | 0) + 984 >> 2] = HEAP32[HEAP32[$1_1 + 32 >> 2] >> 2]
   }
   if (!($9_1 & 2)) {
    HEAP32[(Math_imul($8_1, 88) + $0 | 0) + 980 >> 2] = HEAP32[$1_1 + 4 >> 2]
   }
   if (!($9_1 & 4)) {
    HEAP32[(Math_imul($8_1, 88) + $0 | 0) + 992 >> 2] = HEAP32[HEAP32[$1_1 + 32 >> 2] >> 2]
   }
   if (!($9_1 & 8)) {
    HEAP32[(Math_imul($8_1, 88) + $0 | 0) + 988 >> 2] = HEAP32[$1_1 + 4 >> 2]
   }
   $12_1 = $1050($0, $11 + 968 | 0, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $1_1, $12_1, $10, 1, 0) + $12_1 | 0;
  }
  global$0 = $10 + 32 | 0;
  return $12_1;
 }
 
 function $1049($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  var $9_1 = 0, $10 = 0, $11 = 0, $12_1 = 0, $13_1 = 0, $14 = 0.0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0;
  $9_1 = global$0 - 112 | 0;
  global$0 = $9_1;
  $11 = $9_1 + 100 | 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  HEAP32[$9_1 + 108 >> 2] = 0;
  HEAP32[$9_1 + 92 >> 2] = 0;
  HEAP32[$9_1 + 96 >> 2] = 0;
  HEAP8[$9_1 + 88 | 0] = 0;
  HEAP32[$9_1 + 84 >> 2] = 0;
  HEAP8[$9_1 + 80 | 0] = 0;
  HEAP32[$9_1 + 76 >> 2] = 0;
  HEAP8[$9_1 + 72 | 0] = 0;
  HEAP32[$9_1 + 68 >> 2] = 0;
  HEAP8[$9_1 + 64 | 0] = 0;
  HEAP32[$9_1 + 56 >> 2] = 0;
  HEAP32[$9_1 + 60 >> 2] = 1036831949;
  HEAP8[$9_1 + 52 | 0] = 0;
  HEAP32[$9_1 + 48 >> 2] = 0;
  HEAP32[$9_1 + 40 >> 2] = 0;
  HEAP32[$9_1 + 44 >> 2] = 1063675494;
  HEAP32[$9_1 + 32 >> 2] = 0;
  HEAP32[$9_1 + 36 >> 2] = 1045220557;
  HEAP32[$9_1 + 24 >> 2] = 1065353216;
  HEAP32[$9_1 + 28 >> 2] = -1082130432;
  $17_1 = $1_1 + 4 | 0;
  while (1) {
   $12_1 = $0 + $15_1 | 0;
   $11 = HEAPU8[$12_1 + 792 | 0];
   $10 = $0 + $16_1 | 0;
   $18_1 = HEAP32[$10 + 956 >> 2];
   label$2 : {
    label$3 : {
     if ($18_1) {
      break label$3
     }
     $13_1 = $11;
     $11 = 1;
     if ($13_1) {
      break label$3
     }
     $11 = 0;
     if (!HEAPU8[$12_1 + 798 | 0]) {
      break label$2
     }
    }
    HEAP32[$9_1 + 108 >> 2] = $18_1;
    HEAP8[$9_1 + 52 | 0] = $11;
    HEAP32[$9_1 + 32 >> 2] = HEAP32[$10 + 712 >> 2];
    HEAP32[$9_1 + 104 >> 2] = HEAP32[$10 + 940 >> 2];
    HEAP32[$9_1 + 96 >> 2] = HEAP32[$10 + 908 >> 2];
    HEAP32[$9_1 + 100 >> 2] = HEAP32[$10 + 924 >> 2];
    HEAP8[$9_1 + 64 | 0] = HEAPU8[$12_1 + 795 | 0];
    HEAP32[$9_1 + 68 >> 2] = HEAP32[$10 + 804 >> 2];
    HEAP8[$9_1 + 72 | 0] = HEAPU8[$12_1 + 798 | 0];
    HEAP32[$9_1 + 76 >> 2] = HEAP32[$10 + 820 >> 2];
    HEAP8[$9_1 + 80 | 0] = HEAPU8[$12_1 + 836 | 0];
    HEAP32[$9_1 + 84 >> 2] = HEAP32[$10 + 840 >> 2];
    HEAP8[$9_1 + 88 | 0] = HEAPU8[$12_1 + 856 | 0];
    HEAP32[$9_1 + 92 >> 2] = HEAP32[$10 + 860 >> 2];
    HEAP32[$9_1 + 28 >> 2] = HEAP32[$10 + 696 >> 2];
    HEAP32[$9_1 + 24 >> 2] = HEAP32[$10 + 680 >> 2];
    HEAP32[$9_1 + 60 >> 2] = HEAP32[$10 + 892 >> 2];
    HEAP32[$9_1 + 56 >> 2] = HEAP32[$10 + 876 >> 2];
    HEAP32[$9_1 + 20 >> 2] = 0;
    HEAP32[$9_1 + 8 >> 2] = HEAP32[$10 + 1236 >> 2];
    HEAP32[$9_1 + 12 >> 2] = HEAP32[$10 + 1252 >> 2];
    HEAP32[$9_1 + 16 >> 2] = HEAP32[$10 + 1268 >> 2];
    $13_1 = $9_1;
    $11 = HEAP32[$0 + 1456 >> 2] >> $16_1;
    $12_1 = $10 + 744 | 0;
    label$4 : {
     if ($11 & 1) {
      break label$4
     }
     $12_1 = HEAP32[$1_1 + 32 >> 2];
    }
    HEAP32[$13_1 + 40 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$9_1 + 36 >> 2] = HEAP32[($11 & 2 ? $10 + 728 | 0 : $17_1) >> 2];
    HEAP32[$9_1 + 48 >> 2] = HEAP32[($11 & 4 ? $10 + 776 | 0 : HEAP32[$1_1 + 32 >> 2]) >> 2];
    HEAP32[$9_1 + 44 >> 2] = HEAP32[($11 & 8 ? $10 + 760 | 0 : $17_1) >> 2];
    $13_1 = 1;
    $10 = (($15_1 + 2 & 255) >>> 0) % 3 | 0;
    $11 = Math_imul((($15_1 + 1 & 255) >>> 0) % 3 | 0, 88) + $0 | 0;
    $12_1 = HEAP32[$11 + 1052 >> 2] + -1 | 0;
    label$8 : {
     if ($12_1 >>> 0 <= 3) {
      label$10 : {
       switch ($12_1 - 2 | 0) {
       case 0:
        $14 = +HEAPF32[$11 + 1040 >> 2];
        $13_1 = $14 < -.001 | $14 > .001;
        break label$8;
       case 1:
        break label$10;
       default:
        break label$8;
       };
      }
      if (+HEAPF32[$11 + 1040 >> 2] < -.001) {
       break label$8
      }
      $13_1 = +HEAPF32[$11 + 1044 >> 2] > .001;
      break label$8;
     }
     $13_1 = 0;
    }
    $11 = 1;
    $10 = Math_imul($10, 88) + $0 | 0;
    $12_1 = HEAP32[$10 + 1052 >> 2] + -1 | 0;
    label$12 : {
     if ($12_1 >>> 0 > 3) {
      break label$12
     }
     label$13 : {
      label$14 : {
       switch ($12_1 - 2 | 0) {
       case 0:
        $14 = +HEAPF32[$10 + 1040 >> 2];
        if ($14 < -.001 | $14 > .001) {
         break label$13
        }
        break label$12;
       case 1:
        break label$14;
       default:
        break label$13;
       };
      }
      if (+HEAPF32[$10 + 1040 >> 2] < -.001) {
       break label$13
      }
      if (!(+HEAPF32[$10 + 1044 >> 2] > .001)) {
       break label$12
      }
     }
     $11 = 0;
    }
    $2_1 = $1050($0, $9_1 + 24 | 0, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $1_1, $2_1, $9_1 + 8 | 0, 0, $13_1 ? $11 : 1) + $2_1 | 0;
   }
   $15_1 = $15_1 + 1 | 0;
   $16_1 = $16_1 + 4 | 0;
   if (($16_1 | 0) != 12) {
    continue
   }
   break;
  };
  global$0 = $9_1 + 112 | 0;
 }
 
 function $1050($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10, $11, $12_1) {
  var $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0);
  $9_1 = Math_imul(HEAP32[$8_1 + 24 >> 2], $9_1);
  $16_1 = HEAP32[$1_1 + 84 >> 2] + -3 | 0;
  label$1 : {
   if ($16_1 >>> 0 > 1) {
    $16_1 = 0;
    break label$1;
   }
   label$3 : {
    if (!($16_1 - 1)) {
     label$6 : {
      if ($11) {
       $13_1 = HEAPF32[$10 >> 2];
       $15_1 = HEAPF32[$10 + 4 >> 2];
       $14 = Math_fround(Math_fround(HEAPF32[$6_1 >> 2] * $13_1) + Math_fround(HEAPF32[$6_1 + 4 >> 2] * $15_1));
       $17_1 = HEAPF32[$10 + 8 >> 2];
       $20 = Math_fround(HEAPF32[$6_1 + 8 >> 2] * $17_1);
       $18_1 = $11;
       $16_1 = $7_1;
       break label$6;
      }
      $13_1 = HEAPF32[$10 >> 2];
      $15_1 = HEAPF32[$10 + 4 >> 2];
      $14 = Math_fround(Math_fround(HEAPF32[$4_1 >> 2] * $13_1) + Math_fround(HEAPF32[$4_1 + 4 >> 2] * $15_1));
      $17_1 = HEAPF32[$10 + 8 >> 2];
      $20 = Math_fround(HEAPF32[$4_1 + 8 >> 2] * $17_1);
      $16_1 = $5_1;
     }
     $22_1 = HEAPF32[$16_1 + 8 >> 2];
     $23_1 = HEAPF32[$16_1 >> 2];
     $21 = HEAPF32[$16_1 + 4 >> 2];
     $1051($0, $2_1, $3_1, $8_1, $9_1, $10, $18_1, $12_1);
     $16_1 = HEAP32[$8_1 + 28 >> 2] + ($9_1 << 2) | 0;
     $24_1 = Math_fround(($11 ? -1 : 1) | 0);
     $19_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$8_1 >> 2] * HEAPF32[$1_1 + 12 >> 2]) * HEAPF32[$1_1 + 72 >> 2]) * $24_1);
     HEAPF32[$16_1 >> 2] = $19_1;
     $13_1 = Math_fround(Math_fround($14 + $20) - Math_fround(Math_fround(Math_fround($13_1 * $23_1) + Math_fround($15_1 * $21)) + Math_fround($17_1 * $22_1)));
     $14 = Math_fround($19_1 - Math_fround($13_1 * HEAPF32[$1_1 + 12 >> 2]));
     label$8 : {
      if ($11) {
       if (!($14 > Math_fround(0.0))) {
        break label$8
       }
       $14 = Math_fround($13_1 * Math_fround(-HEAPF32[$1_1 + 8 >> 2]));
       if (!($14 > $19_1)) {
        break label$8
       }
       HEAPF32[$16_1 >> 2] = $14;
       break label$8;
      }
      if (!($14 < Math_fround(0.0))) {
       break label$8
      }
      $14 = Math_fround($13_1 * Math_fround(-HEAPF32[$1_1 + 8 >> 2]));
      if (!($14 < $19_1)) {
       break label$8
      }
      HEAPF32[$16_1 >> 2] = $14;
     }
     $16_1 = $9_1 << 2;
     HEAPF32[$16_1 + HEAP32[$8_1 + 36 >> 2] >> 2] = $11 ? Math_fround(0.0) : Math_fround(-3402823466385288598117041.0e14);
     HEAPF32[$16_1 + HEAP32[$8_1 + 40 >> 2] >> 2] = $11 ? Math_fround(3402823466385288598117041.0e14) : Math_fround(0.0);
     HEAP32[$16_1 + HEAP32[$8_1 + 32 >> 2] >> 2] = HEAP32[$1_1 + 16 >> 2];
     $9_1 = HEAP32[$8_1 + 24 >> 2] + $9_1 | 0;
     $1051($0, $2_1, $3_1, $8_1, $9_1, $10, $11, $12_1);
     $16_1 = HEAP32[$8_1 + 28 >> 2] + ($9_1 << 2) | 0;
     $14 = Math_fround(Math_fround(Math_fround(HEAPF32[$8_1 >> 2] * HEAPF32[$1_1 + 12 >> 2]) * HEAPF32[$1_1 + 76 >> 2]) * $24_1);
     HEAPF32[$16_1 >> 2] = $14;
     $15_1 = Math_fround($14 - Math_fround($13_1 * HEAPF32[$1_1 + 12 >> 2]));
     $18_1 = $1_1 + 16 | 0;
     label$10 : {
      if ($11) {
       if (!($15_1 < Math_fround(0.0))) {
        break label$10
       }
       $13_1 = Math_fround($13_1 * Math_fround(-HEAPF32[$1_1 + 8 >> 2]));
       if (!($13_1 < $14)) {
        break label$10
       }
       HEAPF32[$16_1 >> 2] = $13_1;
       break label$10;
      }
      if (!($15_1 > Math_fround(0.0))) {
       break label$10
      }
      $13_1 = Math_fround($13_1 * Math_fround(-HEAPF32[$1_1 + 8 >> 2]));
      if (!($13_1 > $14)) {
       break label$10
      }
      HEAPF32[$16_1 >> 2] = $13_1;
     }
     $16_1 = $9_1 << 2;
     HEAPF32[$16_1 + HEAP32[$8_1 + 36 >> 2] >> 2] = $11 ? Math_fround(-3402823466385288598117041.0e14) : Math_fround(0.0);
     HEAPF32[HEAP32[$8_1 + 40 >> 2] + $16_1 >> 2] = $11 ? Math_fround(0.0) : Math_fround(3402823466385288598117041.0e14);
     $16_1 = 2;
     break label$3;
    }
    $1051($0, $2_1, $3_1, $8_1, $9_1, $10, $11, $12_1);
    $18_1 = $9_1 << 2;
    HEAPF32[$18_1 + HEAP32[$8_1 + 28 >> 2] >> 2] = Math_fround(Math_fround(HEAPF32[$8_1 >> 2] * HEAPF32[$1_1 + 12 >> 2]) * HEAPF32[$1_1 + 72 >> 2]) * Math_fround(($11 ? -1 : 1) | 0);
    HEAP32[$18_1 + HEAP32[$8_1 + 36 >> 2] >> 2] = -8388609;
    HEAP32[$18_1 + HEAP32[$8_1 + 40 >> 2] >> 2] = 2139095039;
    $18_1 = $1_1 + 16 | 0;
    $16_1 = 1;
   }
   HEAP32[HEAP32[$8_1 + 32 >> 2] + ($9_1 << 2) >> 2] = HEAP32[$18_1 >> 2];
   $9_1 = HEAP32[$8_1 + 24 >> 2] + $9_1 | 0;
  }
  label$12 : {
   if (!HEAPU8[$1_1 + 28 | 0]) {
    break label$12
   }
   if (!HEAPU8[$1_1 + 40 | 0]) {
    $1051($0, $2_1, $3_1, $8_1, $9_1, $10, $11, $12_1);
    $13_1 = HEAPF32[$1_1 + 32 >> 2];
    $13_1 = $924(HEAPF32[$1_1 + 80 >> 2], HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], $11 ? $13_1 : Math_fround(-$13_1), Math_fround(HEAPF32[$8_1 >> 2] * HEAPF32[$1_1 + 20 >> 2]));
    $18_1 = $9_1 << 2;
    HEAPF32[$18_1 + HEAP32[$8_1 + 28 >> 2] >> 2] = $13_1 * HEAPF32[$1_1 + 32 >> 2];
    HEAPF32[$18_1 + HEAP32[$8_1 + 36 >> 2] >> 2] = -HEAPF32[$1_1 + 36 >> 2];
    HEAP32[$18_1 + HEAP32[$8_1 + 40 >> 2] >> 2] = HEAP32[$1_1 + 36 >> 2];
    HEAP32[$18_1 + HEAP32[$8_1 + 32 >> 2] >> 2] = HEAP32[$1_1 + 24 >> 2];
    $16_1 = $16_1 + 1 | 0;
    $9_1 = HEAP32[$8_1 + 24 >> 2] + $9_1 | 0;
    if (!HEAPU8[$1_1 + 28 | 0] | !HEAPU8[$1_1 + 40 | 0]) {
     break label$12
    }
   }
   $14 = HEAPF32[$1_1 + 44 >> 2];
   $13_1 = Math_fround(HEAPF32[$1_1 + 80 >> 2] - $14);
   label$14 : {
    if (!$11) {
     break label$14
    }
    $18_1 = $13_1 > Math_fround(3.1415927410125732);
    $14 = $18_1 ? Math_fround($14 + Math_fround(6.2831854820251465)) : $14;
    $13_1 = $18_1 ? Math_fround($13_1 + Math_fround(-6.2831854820251465)) : $13_1;
    if (!($13_1 < Math_fround(-3.1415927410125732))) {
     break label$14
    }
    $14 = Math_fround($14 + Math_fround(-6.2831854820251465));
    $13_1 = Math_fround($13_1 + Math_fround(6.2831854820251465));
   }
   $1051($0, $2_1, $3_1, $8_1, $9_1, $10, $11, $12_1);
   $15_1 = Math_fround(0.0);
   $17_1 = HEAPF32[$1_1 + 32 >> 2];
   $19_1 = $13_1 < Math_fround(0.0) ? Math_fround(-$17_1) : $17_1;
   if ($13_1 != Math_fround(0.0)) {
    $20 = Math_fround(-$19_1);
    $21 = HEAPF32[$1_1 + 80 >> 2];
    $15_1 = HEAPF32[$1_1 >> 2];
    $17_1 = HEAPF32[$1_1 + 4 >> 2];
    label$16 : {
     if (!!($15_1 > $17_1)) {
      $17_1 = $13_1 < Math_fround(0.0) ? $14 : Math_fround(3402823466385288598117041.0e14);
      $13_1 = $13_1 > Math_fround(0.0) ? $14 : Math_fround(-3402823466385288598117041.0e14);
      break label$16;
     }
     $17_1 = $13_1 < Math_fround(0.0) ? ($14 < $17_1 ? $14 : $17_1) : $17_1;
     $13_1 = $13_1 > Math_fround(0.0) ? ($14 > $15_1 ? $14 : $15_1) : $15_1;
    }
    $15_1 = $924($21, $13_1, $17_1, $20, Math_fround(HEAPF32[$8_1 >> 2] * HEAPF32[$1_1 + 20 >> 2]));
   }
   $18_1 = $9_1 << 2;
   HEAPF32[$18_1 + HEAP32[$8_1 + 28 >> 2] >> 2] = Math_fround($19_1 * $15_1) * Math_fround(($11 ? -1 : 1) | 0);
   HEAPF32[$18_1 + HEAP32[$8_1 + 36 >> 2] >> 2] = -HEAPF32[$1_1 + 36 >> 2];
   HEAP32[$18_1 + HEAP32[$8_1 + 40 >> 2] >> 2] = HEAP32[$1_1 + 36 >> 2];
   HEAP32[$18_1 + HEAP32[$8_1 + 32 >> 2] >> 2] = HEAP32[$1_1 + 24 >> 2];
   $16_1 = $16_1 + 1 | 0;
   $9_1 = HEAP32[$8_1 + 24 >> 2] + $9_1 | 0;
  }
  if (HEAPU8[$1_1 + 48 | 0]) {
   $21 = HEAPF32[$1_1 + 68 >> 2];
   $24_1 = HEAPF32[$1_1 + 80 >> 2];
   $1051($0, $2_1, $3_1, $8_1, $9_1, $10, $11, $12_1);
   $13_1 = HEAPF32[$8_1 >> 2];
   $14 = HEAPF32[$1_1 + 52 >> 2];
   $17_1 = HEAPF32[$1_1 + 60 >> 2];
   $21 = Math_fround($24_1 - $21);
   label$19 : {
    if ($11) {
     $22_1 = HEAPF32[$10 + 8 >> 2];
     $23_1 = Math_fround(HEAPF32[$6_1 + 8 >> 2] * $22_1);
     $15_1 = HEAPF32[$10 >> 2];
     $19_1 = HEAPF32[$10 + 4 >> 2];
     $20 = Math_fround(Math_fround(HEAPF32[$6_1 >> 2] * $15_1) + Math_fround(HEAPF32[$6_1 + 4 >> 2] * $19_1));
     break label$19;
    }
    $22_1 = HEAPF32[$10 + 8 >> 2];
    $23_1 = Math_fround(HEAPF32[$4_1 + 8 >> 2] * $22_1);
    $7_1 = $5_1;
    $15_1 = HEAPF32[$10 >> 2];
    $19_1 = HEAPF32[$10 + 4 >> 2];
    $20 = Math_fround(Math_fround(HEAPF32[$4_1 >> 2] * $15_1) + Math_fround(HEAPF32[$4_1 + 4 >> 2] * $19_1));
   }
   $19_1 = Math_fround(Math_fround($20 + $23_1) - Math_fround(Math_fround(Math_fround($15_1 * HEAPF32[$7_1 >> 2]) + Math_fround($19_1 * HEAPF32[$7_1 + 4 >> 2])) + Math_fround($22_1 * HEAPF32[$7_1 + 8 >> 2])));
   $13_1 = Math_fround(Math_fround(1.0) / $13_1);
   $15_1 = Math_fround(Math_fround(1.0) / HEAPF32[HEAP32[$0 + 32 >> 2] + 404 >> 2]);
   $20 = Math_fround(Math_fround(1.0) / HEAPF32[HEAP32[$0 + 28 >> 2] + 404 >> 2]);
   $15_1 = $20 > $15_1 ? $15_1 : $20;
   if (!(!HEAPU8[$1_1 + 56 | 0] | Math_fround($13_1 * Math_fround(Math_sqrt(Math_fround($14 / $15_1)))) > Math_fround(.25) ^ 1)) {
    $14 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(1.0) / $13_1) / $13_1) * Math_fround(.0625)) * $15_1)
   }
   $0 = $9_1 << 2;
   $14 = Math_fround($13_1 * Math_fround($21 * $14));
   $17_1 = Math_fround($19_1 * Math_fround(-(Math_fround($17_1 * $13_1) > $15_1 ? (HEAPU8[$1_1 + 64 | 0] ? Math_fround($15_1 / $13_1) : $17_1) : $17_1)));
   $15_1 = Math_fround(($11 ? -1 : 1) | 0);
   $13_1 = Math_fround($13_1 * Math_fround($17_1 * $15_1));
   $14 = Math_fround($14 + $13_1);
   HEAPF32[$0 + HEAP32[$8_1 + 28 >> 2] >> 2] = $19_1 + Math_fround($14 * $15_1);
   $1_1 = $14 < $13_1;
   $15_1 = $1_1 ? $13_1 : $14;
   $13_1 = $1_1 ? $14 : $13_1;
   label$22 : {
    if (!$11) {
     HEAPF32[$0 + HEAP32[$8_1 + 36 >> 2] >> 2] = Math_min($13_1, Math_fround(0.0));
     break label$22;
    }
    HEAPF32[$0 + HEAP32[$8_1 + 36 >> 2] >> 2] = Math_min(Math_fround(-$15_1), Math_fround(0.0));
    $15_1 = Math_fround(-$13_1);
   }
   $0 = $9_1 << 2;
   HEAPF32[$0 + HEAP32[$8_1 + 40 >> 2] >> 2] = Math_max($15_1, Math_fround(0.0));
   HEAP32[$0 + HEAP32[$8_1 + 32 >> 2] >> 2] = 0;
   $16_1 = $16_1 + 1 | 0;
  }
  return $16_1;
 }
 
 function $1051($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = Math_fround(0), $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20 = 0, $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0);
  $9_1 = global$0 - 16 | 0;
  $16_1 = $4_1 << 2;
  $12_1 = HEAP32[($6_1 ? 12 : 8) + $3_1 >> 2];
  HEAP32[$16_1 + $12_1 >> 2] = HEAP32[$5_1 >> 2];
  $17_1 = $4_1 + 1 | 0;
  $18_1 = $17_1 << 2;
  HEAP32[$12_1 + $18_1 >> 2] = HEAP32[$5_1 + 4 >> 2];
  $19_1 = $4_1 + 2 | 0;
  $20 = $19_1 << 2;
  HEAP32[$12_1 + $20 >> 2] = HEAP32[$5_1 + 8 >> 2];
  $12_1 = HEAP32[($6_1 ? 20 : 16) + $3_1 >> 2];
  HEAPF32[$12_1 + $16_1 >> 2] = -HEAPF32[$5_1 >> 2];
  HEAPF32[$12_1 + $18_1 >> 2] = -HEAPF32[$5_1 + 4 >> 2];
  HEAPF32[$12_1 + $20 >> 2] = -HEAPF32[$5_1 + 8 >> 2];
  if (!$6_1) {
   HEAP32[$9_1 + 12 >> 2] = 0;
   $8_1 = Math_fround(HEAPF32[$0 + 1284 >> 2] - HEAPF32[$1_1 + 48 >> 2]);
   $10 = HEAPF32[$5_1 + 4 >> 2];
   $13_1 = Math_fround(HEAPF32[$0 + 1288 >> 2] - HEAPF32[$1_1 + 52 >> 2]);
   $11 = HEAPF32[$5_1 >> 2];
   $21 = Math_fround(Math_fround($8_1 * $10) - Math_fround($13_1 * $11));
   HEAPF32[$9_1 + 8 >> 2] = $21;
   $14 = Math_fround(HEAPF32[$0 + 1292 >> 2] - HEAPF32[$1_1 + 56 >> 2]);
   $15_1 = $8_1;
   $8_1 = HEAPF32[$5_1 + 8 >> 2];
   $22_1 = Math_fround(Math_fround($11 * $14) - Math_fround($15_1 * $8_1));
   HEAPF32[$9_1 + 4 >> 2] = $22_1;
   $14 = Math_fround(Math_fround($13_1 * $8_1) - Math_fround($14 * $10));
   HEAPF32[$9_1 >> 2] = $14;
   $23_1 = Math_fround(HEAPF32[$0 + 1352 >> 2] - HEAPF32[$2_1 + 52 >> 2]);
   $24_1 = Math_fround(HEAPF32[$0 + 1356 >> 2] - HEAPF32[$2_1 + 56 >> 2]);
   $13_1 = Math_fround(Math_fround($8_1 * $23_1) - Math_fround($10 * $24_1));
   $15_1 = Math_fround(HEAPF32[$0 + 1348 >> 2] - HEAPF32[$2_1 + 48 >> 2]);
   $10 = Math_fround(Math_fround($10 * $15_1) - Math_fround($23_1 * $11));
   $11 = Math_fround(Math_fround($24_1 * $11) - Math_fround($15_1 * $8_1));
   if (!(!HEAPU8[$0 + 1452 | 0] | $7_1)) {
    $8_1 = HEAPF32[$0 + 1444 >> 2];
    HEAPF32[$9_1 + 8 >> 2] = $21 * $8_1;
    HEAPF32[$9_1 + 4 >> 2] = $22_1 * $8_1;
    HEAPF32[$9_1 >> 2] = $14 * $8_1;
    $8_1 = HEAPF32[$0 + 1448 >> 2];
    $10 = Math_fround($10 * $8_1);
    $13_1 = Math_fround($13_1 * $8_1);
    $11 = Math_fround($11 * $8_1);
   }
   $1_1 = HEAP32[$9_1 + 4 >> 2];
   $2_1 = $4_1 << 2;
   $0 = $2_1 + HEAP32[$3_1 + 12 >> 2] | 0;
   HEAP32[$0 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $1_1;
   HEAP32[$0 + 8 >> 2] = HEAP32[$9_1 + 8 >> 2];
   $0 = HEAP32[$3_1 + 20 >> 2];
   HEAPF32[$0 + $2_1 >> 2] = -$13_1;
   HEAPF32[$0 + ($17_1 << 2) >> 2] = -$11;
   HEAPF32[$0 + ($19_1 << 2) >> 2] = -$10;
  }
 }
 
 function $1052($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   if ($3_1 >>> 0 <= 2) {
    $1_1 = $1_1 + -1 | 0;
    if ($1_1 >>> 0 > 3) {
     break label$1
    }
    label$3 : {
     switch ($1_1 - 1 | 0) {
     case 0:
      $1_1 = $3_1 << 2;
      HEAPF32[($1_1 + $0 | 0) + 728 >> 2] = $2_1;
      HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 2 << $1_1;
      return;
     case 2:
      $1_1 = $3_1 << 2;
      HEAPF32[($1_1 + $0 | 0) + 744 >> 2] = $2_1;
      HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 1 << $1_1;
      return;
     default:
      $1_1 = $3_1 << 2;
      HEAPF32[($1_1 + $0 | 0) + 760 >> 2] = $2_1;
      HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 8 << $1_1;
      return;
     case 1:
      break label$3;
     };
    }
    $1_1 = $3_1 << 2;
    HEAPF32[($1_1 + $0 | 0) + 776 >> 2] = $2_1;
    HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 4 << $1_1;
    return;
   }
   $4_1 = $3_1 + -3 | 0;
   if ($4_1 >>> 0 > 2) {
    break label$1
   }
   $1_1 = $1_1 + -1 | 0;
   if ($1_1 >>> 0 > 3) {
    break label$1
   }
   label$7 : {
    switch ($1_1 - 1 | 0) {
    case 0:
     HEAPF32[(Math_imul($4_1, 88) + $0 | 0) + 980 >> 2] = $2_1;
     HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 2 << ($3_1 << 2);
     return;
    case 2:
     HEAPF32[(Math_imul($4_1, 88) + $0 | 0) + 984 >> 2] = $2_1;
     HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 1 << ($3_1 << 2);
     return;
    default:
     HEAPF32[(Math_imul($4_1, 88) + $0 | 0) + 988 >> 2] = $2_1;
     HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 8 << ($3_1 << 2);
     return;
    case 1:
     break label$7;
    };
   }
   HEAPF32[(Math_imul($4_1, 88) + $0 | 0) + 992 >> 2] = $2_1;
   HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 4 << ($3_1 << 2);
  }
 }
 
 function $1053($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0);
  if ($2_1 >>> 0 <= 2) {
   $1_1 = $1_1 + -1 | 0;
   if ($1_1 >>> 0 > 3) {
    return Math_fround(Math_fround(0.0))
   }
   label$3 : {
    switch ($1_1 - 1 | 0) {
    case 0:
     return Math_fround(HEAPF32[(($2_1 << 2) + $0 | 0) + 728 >> 2]);
    case 2:
     return Math_fround(HEAPF32[(($2_1 << 2) + $0 | 0) + 744 >> 2]);
    default:
     return Math_fround(HEAPF32[(($2_1 << 2) + $0 | 0) + 760 >> 2]);
    case 1:
     break label$3;
    };
   }
   return Math_fround(HEAPF32[(($2_1 << 2) + $0 | 0) + 776 >> 2]);
  }
  $2_1 = $2_1 + -3 | 0;
  label$7 : {
   if ($2_1 >>> 0 > 2) {
    break label$7
   }
   $1_1 = $1_1 + -1 | 0;
   if ($1_1 >>> 0 > 3) {
    break label$7
   }
   label$8 : {
    switch ($1_1 - 1 | 0) {
    case 0:
     return Math_fround(HEAPF32[(Math_imul($2_1, 88) + $0 | 0) + 980 >> 2]);
    case 2:
     return Math_fround(HEAPF32[(Math_imul($2_1, 88) + $0 | 0) + 984 >> 2]);
    default:
     return Math_fround(HEAPF32[(Math_imul($2_1, 88) + $0 | 0) + 988 >> 2]);
    case 1:
     break label$8;
    };
   }
   $3_1 = HEAPF32[(Math_imul($2_1, 88) + $0 | 0) + 992 >> 2];
  }
  return Math_fround($3_1);
 }
 
 function $1054($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 21028;
  $80($0);
 }
 
 function $1055($0, $1_1, $2_1, $3_1, $4_1) {
  $1035($0, $1_1, $2_1, $3_1, $4_1);
  HEAP32[$0 >> 2] = 22532;
  $1_1 = $0 + 1144 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 1056 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0 + 968 >> 2] = 0;
  HEAP32[$0 + 972 >> 2] = 0;
  HEAP32[$0 + 680 >> 2] = 0;
  HEAP32[$0 + 684 >> 2] = 0;
  $1_1 = $0 + 688 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 696 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $0 = $0 + 704 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $1059($0) {
  $0 = $0 | 0;
  return 644;
 }
 
 function $1060($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $925($0, $1_1, $2_1);
  HEAP32[$1_1 + 52 >> 2] = HEAP32[$0 + 48 >> 2];
  HEAP32[$1_1 + 56 >> 2] = HEAP32[$0 + 52 >> 2];
  HEAP32[$1_1 + 60 >> 2] = HEAP32[$0 + 56 >> 2];
  HEAP32[$1_1 + 64 >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$1_1 + 68 >> 2] = HEAP32[$0 - -64 >> 2];
  HEAP32[$1_1 + 72 >> 2] = HEAP32[$0 + 68 >> 2];
  HEAP32[$1_1 + 76 >> 2] = HEAP32[$0 + 72 >> 2];
  HEAP32[$1_1 + 80 >> 2] = HEAP32[$0 + 76 >> 2];
  HEAP32[$1_1 + 84 >> 2] = HEAP32[$0 + 80 >> 2];
  HEAP32[$1_1 + 88 >> 2] = HEAP32[$0 + 84 >> 2];
  HEAP32[$1_1 + 92 >> 2] = HEAP32[$0 + 88 >> 2];
  HEAP32[$1_1 + 96 >> 2] = HEAP32[$0 + 92 >> 2];
  HEAP32[$1_1 + 100 >> 2] = HEAP32[$0 + 96 >> 2];
  HEAP32[$1_1 + 104 >> 2] = HEAP32[$0 + 100 >> 2];
  HEAP32[$1_1 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
  HEAP32[$1_1 + 112 >> 2] = HEAP32[$0 + 108 >> 2];
  HEAP32[$1_1 + 116 >> 2] = HEAP32[$0 + 112 >> 2];
  HEAP32[$1_1 + 120 >> 2] = HEAP32[$0 + 116 >> 2];
  HEAP32[$1_1 + 124 >> 2] = HEAP32[$0 + 120 >> 2];
  HEAP32[$1_1 + 128 >> 2] = HEAP32[$0 + 124 >> 2];
  HEAP32[$1_1 + 132 >> 2] = HEAP32[$0 + 128 >> 2];
  HEAP32[$1_1 + 136 >> 2] = HEAP32[$0 + 132 >> 2];
  HEAP32[$1_1 + 140 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$1_1 + 144 >> 2] = HEAP32[$0 + 140 >> 2];
  HEAP32[$1_1 + 148 >> 2] = HEAP32[$0 + 144 >> 2];
  HEAP32[$1_1 + 152 >> 2] = HEAP32[$0 + 148 >> 2];
  HEAP32[$1_1 + 156 >> 2] = HEAP32[$0 + 152 >> 2];
  HEAP32[$1_1 + 160 >> 2] = HEAP32[$0 + 156 >> 2];
  HEAP32[$1_1 + 164 >> 2] = HEAP32[$0 + 160 >> 2];
  HEAP32[$1_1 + 168 >> 2] = HEAP32[$0 + 164 >> 2];
  HEAP32[$1_1 + 172 >> 2] = HEAP32[$0 + 168 >> 2];
  HEAP32[$1_1 + 176 >> 2] = HEAP32[$0 + 172 >> 2];
  HEAP32[$1_1 + 428 >> 2] = HEAP32[$0 + 968 >> 2];
  HEAP32[$1_1 + 412 >> 2] = HEAP32[$0 + 972 >> 2];
  HEAP32[$1_1 + 444 >> 2] = HEAP32[$0 + 976 >> 2];
  HEAP32[$1_1 + 460 >> 2] = HEAP32[$0 + 980 >> 2];
  HEAP32[$1_1 + 476 >> 2] = HEAP32[$0 + 984 >> 2];
  HEAP32[$1_1 + 492 >> 2] = HEAP32[$0 + 988 >> 2];
  HEAP32[$1_1 + 508 >> 2] = HEAP32[$0 + 992 >> 2];
  HEAP32[$1_1 + 524 >> 2] = HEAP32[$0 + 1e3 >> 2];
  HEAP32[$1_1 + 540 >> 2] = HEAP32[$0 + 1004 >> 2];
  HEAP32[$1_1 + 556 >> 2] = HEAP32[$0 + 1012 >> 2];
  HEAP32[$1_1 + 572 >> 2] = HEAP32[$0 + 1020 >> 2];
  HEAP32[$1_1 + 588 >> 2] = HEAP32[$0 + 1028 >> 2];
  HEAP32[$1_1 + 604 >> 2] = HEAP32[$0 + 1036 >> 2];
  HEAP32[$1_1 + 432 >> 2] = HEAP32[$0 + 1056 >> 2];
  HEAP32[$1_1 + 416 >> 2] = HEAP32[$0 + 1060 >> 2];
  HEAP32[$1_1 + 448 >> 2] = HEAP32[$0 + 1064 >> 2];
  HEAP32[$1_1 + 464 >> 2] = HEAP32[$0 + 1068 >> 2];
  HEAP32[$1_1 + 480 >> 2] = HEAP32[$0 + 1072 >> 2];
  HEAP32[$1_1 + 496 >> 2] = HEAP32[$0 + 1076 >> 2];
  HEAP32[$1_1 + 512 >> 2] = HEAP32[$0 + 1080 >> 2];
  HEAP32[$1_1 + 528 >> 2] = HEAP32[$0 + 1088 >> 2];
  HEAP32[$1_1 + 544 >> 2] = HEAP32[$0 + 1092 >> 2];
  HEAP32[$1_1 + 560 >> 2] = HEAP32[$0 + 1100 >> 2];
  HEAP32[$1_1 + 576 >> 2] = HEAP32[$0 + 1108 >> 2];
  HEAP32[$1_1 + 592 >> 2] = HEAP32[$0 + 1116 >> 2];
  HEAP32[$1_1 + 608 >> 2] = HEAP32[$0 + 1124 >> 2];
  HEAP32[$1_1 + 436 >> 2] = HEAP32[$0 + 1144 >> 2];
  HEAP32[$1_1 + 420 >> 2] = HEAP32[$0 + 1148 >> 2];
  HEAP32[$1_1 + 452 >> 2] = HEAP32[$0 + 1152 >> 2];
  HEAP32[$1_1 + 468 >> 2] = HEAP32[$0 + 1156 >> 2];
  HEAP32[$1_1 + 484 >> 2] = HEAP32[$0 + 1160 >> 2];
  HEAP32[$1_1 + 500 >> 2] = HEAP32[$0 + 1164 >> 2];
  HEAP32[$1_1 + 516 >> 2] = HEAP32[$0 + 1168 >> 2];
  HEAP32[$1_1 + 532 >> 2] = HEAP32[$0 + 1176 >> 2];
  HEAP32[$1_1 + 548 >> 2] = HEAP32[$0 + 1180 >> 2];
  HEAP32[$1_1 + 564 >> 2] = HEAP32[$0 + 1188 >> 2];
  HEAP32[$1_1 + 580 >> 2] = HEAP32[$0 + 1196 >> 2];
  HEAP32[$1_1 + 596 >> 2] = HEAP32[$0 + 1204 >> 2];
  $2_1 = HEAP32[$0 + 1212 >> 2];
  HEAP32[$1_1 + 440 >> 2] = 0;
  HEAP32[$1_1 + 612 >> 2] = $2_1;
  HEAP32[$1_1 + 616 >> 2] = 0;
  HEAP32[$1_1 + 600 >> 2] = 0;
  HEAP32[$1_1 + 584 >> 2] = 0;
  HEAP32[$1_1 + 568 >> 2] = 0;
  HEAP32[$1_1 + 552 >> 2] = 0;
  HEAP32[$1_1 + 536 >> 2] = 0;
  HEAP32[$1_1 + 520 >> 2] = 0;
  HEAP32[$1_1 + 504 >> 2] = 0;
  HEAP32[$1_1 + 488 >> 2] = 0;
  HEAP32[$1_1 + 472 >> 2] = 0;
  HEAP32[$1_1 + 456 >> 2] = 0;
  HEAP32[$1_1 + 424 >> 2] = 0;
  HEAP8[$1_1 + 620 | 0] = HEAPU8[$0 + 996 | 0];
  HEAP8[$1_1 + 624 | 0] = HEAPU8[$0 + 1008 | 0];
  HEAP8[$1_1 + 628 | 0] = HEAPU8[$0 + 1016 | 0];
  HEAP8[$1_1 + 632 | 0] = HEAPU8[$0 + 1024 | 0];
  HEAP8[$1_1 + 636 | 0] = HEAPU8[$0 + 1032 | 0];
  HEAP8[$1_1 + 621 | 0] = HEAPU8[$0 + 1084 | 0];
  HEAP8[$1_1 + 625 | 0] = HEAPU8[$0 + 1096 | 0];
  HEAP8[$1_1 + 629 | 0] = HEAPU8[$0 + 1104 | 0];
  HEAP8[$1_1 + 633 | 0] = HEAPU8[$0 + 1112 | 0];
  HEAP8[$1_1 + 637 | 0] = HEAPU8[$0 + 1120 | 0];
  HEAP8[$1_1 + 622 | 0] = HEAPU8[$0 + 1172 | 0];
  HEAP8[$1_1 + 626 | 0] = HEAPU8[$0 + 1184 | 0];
  HEAP8[$1_1 + 630 | 0] = HEAPU8[$0 + 1192 | 0];
  HEAP8[$1_1 + 634 | 0] = HEAPU8[$0 + 1200 | 0];
  $2_1 = HEAPU8[$0 + 1208 | 0];
  HEAP8[$1_1 + 639 | 0] = 0;
  HEAP8[$1_1 + 635 | 0] = 0;
  HEAP8[$1_1 + 631 | 0] = 0;
  HEAP8[$1_1 + 627 | 0] = 0;
  HEAP8[$1_1 + 623 | 0] = 0;
  HEAP8[$1_1 + 638 | 0] = $2_1;
  HEAP32[$1_1 + 196 >> 2] = HEAP32[$0 + 680 >> 2];
  HEAP32[$1_1 + 200 >> 2] = HEAP32[$0 + 684 >> 2];
  HEAP32[$1_1 + 204 >> 2] = HEAP32[$0 + 688 >> 2];
  HEAP32[$1_1 + 208 >> 2] = HEAP32[$0 + 692 >> 2];
  HEAP32[$1_1 + 180 >> 2] = HEAP32[$0 + 696 >> 2];
  HEAP32[$1_1 + 184 >> 2] = HEAP32[$0 + 700 >> 2];
  HEAP32[$1_1 + 188 >> 2] = HEAP32[$0 + 704 >> 2];
  HEAP32[$1_1 + 192 >> 2] = HEAP32[$0 + 708 >> 2];
  HEAP32[$1_1 + 212 >> 2] = HEAP32[$0 + 712 >> 2];
  HEAP32[$1_1 + 216 >> 2] = HEAP32[$0 + 716 >> 2];
  HEAP32[$1_1 + 220 >> 2] = HEAP32[$0 + 720 >> 2];
  HEAP32[$1_1 + 224 >> 2] = HEAP32[$0 + 724 >> 2];
  HEAP32[$1_1 + 228 >> 2] = HEAP32[$0 + 728 >> 2];
  HEAP32[$1_1 + 232 >> 2] = HEAP32[$0 + 732 >> 2];
  HEAP32[$1_1 + 236 >> 2] = HEAP32[$0 + 736 >> 2];
  HEAP32[$1_1 + 240 >> 2] = HEAP32[$0 + 740 >> 2];
  HEAP32[$1_1 + 244 >> 2] = HEAP32[$0 + 744 >> 2];
  HEAP32[$1_1 + 248 >> 2] = HEAP32[$0 + 748 >> 2];
  HEAP32[$1_1 + 252 >> 2] = HEAP32[$0 + 752 >> 2];
  HEAP32[$1_1 + 256 >> 2] = HEAP32[$0 + 756 >> 2];
  HEAP32[$1_1 + 260 >> 2] = HEAP32[$0 + 760 >> 2];
  HEAP32[$1_1 + 264 >> 2] = HEAP32[$0 + 764 >> 2];
  HEAP32[$1_1 + 268 >> 2] = HEAP32[$0 + 768 >> 2];
  HEAP32[$1_1 + 272 >> 2] = HEAP32[$0 + 772 >> 2];
  HEAP32[$1_1 + 276 >> 2] = HEAP32[$0 + 776 >> 2];
  HEAP32[$1_1 + 280 >> 2] = HEAP32[$0 + 780 >> 2];
  HEAP32[$1_1 + 284 >> 2] = HEAP32[$0 + 784 >> 2];
  HEAP32[$1_1 + 288 >> 2] = HEAP32[$0 + 788 >> 2];
  HEAP32[$1_1 + 292 >> 2] = HEAP32[$0 + 876 >> 2];
  HEAP32[$1_1 + 296 >> 2] = HEAP32[$0 + 880 >> 2];
  HEAP32[$1_1 + 300 >> 2] = HEAP32[$0 + 884 >> 2];
  HEAP32[$1_1 + 304 >> 2] = HEAP32[$0 + 888 >> 2];
  HEAP32[$1_1 + 308 >> 2] = HEAP32[$0 + 892 >> 2];
  HEAP32[$1_1 + 312 >> 2] = HEAP32[$0 + 896 >> 2];
  HEAP32[$1_1 + 316 >> 2] = HEAP32[$0 + 900 >> 2];
  HEAP32[$1_1 + 320 >> 2] = HEAP32[$0 + 904 >> 2];
  HEAP32[$1_1 + 324 >> 2] = HEAP32[$0 + 804 >> 2];
  HEAP32[$1_1 + 328 >> 2] = HEAP32[$0 + 808 >> 2];
  HEAP32[$1_1 + 332 >> 2] = HEAP32[$0 + 812 >> 2];
  HEAP32[$1_1 + 336 >> 2] = HEAP32[$0 + 816 >> 2];
  HEAP32[$1_1 + 340 >> 2] = HEAP32[$0 + 820 >> 2];
  HEAP32[$1_1 + 344 >> 2] = HEAP32[$0 + 824 >> 2];
  HEAP32[$1_1 + 348 >> 2] = HEAP32[$0 + 828 >> 2];
  HEAP32[$1_1 + 352 >> 2] = HEAP32[$0 + 832 >> 2];
  HEAP32[$1_1 + 356 >> 2] = HEAP32[$0 + 840 >> 2];
  HEAP32[$1_1 + 360 >> 2] = HEAP32[$0 + 844 >> 2];
  HEAP32[$1_1 + 364 >> 2] = HEAP32[$0 + 848 >> 2];
  HEAP32[$1_1 + 368 >> 2] = HEAP32[$0 + 852 >> 2];
  HEAP32[$1_1 + 372 >> 2] = HEAP32[$0 + 860 >> 2];
  HEAP32[$1_1 + 376 >> 2] = HEAP32[$0 + 864 >> 2];
  HEAP32[$1_1 + 380 >> 2] = HEAP32[$0 + 868 >> 2];
  HEAP32[$1_1 + 384 >> 2] = HEAP32[$0 + 872 >> 2];
  HEAP8[$1_1 + 388 | 0] = HEAPU8[$0 + 792 | 0];
  HEAP8[$1_1 + 392 | 0] = HEAPU8[$0 + 795 | 0];
  HEAP8[$1_1 + 396 | 0] = HEAPU8[$0 + 798 | 0];
  HEAP8[$1_1 + 400 | 0] = HEAPU8[$0 + 836 | 0];
  HEAP8[$1_1 + 404 | 0] = HEAPU8[$0 + 856 | 0];
  HEAP8[$1_1 + 389 | 0] = HEAPU8[$0 + 793 | 0];
  HEAP8[$1_1 + 393 | 0] = HEAPU8[$0 + 796 | 0];
  HEAP8[$1_1 + 397 | 0] = HEAPU8[$0 + 799 | 0];
  HEAP8[$1_1 + 401 | 0] = HEAPU8[$0 + 837 | 0];
  HEAP8[$1_1 + 405 | 0] = HEAPU8[$0 + 857 | 0];
  HEAP8[$1_1 + 390 | 0] = HEAPU8[$0 + 794 | 0];
  HEAP8[$1_1 + 394 | 0] = HEAPU8[$0 + 797 | 0];
  HEAP8[$1_1 + 398 | 0] = HEAPU8[$0 + 800 | 0];
  HEAP8[$1_1 + 402 | 0] = HEAPU8[$0 + 838 | 0];
  $2_1 = HEAPU8[$0 + 858 | 0];
  HEAP8[$1_1 + 407 | 0] = 0;
  HEAP8[$1_1 + 403 | 0] = 0;
  HEAP8[$1_1 + 399 | 0] = 0;
  HEAP8[$1_1 + 395 | 0] = 0;
  HEAP8[$1_1 + 391 | 0] = 0;
  HEAP8[$1_1 + 406 | 0] = $2_1;
  $0 = HEAP32[$0 + 1232 >> 2];
  HEAP32[$1_1 + 408 >> 2] = 0;
  HEAP32[$1_1 + 640 >> 2] = $0;
  return 22608;
 }
 
 function $1061($0) {
  $0 = $0 | 0;
  $265($0);
 }
 
 function $1062($0, $1_1, $2_1) {
  $0 = Math_fround($0);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $3_1 = 0;
  $3_1 = $79(16);
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 8 >> 2] = $2_1;
  HEAPF32[$3_1 + 4 >> 2] = $1_1;
  HEAPF32[$3_1 >> 2] = $0;
  return $3_1 | 0;
 }
 
 function $1063($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  HEAP32[$0 + 12 >> 2] = 0;
  HEAPF32[$0 + 8 >> 2] = $3_1;
  HEAPF32[$0 + 4 >> 2] = $2_1;
  HEAPF32[$0 >> 2] = $1_1;
 }
 
 function $1064($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 >> 2]);
 }
 
 function $1065($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 4 >> 2]);
 }
 
 function $1066($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 8 >> 2]);
 }
 
 function $1067($0, $1_1, $2_1, $3_1) {
  $0 = Math_fround($0);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $4_1 = 0;
  $4_1 = $36(16);
  HEAPF32[$4_1 + 12 >> 2] = $3_1;
  HEAPF32[$4_1 + 8 >> 2] = $2_1;
  HEAPF32[$4_1 + 4 >> 2] = $1_1;
  HEAPF32[$4_1 >> 2] = $0;
  return $4_1 | 0;
 }
 
 function $1068($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  HEAPF32[$0 + 12 >> 2] = $4_1;
  HEAPF32[$0 + 8 >> 2] = $3_1;
  HEAPF32[$0 + 4 >> 2] = $2_1;
  HEAPF32[$0 >> 2] = $1_1;
 }
 
 function $1072($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 12 >> 2]);
 }
 
 function $1073() {
  return $36(64) | 0;
 }
 
 function $1074($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 48 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 52 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 56 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $1075($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0);
  $3_1 = HEAPF32[$1_1 + 12 >> 2];
  $7_1 = HEAPF32[$1_1 + 8 >> 2];
  $2_1 = HEAPF32[$1_1 >> 2];
  $5_1 = HEAPF32[$1_1 + 4 >> 2];
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $4_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($2_1 * $2_1) + Math_fround($5_1 * $5_1)) + Math_fround($7_1 * $7_1)) + Math_fround($3_1 * $3_1)));
  $8_1 = Math_fround($7_1 * $4_1);
  $6_1 = Math_fround($5_1 * $8_1);
  $10 = Math_fround($2_1 * $4_1);
  $11 = Math_fround($3_1 * $10);
  HEAPF32[$0 + 36 >> 2] = $6_1 + $11;
  $12_1 = Math_fround($2_1 * $8_1);
  $4_1 = Math_fround($5_1 * $4_1);
  $9_1 = Math_fround($3_1 * $4_1);
  HEAPF32[$0 + 32 >> 2] = $12_1 - $9_1;
  HEAPF32[$0 + 24 >> 2] = $6_1 - $11;
  $6_1 = Math_fround($2_1 * $4_1);
  $3_1 = Math_fround($3_1 * $8_1);
  HEAPF32[$0 + 16 >> 2] = $6_1 + $3_1;
  HEAPF32[$0 + 8 >> 2] = $12_1 + $9_1;
  HEAPF32[$0 + 4 >> 2] = $6_1 - $3_1;
  $2_1 = Math_fround($2_1 * $10);
  $3_1 = Math_fround($5_1 * $4_1);
  HEAPF32[$0 + 40 >> 2] = Math_fround(1.0) - Math_fround($2_1 + $3_1);
  $9_1 = $2_1;
  $2_1 = Math_fround($7_1 * $8_1);
  HEAPF32[$0 + 20 >> 2] = Math_fround(1.0) - Math_fround($9_1 + $2_1);
  HEAPF32[$0 >> 2] = Math_fround(1.0) - Math_fround($3_1 + $2_1);
 }
 
 function $1076($0) {
  $0 = $0 | 0;
  return $0 + 48 | 0;
 }
 
 function $1077($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1078($0, $1_1);
  $0 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  HEAP32[6309] = HEAP32[$0 >> 2];
  HEAP32[6310] = $2_1;
  $0 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[6307] = HEAP32[$1_1 >> 2];
  HEAP32[6308] = $0;
  global$0 = $1_1 + 16 | 0;
  return 25228;
 }
 
 function $1078($0, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, $11 = Math_fround(0), $12_1 = 0;
  $3_1 = global$0 - 16 | 0;
  $2_1 = HEAPF32[$0 >> 2];
  $8_1 = HEAPF32[$0 + 20 >> 2];
  $6_1 = HEAPF32[$0 + 40 >> 2];
  $11 = Math_fround(Math_fround($2_1 + $8_1) + $6_1);
  label$1 : {
   if (!!($11 > Math_fround(0.0))) {
    $8_1 = Math_fround(Math_sqrt(Math_fround($11 + Math_fround(1.0))));
    $2_1 = Math_fround(Math_fround(.5) / $8_1);
    $6_1 = Math_fround($2_1 * Math_fround(HEAPF32[$0 + 16 >> 2] - HEAPF32[$0 + 4 >> 2]));
    HEAPF32[$3_1 + 8 >> 2] = $6_1;
    $4_1 = (wasm2js_scratch_store_f32($6_1), wasm2js_scratch_load_i32(0));
    $6_1 = Math_fround($2_1 * Math_fround(HEAPF32[$0 + 8 >> 2] - HEAPF32[$0 + 32 >> 2]));
    HEAPF32[$3_1 + 4 >> 2] = $6_1;
    $2_1 = Math_fround($2_1 * Math_fround(HEAPF32[$0 + 36 >> 2] - HEAPF32[$0 + 24 >> 2]));
    HEAPF32[$3_1 >> 2] = $2_1;
    $0 = (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(0));
    $2_1 = Math_fround($8_1 * Math_fround(.5));
    HEAPF32[$3_1 + 12 >> 2] = $2_1;
    $5_1 = (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(0));
    $7_1 = (wasm2js_scratch_store_f32($6_1), wasm2js_scratch_load_i32(0));
    break label$1;
   }
   $4_1 = $2_1 < $8_1 ? ($8_1 < $6_1 ? 2 : 1) : ($2_1 < $6_1) << 1;
   $7_1 = $4_1 << 2;
   $9_1 = ($4_1 << 4) + $0 | 0;
   $5_1 = ($4_1 + 1 >>> 0) % 3 | 0;
   $10 = ($5_1 << 4) + $0 | 0;
   $5_1 = $5_1 << 2;
   $12_1 = $0;
   $0 = ($4_1 + 2 >>> 0) % 3 | 0;
   $4_1 = $12_1 + ($0 << 4) | 0;
   $0 = $0 << 2;
   $2_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround(HEAPF32[$7_1 + $9_1 >> 2] - HEAPF32[$10 + $5_1 >> 2]) - HEAPF32[$4_1 + $0 >> 2]) + Math_fround(1.0))));
   HEAPF32[($7_1 | $3_1) >> 2] = $2_1 * Math_fround(.5);
   $2_1 = Math_fround(Math_fround(.5) / $2_1);
   HEAPF32[$3_1 + 12 >> 2] = Math_fround(HEAPF32[$4_1 + $5_1 >> 2] - HEAPF32[$0 + $10 >> 2]) * $2_1;
   HEAPF32[($3_1 | $5_1) >> 2] = $2_1 * Math_fround(HEAPF32[$7_1 + $10 >> 2] + HEAPF32[$5_1 + $9_1 >> 2]);
   HEAPF32[($0 | $3_1) >> 2] = $2_1 * Math_fround(HEAPF32[$4_1 + $7_1 >> 2] + HEAPF32[$0 + $9_1 >> 2]);
   $5_1 = HEAP32[$3_1 + 12 >> 2];
   $4_1 = HEAP32[$3_1 + 8 >> 2];
   $0 = HEAP32[$3_1 >> 2];
   $7_1 = HEAP32[$3_1 + 4 >> 2];
  }
  HEAP32[$1_1 + 12 >> 2] = $5_1;
  HEAP32[$1_1 + 8 >> 2] = $4_1;
  HEAP32[$1_1 + 4 >> 2] = $7_1;
  HEAP32[$1_1 >> 2] = $0;
 }
 
 function $1080($0) {
  $0 = $0 | 0;
  if ($0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0)
  }
 }
 
 function $1081() {
  var $0 = 0;
  $0 = $36(8);
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = 22652;
  return $0 | 0;
 }
 
 function $1082($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $1083() {
  var $0 = 0;
  $0 = $79(324);
  $305($0);
  return $0 | 0;
 }
 
 function $1084($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 184 >> 2] = $1_1;
 }
 
 function $1085($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $308($0, $1_1);
 }
 
 function $1086($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 220 >> 2] = $1_1;
 }
 
 function $1087($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $310($0, $1_1);
 }
 
 function $1088($0) {
  $0 = $0 | 0;
  $0 = HEAP32[$0 + 220 >> 2];
  return ($0 | 0) != 2 & ($0 | 0) != 5;
 }
 
 function $1089($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 232 >> 2] = $1_1;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 }
 
 function $1090($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 228 >> 2] = $1_1;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 }
 
 function $1091($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 236 >> 2] = $1_1;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 }
 
 function $1092($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 204 >> 2];
 }
 
 function $1093($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 204 >> 2] = $1_1;
 }
 
 function $1095($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
  $3_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 12 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 8 >> 2] = $2_1;
  $3_1 = $1_1 + 24 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 28 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = HEAP32[$1_1 + 20 >> 2];
  $2_1 = $0 + 20 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $3_1 = HEAP32[$1_1 + 36 >> 2];
  $2_1 = $0 + 36 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $3_1 = $1_1 + 40 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 44 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 56 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 60 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$1_1 + 52 >> 2];
  $0 = $0 + 52 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $1096($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
  $3_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 76 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 68 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 72 >> 2] = $2_1;
  $3_1 = $1_1 + 24 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 92 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = HEAP32[$1_1 + 20 >> 2];
  $2_1 = $0 + 84 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $3_1 = HEAP32[$1_1 + 36 >> 2];
  $2_1 = $0 + 100 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $3_1 = $1_1 + 40 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 108 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 56 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0 + 124 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$1_1 + 52 >> 2];
  $0 = $0 + 116 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $1097($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1_1);
 }
 
 function $1098($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 276 >> 2]);
 }
 
 function $1099($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 276 >> 2] = $1_1;
 }
 
 function $1100($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 272 >> 2]);
 }
 
 function $1101($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 272 >> 2] = $1_1;
 }
 
 function $1102($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 264 >> 2];
 }
 
 function $1103($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 264 >> 2] = $1_1;
 }
 
 function $1104($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 220 >> 2];
 }
 
 function $1105($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 148 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 152 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 156 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $1106($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 132 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 136 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 140 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $1108($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 8 >> 2] != 0 | 0;
 }
 
 function $1109($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 12 >> 2] = $1_1;
 }
 
 function $1110($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 16 >> 2] = $1_1;
 }
 
 function $1112($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 4 >> 2] = $1_1;
 }
 
 function $1114($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 8 >> 2] = $1_1;
 }
 
 function $1115($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = $36(88);
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 1;
  HEAP32[$2_1 + 16 >> 2] = -1;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 >> 2] = 22732;
  $3_1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2_1 + 24 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2_1 + 28 >> 2] = $3_1;
  $0 = $0 + 8 | 0;
  $4_1 = HEAP32[$0 + 4 >> 2];
  $3_1 = $2_1 + 32 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $0 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 40 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 44 >> 2] = $0;
  $1_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $2_1 + 48 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3_1;
  return $2_1 | 0;
 }
 
 function $1116($0) {
  $0 = $0 | 0;
  return $0 + 24 | 0;
 }
 
 function $1117($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 28 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 32 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $1118($0) {
  $0 = $0 | 0;
  return $0 + 40 | 0;
 }
 
 function $1119($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 44 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 48 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $1122($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 4 >> 2];
 }
 
 function $1123($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[HEAP32[$0 + 12 >> 2] + ($1_1 << 2) >> 2];
 }
 
 function $1124($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 12 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 16 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 12 >> 2] = 0;
  }
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
 }
 
 function $1125($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[$0 + 12 >> 2] + ($1_1 << 4) | 0;
 }
 
 function $1127($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(HEAPF32[HEAP32[$0 + 12 >> 2] + ($1_1 << 2) >> 2]);
 }
 
 function $1129($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = $36(136);
  HEAP32[$2_1 + 28 >> 2] = 0;
  HEAP32[$2_1 + 32 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 1;
  HEAP32[$2_1 + 16 >> 2] = -1;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP8[$2_1 + 40 | 0] = 1;
  HEAP32[$2_1 >> 2] = 22864;
  HEAP32[$2_1 + 36 >> 2] = 0;
  $3_1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2_1 + 44 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2_1 + 48 >> 2] = $3_1;
  $3_1 = $0 + 8 | 0;
  $0 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $2_1 + 52 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $0;
  $0 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 60 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 64 >> 2] = $0;
  $0 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$0 >> 2];
  $1_1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2_1 + 88 >> 2] = 0;
  HEAP32[$2_1 + 80 >> 2] = 0;
  HEAP32[$2_1 + 84 >> 2] = 0;
  HEAP32[$2_1 + 120 >> 2] = 0;
  HEAP32[$2_1 + 124 >> 2] = 0;
  HEAP32[$2_1 + 128 >> 2] = 0;
  HEAP32[$2_1 + 108 >> 2] = 0;
  HEAP8[$2_1 + 132 | 0] = 1;
  HEAP8[$2_1 + 112 | 0] = 1;
  HEAP8[$2_1 + 92 | 0] = 1;
  HEAP32[$2_1 + 100 >> 2] = 0;
  HEAP32[$2_1 + 104 >> 2] = 0;
  $0 = $2_1 + 68 | 0;
  HEAP32[$0 >> 2] = $3_1;
  HEAP32[$0 + 4 >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $1130($0) {
  $0 = $0 | 0;
  return $0 + 44 | 0;
 }
 
 function $1131($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 44 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 48 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 52 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $1132($0) {
  $0 = $0 | 0;
  return $0 + 60 | 0;
 }
 
 function $1133($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 60 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 64 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 68 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $1134($0) {
  $0 = $0 | 0;
  return $0 + 96 | 0;
 }
 
 function $1135($0) {
  $0 = $0 | 0;
  return $0 + 76 | 0;
 }
 
 function $1137($0) {
  $0 = $0 | 0;
  return $0 + 116 | 0;
 }
 
 function $1139($0) {
  $0 = $0 | 0;
  return $0 + 32 | 0;
 }
 
 function $1140($0) {
  $0 = $0 | 0;
  return $0 - -64 | 0;
 }
 
 function $1141($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 80 >> 2]);
 }
 
 function $1142($0) {
  $0 = $0 | 0;
  return HEAPF32[$0 + 4 >> 2] < Math_fround(1.0) | 0;
 }
 
 function $1147($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = $36(84);
  HEAP32[$2_1 + 12 >> 2] = -1;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  HEAP32[$2_1 + 8 >> 2] = 1;
  HEAP32[$2_1 >> 2] = 22948;
  $3_1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2_1 + 16 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2_1 + 20 >> 2] = $3_1;
  $0 = $0 + 8 | 0;
  $4_1 = HEAP32[$0 + 4 >> 2];
  $3_1 = $2_1 + 24 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $0 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 32 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 36 >> 2] = $0;
  $1_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $2_1 + 40 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3_1;
  HEAP32[$2_1 + 80 >> 2] = 0;
  return $2_1 | 0;
 }
 
 function $1150($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 80 >> 2];
 }
 
 function $1151($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 80 >> 2] = $1_1;
 }
 
 function $1152($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = $36(128);
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 24 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = -1;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  HEAP32[$2_1 + 8 >> 2] = 1;
  HEAP8[$2_1 + 32 | 0] = 1;
  HEAP32[$2_1 >> 2] = 23088;
  HEAP32[$2_1 + 28 >> 2] = 0;
  $3_1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2_1 + 36 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2_1 + 40 >> 2] = $3_1;
  $0 = $0 + 8 | 0;
  $4_1 = HEAP32[$0 + 4 >> 2];
  $3_1 = $2_1 + 44 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $0 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 52 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 56 >> 2] = $0;
  $0 = $1_1 + 8 | 0;
  $1_1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2_1 + 80 >> 2] = 0;
  HEAP32[$2_1 + 72 >> 2] = 0;
  HEAP32[$2_1 + 76 >> 2] = 0;
  HEAP32[$2_1 + 100 >> 2] = 0;
  HEAP32[$2_1 + 112 >> 2] = 0;
  HEAP32[$2_1 + 116 >> 2] = 0;
  HEAP32[$2_1 + 120 >> 2] = 0;
  HEAP8[$2_1 + 124 | 0] = 1;
  HEAP8[$2_1 + 104 | 0] = 1;
  HEAP8[$2_1 + 84 | 0] = 1;
  HEAP32[$2_1 + 92 >> 2] = 0;
  HEAP32[$2_1 + 96 >> 2] = 0;
  $3_1 = $2_1 + 60 | 0;
  HEAP32[$3_1 >> 2] = $1_1;
  HEAP32[$3_1 + 4 >> 2] = $0;
  return $2_1 | 0;
 }
 
 function $1153($0) {
  $0 = $0 | 0;
  return $0 + 68 | 0;
 }
 
 function $1154($0) {
  $0 = $0 | 0;
  return $0 + 88 | 0;
 }
 
 function $1155($0) {
  $0 = $0 | 0;
  return $0 + 108 | 0;
 }
 
 function $1157($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 }
 
 function $1158($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1_1);
 }
 
 function $1159($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1_1, $2_1);
 }
 
 function $1161($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = $79(60);
  $316($1_1, $0);
  return $1_1 | 0;
 }
 
 function $1162($0, $1_1) {
  $0 = Math_fround($0);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(60);
  $108($2_1, $0, $1_1);
  return $2_1 | 0;
 }
 
 function $1163($0, $1_1) {
  $0 = Math_fround($0);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(60);
  $112($2_1, $0, $1_1);
  return $2_1 | 0;
 }
 
 function $1164($0, $1_1) {
  $0 = Math_fround($0);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(60);
  $113($2_1, $0, $1_1);
  return $2_1 | 0;
 }
 
 function $1165($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = $79(60);
  $336($1_1, $0);
  return $1_1 | 0;
 }
 
 function $1166($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = $79(60);
  $338($1_1, $0);
  return $1_1 | 0;
 }
 
 function $1167($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = $79(60);
  $339($1_1, $0);
  return $1_1 | 0;
 }
 
 function $1168($0) {
  $0 = Math_fround($0);
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $79(56);
  $145($1_1);
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP32[$1_1 + 32 >> 2] = 0;
  HEAP32[$1_1 + 24 >> 2] = 1065353216;
  HEAP32[$1_1 + 16 >> 2] = 1065353216;
  HEAP32[$1_1 + 20 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 8;
  HEAP32[$1_1 >> 2] = 7868;
  $2_1 = $1_1 + 36 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 44 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = 0;
  HEAPF32[$1_1 + 48 >> 2] = $0;
  HEAPF32[$1_1 + 32 >> 2] = $0;
  return $1_1 | 0;
 }
 
 function $1169($0, $1_1) {
  $0 = Math_fround($0);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(80);
  $126($2_1, $0, $1_1);
  return $2_1 | 0;
 }
 
 function $1170($0, $1_1) {
  $0 = Math_fround($0);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(80);
  $128($2_1, $0, $1_1);
  return $2_1 | 0;
 }
 
 function $1171($0, $1_1) {
  $0 = Math_fround($0);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(80);
  $127($2_1, $0, $1_1);
  return $2_1 | 0;
 }
 
 function $1172($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(88);
  $385($2_1, $0, $1_1);
  return $2_1 | 0;
 }
 
 function $1173($0) {
  $0 = $0 | 0;
  if (HEAPU8[$0 + 52 | 0]) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
   HEAP8[$0 + 52 | 0] = 0;
  }
 }
 
 function $1174($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = $79(172);
  $1175($1_1, $0);
  return $1_1 | 0;
 }
 
 function $1175($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $382($0);
  $2_1 = $0 - -64 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 1065353216;
  HEAP32[$0 + 60 >> 2] = 1065353216;
  $2_1 = $0 + 36 | 0;
  HEAP32[$2_1 >> 2] = -8388609;
  HEAP32[$2_1 + 4 >> 2] = -8388609;
  HEAP32[$0 + 20 >> 2] = 2139095039;
  HEAP32[$0 + 24 >> 2] = 2139095039;
  HEAP32[$0 >> 2] = 8836;
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP8[$0 + 92 | 0] = 1;
  $2_1 = $0 + 80 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0 + 144 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP8[$0 + 52 | 0] = 1;
  HEAP32[$0 + 44 >> 2] = -8388609;
  HEAP32[$0 + 28 >> 2] = 2139095039;
  HEAP32[$0 + 4 >> 2] = 25;
  HEAP8[$0 + 168 | 0] = 1;
  HEAP32[$0 + 164 >> 2] = 0;
  $2_1 = $0 + 156 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0 + 148 >> 2] = $1_1;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($1_1) | 0) >= 1) {
   while (1) {
    $8_1 = $79(216);
    $398($8_1, $1_1, $6_1);
    $3_1 = HEAP32[$0 + 156 >> 2];
    label$3 : {
     if (($3_1 | 0) != HEAP32[$0 + 160 >> 2]) {
      break label$3
     }
     $4_1 = $3_1 ? $3_1 << 1 : 1;
     if (($3_1 | 0) >= ($4_1 | 0)) {
      break label$3
     }
     label$4 : {
      if (!$4_1) {
       $7_1 = 0;
       break label$4;
      }
      $7_1 = $79($4_1 << 2);
      $3_1 = HEAP32[$0 + 156 >> 2];
     }
     if (($3_1 | 0) >= 1) {
      $5_1 = 0;
      $2_1 = $3_1;
      while (1) {
       HEAP32[$5_1 + $7_1 >> 2] = HEAP32[HEAP32[$0 + 164 >> 2] + $5_1 >> 2];
       $5_1 = $5_1 + 4 | 0;
       $2_1 = $2_1 + -1 | 0;
       if ($2_1) {
        continue
       }
       break;
      };
     }
     $2_1 = HEAP32[$0 + 164 >> 2];
     if ($2_1) {
      if (HEAPU8[$0 + 168 | 0]) {
       $80($2_1);
       $3_1 = HEAP32[$0 + 156 >> 2];
      }
      HEAP32[$0 + 164 >> 2] = 0;
     }
     HEAP32[$0 + 164 >> 2] = $7_1;
     HEAP8[$0 + 168 | 0] = 1;
     HEAP32[$0 + 160 >> 2] = $4_1;
    }
    HEAP32[$0 + 156 >> 2] = $3_1 + 1;
    HEAP32[HEAP32[$0 + 164 >> 2] + ($3_1 << 2) >> 2] = $8_1;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($1_1) | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $1176() {
  var $0 = 0;
  $0 = $79(96);
  $495($0);
  return $0 | 0;
 }
 
 function $1177($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $498($0, $1_1, $2_1);
 }
 
 function $1178($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $501($0, $1_1);
 }
 
 function $1179($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[(HEAP32[$0 + 28 >> 2] + Math_imul($1_1, 80) | 0) + 64 >> 2];
 }
 
 function $1180($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $500($0, $1_1, $2_1, $3_1);
 }
 
 function $1182() {
  var $0 = 0;
  $0 = $79(172);
  $525($0);
  return $0 | 0;
 }
 
 function $1183($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $528($0, $1_1, $2_1, $3_1, $4_1);
 }
 
 function $1184() {
  var $0 = 0, $1_1 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  $1_1 = $36(88);
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 1;
  HEAP32[$0 + 16 >> 2] = 4096;
  HEAP32[$0 + 20 >> 2] = 4096;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $705($1_1, $0 + 8 | 0);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1186($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 772 >> 2];
 }
 
 function $1187($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 776 >> 2];
 }
 
 function $1188($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 780 >> 2];
 }
 
 function $1189($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return (Math_imul($1_1, 192) + $0 | 0) + 4 | 0;
 }
 
 function $1190($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 
 function $1191($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $1_1) | 0;
 }
 
 function $1192($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = $36(10448);
  $229($1_1, $0);
  return $1_1 | 0;
 }
 
 function $1194($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 60 >> 2]]($0, $1_1);
 }
 
 function $1195() {
  var $0 = 0;
  $0 = $36(176);
  $756($0);
  return $0 | 0;
 }
 
 function $1198($0, $1_1, $2_1, $3_1) {
  $0 = Math_fround($0);
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $36(144);
  HEAP32[$4_1 + 72 >> 2] = $2_1;
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  HEAPF32[$4_1 >> 2] = $0;
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$4_1 + 76 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 80 >> 2] = $1_1;
  $2_1 = $3_1 + 8 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $4_1 + 84 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  HEAP32[$4_1 + 136 >> 2] = 1008981770;
  HEAP32[$4_1 + 140 >> 2] = 1008981770;
  HEAP32[$4_1 + 128 >> 2] = 1000593162;
  HEAP32[$4_1 + 132 >> 2] = 1008981770;
  HEAP8[$4_1 + 124 | 0] = 0;
  HEAP32[$4_1 + 116 >> 2] = 1061997773;
  HEAP32[$4_1 + 120 >> 2] = 1065353216;
  HEAP32[$4_1 + 108 >> 2] = 0;
  HEAP32[$4_1 + 112 >> 2] = 0;
  HEAP32[$4_1 + 100 >> 2] = 1056964608;
  HEAP32[$4_1 + 104 >> 2] = 0;
  HEAP32[$4_1 + 92 >> 2] = 0;
  HEAP32[$4_1 + 96 >> 2] = 0;
  HEAP32[$4_1 + 8 >> 2] = 1065353216;
  $1_1 = $4_1 + 20 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAP32[$4_1 + 16 >> 2] = 0;
  HEAP32[$4_1 + 28 >> 2] = 1065353216;
  $1_1 = $4_1 + 40 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 32 >> 2] = 0;
  HEAP32[$4_1 + 36 >> 2] = 0;
  HEAP32[$4_1 + 48 >> 2] = 1065353216;
  HEAP32[$4_1 + 68 >> 2] = 0;
  $1_1 = $4_1 + 60 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 52 >> 2] = 0;
  HEAP32[$4_1 + 56 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $1199($0) {
  $0 = $0 | 0;
  if ($0) {
   $37($0)
  }
 }
 
 function $1200($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = $79(676);
  $792($1_1, $0);
  return $1_1 | 0;
 }
 
 function $1202($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  HEAPF32[$0 + 536 >> 2] = $2_1;
  HEAPF32[$0 + 532 >> 2] = $1_1;
 }
 
 function $1203($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 532 >> 2]);
 }
 
 function $1204($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 536 >> 2]);
 }
 
 function $1205($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $794($0, $1_1, $2_1);
 }
 
 function $1206($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $795($0, $1_1, $2_1);
 }
 
 function $1207($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 408 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 412 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $0 + 416 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  HEAP32[$0 + 632 >> 2] = 0;
  $3_1 = HEAPF32[$0 + 404 >> 2];
  HEAPF32[$0 + 624 >> 2] = $3_1 * HEAPF32[$0 + 412 >> 2];
  HEAPF32[$0 + 620 >> 2] = $3_1 * HEAPF32[$0 + 408 >> 2];
  HEAPF32[$0 + 628 >> 2] = $3_1 * HEAPF32[$2_1 >> 2];
 }
 
 function $1208($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0);
  $2_1 = HEAPF32[$1_1 + 8 >> 2];
  $3_1 = HEAPF32[$1_1 + 4 >> 2];
  HEAPF32[$0 + 488 >> 2] = Math_fround(HEAPF32[$1_1 >> 2] * HEAPF32[$0 + 604 >> 2]) + HEAPF32[$0 + 488 >> 2];
  $1_1 = $0 + 492 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround($3_1 * HEAPF32[$0 + 608 >> 2]) + HEAPF32[$1_1 >> 2];
  $1_1 = $0 + 496 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround($2_1 * HEAPF32[$0 + 612 >> 2]) + HEAPF32[$1_1 >> 2];
 }
 
 function $1209($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $7_1 = HEAPF32[$1_1 + 8 >> 2];
  $3_1 = HEAPF32[$1_1 + 4 >> 2];
  $4_1 = HEAPF32[$0 + 408 >> 2];
  HEAPF32[$0 + 472 >> 2] = Math_fround(HEAPF32[$1_1 >> 2] * $4_1) + HEAPF32[$0 + 472 >> 2];
  $5_1 = $0 + 476 | 0;
  $8_1 = $3_1;
  $3_1 = HEAPF32[$0 + 412 >> 2];
  HEAPF32[$5_1 >> 2] = Math_fround($8_1 * $3_1) + HEAPF32[$5_1 >> 2];
  $5_1 = $0 + 480 | 0;
  $6_1 = HEAPF32[$0 + 416 >> 2];
  HEAPF32[$5_1 >> 2] = Math_fround($7_1 * $6_1) + HEAPF32[$5_1 >> 2];
  $11 = HEAPF32[$1_1 >> 2];
  $7_1 = HEAPF32[$2_1 >> 2];
  $9_1 = HEAPF32[$2_1 + 4 >> 2];
  $6_1 = Math_fround($6_1 * HEAPF32[$1_1 + 8 >> 2]);
  $3_1 = Math_fround($3_1 * HEAPF32[$1_1 + 4 >> 2]);
  $10 = HEAPF32[$2_1 + 8 >> 2];
  HEAPF32[$0 + 488 >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $6_1) - Math_fround($3_1 * $10)) * HEAPF32[$0 + 604 >> 2]) + HEAPF32[$0 + 488 >> 2];
  $8_1 = HEAPF32[$0 + 612 >> 2];
  $1_1 = $0 + 492 | 0;
  $4_1 = Math_fround($4_1 * $11);
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(Math_fround($10 * $4_1) - Math_fround($6_1 * $7_1)) * HEAPF32[$0 + 608 >> 2]) + HEAPF32[$1_1 >> 2];
  $0 = $0 + 496 | 0;
  HEAPF32[$0 >> 2] = Math_fround($8_1 * Math_fround(Math_fround($3_1 * $7_1) - Math_fround($4_1 * $9_1))) + HEAPF32[$0 >> 2];
 }
 
 function $1210($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0);
  $2_1 = HEAPF32[$1_1 + 8 >> 2];
  $3_1 = HEAPF32[$1_1 + 4 >> 2];
  HEAPF32[$0 + 472 >> 2] = Math_fround(HEAPF32[$1_1 >> 2] * HEAPF32[$0 + 408 >> 2]) + HEAPF32[$0 + 472 >> 2];
  $1_1 = $0 + 476 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround($3_1 * HEAPF32[$0 + 412 >> 2]) + HEAPF32[$1_1 >> 2];
  $1_1 = $0 + 480 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround($2_1 * HEAPF32[$0 + 416 >> 2]) + HEAPF32[$1_1 >> 2];
 }
 
 function $1211($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0);
  $2_1 = HEAPF32[$1_1 >> 2];
  $3_1 = HEAPF32[$1_1 + 4 >> 2];
  $4_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAPF32[$0 + 388 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 324 >> 2] * $2_1) + Math_fround(HEAPF32[$0 + 328 >> 2] * $3_1)) + Math_fround(HEAPF32[$0 + 332 >> 2] * $4_1)) * HEAPF32[$0 + 604 >> 2]) + HEAPF32[$0 + 388 >> 2];
  $1_1 = $0 + 392 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($2_1 * HEAPF32[$0 + 340 >> 2]) + Math_fround($3_1 * HEAPF32[$0 + 344 >> 2])) + Math_fround($4_1 * HEAPF32[$0 + 348 >> 2])) * HEAPF32[$0 + 608 >> 2]) + HEAPF32[$1_1 >> 2];
  $1_1 = $0 + 396 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($2_1 * HEAPF32[$0 + 356 >> 2]) + Math_fround($3_1 * HEAPF32[$0 + 360 >> 2])) + Math_fround($4_1 * HEAPF32[$0 + 364 >> 2])) * HEAPF32[$0 + 612 >> 2]) + HEAPF32[$1_1 >> 2];
 }
 
 function $1212($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1213($0, $1_1, $2_1);
 }
 
 function $1213($0, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0);
  $3_1 = HEAPF32[$0 + 404 >> 2];
  if ($3_1 != Math_fround(0.0)) {
   $5_1 = HEAPF32[$1_1 + 8 >> 2];
   $4_1 = HEAPF32[$1_1 + 4 >> 2];
   $6_1 = HEAPF32[$0 + 408 >> 2];
   HEAPF32[$0 + 372 >> 2] = Math_fround($3_1 * Math_fround(HEAPF32[$1_1 >> 2] * $6_1)) + HEAPF32[$0 + 372 >> 2];
   $7_1 = $0 + 376 | 0;
   $8_1 = $4_1;
   $4_1 = HEAPF32[$0 + 412 >> 2];
   HEAPF32[$7_1 >> 2] = Math_fround($3_1 * Math_fround($8_1 * $4_1)) + HEAPF32[$7_1 >> 2];
   $7_1 = $0 + 380 | 0;
   $8_1 = $3_1;
   $3_1 = HEAPF32[$0 + 416 >> 2];
   HEAPF32[$7_1 >> 2] = Math_fround($8_1 * Math_fround($5_1 * $3_1)) + HEAPF32[$7_1 >> 2];
   $11 = HEAPF32[$0 + 612 >> 2];
   $12_1 = HEAPF32[$0 + 364 >> 2];
   $13_1 = HEAPF32[$0 + 356 >> 2];
   $14 = HEAPF32[$0 + 360 >> 2];
   $15_1 = HEAPF32[$0 + 608 >> 2];
   $16_1 = HEAPF32[$0 + 348 >> 2];
   $17_1 = HEAPF32[$0 + 340 >> 2];
   $18_1 = HEAPF32[$0 + 344 >> 2];
   $10 = HEAPF32[$2_1 + 4 >> 2];
   $5_1 = Math_fround($3_1 * HEAPF32[$1_1 + 8 >> 2]);
   $4_1 = Math_fround($4_1 * HEAPF32[$1_1 + 4 >> 2]);
   $9_1 = HEAPF32[$2_1 + 8 >> 2];
   $3_1 = Math_fround(Math_fround($10 * $5_1) - Math_fround($4_1 * $9_1));
   $6_1 = Math_fround($6_1 * HEAPF32[$1_1 >> 2]);
   $8_1 = Math_fround($6_1 * $9_1);
   $9_1 = HEAPF32[$2_1 >> 2];
   $5_1 = Math_fround($8_1 - Math_fround($5_1 * $9_1));
   $4_1 = Math_fround(Math_fround($4_1 * $9_1) - Math_fround($6_1 * $10));
   HEAPF32[$0 + 388 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 324 >> 2] * $3_1) + Math_fround(HEAPF32[$0 + 328 >> 2] * $5_1)) + Math_fround($4_1 * HEAPF32[$0 + 332 >> 2])) * HEAPF32[$0 + 604 >> 2]) + HEAPF32[$0 + 388 >> 2];
   $1_1 = $0 + 392 | 0;
   HEAPF32[$1_1 >> 2] = Math_fround($15_1 * Math_fround(Math_fround(Math_fround($3_1 * $17_1) + Math_fround($5_1 * $18_1)) + Math_fround($4_1 * $16_1))) + HEAPF32[$1_1 >> 2];
   $0 = $0 + 396 | 0;
   HEAPF32[$0 >> 2] = Math_fround($11 * Math_fround(Math_fround(Math_fround($3_1 * $13_1) + Math_fround($5_1 * $14)) + Math_fround($4_1 * $12_1))) + HEAPF32[$0 >> 2];
  }
 }
 
 function $1214($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0);
  $3_1 = HEAPF32[$1_1 + 8 >> 2];
  $4_1 = HEAPF32[$1_1 + 4 >> 2];
  $2_1 = HEAPF32[$0 + 404 >> 2];
  HEAPF32[$0 + 372 >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * HEAPF32[$0 + 408 >> 2]) * $2_1) + HEAPF32[$0 + 372 >> 2];
  $1_1 = $0 + 376 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround($2_1 * Math_fround($4_1 * HEAPF32[$0 + 412 >> 2])) + HEAPF32[$1_1 >> 2];
  $1_1 = $0 + 380 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround($2_1 * Math_fround($3_1 * HEAPF32[$0 + 416 >> 2])) + HEAPF32[$1_1 >> 2];
 }
 
 function $1215($0) {
  $0 = $0 | 0;
  $796($0);
 }
 
 function $1216($0) {
  $0 = $0 | 0;
  return $0 + 372 | 0;
 }
 
 function $1217($0) {
  $0 = $0 | 0;
  return $0 + 388 | 0;
 }
 
 function $1218($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 372 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 376 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 380 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $1219($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 388 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 392 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 396 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $1220($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 604 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 608 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0 = $0 + 612 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $1221($0) {
  $0 = $0 | 0;
  return $0 + 440 | 0;
 }
 
 function $1222($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $801($0, $1_1);
 }
 
 function $1223($0) {
  $0 = $0 | 0;
  return $0 + 472 | 0;
 }
 
 function $1224($0) {
  $0 = $0 | 0;
  return $0 + 488 | 0;
 }
 
 function $1225($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 564 >> 2];
 }
 
 function $1226($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 564 >> 2] = $1_1;
 }
 
 function $1227($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 + 472 >> 2] = 0;
  HEAP32[$0 + 476 >> 2] = 0;
  $1_1 = $0 + 496 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0 + 488 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $0 = $0 + 480 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $1228() {
  var $0 = 0;
  $0 = $79(236);
  $816($0);
  return $0 | 0;
 }
 
 function $1229($0) {
  $0 = $0 | 0;
  return HEAPU8[$0 + 16 | 0];
 }
 
 function $1230($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0 + 16 | 0] = $1_1;
 }
 
 function $1231($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1_1, $2_1, $3_1);
 }
 
 function $1232($0) {
  $0 = $0 | 0;
  return $0 + 28 | 0;
 }
 
 function $1233($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1_1, $2_1, $3_1);
 }
 
 function $1234($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $1_1);
 }
 
 function $1235($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $869($0, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $1239($0) {
  $0 = $0 | 0;
  return $0 + 92 | 0;
 }
 
 function $1240($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = $79(344);
  $937($3_1, $0, $1_1, $2_1);
  return $3_1 | 0;
 }
 
 function $1241($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, $1_1);
 }
 
 function $1242($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 76 >> 2]]($1_1, $0);
  $0 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  HEAP32[6305] = HEAP32[$0 >> 2];
  HEAP32[6306] = $2_1;
  $0 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[6303] = HEAP32[$1_1 >> 2];
  HEAP32[6304] = $0;
  global$0 = $1_1 + 16 | 0;
  return 25212;
 }
 
 function $1243($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 88 >> 2]]($0, $1_1, $2_1, $3_1);
 }
 
 function $1244($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 92 >> 2]]($0, $1_1);
 }
 
 function $1245($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1_1, $2_1, $3_1) | 0;
 }
 
 function $1246($0) {
  $0 = $0 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 120 >> 2]]($0);
 }
 
 function $1247($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0 + 291 | 0] = $1_1;
 }
 
 function $1248($0) {
  $0 = $0 | 0;
  return HEAPU8[$0 + 291 | 0];
 }
 
 function $1249($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $79(292);
  $1001($4_1, $0, $1_1, $2_1, $3_1);
  return $4_1 | 0;
 }
 
 function $1250($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1_1);
 }
 
 function $1251($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 28 >> 2] = $1_1;
 }
 
 function $1252($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 36 >> 2] = $1_1;
  HEAPF32[$0 + 32 >> 2] = $1_1;
 }
 
 function $1253($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  HEAPF32[$0 + 44 >> 2] = $1_1;
  (wasm2js_i32$0 = $0, wasm2js_f32$0 = $494($1_1)), HEAPF32[wasm2js_i32$0 + 48 >> 2] = wasm2js_f32$0;
 }
 
 function $1255($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1_1);
 }
 
 function $1256($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $1028($0, $1_1);
 }
 
 function $1257($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $1003($0, $1_1);
 }
 
 function $1258($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0 + 60 >> 2] = $1_1;
 }
 
 function $1260() {
  var $0 = 0;
  $0 = $79(348);
  $994($0);
  return $0 | 0;
 }
 
 function $1261() {
  var $0 = 0;
  $0 = $36(4);
  HEAP32[$0 >> 2] = 23172;
  return $0 | 0;
 }
 
 function $1262($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0);
  $3_1 = global$0 - 128 | 0;
  global$0 = $3_1;
  $18_1 = HEAPF32[$2_1 + 8 >> 2];
  $19_1 = HEAPF32[$2_1 >> 2];
  $20 = HEAPF32[$2_1 + 4 >> 2];
  $10 = HEAPF32[$0 + 36 >> 2];
  $11 = HEAPF32[$0 + 20 >> 2];
  $16_1 = HEAPF32[$0 + 60 >> 2];
  $23_1 = HEAPF32[$0 + 56 >> 2];
  $17_1 = HEAPF32[$0 + 52 >> 2];
  $4_1 = HEAPF32[$0 + 40 >> 2];
  $6_1 = HEAPF32[$0 + 8 >> 2];
  $12_1 = HEAPF32[$0 + 24 >> 2];
  $13_1 = HEAPF32[$0 + 44 >> 2];
  $14 = HEAPF32[$0 + 12 >> 2];
  $5_1 = HEAPF32[$0 + 28 >> 2];
  $15_1 = HEAPF32[$0 + 4 >> 2];
  HEAP32[$3_1 + 124 >> 2] = 0;
  HEAP32[$3_1 + 108 >> 2] = 0;
  HEAP32[$3_1 + 92 >> 2] = 0;
  $8_1 = Math_fround($14 * Math_fround(0.0));
  $21 = Math_fround($5_1 * Math_fround(0.0));
  HEAPF32[$3_1 + 104 >> 2] = $13_1 + Math_fround($8_1 + $21);
  $7_1 = Math_fround($8_1 + $5_1);
  $8_1 = Math_fround($13_1 * Math_fround(0.0));
  HEAPF32[$3_1 + 100 >> 2] = $7_1 + $8_1;
  $9_1 = Math_fround($6_1 * Math_fround(0.0));
  $22_1 = Math_fround($12_1 * Math_fround(0.0));
  HEAPF32[$3_1 + 88 >> 2] = $4_1 + Math_fround($9_1 + $22_1);
  $7_1 = Math_fround($9_1 + $12_1);
  $9_1 = Math_fround($4_1 * Math_fround(0.0));
  HEAPF32[$3_1 + 84 >> 2] = $7_1 + $9_1;
  $24_1 = Math_fround(Math_fround(Math_fround($19_1 * $14) + Math_fround($20 * $5_1)) + Math_fround($18_1 * $13_1));
  $7_1 = $5_1;
  $5_1 = Math_fround(-$23_1);
  HEAPF32[$3_1 + 120 >> 2] = $24_1 + Math_fround(Math_fround(Math_fround($7_1 * $5_1) - Math_fround($14 * $17_1)) - Math_fround($13_1 * $16_1));
  HEAPF32[$3_1 + 116 >> 2] = Math_fround(Math_fround(Math_fround($19_1 * $6_1) + Math_fround($20 * $12_1)) + Math_fround($18_1 * $4_1)) + Math_fround(Math_fround(Math_fround($12_1 * $5_1) - Math_fround($6_1 * $17_1)) - Math_fround($4_1 * $16_1));
  HEAP32[$3_1 + 76 >> 2] = 0;
  HEAPF32[$3_1 + 96 >> 2] = Math_fround($14 + $21) + $8_1;
  HEAPF32[$3_1 + 80 >> 2] = Math_fround($6_1 + $22_1) + $9_1;
  $4_1 = Math_fround($15_1 * Math_fround(0.0));
  $6_1 = Math_fround($11 * Math_fround(0.0));
  HEAPF32[$3_1 + 72 >> 2] = $10 + Math_fround($4_1 + $6_1);
  $7_1 = Math_fround($4_1 + $11);
  $4_1 = Math_fround($10 * Math_fround(0.0));
  HEAPF32[$3_1 + 68 >> 2] = $7_1 + $4_1;
  HEAPF32[$3_1 + 64 >> 2] = Math_fround($15_1 + $6_1) + $4_1;
  HEAPF32[$3_1 + 112 >> 2] = Math_fround(Math_fround(Math_fround($19_1 * $15_1) + Math_fround($20 * $11)) + Math_fround($18_1 * $10)) + Math_fround(Math_fround(Math_fround($11 * $5_1) - Math_fround($15_1 * $17_1)) - Math_fround($10 * $16_1));
  $10 = HEAPF32[$1_1 + 36 >> 2];
  $11 = HEAPF32[$1_1 + 20 >> 2];
  $16_1 = HEAPF32[$1_1 + 60 >> 2];
  $23_1 = HEAPF32[$1_1 + 56 >> 2];
  $17_1 = HEAPF32[$1_1 + 52 >> 2];
  $4_1 = HEAPF32[$1_1 + 40 >> 2];
  $6_1 = HEAPF32[$1_1 + 8 >> 2];
  $12_1 = HEAPF32[$1_1 + 24 >> 2];
  $13_1 = HEAPF32[$1_1 + 44 >> 2];
  $14 = HEAPF32[$1_1 + 12 >> 2];
  $5_1 = HEAPF32[$1_1 + 28 >> 2];
  $15_1 = HEAPF32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 60 >> 2] = 0;
  HEAP32[$3_1 + 44 >> 2] = 0;
  HEAP32[$3_1 + 28 >> 2] = 0;
  $8_1 = Math_fround($14 * Math_fround(0.0));
  $21 = Math_fround($5_1 * Math_fround(0.0));
  HEAPF32[$3_1 + 40 >> 2] = $13_1 + Math_fround($8_1 + $21);
  $7_1 = Math_fround($8_1 + $5_1);
  $8_1 = Math_fround($13_1 * Math_fround(0.0));
  HEAPF32[$3_1 + 36 >> 2] = $7_1 + $8_1;
  $9_1 = Math_fround($6_1 * Math_fround(0.0));
  $22_1 = Math_fround($12_1 * Math_fround(0.0));
  HEAPF32[$3_1 + 24 >> 2] = $4_1 + Math_fround($9_1 + $22_1);
  $7_1 = Math_fround($9_1 + $12_1);
  $9_1 = Math_fround($4_1 * Math_fround(0.0));
  HEAPF32[$3_1 + 20 >> 2] = $7_1 + $9_1;
  $24_1 = Math_fround(Math_fround(Math_fround($19_1 * $14) + Math_fround($20 * $5_1)) + Math_fround($18_1 * $13_1));
  $7_1 = $5_1;
  $5_1 = Math_fround(-$23_1);
  HEAPF32[$3_1 + 56 >> 2] = $24_1 + Math_fround(Math_fround(Math_fround($7_1 * $5_1) - Math_fround($14 * $17_1)) - Math_fround($13_1 * $16_1));
  HEAPF32[$3_1 + 52 >> 2] = Math_fround(Math_fround(Math_fround($19_1 * $6_1) + Math_fround($20 * $12_1)) + Math_fround($18_1 * $4_1)) + Math_fround(Math_fround(Math_fround($12_1 * $5_1) - Math_fround($6_1 * $17_1)) - Math_fround($4_1 * $16_1));
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 32 >> 2] = Math_fround($14 + $21) + $8_1;
  HEAPF32[$3_1 + 16 >> 2] = Math_fround($6_1 + $22_1) + $9_1;
  $4_1 = Math_fround($15_1 * Math_fround(0.0));
  $6_1 = Math_fround($11 * Math_fround(0.0));
  HEAPF32[$3_1 + 8 >> 2] = $10 + Math_fround($4_1 + $6_1);
  $7_1 = Math_fround($4_1 + $11);
  $4_1 = Math_fround($10 * Math_fround(0.0));
  HEAPF32[$3_1 + 4 >> 2] = $7_1 + $4_1;
  HEAPF32[$3_1 >> 2] = Math_fround($15_1 + $6_1) + $4_1;
  HEAPF32[$3_1 + 48 >> 2] = Math_fround(Math_fround(Math_fround($19_1 * $15_1) + Math_fround($20 * $11)) + Math_fround($18_1 * $10)) + Math_fround(Math_fround(Math_fround($11 * $5_1) - Math_fround($15_1 * $17_1)) - Math_fround($10 * $16_1));
  $2_1 = $79(1460);
  $1055($2_1, $0, $1_1, $3_1 - -64 | 0, $3_1);
  HEAP32[$2_1 + 24 >> 2] = 60;
  global$0 = $3_1 + 128 | 0;
  return $2_1 | 0;
 }
 
 function $1264($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0 + 20 | 0] = $1_1;
 }
 
 function $1265($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $1_1, $2_1);
 }
 
 function $1267() {
  var $0 = 0, $1_1 = 0;
  $1_1 = $79(64);
  $0 = $1_1;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $0 + 56 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1_1 + 48 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1_1 + 40 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1_1 + 32 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1_1 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1_1 + 16 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1_1 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1268($0) {
  $0 = $0 | 0;
  if ($0) {
   $80($0)
  }
 }
 
 function $1269($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0 + 44 >> 2] = $1_1;
 }
 
 function $1270($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 44 >> 2];
 }
 
 function $1271($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0 + 21 | 0] = $1_1;
 }
 
 function $1278($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  fimport$4(HEAP32[$0 + 4 >> 2], $1_1 | 0);
 }
 
 function $1279($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  fimport$5(HEAP32[$0 + 4 >> 2], $1_1 | 0);
 }
 
 function $1281($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  if (!(HEAP32[$0 + 16 >> 2] & HEAP32[$1_1 + 4 >> 2])) {
   return 0
  }
  return (HEAP32[$1_1 + 8 >> 2] & HEAP32[$0 + 12 >> 2]) != 0 | 0;
 }
 
 function $1282($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0);
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 24 >> 2];
  $3_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 8 >> 2] = $3_1;
  label$1 : {
   if ($2_1) {
    $2_1 = HEAP32[$1_1 + 12 >> 2];
    HEAP32[$0 + 56 >> 2] = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$0 + 60 >> 2] = $2_1;
    $3_1 = $1_1 + 16 | 0;
    $7_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0 - -64 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $7_1;
    break label$1;
   }
   $8_1 = HEAPF32[$3_1 + 8 >> 2];
   $9_1 = HEAPF32[$3_1 + 12 >> 2];
   $10 = HEAPF32[$3_1 + 20 >> 2];
   $11 = HEAPF32[$3_1 + 24 >> 2];
   $12_1 = HEAPF32[$3_1 + 28 >> 2];
   $13_1 = HEAPF32[$3_1 + 36 >> 2];
   $14 = HEAPF32[$3_1 + 40 >> 2];
   $4_1 = HEAPF32[$1_1 + 12 >> 2];
   $15_1 = HEAPF32[$3_1 + 44 >> 2];
   $5_1 = HEAPF32[$1_1 + 16 >> 2];
   $16_1 = HEAPF32[$3_1 + 4 >> 2];
   $6_1 = HEAPF32[$1_1 + 8 >> 2];
   HEAP32[$0 + 68 >> 2] = 0;
   HEAPF32[$0 - -64 >> 2] = Math_fround(Math_fround($6_1 * $13_1) + Math_fround($4_1 * $14)) + Math_fround($5_1 * $15_1);
   HEAPF32[$0 + 60 >> 2] = Math_fround(Math_fround($6_1 * $10) + Math_fround($4_1 * $11)) + Math_fround($5_1 * $12_1);
   HEAPF32[$0 + 56 >> 2] = Math_fround(Math_fround($16_1 * $6_1) + Math_fround($8_1 * $4_1)) + Math_fround($9_1 * $5_1);
  }
  $4_1 = HEAPF32[$1_1 + 24 >> 2];
  $5_1 = Math_fround(Math_fround(1.0) - $4_1);
  HEAPF32[$0 + 72 >> 2] = Math_fround($5_1 * HEAPF32[$0 + 24 >> 2]) + Math_fround($4_1 * HEAPF32[$0 + 40 >> 2]);
  HEAPF32[$0 + 76 >> 2] = Math_fround($5_1 * HEAPF32[$0 + 28 >> 2]) + Math_fround($4_1 * HEAPF32[$0 + 44 >> 2]);
  HEAPF32[$0 + 80 >> 2] = Math_fround($5_1 * HEAPF32[$0 + 32 >> 2]) + Math_fround($4_1 * HEAPF32[$0 + 48 >> 2]);
  return Math_fround(HEAPF32[$1_1 + 24 >> 2]);
 }
 
 function $1284($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 22864;
  $1_1 = HEAP32[$0 + 128 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 132 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 128 >> 2] = 0;
  }
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 120 >> 2] = 0;
  HEAP32[$0 + 124 >> 2] = 0;
  HEAP8[$0 + 132 | 0] = 1;
  $1_1 = HEAP32[$0 + 108 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 112 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 108 >> 2] = 0;
  }
  HEAP32[$0 + 108 >> 2] = 0;
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP32[$0 + 104 >> 2] = 0;
  HEAP8[$0 + 112 | 0] = 1;
  $1_1 = HEAP32[$0 + 88 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 92 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 88 >> 2] = 0;
  }
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP8[$0 + 92 | 0] = 1;
  $1_1 = HEAP32[$0 + 36 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 40 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  return $0 | 0;
 }
 
 function $1285($0) {
  $0 = $0 | 0;
  $37($1284($0));
 }
 
 function $1286($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10 = 0, $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0);
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 >> 2];
  $3_1 = HEAP32[$0 + 28 >> 2];
  label$1 : {
   if (($3_1 | 0) != HEAP32[$0 + 32 >> 2]) {
    break label$1
   }
   $5_1 = $3_1 ? $3_1 << 1 : 1;
   if (($3_1 | 0) >= ($5_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$5_1) {
     break label$2
    }
    $6_1 = $79($5_1 << 2);
    $3_1 = HEAP32[$0 + 28 >> 2];
   }
   if (($3_1 | 0) >= 1) {
    $4_1 = $3_1;
    while (1) {
     HEAP32[$7_1 + $6_1 >> 2] = HEAP32[HEAP32[$0 + 36 >> 2] + $7_1 >> 2];
     $7_1 = $7_1 + 4 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue
     }
     break;
    };
   }
   $4_1 = HEAP32[$0 + 36 >> 2];
   if ($4_1) {
    if (HEAPU8[$0 + 40 | 0]) {
     $80($4_1);
     $3_1 = HEAP32[$0 + 28 >> 2];
    }
    HEAP32[$0 + 36 >> 2] = 0;
   }
   HEAP32[$0 + 36 >> 2] = $6_1;
   HEAP32[$0 + 32 >> 2] = $5_1;
   HEAP8[$0 + 40 | 0] = 1;
  }
  HEAP32[$0 + 28 >> 2] = $3_1 + 1;
  HEAP32[HEAP32[$0 + 36 >> 2] + ($3_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
  label$8 : {
   if ($2_1) {
    $14 = HEAPF32[$1_1 + 16 >> 2];
    $12_1 = HEAPF32[$1_1 + 12 >> 2];
    $8_1 = HEAPF32[$1_1 + 8 >> 2];
    $11 = HEAPF32[$1_1 + 20 >> 2];
    break label$8;
   }
   $13_1 = HEAPF32[$1_1 + 8 >> 2];
   $2_1 = HEAP32[$0 + 8 >> 2];
   $11 = HEAPF32[$1_1 + 12 >> 2];
   $8_1 = HEAPF32[$1_1 + 16 >> 2];
   $14 = Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$2_1 + 36 >> 2]) + Math_fround($11 * HEAPF32[$2_1 + 40 >> 2])) + Math_fround($8_1 * HEAPF32[$2_1 + 44 >> 2]));
   $12_1 = Math_fround(Math_fround(Math_fround($13_1 * HEAPF32[$2_1 + 20 >> 2]) + Math_fround($11 * HEAPF32[$2_1 + 24 >> 2])) + Math_fround($8_1 * HEAPF32[$2_1 + 28 >> 2]));
   $8_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 4 >> 2] * $13_1) + Math_fround(HEAPF32[$2_1 + 8 >> 2] * $11)) + Math_fround(HEAPF32[$2_1 + 12 >> 2] * $8_1));
   $11 = Math_fround(0.0);
  }
  $4_1 = HEAP32[$0 + 80 >> 2];
  label$10 : {
   if (($4_1 | 0) != HEAP32[$0 + 84 >> 2]) {
    break label$10
   }
   $10 = $4_1 ? $4_1 << 1 : 1;
   if (($4_1 | 0) >= ($10 | 0)) {
    break label$10
   }
   label$11 : {
    if (!$10) {
     $2_1 = 0;
     break label$11;
    }
    $2_1 = $79($10 << 4);
    $4_1 = HEAP32[$0 + 80 >> 2];
   }
   if (($4_1 | 0) >= 1) {
    $7_1 = 0;
    while (1) {
     $9_1 = HEAP32[$0 + 88 >> 2] + $7_1 | 0;
     $3_1 = HEAP32[$9_1 + 4 >> 2];
     $6_1 = $2_1 + $7_1 | 0;
     $5_1 = $6_1;
     HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     $5_1 = $9_1 + 8 | 0;
     $3_1 = HEAP32[$5_1 + 4 >> 2];
     $6_1 = $6_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $3_1;
     $7_1 = $7_1 + 16 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue
     }
     break;
    };
   }
   $3_1 = HEAP32[$0 + 88 >> 2];
   if ($3_1) {
    if (HEAPU8[$0 + 92 | 0]) {
     $80($3_1)
    }
    HEAP32[$0 + 88 >> 2] = 0;
   }
   HEAP32[$0 + 88 >> 2] = $2_1;
   HEAP32[$0 + 84 >> 2] = $10;
   HEAP8[$0 + 92 | 0] = 1;
   $4_1 = HEAP32[$0 + 80 >> 2];
  }
  $2_1 = HEAP32[$0 + 88 >> 2] + ($4_1 << 4) | 0;
  HEAPF32[$2_1 + 12 >> 2] = $11;
  HEAPF32[$2_1 + 8 >> 2] = $14;
  HEAPF32[$2_1 + 4 >> 2] = $12_1;
  HEAPF32[$2_1 >> 2] = $8_1;
  HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 80 >> 2] + 1;
  $12_1 = HEAPF32[$1_1 + 24 >> 2];
  $8_1 = Math_fround(Math_fround(1.0) - $12_1);
  $13_1 = Math_fround(Math_fround($8_1 * HEAPF32[$0 + 52 >> 2]) + Math_fround($12_1 * HEAPF32[$0 + 68 >> 2]));
  $11 = Math_fround(Math_fround($8_1 * HEAPF32[$0 + 48 >> 2]) + Math_fround($12_1 * HEAPF32[$0 - -64 >> 2]));
  $8_1 = Math_fround(Math_fround($8_1 * HEAPF32[$0 + 44 >> 2]) + Math_fround($12_1 * HEAPF32[$0 + 60 >> 2]));
  $4_1 = HEAP32[$0 + 100 >> 2];
  label$17 : {
   if (($4_1 | 0) != HEAP32[$0 + 104 >> 2]) {
    break label$17
   }
   $10 = $4_1 ? $4_1 << 1 : 1;
   if (($4_1 | 0) >= ($10 | 0)) {
    break label$17
   }
   label$18 : {
    if (!$10) {
     $2_1 = 0;
     break label$18;
    }
    $2_1 = $79($10 << 4);
    $4_1 = HEAP32[$0 + 100 >> 2];
   }
   if (($4_1 | 0) >= 1) {
    $7_1 = 0;
    while (1) {
     $9_1 = HEAP32[$0 + 108 >> 2] + $7_1 | 0;
     $3_1 = HEAP32[$9_1 + 4 >> 2];
     $6_1 = $2_1 + $7_1 | 0;
     $5_1 = $6_1;
     HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     $5_1 = $9_1 + 8 | 0;
     $3_1 = HEAP32[$5_1 + 4 >> 2];
     $6_1 = $6_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $3_1;
     $7_1 = $7_1 + 16 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue
     }
     break;
    };
   }
   $3_1 = HEAP32[$0 + 108 >> 2];
   if ($3_1) {
    if (HEAPU8[$0 + 112 | 0]) {
     $80($3_1)
    }
    HEAP32[$0 + 108 >> 2] = 0;
   }
   HEAP32[$0 + 108 >> 2] = $2_1;
   HEAP32[$0 + 104 >> 2] = $10;
   HEAP8[$0 + 112 | 0] = 1;
   $4_1 = HEAP32[$0 + 100 >> 2];
  }
  $2_1 = HEAP32[$0 + 108 >> 2] + ($4_1 << 4) | 0;
  HEAPF32[$2_1 + 8 >> 2] = $13_1;
  HEAPF32[$2_1 + 4 >> 2] = $11;
  HEAPF32[$2_1 >> 2] = $8_1;
  HEAP32[$0 + 100 >> 2] = HEAP32[$0 + 100 >> 2] + 1;
  $3_1 = HEAP32[$0 + 120 >> 2];
  label$24 : {
   if (($3_1 | 0) != HEAP32[$0 + 124 >> 2]) {
    break label$24
   }
   $9_1 = $3_1 ? $3_1 << 1 : 1;
   if (($3_1 | 0) >= ($9_1 | 0)) {
    break label$24
   }
   label$25 : {
    if (!$9_1) {
     $5_1 = 0;
     break label$25;
    }
    $5_1 = $79($9_1 << 2);
    $3_1 = HEAP32[$0 + 120 >> 2];
   }
   $2_1 = HEAP32[$0 + 128 >> 2];
   label$27 : {
    label$28 : {
     if (($3_1 | 0) >= 1) {
      $7_1 = $5_1;
      $4_1 = $2_1;
      $6_1 = $3_1;
      while (1) {
       HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
       $7_1 = $7_1 + 4 | 0;
       $4_1 = $4_1 + 4 | 0;
       $6_1 = $6_1 + -1 | 0;
       if ($6_1) {
        continue
       }
       break;
      };
      break label$28;
     }
     if (!$2_1) {
      break label$27
     }
    }
    if (HEAPU8[$0 + 132 | 0]) {
     $80($2_1);
     $3_1 = HEAP32[$0 + 120 >> 2];
    }
    HEAP32[$0 + 128 >> 2] = 0;
   }
   HEAP32[$0 + 128 >> 2] = $5_1;
   HEAP32[$0 + 124 >> 2] = $9_1;
   HEAP8[$0 + 132 | 0] = 1;
  }
  HEAP32[HEAP32[$0 + 128 >> 2] + ($3_1 << 2) >> 2] = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$0 + 120 >> 2] = $3_1 + 1;
  return Math_fround(HEAPF32[$0 + 4 >> 2]);
 }
 
 function $1289($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  if (!(HEAP32[$0 + 12 >> 2] & HEAP32[$1_1 + 4 >> 2])) {
   return 0
  }
  return (HEAP32[$1_1 + 8 >> 2] & HEAP32[$0 + 8 >> 2]) != 0 | 0;
 }
 
 function $1290($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0);
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 40 >> 2];
  $3_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 80 >> 2] = $3_1;
  label$1 : {
   if ($2_1) {
    $2_1 = HEAP32[$1_1 + 12 >> 2];
    HEAP32[$0 + 48 >> 2] = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$0 + 52 >> 2] = $2_1;
    $3_1 = $1_1 + 16 | 0;
    $7_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0 + 56 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $7_1;
    break label$1;
   }
   $8_1 = HEAPF32[$3_1 + 8 >> 2];
   $9_1 = HEAPF32[$3_1 + 12 >> 2];
   $10 = HEAPF32[$3_1 + 20 >> 2];
   $11 = HEAPF32[$3_1 + 24 >> 2];
   $12_1 = HEAPF32[$3_1 + 28 >> 2];
   $13_1 = HEAPF32[$3_1 + 36 >> 2];
   $14 = HEAPF32[$3_1 + 40 >> 2];
   $4_1 = HEAPF32[$1_1 + 12 >> 2];
   $15_1 = HEAPF32[$3_1 + 44 >> 2];
   $5_1 = HEAPF32[$1_1 + 16 >> 2];
   $16_1 = HEAPF32[$3_1 + 4 >> 2];
   $6_1 = HEAPF32[$1_1 + 8 >> 2];
   HEAP32[$0 + 60 >> 2] = 0;
   HEAPF32[$0 + 56 >> 2] = Math_fround(Math_fround($6_1 * $13_1) + Math_fround($4_1 * $14)) + Math_fround($5_1 * $15_1);
   HEAPF32[$0 + 52 >> 2] = Math_fround(Math_fround($6_1 * $10) + Math_fround($4_1 * $11)) + Math_fround($5_1 * $12_1);
   HEAPF32[$0 + 48 >> 2] = Math_fround(Math_fround($16_1 * $6_1) + Math_fround($8_1 * $4_1)) + Math_fround($9_1 * $5_1);
  }
  $2_1 = HEAP32[$1_1 + 28 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$0 + 68 >> 2] = $2_1;
  $2_1 = $1_1 + 32 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $0 = $0 + 72 | 0;
  HEAP32[$0 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3_1;
  return Math_fround(HEAPF32[$1_1 + 40 >> 2]);
 }
 
 function $1291($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 23088;
  $1_1 = HEAP32[$0 + 120 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 124 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 120 >> 2] = 0;
  }
  HEAP32[$0 + 120 >> 2] = 0;
  HEAP32[$0 + 112 >> 2] = 0;
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP8[$0 + 124 | 0] = 1;
  $1_1 = HEAP32[$0 + 100 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 104 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 100 >> 2] = 0;
  }
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP8[$0 + 104 | 0] = 1;
  $1_1 = HEAP32[$0 + 80 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 84 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 80 >> 2] = 0;
  }
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP8[$0 + 84 | 0] = 1;
  $1_1 = HEAP32[$0 + 28 >> 2];
  if ($1_1) {
   if (HEAPU8[$0 + 32 | 0]) {
    $80($1_1)
   }
   HEAP32[$0 + 28 >> 2] = 0;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP8[$0 + 32 | 0] = 1;
  return $0 | 0;
 }
 
 function $1292($0) {
  $0 = $0 | 0;
  $37($1291($0));
 }
 
 function $1293($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0);
  $3_1 = HEAP32[$0 + 20 >> 2];
  label$1 : {
   if (($3_1 | 0) != HEAP32[$0 + 24 >> 2]) {
    break label$1
   }
   $5_1 = $3_1 ? $3_1 << 1 : 1;
   if (($3_1 | 0) >= ($5_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$5_1) {
     break label$2
    }
    $6_1 = $79($5_1 << 2);
    $3_1 = HEAP32[$0 + 20 >> 2];
   }
   if (($3_1 | 0) >= 1) {
    $4_1 = $3_1;
    while (1) {
     HEAP32[$7_1 + $6_1 >> 2] = HEAP32[HEAP32[$0 + 28 >> 2] + $7_1 >> 2];
     $7_1 = $7_1 + 4 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue
     }
     break;
    };
   }
   $4_1 = HEAP32[$0 + 28 >> 2];
   if ($4_1) {
    if (HEAPU8[$0 + 32 | 0]) {
     $80($4_1);
     $3_1 = HEAP32[$0 + 20 >> 2];
    }
    HEAP32[$0 + 28 >> 2] = 0;
   }
   HEAP32[$0 + 28 >> 2] = $6_1;
   HEAP32[$0 + 24 >> 2] = $5_1;
   HEAP8[$0 + 32 | 0] = 1;
  }
  HEAP32[$0 + 20 >> 2] = $3_1 + 1;
  HEAP32[HEAP32[$0 + 28 >> 2] + ($3_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
  label$8 : {
   if ($2_1) {
    $14 = HEAPF32[$1_1 + 16 >> 2];
    $15_1 = HEAPF32[$1_1 + 12 >> 2];
    $10 = HEAPF32[$1_1 + 8 >> 2];
    $11 = HEAPF32[$1_1 + 20 >> 2];
    break label$8;
   }
   $12_1 = HEAPF32[$1_1 + 8 >> 2];
   $2_1 = HEAP32[$1_1 >> 2];
   $11 = HEAPF32[$1_1 + 12 >> 2];
   $10 = HEAPF32[$1_1 + 16 >> 2];
   $14 = Math_fround(Math_fround(Math_fround($12_1 * HEAPF32[$2_1 + 36 >> 2]) + Math_fround($11 * HEAPF32[$2_1 + 40 >> 2])) + Math_fround($10 * HEAPF32[$2_1 + 44 >> 2]));
   $15_1 = Math_fround(Math_fround(Math_fround($12_1 * HEAPF32[$2_1 + 20 >> 2]) + Math_fround($11 * HEAPF32[$2_1 + 24 >> 2])) + Math_fround($10 * HEAPF32[$2_1 + 28 >> 2]));
   $10 = Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 4 >> 2] * $12_1) + Math_fround(HEAPF32[$2_1 + 8 >> 2] * $11)) + Math_fround(HEAPF32[$2_1 + 12 >> 2] * $10));
   $11 = Math_fround(0.0);
  }
  $4_1 = HEAP32[$0 + 72 >> 2];
  label$10 : {
   if (($4_1 | 0) != HEAP32[$0 + 76 >> 2]) {
    break label$10
   }
   $9_1 = $4_1 ? $4_1 << 1 : 1;
   if (($4_1 | 0) >= ($9_1 | 0)) {
    break label$10
   }
   label$11 : {
    if (!$9_1) {
     $2_1 = 0;
     break label$11;
    }
    $2_1 = $79($9_1 << 4);
    $4_1 = HEAP32[$0 + 72 >> 2];
   }
   if (($4_1 | 0) >= 1) {
    $7_1 = 0;
    while (1) {
     $8_1 = HEAP32[$0 + 80 >> 2] + $7_1 | 0;
     $3_1 = HEAP32[$8_1 + 4 >> 2];
     $6_1 = $2_1 + $7_1 | 0;
     $5_1 = $6_1;
     HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     $5_1 = $8_1 + 8 | 0;
     $3_1 = HEAP32[$5_1 + 4 >> 2];
     $6_1 = $6_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $3_1;
     $7_1 = $7_1 + 16 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue
     }
     break;
    };
   }
   $3_1 = HEAP32[$0 + 80 >> 2];
   if ($3_1) {
    if (HEAPU8[$0 + 84 | 0]) {
     $80($3_1)
    }
    HEAP32[$0 + 80 >> 2] = 0;
   }
   HEAP32[$0 + 80 >> 2] = $2_1;
   HEAP32[$0 + 76 >> 2] = $9_1;
   HEAP8[$0 + 84 | 0] = 1;
   $4_1 = HEAP32[$0 + 72 >> 2];
  }
  $2_1 = HEAP32[$0 + 80 >> 2] + ($4_1 << 4) | 0;
  HEAPF32[$2_1 + 12 >> 2] = $11;
  HEAPF32[$2_1 + 8 >> 2] = $14;
  HEAPF32[$2_1 + 4 >> 2] = $15_1;
  HEAPF32[$2_1 >> 2] = $10;
  HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 72 >> 2] + 1;
  $13_1 = $1_1 + 24 | 0;
  $4_1 = HEAP32[$0 + 92 >> 2];
  label$17 : {
   if (($4_1 | 0) != HEAP32[$0 + 96 >> 2]) {
    break label$17
   }
   $9_1 = $4_1 ? $4_1 << 1 : 1;
   if (($4_1 | 0) >= ($9_1 | 0)) {
    break label$17
   }
   label$18 : {
    if (!$9_1) {
     $2_1 = 0;
     break label$18;
    }
    $2_1 = $79($9_1 << 4);
    $4_1 = HEAP32[$0 + 92 >> 2];
   }
   if (($4_1 | 0) >= 1) {
    $7_1 = 0;
    while (1) {
     $8_1 = HEAP32[$0 + 100 >> 2] + $7_1 | 0;
     $3_1 = HEAP32[$8_1 + 4 >> 2];
     $6_1 = $2_1 + $7_1 | 0;
     $5_1 = $6_1;
     HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     $5_1 = $8_1 + 8 | 0;
     $3_1 = HEAP32[$5_1 + 4 >> 2];
     $6_1 = $6_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $3_1;
     $7_1 = $7_1 + 16 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue
     }
     break;
    };
   }
   $3_1 = HEAP32[$0 + 100 >> 2];
   if ($3_1) {
    if (HEAPU8[$0 + 104 | 0]) {
     $80($3_1)
    }
    HEAP32[$0 + 100 >> 2] = 0;
   }
   HEAP32[$0 + 100 >> 2] = $2_1;
   HEAP32[$0 + 96 >> 2] = $9_1;
   HEAP8[$0 + 104 | 0] = 1;
   $4_1 = HEAP32[$0 + 92 >> 2];
  }
  $2_1 = HEAP32[$13_1 + 4 >> 2];
  $3_1 = HEAP32[$0 + 100 >> 2] + ($4_1 << 4) | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$13_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $4_1 = $3_1 + 8 | 0;
  $3_1 = $13_1 + 8 | 0;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 92 >> 2] + 1;
  $3_1 = HEAP32[$0 + 112 >> 2];
  label$24 : {
   if (($3_1 | 0) != HEAP32[$0 + 116 >> 2]) {
    break label$24
   }
   $8_1 = $3_1 ? $3_1 << 1 : 1;
   if (($3_1 | 0) >= ($8_1 | 0)) {
    break label$24
   }
   label$25 : {
    if (!$8_1) {
     $5_1 = 0;
     break label$25;
    }
    $5_1 = $79($8_1 << 2);
    $3_1 = HEAP32[$0 + 112 >> 2];
   }
   $2_1 = HEAP32[$0 + 120 >> 2];
   label$27 : {
    label$28 : {
     if (($3_1 | 0) >= 1) {
      $7_1 = $5_1;
      $4_1 = $2_1;
      $6_1 = $3_1;
      while (1) {
       HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
       $7_1 = $7_1 + 4 | 0;
       $4_1 = $4_1 + 4 | 0;
       $6_1 = $6_1 + -1 | 0;
       if ($6_1) {
        continue
       }
       break;
      };
      break label$28;
     }
     if (!$2_1) {
      break label$27
     }
    }
    if (HEAPU8[$0 + 124 | 0]) {
     $80($2_1);
     $3_1 = HEAP32[$0 + 112 >> 2];
    }
    HEAP32[$0 + 120 >> 2] = 0;
   }
   HEAP32[$0 + 120 >> 2] = $5_1;
   HEAP32[$0 + 116 >> 2] = $8_1;
   HEAP8[$0 + 124 | 0] = 1;
  }
  HEAP32[HEAP32[$0 + 120 >> 2] + ($3_1 << 2) >> 2] = HEAP32[$1_1 + 40 >> 2];
  HEAP32[$0 + 112 >> 2] = $3_1 + 1;
  return Math_fround(HEAPF32[$0 + 4 >> 2]);
 }
 
 function $1296($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $0 = HEAP32[$2_1 >> 2];
  $0 = HEAP32[$0 + 252 >> 2] == 4 ? $0 : 0;
  $3_1 = HEAP32[$1_1 >> 2];
  if (!(!$3_1 | HEAP32[$3_1 + 252 >> 2] != 4)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 28 >> 2]]($3_1, $2_1, $1_1)
  }
  if ($0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1_1, $2_1)
  }
  return 0;
 }
 
 function $1297($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $0 = HEAP32[$2_1 >> 2];
  $0 = HEAP32[$0 + 252 >> 2] == 4 ? $0 : 0;
  $4_1 = HEAP32[$1_1 >> 2];
  if (!(!$4_1 | HEAP32[$4_1 + 252 >> 2] != 4)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 32 >> 2]]($4_1, $2_1, $3_1, $1_1)
  }
  if ($0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1_1, $3_1, $2_1)
  }
  return 0;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0, $1_1) {
  legalimport$wasm2js_scratch_store_i64($0 | 0, $1_1 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $4_1 = $2_1 >>> 16;
  $5_1 = $0 >>> 16;
  $9_1 = Math_imul($4_1, $5_1);
  $6_1 = $2_1 & 65535;
  $7_1 = $0 & 65535;
  $8_1 = Math_imul($6_1, $7_1);
  $5_1 = ($8_1 >>> 16) + Math_imul($5_1, $6_1) | 0;
  $4_1 = ($5_1 & 65535) + Math_imul($4_1, $7_1) | 0;
  $0 = (((Math_imul($1_1, $2_1) + $9_1 | 0) + Math_imul($0, $3_1) | 0) + ($5_1 >>> 16) | 0) + ($4_1 >>> 16) | 0;
  $1_1 = $8_1 & 65535 | $4_1 << 16;
  i64toi32_i32$HIGH_BITS = $0;
  return $1_1;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10 = 0, $11 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$9 : {
          label$11 : {
           $4_1 = $1_1;
           if ($4_1) {
            $3_1 = $2_1;
            if (!$3_1) {
             break label$11
            }
            break label$9;
           }
           $1_1 = $0;
           $0 = ($0 >>> 0) / ($2_1 >>> 0) | 0;
           legalfunc$wasm2js_scratch_store_i64($1_1 - Math_imul($0, $2_1) | 0, 0);
           i64toi32_i32$HIGH_BITS = 0;
           return $0;
          }
          if (!$0) {
           break label$7
          }
          break label$6;
         }
         $6_1 = $3_1 + -1 | 0;
         if (!($6_1 & $3_1)) {
          break label$5
         }
         $6_1 = (Math_clz32($3_1) + 33 | 0) - Math_clz32($4_1) | 0;
         $7_1 = 0 - $6_1 | 0;
         break label$3;
        }
        $0 = ($4_1 >>> 0) / 0 | 0;
        legalfunc$wasm2js_scratch_store_i64(0, $4_1 - Math_imul($0, 0) | 0);
        i64toi32_i32$HIGH_BITS = 0;
        return $0;
       }
       $3_1 = 32 - Math_clz32($4_1) | 0;
       if ($3_1 >>> 0 < 31) {
        break label$4
       }
       break label$2;
      }
      legalfunc$wasm2js_scratch_store_i64($0 & $6_1, 0);
      if (($3_1 | 0) == 1) {
       break label$1
      }
      if ($3_1) {
       $3_1 = 31 - Math_clz32($3_1 + -1 ^ $3_1) | 0
      } else {
       $3_1 = 32
      }
      $2_1 = $3_1 & 31;
      if (32 <= ($3_1 & 63) >>> 0) {
       $4_1 = 0;
       $0 = $1_1 >>> $2_1;
      } else {
       $4_1 = $1_1 >>> $2_1;
       $0 = ((1 << $2_1) - 1 & $1_1) << 32 - $2_1 | $0 >>> $2_1;
      }
      i64toi32_i32$HIGH_BITS = $4_1;
      return $0;
     }
     $6_1 = $3_1 + 1 | 0;
     $7_1 = 63 - $3_1 | 0;
    }
    $3_1 = $1_1;
    $4_1 = $6_1 & 63;
    $5_1 = $4_1 & 31;
    if (32 <= $4_1 >>> 0) {
     $4_1 = 0;
     $5_1 = $3_1 >>> $5_1;
    } else {
     $4_1 = $3_1 >>> $5_1;
     $5_1 = ((1 << $5_1) - 1 & $3_1) << 32 - $5_1 | $0 >>> $5_1;
    }
    $7_1 = $7_1 & 63;
    $3_1 = $7_1 & 31;
    if (32 <= $7_1 >>> 0) {
     $1_1 = $0 << $3_1;
     $0 = 0;
    } else {
     $1_1 = (1 << $3_1) - 1 & $0 >>> 32 - $3_1 | $1_1 << $3_1;
     $0 = $0 << $3_1;
    }
    if ($6_1) {
     $3_1 = -1;
     $7_1 = $2_1 + -1 | 0;
     if ($7_1 >>> 0 < 4294967295) {
      $3_1 = 0
     }
     while (1) {
      $8_1 = $5_1 << 1 | $1_1 >>> 31;
      $9_1 = $8_1;
      $4_1 = $4_1 << 1 | $5_1 >>> 31;
      $8_1 = $3_1 - ($4_1 + ($7_1 >>> 0 < $8_1 >>> 0) | 0) >> 31;
      $10 = $2_1 & $8_1;
      $5_1 = $9_1 - $10 | 0;
      $4_1 = $4_1 - ($9_1 >>> 0 < $10 >>> 0) | 0;
      $1_1 = $1_1 << 1 | $0 >>> 31;
      $0 = $11 | $0 << 1;
      $8_1 = $8_1 & 1;
      $11 = $8_1;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue
      }
      break;
     };
    }
    legalfunc$wasm2js_scratch_store_i64($5_1, $4_1);
    i64toi32_i32$HIGH_BITS = $1_1 << 1 | $0 >>> 31;
    return $8_1 | $0 << 1;
   }
   legalfunc$wasm2js_scratch_store_i64($0, $1_1);
   $0 = 0;
   $1_1 = 0;
  }
  i64toi32_i32$HIGH_BITS = $1_1;
  return $0;
 }
 
 function __wasm_i64_mul($0, $1_1, $2_1, $3_1) {
  $0 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1_1, $2_1, $3_1);
  return $0;
 }
 
 function __wasm_i64_udiv($0, $1_1, $2_1) {
  return _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1_1, $2_1);
 }
 
 function __wasm_rotl_i32($0) {
  var $1_1 = 0;
  $1_1 = $0 & 31;
  $0 = 0 - $0 & 31;
  return (-1 >>> $1_1 & -2) << $1_1 | (-1 << $0 & -2) >>> $0;
 }
 
 var FUNCTION_TABLE = [null, $1, $3, $5, $43, $45, $45, $44, $41, $41, $52, $68, $65, $55, $46, $67, $64, $56, $48, $66, $61, $58, $70, $71, $28, $70, $71, $76, $75, $78, $77, $70, $71, $94, $96, $95, $273, $107, $98, $99, $103, $114, $115, $116, $270, $111, $117, $118, $119, $275, $120, $121, $148, $109, $110, $147, $292, $293, $114, $123, $114, $125, $114, $192, $132, $134, $135, $136, $274, $120, $138, $131, $129, $130, $114, $140, $141, $114, $143, $144, $71, $146, $276, $277, $151, $152, $193, $71, $188, $186, $187, $181, $71, $191, $189, $210, $201, $291, $202, $203, $204, $205, $206, $207, $209, $208, $70, $225, $226, $227, $223, $230, $232, $233, $237, $234, $236, $235, $239, $238, $240, $243, $244, $245, $246, $246, $241, $242, $70, $225, $249, $251, $252, $263, $264, $267, $210, $269, $271, $272, $278, $279, $280, $281, $282, $282, $284, $285, $286, $287, $288, $289, $210, $294, $70, $225, $297, $225, $299, $225, $70, $225, $302, $70, $225, $304, $306, $307, $313, $314, $315, $311, $312, $210, $318, $321, $319, $322, $317, $323, $324, $325, $326, $327, $328, $107, $330, $331, $326, $333, $334, $335, $114, $318, $321, $341, $350, $118, $317, $120, $353, $354, $344, $345, $355, $114, $357, $342, $347, $358, $114, $360, $343, $346, $355, $114, $365, $366, $368, $274, $370, $364, $362, $363, $70, $225, $378, $225, $378, $70, $71, $394, $395, $70, $114, $388, $391, $392, $271, $393, $276, $397, $389, $399, $400, $411, $423, $424, $403, $425, $426, $427, $407, $416, $417, $418, $286, $429, $430, $292, $286, $292, $434, $293, $401, $402, $437, $208, $208, $293, $293, $207, $406, $442, $443, $444, $413, $404, $445, $446, $447, $410, $408, $448, $449, $280, $292, $292, $292, $292, $292, $293, $293, $419, $419, $460, $208, $208, $293, $293, $207, $409, $399, $71, $412, $414, $207, $419, $419, $207, $70, $225, $286, $469, $470, $471, $496, $497, $504, $506, $508, $505, $509, $510, $511, $512, $507, $502, $503, $516, $517, $514, $518, $518, $523, $523, $535, $523, $523, $520, $521, $522, $536, $515, $531, $532, $529, $530, $104, $105, $70, $225, $549, $70, $225, $562, $225, $566, $225, $293, $293, $572, $70, $225, $580, $225, $293, $293, $585, $70, $225, $595, $589, $590, $591, $593, $596, $225, $293, $293, $600, $225, $293, $293, $604, $225, $606, $119, $523, $293, $70, $225, $419, $612, $225, $616, $619, $620, $626, $627, $621, $622, $623, $624, $210, $192, $225, $631, $634, $635, $636, $640, $641, $70, $225, $293, $643, $485, $486, $486, $646, $647, $651, $652, $653, $655, $656, $658, $659, $657, $225, $661, $523, $225, $460, $264, $523, $669, $670, $671, $264, $673, $225, $675, $680, $681, $682, $264, $673, $225, $690, $693, $694, $695, $264, $673, $699, $700, $702, $264, $673, $706, $707, $710, $711, $709, $708, $225, $713, $225, $715, $225, $717, $225, $719, $225, $721, $225, $723, $225, $725, $225, $727, $225, $729, $225, $731, $734, $735, $744, $741, $738, $653, $653, $747, $736, $748, $737, $749, $742, $739, $292, $751, $743, $225, $753, $225, $755, $759, $760, $761, $763, $768, $764, $765, $767, $770, $202, $202, $776, $777, $419, $225, $780, $781, $225, $783, $225, $783, $814, $815, $811, $812, $813, $817, $818, $819, $820, $821, $293, $839, $293, $840, $286, $832, $835, $837, $834, $833, $836, $225, $847, $71, $850, $71, $852, $856, $857, $860, $861, $878, $246, $873, $871, $868, $858, $863, $862, $877, $225, $881, $225, $881, $225, $885, $70, $225, $887, $888, $225, $890, $225, $890, $225, $894, $70, $225, $896, $897, $70, $225, $899, $225, $901, $70, $225, $903, $904, $905, $906, $907, $914, $915, $917, $918, $928, $71, $419, $931, $600, $276, $925, $938, $939, $941, $949, $950, $980, $945, $955, $956, $957, $958, $947, $948, $944, $952, $953, $951, $974, $975, $976, $977, $977, $280, $942, $959, $960, $959, $960, $972, $971, $967, $963, $954, $946, $969, $940, $973, $943, $523, $983, $984, $985, $986, $225, $988, $989, $990, $991, $992, $993, $995, $996, $997, $998, $1006, $1007, $1032, $523, $1014, $1015, $1020, $1021, $1022, $1023, $1026, $1027, $1029, $1031, $1010, $1016, $1017, $1018, $1019, $225, $1289, $1034, $1054, $419, $1046, $1047, $1052, $1053, $1059, $1060, $928, $1054, $70, $225, $1278, $1279, $225, $1281, $1282, $1284, $1285, $1286, $225, $1290, $1291, $1292, $1293, $70, $225, $1296, $1297, $293];
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new global.Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = newHEAP8;
   HEAP8 = new global.Int8Array(newBuffer);
   HEAP16 = new global.Int16Array(newBuffer);
   HEAP32 = new global.Int32Array(newBuffer);
   HEAPU8 = new global.Uint8Array(newBuffer);
   HEAPU16 = new global.Uint16Array(newBuffer);
   HEAPU32 = new global.Uint32Array(newBuffer);
   HEAPF32 = new global.Float32Array(newBuffer);
   HEAPF64 = new global.Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = newBuffer;
  }
  return oldPages;
 }
 
 return {
  "btGImpactCollisionAlgorithm_RegisterAlgorithm": $1061, 
  "btVector3_create": $1062, 
  "btVector3_setValue": $1063, 
  "btVector3_x": $1064, 
  "btVector3_y": $1065, 
  "btVector3_z": $1066, 
  "btQuaternion_create": $1067, 
  "btQuaternion_setValue": $1068, 
  "btQuaternion_x": $1064, 
  "btQuaternion_y": $1065, 
  "btQuaternion_z": $1066, 
  "btQuaternion_w": $1072, 
  "btTransform_create": $1073, 
  "btTransform_setOrigin": $1074, 
  "btTransform_setRotation": $1075, 
  "btTransform_getOrigin": $1076, 
  "btTransform_getRotation": $1077, 
  "btTransform_equal": $523, 
  "btMotionState_destroy": $1080, 
  "layaMotionState_create": $1081, 
  "layaMotionState_set_rigidBodyID": $1082, 
  "btCollisionObject_create": $1083, 
  "btCollisionObject_setContactProcessingThreshold": $1084, 
  "btCollisionObject_setActivationState": $1085, 
  "btCollisionObject_forceActivationState": $1086, 
  "btCollisionObject_activate": $1087, 
  "btCollisionObject_isActive": $1088, 
  "btCollisionObject_setRestitution": $1089, 
  "btCollisionObject_setFriction": $1090, 
  "btCollisionObject_setRollingFriction": $1091, 
  "btCollisionObject_getCollisionFlags": $1092, 
  "btCollisionObject_setCollisionFlags": $1093, 
  "btCollisionObject_getWorldTransform": $747, 
  "btCollisionObject_setWorldTransform": $1095, 
  "btCollisionObject_setInterpolationWorldTransform": $1096, 
  "btCollisionObject_setCollisionShape": $1097, 
  "btCollisionObject_getCcdMotionThreshold": $1098, 
  "btCollisionObject_setCcdMotionThreshold": $1099, 
  "btCollisionObject_getCcdSweptSphereRadius": $1100, 
  "btCollisionObject_setCcdSweptSphereRadius": $1101, 
  "btCollisionObject_getUserIndex": $1102, 
  "btCollisionObject_setUserIndex": $1103, 
  "btCollisionObject_getActivationState": $1104, 
  "btCollisionObject_setInterpolationAngularVelocity": $1105, 
  "btCollisionObject_setInterpolationLinearVelocity": $1106, 
  "btCollisionObject_destroy": $1080, 
  "RayResultCallback_hasHit": $1108, 
  "RayResultCallback_set_m_collisionFilterGroup": $1109, 
  "RayResultCallback_set_m_collisionFilterMask": $1110, 
  "RayResultCallback_get_m_closestHitFraction": $1065, 
  "RayResultCallback_set_m_closestHitFraction": $1112, 
  "RayResultCallback_get_m_collisionObject": $710, 
  "RayResultCallback_set_m_collisionObject": $1114, 
  "ClosestRayResultCallback_create": $1115, 
  "ClosestRayResultCallback_get_m_rayFromWorld": $1116, 
  "ClosestRayResultCallback_set_m_rayFromWorld": $1117, 
  "ClosestRayResultCallback_get_m_rayToWorld": $1118, 
  "ClosestRayResultCallback_set_m_rayToWorld": $1119, 
  "ClosestRayResultCallback_get_m_hitNormalWorld": $413, 
  "ClosestRayResultCallback_get_m_hitPointWorld": $392, 
  "tBtCollisionObjectArray_size": $1122, 
  "tBtCollisionObjectArray_at": $1123, 
  "tBtCollisionObjectArray_clear": $1124, 
  "tVector3Array_at": $1125, 
  "tVector3Array_clear": $1124, 
  "tScalarArray_at": $1127, 
  "tScalarArray_clear": $1124, 
  "AllHitsRayResultCallback_create": $1129, 
  "AllHitsRayResultCallback_get_m_rayFromWorld": $1130, 
  "AllHitsRayResultCallback_set_m_rayFromWorld": $1131, 
  "AllHitsRayResultCallback_get_m_rayToWorld": $1132, 
  "AllHitsRayResultCallback_set_m_rayToWorld": $1133, 
  "AllHitsRayResultCallback_get_m_hitPointWorld": $1134, 
  "AllHitsRayResultCallback_get_m_hitNormalWorld": $1135, 
  "AllHitsRayResultCallback_get_m_collisionObjects": $1116, 
  "AllHitsRayResultCallback_get_m_hitFractions": $1137, 
  "btManifoldPoint_get_m_positionWorldOnA": $1076, 
  "btManifoldPoint_get_m_positionWorldOnB": $1139, 
  "btManifoldPoint_get_m_normalWorldOnB": $1140, 
  "btManifoldPoint_getDistance": $1141, 
  "ConvexResultCallback_hasHit": $1142, 
  "ConvexResultCallback_set_m_collisionFilterGroup": $1114, 
  "ConvexResultCallback_set_m_collisionFilterMask": $1109, 
  "ConvexResultCallback_get_m_closestHitFraction": $1065, 
  "ConvexResultCallback_set_m_closestHitFraction": $1112, 
  "ClosestConvexResultCallback_create": $1147, 
  "ClosestConvexResultCallback_get_m_hitNormalWorld": $1076, 
  "ClosestConvexResultCallback_get_m_hitPointWorld": $1140, 
  "ClosestConvexResultCallback_get_m_hitCollisionObject": $1150, 
  "ClosestConvexResultCallback_set_m_hitCollisionObject": $1151, 
  "AllConvexResultCallback_create": $1152, 
  "AllConvexResultCallback_get_m_hitNormalWorld": $1153, 
  "AllConvexResultCallback_get_m_hitPointWorld": $1154, 
  "AllConvexResultCallback_get_m_hitFractions": $1155, 
  "AllConvexResultCallback_get_m_collisionObjects": $270, 
  "btCollisionShape_getLocalScaling": $1157, 
  "btCollisionShape_setLocalScaling": $1158, 
  "btCollisionShape_calculateLocalInertia": $1159, 
  "btCollisionShape_destroy": $1080, 
  "btBoxShape_create": $1161, 
  "btCapsuleShape_create": $1162, 
  "btCapsuleShapeX_create": $1163, 
  "btCapsuleShapeZ_create": $1164, 
  "btCylinderShape_create": $1165, 
  "btCylinderShapeX_create": $1166, 
  "btCylinderShapeZ_create": $1167, 
  "btSphereShape_create": $1168, 
  "btConeShape_create": $1169, 
  "btConeShapeX_create": $1170, 
  "btConeShapeZ_create": $1171, 
  "btStaticPlaneShape_create": $1172, 
  "btGImpactShapeInterface_updateBound": $1173, 
  "btGImpactMeshShape_create": $1174, 
  "btCompoundShape_create": $1176, 
  "btCompoundShape_addChildShape": $1177, 
  "btCompoundShape_removeChildShapeByIndex": $1178, 
  "btCompoundShape_getChildShape": $1179, 
  "btCompoundShape_updateChildTransform": $1180, 
  "btStridingMeshInterface_destroy": $1080, 
  "btTriangleMesh_create": $1182, 
  "btTriangleMesh_addTriangle": $1183, 
  "btDefaultCollisionConfiguration_create": $1184, 
  "btDefaultCollisionConfiguration_destroy": $1080, 
  "btPersistentManifold_getBody0": $1186, 
  "btPersistentManifold_getBody1": $1187, 
  "btPersistentManifold_getNumContacts": $1188, 
  "btPersistentManifold_getContactPoint": $1189, 
  "btDispatcher_getNumManifolds": $1190, 
  "btDispatcher_getManifoldByIndexInternal": $1191, 
  "btCollisionDispatcher_create": $1192, 
  "btCollisionDispatcher_destroy": $1080, 
  "btOverlappingPairCache_setInternalGhostPairCallback": $1194, 
  "btDbvtBroadphase_create": $1195, 
  "btDbvtBroadphase_getOverlappingPairCache": $1190, 
  "btDbvtBroadphase_destroy": $1080, 
  "btRigidBodyConstructionInfo_create": $1198, 
  "btRigidBodyConstructionInfo_destroy": $1199, 
  "btRigidBody_create": $1200, 
  "btRigidBody_setCenterOfMassTransform": $804, 
  "btRigidBody_setSleepingThresholds": $1202, 
  "btRigidBody_getLinearSleepingThreshold": $1203, 
  "btRigidBody_getAngularSleepingThreshold": $1204, 
  "btRigidBody_setDamping": $1205, 
  "btRigidBody_setMassProps": $1206, 
  "btRigidBody_setLinearFactor": $1207, 
  "btRigidBody_applyTorque": $1208, 
  "btRigidBody_applyForce": $1209, 
  "btRigidBody_applyCentralForce": $1210, 
  "btRigidBody_applyTorqueImpulse": $1211, 
  "btRigidBody_applyImpulse": $1212, 
  "btRigidBody_applyCentralImpulse": $1214, 
  "btRigidBody_updateInertiaTensor": $1215, 
  "btRigidBody_getLinearVelocity": $1216, 
  "btRigidBody_getAngularVelocity": $1217, 
  "btRigidBody_setLinearVelocity": $1218, 
  "btRigidBody_setAngularVelocity": $1219, 
  "btRigidBody_setAngularFactor": $1220, 
  "btRigidBody_getGravity": $1221, 
  "btRigidBody_setGravity": $1222, 
  "btRigidBody_getTotalForce": $1223, 
  "btRigidBody_getTotalTorque": $1224, 
  "btRigidBody_getFlags": $1225, 
  "btRigidBody_setFlags": $1226, 
  "btRigidBody_clearForces": $1227, 
  "btSequentialImpulseConstraintSolver_create": $1228, 
  "btCollisionWorld_get_m_useContinuous": $1229, 
  "btCollisionWorld_set_m_useContinuous": $1230, 
  "btCollisionWorld_rayTest": $1231, 
  "btCollisionWorld_getDispatchInfo": $1232, 
  "btCollisionWorld_addCollisionObject": $1233, 
  "btCollisionWorld_removeCollisionObject": $1234, 
  "btCollisionWorld_convexSweepTest": $1235, 
  "btCollisionWorld_destroy": $1080, 
  "btDynamicsWorld_addAction": $959, 
  "btDynamicsWorld_removeAction": $960, 
  "btDynamicsWorld_getSolverInfo": $1239, 
  "btDiscreteDynamicsWorld_create": $1240, 
  "btDiscreteDynamicsWorld_setGravity": $1241, 
  "btDiscreteDynamicsWorld_getGravity": $1242, 
  "btDiscreteDynamicsWorld_addRigidBody": $1243, 
  "btDiscreteDynamicsWorld_removeRigidBody": $1244, 
  "btDiscreteDynamicsWorld_stepSimulation": $1245, 
  "btDiscreteDynamicsWorld_clearForces": $1246, 
  "btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution": $1247, 
  "btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution": $1248, 
  "btKinematicCharacterController_create": $1249, 
  "btKinematicCharacterController_setWalkDirection": $1250, 
  "btKinematicCharacterController_setFallSpeed": $1251, 
  "btKinematicCharacterController_setJumpSpeed": $1252, 
  "btKinematicCharacterController_setMaxSlope": $1253, 
  "btKinematicCharacterController_onGround": $1026, 
  "btKinematicCharacterController_jump": $1255, 
  "btKinematicCharacterController_setGravity": $1256, 
  "btKinematicCharacterController_setUp": $1257, 
  "btKinematicCharacterController_setStepHeight": $1258, 
  "btKinematicCharacterController_destroy": $1080, 
  "btPairCachingGhostObject_create": $1260, 
  "btGhostPairCallback_create": $1261, 
  "btFixedConstraint_create": $1262, 
  "btFixedConstraint_destroy": $1080, 
  "btFixedConstraint_setEnabled": $1264, 
  "btCollisionWorld_addConstraint": $1265, 
  "btCollisionWorld_removeConstraint": $1194, 
  "btJointFeedback_create": $1267, 
  "btJointFeedback_destroy": $1268, 
  "btFixedConstraint_setJointFeedback": $1269, 
  "btFixedConstraint_getJointFeedback": $1270, 
  "btFixedConstraint_enableFeedback": $1271, 
  "btJointFeedback_getAppliedForceBodyA": $70, 
  "btJointFeedback_getAppliedForceBodyB": $1139, 
  "btJointFeedback_getAppliedTorqueBodyA": $270, 
  "btJointFeedback_getAppliedTorqueBodyB": $1076
 };
}

var memasmFunc = new ArrayBuffer(initialMemory);
var assignasmFunc = (
    function(mem) {
      var _mem = new Uint8Array(mem);
      return function(offset, s) {
        var bytes, i;
        if (typeof Buffer === 'undefined') {
          bytes = atob(s);
          for (i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes.charCodeAt(i);
        } else {
          bytes = Buffer.from(s, 'base64');
          for (i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes[i];
        }
      }
    }
  )(memasmFunc);
assignasmFunc(1024, "4Fo=");
assignasmFunc(1041, "GRJEOwI/LEcUPTMwChsGRktFNw9JDhcDQB08KzYfSi0cASAlKSEIDBUWIi4QOD4LNDEYL0EJOREjQzJCOgUEJignDSoeNQcaSBMkTP8AAFN1Y2Nlc3MASWxsZWdhbCBieXRlIHNlcXVlbmNlAERvbWFpbiBlcnJvcgBSZXN1bHQgbm90IHJlcHJlc2VudGFibGUATm90IGEgdHR5AFBlcm1pc3Npb24gZGVuaWVkAE9wZXJhdGlvbiBub3QgcGVybWl0dGVkAE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkATm8gc3VjaCBwcm9jZXNzAEZpbGUgZXhpc3RzAFZhbHVlIHRvbyBsYXJnZSBmb3IgZGF0YSB0eXBlAE5vIHNwYWNlIGxlZnQgb24gZGV2aWNlAE91dCBvZiBtZW1vcnkAUmVzb3VyY2UgYnVzeQBJbnRlcnJ1cHRlZCBzeXN0ZW0gY2FsbABSZXNvdXJjZSB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZQBJbnZhbGlkIHNlZWsAQ3Jvc3MtZGV2aWNlIGxpbmsAUmVhZC1vbmx5IGZpbGUgc3lzdGVtAERpcmVjdG9yeSBub3QgZW1wdHkAQ29ubmVjdGlvbiByZXNldCBieSBwZWVyAE9wZXJhdGlvbiB0aW1lZCBvdXQAQ29ubmVjdGlvbiByZWZ1c2VkAEhvc3QgaXMgdW5yZWFjaGFibGUAQWRkcmVzcyBpbiB1c2UAQnJva2VuIHBpcGUASS9PIGVycm9yAE5vIHN1Y2ggZGV2aWNlIG9yIGFkZHJlc3MATm8gc3VjaCBkZXZpY2UATm90IGEgZGlyZWN0b3J5AElzIGEgZGlyZWN0b3J5AFRleHQgZmlsZSBidXN5AEV4ZWMgZm9ybWF0IGVycm9yAEludmFsaWQgYXJndW1lbnQAQXJndW1lbnQgbGlzdCB0b28gbG9uZwBTeW1ib2xpYyBsaW5rIGxvb3AARmlsZW5hbWUgdG9vIGxvbmcAVG9vIG1hbnkgb3BlbiBmaWxlcyBpbiBzeXN0ZW0ATm8gZmlsZSBkZXNjcmlwdG9ycyBhdmFpbGFibGUAQmFkIGZpbGUgZGVzY3JpcHRvcgBObyBjaGlsZCBwcm9jZXNzAEJhZCBhZGRyZXNzAEZpbGUgdG9vIGxhcmdlAFRvbyBtYW55IGxpbmtzAE5vIGxvY2tzIGF2YWlsYWJsZQBSZXNvdXJjZSBkZWFkbG9jayB3b3VsZCBvY2N1cgBTdGF0ZSBub3QgcmVjb3ZlcmFibGUAUHJldmlvdXMgb3duZXIgZGllZABPcGVyYXRpb24gY2FuY2VsZWQARnVuY3Rpb24gbm90IGltcGxlbWVudGVkAE5vIG1lc3NhZ2Ugb2YgZGVzaXJlZCB0eXBlAElkZW50aWZpZXIgcmVtb3ZlZABMaW5rIGhhcyBiZWVuIHNldmVyZWQAUHJvdG9jb2wgZXJyb3IAQmFkIG1lc3NhZ2UATm90IGEgc29ja2V0AERlc3RpbmF0aW9uIGFkZHJlc3MgcmVxdWlyZWQATWVzc2FnZSB0b28gbGFyZ2UAUHJvdG9jb2wgd3JvbmcgdHlwZSBmb3Igc29ja2V0AFByb3RvY29sIG5vdCBhdmFpbGFibGUAUHJvdG9jb2wgbm90IHN1cHBvcnRlZABOb3Qgc3VwcG9ydGVkAEFkZHJlc3MgZmFtaWx5IG5vdCBzdXBwb3J0ZWQgYnkgcHJvdG9jb2wAQWRkcmVzcyBub3QgYXZhaWxhYmxlAE5ldHdvcmsgaXMgZG93bgBOZXR3b3JrIHVucmVhY2hhYmxlAENvbm5lY3Rpb24gcmVzZXQgYnkgbmV0d29yawBDb25uZWN0aW9uIGFib3J0ZWQATm8gYnVmZmVyIHNwYWNlIGF2YWlsYWJsZQBTb2NrZXQgaXMgY29ubmVjdGVkAFNvY2tldCBub3QgY29ubmVjdGVkAE9wZXJhdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzAE9wZXJhdGlvbiBpbiBwcm9ncmVzcwBTdGFsZSBmaWxlIGhhbmRsZQBRdW90YSBleGNlZWRlZABNdWx0aWhvcCBhdHRlbXB0ZWQAQ2FwYWJpbGl0aWVzIGluc3VmZmljaWVudABObyBlcnJvciBpbmZvcm1hdGlvbgAALSsgICAwWDB4AChudWxsKQ==");
assignasmFunc(2720, "GQAKABkZGQAAAAAFAAAAAAAACQAAAAAL");
assignasmFunc(2752, "GQARChkZGQMKBwABGwkLGAAACQYLAAALAAYZAAAAGRkZ");
assignasmFunc(2801, "Dg==");
assignasmFunc(2810, "GQAKDRkZGQANAAACAAkOAAAACQAOAAAO");
assignasmFunc(2859, "DA==");
assignasmFunc(2871, "EwAAAAATAAAAAAkMAAAAAAAMAAAM");
assignasmFunc(2917, "EA==");
assignasmFunc(2929, "DwAAAAQPAAAAAAkQAAAAAAAQAAAQ");
assignasmFunc(2975, "Eg==");
assignasmFunc(2987, "EQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa");
assignasmFunc(3042, "GgAAABoaGgAAAAAAAAk=");
assignasmFunc(3091, "FA==");
assignasmFunc(3103, "FwAAAAAXAAAAAAkUAAAAAAAUAAAU");
assignasmFunc(3149, "Fg==");
assignasmFunc(3161, "FQAAAAAVAAAAAAkWAAAAAAAWAAAWAABTdXBwb3J0IGZvciBmb3JtYXR0aW5nIGxvbmcgZG91YmxlIHZhbHVlcyBpcyBjdXJyZW50bHkgZGlzYWJsZWQuClRvIGVuYWJsZSBpdCwgYWRkIC1sYy1wcmludHNjYW4tbG9uZy1kb3VibGUgdG8gdGhlIGxpbmsgY29tbWFuZC4K");
assignasmFunc(3328, "MDEyMzQ1Njc4OUFCQ0RFRi0wWCswWCAwWC0weCsweCAweABpbmYASU5GAG5hbgBOQU4ALgAKAFB1cmUgdmlydHVhbCBmdW5jdGlvbiBjYWxsZWQhAFN0OXR5cGVfaW5mbwAAANQNAABVDQAATjEwX19jeHhhYml2MTE2X19zaGltX3R5cGVfaW5mb0UAAAAA/A0AAGwNAABkDQAATjEwX19jeHhhYml2MTE3X19jbGFzc190eXBlX2luZm9FAAAA/A0AAJwNAACQDQAAAAAAAMANAAAEAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAAAAAABEDgAABQAAAA4AAAAIAAAACQAAAAoAAAAPAAAAEAAAABEAAABOMTBfX2N4eGFiaXYxMjBfX3NpX2NsYXNzX3R5cGVfaW5mb0UAAAAA/A0AABwOAADADQAAAAAAAKAOAAAGAAAAEgAAAAgAAAAJAAAACgAAABMAAAAUAAAAFQAAAE4xMF9fY3h4YWJpdjEyMV9fdm1pX2NsYXNzX3R5cGVfaW5mb0UAAAD8DQAAeA4AAMANAAAAAAAAHA8AABYAAAAXAAAAGAAAABgAAAAYAAAAAAAAACQPAAAZAAAAGgAAABgAAAAYAAAAGAAAADMwYnRBY3RpdmF0aW5nQ29sbGlzaW9uQWxnb3JpdGhtADIwYnRDb2xsaXNpb25BbGdvcml0aG0A1A0AAAUPAAD8DQAA5A4AABwPAABidENvbGxpc2lvblNoYXBlRGF0YQAxNmJ0Q29sbGlzaW9uU2hhcGUA1A0AAEUPAAAAAAAA1A8AAB8AAAAgAAAAGAAAACEAAAAiAAAAIwAAABgAAAAYAAAAGAAAABgAAAAkAAAAGAAAABgAAAAlAAAAJgAAACcAAAAYAAAAGAAAACgAAAAYAAAAGAAAABgAAAAYAAAAMTNidENvbnZleFNoYXBlAPwNAADEDwAAWA8AAAAAAAAgEQAAHwAAACkAAAAqAAAAIQAAACIAAAAjAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAAJwAAADQAAAA1AAAAKAAAADYAAAA3AAAAOAAAADkAAAAAAAAAQBEAAB8AAAA6AAAAKgAAACEAAAAiAAAAIwAAACsAAAAsAAAALQAAADsAAAAvAAAAMAAAADEAAAAyAAAAMwAAACcAAAA0AAAANQAAACgAAAA2AAAANwAAADgAAAA5AAAAAAAAAGARAAAfAAAAPAAAACoAAAAhAAAAIgAAACMAAAArAAAALAAAAC0AAAA9AAAALwAAADAAAAAxAAAAMgAAADMAAAAnAAAANAAAADUAAAAoAAAANgAAADcAAAA4AAAAOQAAADE0YnRDYXBzdWxlU2hhcGUAAAAA/A0AAAwRAADAEwAAMTVidENhcHN1bGVTaGFwZVgAAAD8DQAALBEAACARAAAxNWJ0Q2Fwc3VsZVNoYXBlWgAAAPwNAABMEQAAIBEAAENhcHN1bGVTaGFwZQBidENhcHN1bGVTaGFwZURhdGEAQ2Fwc3VsZVgAQ2Fwc3VsZVoAAAAAAAAA3BIAAB8AAAA+AAAAPwAAACEAAAAiAAAAIwAAAEAAAAAsAAAAQQAAAEIAAABDAAAARAAAADEAAABFAAAARgAAACcAAABHAAAASAAAACgAAABJAAAANwAAADgAAAA5AAAAAAAAAPgSAAAfAAAASgAAAD8AAAAhAAAAIgAAACMAAABAAAAALAAAAEEAAABLAAAATAAAAEQAAAAxAAAARQAAAEYAAAAnAAAARwAAAEgAAAAoAAAASQAAADcAAAA4AAAAOQAAAAAAAAAUEwAAHwAAAE0AAAA/AAAAIQAAACIAAAAjAAAAQAAAACwAAABBAAAATgAAAE8AAABEAAAAMQAAAEUAAABGAAAAJwAAAEcAAABIAAAAKAAAAEkAAAA3AAAAOAAAADkAAAAxMWJ0Q29uZVNoYXBlAAAA/A0AAMwSAADAEwAAMTJidENvbmVTaGFwZVoAAPwNAADoEgAA3BIAADEyYnRDb25lU2hhcGVYAAD8DQAABBMAANwSAABDb25lAGJ0Q29uZVNoYXBlRGF0YQBDb25lWgBDb25lWA==");
assignasmFunc(4936, "wBMAAB8AAABQAAAAPwAAACEAAAAiAAAAIwAAAFEAAAAsAAAAGAAAABgAAAAkAAAARAAAADEAAABSAAAAUwAAACcAAAA0AAAAGAAAACgAAAAYAAAANwAAADgAAAA5AAAAMjFidENvbnZleEludGVybmFsU2hhcGUA/A0AAKgTAADUDwAAAAAAAPQTAABUAAAAVQAAADE4YnRDb252ZXhQb2x5aGVkcm9uAAAAANQNAADcEwAAAAAAACAVAABWAAAAVwAAAD8AAAAhAAAAIgAAACMAAABRAAAALAAAAFgAAAAYAAAAJAAAAEQAAAAxAAAAUgAAAFMAAAAnAAAANAAAAFkAAAAoAAAAWgAAADcAAAA4AAAAOQAAAFsAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAAAAAAFQVAABWAAAAXAAAAF0AAAAhAAAAIgAAACMAAABeAAAALAAAAFgAAAAYAAAAJAAAAEQAAAAxAAAAUgAAAFMAAAAnAAAANAAAAFkAAAAoAAAAWgAAADcAAAA4AAAAOQAAAFsAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAMjNidFBvbHloZWRyYWxDb252ZXhTaGFwZQAAAPwNAAAEFQAAwBMAADM0YnRQb2x5aGVkcmFsQ29udmV4QWFiYkNhY2hpbmdTaGFwZQAAAAD8DQAALBUAACAVAAAAAAAA/BUAAFYAAABfAAAAYAAAACEAAAAiAAAAIwAAAF4AAAAsAAAAWAAAAGEAAAAkAAAARAAAADEAAABSAAAAUwAAACcAAAA0AAAAWQAAACgAAABaAAAANwAAADgAAAA5AAAAWwAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAMTZidEJVX1NpbXBsZXgxdG80AAD8DQAA6BUAAFQVAAABAAAAAwAAAAYAAAAxOGJ0VHJpYW5nbGVDYWxsYmFjawAAAADUDQAAFBYAADMxYnRJbnRlcm5hbFRyaWFuZ2xlSW5kZXhDYWxsYmFjawAAANQNAAA0FgAAAAAAAMgWAABqAAAAawAAAGwAAABtAAAAbgAAADE2YnRNYW5pZm9sZFJlc3VsdABOMzZidERpc2NyZXRlQ29sbGlzaW9uRGV0ZWN0b3JJbnRlcmZhY2U2UmVzdWx0RQAA1A0AAI8WAAD8DQAAfBYAAMAWAAAxMmJ0RGlzcGF0Y2hlcgAA1A0AANQWAAAAAAAATBcAAHAAAABxAAAAcgAAAHMAAAB0AAAAdQAAAHYAAAB3AAAAeAAAAHkAAAB6AAAAewAAAHwAAAB9AAAAfgAAAH8AAAAyMWJ0Q29sbGlzaW9uRGlzcGF0Y2hlcgD8DQAANBcAAOQWAAAAAAAApBcAAIAAAACBAAAAggAAADIzYnRDb2xsaXNpb25QYWlyQ2FsbGJhY2sAMTdidE92ZXJsYXBDYWxsYmFjawAAANQNAACGFwAA/A0AAGwXAACcFwAAAAAAAOwXAACDAAAAhAAAAIUAAACGAAAAhwAAADI3YnRHSW1wYWN0Q29sbGlzaW9uQWxnb3JpdGhtAAAA/A0AAMwXAAAkDwAAAAAAALQYAABWAAAAiAAAAIkAAAAhAAAAIgAAACMAAABRAAAALAAAAIoAAACLAAAAJAAAAEQAAAAxAAAAUgAAAFMAAAAnAAAANAAAAIwAAAAoAAAAjQAAADcAAACOAAAAjwAAAFsAAACQAAAAkQAAAJIAAACTAAAAlAAAAJUAAACWAAAAlwAAADE3YnRUcmlhbmdsZVNoYXBlRXgAMTVidFRyaWFuZ2xlU2hhcGUAAAD8DQAAlBgAACAVAAD8DQAAgBgAAKgYAABUcmlhbmdsZQBidENvbnZleEludGVybmFsU2hhcGVEYXRhAAAAAAAAhBkAAFYAAACYAAAAYAAAACEAAAAiAAAAIwAAAF4AAAAsAAAAWAAAAGEAAAAkAAAARAAAADEAAABSAAAAUwAAACcAAAA0AAAAWQAAACgAAABaAAAANwAAADgAAAA5AAAAWwAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAMjBidFRldHJhaGVkcm9uU2hhcGVFeAAA/A0AAGwZAAD8FQAAYnRCVV9TaW1wbGV4MXRvNA==");
assignasmFunc(6568, "5BkAAJkAAACaAAAAmwAAAE4xOEdJTV9TaGFwZVJldHJpZXZlcjE5Q2hpbGRTaGFwZVJldHJpZXZlckUA1A0AALgZAAAAAAAAMBoAAJwAAACaAAAAnQAAAE4xOEdJTV9TaGFwZVJldHJpZXZlcjIyVHJpYW5nbGVTaGFwZVJldHJpZXZlckUAAPwNAAAAGgAA5BkAAAAAAAB8GgAAngAAAJoAAACfAAAATjE4R0lNX1NoYXBlUmV0cmlldmVyMTlUZXRyYVNoYXBlUmV0cmlldmVyRQD8DQAAUBoAAOQZAAAAAAAAuBoAAKAAAAChAAAAogAAADI1YnRHSW1wYWN0VHJpYW5nbGVDYWxsYmFjawD8DQAAnBoAACwWAAAAAAAAMBsAAKMAAACkAAAApQAAAE4yN2J0R0ltcGFjdENvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAMzBidENvbGxpc2lvbkFsZ29yaXRobUNyZWF0ZUZ1bmMAAAAA1A0AAAQbAAD8DQAA2BoAACgbAAAAAAAAkBsAAKYAAACnAAAAqAAAAKkAAACqAAAAqwAAAKwAAABidENvbGxpc2lvbk9iamVjdEZsb2F0RGF0YQAxN2J0Q29sbGlzaW9uT2JqZWN0AADUDQAAexsAAAAAAAAwHAAAVgAAAK0AAACuAAAAIQAAACIAAAAjAAAArwAAACwAAACwAAAAsQAAACQAAACyAAAAMQAAAFIAAABTAAAAJwAAALMAAAC0AAAAKAAAALUAAAA3AAAAtgAAALcAAABbAAAAuAAAALkAAAC6AAAAuwAAALwAAAC9AAAAvgAAAL8AAAAxMGJ0Qm94U2hhcGUAAAAA/A0AACAcAAAgFQAAQm94AAAAgD8AAIC/");
assignasmFunc(7266, "gD8AAIC/");
assignasmFunc(7298, "gD8AAIC/");
assignasmFunc(7312, "AQAAAAIAAAAAAAAAAQAAAAIAAAADAAAABAAAAAQAAAAFAAAABgAAAAEAAAACAAAAAwAAAAMAAAAEAAAABQAAAAYAAAAHAAAABQAAAAYAAAAHAAAABwAAAAAAAAA0HgAAHwAAAMAAAADBAAAAIQAAACIAAAAjAAAAwgAAACwAAADDAAAAxAAAAMUAAADGAAAAMQAAAMcAAADIAAAAJwAAAMkAAADKAAAAKAAAAMsAAAA3AAAAOAAAADkAAADMAAAAAAAAAFQeAAAfAAAAzQAAAMEAAAAhAAAAIgAAACMAAADCAAAALAAAAMMAAADOAAAAxQAAAMYAAAAxAAAAxwAAAMgAAAAnAAAAyQAAAM8AAAAoAAAA0AAAADcAAAA4AAAAOQAAANEAAAAAAAAAdB4AAB8AAADSAAAAwQAAACEAAAAiAAAAIwAAAMIAAAAsAAAAwwAAANMAAADFAAAAxgAAADEAAADHAAAAyAAAACcAAADJAAAA1AAAACgAAADVAAAANwAAADgAAAA5AAAA1gAAADE1YnRDeWxpbmRlclNoYXBlAAAA/A0AACAeAADAEwAAMTZidEN5bGluZGVyU2hhcGVYAAD8DQAAQB4AADQeAAAxNmJ0Q3lsaW5kZXJTaGFwZVoAAPwNAABgHgAANB4AAEN5bGluZGVyWQBidEN5bGluZGVyU2hhcGVEYXRhAEN5bGluZGVyWABDeWxpbmRlcloAAAAAAAAAKB8AAB8AAADXAAAA2AAAACEAAAAiAAAAIwAAAFEAAAAsAAAA2QAAANoAAAAkAAAA2wAAANwAAABSAAAAUwAAACcAAADdAAAA3gAAACgAAADfAAAANwAAADgAAAA5AAAAMTNidFNwaGVyZVNoYXBlAPwNAAAYHwAAwBMAAFNQSEVSRQAAAAAAANgfAADgAAAA4QAAAOIAAABaTjIyYnRCdmhUcmlhbmdsZU1lc2hTaGFwZTE0cGVyZm9ybVJheWNhc3RFUDE4YnRUcmlhbmdsZUNhbGxiYWNrUks5YnRWZWN0b3IzUzRfRTIxTXlOb2RlT3ZlcmxhcENhbGxiYWNrADIxYnROb2RlT3ZlcmxhcENhbGxiYWNrANQNAAC4HwAA/A0AAFAfAADQHwAAAAAAAGwgAADgAAAA4wAAAOQAAABaTjIyYnRCdmhUcmlhbmdsZU1lc2hTaGFwZTE3cGVyZm9ybUNvbnZleGNhc3RFUDE4YnRUcmlhbmdsZUNhbGxiYWNrUks5YnRWZWN0b3IzUzRfUzRfUzRfRTIxTXlOb2RlT3ZlcmxhcENhbGxiYWNrAAAAAPwNAAD4HwAA0B8AAAAAAADYIAAA5QAAAOYAAAAYAAAAIQAAACIAAAAjAAAAGAAAABgAAAAYAAAAGAAAACQAAADnAAAA6AAAACUAAAAmAAAAJwAAABgAAAAxNGJ0Q29uY2F2ZVNoYXBlAAAAAPwNAADEIAAAWA8AAAAAAABIIQAA6QAAAOoAAADrAAAAIQAAACIAAAAjAAAA7AAAAO0AAADuAAAA7wAAACQAAADnAAAA6AAAAPAAAADxAAAAJwAAAPIAAAAxOGJ0U3RhdGljUGxhbmVTaGFwZQAAAAD8DQAAMCEAANggAABTVEFUSUNQTEFORQBidFN0YXRpY1BsYW5lU2hhcGVEYXRhAAAAAAAAcCIAAPMAAAD0AAAA9QAAACEAAAAiAAAAIwAAAPYAAAD3AAAA+AAAAPkAAAAkAAAA+gAAAPsAAAAlAAAAJgAAACcAAAD8AAAA/QAAAP4AAAD/AAAAAAEAAAEBAAACAQAAAwEAAAQBAAAFAQAABgEAAAcBAAAIAQAACQEAAAoBAAALAQAADAEAAA0BAAAOAQAADwEAABABAABidEdJbXBhY3RNZXNoU2hhcGVEYXRhADIzYnRHSW1wYWN0U2hhcGVJbnRlcmZhY2UAAAAA/A0AACsiAADYIAAAMjJidEdJbXBhY3RNZXNoU2hhcGVQYXJ0AAAAAPwNAABUIgAASCIAAAAAAAAwIwAAEQEAABIBAAD1AAAAIQAAACIAAAAjAAAAEwEAABQBAAAVAQAAFgEAACQAAAAXAQAA6AAAABgBAAAZAQAAJwAAABoBAAAbAQAAHAEAAP8AAAAdAQAAHgEAAB8BAAAgAQAAIQEAACIBAAAjAQAAJAEAACUBAAAmAQAAJwEAACgBAAApAQAAKgEAACsBAAAsAQAALQEAADE4YnRHSW1wYWN0TWVzaFNoYXBlAAAAAPwNAAAYIwAASCIAAAAAAABIIgAALgEAAC8BAAD1AAAAIQAAACIAAAAjAAAAMAEAABQBAAAYAAAAGAAAACQAAAAxAQAA6AAAACUAAAAmAAAAJwAAADIBAAD9AAAA/gAAAP8AAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAADMBAAA0AQAACgEAABgAAAAYAAAAGAAAABgAAAAPAQAANQEAAAAAAABQJAAANgEAADcBAAA4AQAAOQEAADoBAAA7AQAATjIyYnRHSW1wYWN0TWVzaFNoYXBlUGFydDIzVHJpbWVzaFByaW1pdGl2ZU1hbmFnZXJFADIyYnRQcmltaXRpdmVNYW5hZ2VyQmFzZQAAAADUDQAALCQAAPwNAAD4IwAASCQAAEdJbXBhY3RNZXNoU2hhcGVQYXJ0AEdJbXBhY3RNZXNoAE42YnREYnZ0OElDb2xsaWRlRQDUDQAAfSQ=");
assignasmFunc(9376, "AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA");
assignasmFunc(12163, "QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNQAAAABQMAAAPAEAAD0BAAA+AQAAIQAAACIAAAAjAAAAPwEAAEABAABBAQAAQgEAACQAAABDAQAARAEAAEUBAABGAQAAJwAAAEcBAABIAQAAYnRDb21wb3VuZFNoYXBlQ2hpbGREYXRhAGJ0Q29tcG91bmRTaGFwZURhdGEAMTVidENvbXBvdW5kU2hhcGUAAPwNAAA9MAAAWA8AAENvbXBvdW5kAGJ0SW50SW5kZXhEYXRhAGJ0U2hvcnRJbnRJbmRleFRyaXBsZXREYXRhAGJ0Q2hhckluZGV4VHJpcGxldERhdGEAYnRWZWN0b3IzRmxvYXREYXRhAGJ0VmVjdG9yM0RvdWJsZURhdGEAYnRNZXNoUGFydERhdGEAYnRTdHJpZGluZ01lc2hJbnRlcmZhY2VEYXRhADIzYnRTdHJpZGluZ01lc2hJbnRlcmZhY2UAAADUDQAA+DAAAAAAAACAMQAASQEAAEoBAABLAQAATAEAAE0BAABOAQAATwEAAFABAABRAQAAUgEAAFMBAABUAQAAVQEAAFYBAABXAQAAMjZidFRyaWFuZ2xlSW5kZXhWZXJ0ZXhBcnJheQAAAAD8DQAAYDEAABQxAAAAAAAA5DEAAFgBAABZAQAASwEAAEwBAABNAQAATgEAAE8BAABQAQAAWgEAAFsBAABTAQAAVAEAAFUBAABWAQAAVwEAADE0YnRUcmlhbmdsZU1lc2gAAAAA/A0AANAxAACAMQAAAQAAAAIAAAAAAAAAAgAAAAAAAAABAAAAAAAAAGgyAABeAQAAXwEAAGABAAAzMGJ0R2prRXBhUGVuZXRyYXRpb25EZXB0aFNvbHZlcgAzMGJ0Q29udmV4UGVuZXRyYXRpb25EZXB0aFNvbHZlcgAAANQNAAA9MgAA/A0AABwyAABgMgAAAAAAAMwyAABhAQAAYgEAAGMBAAAxN2J0R2prUGFpckRldGVjdG9yADM2YnREaXNjcmV0ZUNvbGxpc2lvbkRldGVjdG9ySW50ZXJmYWNlAADUDQAAnDIAAPwNAACIMgAAxDIAAAAAAAAQMwAAXgEAAGQBAABlAQAAMzNidE1pbmtvd3NraVBlbmV0cmF0aW9uRGVwdGhTb2x2ZXIA/A0AAOwyAABgMgAAAAAAAOQzAABqAAAAZgEAAGcBAABoAQAAaQEAAFpOMzNidE1pbmtvd3NraVBlbmV0cmF0aW9uRGVwdGhTb2x2ZXIxMmNhbGNQZW5EZXB0aEVSMjJidFZvcm9ub2lTaW1wbGV4U29sdmVyUEsxM2J0Q29udmV4U2hhcGVTNF9SSzExYnRUcmFuc2Zvcm1TN19SOWJ0VmVjdG9yM1M5X1M5X1AxMmJ0SURlYnVnRHJhd0UyMGJ0SW50ZXJtZWRpYXRlUmVzdWx0AAD8DQAAODMAAMAWAAAxMmJ0Q29udmV4Q2FzdAAA1A0AAPAzAAAAAAAAMDQAAGoBAABrAQAAbAEAADE1YnRHamtDb252ZXhDYXN0AAAA/A0AABw0AAAANAAAAAAAAGw0AABqAAAAbQEAAG4BAABvAQAAcAEAADE2YnRQb2ludENvbGxlY3RvcgAA/A0AAFg0AADAFgAAAAAAANA0AABxAQAAcgEAAHMBAAAAAAAA+DQAAHQBAAB1AQAAdgEAAHcBAAB4AQAATjIzYnRDb252ZXhDb252ZXhBbGdvcml0aG0xMENyZWF0ZUZ1bmNFAPwNAACoNAAAKBsAADIzYnRDb252ZXhDb252ZXhBbGdvcml0aG0AAAD8DQAA3DQAACQPAAAAAAAAqDUAAGoAAAB5AQAAegEAAHsBAAB8AQAAWk4yM2J0Q29udmV4Q29udmV4QWxnb3JpdGhtMTZwcm9jZXNzQ29sbGlzaW9uRVBLMjRidENvbGxpc2lvbk9iamVjdFdyYXBwZXJTMl9SSzE2YnREaXNwYXRjaGVySW5mb1AxNmJ0TWFuaWZvbGRSZXN1bHRFMTNidER1bW15UmVzdWx0AAAAAPwNAAAgNQAAwBYAAAAAAABgNgAAagAAAH0BAAB+AQAAfwEAAIABAABaTjIzYnRDb252ZXhDb252ZXhBbGdvcml0aG0xNnByb2Nlc3NDb2xsaXNpb25FUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclMyX1JLMTZidERpc3BhdGNoZXJJbmZvUDE2YnRNYW5pZm9sZFJlc3VsdEUyMWJ0V2l0aG91dE1hcmdpblJlc3VsdAAAAAD8DQAA0DUAAMAWAAAAAAAApDYAAGoAAACBAQAAbAAAAG0AAACCAQAAMjRidFBlcnR1cmJlZENvbnRhY3RSZXN1bHQAAPwNAACINgAAyBYAAAAAAADsNgAAgwEAAIQBAACFAQAAhgEAAIcBAABOMTJidENvbnZleENhc3QxMENhc3RSZXN1bHRFAAAAANQNAADMNgAAAAAAACQ3AABqAQAAigEAAIsBAAAyMmJ0U3Vic2ltcGxleENvbnZleENhc3QAAAAA/A0AAAg3AAAANAAAAAAAAOQ3AACMAQAAjQEAAI4BAACPAQAAkAEAAAAAAAAMOAAAkQEAAJIBAACTAQAAYnRDb252ZXhUcmlhbmdsZUNhbGxiYWNrOjpwcm9jZXNzVHJpYW5nbGUAYnRDb252ZXhDb25jYXZlQ29sbGlzaW9uQWxnb3JpdGhtOjpwcm9jZXNzQ29sbGlzaW9uADMzYnRDb252ZXhDb25jYXZlQ29sbGlzaW9uQWxnb3JpdGhtAAAA/A0AAL43AAAkDwAAMjRidENvbnZleFRyaWFuZ2xlQ2FsbGJhY2sAAPwNAADwNwAALBYAAAAAAACoGAAAVgAAAJQBAACVAQAAIQAAACIAAAAjAAAAUQAAACwAAACKAAAAiwAAACQAAABEAAAAMQAAAFIAAABTAAAAJwAAADQAAACMAAAAKAAAAI0AAAA3AAAAjgAAAI8AAABbAAAAkAAAAJEAAACSAAAAkwAAAJQAAACVAAAAlgAAAJcAAAAAAAAAVDkAAKAAAACWAQAAlwEAAFpOMzNidENvbnZleENvbmNhdmVDb2xsaXNpb25BbGdvcml0aG0yMWNhbGN1bGF0ZVRpbWVPZkltcGFjdEVQMTdidENvbGxpc2lvbk9iamVjdFMxX1JLMTZidERpc3BhdGNoZXJJbmZvUDE2YnRNYW5pZm9sZFJlc3VsdEUzMUxvY2FsVHJpYW5nbGVTcGhlcmVDYXN0Q2FsbGJhY2sAAAD8DQAAtDgAACwWAABwcm9jZXNzVHJpYW5nbGUAAAAAAKw5AACYAQAAmQEAAJoBAACbAQAAnAEAADI4YnRDb21wb3VuZENvbGxpc2lvbkFsZ29yaXRobQAA/A0AAIw5AAAkDwAAAAAAAPg5AACdAQAAngEAAJ8BAACgAQAAoQEAAKIBAACjAQAAMjJidENvbXBvdW5kTGVhZkNhbGxiYWNrAAAAAPwNAADcOQAAkCQAAAAAAAA8OgAApAEAAKUBAACmAQAApwEAAKgBAAAyM2J0SGFzaGVkU2ltcGxlUGFpckNhY2hlAAAA1A0AACA6AAAAAAAAiDoAAKkBAACqAQAAqwEAAKwBAACtAQAAMzZidENvbXBvdW5kQ29tcG91bmRDb2xsaXNpb25BbGdvcml0aG0AAPwNAABgOgAArDkAAAAAAADcOgAAnQEAAK4BAACvAQAAsAEAAKEBAACiAQAAowEAADMwYnRDb21wb3VuZENvbXBvdW5kTGVhZkNhbGxiYWNrAAAAAPwNAAC4OgAAkCQAAGJ0Q29tcG91bmRDb21wb3VuZExlYWZDYWxsYmFjazo6UHJvY2VzcwAAAAAAQDsAABYAAACxAQAAsgEAALMBAAC0AQAAMTZidEVtcHR5QWxnb3JpdGhtAAD8DQAALDsAABwPAAAAAAAAjDsAALUBAAC2AQAAtwEAALgBAAC5AQAAMzJidFNwaGVyZVNwaGVyZUNvbGxpc2lvbkFsZ29yaXRobQAA/A0AAGg7AAAkDwAAAAAAAMg7AABhAQAAugEAALsBAAAyMlNwaGVyZVRyaWFuZ2xlRGV0ZWN0b3IAAAAA/A0AAKw7AADEMgAAAAAAABg8AAC8AQAAvQEAAL4BAAC/AQAAwAEAADM0YnRTcGhlcmVUcmlhbmdsZUNvbGxpc2lvbkFsZ29yaXRobQAAAAD8DQAA8DsAACQP");
assignasmFunc(15408, "OGPtPtoPST9emHs/2g/JP2k3rDFoISIztA8UM2ghojPbD0k/2w9Jv+TLFkDkyxbAAAAAAAAAAIDbD0lA2w9JwAAAAACYPAAAYQEAAMEBAADCAQAAMTZidEJveEJveERldGVjdG9yAAD8DQAAhDwAAMQyAAAAAAAA4DwAAMMBAADEAQAAxQEAAMYBAADHAQAAMjZidEJveEJveENvbGxpc2lvbkFsZ29yaXRobQAAAAD8DQAAwDwAACQPAAAAAAAALD0AAMgBAADJAQAAygEAAMsBAADMAQAAMzFidENvbnZleFBsYW5lQ29sbGlzaW9uQWxnb3JpdGhtAAAA/A0AAAg9AAAcDwAAAAAAAKA9AADNAQAAzgEAAM8BAADQAQAA0QEAANIBAAAzMWJ0RGVmYXVsdENvbGxpc2lvbkNvbmZpZ3VyYXRpb24AMjRidENvbGxpc2lvbkNvbmZpZ3VyYXRpb24AAAAA1A0AAHo9AAD8DQAAWD0AAJg9AAAAAAAA9D0AAKMAAADTAQAA1AEAAE4zM2J0Q29udmV4Q29uY2F2ZUNvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAAAD8DQAAwD0AACgbAAAAAAAAUD4AAKMAAADVAQAA1gEAAE4zM2J0Q29udmV4Q29uY2F2ZUNvbGxpc2lvbkFsZ29yaXRobTE3U3dhcHBlZENyZWF0ZUZ1bmNFAAAAAPwNAAAUPgAAKBsAAAAAAACgPgAAowAAANcBAADYAQAATjI4YnRDb21wb3VuZENvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAAAAA/A0AAHA+AAAoGwAAAAAAAPg+AACjAAAA2QEAANoBAABOMzZidENvbXBvdW5kQ29tcG91bmRDb2xsaXNpb25BbGdvcml0aG0xMENyZWF0ZUZ1bmNFAAAAAPwNAADAPgAAKBsAAAAAAABMPwAAowAAANsBAADcAQAATjI4YnRDb21wb3VuZENvbGxpc2lvbkFsZ29yaXRobTE3U3dhcHBlZENyZWF0ZUZ1bmNFAPwNAAAYPwAAKBsAAAAAAACQPwAAowAAAN0BAADeAQAATjE2YnRFbXB0eUFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAAAAA/A0AAGw/AAAoGwAAAAAAAOQ/AACjAAAA3wEAAOABAABOMzJidFNwaGVyZVNwaGVyZUNvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAAAAA/A0AALA/AAAoGwAAAAAAADhAAACjAAAA4QEAAOIBAABOMzRidFNwaGVyZVRyaWFuZ2xlQ29sbGlzaW9uQWxnb3JpdGhtMTBDcmVhdGVGdW5jRQAA/A0AAARAAAAoGwAAAAAAAIRAAACjAAAA4wEAAOQBAABOMjZidEJveEJveENvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAAPwNAABYQAAAKBsAAAAAAADUQAAAowAAAOUBAADmAQAATjMxYnRDb252ZXhQbGFuZUNvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UA/A0AAKRAAAAoGwAAAAAAAKxBAADnAQAA6AEAAOkBAADqAQAA6wEAAOwBAADtAQAA7gEAAO8BAADwAQAA8QEAAPIBAADzAQAA9AEAAPUBAAD2AQAA9wEAAGJ0SGFzaGVkT3ZlcmxhcHBpbmdQYWlyQ2FjaGU6OnByb2Nlc3NBbGxPdmVybGFwcGluZ1BhaXJzADI4YnRIYXNoZWRPdmVybGFwcGluZ1BhaXJDYWNoZQAyMmJ0T3ZlcmxhcHBpbmdQYWlyQ2FjaGUAAAAA/A0AAIRBAADMWgAA/A0AAGVBAACgQQAAAAAAADxCAACAAAAA+AEAAPkBAABaTjI4YnRIYXNoZWRPdmVybGFwcGluZ1BhaXJDYWNoZTE5Y2xlYW5Qcm94eUZyb21QYWlyc0VQMTdidEJyb2FkcGhhc2VQcm94eVAxMmJ0RGlzcGF0Y2hlckUxN0NsZWFuUGFpckNhbGxiYWNrAAAA/A0AAMxBAACcFwAAAAAAAOBCAACAAAAA+gEAAPsBAABaTjI4YnRIYXNoZWRPdmVybGFwcGluZ1BhaXJDYWNoZTM3cmVtb3ZlT3ZlcmxhcHBpbmdQYWlyc0NvbnRhaW5pbmdQcm94eUVQMTdidEJyb2FkcGhhc2VQcm94eVAxMmJ0RGlzcGF0Y2hlckUxOFJlbW92ZVBhaXJDYWxsYmFjawAAAAD8DQAAXEIAAJwXAAAAAAAAYEMAAPwBAAD9AQAA/gEAAP8BAAAAAgAAAQIAAAICAAADAgAABAIAAAUCAAAGAgAABwIAAAgCAAAJAgAAMTZidERidnRCcm9hZHBoYXNlADIxYnRCcm9hZHBoYXNlSW50ZXJmYWNlAADUDQAAP0MAAPwNAAAsQwAAWEMAAAAAAACoQwAAnQEAAAoCAAALAgAADAIAAKEBAACiAQAAowEAADE4YnREYnZ0VHJlZUNvbGxpZGVyAAAAAPwNAACQQwAAkCQAAAAAAADwQwAAnQEAAA0CAACfAQAADgIAAKEBAACiAQAAowEAADE5QnJvYWRwaGFzZVJheVRlc3RlcgAAAPwNAADYQwAAkCQAAAAAAAA4RAAAnQEAAA8CAACfAQAAEAIAAKEBAACiAQAAowEAADIwQnJvYWRwaGFzZUFhYmJUZXN0ZXIAAPwNAAAgRAAAkCQAAAAAAAC+8/h57GH2PxkwllvG/t6/PYivSu1x9T+k/NQyaAvbv7AQ8PA5lfQ/e7cfCotB17+FA7iwlcnzP3vPbRrpndO/pWSIDBkN8z8xtvLzmx3Qv6COC3siXvI/8Ho7Gx18yb8/NBpKSrvxP588r5Pj+cK/uuWK8Fgj8T9cjXi/y2C5v6cAmUE/lfA/zl9Htp1vqr8AAAAAAADwPw==");
assignasmFunc(17640, "rEea/Yxg7j899SSfyjizP6BqAh+zpOw/upE4VKl2xD/m/GpXNiDrP9LkxEoLhM4/LaqhY9HC6T8cZcbwRQbUP+1BeAPmhug/+J8bLJyO2D9iSFP13GfnP8x7sU6k4Nw/C25JyRZ20j96xnWgaRnXv926p2wKx94/yPa+SEcV578ruCplRxX3PwAAAAAAAPA/dIUV07DZ7z8PiflsWLXvP1FbEtABk+8/e1F9PLhy7z+quWgxh1TvPzhidW56OO8/4d4f9Z0e7z8VtzEK/gbvP8upOjen8e4/IjQSTKbe7j8tiWFgCM7uPycqNtXav+4/gk+dViu07j8pVEjdB6vuP4VVOrB+pO4/zTt/Zp6g7j90X+zodZ/uP4cB63MUoe4/E85MmYml7j/boCpC5azuP+XFzbA3t+4/kPCjgpHE7j9dJT6yA9XuP63TWpmf6O4/R1778nb/7j+cUoXdmxnvP2mQ79wgN+8/h6T73BhY7z9fm3szl3zvP9qQpKKvpO8/QEVuW3bQ7z8AAAAAAADoQpQjkUv4aqw/88T6UM6/zj/WUgz/Qi7mPwAAAAAAADhD/oIrZUcVR0CUI5FL+Gq8PvPE+lDOvy4/1lIM/0Iulj8AAAAAAEcAABECAAASAgAAqAAAAKkAAAATAgAAFAIAABUCAABidFJpZ2lkQm9keUZsb2F0RGF0YQAxMWJ0UmlnaWRCb2R5AAD8DQAA8UYAAJAbAAAAAAAA2EcAABkCAAAaAgAAGwIAABwCAAAdAgAAHgIAAB8CAAAgAgAAIQIAACICAAAjAgAAJAIAACUCAABzb2x2ZUdyb3VwQ2FjaGVGcmllbmRseVNldHVwAHNvbHZlR3JvdXBDYWNoZUZyaWVuZGx5SXRlcmF0aW9ucwBzb2x2ZUdyb3VwADM1YnRTZXF1ZW50aWFsSW1wdWxzZUNvbnN0cmFpbnRTb2x2ZXIAMThidENvbnN0cmFpbnRTb2x2ZXIAAAAA1A0AALhHAAD8DQAAkkcAANBHAAAAAAAAGEgAAGoBAAAmAgAAJwIAADI3YnRDb250aW51b3VzQ29udmV4Q29sbGlzaW9uAAAA/A0AAPhHAAAANAAAAAAAAHBIAACgAAAAKAIAACkCAAAYAAAAAAAAAJxIAACgAAAAKgIAACsCAAAYAAAAMjVidFRyaWFuZ2xlUmF5Y2FzdENhbGxiYWNrAPwNAABUSAAALBYAADI4YnRUcmlhbmdsZUNvbnZleGNhc3RDYWxsYmFjawAA/A0AAHxIAAAsFgAAAAAAADxKAAAsAgAALQIAAC4CAAAvAgAAMAIAADECAAAyAgAAMwIAADQCAAA1AgAANgIAADcCAAA4AgAAT3ZlcmZsb3cgaW4gQUFCQiwgb2JqZWN0IHJlbW92ZWQgZnJvbSBzaW11bGF0aW9uAElmIHlvdSBjYW4gcmVwcm9kdWNlIHRoaXMsIHBsZWFzZSBlbWFpbCBidWdzQGNvbnRpbnVvdXNwaHlzaWNzLmNvbQoAUGxlYXNlIGluY2x1ZGUgYWJvdmUgaW5mb3JtYXRpb24sIHlvdXIgUGxhdGZvcm0sIHZlcnNpb24gb2YgT1MuCgBUaGFua3MuCgB1cGRhdGVBYWJicwBjYWxjdWxhdGVPdmVybGFwcGluZ1BhaXJzAHBlcmZvcm1EaXNjcmV0ZUNvbGxpc2lvbkRldGVjdGlvbgBkaXNwYXRjaEFsbENvbGxpc2lvblBhaXJzAGNvbnZleFN3ZWVwQ29tcG91bmQAY29udmV4U3dlZXBUZXN0ADE2YnRDb2xsaXNpb25Xb3JsZADUDQAAKUoAAAAAAADwSgAAoAAAADkCAAApAgAAOgIAAFpOMTZidENvbGxpc2lvbldvcmxkMjFyYXlUZXN0U2luZ2xlSW50ZXJuYWxFUksxMWJ0VHJhbnNmb3JtUzJfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18xN1JheVJlc3VsdENhbGxiYWNrRUUyOUJyaWRnZVRyaWFuZ2xlUmF5Y2FzdENhbGxiYWNrAAD8DQAAXEoAAHBIAAAAAAAArEsAAKAAAAA7AgAAKQIAADwCAABaTjE2YnRDb2xsaXNpb25Xb3JsZDIxcmF5VGVzdFNpbmdsZUludGVybmFsRVJLMTFidFRyYW5zZm9ybVMyX1BLMjRidENvbGxpc2lvbk9iamVjdFdyYXBwZXJSTlNfMTdSYXlSZXN1bHRDYWxsYmFja0VFMjlCcmlkZ2VUcmlhbmdsZVJheWNhc3RDYWxsYmFja18wAAAAAPwNAAAUSwAAcEgAAAAAAABcTAAAnQEAAD0CAACfAQAAPgIAAKEBAACiAQAAowEAAFpOMTZidENvbGxpc2lvbldvcmxkMjFyYXlUZXN0U2luZ2xlSW50ZXJuYWxFUksxMWJ0VHJhbnNmb3JtUzJfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18xN1JheVJlc3VsdENhbGxiYWNrRUU5UmF5VGVzdGVyAAAA/A0AANxLAACQJAAAAAAAAAhNAAA/AgAAQAIAAEECAABCAgAAWk4xNmJ0Q29sbGlzaW9uV29ybGQyMXJheVRlc3RTaW5nbGVJbnRlcm5hbEVSSzExYnRUcmFuc2Zvcm1TMl9QSzI0YnRDb2xsaXNpb25PYmplY3RXcmFwcGVyUk5TXzE3UmF5UmVzdWx0Q2FsbGJhY2tFRTE1TG9jYWxJbmZvQWRkZXIyAAAAAPwNAACATAAANFkAAAAAAADcTQAAoAAAAEMCAAArAgAARAIAAFpOMTZidENvbGxpc2lvbldvcmxkMjVvYmplY3RRdWVyeVNpbmdsZUludGVybmFsRVBLMTNidENvbnZleFNoYXBlUksxMWJ0VHJhbnNmb3JtUzVfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18yMENvbnZleFJlc3VsdENhbGxiYWNrRWZFMzJCcmlkZ2VUcmlhbmdsZUNvbnZleGNhc3RDYWxsYmFjawAA/A0AACxNAACcSAAAAAAAALROAACgAAAARQIAACsCAABGAgAAWk4xNmJ0Q29sbGlzaW9uV29ybGQyNW9iamVjdFF1ZXJ5U2luZ2xlSW50ZXJuYWxFUEsxM2J0Q29udmV4U2hhcGVSSzExYnRUcmFuc2Zvcm1TNV9QSzI0YnRDb2xsaXNpb25PYmplY3RXcmFwcGVyUk5TXzIwQ29udmV4UmVzdWx0Q2FsbGJhY2tFZkUzMkJyaWRnZVRyaWFuZ2xlQ29udmV4Y2FzdENhbGxiYWNrXzAAAAAA/A0AAABOAACcSAAAAAAAAIxPAACdAQAARwIAAJ8BAABIAgAAoQEAAKIBAACjAQAAWk4xNmJ0Q29sbGlzaW9uV29ybGQyNW9iamVjdFF1ZXJ5U2luZ2xlSW50ZXJuYWxFUEsxM2J0Q29udmV4U2hhcGVSSzExYnRUcmFuc2Zvcm1TNV9QSzI0YnRDb2xsaXNpb25PYmplY3RXcmFwcGVyUk5TXzIwQ29udmV4UmVzdWx0Q2FsbGJhY2tFZkUyMmJ0Q29tcG91bmRMZWFmQ2FsbGJhY2sAAAAA/A0AAOROAACQJAAAAAAAAJBQAABJAgAASgIAAEsCAABMAgAAWlpOMTZidENvbGxpc2lvbldvcmxkMjVvYmplY3RRdWVyeVNpbmdsZUludGVybmFsRVBLMTNidENvbnZleFNoYXBlUksxMWJ0VHJhbnNmb3JtUzVfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18yMENvbnZleFJlc3VsdENhbGxiYWNrRWZFTjIyYnRDb21wb3VuZExlYWZDYWxsYmFjazEyUHJvY2Vzc0NoaWxkRWlTNV9QSzE2YnRDb2xsaXNpb25TaGFwZUUxNExvY2FsSW5mb0FkZGVyAAD8DQAAsE8AABRaAAAAAAAAEFEAAE0CAABOAgAATwIAADE5YnRTaW5nbGVSYXlDYWxsYmFjawAyM2J0QnJvYWRwaGFzZVJheUNhbGxiYWNrADI0YnRCcm9hZHBoYXNlQWFiYkNhbGxiYWNrAADUDQAA4FAAAPwNAADGUAAA/FAAAPwNAACwUAAABFEAAAAAAABIUQAATQIAAFACAABRAgAAMjFidFNpbmdsZVN3ZWVwQ2FsbGJhY2sA/A0AADBRAAAEUQAAAAAAAJRRAABSAgAAUwIAAFQCAABVAgAA/P///5RRAABWAgAAVwIAAFgCAAAxN0RlYnVnRHJhd2NhbGxiYWNrAFgOAACAUQAAAAAAAAIAAAAsFgAAAgAAAFgWAAACBAAAAAAAABRSAABZAgAAWgIAAFsCAABcAgAAaXNsYW5kVW5pb25GaW5kQW5kUXVpY2tTb3J0AHByb2Nlc3NJc2xhbmRzADI1YnRTaW11bGF0aW9uSXNsYW5kTWFuYWdlcgAA1A0AAPdRAAAAAAAAmFIAAF0CAABeAgAAXwIAAGACAAAYAAAAGAAAAGECAAAYAAAAGAAAAGICAABjAgAAYnRUeXBlZENvbnN0cmFpbnRGbG9hdERhdGEAMTdidFR5cGVkQ29uc3RyYWludAAxM2J0VHlwZWRPYmplY3QAANQNAAB/UgAAWA4AAGtSAAAAAAAAAQAAAJBSAAACBAAAAAAAAARVAABkAgAAZQIAAC4CAAAvAgAAMAIAADECAABmAgAAMwIAADQCAABnAgAAaAIAADcCAABpAgAAagIAAGsCAABsAgAAbQIAAG4CAABvAgAAcAIAAHECAAByAgAAcwIAAHQCAAB1AgAAdgIAAHcCAAB4AgAAeQIAAHoCAAB7AgAAfAIAAH0CAAB+AgAAfwIAAIACAACBAgAAggIAAIMCAACEAgAAhQIAAIYCAACHAgAAiAIAAIkCAACKAgAAiwIAAGRlYnVnRHJhd1dvcmxkAGludGVybmFsU2luZ2xlU3RlcFNpbXVsYXRpb24AdXBkYXRlQWN0aW9ucwB1cGRhdGVBY3RpdmF0aW9uU3RhdGUAc29sdmVDb25zdHJhaW50cwBjYWxjdWxhdGVTaW11bGF0aW9uSXNsYW5kcwBwcmVkaWN0aXZlIGNvbnZleFN3ZWVwVGVzdAByZWxlYXNlIHByZWRpY3RpdmUgY29udGFjdCBtYW5pZm9sZHMAY3JlYXRlUHJlZGljdGl2ZUNvbnRhY3RzAENDRCBtb3Rpb24gY2xhbXBpbmcAaW50ZWdyYXRlVHJhbnNmb3JtcwBhcHBseSBzcGVjdWxhdGl2ZSBjb250YWN0IHJlc3RpdHV0aW9uAHByZWRpY3RVbmNvbnN0cmFpbnRNb3Rpb24AYnREeW5hbWljc1dvcmxkRmxvYXREYXRhADIzYnREaXNjcmV0ZUR5bmFtaWNzV29ybGQAMTVidER5bmFtaWNzV29ybGQAAAD8DQAA5FQAADxKAAD8DQAAylQAAPhUAAAAAAAAeFUAAIwCAACNAgAAjgIAADI3SW5wbGFjZVNvbHZlcklzbGFuZENhbGxiYWNrAE4yNWJ0U2ltdWxhdGlvbklzbGFuZE1hbmFnZXIxNElzbGFuZENhbGxiYWNrRQDUDQAAQlUAAPwNAAAkVQAAcFUAAAAAAADEVQAASQIAAI8CAACQAgAAkQIAADM0YnRDbG9zZXN0Tm90TWVDb252ZXhSZXN1bHRDYWxsYmFjawAAAAD8DQAAnFUAABxaAAAAAAAAOFYAAJICAACTAgAAqAAAAKkAAACqAAAAqwAAAKwAAACUAgAAlQIAAAAAAABgVgAAlgIAAJcCAACoAAAAqQAAAKoAAACrAAAArAAAAJgCAACZAgAAMTNidEdob3N0T2JqZWN0APwNAAAoVgAAkBsAADI0YnRQYWlyQ2FjaGluZ0dob3N0T2JqZWN0AAD8DQAARFYAADhWAAAAAAAALFcAAJoCAACbAgAAnAIAAJ0CAACeAgAAnwIAAKACAAChAgAAogIAAKMCAACkAgAApQIAAKYCAACnAgAAqAIAAKkCAACqAgAAqwIAAKwCAAAzMGJ0S2luZW1hdGljQ2hhcmFjdGVyQ29udHJvbGxlcgAzMGJ0Q2hhcmFjdGVyQ29udHJvbGxlckludGVyZmFjZQAxN2J0QWN0aW9uSW50ZXJmYWNlAAAA1A0AAAJXAAD8DQAA4VYAABhXAAD8DQAAwFYAACBXAAAAAAAAgFcAAEkCAACtAgAArgIAAK8CAAA0M2J0S2luZW1hdGljQ2xvc2VzdE5vdE1lQ29udmV4UmVzdWx0Q2FsbGJhY2sAAAD8DQAAUFcAABxaAAAAAAAA8FcAAF0CAACwAgAAsQIAAGACAACyAgAAswIAAGECAAC0AgAAtQIAALYCAAC3AgAAAAAAAAEAAAACAAAAMzBidEdlbmVyaWM2RG9mU3ByaW5nMkNvbnN0cmFpbnQAAAAA/A0AAMxXAACYUgAAAAAAAERYAAC4AgAAuQIAALECAABgAgAAsgIAALMCAABhAgAAtAIAALUCAAC2AgAAtwIAADE3YnRGaXhlZENvbnN0cmFpbnQA/A0AADBYAADwVwAAYnRHZW5lcmljNkRvZlNwcmluZzJDb25zdHJhaW50RGF0YQAAAAAAALhYAAC6AgAAuwIAALwCAAC9AgAAMTVMYXlhTW90aW9uU3RhdGUAMTNidE1vdGlvblN0YXRlAAAA1A0AAJ5YAAD8DQAAjFgAALBYAAAAAAAAPFkAAD8CAAC+AgAAvwIAAMACAABOMTZidENvbGxpc2lvbldvcmxkMjRDbG9zZXN0UmF5UmVzdWx0Q2FsbGJhY2tFAE4xNmJ0Q29sbGlzaW9uV29ybGQxN1JheVJlc3VsdENhbGxiYWNrRQAA1A0AAAtZAAD8DQAA3FgAADRZAAAAAAAAkFkAAMECAADCAgAAvwIAAMMCAABOMTZidENvbGxpc2lvbldvcmxkMjRBbGxIaXRzUmF5UmVzdWx0Q2FsbGJhY2tFAAD8DQAAYFkAADRZAAAAAAAAHFoAAEkCAADEAgAArgIAAMUCAABOMTZidENvbGxpc2lvbldvcmxkMjdDbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tFAE4xNmJ0Q29sbGlzaW9uV29ybGQyMENvbnZleFJlc3VsdENhbGxiYWNrRQAAAADUDQAA5lkAAPwNAAC0WQAAFFoAAAAAAABwWgAAxgIAAMcCAACuAgAAyAIAAE4xNmJ0Q29sbGlzaW9uV29ybGQyM0FsbENvbnZleFJlc3VsdENhbGxiYWNrRQAAAPwNAABAWgAAFFoAAAAAAADUWgAAyQIAAMoCAADLAgAAzAIAAM0CAAAxOWJ0R2hvc3RQYWlyQ2FsbGJhY2sAMjVidE92ZXJsYXBwaW5nUGFpckNhbGxiYWNrAAAA1A0AAK5aAAD8DQAAmFoAAMxa");
assignasmFunc(23264, "BQ==");
assignasmFunc(23276, "AQ==");
assignasmFunc(23296, "AgAAAAMAAACMWw==");
assignasmFunc(23320, "AgAAAAAAAAD/////");
assignasmFunc(23376, "GwAAABwAAAAdAAAAHgAAAArXozwBAAAAbxKDOgEAAACIAQAAiQEAAAAAAEA=");
var retasmFunc = asmFunc({Math,Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,NaN,Infinity}, {memory:{},abort:function() { throw new Error('abort'); },fd_close,fd_write,getWorldTransform,setWorldTransform,fd_seek},memasmFunc);
exports.btGImpactCollisionAlgorithm_RegisterAlgorithm = retasmFunc.btGImpactCollisionAlgorithm_RegisterAlgorithm;
exports.btVector3_create = retasmFunc.btVector3_create;
exports.btVector3_setValue = retasmFunc.btVector3_setValue;
exports.btVector3_x = retasmFunc.btVector3_x;
exports.btVector3_y = retasmFunc.btVector3_y;
exports.btVector3_z = retasmFunc.btVector3_z;
exports.btQuaternion_create = retasmFunc.btQuaternion_create;
exports.btQuaternion_setValue = retasmFunc.btQuaternion_setValue;
exports.btQuaternion_x = retasmFunc.btQuaternion_x;
exports.btQuaternion_y = retasmFunc.btQuaternion_y;
exports.btQuaternion_z = retasmFunc.btQuaternion_z;
exports.btQuaternion_w = retasmFunc.btQuaternion_w;
exports.btTransform_create = retasmFunc.btTransform_create;
exports.btTransform_setOrigin = retasmFunc.btTransform_setOrigin;
exports.btTransform_setRotation = retasmFunc.btTransform_setRotation;
exports.btTransform_getOrigin = retasmFunc.btTransform_getOrigin;
exports.btTransform_getRotation = retasmFunc.btTransform_getRotation;
exports.btTransform_equal = retasmFunc.btTransform_equal;
exports.btMotionState_destroy = retasmFunc.btMotionState_destroy;
exports.layaMotionState_create = retasmFunc.layaMotionState_create;
exports.layaMotionState_set_rigidBodyID = retasmFunc.layaMotionState_set_rigidBodyID;
exports.btCollisionObject_create = retasmFunc.btCollisionObject_create;
exports.btCollisionObject_setContactProcessingThreshold = retasmFunc.btCollisionObject_setContactProcessingThreshold;
exports.btCollisionObject_setActivationState = retasmFunc.btCollisionObject_setActivationState;
exports.btCollisionObject_forceActivationState = retasmFunc.btCollisionObject_forceActivationState;
exports.btCollisionObject_activate = retasmFunc.btCollisionObject_activate;
exports.btCollisionObject_isActive = retasmFunc.btCollisionObject_isActive;
exports.btCollisionObject_setRestitution = retasmFunc.btCollisionObject_setRestitution;
exports.btCollisionObject_setFriction = retasmFunc.btCollisionObject_setFriction;
exports.btCollisionObject_setRollingFriction = retasmFunc.btCollisionObject_setRollingFriction;
exports.btCollisionObject_getCollisionFlags = retasmFunc.btCollisionObject_getCollisionFlags;
exports.btCollisionObject_setCollisionFlags = retasmFunc.btCollisionObject_setCollisionFlags;
exports.btCollisionObject_getWorldTransform = retasmFunc.btCollisionObject_getWorldTransform;
exports.btCollisionObject_setWorldTransform = retasmFunc.btCollisionObject_setWorldTransform;
exports.btCollisionObject_setInterpolationWorldTransform = retasmFunc.btCollisionObject_setInterpolationWorldTransform;
exports.btCollisionObject_setCollisionShape = retasmFunc.btCollisionObject_setCollisionShape;
exports.btCollisionObject_getCcdMotionThreshold = retasmFunc.btCollisionObject_getCcdMotionThreshold;
exports.btCollisionObject_setCcdMotionThreshold = retasmFunc.btCollisionObject_setCcdMotionThreshold;
exports.btCollisionObject_getCcdSweptSphereRadius = retasmFunc.btCollisionObject_getCcdSweptSphereRadius;
exports.btCollisionObject_setCcdSweptSphereRadius = retasmFunc.btCollisionObject_setCcdSweptSphereRadius;
exports.btCollisionObject_getUserIndex = retasmFunc.btCollisionObject_getUserIndex;
exports.btCollisionObject_setUserIndex = retasmFunc.btCollisionObject_setUserIndex;
exports.btCollisionObject_getActivationState = retasmFunc.btCollisionObject_getActivationState;
exports.btCollisionObject_setInterpolationAngularVelocity = retasmFunc.btCollisionObject_setInterpolationAngularVelocity;
exports.btCollisionObject_setInterpolationLinearVelocity = retasmFunc.btCollisionObject_setInterpolationLinearVelocity;
exports.btCollisionObject_destroy = retasmFunc.btCollisionObject_destroy;
exports.RayResultCallback_hasHit = retasmFunc.RayResultCallback_hasHit;
exports.RayResultCallback_set_m_collisionFilterGroup = retasmFunc.RayResultCallback_set_m_collisionFilterGroup;
exports.RayResultCallback_set_m_collisionFilterMask = retasmFunc.RayResultCallback_set_m_collisionFilterMask;
exports.RayResultCallback_get_m_closestHitFraction = retasmFunc.RayResultCallback_get_m_closestHitFraction;
exports.RayResultCallback_set_m_closestHitFraction = retasmFunc.RayResultCallback_set_m_closestHitFraction;
exports.RayResultCallback_get_m_collisionObject = retasmFunc.RayResultCallback_get_m_collisionObject;
exports.RayResultCallback_set_m_collisionObject = retasmFunc.RayResultCallback_set_m_collisionObject;
exports.ClosestRayResultCallback_create = retasmFunc.ClosestRayResultCallback_create;
exports.ClosestRayResultCallback_get_m_rayFromWorld = retasmFunc.ClosestRayResultCallback_get_m_rayFromWorld;
exports.ClosestRayResultCallback_set_m_rayFromWorld = retasmFunc.ClosestRayResultCallback_set_m_rayFromWorld;
exports.ClosestRayResultCallback_get_m_rayToWorld = retasmFunc.ClosestRayResultCallback_get_m_rayToWorld;
exports.ClosestRayResultCallback_set_m_rayToWorld = retasmFunc.ClosestRayResultCallback_set_m_rayToWorld;
exports.ClosestRayResultCallback_get_m_hitNormalWorld = retasmFunc.ClosestRayResultCallback_get_m_hitNormalWorld;
exports.ClosestRayResultCallback_get_m_hitPointWorld = retasmFunc.ClosestRayResultCallback_get_m_hitPointWorld;
exports.tBtCollisionObjectArray_size = retasmFunc.tBtCollisionObjectArray_size;
exports.tBtCollisionObjectArray_at = retasmFunc.tBtCollisionObjectArray_at;
exports.tBtCollisionObjectArray_clear = retasmFunc.tBtCollisionObjectArray_clear;
exports.tVector3Array_at = retasmFunc.tVector3Array_at;
exports.tVector3Array_clear = retasmFunc.tVector3Array_clear;
exports.tScalarArray_at = retasmFunc.tScalarArray_at;
exports.tScalarArray_clear = retasmFunc.tScalarArray_clear;
exports.AllHitsRayResultCallback_create = retasmFunc.AllHitsRayResultCallback_create;
exports.AllHitsRayResultCallback_get_m_rayFromWorld = retasmFunc.AllHitsRayResultCallback_get_m_rayFromWorld;
exports.AllHitsRayResultCallback_set_m_rayFromWorld = retasmFunc.AllHitsRayResultCallback_set_m_rayFromWorld;
exports.AllHitsRayResultCallback_get_m_rayToWorld = retasmFunc.AllHitsRayResultCallback_get_m_rayToWorld;
exports.AllHitsRayResultCallback_set_m_rayToWorld = retasmFunc.AllHitsRayResultCallback_set_m_rayToWorld;
exports.AllHitsRayResultCallback_get_m_hitPointWorld = retasmFunc.AllHitsRayResultCallback_get_m_hitPointWorld;
exports.AllHitsRayResultCallback_get_m_hitNormalWorld = retasmFunc.AllHitsRayResultCallback_get_m_hitNormalWorld;
exports.AllHitsRayResultCallback_get_m_collisionObjects = retasmFunc.AllHitsRayResultCallback_get_m_collisionObjects;
exports.AllHitsRayResultCallback_get_m_hitFractions = retasmFunc.AllHitsRayResultCallback_get_m_hitFractions;
exports.btManifoldPoint_get_m_positionWorldOnA = retasmFunc.btManifoldPoint_get_m_positionWorldOnA;
exports.btManifoldPoint_get_m_positionWorldOnB = retasmFunc.btManifoldPoint_get_m_positionWorldOnB;
exports.btManifoldPoint_get_m_normalWorldOnB = retasmFunc.btManifoldPoint_get_m_normalWorldOnB;
exports.btManifoldPoint_getDistance = retasmFunc.btManifoldPoint_getDistance;
exports.ConvexResultCallback_hasHit = retasmFunc.ConvexResultCallback_hasHit;
exports.ConvexResultCallback_set_m_collisionFilterGroup = retasmFunc.ConvexResultCallback_set_m_collisionFilterGroup;
exports.ConvexResultCallback_set_m_collisionFilterMask = retasmFunc.ConvexResultCallback_set_m_collisionFilterMask;
exports.ConvexResultCallback_get_m_closestHitFraction = retasmFunc.ConvexResultCallback_get_m_closestHitFraction;
exports.ConvexResultCallback_set_m_closestHitFraction = retasmFunc.ConvexResultCallback_set_m_closestHitFraction;
exports.ClosestConvexResultCallback_create = retasmFunc.ClosestConvexResultCallback_create;
exports.ClosestConvexResultCallback_get_m_hitNormalWorld = retasmFunc.ClosestConvexResultCallback_get_m_hitNormalWorld;
exports.ClosestConvexResultCallback_get_m_hitPointWorld = retasmFunc.ClosestConvexResultCallback_get_m_hitPointWorld;
exports.ClosestConvexResultCallback_get_m_hitCollisionObject = retasmFunc.ClosestConvexResultCallback_get_m_hitCollisionObject;
exports.ClosestConvexResultCallback_set_m_hitCollisionObject = retasmFunc.ClosestConvexResultCallback_set_m_hitCollisionObject;
exports.AllConvexResultCallback_create = retasmFunc.AllConvexResultCallback_create;
exports.AllConvexResultCallback_get_m_hitNormalWorld = retasmFunc.AllConvexResultCallback_get_m_hitNormalWorld;
exports.AllConvexResultCallback_get_m_hitPointWorld = retasmFunc.AllConvexResultCallback_get_m_hitPointWorld;
exports.AllConvexResultCallback_get_m_hitFractions = retasmFunc.AllConvexResultCallback_get_m_hitFractions;
exports.AllConvexResultCallback_get_m_collisionObjects = retasmFunc.AllConvexResultCallback_get_m_collisionObjects;
exports.btCollisionShape_getLocalScaling = retasmFunc.btCollisionShape_getLocalScaling;
exports.btCollisionShape_setLocalScaling = retasmFunc.btCollisionShape_setLocalScaling;
exports.btCollisionShape_calculateLocalInertia = retasmFunc.btCollisionShape_calculateLocalInertia;
exports.btCollisionShape_destroy = retasmFunc.btCollisionShape_destroy;
exports.btBoxShape_create = retasmFunc.btBoxShape_create;
exports.btCapsuleShape_create = retasmFunc.btCapsuleShape_create;
exports.btCapsuleShapeX_create = retasmFunc.btCapsuleShapeX_create;
exports.btCapsuleShapeZ_create = retasmFunc.btCapsuleShapeZ_create;
exports.btCylinderShape_create = retasmFunc.btCylinderShape_create;
exports.btCylinderShapeX_create = retasmFunc.btCylinderShapeX_create;
exports.btCylinderShapeZ_create = retasmFunc.btCylinderShapeZ_create;
exports.btSphereShape_create = retasmFunc.btSphereShape_create;
exports.btConeShape_create = retasmFunc.btConeShape_create;
exports.btConeShapeX_create = retasmFunc.btConeShapeX_create;
exports.btConeShapeZ_create = retasmFunc.btConeShapeZ_create;
exports.btStaticPlaneShape_create = retasmFunc.btStaticPlaneShape_create;
exports.btGImpactShapeInterface_updateBound = retasmFunc.btGImpactShapeInterface_updateBound;
exports.btGImpactMeshShape_create = retasmFunc.btGImpactMeshShape_create;
exports.btCompoundShape_create = retasmFunc.btCompoundShape_create;
exports.btCompoundShape_addChildShape = retasmFunc.btCompoundShape_addChildShape;
exports.btCompoundShape_removeChildShapeByIndex = retasmFunc.btCompoundShape_removeChildShapeByIndex;
exports.btCompoundShape_getChildShape = retasmFunc.btCompoundShape_getChildShape;
exports.btCompoundShape_updateChildTransform = retasmFunc.btCompoundShape_updateChildTransform;
exports.btStridingMeshInterface_destroy = retasmFunc.btStridingMeshInterface_destroy;
exports.btTriangleMesh_create = retasmFunc.btTriangleMesh_create;
exports.btTriangleMesh_addTriangle = retasmFunc.btTriangleMesh_addTriangle;
exports.btDefaultCollisionConfiguration_create = retasmFunc.btDefaultCollisionConfiguration_create;
exports.btDefaultCollisionConfiguration_destroy = retasmFunc.btDefaultCollisionConfiguration_destroy;
exports.btPersistentManifold_getBody0 = retasmFunc.btPersistentManifold_getBody0;
exports.btPersistentManifold_getBody1 = retasmFunc.btPersistentManifold_getBody1;
exports.btPersistentManifold_getNumContacts = retasmFunc.btPersistentManifold_getNumContacts;
exports.btPersistentManifold_getContactPoint = retasmFunc.btPersistentManifold_getContactPoint;
exports.btDispatcher_getNumManifolds = retasmFunc.btDispatcher_getNumManifolds;
exports.btDispatcher_getManifoldByIndexInternal = retasmFunc.btDispatcher_getManifoldByIndexInternal;
exports.btCollisionDispatcher_create = retasmFunc.btCollisionDispatcher_create;
exports.btCollisionDispatcher_destroy = retasmFunc.btCollisionDispatcher_destroy;
exports.btOverlappingPairCache_setInternalGhostPairCallback = retasmFunc.btOverlappingPairCache_setInternalGhostPairCallback;
exports.btDbvtBroadphase_create = retasmFunc.btDbvtBroadphase_create;
exports.btDbvtBroadphase_getOverlappingPairCache = retasmFunc.btDbvtBroadphase_getOverlappingPairCache;
exports.btDbvtBroadphase_destroy = retasmFunc.btDbvtBroadphase_destroy;
exports.btRigidBodyConstructionInfo_create = retasmFunc.btRigidBodyConstructionInfo_create;
exports.btRigidBodyConstructionInfo_destroy = retasmFunc.btRigidBodyConstructionInfo_destroy;
exports.btRigidBody_create = retasmFunc.btRigidBody_create;
exports.btRigidBody_setCenterOfMassTransform = retasmFunc.btRigidBody_setCenterOfMassTransform;
exports.btRigidBody_setSleepingThresholds = retasmFunc.btRigidBody_setSleepingThresholds;
exports.btRigidBody_getLinearSleepingThreshold = retasmFunc.btRigidBody_getLinearSleepingThreshold;
exports.btRigidBody_getAngularSleepingThreshold = retasmFunc.btRigidBody_getAngularSleepingThreshold;
exports.btRigidBody_setDamping = retasmFunc.btRigidBody_setDamping;
exports.btRigidBody_setMassProps = retasmFunc.btRigidBody_setMassProps;
exports.btRigidBody_setLinearFactor = retasmFunc.btRigidBody_setLinearFactor;
exports.btRigidBody_applyTorque = retasmFunc.btRigidBody_applyTorque;
exports.btRigidBody_applyForce = retasmFunc.btRigidBody_applyForce;
exports.btRigidBody_applyCentralForce = retasmFunc.btRigidBody_applyCentralForce;
exports.btRigidBody_applyTorqueImpulse = retasmFunc.btRigidBody_applyTorqueImpulse;
exports.btRigidBody_applyImpulse = retasmFunc.btRigidBody_applyImpulse;
exports.btRigidBody_applyCentralImpulse = retasmFunc.btRigidBody_applyCentralImpulse;
exports.btRigidBody_updateInertiaTensor = retasmFunc.btRigidBody_updateInertiaTensor;
exports.btRigidBody_getLinearVelocity = retasmFunc.btRigidBody_getLinearVelocity;
exports.btRigidBody_getAngularVelocity = retasmFunc.btRigidBody_getAngularVelocity;
exports.btRigidBody_setLinearVelocity = retasmFunc.btRigidBody_setLinearVelocity;
exports.btRigidBody_setAngularVelocity = retasmFunc.btRigidBody_setAngularVelocity;
exports.btRigidBody_setAngularFactor = retasmFunc.btRigidBody_setAngularFactor;
exports.btRigidBody_getGravity = retasmFunc.btRigidBody_getGravity;
exports.btRigidBody_setGravity = retasmFunc.btRigidBody_setGravity;
exports.btRigidBody_getTotalForce = retasmFunc.btRigidBody_getTotalForce;
exports.btRigidBody_getTotalTorque = retasmFunc.btRigidBody_getTotalTorque;
exports.btRigidBody_getFlags = retasmFunc.btRigidBody_getFlags;
exports.btRigidBody_setFlags = retasmFunc.btRigidBody_setFlags;
exports.btRigidBody_clearForces = retasmFunc.btRigidBody_clearForces;
exports.btSequentialImpulseConstraintSolver_create = retasmFunc.btSequentialImpulseConstraintSolver_create;
exports.btCollisionWorld_get_m_useContinuous = retasmFunc.btCollisionWorld_get_m_useContinuous;
exports.btCollisionWorld_set_m_useContinuous = retasmFunc.btCollisionWorld_set_m_useContinuous;
exports.btCollisionWorld_rayTest = retasmFunc.btCollisionWorld_rayTest;
exports.btCollisionWorld_getDispatchInfo = retasmFunc.btCollisionWorld_getDispatchInfo;
exports.btCollisionWorld_addCollisionObject = retasmFunc.btCollisionWorld_addCollisionObject;
exports.btCollisionWorld_removeCollisionObject = retasmFunc.btCollisionWorld_removeCollisionObject;
exports.btCollisionWorld_convexSweepTest = retasmFunc.btCollisionWorld_convexSweepTest;
exports.btCollisionWorld_destroy = retasmFunc.btCollisionWorld_destroy;
exports.btDynamicsWorld_addAction = retasmFunc.btDynamicsWorld_addAction;
exports.btDynamicsWorld_removeAction = retasmFunc.btDynamicsWorld_removeAction;
exports.btDynamicsWorld_getSolverInfo = retasmFunc.btDynamicsWorld_getSolverInfo;
exports.btDiscreteDynamicsWorld_create = retasmFunc.btDiscreteDynamicsWorld_create;
exports.btDiscreteDynamicsWorld_setGravity = retasmFunc.btDiscreteDynamicsWorld_setGravity;
exports.btDiscreteDynamicsWorld_getGravity = retasmFunc.btDiscreteDynamicsWorld_getGravity;
exports.btDiscreteDynamicsWorld_addRigidBody = retasmFunc.btDiscreteDynamicsWorld_addRigidBody;
exports.btDiscreteDynamicsWorld_removeRigidBody = retasmFunc.btDiscreteDynamicsWorld_removeRigidBody;
exports.btDiscreteDynamicsWorld_stepSimulation = retasmFunc.btDiscreteDynamicsWorld_stepSimulation;
exports.btDiscreteDynamicsWorld_clearForces = retasmFunc.btDiscreteDynamicsWorld_clearForces;
exports.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution = retasmFunc.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution;
exports.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution = retasmFunc.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution;
exports.btKinematicCharacterController_create = retasmFunc.btKinematicCharacterController_create;
exports.btKinematicCharacterController_setWalkDirection = retasmFunc.btKinematicCharacterController_setWalkDirection;
exports.btKinematicCharacterController_setFallSpeed = retasmFunc.btKinematicCharacterController_setFallSpeed;
exports.btKinematicCharacterController_setJumpSpeed = retasmFunc.btKinematicCharacterController_setJumpSpeed;
exports.btKinematicCharacterController_setMaxSlope = retasmFunc.btKinematicCharacterController_setMaxSlope;
exports.btKinematicCharacterController_onGround = retasmFunc.btKinematicCharacterController_onGround;
exports.btKinematicCharacterController_jump = retasmFunc.btKinematicCharacterController_jump;
exports.btKinematicCharacterController_setGravity = retasmFunc.btKinematicCharacterController_setGravity;
exports.btKinematicCharacterController_setUp = retasmFunc.btKinematicCharacterController_setUp;
exports.btKinematicCharacterController_setStepHeight = retasmFunc.btKinematicCharacterController_setStepHeight;
exports.btKinematicCharacterController_destroy = retasmFunc.btKinematicCharacterController_destroy;
exports.btPairCachingGhostObject_create = retasmFunc.btPairCachingGhostObject_create;
exports.btGhostPairCallback_create = retasmFunc.btGhostPairCallback_create;
exports.btFixedConstraint_create = retasmFunc.btFixedConstraint_create;
exports.btFixedConstraint_destroy = retasmFunc.btFixedConstraint_destroy;
exports.btFixedConstraint_setEnabled = retasmFunc.btFixedConstraint_setEnabled;
exports.btCollisionWorld_addConstraint = retasmFunc.btCollisionWorld_addConstraint;
exports.btCollisionWorld_removeConstraint = retasmFunc.btCollisionWorld_removeConstraint;
exports.btJointFeedback_create = retasmFunc.btJointFeedback_create;
exports.btJointFeedback_destroy = retasmFunc.btJointFeedback_destroy;
exports.btFixedConstraint_setJointFeedback = retasmFunc.btFixedConstraint_setJointFeedback;
exports.btFixedConstraint_getJointFeedback = retasmFunc.btFixedConstraint_getJointFeedback;
exports.btFixedConstraint_enableFeedback = retasmFunc.btFixedConstraint_enableFeedback;
exports.btJointFeedback_getAppliedForceBodyA = retasmFunc.btJointFeedback_getAppliedForceBodyA;
exports.btJointFeedback_getAppliedForceBodyB = retasmFunc.btJointFeedback_getAppliedForceBodyB;
exports.btJointFeedback_getAppliedTorqueBodyA = retasmFunc.btJointFeedback_getAppliedTorqueBodyA;
exports.btJointFeedback_getAppliedTorqueBodyB = retasmFunc.btJointFeedback_getAppliedTorqueBodyB;
}
                var physics3D=window.Physics3D={};
                physics3D.then=(completeFun)=>{
                completeFun(physics3D);
                }
                init(pages*64*1024,interactive,physics3D);
                return physics3D;
                }